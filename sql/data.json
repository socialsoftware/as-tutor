[
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2010/primeiro/exame-20110113-companion-en.tex",
        "quizTitle": "..-data-2010-primeiro-exame-20110113-companion-en",
        "questions": [
            {
                "questionId": "VistasDesempenho",
                "content": "Suppose that there are certain performance requirements for a\n  system, and that you want to show to the stakeholders of the system\n  that the software architecture that you designed meet those\n  requirements.  To do this",
                "image": [],
                "options": [
                    "It makes no sense to use views of the module viewtype, as\n    they give only a static view of the system",
                    "You should use only views of the component-and-connector\n    viewtype, which describe the dynamic aspects of the system",
                    "You may need to use views of the three viewtypes",
                    "The only views that are relevant to performance\n     requirements are views of the Deployment style"
                ]
            },
            {
                "questionId": "AtrQualNegocio",
                "content": "There are other factors that affect the development of a software\n  system, besides its functional requirements and quality attributes.\n  For example, factors such as budget or available time.  These factors",
                "image": [],
                "options": [
                    "Influence the software development process and its\n   management, but not the software architecture of the system under\n   development",
                    "Should be captured in scenarios, as the requirements for\n   quality attributes, and be taken into account in the design of the\n   software architecture",
                    "Are important to determine the feasibility of the system,\n   but once we reach the conclusion that the system can be developed\n   with these restrictions, software architecture no longer depends on\n   these factors",
                    "Are not one of the influences of the software architecture\n   in the Architecture Business Cycle"
                ]
            },
            {
                "questionId": "Reutilizar",
                "content": "Suppose that you are developing a new software system and that you\n  want some part of the system's functionality to be easily reusable\n  in future systems.  Which of the following architectural styles are\n  more suitable to show that the system architecture meets this\n  requirement.",
                "image": [],
                "options": [
                    "The \\emph{decomposition} and \\emph{uses} styles, which\n    allow us to show how dependent a certain module is of other parts\n    of the system",
                    "The \\emph{implementation} style, which allows us to know\n    where are the artifacts that implement a certain module",
                    "The \\emph{layers} style, which allows us to show that the\n    structure of our system is composed of various modules that may be\n    easily reused in other systems",
                    "The \\emph{client-server} and \\emph{deployment} styles,\n    which allow us to isolate the required functionality in a\n    component that executes autonomously and, thus, reusable in other systems"
                ]
            },
            {
                "questionId": "AumentarDesempenhoClienteServidor",
                "content": "Suppose you have a system with a client-server architecture that was\n  designed to support the simultaneous existence of at most 100\n  clients, without specific requirements for availability.  The\n  solution adopted and put into operation four years ago is a single\n  server component to which all clients connect to.  This solution\n  satisfies the initial requirements but with the recent increase in\n  the maximum number of clients to 200, the system no longer has\n  acceptable performance.  Not knowing anything else about the\n  system's architecture, which solution do you propose to solve the\n  system's performance problems?",
                "image": [],
                "options": [
                    "To keep the current architecture of the system and optimize\n    the code to achieve the currently required performance levels",
                    "To change the Deployment view, replicating the server\n    component by more machines",
                    "To review the system's architecture so that part of the\n    computation that is currently done at the server shifts to the\n    clients",
                    "To replace the machine used to run the server component by\n    a more powerful machine that meets the new performance\n    requirements, keeping only a server component running"
                ]
            },
            {
                "questionId": "TresTiposVista",
                "content": "According to the SEI model, there are three different architectural\n  viewtypes that are usually necessary to describe completely a\n  software architecture.",
                "image": [],
                "options": [
                    "Those three viewtypes complement each other, but they are\n    completely independent, showing different aspects that have no\n    relation among them",
                    "The module and component-and-connector viewtypes are\n    independent of one another, but the allocation viewtype depends on\n    the first two",
                    "Each viewtype uses different software elements, such as\n    modules or components, so it does not make sense to talk about\n    relationships among these viewtypes",
                    "Even though each viewtype addresses different aspects of a\n    system, there are relationships among all of them"
                ]
            },
            {
                "questionId": "ModificabilidadeCamadas",
                "content": "In a layered architecture composed by four layers, where the topmost\n  layer is the layer number 1 and the bottommost layer is the layer\n  number 4, which of the layers is more modifiable?",
                "image": [],
                "options": [
                    "Layer 1",
                    "Layer 4",
                    "In a layered architecture all layers are equally modifiable",
                    "Modifiability is not made easier by a layered architecture"
                ]
            },
            {
                "questionId": "UtilidadeArquitectura",
                "content": "Designing the software architecture for a complex system",
                "image": [],
                "options": [
                    "Is useful only if done (even if only partially) before the\n    system's implementation is concluded, given that the architecture\n    is used for restricting the implementation",
                    "Is useful only if done (even if only partially) before the \n    system's implementation is concluded, because if the system is\n    already implemented, its implementation uniquely determines the\n    architecture",
                    "Is useful only if done (even if only partially) before the \n    system passes all of the acceptance tests by the client, given\n    that no more requirements changes will take place after that time",
                    "Is useful even if the implementation is concluded and the\n    system has entered the maintenance phase"
                ]
            },
            {
                "questionId": "ArchitecturalDrivers",
                "content": "The requirements for complex systems are usually very numerous and\n  conflicting among them, making it impossible to satisfy all the\n  requirements in a given implementation of the system.  Therefore,\n  the recommended process for making the design of a software\n  architecture involves the identification of the \\emph{architectural\n    drivers} that will shape the design of architecture.  These\n  \\emph{architectural drivers} should be chosen so that they are",
                "image": [],
                "options": [
                    "A subset of the requirements that do not have conflicts\n     among them and that correspond to the most important business\n     goals",
                    "A subset of the requirements that have many conflicts\n     among them and for which you need to find tradeoffs  early in the\n     design process",
                    "A subset of the requirements that correspond to the \n     most important business goals, regardless of whether they have\n     conflicts among them or not",
                    "A subset of the requirements that is chosen\n     exclusively by the architect by taking into account their\n     influence on the system's architecture"
                ]
            },
            {
                "questionId": "ArqEmailMTA",
                "content": "The email system is composed of various types of components playing\n  different roles.  For example, to send an email, a user can use a\n  program such as Microsoft Outlook or Mozilla Thunderbird,\n  generically designed a \\emph{mail user agent} (MUA), to compose his\n  message and send it.  To send the message, the MUA typically\n  connects to a \\emph{mail transfer agent} (MTA) that receives the\n  message, analyzes the message's headers to determine the recipients\n  and, after querying the DNS system to determine the MTA responsible\n  for each recipient, it connects to the MTAs responsible for the\n  destination addresses to deliver the message.  Each of these MTAs\n  receives the message and stores it locally or forwards it to others\n  MTAs (for example, when there are forwards or aliases configured, or\n  when the MTA that receives the message is not the ultimately\n  responsible for the email address of the recipient).\n\n  Given this simplified description of the operation of the email\n  system, which of the following architectural styles is more\n  appropriate to represent the pattern of interaction between the\n  MTAs?",
                "image": [],
                "options": [
                    "The \\emph{Peer-to-Peer} style",
                    "The \\emph{Shared data} style",
                    "The \\emph{Client-Server} style",
                    "The \\emph{Publish-subscribe} style"
                ]
            },
            {
                "questionId": "ArqEmailIMAP",
                "content": "Considering yet the example of the email system, MUAs are used not\n  only to compose and to send messages, but also for users to read the\n  email messages sent to them. For this, the MUAs have to get those\n  messages from the component that stores them to show them to the\n  user.  Two different ways of doing this is by using the POP and IMAP\n  protocols.  In the first case, messages are moved from the POP\n  server to the user's computer.  In second case, the messages are\n  always stored on the IMAP server, allowing the user to access email\n  from different computers, as long as they are able to connect to the\n  same IMAP server.\n\n  Which of the following architectural styles is more appropriate to\n  represent the pattern of interaction between the MUAs and a IMAP\n  server?",
                "image": [],
                "options": [
                    "The \\emph{Communicating Processes} style",
                    "The \\emph{Pipes-and-filters} style",
                    "The \\emph{Peer-to-Peer} style",
                    "The \\emph{Shared data} style"
                ]
            },
            {
                "questionId": "AlteracaoWebDois",
                "content": "The recent developments in web applications that made them provide a\n  richer user interface led to a change in its architecture: part of\n  the application's computation has to be done in the web browser used\n  by users to access the application.  How is this change in the\n  architecture manifested in the different types of views that\n  describe the software architecture of a web application?",
                "image": [],
                "options": [
                    "Given that the change is on execution aspects, the change\n     manifests itself only through the modification of components and\n     connectors on the system",
                    "This change in the way of how web applications run\n     does not correspond to any change in its architecture, because at\n     the architectural level we still have the same components",
                    "The only architectural change is on the Deployment view,\n     because the components and connectors remain the same, but\n     execute in different places",
                    "This change manifests itself on the relationship between\n     the system's modules and components"
                ]
            },
            {
                "questionId": "XBoardChess",
                "content": "Given the complexity of building a good automatic Chess player,\n  programs that play chess usually make use of existing chess engines,\n  as shown by the following excerpt from Wikipedia:\n \\begin{quote}\n    A chess engine is a computer program that can play the game of\n    chess.\n\n    Most chess engines do not have their own graphical user interface\n    (GUI) but are rather console applications that communicate with a\n    GUI such as XBoard (Linux) and WinBoard (Windows) via a standard\n    protocol.\n  \\end{quote}\n\n  In the web page for XBoard, we may read the following:\n \\begin{quote}\n    XBoard is a graphical user interface for chess [...]. It displays\n    a chessboard on the screen, accepts moves made with the mouse, and\n    loads and saves games in Portable Game Notation (PGN). It serves\n    as a front-end for many different chess services, including:\n\n    \\begin{itemize}\n    \\item Chess engines that will run on your machine and play a game\n      against you or help you analyze, such as GNU Chess, Crafty, or\n      many others.\n    \\item [...]\n    \\end{itemize}\n  \\end{quote}\n \n  Given the above information on XBoard, chess engines, and how they\n  interact at runtime, which of the following architectural styles\n  best represents the of architecture of a software system based on\n  XBoard and one of the engines?",
                "image": [],
                "options": [
                    "The \\emph{Communicating Processes} style",
                    "The \\emph{Uses} style",
                    "The \\emph{Layers} style",
                    "The \\emph{Peer-to-Peer} style"
                ]
            },
            {
                "questionId": "AlterarFuncionalidadesExistentes",
                "content": "Suppose that you join the development team of a very large software\n  system, and that you are assigned some tasks to change some existing\n  features.  Which of the following architectural views would be, in\n  principle, more useful to you to perform those tasks quickly?",
                "image": [],
                "options": [
                    "\\emph{Decomposition} and \\emph{Layers} views",
                    "\\emph{Decomposition} and \\emph{Work assignment} views",
                    "\\emph{Decomposition} and \\emph{Implementation} views",
                    "\\emph{Decomposition} and \\emph{Generalization} views"
                ]
            },
            {
                "questionId": "BlackBoxTesting",
                "content": "Consider the following excerpt from the Wikipedia page on\n  \\emph{black-box testing}:\n  \\begin{quote}\n    Black-box testing is a method of software testing that tests the\n    functionality of an application as opposed to its internal\n    structures or workings.  Specific knowledge of the application's\n    code/internal structure and programming knowledge in general is\n    not required.  Test cases are built around specifications and\n    requirements, i.e., what the application is supposed to do.\n  \\end{quote}\n  \n  Assuming that you belong to the team testing a complex system and\n  that you are responsible for performing black box tests on the\n  system, which of the following architectural views of the system\n  would be most useful to you?",
                "image": [],
                "options": [
                    "\\emph{Decomposition} and \\emph{Implementation} views",
                    "\\emph{Decomposition} and \\emph{Uses} views",
                    "\\emph{Component-and-connector} views",
                    " None, given that to perform black-box testing you do not\n    need to know the code or the internal structure of the application\n    to be tested"
                ]
            },
            {
                "questionId": "TrocarBDCamadas",
                "content": "Consider an enterprise application that needs to keep its data\n  persistently, but for which no one knows yet what is the volume of\n  information that will be handled by the application.  Therefore, the\n  system's architect intends to develop the system such that it is\n  possible to change easily the relational database (RDBMS) component\n  used to store the application's data, replacing it with an RDBMS\n  from another manufacturer.  Given that this is a common requirement,\n  the recommended software architecture for such applications fulfills\n  this requirement by using a particular architectural style.  Which\n  style is it?",
                "image": [],
                "options": [
                    "The \\emph{Shared data} style",
                    "The \\emph{Repository} style",
                    "The \\emph{Layers} style",
                    "The \\emph{Client-Server} style"
                ]
            },
            {
                "questionId": "GoogleAppEngine",
                "content": "Suppose that you decided to use the Google App Engine (GAE) in the\n  development of a web application.\n\n  The GAE is described in the Wikipedia as follows:\n  \\begin{quote}\n    Google App Engine is a platform for developing and hosting web\n    applications in Google-managed data centers.\n\n    Google App Engine is cloud computing technology.  It virtualizes\n    applications across multiple servers and data centers. [...]\n\n    Google App Engine is free up to a certain level of used resources.\n    Fees are charged for additional storage, bandwidth, or CPU cycles\n    required by the application.\n  \\end{quote}\n  \n  On the other hand, the GAE documentation reads the following:\n  \\begin{quote}\n    With App Engine, you can build web applications using standard\n    Java technologies and run them on Google's scalable\n    infrastructure.  The Java environment provides a Java 6 JVM, a\n    Java Servlets interface, and support for standard interfaces to\n    the App Engine scalable datastore and services, such as JDO, JPA,\n    JavaMail, and JCache.  Standards support makes developing your\n    application easy and familiar, and also makes porting your\n    application to and from your own servlet environment\n    straightforward.\n  \\end{quote}\n\n  Taking into account these two perspectives on the GAE, which\n  architectural styles are more appropriate to represent the use of\n  GAE in the software architecture of your web application?",
                "image": [],
                "options": [
                    "The \\emph{Decompostion} and \\emph{Implementation} styles",
                    "The \\emph{Deployment} and \\emph{Uses} styles",
                    "The \\emph{Client-Server} and \\emph{Generalization} styles",
                    "the \\emph{Deployment} and \\emph{Layers} styles"
                ]
            },
            {
                "questionId": "PluginsEclipse",
                "content": "The Eclipse IDE is an open source application written in Java, and\n  is extensible through the use of plug-ins.  In the document that\n  describes the existing plug-ins architecture in Eclipse, we may read\n  the following:\n\n \\begin{quote}\n    A plug-in in Eclipse is a component that provides a certain type\n    of service within the context of the Eclipse workbench. [...]  The\n    plug-in class provides configuration and management support for\n    the plug-in.  A plug-in class in Eclipse must extend\n    \\texttt{org.eclipse.core.runtime.Plugin}, which is an abstract\n    class that provides generic facilities for managing plug-ins.\n  \\end{quote}\n\n  Considering the model and terminology used in the course to describe\n  a software architecture, what kind of views are more appropriate to\n  represent the plug-ins architecture of Eclipse described above?",
                "image": [],
                "options": [
                    "Views of the Component-and-Connector viewtype",
                    "Views of the Module viewtype",
                    "Views of the Allocation viewtype",
                    "All of the above"
                ]
            },
            {
                "questionId": "ServiceLayer",
                "content": "When someone uses the Domain Model pattern to implement the domain\n  logic layer of an enterprise application, it is common to use also\n  the Service Layer pattern. The Service Layer pattern is used in\n  these cases",
                "image": [],
                "options": [
                    "To control and to reduce the interface exposed by the\n    domain logic layer, thereby increasing the modifiability of that\n    layer",
                    "To allow the existence of more than one layer of\n    presentation logic for the same application (to provide for\n    example, an interface to web services)",
                    "To expose different interfaces of the domain logic layer\n    so that it allows the implementation of different layers for the\n    presentation logic",
                    "To facilitate the use of the data access layer by the\n    presentation logic layer"
                ]
            },
            {
                "questionId": "UnitOfWork",
                "content": "The Unit of Work pattern is often used in enterprise applications",
                "image": [],
                "options": [
                    "To implement each of the services that are executed\n    whenever the client makes a request to the server",
                    "To improve the server performance by maintaining a cache\n    of the objects most accessed during the processing of a client request",
                    "To split the computation required to process each request\n    made by the client in smaller units of work that are parallelizable",
                    "To keep a record of changes made to the data during\n     a business transaction and to coordinate the writing of these\n     changes to the database"
                ]
            },
            {
                "questionId": "IdentityMap",
                "content": "The Identity Map pattern is typically used in enterprise\n  applications",
                "image": [],
                "options": [
                    "To improve the performance of the application server because it\n     maintains a cache of entities that reduces the number of operations\n     made on the database",
                    "To avoid loading a lot of data from the database when an\n     entity that has many relationships with other entities is loaded",
                    "To prevent data inconsistencies when there are\n     multiple accesses within the same business operation to the same\n     entity",
                    "To map each entity loaded by the server to the identity\n     of that entity in the database, so that the server is able to\n     update the database later, if needed"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2011/exam1/exame-20120109-companion-en.tex",
        "quizTitle": "..-data-2011-exam1-exame-20120109-companion-en",
        "questions": [
            {
                "questionId": "HadoopEscalabilidadePossivelINGLES",
                "content": "The scalability quality is achieved in the Hadoop system only because",
                "image": [],
                "options": [
                    "Stakeholders requirements do not emphasize performance as the most important issue",
                    "The Hadoop small development team is highly competent and skilled",
                    "Stakeholders do not mind if two simultaneous reads on the same file by two different applications may return different values",
                    "The Hadoop system implementation uses complex distributed algorithms for scalability"
                ]
            },
            {
                "questionId": "HadoopDisponibilidadeDesempenhoINGLES",
                "content": "In the Hadoop system:",
                "image": [],
                "options": [
                    "There is a conflict between availability and performance qualities",
                    "The availability quality is more important, thus performance is addressed afterwards and depends on the tactics used for availability",
                    "There is no conflict between availability and performance qualities",
                    "Availability and performance qualities are ensured at deployment time only"
                ]
            },
            {
                "questionId": "HadoopTacticasRecuperacaoFaltasINGLES",
                "content": "In the Hadoop system the fault recovery tactics are:",
                "image": [],
                "options": [
                    "Active replication and passive replication",
                    "Active replication, passive replication, and spare",
                    "Passive replication and spare",
                    "Quorum, active replication, and passive replication"
                ]
            },
            {
                "questionId": "HadoopTacticasRecuperacaoFaltasDoisINGLES",
                "content": "In the Hadoop system the tactics used to reintroduce a DataNode after its failure are:",
                "image": [],
                "options": [
                    "Shadow operation",
                    "State Resynchronization",
                    "Checkpoint/Rollback",
                    "All of the above"
                ]
            },
            {
                "questionId": "HadoopTacticasSegurancaINGLES",
                "content": "The security tactics used in The Hadoop system deployed at Yahoo! are:",
                "image": [],
                "options": [
                    "Authenticate users and authorize users",
                    "Authenticate users, authorize users, and limit exposure",
                    "Authenticate users, authorize users, and limit access",
                    "Authenticate users, authorize users, limit access, and maintain integrity"
                ]
            },
            {
                "questionId": "HadoopHeartbeatINGLES",
                "content": "During normal operation DataNodes use the heartbeat tactic",
                "image": [],
                "options": [
                    "Because this tactic does not overload the NameNode",
                    "But they could have used the ping tactic instead, because it has the same overhead for the NameNode",
                    "But the exceptions tactic could have been used as well",
                    "To inform other DataNodes about their availability"
                ]
            },
            {
                "questionId": "ModulosCamadasINGLES",
                "content": "A layer, in the layers architectural style, is a module:",
                "image": [],
                "options": [
                    "Because it has a well-defined interface",
                    "That aggregates modules according to the uses relationship",
                    "Because it has a well-defined interface and hides the internal behaviour",
                    "That provides a set of complete and cohesive services"
                ]
            },
            {
                "questionId": "UtilizacaoImpactoAlteracoesINGLES",
                "content": "The uses architectural style allows to assess the impact of changes in modules",
                "image": [],
                "options": [
                    "Because it is a natural extension of the use cases concept",
                    "But it requires additional information on the modules internal structure",
                    "But it needs to be complemented, for each uses relationship, with the level of coupling",
                    "And contains all the information required to assess effectively the impact"
                ]
            },
            {
                "questionId": "UtilizacaoNotificaINGLES",
                "content": "In the uses architectural style a call does not necessarily\n    correspond to a uses relationship because:",
                "image": [],
                "options": [
                    "The call's results may not have impact on the correct execution of the caller module",
                    "The call's results may not have impact on the correct execution of the callee module",
                    "The call may not transfer data between the modules",
                    "The uses relationship requires calls to return control to the caller module"
                ]
            },
            {
                "questionId": "UtilizacaoNotificaDoisINGLES",
                "content": "According to the attribute-driven design process, we should design\n    the software architecture for a system based on a selected list of\n    requirements, which are called the \\textit{architectural drivers}.\n    These architectural drivers should be sorted according to their\n    importance for the system's stakeholders because",
                "image": [],
                "options": [
                    "We should always satisfy in the first place the requirements\n      of more important stakeholders (such as the client)",
                    "If no order was established among them, we would not know\n      from where should we start the design process",
                    "If one of the stakeholders complains that his requirement\n      is not satisfied, we may explain to him that there were other more\n      important requirements first",
                    "When it is not possible to satisfy all of the requirements\n      optimally, we should be aware of their relative importance so that\n      we may find a solution that corresponds to a satisfactory trade-off"
                ]
            },
            {
                "questionId": "HadoopInteraccaoDataNodesINGLES",
                "content": "In the HDFS system, the main responsibility of the DataNode\n    component is to store the data blocks corresponding to the\n    client's files, and usually there are several instances of this\n    component on each system.  The architectural style that best\n    describes the interaction pattern among the various instances of\n    DataNode is",
                "image": [],
                "options": [
                    "The Shared data style",
                    "The Pipes-and-filters style",
                    "The Peer-to-Peer style",
                    "The Client-Server style"
                ]
            },
            {
                "questionId": "HadoopInteraccaoNameNodeDataNodesINGLES",
                "content": "According to Section 8.2.3, the NameNode component issues commands\n    to the DataNodes so that they execute some operations on their\n    blocks, whereas DataNodes have to send reports regularly to the\n    NameNode.  The architecture that best describes how these two\n    types of components interact in the HDFS system is",
                "image": [],
                "options": [
                    "A Client-Server architecture, where the DataNode is the\n      Client and the NameNode is the Server",
                    "A Client-Server architecture, where the NameNode is the\n      Client and the DataNode is the Server",
                    "A Peer-to-Peer architecture",
                    "A Communicating Processes architecture"
                ]
            },
            {
                "questionId": "HadoopNameNodeComoConectorINGLES",
                "content": "Imagine that you intend to describe how a client reads a file from\n    an HDFS system while supporting sporadic failures in the hardware\n    of some DataNodes, but without affecting the availability of the\n    system.  To accomplish that, you want to use a\n    component-and-connector view containing only two types of\n    components: the HDFS Client, and the DataNode.",
                "image": [],
                "options": [
                    "That view will always be incomplete without the NameNode,\n      because the HDFS Client needs to interact with it",
                    "That view will always be incomplete without the NameNode,\n      because the DataNode needs to interact with it",
                    "The view does not need to include the NameNode, but in\n      that case it will not be possible to reason about the\n      availability of the system",
                    "The availability guarantee may be given by the usage of\n      an adequate connector between the HDFS Client and the DataNodes"
                ]
            },
            {
                "questionId": "HadoopNameNodeThreadsINGLES",
                "content": "The last paragraph of Section 8.2.2 describes the solution used by\n    the NameNode to obtain a certain level of performance while\n    writing to disk.  Which architectural style is more adequate to\n    represent the solution used?",
                "image": [],
                "options": [
                    "The Shared Data style",
                    "The Communicating Processes style",
                    "The Deployment style",
                    "The Peer-to-Peer style"
                ]
            },
            {
                "questionId": "HadoopReplicarNameNodeINGLES",
                "content": "The architecture of the HDFS system only allows the existence of\n    one NameNode.  Given the responsibilities of this component and\n    the current architecture of HDFS, what would be the consequences\n    of adding the possibility of having replicas of the NameNode in\n    the system?",
                "image": [],
                "options": [
                    "The system would respond faster to all of the\n      clients' requests",
                    "The performance of the system would not change",
                    "The system would respond faster to requests about\n      file locations",
                    "The system would respond faster to requests made by\n      DataNodes to update the metadata"
                ]
            },
            {
                "questionId": "ServiceLayerINGLES",
                "content": "When someone uses the Domain Model pattern to implement the domain\n    logic layer of an enterprise application, it is common to use also\n    the Service Layer pattern. The Service Layer pattern is used in\n    these cases",
                "image": [],
                "options": [
                    "To control and to reduce the interface exposed by the\n      domain logic layer, thereby increasing the modifiability of that\n      layer",
                    "To allow the existence of more than one interface to the\n      domain logic layer (to provide, for example, an interface to web\n      services)",
                    "To allow the existence of different presentation logic layers",
                    "To facilitate the use of the data access layer by the\n      presentation logic layer"
                ]
            },
            {
                "questionId": "SharedDataAccessorsDirectINGLES",
                "content": "Imagine that you are developing an architectural view where you\n    are using the Shared Data style and that a member of your team\n    proposes that two of Data Accessors communicate directly between\n    them.  In your opinion",
                "image": [],
                "options": [
                    "That should not be allowed because all interactions among\n      components must be made through the Repository",
                    "That is an acceptable solution if we want to reduce the\n      dependencies among the various components of the system",
                    "That is the recommended solution if there is a control\n      flow that involves the choreography of both components",
                    "That interaction cannot be represented in this view, but\n      it may in another view of the system's architecture"
                ]
            },
            {
                "questionId": "WhiteBoxTestingINGLES",
                "content": "Consider the following excerpt from the Wikipedia page on\n    \\emph{white-box testing}:\n    \\begin{quote}\n      White-box testing is a method of testing software that tests\n      internal structures or workings of an application, as opposed to\n      its functionality. In white-box testing an internal perspective\n      of the system (including the module's code), as well as\n      programming skills, are required and used to design test\n      cases. The tester chooses inputs to exercise paths through the\n      code and determine the appropriate outputs.\n    \\end{quote}\n  \n    Assuming that you belong to the team testing a complex system and\n    that you are responsible for performing white box tests on the\n    system, which of the following architectural views of the system\n    would be most useful to you?",
                "image": [],
                "options": [
                    "Work Assignment views",
                    "Generalization views",
                    "Deployment views",
                    "Implementation views"
                ]
            },
            {
                "questionId": "TresTiersINGLES",
                "content": "Currently, the most popular architecture for an enterprise\n    application is composed of 3 tiers.  The three tiers are",
                "image": [],
                "options": [
                    "The presentation logic layer, domain logic layer, and\n      data access layer",
                    "The traditional web applications, the mashups, and the rich internet applications (RIAs)",
                    "The web browser, o web server, and the data base",
                    "The web services layer, the domain logic layer, and the\n      data access layer"
                ]
            },
            {
                "questionId": "TempoRespostaAplicacaoEmpresarialINGLES",
                "content": "Suppose that you are designing the software architecture for an\n    enterprise application that has requirements about the maximum\n    response time for a certain type of requests.  Moreover, assume\n    that those requests arrive at the system periodically, whereas the\n    remaining requests have an unpredictable frequency.  Finally,\n    assume that your system will have a single server that will be\n    executing on a predefined machine with a 12-core AMD processor.\n    To show to the stakeholders that your system satisfies the\n    performance requirements you have to use views of which\n    architectural style?",
                "image": [],
                "options": [
                    "The Work Assignment style",
                    "The Client-Server style",
                    "The Deployment style",
                    "The Communicating Processes style"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2011/exam2/exame-20120203-companion-en.tex",
        "quizTitle": "..-data-2011-exam2-exame-20120203-companion-en",
        "questions": [
            {
                "questionId": "HadoopStakeholdersEurosINGLES",
                "content": "From the stakeholders perspective the use of low cost servers to build the clusters is:",
                "image": [],
                "options": [
                    "Essential to ensure the system scalability",
                    "Essential to reduce costs whenever there is a fault in a hardware element",
                    "Essential to ensure the system portability",
                    "Essential to facilitate the integration with legacy systems"
                ]
            },
            {
                "questionId": "HadoopCheckpointBackupNodeINGLES",
                "content": "In the Hadoop system the use of a \\emph{BackupNode} instead of a \\emph{CheckpointNode}:",
                "image": [],
                "options": [
                    "Allows the creation of checkpoints but it is necessary to request all the information from the \\emph{NameNode} whenever a new checkpoint creation begins",
                    "Does not allow the creation of checkpoints",
                    "Allows the creation of checkpoints using the information that it gradually receives from the \\emph{NameNode}",
                    "Allows the creation of checkpoints without requiring any kind of information from the \\emph{NameNode}"
                ]
            },
            {
                "questionId": "HadoopCheckpointINGLES",
                "content": "In the Hadoop system when the \\emph{CheckpointNode} and the \\emph{NameNode} are deployed in different nodes, the \\emph{CheckpointNode} provides:",
                "image": [],
                "options": [
                    "Performance and availability qualities",
                    "Performance qualities only",
                    "Availability qualities only",
                    "Performance and security qualities"
                ]
            },
            {
                "questionId": "HadoopPoliticaLocalizacaoReplicasINGLES",
                "content": "The Hadoop system support of different block placement policies:",
                "image": [],
                "options": [
                    "Increases the system modifiability whenever it is necessary to change the placement policy",
                    "Allows \\emph{DataNodes} to decide which replicas they have",
                    "Increases the system modifiability whenever it is necessary to change the the deployment structure",
                    "Allow several replicas to be located in different \\emph{DataNodes}"
                ]
            },
            {
                "questionId": "HadoopPingINGLES",
                "content": "In the Hadoop system, during normal operation, \\emph{NameNode}\n    could use a ping tactic to know whether \\emph{DataNodes} are available",
                "image": [],
                "options": [
                    "Because this tactic does not overload the \\emph{NameNode}",
                    "But it would imply an \\emph{overhead} in the \\emph{NameNode}",
                    "But an exceptions tactic could be used as well",
                    "To notify other \\emph{DataNodes} that they are available"
                ]
            },
            {
                "questionId": "HadoopInstalacaoINGLES",
                "content": "Knowing the deployment structure in the Hadoop system is critical\n    to the effective system operation. Therefore, for each deployment,\n    the administrator can configure a script that returns a node's\n    rack identification given a node's address (see section 8.3.2).",
                "image": [],
                "options": [
                    "This script is part of the system deployment module",
                    "This script is a module that implements a security tactic",
                    "This script is a module that implements a modifiability tactic",
                    "This script cannot be considered a module because it is only a script"
                ]
            },
            {
                "questionId": "TacticaCheckpointRollbackINGLES",
                "content": "The \\emph{Checkpoint/rollback} tactic is a tactic for",
                "image": [],
                "options": [
                    "Availability, security, and performance",
                    "Availability only",
                    "Availability and performance",
                    "Availability and security"
                ]
            },
            {
                "questionId": "TiposVistaDesempenhoINGLES",
                "content": "To analyse the performance of a system",
                "image": [],
                "options": [
                    "Only views of the component-and-connector viewtype are needed",
                    "All viewtypes may be necessary",
                    "Only views of the component-and-connector viewtype and allocation viewtype are needed",
                    "Views of the module viewtype are not needed"
                ]
            },
            {
                "questionId": "UsaCircularINGLES",
                "content": "A view of the \\emph{Uses} style that contains a loop in the uses relationships",
                "image": [],
                "options": [
                    "Means that it may be difficult to design incremental testing",
                    "Means that it is possible to implement the system according to an incremental development process",
                    "Means that the modules that are part of the loop should be implemented first",
                    "Gives a hint to replace the uses relations by is-a relations"
                ]
            },
            {
                "questionId": "UsaPodeUsarINGLES",
                "content": "The main difference between the \\emph{Uses} relation of the Uses\n    style and the \\emph{Allowed to Use} relation of the Layers style",
                "image": [],
                "options": [
                    "Is that the \\emph{Allowed to Use} relation defines a restriction for the possible \\emph{Uses} relations between modules belonging to different layers",
                    "Is that the \\emph{Uses} relation can happen only among modules belonging to the same layer",
                    "Is that the \\emph{Allowed to Use} relation does not imply that the correctness of the upper layer depends on the correct implementation of its nearest lower layer",
                    "Is that the \\emph{Allowed to Use} relation is a \\emph{Uses} relation between layers"
                ]
            },
            {
                "questionId": "HadoopFileWriteBufferedINGLES",
                "content": "The third paragraph of section 8.3.1 describes the buffering\n    mechanism used by an HDFS client when it is writing to a file.\n    How would you describe this mechanism using an architectural view?",
                "image": [],
                "options": [
                    "It does not make sense to use an architectural view for\n      this, because this is an implementation detail that does affect\n      the system's qualities",
                    "Using a view of the module viewtype that shows the\n      interfaces available for the client to do the write",
                    "Using a view of the component-and-connector viewtype",
                    "Using a view of the architectural style Deployment"
                ]
            },
            {
                "questionId": "HadoopDisponibilidadeDadosINGLES",
                "content": "One of the key requirements for the HDFS system is that the data\n    stored in the system remains available, even in the presence of\n    various types of failures (non simultaneous) in the hardware in\n    which the system executes.  To show that the system satisfies this\n    requirement",
                "image": [],
                "options": [
                    "We must use various different views, both of the\n      component-and-connector and the allocation viewtypes",
                    "We just have to show, through component-and-connector\n      views, that the system maintains replicas of the data in\n      different components",
                    "We just have to show, through Deployment views,\n      that the \\emph{DataNode} component executes in more than one\n      machine of the cluster",
                    "We just have to show, through Decomposition views, that\n      there are modules responsible for the replication of file blocks"
                ]
            },
            {
                "questionId": "HadoopMapReduceINGLES",
                "content": "Consider the following excerpt from the tutorial on the Hadoop\n    MapReduce:\n\n    \\begin{quote}\n      Hadoop MapReduce is a software framework for easily writing\n      applications which process vast amounts of data (multi-terabyte\n      data-sets) in-parallel on large clusters (thousands of nodes) of\n      commodity hardware in a reliable, fault-tolerant manner.\n\n      A MapReduce job usually splits the input data-set into\n      independent chunks which are processed by the map tasks in a\n      completely parallel manner.  The framework sorts the outputs of\n      the maps, which are then input to the reduce tasks. Typically\n      both the input and the output of the job are stored in a\n      file-system.  The framework takes care of scheduling tasks,\n      monitoring them and re-executes the failed tasks.\n    \\end{quote}\n\n    Which architectural style of the component-and-connector viewtype\n    is more adequate to describe how the MapReduce works, taking into\n    account its main advantages in solving a problem?",
                "image": [],
                "options": [
                    "The Shared data style",
                    "The Pipes-and-filters style",
                    "The Peer-to-Peer style",
                    "The Communicating Processes style"
                ]
            },
            {
                "questionId": "HadoopComoDatabaseINGLES",
                "content": "Suppose that you are implementing a web application and that you\n    decided to use an HDFS system to store the data of your\n    application---that is, your web application will be a client of\n    the HDFS system.  How does this decision affects the architecture\n    of your web application?",
                "image": [],
                "options": [
                    "The component-and-connector view must, necessarily, be\n      changed to include the components \\emph{NameNode} and\n      \\emph{DataNode}, with which the web application has to interact\n      to access its data",
                    "The layered view of the web application will have to\n      include a new layer corresponding to the Hadoop MapReduce\n      framework",
                    "The application continues to have a three-tiered\n      architecture, where one of the tiers is now the HDFS system",
                    "The Deployment view must be changed to include the racks\n      needed to run the HDFS system"
                ]
            },
            {
                "questionId": "HadoopCheckpointNodeINGLES",
                "content": "Considering the description of the \\emph{CheckpointNode} made in\n    Section~8.2.5, which architectural style best represents the\n    interaction between the \\emph{CheckpointNode} and the\n    \\emph{NameNode} components?",
                "image": [],
                "options": [
                    "The Pipes-and-filters style",
                    "The Publish-Subscribe style",
                    "The Peer-to-Peer style",
                    "The Client Server style"
                ]
            },
            {
                "questionId": "DomainModelINGLES",
                "content": "\\emph{Domain Model} and \\emph{Transaction Script} are two of the\n    existing patterns to implement the domain logic layer of an\n    enterprise application.  Choosing one or the other",
                "image": [],
                "options": [
                    "Affects only the domain logic layer",
                    "May affect the data access layer because each pattern\n      puts different requirements on the interface of that layer",
                    "Does not affect the presentation logic layer because it\n      cannot use it",
                    "Does not affect the data access layer because the data\n      access layer does not use the domain logic layer"
                ]
            },
            {
                "questionId": "RelacaoComponentesMaquinasINGLES",
                "content": "Which of the following sentences best captures the restrictions\n    regarding which components may execute in which machines in the\n    Deployment style?",
                "image": [],
                "options": [
                    "A machine may execute only one component, but a component\n      may execute in more than one machine",
                    "A component may execute in only one machine, but a\n      machine may execute more than one component",
                    "Each component executes in only one machine and each\n      machine executes only one component",
                    "All components may execute in all machines"
                ]
            },
            {
                "questionId": "WebDoisINGLES",
                "content": "With the evolution of the web application technologies, it is now\n    possible to develop web applications with a user interface similar\n    to the interface of desktop applications.  Yet, for this to\n    happen, part of the code that was executing in the web server is\n    now executing in the web browser.  How does this change manifests\n    in the software architecture of the system?",
                "image": [],
                "options": [
                    "In the Deployment view, because the presentation\n      component is now executing in a different place",
                    "In the component-and-connector view, because the\n      connector between the web client and the web server has to change",
                    "In the Layer view, because the order of the layers will\n      have to change",
                    "In the mapping between layers of the system and the\n      components where they execute"
                ]
            },
            {
                "questionId": "MashupsINGLES",
                "content": "One of the evolutions in the development of web applications was\n    the appearance of \\emph{mashups}, which are described in Wikipedia\n    as follows:\n\n    \\begin{quote}\n      In web development, a mashup is a web page or application that\n      uses and combines data, presentation or functionality from two\n      or more sources to create new services.\n    \\end{quote}\n\n    Knowing that the sources used by \\emph{mashups} do not know about\n    the existence of the \\emph{mashups} and that they change\n    frequently, forcing the adaptation of the \\emph{mashups} to\n    accomodate those changes, what is the best architecture to\n    minimize the effects of those changes?",
                "image": [],
                "options": [
                    "A \\emph{web services} architecture",
                    "A Client-Server architecture, where the \\emph{mashup}\n      is the client and the various sources are the servers",
                    "A layered architecture, where the access to the various\n      sources is the responsibility of the bottommost layer",
                    "A Publish-Subscribe architecture, where the various\n      sources publish events with the changes made and the\n      \\emph{mashup} subscribes those events"
                ]
            },
            {
                "questionId": "SegurancaINGLES",
                "content": "Suppose that you are designing the software architecture for an\n    enterprise application that has security requirements about the\n    confidentiality of some of its data.  To show to the stakeholders\n    that your system satisfies the security requirements you have to\n    use views of which architectural style?",
                "image": [],
                "options": [
                    "Only views of the component-and-connector viewtype are needed",
                    "Only views of the Deployment style are needed",
                    "We may need views of the component-and-connector viewtype\n      and of the Deployment style",
                    "We always need views of the component-and-connector viewtype\n      and of the Deployment style"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2012/exam1/exame-20130109-companion-en.tex",
        "quizTitle": "..-data-2012-exam1-exame-20130109-companion-en",
        "questions": [
            {
                "questionId": "GHCStakeholdersINGLES",
                "content": "Two of the \\emph{stakeholders} for the \\ghc{} were the UK\n    government and the researchers that want to do research on\n    functional programming languages.  Which of these\n    \\emph{stakeholders} had a more significant influence in the\n    software architecture of the system?",
                "image": [],
                "options": [
                    "The UK government, because it funded the project",
                    "The researchers, because they invented the Haskell\n      programming language",
                    "The UK government, because it intended that the system\n      could be used to develop the British software industry",
                    "The researchers, because they wanted to use the system to\n      validate their research"
                ]
            },
            {
                "questionId": "GHCChunksINGLES",
                "content": "According to the document that describes the \\ghc{}:\n    \\begin{quote}\n      At the highest level, GHC can be divided into three distinct\n      chunks:\n      \\begin{itemize}\n      \\item The compiler itself.\n      \\item The Boot Libraries.\n      \\item The Runtime System (RTS). \n      \\end{itemize}\n    \\end{quote}\n    What is the most architecturally correct way of classifying the\n    three \\emph{chunks} that this text refers to?",
                "image": [],
                "options": [
                    "As modules of the system",
                    "As components of the system",
                    "The compiler and the RTS as components and the boot\n         libraries as a module",
                    "The compiler as a component and the other two as modules"
                ]
            },
            {
                "questionId": "GHCDesugaringINGLES",
                "content": "One of the most important decisions during the development of the\n    \\ghc{} was to perform the type-checking before the desugaring of\n    an Haskell program into a program in the Core language\n    (\\emph{type-check-before-desugar}).  This design decision",
                "image": [],
                "options": [
                    "Made the type-checking much simpler",
                    "Satisfied performance requirements of the system",
                    "Made the desugaring simpler",
                    "Satisfied usability requirements of the system"
                ]
            },
            {
                "questionId": "GHCRTSINGLES",
                "content": "According to the document that describes the \\ghc{}:\n    \\begin{quote}\n      The Runtime System is a library of mostly C code that is linked\n      into every Haskell program. It provides the support\n      infrastructure needed for running the compiled Haskell code,\n      including the following main components:\n      \\begin{itemize}\n      \\item Memory management, including a parallel, generational, garbage collector;\n      \\item Thread management and scheduling;\n      \\item The primitive operations provided by GHC;\n      \\item A bytecode interpreter and dynamic linker for GHCi.\n      \\end{itemize}\n    \\end{quote}\n    Which system qualities are improved by the design decision of\n    creating the Runtime System, described above?",
                "image": [],
                "options": [
                    "The performance of the compiler, because the RTS is\n      written as very efficient C code",
                    "The performance of the compiled programs, because the RTS\n      is written as very efficient C code",
                    "The portability, because the RTS creates an abstraction\n      layer that hides some of the details of the operating system",
                    "The modifiability of the compiled programs, because we\n      may change their behavior by changing only the RTS"
                ]
            },
            {
                "questionId": "GHCPipeAndFilterINGLES",
                "content": "Like many other compilers, the compilation of an Haskell program\n    with the \\ghc{} uses the Pipe-and-Filter style, creating a\n    \\emph{pipeline} composed of several compilation phases.  The goal\n    of using this architectural style in GHC is",
                "image": [],
                "options": [
                    "To allow the parallel execution of the several\n      compilation phases, thereby improving the compiler performance",
                    "To allow the compilation of very large programs, because\n      wach phase may execute incrementally without loading the entire\n      program into memory at once",
                    "To facilitate changing the phases used in the compilation\n      process, thereby making the compiler more modifiable",
                    "All other options"
                ]
            },
            {
                "questionId": "ZeroMQAppsINGLES",
                "content": "Which of the following sentences better describes the ZeroMQ system?",
                "image": [],
                "options": [
                    "It is a system with a Peer-to-Peer architecture",
                    "It is a system with a Client-Server architecture",
                    "It allows the development of systems with a Peer-to-Peer architecture",
                    "It allows the development of systems with Peer-to-Peer,\n      Client-Server, or Publish-Subscribe architectures"
                ]
            },
            {
                "questionId": "ZeroMQWorkersPerCoreINGLES",
                "content": "According to the document that describes ZeroMQ:\n    \\begin{quote}\n      The idea was to launch one worker thread per CPU core---having\n      two threads sharing the same core would only mean a lot of\n      context switching for no particular advantage.\n    \\end{quote}\n    Which architectural style is more adequate to represent the\n    information presented above?",
                "image": [],
                "options": [
                    "The Tiers style",
                    "The Communicating Processes style",
                    "The Deployment style",
                    "The Work Assignment style"
                ]
            },
            {
                "questionId": "ZeroMQMessagingPatternsINGLES",
                "content": "According to the document that describes ZeroMQ:\n    \\begin{quote}\n      Messaging patterns form a layer (the so-called \"scalability\n      layer\") on top of the transport layer (TCP and friends).\n      Individual messaging patterns are implementations of this layer.\n    \\end{quote}\n    What is the main advantage of this layered architecture adopted by\n    ZeroMQ?",
                "image": [],
                "options": [
                    "Increases the portability of the system for other\n      operating systems",
                    "Facilitates the addition of new messaging patterns",
                    "Makes the system more scalable",
                    "Facilitates the reuse of the messaging patterns"
                ]
            },
            {
                "questionId": "ZeroMQBatchingINGLES",
                "content": "ZeroMQ uses dynamic batching to control the performance of the\n    system.  The goal of this approach is",
                "image": [],
                "options": [
                    "To reduce the latency of sending a message when the\n      system is overloaded",
                    "To increase the throughput of the system when it is overloaded",
                    "To reduce the amount of memory needed to send a large\n      number of messages",
                    "To reduce the CPU usage when the system has just a few\n      messages to send"
                ]
            },
            {
                "questionId": "ZeroMQLockFreeINGLES",
                "content": "According to the document that describes ZeroMQ:\n    \\begin{quote}\n      \u00d8MQ uses a lock-free queue in pipe objects to pass messages\n      between the user's threads and \u00d8MQ's worker threads.  There are\n      two interesting aspects to how \u00d8MQ uses the lock-free queue.\n      First, each queue has exactly one writer thread and exactly one\n      reader thread.  If there's a need for 1-to-N communication,\n      multiple queues are created.  Given that this way the queue\n      doesn't have to take care of synchronising the writers (there's\n      only one writer) or readers (there's only one reader) it can be\n      implemented in an extra-efficient way.\n    \\end{quote}\n    The architectural style that better represents the interaction\n    pattern described above is",
                "image": [],
                "options": [
                    "The Pipe-and-Filter style",
                    "The Shared data style",
                    "The Communicating Processes style",
                    "The Client-Server style"
                ]
            },
            {
                "questionId": "nginxFirstADINGLES",
                "content": "The main architectural driver for the nginx system was",
                "image": [],
                "options": [
                    "To have better throughput than Apache",
                    "To have a lower latency in the processing of a request\n      than Apache",
                    "To be more modifiable than Apache",
                    "To allow more simultaneous connections than Apache"
                ]
            },
            {
                "questionId": "nginxEventDrivenINGLES",
                "content": "According to the document that describes nginx:\n    \\begin{quote}\n      Traditional process- or thread-based models of handling\n      concurrent connections involve handling each connection with a\n      separate process or thread, and blocking on network or\n      input/output operations.  nginx followed a different model.  It\n      was actually inspired by the ongoing development of advanced\n      event-based mechanisms in a variety of operating systems.  What\n      resulted is a modular, event-driven, asynchronous,\n      single-threaded, non-blocking architecture which became the\n      foundation of nginx code.\n    \\end{quote}\n    The decision of turning nginx into an \\emph{event-driven},\n    \\emph{asynchronous}, \\emph{single-threaded}, and\n    \\emph{non-blocking} system was made because",
                "image": [],
                "options": [
                    "The code is easier to develop because it is not concurrent",
                    "They wanted to have a more efficient use of the\n      computational resources",
                    "Event-driven programs are easier to change",
                    "In an event-driven system each component may function\n      independently of the others"
                ]
            },
            {
                "questionId": "nginxModuleTypesINGLES",
                "content": "According to the document that describes nginx:\n    \\begin{quote}\n      nginx's modular architecture generally allows developers to\n      extend the set of web server features without modifying the\n      nginx core.  nginx modules come in slightly different\n      incarnations, namely core modules, event modules, phase\n      handlers, protocols, variable handlers, filters, upstreams and\n      load balancers.  [...]  Event modules provide a particular\n      OS-dependent event notification mechanism like kqueue or epoll.\n      Protocol modules allow nginx to communicate through HTTPS,\n      TLS/SSL, SMTP, POP3 and IMAP.\n    \\end{quote}\n    Which architectural style is more adequate to represent the\n    information presented above?",
                "image": [],
                "options": [
                    "The Generalization style",
                    "The Uses style",
                    "The Layers style",
                    "The Aspects style"
                ]
            },
            {
                "questionId": "nginxOSOptimizationsINGLES",
                "content": "According to the document that describes nginx:\n    \\begin{quote}\n      While handling a variety of actions associated with accepting,\n      processing and managing network connections and content\n      retrieval, nginx uses event notification mechanisms and a number\n      of disk I/O performance enhancements in Linux, Solaris and\n      BSD-based operating systems, like kqueue, epoll, and event\n      ports.  The goal is to provide as many hints to the operating\n      system as possible, in regards to obtaining timely asynchronous\n      feedback for inbound and outbound traffic, disk operations,\n      reading from or writing to sockets, timeouts and so on.\n    \\end{quote}\n    The goal of this approach used in the development of nginx was",
                "image": [],
                "options": [
                    "To make the system more modifiable",
                    "To make the system more portable to different operating systems",
                    "To make the system faster",
                    "To make the system more fault tolerant"
                ]
            },
            {
                "questionId": "nginxProcessThreadINGLES",
                "content": "According to the document that describes nginx:\n    \\begin{quote}\n      Traditional process- or thread-based models of handling\n      concurrent connections involve handling each connection with a\n      separate process or thread, and blocking on network or\n      input/output operations.\n    \\end{quote}\n    The architectural style that better describes the model presented\n    above for processing requests is",
                "image": [],
                "options": [
                    "The Shared-data style",
                    "The Communicating Processes style",
                    "The Peer-to-Peer style",
                    "The Client-Server style"
                ]
            },
            {
                "questionId": "WebPartioningINGLES",
                "content": "According to the document that describes the architecture of web\n    services (attached at the end of this document), one of the\n    approaches introduced in Section~1.2 is \\emph{partitioning}, shown\n    in Figure~1.4.  The use of \\emph{partitioning}",
                "image": [],
                "options": [
                    "Increases the availability",
                    "Increases the capacity",
                    "Increases the capacity but decreases the availability",
                    "Increases both the availability and the capacity"
                ]
            },
            {
                "questionId": "WebPartitioningDoisINGLES",
                "content": "Considering again the case of the previous question, compare the\n    architectures sketched in Figure~1.3 and Figure~1.4.  The\n    difference between the two shows",
                "image": [],
                "options": [
                    "Only in the Deployment view, because only the number of\n      machines storing images was changed",
                    "In the Uses view, because each \\emph{Image\n        Write/Retrieval Service} is going to use a different\n      \\emph{Image File Storage}",
                    "In the Component-and-Connector view, because components\n      and connectors need to be changed",
                    "In the Decomposition view, because we need more modules\n      to represent the split of images by different elements of the\n      architecture"
                ]
            },
            {
                "questionId": "WebRedundancyINGLES",
                "content": "Consider again the architecture shown in Figure~1.3, where\n    redundancy was introduced into the system.  In this particular\n    case, introducing redundancy into the architecture has the goal of",
                "image": [],
                "options": [
                    "Increasing the performance of the \\emph{Upload} operation",
                    "Increasing the performance of the \\emph{Retrieval} operation",
                    "Increasing the scalability of the system",
                    "Increasing the fault tolerance of the system"
                ]
            },
            {
                "questionId": "ThreeVsFourTiersINGLES",
                "content": "The typical software architecture of an enterprise application is\n    composed of three tiers and three layers.  Yet, we may have\n    variations of this architecture.  For instance, by separating the\n    middle tier in two tiers.  In this case, which other changes exist\n    on the architecture that are related with the layers?",
                "image": [],
                "options": [
                    "We now have four layers, where each layer is executed in\n      the corresponding tier, as before",
                    "Each one of the two middle tiers executes the previously\n      existing three layers, and no change is needed on the layers\n      view",
                    "There is no relation between the tiers and the layers, so\n      the layers architecture is not changed",
                    "The execution of the previously existing layers is split\n      between the two new tiers, and new intermediate layers may be\n      needed"
                ]
            },
            {
                "questionId": "WebLoadBalancerINGLES",
                "content": "According to the document that describes the architecture of web\n    services:\n    \\begin{quote}\n      Another critical piece of any distributed system is a load\n      balancer.  Load balancers are a principal part of any\n      architecture, as their role is to distribute load across a set\n      of nodes responsible for servicing requests.  This allows\n      multiple nodes to transparently service the same function in a\n      system.  Their main purpose is to handle a lot of simultaneous\n      connections and route those connections to one of the request\n      nodes, allowing the system to scale to service more requests by\n      just adding nodes.\n    \\end{quote}\n    Based on this description, what is the best way to represent the\n    architecture of a system that is using a \\emph{load balancer}?",
                "image": [],
                "options": [
                    "With a component-and-connector view, where the \n      \\emph{load balancer} is a component of the system",
                    "With a Deployment view, where the \\emph{load balancer} is\n      part of the communication infra-structure used to execute the\n      system",
                    "With a Uses view, representing the existing dependencies\n      between the \\emph{load balancer} and the services that it uses",
                    "With a Layers view, where the \\emph{load balancer}\n      creates an abstraction layer between who makes the request and\n      who provides the service"
                ]
            },
            {
                "questionId": "DomainLogicFenixINGLES",
                "content": "The first architecture of the F\u00e9nix system, corresponding to its\n    first years of development, could be described as a three-layered\n    architecture, typical of an enterprise application.  One of those\n    layers was the \\emph{domain logic} layer.  Which of the following\n    sentences best describes the F\u00e9nix architecture in what concerns\n    that layer?",
                "image": [],
                "options": [
                    "The domain logic layer was implemented with the Domain\n      Model pattern",
                    "The domain logic layer was implemented with the\n      Transaction Script pattern",
                    "The domain logic layer was implemented with the Service\n      Layer pattern",
                    "The domain logic layer was implemented with a rich domain\n      model, on top of which there was a thin service layer"
                ]
            },
            {
                "questionId": "IncrementalReleasesINGLES",
                "content": "To achieve a faster time-to-market, software companies are\n    increasingly using a strategy of incremental releases of their\n    software, where each new release has a set of new features.  Which\n    architectural style is better to analyse whether the system's\n    software architecture is adequate for the planned incremental\n    releases?",
                "image": [],
                "options": [
                    "The Decomposition style",
                    "The Generalization style",
                    "The Uses style",
                    "The SOA style"
                ]
            },
            {
                "questionId": "ScalabilityINGLES",
                "content": "Several of the cases studied in this course had scalability\n    requirements.  That means that those systems should be designed in\n    such a way that they",
                "image": [],
                "options": [
                    "Have high throughput",
                    "Have low latency",
                    "Allow many simultaneous users",
                    "May be easily changed to increase their performance"
                ]
            },
            {
                "questionId": "SOAINGLES",
                "content": "In the Service Oriented Architecture style it is common to have a\n    specialized component, named \\emph{Enterprise Service Bus} (ESB).\n    The goal of using of an ESB in a system is",
                "image": [],
                "options": [
                    "To facilitate the interaction among heterogeneous\n      components that use distinct communication protocols",
                    "To promote the use of a common communication protocol for\n      all the remaining components of the system",
                    "To increase the performance of the interaction between\n      the components of the system",
                    "To create a strong coupling between the various services\n      provided by the organization"
                ]
            },
            {
                "questionId": "AvailabilityINGLES",
                "content": "There are several tactics to satisfy availability requirements,\n    which may be applied depending on the concrete requirement that we\n    want to satisfy.  Assuming that you want to detect faults of type\n    \\emph{response} in your system, which tactic is more adequate?",
                "image": [],
                "options": [
                    "The Ping/Echo tactic",
                    "The Heartbeat tactic",
                    "The Voting tactic",
                    "The Removal from Service tactic"
                ]
            },
            {
                "questionId": "ChromiumDecompositionINGLES",
                "content": "The web page that describes the architecture of Chromium OS (an\n    open source project to implement a new operating system) starts\n    like this:\n    \\begin{quote}\n      Chromium OS consists of three major components: \n      \\begin{itemize}\n      \\item The Chromium-based browser and the window manager\n      \\item System-level software and user-land services: the kernel, drivers, connection manager, and so on\n      \\item Firmware \n      \\end{itemize}\n    \\end{quote}\n    Considering this brief description of the software architecture of\n    Chromium OS, which architectural style is more adequate to\n    represent it?",
                "image": [],
                "options": [
                    "The Communicating Processes style",
                    "The Client-Server style",
                    "Any style of the component-and-connector viewtype",
                    "The Decomposition style"
                ]
            },
            {
                "questionId": "SecurityINGLES",
                "content": "Suppose that, to satisfy a security requirement related with\n    possible attacks coming from users that access your system through\n    the Internet, you want to use the tactic named \\emph{Limit\n      Exposure}.  How does the use of that tactic manifests in the\n    architectural views of your system?",
                "image": [],
                "options": [
                    "In the Deployment view",
                    "In the Decomposition view",
                    "In a view of the component-and-connector type",
                    "In the Aspects view"
                ]
            },
            {
                "questionId": "SkeletonSystemINGLES",
                "content": "One of the best practices in the design of a software architecture\n    is to create a skeleton system.  What is its purpose?",
                "image": [],
                "options": [
                    "To create an abstraction layer between the architecture\n      of the system and its functionalities, so that the architecture\n      may be changed later without affecting the functionalities",
                    "To create an artifact that may be used to explain the\n      system's software architecture to the various stakeholders",
                    "To allow testing and validating the software architecture\n      in the early development stages",
                    "To facilitate the work assignment to the members of the\n      development team that will implement the system's functionalities"
                ]
            },
            {
                "questionId": "ArqEmailMTAIMAPINGLES",
                "content": "The email system is composed of various types of components\n    playing different roles.  For example, to send an email, a user\n    uses a \\emph{mail user agent} (MUA), to compose his message and\n    send it.  To send the message, the MUA typically connects to a\n    \\emph{mail transfer agent} (MTA) that receives the message,\n    analyzes the message's headers to determine the recipients and,\n    after querying the DNS system to determine the MTA responsible for\n    each recipient, it connects to the MTAs responsible for the\n    destination addresses to deliver the message.  Each of these MTAs\n    receives the message and stores it locally or forwards it to\n    others MTAs until the message reaches its destination MTA.\n    The recipient user of the message will then use his MUA to see the\n    messages that were sent to him.  To do it, the MUA connects to an\n    IMAP or POP server to obtain the user's messages.  Those IMAP and\n    POP servers obtain the messages for a user by reading the messages\n    stored by the MTA.\n\n    Given this simplified description of the operation of the email\n    system, which of the following architectural styles is more\n    appropriate to represent the pattern of interaction between the\n    MTA and the servers IMAP and POP?",
                "image": [],
                "options": [
                    "The Peer-to-Peer style",
                    "The Client-Server style",
                    "The Shared-Data style",
                    "The Publish-subscribe style"
                ]
            },
            {
                "questionId": "AspectsINGLES",
                "content": "The Aspects style was introduced recently as a new style of the\n    module viewtype.  Using this style in the software architecture of\n    a system",
                "image": [],
                "options": [
                    "Does not change the existing modules of the system,\n      because they are determined by the system's Decomposition, which\n      is not changed",
                    "Adds restrictions to the dependency relationships that\n      exist between modules and that are represented using other\n      styles, as with the layers style",
                    "Typically gives rise to more modules than what we would\n      have if not using this style",
                    "Introduces only a new type of relation among the existing\n      modules of the system, which resulted from other styles of the\n      module viewtype"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2012/exam2/exame-20130201-companion-en.tex",
        "quizTitle": "..-data-2012-exam2-exame-20130201-companion-en",
        "questions": [
            {
                "questionId": "ZeroMQScaleMulticoreINGLES",
                "content": "According to the document that describes ZeroMQ:\n    \\begin{quote}\n      One of the requirements for \u00d8MQ was to take advantage of\n      multi-core boxes; in other words, to scale the throughput\n      linearly with the number of available CPU cores.\n    \\end{quote}\n    To satisfy this requirement, the solution adopted by ZeroMQ was",
                "image": [],
                "options": [
                    "To process all of the requests to send messages with a\n      single thread, to free the remaining cores for the \n      user threads",
                    "To launch a worker thread for each user\n        thread to guarantee that each user thread may send messages\n        independently of what the others are doing",
                    "To launch a worker thread for each core, to maximize the\n      core usage and to minimize the need for synchronization among\n      threads",
                    "To launch a worker thread to process the sending of a\n      new message, to guarantee maximal parallelism in message sending"
                ]
            },
            {
                "questionId": "ZeroMQAsLibraryINGLES",
                "content": "Knowing that in the document describing ZeroMQ there is the\n    following statement:\n    \\begin{quote}\n      \u00d8MQ is a library, not a messaging server.\n    \\end{quote}\n    Which views are needed to describe the software architecture of\n    ZeroMQ?",
                "image": [],
                "options": [
                    "Only module views",
                    "Only component-and-connector views",
                    "Only allocation views",
                    "Module and component-and-connector views"
                ]
            },
            {
                "questionId": "ZeroMQBrokerINGLES",
                "content": "According to the document that describes ZeroMQ:\n    \\begin{quote}\n      It took us several years working on AMQP protocol [...] to\n      realise that there's something wrong with the classic\n      client/server model of smart messaging server (broker) and dumb\n      messaging clients.\n    \\end{quote}\n    What is the main problem, according to the authors, of the\n    \\emph{broker}-based model?",
                "image": [],
                "options": [
                    "It is less robust, because a fault in the \\emph{broker}\n      causes a failure in the system",
                    "It is less modifiable, because all components depend on\n      the \\emph{broker}",
                    "It has less performance, because the\n      \\emph{broker} introduces greater latency in the communication",
                    "It is more expensive, because it forces the existence of\n      additional hardware to execute the \\emph{broker}"
                ]
            },
            {
                "questionId": "ZeroMQExtensibleEnginesINGLES",
                "content": "According to the document that describes ZeroMQ:\n    \\begin{quote}\n      The objects that handle data transfer are composed of two parts:\n      the session object is responsible for interacting with the \u00d8MQ\n      socket, and the engine object is responsible for communication\n      with the network.  There's only one kind of the session object,\n      but there's a different engine type for each underlying protocol\n      \u00d8MQ supports.  Thus, we have TCP engines, IPC engines, PGM\n      engines, etc.  The set of engines is extensible---in the future\n      we may choose to implement, say, a WebSocket engine or an SCTP\n      engine.\n    \\end{quote}\n    Supposing that the code implementing the \\emph{session object}\n    does not need to be changed when a new type of \\emph{engine} is\n    added to the system, which architectural views are better to show\n    this extensibility aspect of the system?",
                "image": [],
                "options": [
                    "Views of the Generalization style",
                    "Views of the Layers style",
                    "Views of the Decomposition style",
                    "Views of the Uses style"
                ]
            },
            {
                "questionId": "ZeroMQBSDSocketsINGLES",
                "content": "According to the document that describes ZeroMQ:\n    \\begin{quote}\n      In early versions of \u00d8MQ the API was based on AMQP's model of\n      exchanges and queues.  I spent the end of 2009 rewriting it\n      almost from scratch to use the BSD Socket API instead.\n    \\end{quote}\n    Which requirements were targeted by this change in the system?",
                "image": [],
                "options": [
                    "Usability",
                    "Modifiability",
                    "Performance",
                    "Security"
                ]
            },
            {
                "questionId": "nginxProcessesINGLES",
                "content": "According to the document that describes nginx:\n    \\begin{quote}\n      nginx runs several processes in memory; there is a single master\n      process and several worker processes.  There are also a couple\n      of special purpose processes, specifically a cache loader and\n      cache manager.  All processes are single-threaded in version 1.x\n      of nginx.  All processes primarily use shared-memory mechanisms\n      for inter-process communication.\n    \\end{quote}\n    Assuming that you want to highlight how the various nginx\n    processes communicate among themselves, which architectural style\n    is more adequate to represent the above information?",
                "image": [],
                "options": [
                    "The Publish-Subscribe style",
                    "The Client-Server style",
                    "The Peer-to-Peer style",
                    "The Communicating Processes style"
                ]
            },
            {
                "questionId": "nginxCachingINGLES",
                "content": "In the continuation of the description presented in the previous\n    question, later in the document there is this passage:\n    \\begin{quote}\n      Caching in nginx is implemented in the form of hierarchical data\n      storage on a filesystem.  Cache keys are configurable, and\n      different request-specific parameters can be used to control\n      what gets into the cache.  Cache keys and cache metadata are\n      stored in the shared memory segments, which the cache loader,\n      cache manager and workers can access.\n    \\end{quote}\n    Which architectural style is more adequate to represent the use of\n    cache in nginx?",
                "image": [],
                "options": [
                    "The Layers style",
                    "The Uses style",
                    "The Shared data style",
                    "The Communicating Processes style"
                ]
            },
            {
                "questionId": "nginxWorkersINGLES",
                "content": "As mentioned in the previous questions, the use of \\emph{workers}\n    is one of the crucial elements in the software architecture of\n    nginx.  Which of the following sentences best describes how\n    \\emph{workers} work in nginx?",
                "image": [],
                "options": [
                    "A new \\emph{worker} is created whenever a new connection\n      is established with the server, and that \\emph{worker} processes\n      all of the requests for that connection, being destroyed at the\n      end of the connection",
                    "There is a \\emph{pool} of \\emph{workers} that are reused\n      between connections, but each \\emph{worker} processes only\n      requests of a connection at a time",
                    "Each \\emph{worker} is responsible for various connections,\n      processing all requests from those connections",
                    "Each \\emph{worker} processes requests that it obtains\n      from a \\emph{pool of requests} that is shared among all workers"
                ]
            },
            {
                "questionId": "nginxWorkerParallelINGLES",
                "content": "Given that a \\emph{worker} processes various requests during its\n    life, how does it do it?",
                "image": [],
                "options": [
                    "By interleaving the various processing phases of each\n      request in a sequential process",
                    "By executing in parallel each of the phases of the\n      pipeline corresponding to the processing of a request",
                    "By executing in parallel the processing of the various requests",
                    "By processing completely each request before moving to\n      the next one, in a sequential process"
                ]
            },
            {
                "questionId": "nginxCTenKProblemINGLES",
                "content": "The main \\emph{architectural driver} for the nginx system was to\n    solve the \\emph{C10K problem}: being able to maintain 10.000\n    simultaneous connections with a single server running on\n    conventional hardware.  For this o happen, nginx must",
                "image": [],
                "options": [
                    "Have a throughput higher than Apache",
                    "Be able to process each request faster than Apache",
                    "Be able to launch more simultaneous threads than Apache",
                    "Be able to reduce the amount of memory needed for each connection"
                ]
            },
            {
                "questionId": "GHCBlockLayerINGLES",
                "content": "The document describing the \\ghc{} presents two design decisions\n    about the development of the \\emph{Runtime System}.  The first of\n    those decisions is described like this:\n    \\begin{quote}\n      The garbage collector is built on top of a block layer that\n      manages memory in units of blocks, where a block is a multiple\n      of 4 KB in size. The block layer has a very simple API: [...].\n      This is the only API used by the garbage collector for\n      allocating and deallocating memory.  Blocks of memory are\n      allocated with \\texttt{allocGroup} and freed with\n      \\texttt{freeGroup}.\n    \\end{quote}\n    Which architectural style is more adequate to represent this\n    design decision?",
                "image": [],
                "options": [
                    "The \\emph{Decomposition} style",
                    "The \\emph{Client-Server} style",
                    "The \\emph{Layers} style",
                    "The \\emph{Communicating Processes} style"
                ]
            },
            {
                "questionId": "GHCBlockLayerQualitiesINGLES",
                "content": "What was the main goal of the GHC's authors that led them to the\n    design decision described in the previous question?",
                "image": [],
                "options": [
                    "To increase the performance of RTS",
                    "To allow changing the GC algorithm without affecting the\n      rest of the system",
                    "To increase the performance of the programs compiled by\n      the GHC",
                    "To make the RTS more portable to other operating systems"
                ]
            },
            {
                "questionId": "GHCRewriteRulesINGLES",
                "content": "Some of the \\emph{architectural drivers} of the \\ghc{} are related\n    with the system's extensibility, and one of the solutions adopted\n    by its authors to provide that extensibility was the introduction\n    of \\emph{user-defined rewrite rules}, described in the document as\n    follows:\n    \\begin{quote}\n      The core of GHC is a long sequence of optimisation passes, each\n      of which performs some semantics-preserving transformation,\n      \\texttt{Core} into \\texttt{Core}.  But the author of a library\n      defines functions that often have some non-trivial,\n      domain-specific transformations of their own, ones that cannot\n      possibly be predicted by GHC.  So GHC allows library authors to\n      define rewrite rules that are used to rewrite the program during\n      optimisation.  In this way, programmers can, in effect, extend\n      GHC with domain-specific optimisations.\n    \\end{quote}\n    How does this solution manifests in the software architecture of\n    the system?",
                "image": [],
                "options": [
                    "It does not manifest, as it corresponds only to an\n      extension to the Haskell language that must be processed by the\n      compiler",
                    "In the existence of a compiler component that is\n      responsible for interpreting and applying the rewrite rules\n      during the compilation of a program",
                    "In a view of the Generalization style that includes a\n      module defining an abstract interface that all \\emph{rewrite\n        rules} must implement and of which all modules with the \n      \\emph{rewrite rules} are specializations",
                    "In a view of the Pipes-and-Filters style, corresponding\n      to the process of compiling an Haskell program, to which is\n      added a new filter whenever a new \\emph{rewrite rule} is\n      defined"
                ]
            },
            {
                "questionId": "GHCAsLibraryINGLES",
                "content": "According to the document that describes the \\ghc{}:\n    \\begin{quote}\n      As the popularity of the Haskell language has grown, there has\n      been an increasing need for tools and infrastructure that\n      understand Haskell source code, and GHC of course contains a lot\n      of the functionality necessary for building these tools: a\n      Haskell parser, abstract syntax, type checker and so on.  With\n      this in mind, we made a simple change to GHC: rather than\n      building GHC as a monolithic program, we build GHC as a library,\n      that is then linked with a small Main module to make the GHC\n      executable itself, but also shipped in library form so that\n      users can call it from their own programs.  At the same time we\n      built an API to expose GHC's functionality to clients.\n    \\end{quote}\n    Which architectural diagram is more adequate to represent the\n    information presented above?",
                "image": [],
                "options": [
                    "A diagram of the component-and-connector viewtype",
                    "A diagram of the module viewtype",
                    "A diagram of the deployment style",
                    "A diagram of the implementation style"
                ]
            },
            {
                "questionId": "GHCCodeGenerationINGLES",
                "content": "According to the document that describes the \\ghc{}:\n    \\begin{quote}\n      Once the \\texttt{Core} program has been optimised, the process\n      of code generation begins.  The code generator first converts\n      the \\texttt{Core} into a language called \\texttt{STG}, which is\n      essentially just \\texttt{Core} annotated with more information\n      required by the code generator.  Then, \\texttt{STG} is\n      translated to \\texttt{Cmm}, a low-level imperative language with\n      an explicit stack.  From here, the code takes one of three\n      routes:\n      \\begin{itemize}\n      \\item Native code generation: [...]\n      \\item LLVM code generation: [...]\n      \\item C code generation: [...]\n      \\end{itemize}\n    \\end{quote}\n    That is, GHC may use one of three alternative code generators,\n    which have different qualities (omitted in the excerpt presented\n    above).  Supposing that you want to present an architectural\n    diagram to represent the description presented above, which one\n    seems more adequate?",
                "image": [],
                "options": [
                    "A diagram of the component-and-connector viewtype,\n      showing the data flow between the various compiler components",
                    "A diagram of the module viewtype, showing a decomposition\n      of the compiler in the various modules that are responsible by\n      each of the compilation process steps",
                    "A diagram of the module viewtype, showing which modules\n      use other modules",
                    "A layered diagram, where there is a layer responsible for\n      the code generation"
                ]
            },
            {
                "questionId": "WebCacheModuleINGLES",
                "content": "Consider the Figure~1.8 in the document that describes the use of\n    caches in web services (see annex).  In that Figure, there is a\n    rectangle with the name \\emph{Cache} within another rectangle with\n    the name \\emph{Request Node}.  Taking into account the description\n    made in the text and the goal of that Figure, those rectangles\n    correspond to which type of software elements?",
                "image": [],
                "options": [
                    "They are both modules",
                    "They are both components",
                    "The \\emph{Request Node} is a component and the\n      \\emph{Cache} is a module",
                    "The \\emph{Request Node} is a module and the \\emph{Cache}\n      is a component"
                ]
            },
            {
                "questionId": "WebCacheGlobalINGLES",
                "content": "Consider the change in the architecture introduced from Figure~1.9\n    to Figure~1.10 in the document that describes the use of caches in\n    web services (see annex).  That change has the goal and the\n    consequence of, respectively",
                "image": [],
                "options": [
                    "Increasing performance and availability",
                    "Increasing availability and decreasing performance",
                    "Increasing performance and decreasing availability",
                    "Increasing scalability and availability"
                ]
            },
            {
                "questionId": "WebDistributedCacheINGLES",
                "content": "Consider the paragraph marked with the number 1 in the document\n    that describes the use of caches in web services (see annex),\n    where the concept of \\emph{distributed cache} is introduced.\n    Which architectural style better represents the interaction\n    pattern that exists among the various request nodes?",
                "image": [],
                "options": [
                    "The Shared-Data style",
                    "The Client-Server style",
                    "The Peer-to-Peer style",
                    "The Communicating Processes style"
                ]
            },
            {
                "questionId": "WebMissingCacheNodeINGLES",
                "content": "Consider the paragraph marked with the number 2 in the document\n    that describes the use of caches in web services (see annex),\n    where the failure of a node in the distributed cache is discussed.\n    When that happens, what are the consequences for the system?",
                "image": [],
                "options": [
                    "The performance decreases",
                    "The availability of the system's data decreases",
                    "The availability of the system's services decreases",
                    "The system is not affected in any way"
                ]
            },
            {
                "questionId": "MemcachedModulesINGLES",
                "content": "Consider the following description of \\emph{Memcached}, which is\n    adapted from its Wiki:\n    \\begin{quote}\n      Memcached is an in-memory key-value store for small chunks of\n      arbitrary data from results of database calls, API calls, or\n      page rendering.  It is made up of:\n      \\begin{itemize}\n      \\item Client software, which is given a list of available memcached servers.\n      \\item A client-based hashing algorithm, which chooses a server\n        based on the \"key\" input.\n      \\item Server software, which stores your values with their keys\n        into an internal hash table.\n      \\item Server algorithms, which determine when to throw out old\n        data (if out of memory), or reuse memory.\n      \\end{itemize}\n    \\end{quote}\n    Suppose that you want to present an architectural view for\n    \\emph{Memcached} that represents the above information.  Which\n    view is more adequate?",
                "image": [],
                "options": [
                    "A view of the Data Model style",
                    "A view of the Layers style",
                    "A view of the Decomposition style",
                    "A view of the Uses style"
                ]
            },
            {
                "questionId": "DomainLogicFenixINGLES",
                "content": "One of the major changes introduced in the software architecture\n    of the F\u00e9nix system, compared to its first architecture, was",
                "image": [],
                "options": [
                    "To start using the Transaction Script pattern in the\n      domain logic layer",
                    "To start using the Service Layer pattern in a new layer",
                    "To move from an anemic domain model to a rich domain model",
                    "To eliminate the service layer"
                ]
            },
            {
                "questionId": "PerformanceINGLES",
                "content": "Several of the cases studied in this course had performance\n    requirements.  Which architectural views are typically needed to\n    show that those requirements are satisfied?",
                "image": [],
                "options": [
                    "Views of the Module viewtype",
                    "Views of the Component-and-Connector viewtype",
                    "Views of the Allocation viewtype",
                    "Views of the Component-and-Connector and Allocation viewtypes"
                ]
            },
            {
                "questionId": "SubcontractorsINGLES",
                "content": "Suppose that you are developing a software architecture for a new\n    large scale system and that you intend to resort extensively to\n    third party subcontractors for the development of various parts of\n    the system.  Which architectural styles are most useful to plan\n    the development of the system in this case?",
                "image": [],
                "options": [
                    "The Decomposition and the Work Assignment styles",
                    "The Decomposition and the Layers styles",
                    "The Decomposition and the Uses styles",
                    "The Decomposition and the SOA styles"
                ]
            },
            {
                "questionId": "AspectsINGLES",
                "content": "Using the Aspects architectural style promotes the modifiability\n    of a system because",
                "image": [],
                "options": [
                    "It imposes restrictions on which uses relationships may\n      exist between the system's modules",
                    "It makes it easier to create generalization relationships\n      between the system's modules",
                    "It separates in new modules responsibilities that were\n      spread over various of the system's modules",
                    "It allows the decomposition of each of the system's\n      modules into finer grained modules"
                ]
            },
            {
                "questionId": "SOAINGLES",
                "content": "Suppose that you are developing the software architecture of a new\n    system for an organization composed of several organizational\n    units, each one with its own information systems, which have been\n    developed independently of each other over the course of several\n    years and depending on the particular needs of each unit.  Your\n    system has the goal of integrating the various existing systems,\n    providing in this way not only a unified view of how the\n    organization works, but also allowing the creation of new\n    processes within the organization that involve more than one unit.\n    Which architectural style is better suited to design such a\n    system?",
                "image": [],
                "options": [
                    "The Decomposition style",
                    "The Client-Server style",
                    "The Service Oriented Architecture style",
                    "The Communicating Processes style"
                ]
            },
            {
                "questionId": "ArqEmailMUAMTAINGLES",
                "content": "The email system is composed of various types of components\n    playing different roles.  For example, to send an email, a user\n    uses a \\emph{mail user agent} (MUA), to compose his message and\n    send it.  To send the message, the MUA typically connects to a\n    \\emph{mail transfer agent} (MTA) that receives the message,\n    analyzes the message's headers to determine the recipients and,\n    after querying the DNS system to determine the MTA responsible for\n    each recipient, it connects to the MTAs responsible for the\n    destination addresses to deliver the message.  Each of these MTAs\n    receives the message and stores it locally or forwards it to\n    others MTAs until the message reaches its destination MTA.\n    The recipient user of the message will then use his MUA to see the\n    messages that were sent to him.  To do it, the MUA connects to an\n    IMAP or POP server to obtain the user's messages.  Those IMAP and\n    POP servers obtain the messages for a user by reading the messages\n    stored by the MTA.\n\n    Given this simplified description of the operation of the email\n    system, which of the following architectural styles is more\n    appropriate to represent the pattern of interaction between the\n    MUA and the MTA?",
                "image": [],
                "options": [
                    "The Peer-to-Peer style",
                    "The Client-Server style",
                    "The Shared-Data style",
                    "The Publish-subscribe style"
                ]
            },
            {
                "questionId": "AvailabilityINGLES",
                "content": "Suppose that, to satisfy an availability requirement related with\n    the occurrence of faults at the network infrastructure used by\n    your system, you want to use the tactic named \\emph{Ping/Echo}.\n    How does the use of that tactic manifests in the architectural\n    views of your system?",
                "image": [],
                "options": [
                    "Only in the Deployment view",
                    "Only in the Decomposition view",
                    "Only in a component-and-connector view",
                    "Both in a component-and-connector and the Deployment\n      views"
                ]
            },
            {
                "questionId": "SecurityINGLES",
                "content": "Suppose that you are developing a web application that keeps in a\n    database some information that is introduced by the users and that\n    one of the requirements is that the information should be kept\n    confidential, such that no one but the author of the information\n    should be able to see it (but the author may access that\n    information whenever he wants it).  How would you satisfy this\n    requirement?",
                "image": [],
                "options": [
                    "By using HTTPS in the communication between the browser\n      and the web server",
                    "By using robust authentication mechanisms to identify the\n      users of the system with confidence",
                    "By encrypting the information in the database with a\n      password that is known only by the web server",
                    "None of the other options solves the problem"
                ]
            },
            {
                "questionId": "WebEvolutionINGLES",
                "content": "Web applications went through several evolutions over the last\n    years.  One of those evolutions was to make their user interfaces\n    more sophisticated, by leveraging on new technologies available in\n    the browsers, such as, for example, Javascript, to provide a more\n    satisfying user experience.  What were the most visible\n    consequences of such an evolution on the typical software\n    architecture of a web application?",
                "image": [],
                "options": [
                    "The presentation logic layer and how it relates with the\n      underlying layer changed",
                    "The connector used to represent the interaction between\n      the browser and the web server changed",
                    "The browser is now a component of a different type",
                    "That evolution did not have any consequences on the\n      software architecture of a web application"
                ]
            },
            {
                "questionId": "TiersINGLES",
                "content": "One of the terms often used to describe the software architecture\n    of a system is the term \\emph{tier}, being common, for instance,\n    to talk about \\emph{multi-tier} systems.  Taking into account the\n    various types of software elements that compose a software\n    architecture, a \\emph{tier} is",
                "image": [],
                "options": [
                    "A component",
                    "A grouping of components",
                    "A module",
                    "A layer"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2013/exam1/exame-20140110-companion-en.tex",
        "quizTitle": "..-data-2013-exam1-exame-20140110-companion-en",
        "questions": [
            {
                "questionId": "GPReceiverWriterStyleINGLES",
                "content": "In \\gp{} system  the \\emph{receiver} and the \\emph{writer threads} support asynchronous writing of metrics to optimize disk accesses. The interaction between these two components follow the architectural style",
                "image": [],
                "options": [
                    "Client-server",
                    "Communicating Processes",
                    "Repository",
                    "Pipes-and-Filters"
                ]
            },
            {
                "questionId": "GPCarbonRelayINGLES",
                "content": "In the \\gp{} system the component \\emph{carbon-relay} implements a tactic",
                "image": [],
                "options": [
                    "Maintain Multiple Copies of Computation",
                    "Maintain Multiple Copies of Data",
                    "Passive Redundancy",
                    "Active Redundancy"
                ]
            },
            {
                "questionId": "GPComposerUIQualityINGLES",
                "content": "Which quality, or qualities, of the \\gp{} system are described by the sentence: \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL.}",
                "image": [],
                "options": [
                    "Usability and Performance",
                    "Usability",
                    "Performance",
                    "Testability"
                ]
            },
            {
                "questionId": "MWQualitiesINGLES",
                "content": "Which are the most significant qualities of the \\mw{} system?",
                "image": [],
                "options": [
                    "Performance, availability, and usability",
                    "Performance, availability, and testability",
                    "Reliability, performance, and usability",
                    "Performance and usability"
                ]
            },
            {
                "questionId": "MWArchitecuralStyleINGLES",
                "content": "The architectural styles which are more suitable to describe the \\mw{} system from the end user viewpoint are",
                "image": [],
                "options": [
                    "Client-Server e Repository",
                    "Repository e Service Oriented Architecture",
                    "Client-Server, Repository, Communicating-Processes e Service Oriented Architecture",
                    "Client-Server, Repository e Communicating-Processes"
                ]
            },
            {
                "questionId": "MWReliabilityTacticsINGLES",
                "content": "The \\mw{} system tries to enforce a reliability criteria that all the changes done by a writer are consistently visualized in her subsequent reads",
                "image": [],
                "options": [
                    "By using a Timestamp tactic",
                    "By using a Retry tactic",
                    "Storing the information in the client using cookies",
                    "By using a Transactions tactic"
                ]
            },
            {
                "questionId": "MWReliabilityReadsImplementationINGLES",
                "content": "The \\mw{} system tries to guarantee a reliability criteria where all information is available to be read by any reader in less than 30 seconds after being written. To achieve this criteria the load balancer",
                "image": [],
                "options": [
                    "May stop accepting reads",
                    "May stop accepting writes",
                    "May stop accepting reads and writes",
                    "May need to add more servers to the cluster"
                ]
            },
            {
                "questionId": "MWResourceLoaderTacticINGLES",
                "content": "Consider the following fragment of the \\mw{} system description:\n      \\newline\n      \n      \\emph{To optimize the delivery of JavaScript and CSS assets, the ResourceLoader module was developed to optimize delivery of JS and CSS. Started in 2009, it was completed in 2011 and has been a core feature of MediaWiki since version 1.17. ResourceLoader works by loading JS and CSS assets on demand, thus reducing loading and parsing time when features are unused, for example by older browsers. It also minifies the code, groups resources to save requests, and can embed images as data URIs.}\n      \\newline\n      \n      The \\emph{ResourceLoader} implements a tactic",
                "image": [],
                "options": [
                    "Increase Resource Efficiency",
                    "Increase Resources",
                    "Prioritize Events",
                    "Maintain Multiple Copies of Data"
                ]
            },
            {
                "questionId": "CHSecurityQualityINGLES",
                "content": "In \\ch{}, to accomplish the security quality, the Browser Process implements a tactic",
                "image": [],
                "options": [
                    "Data Encryption",
                    "Intrusion Detection",
                    "Limit Access",
                    "Authorize Actors"
                ]
            },
            {
                "questionId": "CHPerformanceQualityINGLES",
                "content": "In \\ch{} it is possible to associate a Renderer Process to each Tab, which results in the increase of performance due to a tactic of",
                "image": [],
                "options": [
                    "Introduce Concurrency",
                    "Maintain Multiple Copies of Computation",
                    "Limit Exposition",
                    "Active Redundancy"
                ]
            },
            {
                "questionId": "CHMobilityArchitecturalStyleINGLES",
                "content": "In the description of the \\ch{} case you can read:\n      \\newline\n      \n      \\emph{On Android devices, Chrome leverages the same multi-process architecture as the desktop version - there is a browser process, and one or more renderer processes. The one difference is that due to memory constraints of the mobile device, Chrome may not be able to run a dedicated renderer for each open tab. Instead, Chrome determines the optimal number of renderer processes based on available memory, and other constraints of the device, and shares the renderer process between the multiple tabs.} \n      \\newline\n      \n      This description can be represented by a view of viewtype Component-and-Connector using the architectural style",
                "image": [],
                "options": [
                    "Publication-Subscription",
                    "Pipes-and-Filters",
                    "Dynamic Creation and Destruction",
                    "Client-server"
                ]
            },
            {
                "questionId": "CHAmazonSilkTwoEN",
                "content": "An advantage of \\ch{} when compared with Amazon Silk is",
                "image": [],
                "options": [
                    "It can take advantage of concurrency",
                    "The \\emph{browser} needs to make more requests to the server",
                    "It uses machine learning techniques",
                    "It does not depend on a proprietary service"
                ]
            },
            {
                "questionId": "CHSecurityLevelEN",
                "content": "One of the qualities of \\ch{} is the execution of the JavaScript code inside a process, which allows the isolation against possible interferences between the execution of JavaScript programs that are loaded from different sites. The isolation level",
                "image": [],
                "options": [
                    "It is always the same for all instances of \\ch{}",
                    "It is defined compile-time of \\ch{} code",
                    "It is defined during the initialization of each instance of \\ch{}",
                    "It can change during the execution of each instance of \\ch{}"
                ]
            },
            {
                "questionId": "CHOmniboxTacticsEN",
                "content": "In the description of the \\ch{} case study you can read:\n      \\newline\n      \n      \\emph{Typing in the Omnibox (URL) bar triggers high-likelihood suggestions, which may similarly kick off a DNS lookup, TCP pre-connect, and even prerender the page in a hidden tab.} \n      \\newline\n      \n      This description refers to",
                "image": [],
                "options": [
                    "Maintain User Model tactic",
                    "Maintain Task Model tactic",
                    "Maintain System Model tactic",
                    "Support User Initiative tactics"
                ]
            },
            {
                "questionId": "GMPicklePerformanceEN",
                "content": "Consider the following fragment of \\gm{} \n  \\newline\n  \n  \\emph{In Mailman 2, the MailList object's state is stored in a file called config.pck, which is just the pickled representation of the MailList object's dictionary. Every Python object has an attribute dictionary called \\_\\_dict\\_\\_. So saving a mailing list object then is simply a matter of pickling its \\_\\_dict\\_\\_ to a file, and loading it just involves reading the pickle from the file and reconstituting its \\_\\_dict\\_\\_.}\n  \\newline\n      \n      Although simple, this solution resulted in several problems which had a negative impact on performance. This is due to:",
                "image": [],
                "options": [
                    "It is necessary to decompress the complete file, even though if only a small part of the information is needed",
                    "Pickle algorithm is not efficient",
                    "It is a Python specific solution",
                    "Limitations of the concurrent access to files"
                ]
            },
            {
                "questionId": "GMRestModularityEN",
                "content": "Consider the following fragment of \\gm{} case study:\n  \\newline\n  \n  \\emph{Mailman 3 has adopted the Representational State Transfer (REST) model for external administrative control. REST is based on HTTP, and Mailman's default object representation is JSON. These protocols are ubiquitous and well-supported in a large variety of programming languages and environments, making it fairly easy to integrate Mailman with third party systems. REST was the perfect fit for Mailman 3, and now much of its functionality is exposed through a REST API.}\n  \\newline\n      \n      This solution allowed:",
                "image": [],
                "options": [
                    "Increase the modifiability quality, because the new user interface was implemented using the REST interface",
                    "Increase the modifiability quality, because external applications stopped using the administrative functionalities",
                    "Increase the interoperability quality, because external applications can read and send messages to \\gm{}",
                    "None of the previous options"
                ]
            },
            {
                "questionId": "GMPipesFiltersDataEN",
                "content": "Consider the following fragment of \\gm{} case study:\n  \\newline\n  \n  \\emph{Once a message has made its way through the chains and rules and is accepted for posting, the message must be further processed before it can be delivered to the final recipients. For example, some headers may get added or deleted, and some messages may get some extra decorations that provide important disclaimers or information, such as how to leave the mailing list.}\n  \\newline\n      \n      The Pipes-and-Filters architectural style is used in the handling of messages. In this context the data type which is sent among the filters is",
                "image": [],
                "options": [
                    "A sequence of bytes to allow independence between filters",
                    "An object tree to allow the simultaneous execution of several filters",
                    "A sequence of bytes to allow that the order of filters execution is not relevant",
                    "An object tree to simplify the processing of each filter"
                ]
            },
            {
                "questionId": "GMReliabilityFIFOEN",
                "content": "In the description of the \\gm{} case study it is proposed a solution that, when there are several queue runners executing on the same queue, the delivery of messages is done according to arrival order (FIFO).\n  \\newline\n  \n  \\emph{There's another side effect of this algorithm that did cause problems during the early design of this system. Despite the unpredictability of email delivery in general, the best user experience is provided by processing the queue files in FIFO order, so that replies to a mailing list get sent out in roughly chronological order.}\n  \\newline\n  \n  The proposed solution",
                "image": [],
                "options": [
                    "Effectively guarantees the FIFO delivery of messages and the queue runners do not need to synchronize",
                    "Guarantees the FIFO delivery of messages but the queue runners need to synchronize",
                    "Does not guarantee the FIFO delivery of messages, some messages may be delivery by a different order",
                    "Guarantees the FIFO delivery of messages because in each \\emph{queue} only are stored messages which arrived with a difference of more than one minute"
                ]
            },
            {
                "questionId": "GMMasterRunnerEN",
                "content": "The function of Master Runner component of \\gm{} can be represented using an architecture style of",
                "image": [],
                "options": [
                    "Client-Server",
                    "Peer-to-Peer",
                    "Dynamic Creation and Destruction",
                    "Tiers"
                ]
            },
            {
                "questionId": "GMMessagesPersistenceEN",
                "content": "In Mailman 3 messages are still being persistently stored using pickle because",
                "image": [],
                "options": [
                    "Each messages does not need to be accessed concurrently by several processes",
                    "Pickle can efficiently write and read messages",
                    "Each message is stored as a file in a directory",
                    "Al the previous options"
                ]
            },
            {
                "questionId": "InstallImplementationStylesEN",
                "content": "The Install and Implementation architectural styles",
                "image": [],
                "options": [
                    "Allocate modules to the file system",
                    "Differ on the emphasis on production and development phases of the software process",
                    "Are applied to completely distinct sets of files",
                    "Are applied to the same set of files"
                ]
            },
            {
                "questionId": "FenixTwoEN",
                "content": "The architecturally significant qualities of the second F\u00e9nix architecture are:",
                "image": [],
                "options": [
                    "Interoperability e Performance",
                    "Performance and Availability",
                    "Easy Development and Performance",
                    "Modifiability and Performance"
                ]
            },
            {
                "questionId": "ElasticityDeferBindingEN",
                "content": "The elasticity of a system, defined as its capability to easily adapt to load changes, is often represented as a required property of the scalability quality. For this level of easiness contribute the architectural solutions associated with the following tactic(s)",
                "image": [],
                "options": [
                    "Defer Binding",
                    "Passive Redundancy",
                    "Active Redundancy",
                    "Passive Redundancy and Active Redundancy"
                ]
            },
            {
                "questionId": "UnitOfWorkEN",
                "content": "The Unit of Work pattern can be implemented in an application server, while it is still necessary to use transactions in the repository to access to the data. In this situation",
                "image": [],
                "options": [
                    "It is necessary to use a optimistic concurrency control policy because the transactions cannot be open for a long period",
                    "It is necessary to use a pessimistic concurrency control policy to avoid frequent conflicts in the transactions",
                    "Both, pessimistic and optimistic, concurrency control policies can be used",
                    "Transactional management is the complete responsibility of the repository"
                ]
            },
            {
                "questionId": "AvailabilityVotingEN",
                "content": "The availability quality can be supported by a voting tactic in order to identify faults of",
                "image": [],
                "options": [
                    "Programming, if the components execute modules developed by different teams",
                    "Hardware, if there is hardware redundancy",
                    "Operating Systems, if redundant components execute on top of different operating systems",
                    "All the previous options"
                ]
            },
            {
                "questionId": "SecurityInternalSourceEN",
                "content": "When the source of an attack is internal to an organization the tactics which are more efective are",
                "image": [],
                "options": [
                    "Detect and Recover from the attack",
                    "Resist to the attack",
                    "React to the attack",
                    "Resist and React to the attack"
                ]
            },
            {
                "questionId": "DataModelEN",
                "content": "The detail that can be used in a view of the Data Model view type can be conceptual, logical or physical.",
                "image": [],
                "options": [
                    "If there are performance requirements concerning the access to data, then the level of detail should be physical",
                    "It should always consider the physical detail level",
                    "The logical detail level should only be used when the target of implementation is a relational database",
                    "Only the conceptual level is required, the other two levels of detail are optional"
                ]
            },
            {
                "questionId": "PublishSubscribeEN",
                "content": "In the Publish-Subscribe architectural style, the components, from the point of view of the modules they execute",
                "image": [],
                "options": [
                    "Depend on the types of the publishers components",
                    "Only depend on the type of events",
                    "Are completely independent",
                    "It is necessary to support dynamic Defer Binding of components, publishers and subscribers, to the connector to be completely independent"
                ]
            },
            {
                "questionId": "UsabilityNonArchitecturalEN",
                "content": "Some usability qualities are not architectural because",
                "image": [],
                "options": [
                    "They only concern the web designers",
                    "They are dependent on performance tactics",
                    "They are dependent on availability tactics",
                    "They are not implemented by a usability tactic"
                ]
            },
            {
                "questionId": "WorldWideEN",
                "content": "In world-wide systems like Facebook or Amazon,",
                "image": [],
                "options": [
                    "All functionalities can be transactional",
                    "Only a small set of functionalities are transactional",
                    "It is not necessary to have transactional properties because all data is in memory",
                    "Only the isolation property of transactions is supported"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2013/exam2/exame-20140130-companion-en.tex",
        "quizTitle": "..-data-2013-exam2-exame-20140130-companion-en",
        "questions": [
            {
                "questionId": "GPCarbonBufferInterfaceEN",
                "content": "In the \\gp{} system the component \\emph{carbon} provides to \\emph{webapp} components an access interface to the \\emph{buffers} in order to improve the quality(ies) of",
                "image": [],
                "options": [
                    "Performance",
                    "Reliability and Performance",
                    "Reliability",
                    "Security"
                ]
            },
            {
                "questionId": "GPCCViewEN",
                "content": "An higher-level component-and-connect view of \\gp{} system can be designed using only the architectural style(s)",
                "image": [],
                "options": [
                    "Repository and Communicating-Processes",
                    "Communicating-Processes",
                    "Tiers",
                    "Client-Server and Repository"
                ]
            },
            {
                "questionId": "GPComposerUIPerformanceEN",
                "content": "The \\emph{Composer UI} component of \\gp{} system, described as - \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL} - to be effective needs to show to the user the changes she performs in the graph such that she has immediate feedback about the result of the changes. To do so, the system needs to implement the tactics of",
                "image": [],
                "options": [
                    "Task Model",
                    "System Model",
                    "Performance",
                    "User Model"
                ]
            },
            {
                "questionId": "MWLowCostEN",
                "content": "The design of the \\mw{} architecture was constrained the requirement that the solution should have relatively low cost. Due to this restriction it was taken the architectural decision of",
                "image": [],
                "options": [
                    "Only have a server for write requests",
                    "Store all the information statically",
                    "Prioritize performance and availability over functionality",
                    "Use several levels of cache"
                ]
            },
            {
                "questionId": "MWTacticsEN",
                "content": "Consider a Component-and-Connector architectural view of the \\mw{} system where all the clients are connected to a server through a request-reply connector. This connector implements the tactics",
                "image": [],
                "options": [
                    "Passive Redundancy and Increase Resources Efficiency",
                    "Active Redundancy and Increase Resources Efficiency",
                    "Active Redundancy and Maintain Multiple Copies of Computation",
                    "Passive Redundancy and Maintain Multiple Copies of Computation"
                ]
            },
            {
                "questionId": "MWReliabilityImplementationEN",
                "content": "The \\mw{} system tries to enforce a reliability criteria that all the changes done by a writer are consistently visualized in her subsequent reads. This criteria is implemented",
                "image": [],
                "options": [
                    "In the server",
                    "By the load balancer",
                    "In the repository",
                    "In the client"
                ]
            },
            {
                "questionId": "MWReliabilityReadsTacticEN",
                "content": "The \\mw{} system tries to guarantee a reliability criteria where all information is available to be read by any reader in less than 30 seconds after being written. To achieve this criteria it is implemented a tactic of",
                "image": [],
                "options": [
                    "Escalating Restart",
                    "Voting",
                    "Degradation",
                    "Exception Handling"
                ]
            },
            {
                "questionId": "MWVerBlobTacticEN",
                "content": "In the description of \\mw{} system we can read:\n      \\newline\n      \n      \\emph{The first revision of the blob is stored in full, and following revisions to the same page are stored as diffs relative to the previous revision; the blobs are then gzipped. Because the revisions are grouped per page, they tend to be similar, so the diffs are relatively small and gzip works well. The compression ratio achieved on Wikimedia sites nears 98\\%.}\n      \\newline\n      \n      This description refers to a tactic of",
                "image": [],
                "options": [
                    "Prioritize Events",
                    "Increase Resources",
                    "Increase Resources Efficiency",
                    "Maintain Multiple Copies of Data"
                ]
            },
            {
                "questionId": "CHQualitiesEN",
                "content": "\\ch{}, as described in the case study, was designed to support the accomplish the following architectural qualities:",
                "image": [],
                "options": [
                    "Security and Mobility",
                    "Performance, Security and Interoperability",
                    "Security, Performance, Usability, Interoperability and Mobility",
                    "Security, Performance, Usability and Mobility"
                ]
            },
            {
                "questionId": "CHPerformanceQualityTwoEN",
                "content": "In the description of \\ch{} case study we can read:\n      \\newline\n      \n      \\emph{Chrome maintains a single instance of the resource dispatcher, which is shared across all render processes, and runs within the browser kernel process.}\n      \\newline\n      \n      The \\emph{Resource Dispatcher} contributes to the performance quality because it implements a tactic of",
                "image": [],
                "options": [
                    "Schedule Resources",
                    "Increase Resources",
                    "Introduce Concurrency",
                    "Maintain Multiple Copies of Computation"
                ]
            },
            {
                "questionId": "CHAmazonSilkEN",
                "content": "An advantage of Amazon Silk when compared with \\ch{} is",
                "image": [],
                "options": [
                    "Separates the Renderer process from the other processes",
                    "The \\emph{browser} needs to make less requests to the server",
                    "Applies machine learning techniques",
                    "Uses prefetching"
                ]
            },
            {
                "questionId": "CHRenderStyleEN",
                "content": "An architectural view of the Component-and-Connector viewtype that describes the interactions within the Renderer Process component of \\ch{}, uses the architectural style",
                "image": [],
                "options": [
                    "Repository",
                    "Communicating-Processes",
                    "Service-Oriented Architecture",
                    "Client-Server"
                ]
            },
            {
                "questionId": "CHPrerenderTacticsEN",
                "content": "In some situations \\ch{} prerenders a page. To do it",
                "image": [],
                "options": [
                    "Uses the Introduce Concurrency tactic",
                    "The page is in cache",
                    "Uses the Maintain Multiple Copies of Computation tactic",
                    "Uses the Maintain Multiple Copies of Data tactic"
                ]
            },
            {
                "questionId": "CHOmniboxQualitiesEN",
                "content": "In the description of the \\ch{} case study you can read:\n      \\newline\n      \n      \\emph{Typing in the Omnibox (URL) bar triggers high-likelihood suggestions, which may similarly kick off a DNS lookup, TCP pre-connect, and even prerender the page in a hidden tab.} \n      \\newline\n      \n      This description refers to the qualities of",
                "image": [],
                "options": [
                    "Usability e Modifiability",
                    "Performance e Usability",
                    "Availability e Usability",
                    "Availability e Performance"
                ]
            },
            {
                "questionId": "GMRestInteroperabilityEN",
                "content": "Consider the following fragment of \\gm{} case study:\n  \\newline\n  \n  \\emph{Mailman 3 has adopted the Representational State Transfer (REST) model for external administrative control. REST is based on HTTP, and Mailman's default object representation is JSON. These protocols are ubiquitous and well-supported in a large variety of programming languages and environments, making it fairly easy to integrate Mailman with third party systems. REST was the perfect fit for Mailman 3, and now much of its functionality is exposed through a REST API.}\n  \\newline\n      \n      This solution allowed increased interoperability because",
                "image": [],
                "options": [
                    "The new user interface started using the REST interface",
                    "External applications can administrate the GNU Mailman mailing lists",
                    "External applications can read and send messages to \\gm{}",
                    "The \\gm{} interface became public"
                ]
            },
            {
                "questionId": "GMPipesFiltersEN",
                "content": "Consider the following fragment of \\gm{} case study:\n  \\newline\n  \n  \\emph{Once a message has made its way through the chains and rules and is accepted for posting, the message must be further processed before it can be delivered to the final recipients. For example, some headers may get added or deleted, and some messages may get some extra decorations that provide important disclaimers or information, such as how to leave the mailing list.}\n  \\newline\n      \n      The architectural style that is more accurate to describe the flexible processing of messages is",
                "image": [],
                "options": [
                    "Communicating-Processes",
                    "Client-Server",
                    "Pipes-and-Filters",
                    "Publish-Subscribe"
                ]
            },
            {
                "questionId": "GMDataModelEN",
                "content": "Consider the following fragment of \\gm{} case study:\n  \\newline\n  \n  \\emph{Email messages can act as containers for other types of data, as defined in the various MIME standards. A container message part can encode an image, some audio, or just about any type of binary or text data, including other container parts.}\n  \\newline\n      \n      The architectural style that is more accurate to describe this transcription is",
                "image": [],
                "options": [
                    "Data Model",
                    "Decomposition",
                    "Aspects",
                    "Pipes-and-Filters"
                ]
            },
            {
                "questionId": "GMPerformanceEN",
                "content": "Consider the following transcription of the \\gm{} system:\n  \\newline\n  \n  \\emph{...Mailman supports running more than one runner process per queue directory...}\n  \\newline\n  \n  It has the goal to support",
                "image": [],
                "options": [
                    "The quality of Performance",
                    "The quality of Availability",
                    "The quality of Reliability",
                    "The FIFO delivery of messages"
                ]
            },
            {
                "questionId": "GMReliabilityBounceEN",
                "content": "Consider the following description of the \\gm{} system:\n  \\newline\n  \n  \\emph{VERP stands for Variable Envelope Return Path, and it is a well-known technique that mailing lists use to unambiguously determine bouncing recipient addresses. When an address on a mailing list is no longer active, the recipient's mail server will send a notification back to the sender. In the case of a mailing list, you want this bounce to go back to the mailing list, not to the original author of the message; the author can't do anything about the bounce, and worse, sending the bounce back to the author can leak information about who is subscribed to the mailing list. When the mailing list gets the bounce, however, it can do something useful, such as disable the bouncing address or remove it from the list's membership.}\n  \\newline\n  \n  This transcription describes the quality(ies) of",
                "image": [],
                "options": [
                    "Security",
                    "Security and Testability",
                    "Reliability and Modifiability",
                    "Reliability and Testability"
                ]
            },
            {
                "questionId": "GMSwitchboardEN",
                "content": "Consider the following description of the \\gm{} system:\n  \\newline\n  \n  \\emph{There is a core Mailman class called Switchboard which provides an interface for enqueuing (i.e., writing) and dequeuing (i.e., reading) the message object tree and metadata dictionary to files in a specific queue directory. Every queue directory has at least one switchboard instance, and every queue runner instance has exactly one switchboard.}\n  \\newline\n  \n  This transcription contains relevant information for viewtypes of",
                "image": [],
                "options": [
                    "Module",
                    "Component-and-Connector",
                    "Module and Component-and-Connector",
                    "Module, but only for the Decomposition architectural style"
                ]
            },
            {
                "questionId": "FenixThreeEN",
                "content": "The architecturally significant requirements of the third architecture of F\u00e9nix are",
                "image": [],
                "options": [
                    "Modifiability and Interoperability",
                    "Performance and Interoperability",
                    "Easiness of Development and Performance",
                    "Interoperability"
                ]
            },
            {
                "questionId": "FenixOneEN",
                "content": "In the F\u00e9nix first architecture it was common programmers forget to lock objects in the context of transactions. A solution for this problem can be architecturally described using a view of the architectural style",
                "image": [],
                "options": [
                    "Decomposition",
                    "Aspects",
                    "Uses",
                    "Data Model"
                ]
            },
            {
                "questionId": "InternationalizationTacticsEN",
                "content": "The internationalization of the user interface is supported by the tactic(s)",
                "image": [],
                "options": [
                    "User Model and Undo",
                    "User Model",
                    "User Model and System Model",
                    "System Model"
                ]
            },
            {
                "questionId": "IdentityMapEN",
                "content": "To implement the Identity Map pattern",
                "image": [],
                "options": [
                    "It is not possible to support SQL searches in the application server",
                    "It is always necessary to search in the database before accessing an object",
                    "All accesses to objects should occur through their inter-references",
                    "It is necessary that each object has a unique identifier"
                ]
            },
            {
                "questionId": "AvailabilityDefensiveEN",
                "content": "In defensive programming the programmer checks that the conditions under which modules are invoked comply with their specification, and if they don't an exception is raised to avoid failure propagation. When defensive programming is followed, in the context of availability quality, we are using a tactic of",
                "image": [],
                "options": [
                    "Exception Handling",
                    "Increase Competence Set",
                    "Exception Prevention",
                    "Exception Detection"
                ]
            },
            {
                "questionId": "ObserverUsesEN",
                "content": "In the Observer design pattern, where the model invokes a notification method on all its observers whenever it is changed, can be said, in what concerns the Uses relation of the Uses architectural style, that",
                "image": [],
                "options": [
                    "The Model module uses the Observer module",
                    "The Model module uses the Observer module if data is sent in the notification",
                    "The Model module uses the Observer module if complex data is sent in the notification",
                    "In what concerns the notification, the Model module does not use the Observer module"
                ]
            },
            {
                "questionId": "UsesLayersEN",
                "content": "Consider the Uses and Layered architectural styles.",
                "image": [],
                "options": [
                    "The Uses views are designed first",
                    "The Layered view are designed first",
                    "There isn't any predefined order to design Uses and Layered views",
                    "Whenever there is at least one Uses view then a Layered view needs to be designed as well"
                ]
            },
            {
                "questionId": "SeveralStylesViewEN",
                "content": "An architectural view",
                "image": [],
                "options": [
                    "Can only contain a single architectural style",
                    "May contain several architectural styles, but only if the are of the Component-and-Connector and Allocation viewtypes",
                    "May contain several architectural styles, but only if they are of the same viewtype",
                    "May contain several architectural styles, if that is the best way to convey the information to a group of stakeholders"
                ]
            },
            {
                "questionId": "ApplyUsesEN",
                "content": "The Uses architectural style",
                "image": [],
                "options": [
                    "Can only be applied after the Decomposition view is finished",
                    "Can be applied before a Decomposition view is designed",
                    "Once applied in a view may be necessary to change the Decomposition view",
                    "Should be applied in at least a view of the system"
                ]
            },
            {
                "questionId": "EnterpriseWideEN",
                "content": "In a enterprise-wide system, like F\u00e9nix system,",
                "image": [],
                "options": [
                    "It is an advantage for programmers that the transactional behavior is transparently provided",
                    "It is not necessary to have transactional behavior in the business logic",
                    "The Component-and-Connector architecture needs to have three Tiers",
                    "The Module architecture needs to have three Layers"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2014/exam/exam20150109/exame-20150109-companion-A.tex",
        "quizTitle": "..-data-2014-exam-exam20150109-exame-20150109-companion-A",
        "questions": [
            {
                "questionId": "ArchitectureInfluenceCycle",
                "content": "The software architecture of a system",
                "image": [],
                "options": [
                    "Depends mostly on the system's functional requirements.",
                    "Depends more on the architect's experience than on anything\n    else.",
                    "Should not depend on the skills of the developing team.",
                    "Is driven by a trade-off among the stakeholders needs."
                ]
            },
            {
                "questionId": "TechoGeeks",
                "content": "Frank Buschmann, \\emph{Introducing the Pragmatic Architect}, defines the \\emph{techno-geeks} architects. This kind of architect",
                "image": [],
                "options": [
                    "May be responsible for the Featuritis problems of architectures.",
                    "May be responsible for the Performitis problems of architectures.",
                    "Is focused on creating common generalizations of several systems.",
                    "Is focused on the details of the architecture."
                ]
            },
            {
                "questionId": "FeaturitisOrderPad",
                "content": "Frank Buschmann states that:\n        \n    \\begin{quote}\n        Featuritis is the tendency to trade functional coverage for quality - the more functions the earlier they're delivered, the better.\n    \\end{quote}\n    \n    In the OrderPad system the architect regretted not getting performance tests going earlier. The OrderPad system",
                "image": [],
                "options": [
                    "Suffered from featuritis, because the architect decided to delay the difficult parts for latter in the development.",
                    "Did not suffer from featuritis.",
                    "Suffered from some level of featuritis, but it allowed to have a pilot from which the team learned.",
                    "Suffered from featuritis, but it had no impact on the final development."
                ]
            },
            {
                "questionId": "ArchitectureDefinition",
                "content": "The software architecture of a system",
                "image": [],
                "options": [
                    "Is a high-level view of the system with the purpose of\n  understanding what are the system's goals and features.",
                    "Is composed of things such as code units, runtime elements,\n  hardware, and people, together with the relationships among them.",
                    "Is a set of guidelines that the developing team should\n  follow in the development of the system.",
                    "Is a set of diagrams that show the runtime elements of the\n  system and their relationships."
                ]
            },
            {
                "questionId": "ModuleComponent",
                "content": "Which of the following phrases best describe the relationship\n  between modules and components?",
                "image": [],
                "options": [
                    "A module may contain code from different components.",
                    "A component may execute code from different modules.",
                    "A module may execute code from different components.",
                    "A component may contain code from different modules."
                ]
            },
            {
                "questionId": "Scenario",
                "content": "Consider the following scenario\n    \n    \\begin{quote}\n        Our vehicle information system send our current location to the traffic monitoring system. The traffic monitoring system combines our location with other information, overlays this information on a Google Map, and broadcasts it. Our location information is correctly included with a probability of 99.99\\%.\n    \\end{quote}",
                "image": [],
                "options": [
                    "The current location is the source of the stimulus.",
                    "The traffic monitoring system is the environment.",
                    "The Google Map is the artefact.",
                    "The location information is correctly included with a probability of 99.99\\% is the response measure."
                ]
            },
            {
                "questionId": "Checksum",
                "content": "Checksum is a technic that it is often used in architectural design. It can be used as",
                "image": [],
                "options": [
                    "A Condition Monitoring tactic for the Availability quality.",
                    "An Encrypt Data tactic for the Security quality.",
                    "A Verify Message Integrity tactic to React to Attacks for the Security quality.",
                    "An Exception Prevention tactic to Prevent Faults for the Availability quality."
                ]
            },
            {
                "questionId": "Attack",
                "content": "An attack is",
                "image": [],
                "options": [
                    "The source of stimulus for scenarios of the Availability quality.",
                    "The stimulus for scenarios of the Availability quality.",
                    "The stimulus for scenarios of the Security quality.",
                    "The source of stimulus for scenarios of the Security quality."
                ]
            },
            {
                "questionId": "SocialCalcTactics",
                "content": "In the description of the SocialCalc case study can be read:\n    \n    \\begin{quote}\n        As the user scrolls the spreadsheet through our custom-drawn scroll bars, we dynamically update the innerHTML of the pre-drawn \\textsc{<td>} elements. This means we don't need to create or destroy any \\textsc{<tr>} or \\textsc{<td>} elements in many common cases, which greatly speeds up response time.\n    \\end{quote} \n    \n    This corresponds to the application of",
                "image": [],
                "options": [
                    "Manage sampling rate tactic.",
                    "Increase resource efficiency tactic.",
                    "Introduce concurrency tactic.",
                    "Schedule resources tactic."
                ]
            },
            {
                "questionId": "ThousandParsecTactics",
                "content": "In the description of the Thousand Parsec case study can be read:\n    \n    \\begin{quote}\n        A ruleset designer thus has the ability to create new object types or store additional information in the existing object types as required by the ruleset, allowing for virtually unlimited extensibility in terms of the available physical objects in the game.\n    \\end{quote} \n    \n    This excerpt can be represented as a modifiability scenario where",
                "image": [],
                "options": [
                    "The source of stimulus is the ruleset.",
                    "The ruleset designer is the stimulus.",
                    "The environment is design time.",
                    "The response is defer binding."
                ]
            },
            {
                "questionId": "GitTactics",
                "content": "In the description of the Git case study can be read:\n    \n    \\begin{quote}\n        Git tackles the storage space problem by packing objects in a compressed format, using an index file which points to offsets to locate specific objects in the corresponding packed file.\n    \\end{quote}\n    \n    The tactic addressed in this fragments is:",
                "image": [],
                "options": [
                    "Schedule resources.",
                    "Condition monitoring.",
                    "Reduce overhead.",
                    "Increase resource efficiency."
                ]
            },
            {
                "questionId": "DesigningArchitecture",
                "content": "The architectural significant requirements are important in the process of creating\n  the software architecture for a system because they define",
                "image": [],
                "options": [
                    "The most important requirements (both functional and\n  qualities) that the system must achieve.",
                    "How the components manage the communication between the\n  remaining elements in the system.",
                    "The stakeholders that drive the development of the system.",
                    "The tactics that satisfy the most important requirements for\n  the system."
                ]
            },
            {
                "questionId": "DecompositionGeneralization",
                "content": "Consider that a chess game should\n  provide an automatic and intelligent chess player, and that to\n  implement that player we will use some of the many chess engines\n  already available in the market.  Moreover, the system should allow\n  the user to choose which engine to use for each new game.  Given\n  these requirements, which of the architectural styles from the\n  module viewtype are best suited to satisfy them?",
                "image": [],
                "options": [
                    "The Decomposition style.",
                    "The Decomposition and Uses styles.",
                    "The Layered style.",
                    "The Generalization and Decomposition styles."
                ]
            },
            {
                "questionId": "UsesStyle",
                "content": "To achieve a faster time-to-market, software companies are\n  increasingly using a strategy of incremental releases of their\n  software, where each new release has a set of new features.  Which\n  architectural style is better to analyse whether the system's\n  software architecture is adequate for the planned incremental\n  releases?",
                "image": [],
                "options": [
                    "The Decomposition style.",
                    "The Deployment style.",
                    "The Uses style.",
                    "The Work-assignment style."
                ]
            },
            {
                "questionId": "Layered",
                "content": "Assume that one of the requirements for a graphical chess game is\n  that it should be able to run both in Microsoft's Windows and\n  Apple's Mac OS X operating systems.  A good solution for this system\n  would:",
                "image": [],
                "options": [
                    "Create a decomposition where there is a module corresponding\n  to the Windows OS and another one for the Mac OS X, each one\n  responsible for containing the OS-specific code.",
                    "Use a classic 3-layer architecture with the following\n  layers, from top to bottom: Presentation, Domain Logic, and Data\n  Access.",
                    "Use an aspect-oriented architecture, where an aspect is used to generate a graphical interface.",
                    "Use two deployment views, each one allocating different\n  components to different machines with different operating systems."
                ]
            },
            {
                "questionId": "InterfaceDelegation",
                "content": "Consider the concept of interface delegation",
                "image": [],
                "options": [
                    "It corresponds to a particular case of a specialization in a generalization view.",
                    "It represents a relation between a connector's role and a port of one of its internal components.",
                    "It represents a relation between a component's port and a port of one of its internal components.",
                    "It represent a relation between a component's port and a connector's role."
                ]
            },
            {
                "questionId": "Repository",
                "content": "A requirement for a chess game is that it keeps a table with the best scores obtained in the game.\n  Naturally, this information should be kept between two different\n  executions of the system.  Assuming that the game is a web-based application, then",
                "image": [],
                "options": [
                    "We have to use a Repository component-and-connector style.",
                    "It is not necessary to use a ``Data Access'' layer because the information is simple.",
                    "We must identify a module for writing the scores in a\n  Decomposition style.",
                    "We may assign the responsibility of writing the scores to\n  another module that already has other responsibilities."
                ]
            },
            {
                "questionId": "PeerToPeer",
                "content": "An email client such as Mozilla's Thunderbird or Microsoft's Outlook\n  allows a user both to read the emails that were sent to him and to\n  send new emails to other people.  To do that, the email client\n  connects to other components (one or more): some of these components\n  keep the user's mailboxes with all the emails that were sent to him,\n  whereas other components know how to forward the emails sent by the\n  user to their final destinations (associated with a new set of destinations).  In either case, it is always the\n  email client that makes a request to the other components, but\n  whereas in the first case the email client receives all the\n  information about the user's emails, in the second case only a\n  success or failure error code is returned.  The architectural\n  patterns that best describe the interactions between the components from the client to the final destinations",
                "image": [],
                "options": [
                    "Client-server in both cases.",
                    "Client-server in the first case and Peer-to-peer in the second.",
                    "Peer-to-peer in both cases.",
                    "Peer-to-peer in the first case and Client-Server in the second."
                ]
            },
            {
                "questionId": "PipesFilters",
                "content": "Consider that you intend to develop a system where it is necessary to change the emails received by the server (for instance, to remove potential virus or URLs for phishing sites). The goal is that each email is processed by this system before it is sent to other servers or it is stored locally. Additionally, the system should be easily modified to support new kinds of transformations. Which style is more suitable to satisfy these requirements?",
                "image": [],
                "options": [
                    "Peer-to-Peer.",
                    "Pipe-and-Filter.",
                    "Client-Server.",
                    "Publish-Subscribe."
                ]
            },
            {
                "questionId": "InstallView",
                "content": "Consider a system that will require a significative configuration effort during deployment, because it provides several variations of the same functionalities and it is necessary to choose which functionalities better fit in each case. The most helpful architectural view for this situation is",
                "image": [],
                "options": [
                    "Work assignment view.",
                    "Install view.",
                    "Implementation view.",
                    "Deployment view."
                ]
            },
            {
                "questionId": "ThounsandParsecView",
                "content": "Consider the architectural views for the ThousandParsec system. In the case description can be read:\n    \n    \\begin{quote}\n        The Requirements function verifies that each component added to the design conforms to the rules of other previously added components.\n    \\end{quote}\n    \n    The following diagram depicts a fragment of a proposal for the decomposition view of the system.\n    \n    \\begin{center}\n    \\includegraphics[width=100mm]{x-ThousandParsec-ruleset}\n  \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2014/exam/exam20150109/x-ThousandParsec-ruleset.png",
                        "width": 100
                    }
                ],
                "options": [
                    "The Requirements function is part of the Design module.",
                    "The Requirements function is not part of the RulesSet module.",
                    "The Requirements function is part of the Objects module.",
                    "The Requirements function is part of the Dynamic Design module."
                ]
            },
            {
                "questionId": "SocialCalcView",
                "content": "Consider the architectural views for the SocialCalc system. In the case description can be read:\n    \n    \\begin{quote}\n        The save format is in standard MIME multipart/mixed format, consisting of four text/plain; charset=UTF-8 parts, each part containing newline-delimited text with colon-delimited data fields. The parts are...\n        \n        This format is designed to be human-readable, as well as being relatively easy to generate programmatically. This makes it possible for Drupal's Sheetnode plugin to use PHP to convert between this format and other popular spreadsheet formats, such as Excel (.xls) and OpenDocument (.ods).\n    \\end{quote}\n    \n    From the above excerpt can be inferred the need to have",
                "image": [],
                "options": [
                    "A component-and-connector view using a shared-data style.",
                    "A data model view.",
                    "A service-oriented architecture view.",
                    "A data model view and a component-and-connector view using a shared-data style."
                ]
            },
            {
                "questionId": "GitViews",
                "content": "The architectural style that best represents the runtime execution of a system Git installed for a small group of developers is",
                "image": [],
                "options": [
                    "Peer-to-peer style.",
                    "Pipe-and-Filter style.",
                    "Shared-data style.",
                    "Publish-subscribe style."
                ]
            },
            {
                "questionId": "OrderPad",
                "content": "In the OrderPad system they have decided to use a Row Data Gateway data access pattern because",
                "image": [],
                "options": [
                    "The team did not know the FenixFramework.",
                    "The domain only needs CRUD (Create, Read, Update, and Delete) operations.",
                    "A domain layer is absent from the architecture.",
                    "Most of the information is stored in the client."
                ]
            },
            {
                "questionId": "EtherCalcAllocation",
                "content": "Consider the architectural views of EtherCalc system. In the case study description can be read\n  \n  \\begin{quote}\n      The Socialtext platform has both behind-the-firewall and on-the-cloud deployment options, imposing unique constraints on EtherCalc's resource and performance requirements.\n  \\end{quote}",
                "image": [],
                "options": [
                    "It is necessary to design two deployment views, one for each deployment option.",
                    "It is necessary to design a single deployment view that contains all the variation, because only the hardware capabilities change.",
                    "Two different component-and-connector views are necessary to represent the same runtime behavior of the system.",
                    "The deployment options have a large impact on the work assignment view."
                ]
            },
            {
                "questionId": "EtherCalcRedundancy",
                "content": "In EtherCalc initial prototype clients send their local commands and snapshots to the server, which result on redundant information on the server about the state of the spreadsheet. This redundancy is an application of",
                "image": [],
                "options": [
                    "Passive redundancy for availability, because it is possible to recover from the commands log.",
                    "Undo tactic for usability, because the server can undo the snapshot.",
                    "Increase resource efficiency tactic for performance, because it reduces the need of upfront calculus/computation on new clients.",
                    "Multiple copies of data tactic for performance, clients do not have to execute the commands."
                ]
            },
            {
                "questionId": "EtherCalcSnapshotPerformance",
                "content": "In EtherCalc initial prototype clients send their local commands, cursor movements and snapshots to the server.",
                "image": [],
                "options": [
                    "The server propagates them to all the clients.",
                    "The server propagates local commands and cursor movements to the clients, and keeps the snapshots for the initialization of new clients.",
                    "The server only propagates local commands to the clients and keeps cursor movements in a log and the snapshots in a repository.",
                    "The server propagates the snapshots and the cursor movements to the clients and store the local commands for the initialization of new clients."
                ]
            },
            {
                "questionId": "EtherCalcModifiabilityTestability",
                "content": "In the EtherCalc case description can be read\n \n  \\begin{quote}\n      The in-browser SocialCalc engine is written in JavaScript. We considered translating that logic into Perl, but that would have carried the steep cost of maintaining two code bases. \n  \\end{quote} \n  \n  The excerpt is referring to a quality of",
                "image": [],
                "options": [
                    "Testability.",
                    "Modifiability.",
                    "Testability and Modifiability.",
                    "Performance."
                ]
            },
            {
                "questionId": "ServiceLayer",
                "content": "The Service Layer pattern is typically used in conjunction with",
                "image": [],
                "options": [
                    "The Transaction Script pattern to help demarcate the\n  business transactions.",
                    "The Domain Model pattern to reduce the interface of the\n  Domain Logic layer to a controlled set.",
                    "The Data Access layer to be able to access the data that it\n  needs in each service.",
                    "The Table Module pattern to hide the details of the table\n  structure for the Presentation layer."
                ]
            },
            {
                "questionId": "ActiveRecord",
                "content": "The Active Record pattern is best used when we are also using",
                "image": [],
                "options": [
                    "The Transaction Script pattern.",
                    "The Table Module pattern.",
                    "The Domain Model pattern.",
                    "The Service Layer pattern."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2014/exam/exam20150109/exame-20150109-companion-B.tex",
        "quizTitle": "..-data-2014-exam-exam20150109-exame-20150109-companion-B",
        "questions": [
            {
                "questionId": "ServiceLayer",
                "content": "The Service Layer pattern is typically used in conjunction with",
                "image": [],
                "options": [
                    "The Transaction Script pattern to help demarcate the\n  business transactions.",
                    "The Domain Model pattern to reduce the interface of the\n  Domain Logic layer to a controlled set.",
                    "The Data Access layer to be able to access the data that it\n  needs in each service.",
                    "The Table Module pattern to hide the details of the table\n  structure for the Presentation layer."
                ]
            },
            {
                "questionId": "ActiveRecord",
                "content": "The Active Record pattern is best used when we are also using",
                "image": [],
                "options": [
                    "The Transaction Script pattern.",
                    "The Table Module pattern.",
                    "The Domain Model pattern.",
                    "The Service Layer pattern."
                ]
            },
            {
                "questionId": "InstallView",
                "content": "Consider a system that will require a significative configuration effort during deployment, because it provides several variations of the same functionalities and it is necessary to choose which functionalities better fit in each case. The most helpful architectural view for this situation is",
                "image": [],
                "options": [
                    "Work assignment view.",
                    "Install view.",
                    "Implementation view.",
                    "Deployment view."
                ]
            },
            {
                "questionId": "ThounsandParsecView",
                "content": "Consider the architectural views for the ThousandParsec system. In the case description can be read:\n    \n    \\begin{quote}\n        The Requirements function verifies that each component added to the design conforms to the rules of other previously added components.\n    \\end{quote}\n    \n    The following diagram depicts a fragment of a proposal for the decomposition view of the system.\n    \n    \\begin{center}\n    \\includegraphics[width=100mm]{x-ThousandParsec-ruleset}\n  \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2014/exam/exam20150109/x-ThousandParsec-ruleset.png",
                        "width": 100
                    }
                ],
                "options": [
                    "The Requirements function is part of the Design module.",
                    "The Requirements function is not part of the RulesSet module.",
                    "The Requirements function is part of the Objects module.",
                    "The Requirements function is part of the Dynamic Design module."
                ]
            },
            {
                "questionId": "Checksum",
                "content": "Checksum is a technic that it is often used in architectural design. It can be used as",
                "image": [],
                "options": [
                    "A Condition Monitoring tactic for the Availability quality.",
                    "An Encrypt Data tactic for the Security quality.",
                    "A Verify Message Integrity tactic to React to Attacks for the Security quality.",
                    "An Exception Prevention tactic to Prevent Faults for the Availability quality."
                ]
            },
            {
                "questionId": "Attack",
                "content": "An attack is",
                "image": [],
                "options": [
                    "The source of stimulus for scenarios of the Availability quality.",
                    "The stimulus for scenarios of the Availability quality.",
                    "The stimulus for scenarios of the Security quality.",
                    "The source of stimulus for scenarios of the Security quality."
                ]
            },
            {
                "questionId": "SocialCalcTactics",
                "content": "In the description of the SocialCalc case study can be read:\n    \n    \\begin{quote}\n        As the user scrolls the spreadsheet through our custom-drawn scroll bars, we dynamically update the innerHTML of the pre-drawn \\textsc{<td>} elements. This means we don't need to create or destroy any \\textsc{<tr>} or \\textsc{<td>} elements in many common cases, which greatly speeds up response time.\n    \\end{quote} \n    \n    This corresponds to the application of",
                "image": [],
                "options": [
                    "Manage sampling rate tactic.",
                    "Increase resource efficiency tactic.",
                    "Introduce concurrency tactic.",
                    "Schedule resources tactic."
                ]
            },
            {
                "questionId": "ThousandParsecTactics",
                "content": "In the description of the Thousand Parsec case study can be read:\n    \n    \\begin{quote}\n        A ruleset designer thus has the ability to create new object types or store additional information in the existing object types as required by the ruleset, allowing for virtually unlimited extensibility in terms of the available physical objects in the game.\n    \\end{quote} \n    \n    This excerpt can be represented as a modifiability scenario where",
                "image": [],
                "options": [
                    "The source of stimulus is the ruleset.",
                    "The ruleset designer is the stimulus.",
                    "The environment is design time.",
                    "The response is defer binding."
                ]
            },
            {
                "questionId": "GitTactics",
                "content": "In the description of the Git case study can be read:\n    \n    \\begin{quote}\n        Git tackles the storage space problem by packing objects in a compressed format, using an index file which points to offsets to locate specific objects in the corresponding packed file.\n    \\end{quote}\n    \n    The tactic addressed in this fragments is:",
                "image": [],
                "options": [
                    "Schedule resources.",
                    "Condition monitoring.",
                    "Reduce overhead.",
                    "Increase resource efficiency."
                ]
            },
            {
                "questionId": "Layered",
                "content": "Assume that one of the requirements for a graphical chess game is\n  that it should be able to run both in Microsoft's Windows and\n  Apple's Mac OS X operating systems.  A good solution for this system\n  would:",
                "image": [],
                "options": [
                    "Create a decomposition where there is a module corresponding\n  to the Windows OS and another one for the Mac OS X, each one\n  responsible for containing the OS-specific code.",
                    "Use a classic 3-layer architecture with the following\n  layers, from top to bottom: Presentation, Domain Logic, and Data\n  Access.",
                    "Use an aspect-oriented architecture, where an aspect is used to generate a graphical interface.",
                    "Use two deployment views, each one allocating different\n  components to different machines with different operating systems."
                ]
            },
            {
                "questionId": "InterfaceDelegation",
                "content": "Consider the concept of interface delegation",
                "image": [],
                "options": [
                    "It corresponds to a particular case of a specialization in a generalization view.",
                    "It represents a relation between a connector's role and a port of one of its internal components.",
                    "It represents a relation between a component's port and a port of one of its internal components.",
                    "It represent a relation between a component's port and a connector's role."
                ]
            },
            {
                "questionId": "Repository",
                "content": "A requirement for a chess game is that it keeps a table with the best scores obtained in the game.\n  Naturally, this information should be kept between two different\n  executions of the system.  Assuming that the game is a web-based application, then",
                "image": [],
                "options": [
                    "We have to use a Repository component-and-connector style.",
                    "It is not necessary to use a ``Data Access'' layer because the information is simple.",
                    "We must identify a module for writing the scores in a\n  Decomposition style.",
                    "We may assign the responsibility of writing the scores to\n  another module that already has other responsibilities."
                ]
            },
            {
                "questionId": "PeerToPeer",
                "content": "An email client such as Mozilla's Thunderbird or Microsoft's Outlook\n  allows a user both to read the emails that were sent to him and to\n  send new emails to other people.  To do that, the email client\n  connects to other components (one or more): some of these components\n  keep the user's mailboxes with all the emails that were sent to him,\n  whereas other components know how to forward the emails sent by the\n  user to their final destinations (associated with a new set of destinations).  In either case, it is always the\n  email client that makes a request to the other components, but\n  whereas in the first case the email client receives all the\n  information about the user's emails, in the second case only a\n  success or failure error code is returned.  The architectural\n  patterns that best describe the interactions between the components from the client to the final destinations",
                "image": [],
                "options": [
                    "Client-server in both cases.",
                    "Client-server in the first case and Peer-to-peer in the second.",
                    "Peer-to-peer in both cases.",
                    "Peer-to-peer in the first case and Client-Server in the second."
                ]
            },
            {
                "questionId": "ArchitectureInfluenceCycle",
                "content": "The software architecture of a system",
                "image": [],
                "options": [
                    "Depends mostly on the system's functional requirements.",
                    "Depends more on the architect's experience than on anything\n    else.",
                    "Should not depend on the skills of the developing team.",
                    "Is driven by a trade-off among the stakeholders needs."
                ]
            },
            {
                "questionId": "TechoGeeks",
                "content": "Frank Buschmann, \\emph{Introducing the Pragmatic Architect}, defines the \\emph{techno-geeks} architects. This kind of architect",
                "image": [],
                "options": [
                    "May be responsible for the Featuritis problems of architectures.",
                    "May be responsible for the Performitis problems of architectures.",
                    "Is focused on creating common generalizations of several systems.",
                    "Is focused on the details of the architecture."
                ]
            },
            {
                "questionId": "ModuleComponent",
                "content": "Which of the following phrases best describe the relationship\n  between modules and components?",
                "image": [],
                "options": [
                    "A module may contain code from different components.",
                    "A component may execute code from different modules.",
                    "A module may execute code from different components.",
                    "A component may contain code from different modules."
                ]
            },
            {
                "questionId": "Scenario",
                "content": "Consider the following scenario\n    \n    \\begin{quote}\n        Our vehicle information system send our current location to the traffic monitoring system. The traffic monitoring system combines our location with other information, overlays this information on a Google Map, and broadcasts it. Our location information is correctly included with a probability of 99.99\\%.\n    \\end{quote}",
                "image": [],
                "options": [
                    "The current location is the source of the stimulus.",
                    "The traffic monitoring system is the environment.",
                    "The Google Map is the artefact.",
                    "The location information is correctly included with a probability of 99.99\\% is the response measure."
                ]
            },
            {
                "questionId": "PipesFilters",
                "content": "Consider that you intend to develop a system where it is necessary to change the emails received by the server (for instance, to remove potential virus or URLs for phishing sites). The goal is that each email is processed by this system before it is sent to other servers or it is stored locally. Additionally, the system should be easily modified to support new kinds of transformations. Which style is more suitable to satisfy these requirements?",
                "image": [],
                "options": [
                    "Peer-to-Peer.",
                    "Pipe-and-Filter.",
                    "Client-Server.",
                    "Publish-Subscribe."
                ]
            },
            {
                "questionId": "SocialCalcView",
                "content": "Consider the architectural views for the SocialCalc system. In the case description can be read:\n    \n    \\begin{quote}\n        The save format is in standard MIME multipart/mixed format, consisting of four text/plain; charset=UTF-8 parts, each part containing newline-delimited text with colon-delimited data fields. The parts are...\n        \n        This format is designed to be human-readable, as well as being relatively easy to generate programmatically. This makes it possible for Drupal's Sheetnode plugin to use PHP to convert between this format and other popular spreadsheet formats, such as Excel (.xls) and OpenDocument (.ods).\n    \\end{quote}\n    \n    From the above excerpt can be inferred the need to have",
                "image": [],
                "options": [
                    "A component-and-connector view using a shared-data style.",
                    "A data model view.",
                    "A service-oriented architecture view.",
                    "A data model view and a component-and-connector view using a shared-data style."
                ]
            },
            {
                "questionId": "GitViews",
                "content": "The architectural style that best represents the runtime execution of a system Git installed for a small group of developers is",
                "image": [],
                "options": [
                    "Peer-to-peer style.",
                    "Pipe-and-Filter style.",
                    "Shared-data style.",
                    "Publish-subscribe style."
                ]
            },
            {
                "questionId": "OrderPad",
                "content": "In the OrderPad system they have decided to use a Row Data Gateway data access pattern because",
                "image": [],
                "options": [
                    "The team did not know the FenixFramework.",
                    "The domain only needs CRUD (Create, Read, Update, and Delete) operations.",
                    "A domain layer is absent from the architecture.",
                    "Most of the information is stored in the client."
                ]
            },
            {
                "questionId": "EtherCalcAllocation",
                "content": "Consider the architectural views of EtherCalc system. In the case study description can be read\n  \n  \\begin{quote}\n      The Socialtext platform has both behind-the-firewall and on-the-cloud deployment options, imposing unique constraints on EtherCalc's resource and performance requirements.\n  \\end{quote}",
                "image": [],
                "options": [
                    "It is necessary to design two deployment views, one for each deployment option.",
                    "It is necessary to design a single deployment view that contains all the variation, because only the hardware capabilities change.",
                    "Two different component-and-connector views are necessary to represent the same runtime behavior of the system.",
                    "The deployment options have a large impact on the work assignment view."
                ]
            },
            {
                "questionId": "EtherCalcRedundancy",
                "content": "In EtherCalc initial prototype clients send their local commands and snapshots to the server, which result on redundant information on the server about the state of the spreadsheet. This redundancy is an application of",
                "image": [],
                "options": [
                    "Passive redundancy for availability, because it is possible to recover from the commands log.",
                    "Undo tactic for usability, because the server can undo the snapshot.",
                    "Increase resource efficiency tactic for performance, because it reduces the need of upfront calculus/computation on new clients.",
                    "Multiple copies of data tactic for performance, clients do not have to execute the commands."
                ]
            },
            {
                "questionId": "EtherCalcSnapshotPerformance",
                "content": "In EtherCalc initial prototype clients send their local commands, cursor movements and snapshots to the server.",
                "image": [],
                "options": [
                    "The server propagates them to all the clients.",
                    "The server propagates local commands and cursor movements to the clients, and keeps the snapshots for the initialization of new clients.",
                    "The server only propagates local commands to the clients and keeps cursor movements in a log and the snapshots in a repository.",
                    "The server propagates the snapshots and the cursor movements to the clients and store the local commands for the initialization of new clients."
                ]
            },
            {
                "questionId": "EtherCalcModifiabilityTestability",
                "content": "In the EtherCalc case description can be read\n \n  \\begin{quote}\n      The in-browser SocialCalc engine is written in JavaScript. We considered translating that logic into Perl, but that would have carried the steep cost of maintaining two code bases. \n  \\end{quote} \n  \n  The excerpt is referring to a quality of",
                "image": [],
                "options": [
                    "Testability.",
                    "Modifiability.",
                    "Testability and Modifiability.",
                    "Performance."
                ]
            },
            {
                "questionId": "FeaturitisOrderPad",
                "content": "Frank Buschmann states that:\n        \n    \\begin{quote}\n        Featuritis is the tendency to trade functional coverage for quality - the more functions the earlier they're delivered, the better.\n    \\end{quote}\n    \n    In the OrderPad system the architect regretted not getting performance tests going earlier. The OrderPad system",
                "image": [],
                "options": [
                    "Suffered from featuritis, because the architect decided to delay the difficult parts for latter in the development.",
                    "Did not suffer from featuritis.",
                    "Suffered from some level of featuritis, but it allowed to have a pilot from which the team learned.",
                    "Suffered from featuritis, but it had no impact on the final development."
                ]
            },
            {
                "questionId": "ArchitectureDefinition",
                "content": "The software architecture of a system",
                "image": [],
                "options": [
                    "Is a high-level view of the system with the purpose of\n  understanding what are the system's goals and features.",
                    "Is composed of things such as code units, runtime elements,\n  hardware, and people, together with the relationships among them.",
                    "Is a set of guidelines that the developing team should\n  follow in the development of the system.",
                    "Is a set of diagrams that show the runtime elements of the\n  system and their relationships."
                ]
            },
            {
                "questionId": "DesigningArchitecture",
                "content": "The architectural significant requirements are important in the process of creating\n  the software architecture for a system because they define",
                "image": [],
                "options": [
                    "The most important requirements (both functional and\n  qualities) that the system must achieve.",
                    "How the components manage the communication between the\n  remaining elements in the system.",
                    "The stakeholders that drive the development of the system.",
                    "The tactics that satisfy the most important requirements for\n  the system."
                ]
            },
            {
                "questionId": "DecompositionGeneralization",
                "content": "Consider that a chess game should\n  provide an automatic and intelligent chess player, and that to\n  implement that player we will use some of the many chess engines\n  already available in the market.  Moreover, the system should allow\n  the user to choose which engine to use for each new game.  Given\n  these requirements, which of the architectural styles from the\n  module viewtype are best suited to satisfy them?",
                "image": [],
                "options": [
                    "The Decomposition style.",
                    "The Decomposition and Uses styles.",
                    "The Layered style.",
                    "The Generalization and Decomposition styles."
                ]
            },
            {
                "questionId": "UsesStyle",
                "content": "To achieve a faster time-to-market, software companies are\n  increasingly using a strategy of incremental releases of their\n  software, where each new release has a set of new features.  Which\n  architectural style is better to analyse whether the system's\n  software architecture is adequate for the planned incremental\n  releases?",
                "image": [],
                "options": [
                    "The Decomposition style.",
                    "The Deployment style.",
                    "The Uses style.",
                    "The Work-assignment style."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2014/exam/exam20150127/exame-20150127-companion-A.tex",
        "quizTitle": "..-data-2014-exam-exam20150127-exame-20150127-companion-A",
        "questions": [
            {
                "questionId": "ArchitectureKnowledge",
                "content": "Assuming that you were asked to document the software architecture\n  of an existing (and already developed) system, the best thing for\n  you to do would be",
                "image": [],
                "options": [
                    "To analyse the source code of the system to see how it is built",
                    "To analyse the system's functional requirements to see what\n  is the system supposed to do",
                    "To analyse the implemented set of features to see what is it\n  that the system actually does",
                    "To talk with the people that developed the system to know\n  what they did and why they did it"
                ]
            },
            {
                "questionId": "ArchitectureEvolution",
                "content": "Ralph Johnson says that\n  \n  \\begin{quote}\n      Architecture is the decisions that you wish you could get right early in a project.\n  \\end{quote}\n  \n  This sentence reflects the fact that",
                "image": [],
                "options": [
                    "The architecture of a system cannot change",
                    "The main goal of an architect is to identify the quality attributes of system",
                    "Architecture is the design that gets harder to change as development progresses",
                    "The main goal of an architect is to design a detailed structure of the system that supports most of the requirements"
                ]
            },
            {
                "questionId": "Performitis",
                "content": "Marquardt characterizes performitis as:\n    \n    \\begin{quote}\n        Each part of the system is directly influenced by local performance tuning measures. There is no global performance strategy, or it ignores other qualities of the system such as testability and maintainability.\n    \\end{quote}\n    \n    This means that",
                "image": [],
                "options": [
                    "It is not a good idea to consider performance when designing the architecture of the system",
                    "The performance of a system only depends on the global performance strategies",
                    "Testability and maintainability always conflict with performance",
                    "None of the above"
                ]
            },
            {
                "questionId": "ArchitecturalViews",
                "content": "The software architecture of a system is usually represented through several views because we need to",
                "image": [],
                "options": [
                    "Represent different architectural qualities and they may not be all represented in a single view",
                    "Have a view for each stakeholder",
                    "Have at least a view for each viewtype",
                    "Have a view for each group of interconnected components, and very often a system has several groups of interconnected components"
                ]
            },
            {
                "questionId": "ModueComponent",
                "content": "On the web page of Memcached can be read:\n  \n  \\begin{quote}\n      ..., high-performance, distributed memory object caching system, generic in nature, but intended for use in speeding up dynamic web applications by alleviating database load.\n  \\end{quote}\n  \n  According to this information, Memcached is",
                "image": [],
                "options": [
                    "A module",
                    "A component",
                    "Both, a module and a component",
                    "An allocation element"
                ]
            },
            {
                "questionId": "ConcreteScenario",
                "content": "As part of the process of creating an architecture, we talked about\n  a framework for capturing some of the requirements for a system.  In\n  this context, \\textbf{concrete scenarios} are used for",
                "image": [],
                "options": [
                    "Describing what are the qualities that the system should possess",
                    "Describing a set of steps that a user of the system must\n  perform to accomplish some task",
                    "Describing a use case for the system that makes clear what\n  should be the system's responses to each of the user's inputs",
                    "Describing the system's features by way of different\n  usage scenarios for it, in which users play the role of actors"
                ]
            },
            {
                "questionId": "AvailabilityPingEchoHeartbeat",
                "content": "Ping-and-echo and Heartbeat are two availability tactics to detect faults.",
                "image": [],
                "options": [
                    "Ping-and-echo requires the availability monitor to know the addresses of the components it is monitoring",
                    "Heartbeat requires the availability monitor to confirm the reception of the signal",
                    "In Ping-and-echo the availability monitor should always send the same request",
                    "In Heartbeat, the monitored components can change the message rate"
                ]
            },
            {
                "questionId": "SecurityDatabase",
                "content": "Consider that when designing the architecture of a web application, the architect intends to guarantee of the confidentiality of persistent data in face of an attack from a system administrator.",
                "image": [],
                "options": [
                    "It is not possible to achieve this requirement. A non-architectural solution is to be careful when hiring system administrators",
                    "It is necessary to use the authenticate authors tactic to authenticate system administrators before they access to the database",
                    "It is necessary to use the encrypt data tactic to encrypt the information with a password that is in a configuration file",
                    "It is necessary to use the encrypt data tactic to encrypt the information on the client web browser, before it is send to the web server"
                ]
            },
            {
                "questionId": "SocialCalcTactic",
                "content": "In the description of the SocialCalc case study can be read:\n    \n    \\begin{quote}\n        A simple improvement is for each client to broadcast its cursor position to other users, so everyone can see which cells are being worked on.\n    \\end{quote}\n    \n    This sentence describes a tactic for usability which is",
                "image": [],
                "options": [
                    "Maintain task model",
                    "Maintain user model",
                    "Maintain system model",
                    "Aggregate"
                ]
            },
            {
                "questionId": "ThousandParsecScenario",
                "content": "In the description of the ThousandParsec case study can be read:\n    \n    \\begin{quote}\n        The Thousand Parsec Component Language (TPCL) exists to allow clients to create designs locally without server interaction - allowing for instant feedback about the properties, makeup, and validity of the designs. \n    \\end{quote}\n    \n    From this sentence can be written",
                "image": [],
                "options": [
                    "A scenario for performance associated with a multiple copies of computation tactic",
                    "A scenario for usability associated with a support system initiative tactic",
                    "A scenario for performance associated with a limit event response tactic",
                    "A scenario for usability associated with a support user initiative tactic"
                ]
            },
            {
                "questionId": "GitTactic",
                "content": "In the description of GitHub case study can be read\n    \n    \\begin{quote}\n        Once the Smoke proxy has determined the user's route, it establishes a transparent proxy to the proper file server. We have four pairs of fileservers. Their names are fs1a, fs1b, ..., fs4a, fs4b. These are 8 core, 16GB RAM bare metal servers, each with six 300GB 15K RPM SAS drives arranged in RAID 10. At any given time one server in each pair is active and the other is waiting to take over should there be a fatal failure in the master. All repository data is constantly replicated from the master to the slave via DRBD.\n    \\end{quote}\n    \n    In this description we can find the application of tactics like",
                "image": [],
                "options": [
                    "Multiple copies of computation",
                    "Active redundancy",
                    "Increase resource efficiency",
                    "All of the above"
                ]
            },
            {
                "questionId": "ArchitecturallySignificantRequirements",
                "content": "According to the attribute-driven design process, we should design\n  the software architecture for a system based on a selected list of\n  requirements, which are called the \\textit{architecturally significant requirements}.\n  These architecturally significant requirements should be sorted according to their\n  importance for the system's stakeholders because",
                "image": [],
                "options": [
                    "We should always satisfy in the first place the requirements\n    of the more important stakeholders (such as the client)",
                    "If no order was established among them, we would not know\n    from where should we start the design process",
                    "If one of the stakeholders complains that her requirement\n    is not satisfied, we may explain to her that there were other more\n    important requirements first",
                    "When it is not possible to satisfy all of the requirements\n    optimally, we should be aware of their relative importance so that\n    we may find a solution that corresponds to a satisfactory trade-off"
                ]
            },
            {
                "questionId": "ModuleTraceability",
                "content": "Views of the module viewtype can be used to support requirements traceability analysis, determine how the functional requirements of a system are supported. This is represented by",
                "image": [],
                "options": [
                    "Decomposition view",
                    "Data model view",
                    "Generalization view",
                    "Layered view"
                ]
            },
            {
                "questionId": "GeneralizationInterfaces",
                "content": "You have to develop an application that collects news from different web sources and process that information to present a digest to the application users. The different sources provide similar information through different interfaces (APIs). Additionally, the new sources may change the interfaces, for instance to enhance their service. Which architectural style can be used to represent this requirements?",
                "image": [],
                "options": [
                    "Peer-to-Peer to represent the communication between the components",
                    "Client-Server to represent the request the application makes to the different new sources",
                    "Generalisation to represent an abstraction common to all interfaces and keep API-specific details in child modules",
                    "Layers to create a virtual machine that hides the internals of the application from its users interface code to allow the support of different user interfaces"
                ]
            },
            {
                "questionId": "UsesIncremental",
                "content": "When designing the architecture for a system the architect realises that most of the modules have bidirectional uses relationships. This has impact on",
                "image": [],
                "options": [
                    "Performance because there is an overhead of communication between the modules.",
                    "Install because most of the modules need to be assigned to the same executable file",
                    "Development because it is not possible to do incremental development",
                    "Availability because if a module fails the failure easily propagates to all the other modules"
                ]
            },
            {
                "questionId": "ComponentAndConnnector",
                "content": "The Java web servers, like Tomcat, use threads to process requests. For each request they create (or reuse) a thread to process it.\n    To draw a architectural view that describes this behaviour we should use",
                "image": [],
                "options": [
                    "A Module viewtype view",
                    "A Allocation viewtype view",
                    "A Communicating processes view",
                    "A Install view"
                ]
            },
            {
                "questionId": "LoadBalancer",
                "content": "To increase the availability of a web application it is possible to use a load-balancer between the clients and the servers that detects server failures and transparently redirects the requests to the servers that are functioning properly. To represent this architecture",
                "image": [],
                "options": [
                    "It is enough to show the load-balancer between the web clients machines and the servers machines using a deployment view",
                    "It is necessary to change the connector between the web clients and the web servers, in the component-and-connector view, to show the semantics that is provided by the load-balancer",
                    "It is necessary to create a uses view to show how clients require the correct functioning of servers",
                    "It is necessary to change the component-and-connector view to show the communicating processes"
                ]
            },
            {
                "questionId": "ThreeTiers",
                "content": "One way to increase the performance of a 3-tier enterprise\n  application (with the standard separation in the web client, web\n  server, and database tiers) is to replicate the web server tier and\n  to add a load-balancer between the web clients and the web servers.\n  Unfortunately, for some enterprise applications that option is not\n  enough (or does not work at all), because",
                "image": [],
                "options": [
                    "They have many different use cases, corresponding to many\n    distinct user interfaces",
                    "They have to process very large amounts of data in each request",
                    "They need to be able to process concurrent requests from\n    the users",
                    "They have a very complex domain logic that requires much\n    processing power for answering each request"
                ]
            },
            {
                "questionId": "PublishSubscribe",
                "content": "Typically, Instant Messaging clients have a window to list the contacts of the user, and\n  show in that window the status of each contact (whether it is available, unavailable, busy,\n  etc). Given that the status of a contact may be changed at any time, and that the contact's\n  status is given by the Instant Messaging application of that contact, which architectural\n  style represents best the interaction pattern between these components?",
                "image": [],
                "options": [
                    "The Shared Data style",
                    "The Pipes-and-filters style",
                    "The Publish-subscribe style",
                    "The Client-Server style"
                ]
            },
            {
                "questionId": "DeploymentPerformance",
                "content": "In the software architecture of a system, the Deployment view is\n  best suited for",
                "image": [],
                "options": [
                    "Analysing the performance of the system",
                    "Planning incremental releases of the system",
                    "Estimating the effort needed to implement the system",
                    "Analysing the system's portability and reusability"
                ]
            },
            {
                "questionId": "ThousandParsecPersistence",
                "content": "In the description of ThousandParsec case study can be read\n  \n  \\begin{quote}\n      The flagship server, \\textsc{tpserver-cpp}, provides an abstract persistence interface and a modular plugin system to allow for various database back ends. \n  \\end{quote}\n  \n    This above sentence can be diagrammatically represented using",
                "image": [],
                "options": [
                    "A generalisation architectural style",
                    "An aspects architectural style",
                    "A data model architectural style",
                    "A shared-data architectural style"
                ]
            },
            {
                "questionId": "SocialCalcBroadcastEvents",
                "content": "Consider the (partial) component-and-connector view for the \\textsc{:SpreasdSheet} component of the SocialCalc system\n  \n    \\begin{center}\n    \\includegraphics[width=70mm]{x-SocialCalc-spreadsheet-component}\n  \\end{center}\n    \n    \\begin{flushleft}\n        The \\textsc{sub1} port\n    \\end{flushleft}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2014/exam/exam20150127/x-SocialCalc-spreadsheet-component.png",
                        "width": 70
                    }
                ],
                "options": [
                    "Subscribes to the same kind of events that the \\textsc{sub2} port",
                    "Subscribes to the same kind of events that the \\textsc{inputSub} port",
                    "Subscribes to cursor position events",
                    "It is unnecessary in the diagram because the \\textsc{:TableEditor} can use port \\textsc{sub2} through the \\textsc{:Sheet} component"
                ]
            },
            {
                "questionId": "GitHubViews",
                "content": "In the description of GitHub case study can be read\n    \n    \\begin{quote}\n        For requests to the main website, the load balancer ships your request off to one of the four frontend machines. Each of these is an 8 core, 16GB RAM bare metal server. Their names are fe1, ..., fe4. Nginx accepts the connection and sends it to a Unix domain socket upon which sixteen Unicorn worker processes are selecting. One of these workers grabs the request and runs the Rails code necessary to fulfill it.\n    \\end{quote}\n    \n    To represent the above description it is necessary to use",
                "image": [],
                "options": [
                    "The communicating processes architectural style",
                    "The client-server architectural style",
                    "The deployment architectural style",
                    "All of the above"
                ]
            },
            {
                "questionId": "OrderPadTactics",
                "content": "In the description of architecture of the OrderPad case study, it can be read that the updates the user does on the OrderPad when it is offline are not lost. This availability quality is achieved through a",
                "image": [],
                "options": [
                    "Ignore faulty behaviour tactic",
                    "Ping-and-echo tactic",
                    "Active redundancy tactic",
                    "Retry tactic"
                ]
            },
            {
                "questionId": "EtherCalcPerformance",
                "content": "In the description of EtherCalc case study can be read\n    \n    \\begin{quote}\n        Because all jsdom code runs in a single thread, subsequent REST API calls are blocked until the previous command's rendering completes. Under high concurrency, this queue eventually triggered a latent bug that ultimately resulted in server lock-up.\n    \\end{quote}    \n    \n    The above sentence is related to a quality for",
                "image": [],
                "options": [
                    "Performance, because it describes what is the response to REST API calls",
                    "Modifiability, because the jsdom code can not be reused by several threads",
                    "Security, because it describes a \"queue overflow\" attack",
                    "Interoperability, because the REST API allow the exchange of information with external applications"
                ]
            },
            {
                "questionId": "EtherCalcTactic",
                "content": "In the description of EtherCalc case study can be read\n    \n    \\begin{quote}\n        So, we removed jsdom from the RenderSheet function, re-implemented a minimal DOM in 20 lines of LiveScript for HTML export, then ran the profiler again. Much better! We have improved throughput by a factor of 4, HTML exporting is 20 times faster, and the lock-up problem is gone.\n    \\end{quote}    \n    \n    The above sentence describes a",
                "image": [],
                "options": [
                    "Reduce overhead tactic",
                    "Increase resource efficiency tactic",
                    "Increase resources tactic",
                    "Testability tactic"
                ]
            },
            {
                "questionId": "EtherCalcTestability",
                "content": "In the description of EtherCalc case study can be read how the architect tried to increase the performance in a multi-core context\n    \n    \\begin{quote}\n    Is there a way to make use of all those spare CPUs in the multi-tenant server?\n\n    For other Node.js services running on multi-core hosts, we utilized a pre-forking cluster server that creates a process for each CPU.\n    \n        However, while EtherCalc does support multi-server scaling with Redis, the interplay of Socket.io clustering with RedisStore in a single server would have massively complicated the logic, making debugging much more difficult.\n    \\end{quote}    \n    \n    This possible solution has impact on the",
                "image": [],
                "options": [
                    "Overall costs, because of deployment",
                    "Availability, because of the interprocess communication",
                    "Testability, because of the logic complexity",
                    "Performance, because there is not a significative improvement by using more CPUs"
                ]
            },
            {
                "questionId": "EtherCalcViews",
                "content": "In the description of EtherCalc case study can be read how the architect increased the performance in a multi-core context\n    \n    \\begin{quote}\n    Instead of pre-forking a fixed number of processes, we sought a way to create one background thread for each server-side spreadsheet, thereby distributing the work of command execution among all CPU cores.\n    \\end{quote}    \n    \n    Which is represented by the diagram\n    \\newline\n    \n    \\begin{center}\n    \\includegraphics[width=120mm]{x-EtherCalc-multi-tenant}\n  \\end{center}\n    \n    \\begin{flushleft}\n        The above diagram, describing a server spreadsheet, can be represented using \n    \\end{flushleft}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2014/exam/exam20150127/x-EtherCalc-multi-tenant.png",
                        "width": 120
                    }
                ],
                "options": [
                    "A publish-subscribe style",
                    "A peer-to-peer style",
                    "A client-server style",
                    "A communication processes style"
                ]
            },
            {
                "questionId": "TransactionScript",
                "content": "Compared to the Transaction Script pattern, the Domain Logic pattern\n  has a higher initial cost of adoption.  That is, it is harder to\n  start with the Domain Logic pattern than with the Transaction Script\n  pattern.  The reason for this is that the Domain Logic pattern",
                "image": [],
                "options": [
                    "Requires a more skilled team, because the object-oriented\n  paradigm is more complex than the procedural paradigm",
                    "Is typically used with more complex data access code",
                    "Requires that we write more code when we have only a\n  couple of simple use cases",
                    "All of the above"
                ]
            },
            {
                "questionId": "ActiveRecordRuby",
                "content": "Ruby on Rails is a popular full-stack framework for building web\n  applications.  One of the elements of this framework is the\n  \\textbf{model}, which is described in the Rails documentation in the\n  following way:\n  \\begin{quote}\n    A model represents the information (data) of the application and\n    the rules to manipulate that data. In the case of Rails, models\n    are primarily used for managing the rules of interaction with a\n    corresponding database table. In most cases, one table in your\n    database will correspond to one model in your application. The\n    bulk of your application's business logic will be concentrated in\n    the models.\n  \\end{quote}\n  Given this description, the Rails' model is best described as an\n  instance of",
                "image": [],
                "options": [
                    "The Service Layer pattern",
                    "The Active Record pattern",
                    "The Transaction Script pattern",
                    "The Data Mapper pattern"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2014/exam/exam20150127/exame-20150127-companion-B.tex",
        "quizTitle": "..-data-2014-exam-exam20150127-exame-20150127-companion-B",
        "questions": [
            {
                "questionId": "OrderPadTactics",
                "content": "In the description of architecture of the OrderPad case study, it can be read that the updates the user does on the OrderPad when it is offline are not lost. This availability quality is achieved through a",
                "image": [],
                "options": [
                    "Ignore faulty behaviour tactic",
                    "Ping-and-echo tactic",
                    "Active redundancy tactic",
                    "Retry tactic"
                ]
            },
            {
                "questionId": "TransactionScript",
                "content": "Compared to the Transaction Script pattern, the Domain Logic pattern\n  has a higher initial cost of adoption.  That is, it is harder to\n  start with the Domain Logic pattern than with the Transaction Script\n  pattern.  The reason for this is that the Domain Logic pattern",
                "image": [],
                "options": [
                    "Requires a more skilled team, because the object-oriented\n  paradigm is more complex than the procedural paradigm",
                    "Is typically used with more complex data access code",
                    "Requires that we write more code when we have only a\n  couple of simple use cases",
                    "All of the above"
                ]
            },
            {
                "questionId": "ActiveRecordRuby",
                "content": "Ruby on Rails is a popular full-stack framework for building web\n  applications.  One of the elements of this framework is the\n  \\textbf{model}, which is described in the Rails documentation in the\n  following way:\n  \\begin{quote}\n    A model represents the information (data) of the application and\n    the rules to manipulate that data. In the case of Rails, models\n    are primarily used for managing the rules of interaction with a\n    corresponding database table. In most cases, one table in your\n    database will correspond to one model in your application. The\n    bulk of your application's business logic will be concentrated in\n    the models.\n  \\end{quote}\n  Given this description, the Rails' model is best described as an\n  instance of",
                "image": [],
                "options": [
                    "The Service Layer pattern",
                    "The Active Record pattern",
                    "The Transaction Script pattern",
                    "The Data Mapper pattern"
                ]
            },
            {
                "questionId": "ConcreteScenario",
                "content": "As part of the process of creating an architecture, we talked about\n  a framework for capturing some of the requirements for a system.  In\n  this context, \\textbf{concrete scenarios} are used for",
                "image": [],
                "options": [
                    "Describing what are the qualities that the system should possess",
                    "Describing a set of steps that a user of the system must\n  perform to accomplish some task",
                    "Describing a use case for the system that makes clear what\n  should be the system's responses to each of the user's inputs",
                    "Describing the system's features by way of different\n  usage scenarios for it, in which users play the role of actors"
                ]
            },
            {
                "questionId": "AvailabilityPingEchoHeartbeat",
                "content": "Ping-and-echo and Heartbeat are two availability tactics to detect faults.",
                "image": [],
                "options": [
                    "Ping-and-echo requires the availability monitor to know the addresses of the components it is monitoring",
                    "Heartbeat requires the availability monitor to confirm the reception of the signal",
                    "In Ping-and-echo the availability monitor should always send the same request",
                    "In Heartbeat, the monitored components can change the message rate"
                ]
            },
            {
                "questionId": "SecurityDatabase",
                "content": "Consider that when designing the architecture of a web application, the architect intends to guarantee of the confidentiality of persistent data in face of an attack from a system administrator.",
                "image": [],
                "options": [
                    "It is not possible to achieve this requirement. A non-architectural solution is to be careful when hiring system administrators",
                    "It is necessary to use the authenticate authors tactic to authenticate system administrators before they access to the database",
                    "It is necessary to use the encrypt data tactic to encrypt the information with a password that is in a configuration file",
                    "It is necessary to use the encrypt data tactic to encrypt the information on the client web browser, before it is send to the web server"
                ]
            },
            {
                "questionId": "SocialCalcTactic",
                "content": "In the description of the SocialCalc case study can be read:\n    \n    \\begin{quote}\n        A simple improvement is for each client to broadcast its cursor position to other users, so everyone can see which cells are being worked on.\n    \\end{quote}\n    \n    This sentence describes a tactic for usability which is",
                "image": [],
                "options": [
                    "Maintain task model",
                    "Maintain user model",
                    "Maintain system model",
                    "Aggregate"
                ]
            },
            {
                "questionId": "ThousandParsecScenario",
                "content": "In the description of the ThousandParsec case study can be read:\n    \n    \\begin{quote}\n        The Thousand Parsec Component Language (TPCL) exists to allow clients to create designs locally without server interaction - allowing for instant feedback about the properties, makeup, and validity of the designs. \n    \\end{quote}\n    \n    From this sentence can be written",
                "image": [],
                "options": [
                    "A scenario for performance associated with a multiple copies of computation tactic",
                    "A scenario for usability associated with a support system initiative tactic",
                    "A scenario for performance associated with a limit event response tactic",
                    "A scenario for usability associated with a support user initiative tactic"
                ]
            },
            {
                "questionId": "GitTactic",
                "content": "In the description of GitHub case study can be read\n    \n    \\begin{quote}\n        Once the Smoke proxy has determined the user's route, it establishes a transparent proxy to the proper file server. We have four pairs of fileservers. Their names are fs1a, fs1b, ..., fs4a, fs4b. These are 8 core, 16GB RAM bare metal servers, each with six 300GB 15K RPM SAS drives arranged in RAID 10. At any given time one server in each pair is active and the other is waiting to take over should there be a fatal failure in the master. All repository data is constantly replicated from the master to the slave via DRBD.\n    \\end{quote}\n    \n    In this description we can find the application of tactics like",
                "image": [],
                "options": [
                    "Multiple copies of computation",
                    "Active redundancy",
                    "Increase resource efficiency",
                    "All of the above"
                ]
            },
            {
                "questionId": "ModuleTraceability",
                "content": "Views of the module viewtype can be used to support requirements traceability analysis, determine how the functional requirements of a system are supported. This is represented by",
                "image": [],
                "options": [
                    "Decomposition view",
                    "Data model view",
                    "Generalization view",
                    "Layered view"
                ]
            },
            {
                "questionId": "ArchitectureKnowledge",
                "content": "Assuming that you were asked to document the software architecture\n  of an existing (and already developed) system, the best thing for\n  you to do would be",
                "image": [],
                "options": [
                    "To analyse the source code of the system to see how it is built",
                    "To analyse the system's functional requirements to see what\n  is the system supposed to do",
                    "To analyse the implemented set of features to see what is it\n  that the system actually does",
                    "To talk with the people that developed the system to know\n  what they did and why they did it"
                ]
            },
            {
                "questionId": "ArchitectureEvolution",
                "content": "Ralph Johnson says that\n  \n  \\begin{quote}\n      Architecture is the decisions that you wish you could get right early in a project.\n  \\end{quote}\n  \n  This sentence reflects the fact that",
                "image": [],
                "options": [
                    "The architecture of a system cannot change",
                    "The main goal of an architect is to identify the quality attributes of system",
                    "Architecture is the design that gets harder to change as development progresses",
                    "The main goal of an architect is to design a detailed structure of the system that supports most of the requirements"
                ]
            },
            {
                "questionId": "Performitis",
                "content": "Marquardt characterizes performitis as:\n    \n    \\begin{quote}\n        Each part of the system is directly influenced by local performance tuning measures. There is no global performance strategy, or it ignores other qualities of the system such as testability and maintainability.\n    \\end{quote}\n    \n    This means that",
                "image": [],
                "options": [
                    "It is not a good idea to consider performance when designing the architecture of the system",
                    "The performance of a system only depends on the global performance strategies",
                    "Testability and maintainability always conflict with performance",
                    "None of the above"
                ]
            },
            {
                "questionId": "ArchitecturalViews",
                "content": "The software architecture of a system is usually represented through several views because we need to",
                "image": [],
                "options": [
                    "Represent different architectural qualities and they may not be all represented in a single view",
                    "Have a view for each stakeholder",
                    "Have at least a view for each viewtype",
                    "Have a view for each group of interconnected components, and very often a system has several groups of interconnected components"
                ]
            },
            {
                "questionId": "ArchitecturallySignificantRequirements",
                "content": "According to the attribute-driven design process, we should design\n  the software architecture for a system based on a selected list of\n  requirements, which are called the \\textit{architecturally significant requirements}.\n  These architecturally significant requirements should be sorted according to their\n  importance for the system's stakeholders because",
                "image": [],
                "options": [
                    "We should always satisfy in the first place the requirements\n    of the more important stakeholders (such as the client)",
                    "If no order was established among them, we would not know\n    from where should we start the design process",
                    "If one of the stakeholders complains that her requirement\n    is not satisfied, we may explain to her that there were other more\n    important requirements first",
                    "When it is not possible to satisfy all of the requirements\n    optimally, we should be aware of their relative importance so that\n    we may find a solution that corresponds to a satisfactory trade-off"
                ]
            },
            {
                "questionId": "ModueComponent",
                "content": "On the web page of Memcached can be read:\n  \n  \\begin{quote}\n      ..., high-performance, distributed memory object caching system, generic in nature, but intended for use in speeding up dynamic web applications by alleviating database load.\n  \\end{quote}\n  \n  According to this information, Memcached is",
                "image": [],
                "options": [
                    "A module",
                    "A component",
                    "Both, a module and a component",
                    "An allocation element"
                ]
            },
            {
                "questionId": "GeneralizationInterfaces",
                "content": "You have to develop an application that collects news from different web sources and process that information to present a digest to the application users. The different sources provide similar information through different interfaces (APIs). Additionally, the new sources may change the interfaces, for instance to enhance their service. Which architectural style can be used to represent this requirements?",
                "image": [],
                "options": [
                    "Peer-to-Peer to represent the communication between the components",
                    "Client-Server to represent the request the application makes to the different new sources",
                    "Generalisation to represent an abstraction common to all interfaces and keep API-specific details in child modules",
                    "Layers to create a virtual machine that hides the internals of the application from its users interface code to allow the support of different user interfaces"
                ]
            },
            {
                "questionId": "UsesIncremental",
                "content": "When designing the architecture for a system the architect realises that most of the modules have bidirectional uses relationships. This has impact on",
                "image": [],
                "options": [
                    "Performance because there is an overhead of communication between the modules.",
                    "Install because most of the modules need to be assigned to the same executable file",
                    "Development because it is not possible to do incremental development",
                    "Availability because if a module fails the failure easily propagates to all the other modules"
                ]
            },
            {
                "questionId": "EtherCalcPerformance",
                "content": "In the description of EtherCalc case study can be read\n    \n    \\begin{quote}\n        Because all jsdom code runs in a single thread, subsequent REST API calls are blocked until the previous command's rendering completes. Under high concurrency, this queue eventually triggered a latent bug that ultimately resulted in server lock-up.\n    \\end{quote}    \n    \n    The above sentence is related to a quality for",
                "image": [],
                "options": [
                    "Performance, because it describes what is the response to REST API calls",
                    "Modifiability, because the jsdom code can not be reused by several threads",
                    "Security, because it describes a \"queue overflow\" attack",
                    "Interoperability, because the REST API allow the exchange of information with external applications"
                ]
            },
            {
                "questionId": "EtherCalcTactic",
                "content": "In the description of EtherCalc case study can be read\n    \n    \\begin{quote}\n        So, we removed jsdom from the RenderSheet function, re-implemented a minimal DOM in 20 lines of LiveScript for HTML export, then ran the profiler again. Much better! We have improved throughput by a factor of 4, HTML exporting is 20 times faster, and the lock-up problem is gone.\n    \\end{quote}    \n    \n    The above sentence describes a",
                "image": [],
                "options": [
                    "Reduce overhead tactic",
                    "Increase resource efficiency tactic",
                    "Increase resources tactic",
                    "Testability tactic"
                ]
            },
            {
                "questionId": "EtherCalcTestability",
                "content": "In the description of EtherCalc case study can be read how the architect tried to increase the performance in a multi-core context\n    \n    \\begin{quote}\n    Is there a way to make use of all those spare CPUs in the multi-tenant server?\n\n    For other Node.js services running on multi-core hosts, we utilized a pre-forking cluster server that creates a process for each CPU.\n    \n        However, while EtherCalc does support multi-server scaling with Redis, the interplay of Socket.io clustering with RedisStore in a single server would have massively complicated the logic, making debugging much more difficult.\n    \\end{quote}    \n    \n    This possible solution has impact on the",
                "image": [],
                "options": [
                    "Overall costs, because of deployment",
                    "Availability, because of the interprocess communication",
                    "Testability, because of the logic complexity",
                    "Performance, because there is not a significative improvement by using more CPUs"
                ]
            },
            {
                "questionId": "ComponentAndConnnector",
                "content": "The Java web servers, like Tomcat, use threads to process requests. For each request they create (or reuse) a thread to process it.\n    To draw a architectural view that describes this behaviour we should use",
                "image": [],
                "options": [
                    "A Module viewtype view",
                    "A Allocation viewtype view",
                    "A Communicating processes view",
                    "A Install view"
                ]
            },
            {
                "questionId": "EtherCalcViews",
                "content": "In the description of EtherCalc case study can be read how the architect increased the performance in a multi-core context\n    \n    \\begin{quote}\n    Instead of pre-forking a fixed number of processes, we sought a way to create one background thread for each server-side spreadsheet, thereby distributing the work of command execution among all CPU cores.\n    \\end{quote}    \n    \n    Which is represented by the diagram\n    \\newline\n    \n    \\begin{center}\n    \\includegraphics[width=120mm]{x-EtherCalc-multi-tenant}\n  \\end{center}\n    \n    \\begin{flushleft}\n        The above diagram, describing a server spreadsheet, can be represented using \n    \\end{flushleft}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2014/exam/exam20150127/x-EtherCalc-multi-tenant.png",
                        "width": 120
                    }
                ],
                "options": [
                    "A publish-subscribe style",
                    "A peer-to-peer style",
                    "A client-server style",
                    "A communication processes style"
                ]
            },
            {
                "questionId": "LoadBalancer",
                "content": "To increase the availability of a web application it is possible to use a load-balancer between the clients and the servers that detects server failures and transparently redirects the requests to the servers that are functioning properly. To represent this architecture",
                "image": [],
                "options": [
                    "It is enough to show the load-balancer between the web clients machines and the servers machines using a deployment view",
                    "It is necessary to change the connector between the web clients and the web servers, in the component-and-connector view, to show the semantics that is provided by the load-balancer",
                    "It is necessary to create a uses view to show how clients require the correct functioning of servers",
                    "It is necessary to change the component-and-connector view to show the communicating processes"
                ]
            },
            {
                "questionId": "ThreeTiers",
                "content": "One way to increase the performance of a 3-tier enterprise\n  application (with the standard separation in the web client, web\n  server, and database tiers) is to replicate the web server tier and\n  to add a load-balancer between the web clients and the web servers.\n  Unfortunately, for some enterprise applications that option is not\n  enough (or does not work at all), because",
                "image": [],
                "options": [
                    "They have many different use cases, corresponding to many\n    distinct user interfaces",
                    "They have to process very large amounts of data in each request",
                    "They need to be able to process concurrent requests from\n    the users",
                    "They have a very complex domain logic that requires much\n    processing power for answering each request"
                ]
            },
            {
                "questionId": "PublishSubscribe",
                "content": "Typically, Instant Messaging clients have a window to list the contacts of the user, and\n  show in that window the status of each contact (whether it is available, unavailable, busy,\n  etc). Given that the status of a contact may be changed at any time, and that the contact's\n  status is given by the Instant Messaging application of that contact, which architectural\n  style represents best the interaction pattern between these components?",
                "image": [],
                "options": [
                    "The Shared Data style",
                    "The Pipes-and-filters style",
                    "The Publish-subscribe style",
                    "The Client-Server style"
                ]
            },
            {
                "questionId": "DeploymentPerformance",
                "content": "In the software architecture of a system, the Deployment view is\n  best suited for",
                "image": [],
                "options": [
                    "Analysing the performance of the system",
                    "Planning incremental releases of the system",
                    "Estimating the effort needed to implement the system",
                    "Analysing the system's portability and reusability"
                ]
            },
            {
                "questionId": "ThousandParsecPersistence",
                "content": "In the description of ThousandParsec case study can be read\n  \n  \\begin{quote}\n      The flagship server, \\textsc{tpserver-cpp}, provides an abstract persistence interface and a modular plugin system to allow for various database back ends. \n  \\end{quote}\n  \n    This above sentence can be diagrammatically represented using",
                "image": [],
                "options": [
                    "A generalisation architectural style",
                    "An aspects architectural style",
                    "A data model architectural style",
                    "A shared-data architectural style"
                ]
            },
            {
                "questionId": "SocialCalcBroadcastEvents",
                "content": "Consider the (partial) component-and-connector view for the \\textsc{:SpreasdSheet} component of the SocialCalc system\n  \n    \\begin{center}\n    \\includegraphics[width=70mm]{x-SocialCalc-spreadsheet-component}\n  \\end{center}\n    \n    \\begin{flushleft}\n        The \\textsc{sub1} port\n    \\end{flushleft}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2014/exam/exam20150127/x-SocialCalc-spreadsheet-component.png",
                        "width": 70
                    }
                ],
                "options": [
                    "Subscribes to the same kind of events that the \\textsc{sub2} port",
                    "Subscribes to the same kind of events that the \\textsc{inputSub} port",
                    "Subscribes to cursor position events",
                    "It is unnecessary in the diagram because the \\textsc{:TableEditor} can use port \\textsc{sub2} through the \\textsc{:Sheet} component"
                ]
            },
            {
                "questionId": "GitHubViews",
                "content": "In the description of GitHub case study can be read\n    \n    \\begin{quote}\n        For requests to the main website, the load balancer ships your request off to one of the four frontend machines. Each of these is an 8 core, 16GB RAM bare metal server. Their names are fe1, ..., fe4. Nginx accepts the connection and sends it to a Unix domain socket upon which sixteen Unicorn worker processes are selecting. One of these workers grabs the request and runs the Rails code necessary to fulfill it.\n    \\end{quote}\n    \n    To represent the above description it is necessary to use",
                "image": [],
                "options": [
                    "The communicating processes architectural style",
                    "The client-server architectural style",
                    "The deployment architectural style",
                    "All of the above"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2014/test-1/test-11A-17co\u2560\u0411pias.tex",
        "quizTitle": "..-data-2014-test-1-test-11A-17co\u2560\u0411pias",
        "questions": [
            {
                "questionId": "Featuritis",
                "content": "Frank Buschmann states that:\n        \n    \\begin{quote}\n        Featuritis is the tendency to trade functional coverage for quality - the more functions the earlier they're delivered, the better.\n    \\end{quote}",
                "image": [],
                "options": [
                    "Featuritis may result from a requirement of the technical context.",
                    "Featuritis requires the performance quality because the end user needs to execute the features.",
                    "Featuritis may be a result of a requirement of the business context.",
                    "Featuritis requires the modifiability quality to allow a the system to be easily modified to support new features."
                ]
            },
            {
                "questionId": "Performitis",
                "content": "Frank Buschmann cites the characterization Marquardt does of Performitis:\n        \n    \\begin{quote}\n        Each part of the system is directly influenced by local performance tuning measures. There is no global performance strategy, or it ignores other qualities of the system as testability and maintainability.\n    \\end{quote}\n    \n    From this problem you can conclude that:",
                "image": [],
                "options": [
                    "Performance is a quality that you have to address at the end of the development process.",
                    "There is no system which can have good performance and be easily maintainable.",
                    "We have to distinguish architectural performance from opportunistic performance.",
                    "The system performance quality has impact on the performance of the execution of tests."
                ]
            },
            {
                "questionId": "ArchitectureDefinition",
                "content": "On the course slides you can find the following definition of architecture:\n    \n    \\begin{quote}\n        The software architecture of a program or computing system is the structure or structures of the system, which comprise software elements, the externally visible properties of those elements, and the relationships among them.\n    \\end{quote}\n    \n    However, in the book you can find another definition:\n    \n    \\begin{quote}\n        The software architecture of a system is the set of structures needed to reason about the system, which comprise the software elements, relations among them, and the properties of both.\n    \\end{quote}",
                "image": [],
                "options": [
                    "The book definition does not consider relevant the externally visible properties.",
                    "The book definition also considers that the properties are externally visible because they are used for reasoning by the stakeholders.",
                    "The book definition also considers that the properties are externally visible because by definition an architectural property is externally visible.",
                    "The book definition is not correct, as pointed out in the errata."
                ]
            },
            {
                "questionId": "SharedUnderstanding",
                "content": "Martin Fowler, \\emph{Who Needs and Architect?}, cites Ralph Johnson sentence:\n    \n    \\begin{quote}\n        In most successful software projects, the expert developers working on that project have a shared understanding of the system design. This shared understanding is called architecture.\n    \\end{quote}",
                "image": [],
                "options": [
                    "This shared understanding is what distinguishes architecture from design.",
                    "This shared understanding is necessary to define precise requirements.",
                    "This shared understanding does not allow to define the architecture trade-offs because some of the stakeholders have their own goals.",
                    "This shared understanding does not allow to have a global perspective of the system, because stakeholders have different interests."
                ]
            },
            {
                "questionId": "CreateArchitectureOne",
                "content": "During the different steps on how to create an architecture, the precise specification of architecture quality attributes is initially relevant to",
                "image": [],
                "options": [
                    "Make a business case for the system.",
                    "Understand the architecturally significant requirements.",
                    "The system design.",
                    "Documenting and communicating the architecture."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2014/test-1/test-12A-24co\u2560\u0411pias.tex",
        "quizTitle": "..-data-2014-test-1-test-12A-24co\u2560\u0411pias",
        "questions": [
            {
                "questionId": "Flexibilitis",
                "content": "Frank Buschmann states that:\n    \n    \\begin{quote}\n        Overly flexible systems are hard to configure, and when they're finally configured, they lack qualities like performance or security.\n    \\end{quote}",
                "image": [],
                "options": [
                    "Frank Buschmann is referring to some possible consequences of the modifiability quality.",
                    "Frank Buschmann are considering performance and security as the most important qualities.",
                    "Frank Buschmann is referring that the consequences of a flexible system is poor performance and bad security.",
                    "Frank Buschmann is not considering modifiability as an important quality"
                ]
            },
            {
                "questionId": "FeaturitisPerformitisFlexibilities",
                "content": "In his article, \\emph{Featuritis, Performitis, and Other Deseases}, Frank Buschmann claims that:",
                "image": [],
                "options": [
                    "Performance should be the last quality to be addressed because it is a local property of an architecture.",
                    "Modifiability, flexibility, should be the first quality to be addressed because it allows the delay of architectural decisions.",
                    "The lack of functionality results in a system without business value, therefore a rich set of features should be implemented first.",
                    "A solution for any quality in isolation may lead to a biased architecture."
                ]
            },
            {
                "questionId": "ComponentvsModule",
                "content": "In wikipedia you can find the following fragment of a definition:\n    \n    \\begin{quote}\n        An individual software component is a software package, or a module that encapsulates a set of related functions.\n    \\end{quote}\n    \n    According to the definitions taught in the course the above \\emph{individual software component} corresponds to:",
                "image": [],
                "options": [
                    "A component.",
                    "A module.",
                    "Both, a component and a module, depending on the perspective.",
                    "An external element."
                ]
            },
            {
                "questionId": "EarlyDecisions",
                "content": "In his article, \\emph{Who Needs and Architect?}, Martin Fowler cites Ralph Johnson definition:\n    \n    \\begin{quote}\n        Architecture is the set of decisions that must be made early in a project.\n    \\end{quote}\n    \n    In his opinion:",
                "image": [],
                "options": [
                    "This is right because if you don't the project fails.",
                    "This is wrong because you can easily change these decisions during the project lifetime.",
                    "This is right but you cannot be completely sure whether the decisions are the right ones.",
                    "This is wrong because it is against agile way of thinking the software development process."
                ]
            },
            {
                "questionId": "ArchitectAstronauts",
                "content": "Frank Buschmann, \\emph{Introducing the Pragmatic Architect}, defines the \\emph{architecture astronauts}. This kind of architect",
                "image": [],
                "options": [
                    "Is unable to define a domain model of the system.",
                    "Is focused on the technology context of the architecture.",
                    "Is focused on creating common generalizations of several systems.",
                    "Is focused on the details of the architecture."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2014/test-1/test-13A-17co\u2560\u0411pias.tex",
        "quizTitle": "..-data-2014-test-1-test-13A-17co\u2560\u0411pias",
        "questions": [
            {
                "questionId": "Explicit",
                "content": "Frank Buschmann states that:\n    \n    \\begin{quote}\n        There's only one escape from such situations: architects must actively break the cycle of mutual misunderstanding and mistrust!\n    \\end{quote}",
                "image": [],
                "options": [
                    "Such misunderstanding and mistrust occurs because the stakeholders have their own agendas",
                    "The cycle Frank Buschmann refers to is the Architectural Influence Cycle.",
                    "The cycle Frank Buschmann refers to allows the clarification of requirements.",
                    "To break such misunderstanding and mistrust the architecture has to make explicit the stakeholders needs."
                ]
            },
            {
                "questionId": "WalkingSkeleton",
                "content": "The \\emph{Walking Skeleton} referred in Frank Buschmann's article, \\emph{Featuritis, Performitis, and Other Deseases}:",
                "image": [],
                "options": [
                    "Is a functional prototype, which tests the functionalities required by the business stakeholders.",
                    "Is an architecture that demonstrates that the system will support the qualities raised by the stakeholders.",
                    "Is a baseline architecture that allows to experiment with the most significant architectural requirements.",
                    "Is an object-oriented framework, which integrates functional and non-functional requirements of the system."
                ]
            },
            {
                "questionId": "ComponentvsModuleTwo",
                "content": "In the Java documentation you can find:\n    \n\\begin{quote}\n\\texttt{public abstract class Component} \\\\*\n\\texttt{extends Object} \\\\*\n\\texttt{implements ImageObserver, MenuContainer, Serializable}\n\\end{quote}\n\n    Class \\texttt{Component} is:",
                "image": [],
                "options": [
                    "A component.",
                    "A module.",
                    "Both, a component and a module, depending on the perspective.",
                    "An external element."
                ]
            },
            {
                "questionId": "ModuleViewType",
                "content": "The quality that is more relevant to views of the module viewtype is:",
                "image": [],
                "options": [
                    "Modifiability.",
                    "Usability.",
                    "Security.",
                    "Availability."
                ]
            },
            {
                "questionId": "ArchitectDwarves",
                "content": "Frank Buschmann, \\emph{Introducing the Pragmatic Architect}, defines the \\emph{architecture dwarves}. These kind of architects",
                "image": [],
                "options": [
                    "Are unable to understand the technology capabilities.",
                    "Are focused on the project context of the architecture.",
                    "Are unable to distinguish architecture from design.",
                    "Are focused on the business context of the architecture."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2014/test-1/test-14A-24co\u2560\u0411pias.tex",
        "quizTitle": "..-data-2014-test-1-test-14A-24co\u2560\u0411pias",
        "questions": [
            {
                "questionId": "Prioritize",
                "content": "Frank Buschmann states that:\n    \n    \\begin{quote}\n        Architects use flexibility as a cover for uncertainty.\n    \\end{quote}",
                "image": [],
                "options": [
                    "A flexible architecture occurs when it is not possible to identify all the requirements.",
                    "A solution to this problem is to prioritize the system qualities.",
                    "Performance uncertainty about the system should be dealt with more flexibility.",
                    "A solution to this problem is to reduce the level of flexibility of a system."
                ]
            },
            {
                "questionId": "HammersNails",
                "content": "In his article \\emph{On Hammers and Nails, and Falling in Love with Technology and Design} what is the main type of influence on the architecture?",
                "image": [],
                "options": [
                    "Project and Technical Contexts.",
                    "Project and Professional Contexts.",
                    "Business and Project Contexts.",
                    "Professional and Technical Contexts."
                ]
            },
            {
                "questionId": "FunctionalModule",
                "content": "When designing an architecture requirements can be split into functional, quality attributes, and constraints. Functional requirements have impact on:",
                "image": [],
                "options": [
                    "A module view.",
                    "A component-and-connector view.",
                    "An allocation view.",
                    "They are not represented by a view."
                ]
            },
            {
                "questionId": "ComponentViewType",
                "content": "The quality(ies) that is(are) more relevant to views of the component-and-connector viewtype is(are):",
                "image": [],
                "options": [
                    "Modifiability.",
                    "Availability and Performance.",
                    "Testability.",
                    "Availability."
                ]
            },
            {
                "questionId": "CreateArchitectureTwo",
                "content": "The \\emph{Ensuring that the implementation conforms to the architecture} step of how to create an architecture",
                "image": [],
                "options": [
                    "Tries to guarantee that the final system will have the qualities required by stakeholders.",
                    "Tries to guarantee that the final system will have the qualities aimed by the architecture.",
                    "Does not allow developers to define some of the design of the system",
                    "It requires automatic generation of code from the architecture."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2014/test-2/test-21A-18co\u2560\u0411pias.tex",
        "quizTitle": "..-data-2014-test-2-test-21A-18co\u2560\u0411pias",
        "questions": [
            {
                "questionId": "AvailabilityScenario",
                "content": "Consider the following scenario\n    \n    \\begin{quote}\n        When writing to the database the system receives an exception about a write failure. The system should stop interacting with data base and write a log message. \n    \\end{quote}\n    \n    The quality addressed by this scenario is",
                "image": [],
                "options": [
                    "Performance.",
                    "Availability.",
                    "Reliability.",
                    "Fault-tolerance"
                ]
            },
            {
                "questionId": "PingEcho",
                "content": "A heartbeat monitor",
                "image": [],
                "options": [
                    "Implements a tactic to recover from faults.",
                    "Implements a tactic to prevent faults.",
                    "Can be used as the source of a stimulus in a scenario.",
                    "Can be used in a non-concurrent system."
                ]
            },
            {
                "questionId": "GraphiteTechnicaAndNonTechnicalUsers",
                "content": "Human-editable URL API for creating graphs is a usability design tactic used in the Graphite system. This tactic",
                "image": [],
                "options": [
                    "Is an aggregate design tactic.",
                    "Is a maintain user model design tactic.",
                    "Is a design tactic for a scenario where the source of stimulus are technical users.",
                    "Is a design tactic for a scenario where the source of stimulus is the graph owner user."
                ]
            },
            {
                "questionId": "Firewall",
                "content": "Having a single point of access to an intranet is a security tactic of",
                "image": [],
                "options": [
                    "Detect intrusion.",
                    "Limit access.",
                    "Limit exposure.",
                    "Separate entities."
                ]
            },
            {
                "questionId": "ChromeTabSecurity",
                "content": "In the Chrome system the use of a process per tab results form the application of a tactic of",
                "image": [],
                "options": [
                    "Limit access.",
                    "Increase resources.",
                    "Increase resource efficiency.",
                    "Maintain multiple copies of data."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2014/test-2/test-22A-18co\u2560\u0411pias.tex",
        "quizTitle": "..-data-2014-test-2-test-22A-18co\u2560\u0411pias",
        "questions": [
            {
                "questionId": "Scenario",
                "content": "In a quality scenario",
                "image": [],
                "options": [
                    "The stimulus is a system input.",
                    "The response can be omitted.",
                    "The artefact can be outside the system.",
                    "The stimulus and the response should be always present."
                ]
            },
            {
                "questionId": "Voting",
                "content": "A voting tactic can be used to",
                "image": [],
                "options": [
                    "Prevent a fault in hardware.",
                    "Prevent a fault in software.",
                    "Prevent a fault in a process.",
                    "Detect a fault."
                ]
            },
            {
                "questionId": "GraphiteReliability",
                "content": "In the Graphite system description can be read:\n    \n    \\begin{quote}\n        We've got 600,000 metrics that update every minute and we're assuming our storage can only keep up with 60,000 write operations per minute. This means we will have approximately 10 minutes worth of data sitting in carbon's queues at any given time. To a user this means that the graphs they request from the Graphite webapp will be missing the most recent 10 minutes of data.\n    \\end{quote}",
                "image": [],
                "options": [
                    "The quality addressed is availability.",
                    "The quality addressed is performance.",
                    "The quality addressed is availability and a voting design tactic is required to solve the problem.",
                    "The quality addressed is performance and a maintain multiple copies of data design tactic is required to solve the problem."
                ]
            },
            {
                "questionId": "VerifyMessageIntegrity",
                "content": "In the Fenix system a checksum is associated to a set of grades. This is an application of the tactic",
                "image": [],
                "options": [
                    "Detect intrusion.",
                    "Detect service denial.",
                    "Verify message integrity.",
                    "Detect message delay."
                ]
            },
            {
                "questionId": "ChromePerformance",
                "content": "In the Chrome system the following tactic is used to improve performance",
                "image": [],
                "options": [
                    "Increase resources.",
                    "Introduce concurrency.",
                    "Reduce overhead.",
                    "Manage sample rate."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2014/test-2/test-23A-18co\u2560\u0411pias.tex",
        "quizTitle": "..-data-2014-test-2-test-23A-18co\u2560\u0411pias",
        "questions": [
            {
                "questionId": "InteroperabilityScenario",
                "content": "Consider the following scenario\n    \n    \\begin{quote}\n        Our vehicle information system send our current location to the traffic monitoring system. The traffic monitoring system combines our location with other information, overlays this information on a Google Map, and broadcasts it. Our location information is correctly included with a probability of 99.99\\%.\n    \\end{quote}\n    \n    The quality addressed by this scenario is",
                "image": [],
                "options": [
                    "Performance.",
                    "Availability.",
                    "Interoperability.",
                    "Testability."
                ]
            },
            {
                "questionId": "GarbageCollector",
                "content": "In wikipedia you can find the following definition:\n    \n    \\begin{quote}\n        The garbage collector, or just collector, attempts to reclaim garbage, or memory occupied by objects that are no longer in use by the program.\n    \\end{quote}\n    \n    The garbage collector is a component that implements an availability tactic of",
                "image": [],
                "options": [
                    "Ignore faulty behavior.",
                    "Transactions.",
                    "Rollback.",
                    "Exception prevention."
                ]
            },
            {
                "questionId": "GraphiteBackend",
                "content": "To reduce the backend load (writes) the Graphite system uses",
                "image": [],
                "options": [
                    "A Maintain Multiple Copies of Computation design tactic in Carbon.",
                    "A Maintain Multiple Copies of Computation design tactic in the WebApp such that reads do not compete with writes.",
                    "A Maintain Multiple Copies of Data design tactic in Carbon.",
                    "A Maintain Multiple Copies of Data design tactic in the WebApp such that reads do not compete with writes."
                ]
            },
            {
                "questionId": "SeparateEntities",
                "content": "In a system where there are sensitive data an appropriate tactic to be used is",
                "image": [],
                "options": [
                    "Limit access, to restrict the access to the database system.",
                    "Limit exposure, locate the database system in the intranet.",
                    "Separate entities, to allow the use of more strict tactics on the sensitive data.",
                    "Change default settings, because default passwords are sensitive."
                ]
            },
            {
                "questionId": "ChromeUsability",
                "content": "In the description of the Chrome system can be read\n    \n    \\begin{quote}\n        As the user types, the Omnibox automatically proposes an action, which is either a URL based on your navigation history, or a search query.\n    \\end{quote}\n    \n    The above sentence refers to",
                "image": [],
                "options": [
                    "Maintain user model tactic.",
                    "Introduce concurrence tactic.",
                    "Increase resource efficiency tactic.",
                    "Maintain task model tactic."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2014/test-2/test-24A-18co\u2560\u0411pias.tex",
        "quizTitle": "..-data-2014-test-2-test-24A-18co\u2560\u0411pias",
        "questions": [
            {
                "questionId": "Tactics",
                "content": "An architectural tactic",
                "image": [],
                "options": [
                    "Is a mediator, an application of the mediator pattern, between the input stimulus and the output response.",
                    "May be associated to other tactics to deal with a single stimulus.",
                    "Is an architectural pattern.",
                    "Is a system decomposition."
                ]
            },
            {
                "questionId": "Degradation",
                "content": "Consider a enterprise web system, which provides services both on the company's intranet and to the company's clients on the internet, that when under a denial of service attack decides to stop providing internet services.",
                "image": [],
                "options": [
                    "This situation corresponds to the use of the degradation availability tactic.",
                    "This situation corresponds to the use of the removal from service availability tactic.",
                    "This situation corresponds to the use of the limit access security tactic.",
                    "This situation corresponds to the use of the limit exposure security tactic."
                ]
            },
            {
                "questionId": "GraphiteModifiability",
                "content": "In the Graphite system description can be read:\n    \n    \\begin{quote}\n        Making multiple Graphite servers appear to be a single system from a user perspective isn't terribly difficult, at least for a naive implementation.\n    \\end{quote}",
                "image": [],
                "options": [
                    "The quality addressed is availability.",
                    "The quality addressed is modifiability.",
                    "The quality addressed is availability and an active redundancy design tactic is required to solve the problem.",
                    "The quality addressed is modifiability and an increase cohesion design tactic is required to solve the problem."
                ]
            },
            {
                "questionId": "InternalAttack",
                "content": "In a system where the source of attacks can be internal, from authorized users, the appropriate tactics to be used are",
                "image": [],
                "options": [
                    "Detect and Resist.",
                    "Detect and React.",
                    "Detect and Recover.",
                    "Resist and React."
                ]
            },
            {
                "questionId": "ChromePredictor",
                "content": "In the description of the Chrome system can be read\n    \n    \\begin{quote}\n        The goal of the predictor is to evaluate the likelihood of its success, and then to trigger the activity if resources are available. \n    \\end{quote}\n    \n    The above sentence refer to",
                "image": [],
                "options": [
                    "Maintain multiple copies of data tactic.",
                    "Introduce concurrence tactic.",
                    "Increase resource efficiency tactic.",
                    "Schedule resources tactic."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2014/test-3/test-31A-18copias.tex",
        "quizTitle": "..-data-2014-test-3-test-31A-18copias",
        "questions": [
            {
                "questionId": "FenixBusinessCase",
                "content": "In the context of the FenixEdu case study, the business case was to",
                "image": [],
                "options": [
                    "Incorporate in the organization's core business the goals of a software house.",
                    "Do in-house development.",
                    "Integrate the development of the software system with the organization's business goals.",
                    "Reimplement all the information systems of the organization"
                ]
            },
            {
                "questionId": "IterativeDesign",
                "content": "Designing an architecture",
                "image": [],
                "options": [
                    "Is driven by functional requirements.",
                    "Is done in a single step, after all the tactics were identified.",
                    "Is a top-down process where a initial decomposition is chosen and it is successively decomposed without changing the initial decisions.",
                    "Is an iterative process where architectural designs are proposed as hypothesis and tested."
                ]
            },
            {
                "questionId": "SocialCalcUsability",
                "content": "In the description of the SocialCalc case study can be read:\n    \n    \\begin{quote}\n        Even with race conditions resolved, it is still suboptimal to accidentally overwrite the cell another user is currently editing. A simple improvement is for each client to broadcast its cursor position to other users, so everyone can see which cells are being worked on.\n    \\end{quote} \n    \n    From this fragment can be identified a scenario for",
                "image": [],
                "options": [
                    "Testability.",
                    "Reliability.",
                    "Availability.",
                    "Usability."
                ]
            },
            {
                "questionId": "ThounsandParsecInteroperability",
                "content": "In the description of the Thousand Parsec case study can be read:\n    \n    \\begin{quote}\n        Finding a public Thousand Parsec server to play on is much like locating a lone stealth scout in deep space - a daunting prospect if one doesn't know where to look. Fortunately, public servers can announce themselves to a metaserver, whose location, as a central hub, should ideally be well-known to players.\n    \\end{quote} \n    \n    From this fragment can be identified a scenario for",
                "image": [],
                "options": [
                    "Interoperability.",
                    "Performance.",
                    "Availability.",
                    "Usability."
                ]
            },
            {
                "questionId": "DecompositionBuilvsBuy",
                "content": "A criteria for the the application of the Decomposition architectural style of the Module viewtype is Build-vs-Buy decisions. The application of the criteria",
                "image": [],
                "options": [
                    "Results in a similar decomposition as if the criteria was not applied but some modules are identified to be outsourced.",
                    "Results in a decomposition where each module may be implemented by a single developer.",
                    "Allows to increase the overall calendar development time of the project because there is a communication overhead with external teams.",
                    "Allows to identify modules for which the development team does not have the required implementation competences."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2014/test-3/test-32A-18copias.tex",
        "quizTitle": "..-data-2014-test-3-test-32A-18copias",
        "questions": [
            {
                "questionId": "BusinessScenarioOne",
                "content": "In the context of the FenixEdu case study the following scenario was identified.\n    \n    \\begin{quote}\n        The school management pretends that all the members of the school, students, administrative staff, faculty and management should be able to use the system to perform their activities efficiently without requiring the installation of any client software or a long learning process.\n    \\end{quote}\n    \n    This is a",
                "image": [],
                "options": [
                    "Business scenario.",
                    "Availability scenario.",
                    "Modifiability scenario.",
                    "Usability scenario."
                ]
            },
            {
                "questionId": "LowArchitecturalImpact",
                "content": "Consider an architecturally significant requirement (ASR) that has a low impact on the architecture but a high business value",
                "image": [],
                "options": [
                    "This ASR can easily be supported by the architecture because it has little effect in the architecture.",
                    "This ASR requires a specific architectural design because it profoundly affects the architecture.",
                    "The cost of meeting the ASR after development starts is too high.",
                    "Any ASR that has a high business value cannot have a low architecture impact because it needs to be supported by the architecture."
                ]
            },
            {
                "questionId": "SocialCalcModifiability",
                "content": "In the description of the SocialCalc case study can be read:\n    \n    \\begin{quote}\n        To make this work across browsers and operating systems, we use the Web::Hippie4 framework, a high-level abstraction of JSON-over-WebSocket with convenient jQuery bindings.\n    \\end{quote} \n    \n    From this fragment can be identified a scenario for",
                "image": [],
                "options": [
                    "Performance.",
                    "Modifiability.",
                    "Availability.",
                    "Usability."
                ]
            },
            {
                "questionId": "ThounsandParsecSystemInitiative",
                "content": "In the description of the Thousand Parsec case study can be read:\n    \n    \\begin{quote}\n        Next, the player is prompted to configure options for the ruleset and server, with sane defaults pulled from the metadata. Finally, if any compatible AI clients are installed, the player is prompted to configure one or more of them to play against.\n    \\end{quote} \n    \n    The tactic referred in the fragments is",
                "image": [],
                "options": [
                    "Change default settings.",
                    "Limit access.",
                    "Support user initiative.",
                    "Support system initiative."
                ]
            },
            {
                "questionId": "DecompositionBuilvsBuy",
                "content": "A criteria for the the application of the Decomposition architectural style of the Module viewtype is Build-vs-Buy decisions. The application of the criteria",
                "image": [],
                "options": [
                    "Results in a similar decomposition as if the criteria was not applied but some modules are identified to be outsourced.",
                    "Results in a decomposition where each module may be implemented by a single developer.",
                    "Allows to increase the overall calendar development time of the project because there is a communication overhead with external teams.",
                    "Allows to identify modules for which the development team does not have the required implementation competences."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2014/test-3/test-33A-18copias.tex",
        "quizTitle": "..-data-2014-test-3-test-33A-18copias",
        "questions": [
            {
                "questionId": "UtilityTree",
                "content": "A utility tree",
                "image": [],
                "options": [
                    "Only contains business qualities.",
                    "Cannot be defined for the security quality.",
                    "Contains the architectural tactics associated with architecturally significant requirements.",
                    "Contains the business value and the architectural impact of architecturally significant requirements."
                ]
            },
            {
                "questionId": "HighBusinessValue",
                "content": "Consider an architecturally significant requirement (ASR) that has a high impact on the architecture but a low business value",
                "image": [],
                "options": [
                    "This ASR can easily be supported by the architecture.",
                    "This ASR should be supported by the architecture because of its high impact.",
                    "The architect have to decide on the cost/benefit of designing an architecture that supports this ASR.",
                    "The architect should support this ASR after designing an architecture that supports all the ASRs with high business value."
                ]
            },
            {
                "questionId": "SocialCalcAvailability",
                "content": "In the description of the SocialCalc case study can be read:\n    \n    \\begin{quote}\n        If users A and B simultaneously perform an operation affecting the same cells, then receive and execute commands broadcast from the other user, they will end up in different states.\n    \\end{quote} \n    \n    From this fragment can be identified a scenario for",
                "image": [],
                "options": [
                    "Performance.",
                    "Reliability.",
                    "Availability.",
                    "Usability."
                ]
            },
            {
                "questionId": "ThounsandParsecAvailability",
                "content": "In the description of the Thousand Parsec case study can be read:\n    \n    \\begin{quote}\n        Turns also have a time limit imposed by the server, so that slow or unresponsive players cannot hold up a game.\n    \\end{quote} \n    \n    From this fragment can be identified a scenario for",
                "image": [],
                "options": [
                    "Performance.",
                    "Interoperability.",
                    "Availability.",
                    "Usability."
                ]
            },
            {
                "questionId": "Decomposition",
                "content": "The Decomposition architectural style of the Module viewtype",
                "image": [],
                "options": [
                    "Is applied only once at the beginning of the architectural design process.",
                    "Is applied at the begin of the architectural design process but may be necessary to redo it later.",
                    "Is mostly driven by the security attribute quality.",
                    "Follows a bottom-up decomposition process of the system."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2014/test-3/test-34A-18copias.tex",
        "quizTitle": "..-data-2014-test-3-test-34A-18copias",
        "questions": [
            {
                "questionId": "BusinessScenarioTwo",
                "content": "In the context of the FenixEdu case study the following scenario was identified.\n    \n    \\begin{quote}\n        The management intends that the system should be available to all users, even after offices close and classes finish because students may need courses material to study 24X7 and faculty and administrative staff may want to work from home.\n    \\end{quote}\n    \n    This is a",
                "image": [],
                "options": [
                    "Business scenario.",
                    "Availability scenario.",
                    "Modifiability scenario.",
                    "Usability scenario."
                ]
            },
            {
                "questionId": "FenixADD",
                "content": "When applying Attribute-Driven Design (ADD) to the FenixEdu system the creation of a view where there are redundant web servers, load balancers and database servers",
                "image": [],
                "options": [
                    "Results from a utility tree for performance.",
                    "Results from a single availability scenario.",
                    "Results from the application of a single ADD iteration.",
                    "Results from the application of several ADD iterations."
                ]
            },
            {
                "questionId": "SocialCalcMaintainTaskModel",
                "content": "In the description of the SocialCalc case study can be read:\n    \n    \\begin{quote}\n        Therefore, on browsers with support for CSS3, we use the box-shadow property to represent multiple peer cursors in the same cell.\n    \\end{quote} \n    \n    This corresponds to the application of",
                "image": [],
                "options": [
                    "Maintain system model tactic.",
                    "Support user initiative tactic.",
                    "Maintain multiple copies of data tactic.",
                    "Conflict detection tactic."
                ]
            },
            {
                "questionId": "ThounsandParsecRollback",
                "content": "In the description of the Thousand Parsec case study can be read:\n    \n    \\begin{quote}\n        Besides often running far longer than the circadian rhythms of the players' species, during this extended period the server process might be prematurely terminated for any number of reasons. To allow players to pick up a game where they left off, Thousand Parsec servers provide persistence by storing the entire state of the universe (or even multiple universes) in a database.\n    \\end{quote} \n    \n    The tactic referred in the fragments is",
                "image": [],
                "options": [
                    "Rollback.",
                    "Persistence.",
                    "Retry.",
                    "Passive redundancy."
                ]
            },
            {
                "questionId": "Decomposition",
                "content": "The Decomposition architectural style of the Module viewtype",
                "image": [],
                "options": [
                    "Is applied only once at the beginning of the architectural design process.",
                    "Is applied at the begin of the architectural design process but may be necessary to redo it later.",
                    "Is mostly driven by the security attribute quality.",
                    "Follows a bottom-up decomposition process of the system."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2014/test-4/test-41A-17copias.tex",
        "quizTitle": "..-data-2014-test-4-test-41A-17copias",
        "questions": [
            {
                "questionId": "UsesCycles",
                "content": "Consider a view of the module viewtype where there is a uses loop, a cycle of uses dependences between several modules. It may be possible to break the dependence cycle by",
                "image": [],
                "options": [
                    "Applying the generalization style to identify child modules of a module in the loop chain.",
                    "Applying the decomposition style to some of the modules in the loop chain.",
                    "Identifying which of the \\emph{uses} dependencies are actually generalization dependencies.",
                    "Decomposing a \\emph{uses} relation into different interfaces."
                ]
            },
            {
                "questionId": "Aspects",
                "content": "An architect is decomposing a system into a set of responsibilities using a view of the Decomposition style. However, she had already to backtrack several times and try new decompositions because she end up with some responsibility that can not be within a single module.",
                "image": [],
                "options": [
                    "She should try to use a view of the Aspects style, assign this responsibility to a module such that the other modules can crosscut this responsibility.",
                    "She should try to use a view of the Aspects style, assign this responsibility to a module and bind it to the modules affected by it.",
                    "She should define finer-grained modules where she splits the unassigned responsibility.",
                    "This means that in this software system it is not possible to modularize each responsibility in a cohesive module."
                ]
            },
            {
                "questionId": "GitHubSecurity",
                "content": "In the description of the GitHub case study can be read:\n    \n    \\begin{quote}\n        Of course, allowing arbitrary execution of commands is unsafe, so SSH includes the ability to restrict what commands can be executed. In a very simple case, you can restrict execution to git-shell which is included with Git. All this script does is check the command that you're trying to execute and ensure that it's one of git upload-pack, git receive-pack, or git upload-archive.\n    \\end{quote}\n    \n    The tactic addressed in this fragments is:",
                "image": [],
                "options": [
                    "Limit exposure.",
                    "Limit access.",
                    "Authorize actors.",
                    "Separate entities."
                ]
            },
            {
                "questionId": "ConnectorAttach",
                "content": "A connector may be attached to components of different types because",
                "image": [],
                "options": [
                    "The type of a connector does not depend on the type of its roles.",
                    "The type of a component does not depend on the type of its ports.",
                    "The attachment is a runtime relation which dynamically manages type compliance.",
                    "The attachment between components and connectors only depends on their ports and roles types."
                ]
            },
            {
                "questionId": "RepositoryPerformance",
                "content": "The repository architectural style provides performance because",
                "image": [],
                "options": [
                    "It implements a maintain multiple copies of computation tactic.",
                    "It supports the concurrent access of data accessors.",
                    "It supports the access to persistent information.",
                    "It implements a maintain multiple copies of data tactic."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2014/test-4/test-42A-16copias.tex",
        "quizTitle": "..-data-2014-test-4-test-42A-16copias",
        "questions": [
            {
                "questionId": "GeneralizationEvolution",
                "content": "The Generalization architectural style of the module viewtype can be use to support the evolution of a system",
                "image": [],
                "options": [
                    "By changing the commonalities that are in the children.",
                    "Because the \\emph{is-a} relation does not allow reuse of implementation.",
                    "By adding, removing, or changing children.",
                    "By changing a parent, which will automatically change all the children that inherit from it."
                ]
            },
            {
                "questionId": "DataModelFacebook",
                "content": "In Facebook it is not possible to have the information about more that one bilion users in a single disk. Therefore, a sharding technique is applied, where the persistent information is split between several database servers, and applications are routed to the right servers for queries and updates. To describe this architecture",
                "image": [],
                "options": [
                    "It is necessary design a CRUD matrix to show the dependencies between the persistent information.",
                    "It is enough to design a view of the Data Model architectural style at the conceptual level because Facebook information has a very simple structure.",
                    "It is not necessary to have any view of the Data Model architectural style because Facebook information has a very simple structure.",
                    "It is necessary to design a view of the Data Model architectural style at the physical level to deal with performance issues of the access to data."
                ]
            },
            {
                "questionId": "GitIncreaseResourceEfficiency",
                "content": "In the description of the Git case study can be read how it efficiently compares content:\n    \n    \\begin{quote}\n        When a content (i.e., file or directory) node in the graph has the same reference identity (the SHA in Git) as that in a different commit, the two nodes are guaranteed to contain the same content, allowing Git to short-circuit content diffing efficiently.\n    \\end{quote}\n    \n    The performance tactic addressed in this fragments is:",
                "image": [],
                "options": [
                    "Schedule resources.",
                    "Maintain multiple copies of data.",
                    "Increase resource efficiency.",
                    "Reduce overhead."
                ]
            },
            {
                "questionId": "ConnectorDecomposition",
                "content": "Consider an architect that is designing a component-and-connector view. In some point the architect decides that she does not need to decompose a connector with a demanding quality level. This may occur because",
                "image": [],
                "options": [
                    "She encapsulates the connector qualities inside a higher level component.",
                    "She delays the complete specification of the connector for development time to have human resources to prototype and measure different implementations.",
                    "She does not want to clutter the view with details and trusts the development team to implement the connector according to the required quality level.",
                    "The required quality associated with the connector is supported by existing and well-know technology."
                ]
            },
            {
                "questionId": "ClientServerSynchronous",
                "content": "In the client-server architectural style the request/reply connector is synchronous. Consider an architect that wants to describe an asynchronous interaction between clients and servers.",
                "image": [],
                "options": [
                    "She can define a variant of this style with asynchronous communication by allowing the client to register callbacks that the server calls at specific times.",
                    "She has to use another architectural style to describe asynchronous communication.",
                    "She can use the request/reply connector but the server should not return results to the client.",
                    "She can define a variant of this style with asynchronous communication by allowing the server to have the initiative to initiate the interaction."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2014/test-4/test-43A-16copias.tex",
        "quizTitle": "..-data-2014-test-4-test-43A-16copias",
        "questions": [
            {
                "questionId": "UsesFor",
                "content": "The Uses architectural style of the Module viewtype",
                "image": [],
                "options": [
                    "Allows the analysis of the impact of changes because if a module uses another it will necessarily have to change whenever the used module changes.",
                    "Improves testability because if a module uses another then it is only possible to test them together.",
                    "Allows incremental development because the possible increments of functionally can be inferred from use dependencies.",
                    "Improves testability because it informs the tester about which modules involved in circular use dependencies."
                ]
            },
            {
                "questionId": "UsesDataModel",
                "content": "A CRUD matrix, which indicates whether each module creates, reads, updates, or deletes data (CRUD, for short) from each data entity. The CRUD matrix",
                "image": [],
                "options": [
                    "Relates a view of the Uses style with a view of the Data Model style.",
                    "Is an extension of a view of the Data Model style.",
                    "Allows to avoid redundancy and inconsistency.",
                    "Describes the structure of the data used by the system."
                ]
            },
            {
                "questionId": "GitHubComputationRedundancy",
                "content": "In the description of the GitHub case study can be read:\n    \n    \\begin{quote}\n        Once the Smoke proxy has determined the user's route, it establishes a transparent proxy to the proper file server. We have four pairs of file servers. Their names are fs1a, fs1b, ..., fs4a, fs4b. These are 8 core, 16GB RAM bare metal servers, each with six 300GB 15K RPM SAS drives arranged in RAID 10. At any given time one server in each pair is active and the other is waiting to take over should there be a fatal failure in the master. All repository data is constantly replicated from the master to the slave via DRBD.\n    \\end{quote}\n    \n    The four pairs of file servers implement:",
                "image": [],
                "options": [
                    "Multiple copies of computation and Passive redundancy tactics.",
                    "Multiple copies of computation tactic.",
                    "Passive redundancy tactic.",
                    "Multiple copies of computation and Active redundancy tactics."
                ]
            },
            {
                "questionId": "ComponentPorts",
                "content": "Consider the concepts of module interface and component port.",
                "image": [],
                "options": [
                    "A module interface has to be attached to a single component port.",
                    "A module interface can be replicated but component ports cannot.",
                    "A module interface cannot be replicated but component ports can.",
                    "A module interface may be attached to several component ports."
                ]
            },
            {
                "questionId": "ClientServerAvailability",
                "content": "The client-server architectural style provides availability because",
                "image": [],
                "options": [
                    "It allows an undefined number of clients.",
                    "It is possible to have redundant servers.",
                    "Servers can also be clients.",
                    "Servers can send a heartbeat to clients."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2014/test-4/test-44A-18copias.tex",
        "quizTitle": "..-data-2014-test-4-test-44A-18copias",
        "questions": [
            {
                "questionId": "ModuleComponent",
                "content": "Consider the kind of relations between components and modules.",
                "image": [],
                "options": [
                    "A module contains the code that executes in a single component and a component executes the code of a single module.",
                    "A module contains the code that can execute in several components and a component executes the code of a single module.",
                    "A module contains the code that executes in a single component and a component can execute the code of several modules.",
                    "A module contains the code that can execute in several components and a component can execute the code of several modules."
                ]
            },
            {
                "questionId": "GitConditionMonitoring",
                "content": "In the description of the Git case study can be read how to deal with the corruption of pack files in the context of the availability quality:\n    \n    \\begin{quote}\n        If an object was only copied partially or another form of data corruption occurred, recalculating the SHA of the current object will identify such corruption.\n    \\end{quote}\n    \n    The tactic addressed in this fragments is:",
                "image": [],
                "options": [
                    "Sanity checking.",
                    "Exception detection.",
                    "Detect intrusion.",
                    "Condition monitoring."
                ]
            },
            {
                "questionId": "RepositoryModifiability",
                "content": "The repository architectural style provides modifiability because",
                "image": [],
                "options": [
                    "It is possible to integrate a new data accessor without changing the other data accessors.",
                    "It is possible to change the repository schema without changing the data accessors.",
                    "The integration of a new data accessor only implies changes in the data accessors that access the same type of data.",
                    "The communication between data accessors does not occur through the repository."
                ]
            },
            {
                "questionId": "UsesCalls",
                "content": "A function call is not necessarily a uses relation of the Uses architectural style of the Module viewtype because",
                "image": [],
                "options": [
                    "The correctness of the caller module may not depend on the correct implementation of the invoked function in the called module.",
                    "The invoked function may not have any input parameter.",
                    "The invoked function may not have any output parameter.",
                    "The invoked function may not have both any input parameter nor any output parameter."
                ]
            },
            {
                "questionId": "LayeredVirtualMachine",
                "content": "According to the definition of the Layered architectural style, each layer represents a grouping of modules that offers a cohesive set of services.",
                "image": [],
                "options": [
                    "This means that the modules inside a layer cannot be loosely coupled.",
                    "This means that this architectural style emphasizes the quality of performance.",
                    "This means that each module cannot use other modules inside the same layer.",
                    "This means that the modules inside a layer are likely to be ported to a new application together."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2014/test-5/test-51A-17copias.tex",
        "quizTitle": "..-data-2014-test-5-test-51A-17copias",
        "questions": [
            {
                "questionId": "PeerToPeerSpace",
                "content": "The Peer-to-Peer architectural style provides high scalability and availability. In the context of a file sharing system",
                "image": [],
                "options": [
                    "The file transfers follows the same path of nodes used to identify where the file was located.",
                    "The peer initiating the request for a file needs to know where the file is located.",
                    "If a peer providing a file crashes it is necessary to restart to download the file from the begin.",
                    "The price for high scalability and availability is the need to have several replicas of the files to be shared."
                ]
            },
            {
                "questionId": "SOAClientServerPeertoPeer",
                "content": "The Service-Oriented Architecture style",
                "image": [],
                "options": [
                    "Is a Client-Server style because consumers are clients and providers are servers.",
                    "Is a Peer-to-Peer style because consumers and providers are peers.",
                    "Can use a Service Registry to improve transparency of location of service providers.",
                    "Is a Publish-subscriber style because consumers use an enterprise service bus."
                ]
            },
            {
                "questionId": "GraphiteCarbon",
                "content": "Consider the following application-specific types that were defined for a component-and-connector view that depicts the components within \\texttt{Carbon} component. \n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{x-carbon-buffering}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2014/test-5/x-carbon-buffering.png",
                        "width": 100
                    }
                ],
                "options": [
                    "In the view there are multiple instances of the \\texttt{Queue} component.",
                    "In the view there are multiple instances of the \\texttt{Writer} component.",
                    "In the view \\texttt{Receiver} component's \\texttt{client} port is not associated with an external port.",
                    "In the view the \\texttt{produce} port of a \\texttt{Receiver} component is attached to the \\texttt{consume} port of a \\texttt{Writer} component."
                ]
            },
            {
                "questionId": "AllocationStylesCost",
                "content": "Consider a stakeholder that is particularly concerned about the total cost of the project. When it comes to describing the system using allocation viewtypes is interested in",
                "image": [],
                "options": [
                    "A deployment view.",
                    "A work assignment view.",
                    "A deployment and a work assignment view.",
                    "A install view."
                ]
            },
            {
                "questionId": "DVDCatalogMeta",
                "content": "Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        The application should support other kinds of catalogs (CDs, games, books, ...). \n    \\end{quote}\n    \n    This requirement requires a change of",
                "image": [],
                "options": [
                    "The layered view to support a new specific layer for the customization of the catalog.",
                    "The layered view to accommodate a new layer for which kind of catalog, which other layers may use.",
                    "The data model view in order to define entities for each kind of catalog.",
                    "The data model view in order to define generic entities that can be customized for different kinds of catalogs."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2014/test-5/test-52A-16copias.tex",
        "quizTitle": "..-data-2014-test-5-test-52A-16copias",
        "questions": [
            {
                "questionId": "PeerToPeerDynamicReconfiguration",
                "content": "In the description of the Gnutella system can be read:\n    \n    \\begin{quote}\n        The topology of the system changes at runtime as peer components connect and disconnect to the network.\n    \\end{quote}",
                "image": [],
                "options": [
                    "When a peer connects to the network it establishes connections with all other peers in the network.",
                    "The behavior described in the sentence can be represented in a view where the dynamic reconfiguration architectural style is used.",
                    "When a peer receives a connection it sends all its files to the peer connecting it.",
                    "The behavior described in the sentence can be represented in a view where the tier architectural style is used."
                ]
            },
            {
                "questionId": "SOAQualities",
                "content": "The Service-Oriented Architecture style improves modifiability because",
                "image": [],
                "options": [
                    "It encapsulates applications through well-defined interfaces.",
                    "It decouples the coordination of the interaction among applications from the applications themselves.",
                    "It improves transparency of location of service providers.",
                    "It encapsulates applications through well-defined interfaces, decouples the coordination of the interaction among applications from the applications themselves, and improves transparency of location of service providers."
                ]
            },
            {
                "questionId": "GraphiteDataPointSocket",
                "content": "Consider the following application-specific types. Note that \\texttt{Queue} components are within the \\texttt{Carbon} components. In a view that contains components of these three types \n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{x-datapoint-access}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2014/test-5/x-datapoint-access.png",
                        "width": 120
                    }
                ],
                "options": [
                    "There is a message passing connector between the \\texttt{read} port of \\texttt{Queue} and the \\texttt{data points access} port of \\texttt{WebApp}.",
                    "There is a interface delegation relation between the \\texttt{read} port of \\texttt{Queue} and the \\texttt{query} port of \\texttt{Carbon}.",
                    "There is a connector between the \\texttt{producer} port of a \\texttt{Queue} component and the \\texttt{client} port of its \\texttt{Carbon} component.",
                    "The \\texttt{client} ports of \\texttt{Carbon} and \\texttt{WebApp} are connected to a \\texttt{Client} component through the same connector instance."
                ]
            },
            {
                "questionId": "ImplementationStyle",
                "content": "An architecture can also be represented by the set of files which contains its modules code. A suitable architectural style to represent this set of files is",
                "image": [],
                "options": [
                    "Deployment style.",
                    "Implementation style.",
                    "Install style.",
                    "Work assignment style."
                ]
            },
            {
                "questionId": "DVDCatalogAspects",
                "content": "Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        To allow the share of catalogs with family and friends, including some access control. \n    \\end{quote}\n    \n    This requirement requires",
                "image": [],
                "options": [
                    "A change to the uses view to represent that friends can use each other catalog.",
                    "A change of the layered view to support different presentations, one for each friend.",
                    "A change of the decomposition view to include the responsibilities associated with the access control.",
                    "A new aspect view to include the responsibilities associated with the access control."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2014/test-5/test-53A-16copias.tex",
        "quizTitle": "..-data-2014-test-5-test-53A-16copias",
        "questions": [
            {
                "questionId": "Tiers",
                "content": "The Tiers architectural style",
                "image": [],
                "options": [
                    "It applies layers to tiers.",
                    "Restrict the communication between components because, for instance, a group of components should be located in the same hardware.",
                    "Is an extension of the Client-Server architectural style.",
                    "Defines tiers as components."
                ]
            },
            {
                "questionId": "SOAInteroperability",
                "content": "The Service-Oriented Architecture style improves interoperability because",
                "image": [],
                "options": [
                    "It enforces the use of a single implementation language among all applications.",
                    "The orchestration is in charge of improving the transparent location of service providers.",
                    "The enterprise service bus coordinates the execution of several services.",
                    "It decouples applications developed for different organizations."
                ]
            },
            {
                "questionId": "InstallStyle",
                "content": "An important stage of the development of any system is its build into the set of executable files. A suitable architectural style which helps on the definition of the build process is",
                "image": [],
                "options": [
                    "Deployment style.",
                    "Implementation style.",
                    "Install style.",
                    "Work assignment style."
                ]
            },
            {
                "questionId": "DVDCatalogMobile",
                "content": "Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        To support iPhone/iPad/Android version with sync, which allows offline use of the application in the mobile device and data synchronization to occur when a connection is available\n    \\end{quote}\n    \n    This requirement requires a change of",
                "image": [],
                "options": [
                    "The decomposition view to include a module for the synchronization responsibilities.",
                    "The uses view to represent how the mobile device uses the Catalog application.",
                    "The layered view to include a layer for each type of device.",
                    "The domain layer of the layered view to represent the types of devices."
                ]
            },
            {
                "questionId": "GraphiteDecompositionMemcached",
                "content": "Consider the following decomposition view of the Graphite system where module \\textsc{Store Graphs} is responsible for managing the storage of datapoints and graphs and module \\textsc{Present Graphs} for graphs generation and presentation. Memcache is a library that maintains datapoints in memory to reduce the overhead of obtaining them from the file system.\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{x-top-decomposition}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2014/test-5/x-top-decomposition.png",
                        "width": 100
                    }
                ],
                "options": [
                    "Memcached can be considered a sub-module of the Store Graphs module.",
                    "Memcached can be considered a sub-module of the Present Graphs module.",
                    "Memcached can be considered a direct sub-module of the top Graphite module.",
                    "Memcached is not a module."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2014/test-5/test-54A-18copias.tex",
        "quizTitle": "..-data-2014-test-5-test-54A-18copias",
        "questions": [
            {
                "questionId": "PublishSubscribe",
                "content": "In the Publish-Subscribe architectural style",
                "image": [],
                "options": [
                    "A component can subscribe to events.",
                    "All the published events are received by their subscribing components.",
                    "The events should be delivered by the same order they are sent.",
                    "The set of events types are predefined at initialization time."
                ]
            },
            {
                "questionId": "PipeFilterComposition",
                "content": "The Pipe-and-Filter style allows composition of filters",
                "image": [],
                "options": [
                    "But when the filters are executed sequentially the composition power is reduced.",
                    "Which improves modifiability, because filters are decoupled through pipes.",
                    "But the size of buffers may reduce the composition power.",
                    "And filters do not have to agree on the data formats."
                ]
            },
            {
                "questionId": "GraphiteDecompositionBuffering",
                "content": "Consider the following decomposition view of the Graphite system where module \\textsc{Store Graphs} is responsible for managing the storage of datapoints and graphs and module \\textsc{Present Graphs} for graphs generation and presentation. Buffering is a library used to temporarily store incoming data point.\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{x-top-decomposition}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2014/test-5/x-top-decomposition.png",
                        "width": 100
                    }
                ],
                "options": [
                    "Buffering can be considered a sub-module of the Store Graphs module.",
                    "Buffering can be considered a sub-module of the Present Graphs module.",
                    "Buffering can be considered a direct sub-module of the top Graphite module.",
                    "Buffering is not a module."
                ]
            },
            {
                "questionId": "DeploymentStyleLimitExposure",
                "content": "An architect needs to show that a security tactic of limit exposure will be effectively provided by the executing system. Therefore, she decides to design",
                "image": [],
                "options": [
                    "A work assignment view.",
                    "A deployment view.",
                    "An install view.",
                    "An implementation view."
                ]
            },
            {
                "questionId": "DVDCatalogMultiPlatform",
                "content": "Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        To support multi-platform (Mac, Windows, Linux)\n    \\end{quote}\n    \n    This requirement requires a change of",
                "image": [],
                "options": [
                    "The layered view to deal with the aspects of portability.",
                    "The uses view to show the coupling between the different platforms.",
                    "The uses view to show the uses relationships between the different platforms.",
                    "The data model view to represent each one of the platforms."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2014/test-6/test-61A-17copias.tex",
        "quizTitle": "..-data-2014-test-6-test-61A-17copias",
        "questions": [
            {
                "questionId": "SilkMobileDevices",
                "content": "When comparing Amazon Silk with Google Chrome in the context of mobile devices",
                "image": [],
                "options": [
                    "Amazon Silk is more convenient for mobile devices because it does most of the computation in the cloud.",
                    "Google Chrome is more convenient for mobile devices because it has an optimized network stack that runs in any kind device.",
                    "Amazon Silk is more convenient for mobile devices because it customizes the number of threads that run in the device.",
                    "Google Chrome is more convenient for mobile devices because content delivery is optimized."
                ]
            },
            {
                "questionId": "ThousandParsecReadWriteConnector",
                "content": "Consider the architectural views for the ThousandParsec system. The following diagram depicts a proposal of application-specific types for the architectural components, where the names of the ports are missing. Between the GameServer and Repository component\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{x-ThousandParsec-cc}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2014/test-6/x-ThousandParsec-cc.png",
                        "width": 80
                    }
                ],
                "options": [
                    "There is a ThousandParsec connector.",
                    "There is a Read/Write connector which encapsulates a redundant Repository.",
                    "There is a Read/Write connector which guarantees that players turns are not lost.",
                    "There is a Read/Write connector which guarantees that only the turns of the last two players may be lost."
                ]
            },
            {
                "questionId": "OrderPadReliability",
                "content": "Consider the architecture of the Morrison's OrderPad. The connector between the client component, executing in the Pad, and the server component, executing in the OrderPadDatabase",
                "image": [],
                "options": [
                    "Supports asynchronous communication to deal with disconnected mode.",
                    "Implements an event bus that allows the server to inform the client about new order recommendations.",
                    "May loose some of the changes done on the client component.",
                    "Has reduced reliability qualities."
                ]
            },
            {
                "questionId": "SocialCalcConflictResolution",
                "content": "Consider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the client Spreadsheet. A \\textsc{ConflictResolution} module is used when local commands conflict with remote commands.\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{x-SocialCalc-cc-client}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2014/test-6/x-SocialCalc-cc-client.png",
                        "width": 80
                    }
                ],
                "options": [
                    "The \\textsc{ConflictResolution} module is part of the code executed by the \\textsc{: TableEditor} component.",
                    "The \\textsc{ConflictResolution} module is part of the code executed by the \\textsc{: Sheet} component.",
                    "The code of the \\textsc{ConflictResolution} module is executed by a broadcast connector that implements an eventbus between the \\textsc{SpreadSheet} components.",
                    "The code of the \\textsc{ConflictResolution} module is executed in a server component because it needs to be centralized."
                ]
            },
            {
                "questionId": "LogicAccessTableModule",
                "content": "When the domain logic is organized using a Table Module pattern",
                "image": [],
                "options": [
                    "An object oriented style is followed.",
                    "The business logic is organized around record sets.",
                    "Row Data Gateway is the most suitable data source pattern.",
                    "A Service Layer should be used to provide an interface for the presentation layer."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2014/test-6/test-62A-16copias.tex",
        "quizTitle": "..-data-2014-test-6-test-62A-16copias",
        "questions": [
            {
                "questionId": "SilkConnections",
                "content": "When comparing Amazon Silk with Google Chrome",
                "image": [],
                "options": [
                    "In Amazon Silk a request for a web page corresponds to a peer-to-peer interaction between all the web components containing the resources.",
                    "In Google Chrome a request for a web page is accomplished by a single access to the internet.",
                    "In Amazon Silk a request for a web page corresponds to requesting a service from the amazon cloud.",
                    "In Google Chrome a request for a web page aggregates the page on the background before it is sent to the client."
                ]
            },
            {
                "questionId": "ThousandParsecModule",
                "content": "Consider the architectural views for the ThousandParsec system. The following diagram depicts a fragment of a proposal for the decomposition view of the system. The ThousandParsec protocol\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{x-ThousandParsec-ruleset}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2014/test-6/x-ThousandParsec-ruleset.png",
                        "width": 100
                    }
                ],
                "options": [
                    "Should be described as a submodule of the RulesSet module.",
                    "Should be described as a submodule of but not included in the RulesSet subtree.",
                    "Should be described as a submodule of the Design module.",
                    "Should not be described as a module because it is a component."
                ]
            },
            {
                "questionId": "OrderPadIterative",
                "content": "Consider the architecture of the Morrison's OrderPad. In the description of the system can be read:\n    \n    \\begin{quote}\n        One of these was using a file-transfer to send data to the mainframe rather than MQ, which wouldn't perform well once many stores were active.\n    \\end{quote}\n    \n    This approach means that",
                "image": [],
                "options": [
                    "Performance was traded for easy of development.",
                    "An iterative development was followed, which allowed more time to develop a connector with good performance in the latter stages of the project.",
                    "Performance was traded for the modifiability quality.",
                    "An incremental development was followed, which allowed to have the system in production without being necessary to export all the information to the mainframe."
                ]
            },
            {
                "questionId": "SocialCalcRemoteCursor",
                "content": "Consider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the client Spreadsheet. It can be read in the case description: \\emph{A simple improvement is for each client to broadcast its cursor position to other users, so everyone can see which cells are being worked on.}\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{x-SocialCalc-cc-client}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2014/test-6/x-SocialCalc-cc-client.png",
                        "width": 80
                    }
                ],
                "options": [
                    "The \\textsc{: TableEditor} broadcasts the cursor position through the \\textsc{: Sheet}.",
                    "An interface delegation is missing in the picture to represent the \\textsc{: TableEditor} broadcasting the cursor position through the \\textsc{Pub} port.",
                    "The \\textsc{: Sheet} broadcasts the cursor position through the \\textsc{Pub} port.",
                    "The \\textsc{: TableEditor} broadcasts the cursor position through its \\textsc{: StatusCallback} port."
                ]
            },
            {
                "questionId": "LogicAccessTransactionScriptDomainObjects",
                "content": "When the domain logic is organized using a Transaction Script pattern the domain objects",
                "image": [],
                "options": [
                    "Are responsible for loading the objects they refer to.",
                    "Are responsible for the management of transactions, begin and end of transactions.",
                    "Contain the business logic.",
                    "May not even exist, only record sets are used."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2014/test-6/test-63A-16copias.tex",
        "quizTitle": "..-data-2014-test-6-test-63A-16copias",
        "questions": [
            {
                "questionId": "SilkPredictor",
                "content": "When comparing Amazon Silk with Google Chrome in the context of the prediction of pages the user is going to access",
                "image": [],
                "options": [
                    "Amazon Silk predicts accesses based on the information gathered for all Silk users.",
                    "Google Chrome uses a usability maintain system model tactic.",
                    "Amazon Silk predictions are constrained by the amount of information it can store about each user access.",
                    "Google Chrome predictions do not require storage in the client-side."
                ]
            },
            {
                "questionId": "ThousandParsecTPConnector",
                "content": "Consider the architectural views for the ThousandParsec system. The following diagram depicts a proposal of application-specific types for the architectural components, where the names of the ports are missing. Between the GameClient and GameServer components\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{x-ThousandParsec-cc}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2014/test-6/x-ThousandParsec-cc.png",
                        "width": 80
                    }
                ],
                "options": [
                    "There is a ThousandParsec connector.",
                    "There is a Request/Reply connector.",
                    "There is a ThousandParsec connector which can be decomposed into a set of components and Request/Reply connectors.",
                    "There is an EventBus connector."
                ]
            },
            {
                "questionId": "OrderPadPortability",
                "content": "Consider the architecture of the Morrison's OrderPad. The decision between the use of a Native application or HTML5 on the implementation of the client in the Pad",
                "image": [],
                "options": [
                    "Was taken because HTML5 provides better portability qualities.",
                    "Was taken because Native applications provide better modifiability qualities.",
                    "Was taken because HTML5 provides better usability qualities.",
                    "Was taken because Native application provide better support for working offline."
                ]
            },
            {
                "questionId": "SocialCalcServer",
                "content": "Consider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the system. According to this representation\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{x-SocialCalc-cc}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2014/test-6/x-SocialCalc-cc.png",
                        "width": 80
                    }
                ],
                "options": [
                    "The server implements the \\textsc{: Repository} component and the \\textsc{: Broadcast} connector.",
                    "The server implements the \\textsc{: Repository} component.",
                    "The server implements the \\textsc{: Broadcast} connector.",
                    "The server implements the \\textsc{SpreadSheet} components"
                ]
            },
            {
                "questionId": "LogicAccessTransactionScript",
                "content": "When the domain logic is organized using a Transaction Script pattern the most suitable data source patterns are",
                "image": [],
                "options": [
                    "Table Data Gateway and Row Data Gateway.",
                    "Row Data Gateway and Active Record.",
                    "Row Data Gateway and Data Mapper.",
                    "Active Record and Data Mapper."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2014/test-6/test-64A-18copias.tex",
        "quizTitle": "..-data-2014-test-6-test-64A-18copias",
        "questions": [
            {
                "questionId": "SilkCaching",
                "content": "When comparing Amazon Silk with Google Chrome",
                "image": [],
                "options": [
                    "Amazon Silk explicitly caches pages on the browser to optimize accesses.",
                    "Google Chrome predictor takes into consideration the amount of available cache.",
                    "Amazon Silk cache is not shared between different users of the service to support confidentiality.",
                    "Google Chrome cache is shared among the different users of a desktop machine."
                ]
            },
            {
                "questionId": "ThousandParsecAI",
                "content": "Consider the architectural views for the ThousandParsec system. The following diagram depicts a fragment of a proposal for the decomposition view of the system. The AI players should be described\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{x-ThousandParsec-ruleset}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2014/test-6/x-ThousandParsec-ruleset.png",
                        "width": 100
                    }
                ],
                "options": [
                    "As a specialization of the RulesSet module.",
                    "As a submodule of the RulesSet module.",
                    "As a module but not included in the RulesSet subtree.",
                    "As a specialization of the Design module."
                ]
            },
            {
                "questionId": "OrderPadMainframeConnector",
                "content": "Consider the architecture of the Morrison's OrderPad. The final interaction between the OrderPadDatabase component and Mainframe component is supported by",
                "image": [],
                "options": [
                    "Two distinct unidirectional connectors.",
                    "A single bidirectional connector.",
                    "Three distinct unidirectional connectors.",
                    "A single unidirectional connector."
                ]
            },
            {
                "questionId": "SocialCalcParser",
                "content": "Consider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the client Spreadsheet. A \\textsc{Parser} module is used when loading a file\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{x-SocialCalc-cc-client}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2014/test-6/x-SocialCalc-cc-client.png",
                        "width": 80
                    }
                ],
                "options": [
                    "The \\textsc{Parser} module is part of the code executed by the \\textsc{: TableEditor} component.",
                    "The \\textsc{Parser} module is part of the code executed by the \\textsc{: Sheet} component.",
                    "The code of the \\textsc{Parser} module is executed by a repository component, which is not represented in the view.",
                    "The code of the \\textsc{Parser} module is executed by both, the \\textsc{: Sheet} and the repository components (the latter is not visible in the view)."
                ]
            },
            {
                "questionId": "LogicAccessDomainModel",
                "content": "When the domain logic is organized using a Domain Model pattern the most suitable data source patterns are",
                "image": [],
                "options": [
                    "Table Data Gateway and Row Data Gateway.",
                    "Row Data Gateway and Active Record.",
                    "Row Data Gateway and Data Mapper.",
                    "Active Record and Data Mapper."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2015/exams/20160108Exam/exame-20160108-companion-A.tex",
        "quizTitle": "..-data-2015-exams-20160108Exam-exame-20160108-companion-A",
        "questions": [
            {
                "questionId": "ArchitectureInfluenceCycleOne",
                "content": "Consider the following sentence by Melvin Conways, also known as Conway's Law\n    \n    \\begin{quote}\n        organizations which design systems ... are constrained to produce designs which are copies of the communication structures of these organizations\n    \\end{quote}",
                "image": [],
                "options": [
                    "This law highlights the impact of the business on the architecture",
                    "This law can be seen as an example of the architecture influence cycle",
                    "This law states that architectures impact on the structure of the organization",
                    "This law does not apply to the design of architectures"
                ]
            },
            {
                "questionId": "AdventureBuilderOne",
                "content": "Consider the following architectural view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{../AdventureBuilderDeployment}\n    \\end{center}\n    \n    According to this view the stakeholders can see that the Adventure Builder system",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/exams/AdventureBuilderDeployment.png",
                        "width": 80
                    }
                ],
                "options": [
                    "Becomes unavailable for clients if there is a fault in the hardware of web server (srv-web)",
                    "Becomes unavailable for clients if there is a fault in the hardware of database server (srv-db)",
                    "Becomes unavailable for clients if there is a fault in the hardware of service server (srv-opc)",
                    "Becomes unavailable for banks if there is a fault in the hardware of service server (srv-opc)"
                ]
            },
            {
                "questionId": "RequirementsOne",
                "content": "Frank Buschmann cites the characterization Marquardt does of Performitis:\n        \n    \\begin{quote}\n        Each part of the system is directly influenced by local performance tuning measures. There is no global performance strategy, or it ignores other qualities of the system as testability and maintainability.\n    \\end{quote}\n    \n    From this problem you can conclude that:",
                "image": [],
                "options": [
                    "Performance is a quality that you have to address at the end of the development process",
                    "There is no system which can have good performance and be easily maintainable",
                    "We have to distinguish architectural performance from opportunistic performance",
                    "The system performance quality has impact on the performance of the execution of tests"
                ]
            },
            {
                "questionId": "ArchitectureDefinitionOne",
                "content": "Consider that a software development team uses an agile methodology\n        such as XP (Extreme Programming), where no documentation is\n        produced.  Then, the systems developed by that team",
                "image": [],
                "options": [
                    "Typically have a software architecture that results\n          from the common knowledge about the system that is shared among\n          the team members",
                    "Do not have a software architecture, because in agile\n          methodologies there is no architectural design phase",
                    "Do not have a software architecture, because the practice of\n          refactoring allows changing every part of the system easily",
                    "May have a software architecture, but that architecture is\n          not known because it was neither designed nor documented"
                ]
            },
            {
                "questionId": "ScenariosTacticsOne",
                "content": "As part of the process of creating an architecture, we talked about\n  a framework for capturing some of the requirements for a system.  In\n  this context, \\textbf{concrete scenarios} are used for",
                "image": [],
                "options": [
                    "Describing what are the qualities that the system should possess",
                    "Describing a set of steps that a user of the system must\n      perform to accomplish some task",
                    "Describing a use case for the system that makes clear what\n    should be the system's responses to each of the user's inputs",
                    "Describing the system's features by way of different\n    usage scenarios for it, in which users play the role of actors"
                ]
            },
            {
                "questionId": "ModuleComponentOne",
                "content": "Consider the Figure that describes the use of\n    caches in web services.  \n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{../RequestNodeCache}\n    \\end{center}\n    \n    In that Figure, there is a\n    rectangle with the name \\emph{Cache} within another rectangle with\n    the name \\emph{Request Node}.  Taking into account the description\n    made in the text and the goal of that Figure, those rectangles\n    correspond to which type of software elements?",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/exams/RequestNodeCache.png",
                        "width": 80
                    }
                ],
                "options": [
                    "They are both modules",
                    "They are both components",
                    "The \\emph{Request Node} is a component and the\n      \\emph{Cache} is a module",
                    "The \\emph{Request Node} is a module and the \\emph{Cache}\n      is a component"
                ]
            },
            {
                "questionId": "AvailabilityOne",
                "content": "There are several tactics to satisfy availability requirements,\n    which may be applied depending on the concrete requirement that we\n    want to satisfy.  Assuming that you want to deal with faults of type\n    \\emph{omission} in your system, which tactic is more adequate?",
                "image": [],
                "options": [
                    "Retry",
                    "Active redundancy",
                    "Ignore faulty behaviour",
                    "Ping/Echo"
                ]
            },
            {
                "questionId": "ModifiabilityOne",
                "content": "The modifiability tactic Use an Intermediary between two modules",
                "image": [],
                "options": [
                    "Has as main goal the reduction of the modules' size.",
                    "Results in the creation of a third module that does not have to change when any of the original modules are changed.",
                    "Increases the cohesion between the two modules.",
                    "Cannot be used together with the Reduce Overhead performance tactic."
                ]
            },
            {
                "questionId": "PerformanceOne",
                "content": "Consider a scenario for performance where the arrival of events is stochastic with a distribution where there are peeks of events but the arrival of events over a long period is uniform. The best tactic to apply is",
                "image": [],
                "options": [
                    "Manage sampling rate.",
                    "Limit event response.",
                    "Prioritize events.",
                    "Bound execution time."
                ]
            },
            {
                "questionId": "NginxScenariosTacticsOne",
                "content": "Consider the following excerpt from Nginx case study\n\n    \\begin{quote}\n        nginx configuration is kept in a number of plain text files which typically reside in /usr/local/etc/nginx or /etc/nginx. The main configuration file is usually called nginx.conf.         To keep it uncluttered, parts of the configuration can be put in separate files which can be automatically included in the main one. However, it should be noted here that nginx         does not currently support Apache-style distributed configurations (i.e., .htaccess files). All of the configuration relevant to nginx web server behavior should reside in a         centralized set of configuration files.\n    \\end{quote}\n    \n    When comparing the configuration in Nginx with the configuration in Apache we can say that",
                "image": [],
                "options": [
                    "Due to its configuration strategy Apache has better performance",
                    "Performance was the main concern of the design of the configuration strategy in Nginx",
                    "Apache emphasizes the usability quality for system administrators by allowing to split the configuration by different files",
                    "Nginx emphasizes the usability quality for system administrators by reducing the number or errors"
                ]
            },
            {
                "questionId": "ContinousIntegrationScenariosTacticsOne",
                "content": "In the Continous integration case study can be read about Jenkins\n      \n      \\begin{quote}\n          It takes advantage of the JUnit XML standard for unit test and code coverage reporting to integrate reports from a variety of test tools. Jenkins originated with Sun, but is very widely used and has a robust open-source community associated with it.\n      \\end{quote}\n      \n      Consider that a scenario is written from the above sentence",
                "image": [],
                "options": [
                    "The stimulus is to integrate reports from a variety of test tools",
                    "The response is JUnit XML standard",
                    "The source of the stimulus is Sun",
                    "The measure of the response is a robust open-source community associated with it"
                ]
            },
            {
                "questionId": "InfinispanScenariosTacticsOne",
                "content": "In the Infinispan case study can be read\n      \n      \\begin{quote}\n          When persisting for durability, persistence can either be online, where the application thread is blocked until data is safely written to disk, or offline, where data is flushed to disk periodically and asynchronously. In the latter case, the application thread is not blocked on the process of persistence, in exchange for uncertainty as to whether the data was successfully persisted to disk at all.\n      \\end{quote}\n      \n      From the description we can infer a trade-off between the qualities of",
                "image": [],
                "options": [
                    "Modifiability and Performance",
                    "Availability and Modifiability",
                    "Performance and Reliability",
                    "Reliability and Security"
                ]
            },
            {
                "questionId": "DesigningArchitectureOne",
                "content": "According to the attribute-driven design process, we should design\n    the software architecture for a system based on a selected list of\n    requirements, which are called the \\textit{architecture significant requirements}.\n    These requirements should be sorted according to their\n    importance for the system's stakeholders because",
                "image": [],
                "options": [
                    "We should always satisfy in the first place the requirements\n      of more important stakeholders (such as the client)",
                    "If no order was established among them, we would not know\n      from where should we start the design process",
                    "If one of the stakeholders complains that his requirement\n      is not satisfied, we may explain to him that there were other more\n      important requirements first",
                    "When it is not possible to satisfy all of the requirements\n      optimally, we should be aware of their relative importance so that\n      we may find a solution that corresponds to a satisfactory trade-off"
                ]
            },
            {
                "questionId": "ModuleViewtypeOne",
                "content": "Consider the Decomposition architectural style of the Module viewtype",
                "image": [],
                "options": [
                    "Its main goal is to establish the reusability qualities of the architecture.",
                    "Project managers are not interested in views that use this style because it lacks the necessary level of detail.",
                    "Incremental development is a criteria that drives the design of views of this type.",
                    "There should be at least one view of the system using this architectural style."
                ]
            },
            {
                "questionId": "UsesGeneralizationOne",
                "content": "To achieve a faster time-to-market, software companies are\n  increasingly using a strategy of incremental releases of their\n  software, where each new release has a set of new features.  Which\n  architectural style is better to analyse whether the system's\n  software architecture is adequate for the planned incremental\n  releases?",
                "image": [],
                "options": [
                    "The Decomposition style",
                    "The Deployment style",
                    "The Uses style",
                    "The Work-assignment style"
                ]
            },
            {
                "questionId": "LayeredAspectsDataModelOne",
                "content": "In a layered architecture composed by four layers, where the topmost\n  layer is the layer number 1 and the bottommost layer is the layer\n  number 4, which of the layers is more modifiable?",
                "image": [],
                "options": [
                    "Layer 1",
                    "Layer 4",
                    "In a layered architecture all layers are equally modifiable",
                    "Modifiability is not made easier by a layered architecture"
                ]
            },
            {
                "questionId": "ComponentConnectorOne",
                "content": "Suppose that there are certain performance requirements for a\n  system, and that you want to show to the stakeholders of the system\n  that the software architecture that you designed meet those\n  requirements. To do this",
                "image": [],
                "options": [
                    "It makes no sense to use views of the module viewtype, as\n        they give only a static view of the system",
                    "You should use only views of the component-and-connector\n        viewtype, which describe the dynamic aspects of the system",
                    "You may need to use views of the three viewtypes",
                    "The only views that are relevant to performance\n        requirements are views of the Deployment style"
                ]
            },
            {
                "questionId": "RepositoryClientServerOne",
                "content": "Suppose that you are designing the software architecture for an\n    enterprise application that has requirements about the maximum\n    response time for a certain type of requests.  Moreover, assume\n    that those requests arrive at the system periodically, whereas the\n    remaining requests have an unpredictable frequency.  Finally,\n    assume that your system will have a single server that will be\n    executing on a predefined machine with a 12-core AMD processor.\n    To show to the stakeholders that your system satisfies the\n    performance requirements you have to use views of which\n    architectural style?",
                "image": [],
                "options": [
                    "The Work Assignment style",
                    "The Client-Server style",
                    "The Deployment style",
                    "The Communicating Processes style"
                ]
            },
            {
                "questionId": "TiersDynamicreconfigurationPeertopeerPublishsubscribeOne",
                "content": "Typically, Instant Messaging clients have a window to list the contacts of the user, and\n      show in that window the status of each contact (whether it is available, unavailable, busy,\n      etc). Given that the status of a contact may be changed at any time, and that the contact's\n      status is given by the Instant Messaging application of that contact, which architectural\n      style represents best the interaction pattern between these components?",
                "image": [],
                "options": [
                    "The Shared Data style",
                    "The Pipes-and-filters style",
                    "The Publish-subscribe style",
                    "The Client-Server style"
                ]
            },
            {
                "questionId": "SOAPipesFiltersOne",
                "content": "Imagine that you want to develop a system that is to be used in email servers, whose goal\n      is to allow changing the emails that are received by the server (for example, to remove\n      potential viruses or URLs linking to phishing sites). The goal is that the server feeds each\n      received email through this system before processing it (e.g., forward it to another server,\n      or store it locally). The system is supposed to be easily modifiable, to support new types\n      of email transformations. Which architectural style is the most adequate to satisfy these\n      requirements?",
                "image": [],
                "options": [
                    "The Peer-to-Peer style",
                    "The Pipes-and-filters style",
                    "The Client-Server style",
                    "The Publish-subscribe style"
                ]
            },
            {
                "questionId": "AllocationOne",
                "content": "Consider the work assignment architectural style of the allocation viewtype.",
                "image": [],
                "options": [
                    "It assigns components and connectors to people and teams.",
                    "It is useful for the project managers.",
                    "It does not consider the software that is outsourced.",
                    "It allows to estimate the cost of hardware."
                ]
            },
            {
                "questionId": "nginxOne",
                "content": "Web servers implemented in Java, such as the Tomcat web server,\n  typically use a thread-based model for processing requests.  That\n  is, they process each request on a different thread within the same\n  JVM process, rather than on a different process.  One of the reasons\n  for this is that",
                "image": [],
                "options": [
                    "Launching a new process for processing each request is too expensive",
                    "Using threads ensures that the processing of each request is\n      isolated from the remaining requests",
                    "With this approach they may use all of the available cores\n      in multiprocessor machines",
                    "They are used for implementing enterprise applications that\n      typically have complex domain logic and, by using threads, it is\n      easier to reuse code from one request to another"
                ]
            },
            {
                "questionId": "ContinousIntegrationViewsOne",
                "content": "Consider the following architectural view of the Pony-Build system as described in the Continous integration case study\n      \n    \\begin{center}\n        \\includegraphics[width=100mm]{../PonyBuildArchitecture}\n    \\end{center}\n    \n    According to this view the quality of performance is achieved through",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/exams/PonyBuildArchitecture.png",
                        "width": 100
                    }
                ],
                "options": [
                    "An increase resource efficiency tactic",
                    "A schedule resources tactic",
                    "A multiple copies of computation tactic",
                    "A manage sampling rate tactic"
                ]
            },
            {
                "questionId": "InfinispanViewsOne",
                "content": "In the Infinispan case study can be read\n      \n      \\begin{quote}\n         Infinispan's core data structures make use of software transactional memory techniques for concurrent access to shared data. This minimizes the need for explicit locks, mutexes and other forms of synchronization, preferring techniques like compare-and-set operations within a loop to achieve correctness when updating shared data structures. Such techniques have been proven to improve CPU utilization in multi-core and SMP systems, and despite the increased code complexity, has paid off in overall performance when under load.\n      \\end{quote}\n      \n      These properties of Infinispan can be represented by",
                "image": [],
                "options": [
                    "A decomposition view which represent the module for compare-and-set",
                    "A client-server view with non-blocking connectors for the interaction between threads and core data structures",
                    "A communicating-processes view with non-blocking connectors for the interaction between threads and core data structures",
                    "A deployment view which allocate threads to the multi-cores"
                ]
            },
            {
                "questionId": "WebTwoOne",
                "content": "With the evolution of the web application technologies, it is now\n    possible to develop web applications with a user interface similar\n    to the interface of desktop applications.  Yet, for this to\n    happen, part of the code that was executing in the web server is\n    now executing in the web browser.  How does this change manifests\n    in the software architecture of the system?",
                "image": [],
                "options": [
                    "In the Deployment view, because the presentation\n      component is now executing in a different place",
                    "In the component-and-connector view, because the\n      connector between the web client and the web server has to change",
                    "In the Layer view, because the order of the layers will\n      have to change",
                    "In the mapping between layers of the system and the\n      components where they execute"
                ]
            },
            {
                "questionId": "MicroservicesArchitectureOne",
                "content": "Consider the following figure depicting two different architectures for web applications\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{../Microservices}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/exams/Microservices.png",
                        "width": 100
                    }
                ],
                "options": [
                    "The left part of the figure represents a three-layered architecture",
                    "The most relevant architectural style in the right part of the figure is shared-data",
                    "The system represented in the left part of the figure tends to be non-transactional",
                    "The system represented in the right part of the figure tends to have good modifiability"
                ]
            },
            {
                "questionId": "AmazonOne",
                "content": "Consider the following excerpt about the Amazon system\n    \n    \\begin{quote}\n        Over time, this grew into hundreds of services and a number of application servers that aggregate the information from the services. The application that renders the Amazon.com Web pages is one such application server, but so are the applications that serve the Web-services interface, the customer service application, the seller interface, and the many third-party Web sites that run on our platform.\n    \\end{quote}\n    \n    The architectural style that better represents these aspects of the Amazon architecture is",
                "image": [],
                "options": [
                    "Service-oriented architecture to express how clients can access the services",
                    "Client-server to express how multiple clients can access the applications",
                    "Tiers to express that different applications define their own contexts",
                    "Decomposition to express the different responsibilities assigned to each application"
                ]
            },
            {
                "questionId": "ScalableArchitectureOne",
                "content": "Consider the following excerpt about the Scalable web architecture and distributed systems case study about two different possible implementations of a global cache\n    \n    \\begin{quote}\n         The majority of applications leveraging global caches tend to use the first type, where the cache itself manages eviction and fetching data to prevent a flood of requests for the same data from the clients. However, there are some cases where the second implementation makes more sense. For example, if the cache is being used for very large files, a low cache hit percentage would cause the cache buffer to become overwhelmed with cache misses; in this situation it helps to have a large percentage of the total data set (or hot data set) in the cache.     \\end{quote}",
                "image": [],
                "options": [
                    "The solution where the application is responsible for the eviction has better availability",
                    "The solution where the cache is responsible for the eviction has better availability",
                    "The solution where the application is responsible for the eviction has better modifiability",
                    "The solution where the cache is responsible for the eviction has better performance"
                ]
            },
            {
                "questionId": "GraphiteScenarioTacticsOne",
                "content": "In the Graphite system the component \\emph{carbon} provides to \\emph{webapp} components an access interface to the \\emph{buffers} in order to improve the quality of",
                "image": [],
                "options": [
                    "Performance",
                    "Interoperability",
                    "Reliability",
                    "Security"
                ]
            },
            {
                "questionId": "GraphiteViewsOne",
                "content": "In Graphite system  the \\emph{receiver} and the \\emph{writer threads} support asynchronous writing of metrics to optimize disk accesses. The interaction between these two components follow the architectural style",
                "image": [],
                "options": [
                    "Client-server",
                    "Communicating Processes",
                    "Repository",
                    "Pipes-and-Filters"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2015/exams/20160108Exam/exame-20160108-companion-B.tex",
        "quizTitle": "..-data-2015-exams-20160108Exam-exame-20160108-companion-B",
        "questions": [
            {
                "questionId": "ContinousIntegrationScenariosTacticsOne",
                "content": "In the Continous integration case study can be read about Jenkins\n      \n      \\begin{quote}\n          It takes advantage of the JUnit XML standard for unit test and code coverage reporting to integrate reports from a variety of test tools. Jenkins originated with Sun, but is very widely used and has a robust open-source community associated with it.\n      \\end{quote}\n      \n      Consider that a scenario is written from the above sentence",
                "image": [],
                "options": [
                    "The stimulus is to integrate reports from a variety of test tools",
                    "The response is JUnit XML standard",
                    "The source of the stimulus is Sun",
                    "The measure of the response is a robust open-source community associated with it"
                ]
            },
            {
                "questionId": "InfinispanScenariosTacticsOne",
                "content": "In the Infinispan case study can be read\n      \n      \\begin{quote}\n          When persisting for durability, persistence can either be online, where the application thread is blocked until data is safely written to disk, or offline, where data is flushed to disk periodically and asynchronously. In the latter case, the application thread is not blocked on the process of persistence, in exchange for uncertainty as to whether the data was successfully persisted to disk at all.\n      \\end{quote}\n      \n      From the description we can infer a trade-off between the qualities of",
                "image": [],
                "options": [
                    "Modifiability and Performance",
                    "Availability and Modifiability",
                    "Performance and Reliability",
                    "Reliability and Security"
                ]
            },
            {
                "questionId": "WebTwoOne",
                "content": "With the evolution of the web application technologies, it is now\n    possible to develop web applications with a user interface similar\n    to the interface of desktop applications.  Yet, for this to\n    happen, part of the code that was executing in the web server is\n    now executing in the web browser.  How does this change manifests\n    in the software architecture of the system?",
                "image": [],
                "options": [
                    "In the Deployment view, because the presentation\n      component is now executing in a different place",
                    "In the component-and-connector view, because the\n      connector between the web client and the web server has to change",
                    "In the Layer view, because the order of the layers will\n      have to change",
                    "In the mapping between layers of the system and the\n      components where they execute"
                ]
            },
            {
                "questionId": "MicroservicesArchitectureOne",
                "content": "Consider the following figure depicting two different architectures for web applications\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{../Microservices}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/exams/Microservices.png",
                        "width": 100
                    }
                ],
                "options": [
                    "The left part of the figure represents a three-layered architecture",
                    "The most relevant architectural style in the right part of the figure is shared-data",
                    "The system represented in the left part of the figure tends to be non-transactional",
                    "The system represented in the right part of the figure tends to have good modifiability"
                ]
            },
            {
                "questionId": "AmazonOne",
                "content": "Consider the following excerpt about the Amazon system\n    \n    \\begin{quote}\n        Over time, this grew into hundreds of services and a number of application servers that aggregate the information from the services. The application that renders the Amazon.com Web pages is one such application server, but so are the applications that serve the Web-services interface, the customer service application, the seller interface, and the many third-party Web sites that run on our platform.\n    \\end{quote}\n    \n    The architectural style that better represents these aspects of the Amazon architecture is",
                "image": [],
                "options": [
                    "Service-oriented architecture to express how clients can access the services",
                    "Client-server to express how multiple clients can access the applications",
                    "Tiers to express that different applications define their own contexts",
                    "Decomposition to express the different responsibilities assigned to each application"
                ]
            },
            {
                "questionId": "DesigningArchitectureOne",
                "content": "According to the attribute-driven design process, we should design\n    the software architecture for a system based on a selected list of\n    requirements, which are called the \\textit{architecture significant requirements}.\n    These requirements should be sorted according to their\n    importance for the system's stakeholders because",
                "image": [],
                "options": [
                    "We should always satisfy in the first place the requirements\n      of more important stakeholders (such as the client)",
                    "If no order was established among them, we would not know\n      from where should we start the design process",
                    "If one of the stakeholders complains that his requirement\n      is not satisfied, we may explain to him that there were other more\n      important requirements first",
                    "When it is not possible to satisfy all of the requirements\n      optimally, we should be aware of their relative importance so that\n      we may find a solution that corresponds to a satisfactory trade-off"
                ]
            },
            {
                "questionId": "ModuleViewtypeOne",
                "content": "Consider the Decomposition architectural style of the Module viewtype",
                "image": [],
                "options": [
                    "Its main goal is to establish the reusability qualities of the architecture.",
                    "Project managers are not interested in views that use this style because it lacks the necessary level of detail.",
                    "Incremental development is a criteria that drives the design of views of this type.",
                    "There should be at least one view of the system using this architectural style."
                ]
            },
            {
                "questionId": "UsesGeneralizationOne",
                "content": "To achieve a faster time-to-market, software companies are\n  increasingly using a strategy of incremental releases of their\n  software, where each new release has a set of new features.  Which\n  architectural style is better to analyse whether the system's\n  software architecture is adequate for the planned incremental\n  releases?",
                "image": [],
                "options": [
                    "The Decomposition style",
                    "The Deployment style",
                    "The Uses style",
                    "The Work-assignment style"
                ]
            },
            {
                "questionId": "LayeredAspectsDataModelOne",
                "content": "In a layered architecture composed by four layers, where the topmost\n  layer is the layer number 1 and the bottommost layer is the layer\n  number 4, which of the layers is more modifiable?",
                "image": [],
                "options": [
                    "Layer 1",
                    "Layer 4",
                    "In a layered architecture all layers are equally modifiable",
                    "Modifiability is not made easier by a layered architecture"
                ]
            },
            {
                "questionId": "AvailabilityOne",
                "content": "There are several tactics to satisfy availability requirements,\n    which may be applied depending on the concrete requirement that we\n    want to satisfy.  Assuming that you want to deal with faults of type\n    \\emph{omission} in your system, which tactic is more adequate?",
                "image": [],
                "options": [
                    "Retry",
                    "Active redundancy",
                    "Ignore faulty behaviour",
                    "Ping/Echo"
                ]
            },
            {
                "questionId": "ModifiabilityOne",
                "content": "The modifiability tactic Use an Intermediary between two modules",
                "image": [],
                "options": [
                    "Has as main goal the reduction of the modules' size.",
                    "Results in the creation of a third module that does not have to change when any of the original modules are changed.",
                    "Increases the cohesion between the two modules.",
                    "Cannot be used together with the Reduce Overhead performance tactic."
                ]
            },
            {
                "questionId": "PerformanceOne",
                "content": "Consider a scenario for performance where the arrival of events is stochastic with a distribution where there are peeks of events but the arrival of events over a long period is uniform. The best tactic to apply is",
                "image": [],
                "options": [
                    "Manage sampling rate.",
                    "Limit event response.",
                    "Prioritize events.",
                    "Bound execution time."
                ]
            },
            {
                "questionId": "NginxScenariosTacticsOne",
                "content": "Consider the following excerpt from Nginx case study\n\n    \\begin{quote}\n        nginx configuration is kept in a number of plain text files which typically reside in /usr/local/etc/nginx or /etc/nginx. The main configuration file is usually called nginx.conf.         To keep it uncluttered, parts of the configuration can be put in separate files which can be automatically included in the main one. However, it should be noted here that nginx         does not currently support Apache-style distributed configurations (i.e., .htaccess files). All of the configuration relevant to nginx web server behavior should reside in a         centralized set of configuration files.\n    \\end{quote}\n    \n    When comparing the configuration in Nginx with the configuration in Apache we can say that",
                "image": [],
                "options": [
                    "Due to its configuration strategy Apache has better performance",
                    "Performance was the main concern of the design of the configuration strategy in Nginx",
                    "Apache emphasizes the usability quality for system administrators by allowing to split the configuration by different files",
                    "Nginx emphasizes the usability quality for system administrators by reducing the number or errors"
                ]
            },
            {
                "questionId": "ComponentConnectorOne",
                "content": "Suppose that there are certain performance requirements for a\n  system, and that you want to show to the stakeholders of the system\n  that the software architecture that you designed meet those\n  requirements. To do this",
                "image": [],
                "options": [
                    "It makes no sense to use views of the module viewtype, as\n        they give only a static view of the system",
                    "You should use only views of the component-and-connector\n        viewtype, which describe the dynamic aspects of the system",
                    "You may need to use views of the three viewtypes",
                    "The only views that are relevant to performance\n        requirements are views of the Deployment style"
                ]
            },
            {
                "questionId": "RepositoryClientServerOne",
                "content": "Suppose that you are designing the software architecture for an\n    enterprise application that has requirements about the maximum\n    response time for a certain type of requests.  Moreover, assume\n    that those requests arrive at the system periodically, whereas the\n    remaining requests have an unpredictable frequency.  Finally,\n    assume that your system will have a single server that will be\n    executing on a predefined machine with a 12-core AMD processor.\n    To show to the stakeholders that your system satisfies the\n    performance requirements you have to use views of which\n    architectural style?",
                "image": [],
                "options": [
                    "The Work Assignment style",
                    "The Client-Server style",
                    "The Deployment style",
                    "The Communicating Processes style"
                ]
            },
            {
                "questionId": "TiersDynamicreconfigurationPeertopeerPublishsubscribeOne",
                "content": "Typically, Instant Messaging clients have a window to list the contacts of the user, and\n      show in that window the status of each contact (whether it is available, unavailable, busy,\n      etc). Given that the status of a contact may be changed at any time, and that the contact's\n      status is given by the Instant Messaging application of that contact, which architectural\n      style represents best the interaction pattern between these components?",
                "image": [],
                "options": [
                    "The Shared Data style",
                    "The Pipes-and-filters style",
                    "The Publish-subscribe style",
                    "The Client-Server style"
                ]
            },
            {
                "questionId": "SOAPipesFiltersOne",
                "content": "Imagine that you want to develop a system that is to be used in email servers, whose goal\n      is to allow changing the emails that are received by the server (for example, to remove\n      potential viruses or URLs linking to phishing sites). The goal is that the server feeds each\n      received email through this system before processing it (e.g., forward it to another server,\n      or store it locally). The system is supposed to be easily modifiable, to support new types\n      of email transformations. Which architectural style is the most adequate to satisfy these\n      requirements?",
                "image": [],
                "options": [
                    "The Peer-to-Peer style",
                    "The Pipes-and-filters style",
                    "The Client-Server style",
                    "The Publish-subscribe style"
                ]
            },
            {
                "questionId": "AllocationOne",
                "content": "Consider the work assignment architectural style of the allocation viewtype.",
                "image": [],
                "options": [
                    "It assigns components and connectors to people and teams.",
                    "It is useful for the project managers.",
                    "It does not consider the software that is outsourced.",
                    "It allows to estimate the cost of hardware."
                ]
            },
            {
                "questionId": "nginxOne",
                "content": "Web servers implemented in Java, such as the Tomcat web server,\n  typically use a thread-based model for processing requests.  That\n  is, they process each request on a different thread within the same\n  JVM process, rather than on a different process.  One of the reasons\n  for this is that",
                "image": [],
                "options": [
                    "Launching a new process for processing each request is too expensive",
                    "Using threads ensures that the processing of each request is\n      isolated from the remaining requests",
                    "With this approach they may use all of the available cores\n      in multiprocessor machines",
                    "They are used for implementing enterprise applications that\n      typically have complex domain logic and, by using threads, it is\n      easier to reuse code from one request to another"
                ]
            },
            {
                "questionId": "ContinousIntegrationViewsOne",
                "content": "Consider the following architectural view of the Pony-Build system as described in the Continous integration case study\n      \n    \\begin{center}\n        \\includegraphics[width=100mm]{../PonyBuildArchitecture}\n    \\end{center}\n    \n    According to this view the quality of performance is achieved through",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/exams/PonyBuildArchitecture.png",
                        "width": 100
                    }
                ],
                "options": [
                    "An increase resource efficiency tactic",
                    "A schedule resources tactic",
                    "A multiple copies of computation tactic",
                    "A manage sampling rate tactic"
                ]
            },
            {
                "questionId": "InfinispanViewsOne",
                "content": "In the Infinispan case study can be read\n      \n      \\begin{quote}\n         Infinispan's core data structures make use of software transactional memory techniques for concurrent access to shared data. This minimizes the need for explicit locks, mutexes and other forms of synchronization, preferring techniques like compare-and-set operations within a loop to achieve correctness when updating shared data structures. Such techniques have been proven to improve CPU utilization in multi-core and SMP systems, and despite the increased code complexity, has paid off in overall performance when under load.\n      \\end{quote}\n      \n      These properties of Infinispan can be represented by",
                "image": [],
                "options": [
                    "A decomposition view which represent the module for compare-and-set",
                    "A client-server view with non-blocking connectors for the interaction between threads and core data structures",
                    "A communicating-processes view with non-blocking connectors for the interaction between threads and core data structures",
                    "A deployment view which allocate threads to the multi-cores"
                ]
            },
            {
                "questionId": "ScalableArchitectureOne",
                "content": "Consider the following excerpt about the Scalable web architecture and distributed systems case study about two different possible implementations of a global cache\n    \n    \\begin{quote}\n         The majority of applications leveraging global caches tend to use the first type, where the cache itself manages eviction and fetching data to prevent a flood of requests for the same data from the clients. However, there are some cases where the second implementation makes more sense. For example, if the cache is being used for very large files, a low cache hit percentage would cause the cache buffer to become overwhelmed with cache misses; in this situation it helps to have a large percentage of the total data set (or hot data set) in the cache.     \\end{quote}",
                "image": [],
                "options": [
                    "The solution where the application is responsible for the eviction has better availability",
                    "The solution where the cache is responsible for the eviction has better availability",
                    "The solution where the application is responsible for the eviction has better modifiability",
                    "The solution where the cache is responsible for the eviction has better performance"
                ]
            },
            {
                "questionId": "GraphiteScenarioTacticsOne",
                "content": "In the Graphite system the component \\emph{carbon} provides to \\emph{webapp} components an access interface to the \\emph{buffers} in order to improve the quality of",
                "image": [],
                "options": [
                    "Performance",
                    "Interoperability",
                    "Reliability",
                    "Security"
                ]
            },
            {
                "questionId": "GraphiteViewsOne",
                "content": "In Graphite system  the \\emph{receiver} and the \\emph{writer threads} support asynchronous writing of metrics to optimize disk accesses. The interaction between these two components follow the architectural style",
                "image": [],
                "options": [
                    "Client-server",
                    "Communicating Processes",
                    "Repository",
                    "Pipes-and-Filters"
                ]
            },
            {
                "questionId": "ArchitectureInfluenceCycleOne",
                "content": "Consider the following sentence by Melvin Conways, also known as Conway's Law\n    \n    \\begin{quote}\n        organizations which design systems ... are constrained to produce designs which are copies of the communication structures of these organizations\n    \\end{quote}",
                "image": [],
                "options": [
                    "This law highlights the impact of the business on the architecture",
                    "This law can be seen as an example of the architecture influence cycle",
                    "This law states that architectures impact on the structure of the organization",
                    "This law does not apply to the design of architectures"
                ]
            },
            {
                "questionId": "AdventureBuilderOne",
                "content": "Consider the following architectural view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{../AdventureBuilderDeployment}\n    \\end{center}\n    \n    According to this view the stakeholders can see that the Adventure Builder system",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/exams/AdventureBuilderDeployment.png",
                        "width": 80
                    }
                ],
                "options": [
                    "Becomes unavailable for clients if there is a fault in the hardware of web server (srv-web)",
                    "Becomes unavailable for clients if there is a fault in the hardware of database server (srv-db)",
                    "Becomes unavailable for clients if there is a fault in the hardware of service server (srv-opc)",
                    "Becomes unavailable for banks if there is a fault in the hardware of service server (srv-opc)"
                ]
            },
            {
                "questionId": "RequirementsOne",
                "content": "Frank Buschmann cites the characterization Marquardt does of Performitis:\n        \n    \\begin{quote}\n        Each part of the system is directly influenced by local performance tuning measures. There is no global performance strategy, or it ignores other qualities of the system as testability and maintainability.\n    \\end{quote}\n    \n    From this problem you can conclude that:",
                "image": [],
                "options": [
                    "Performance is a quality that you have to address at the end of the development process",
                    "There is no system which can have good performance and be easily maintainable",
                    "We have to distinguish architectural performance from opportunistic performance",
                    "The system performance quality has impact on the performance of the execution of tests"
                ]
            },
            {
                "questionId": "ArchitectureDefinitionOne",
                "content": "Consider that a software development team uses an agile methodology\n        such as XP (Extreme Programming), where no documentation is\n        produced.  Then, the systems developed by that team",
                "image": [],
                "options": [
                    "Typically have a software architecture that results\n          from the common knowledge about the system that is shared among\n          the team members",
                    "Do not have a software architecture, because in agile\n          methodologies there is no architectural design phase",
                    "Do not have a software architecture, because the practice of\n          refactoring allows changing every part of the system easily",
                    "May have a software architecture, but that architecture is\n          not known because it was neither designed nor documented"
                ]
            },
            {
                "questionId": "ScenariosTacticsOne",
                "content": "As part of the process of creating an architecture, we talked about\n  a framework for capturing some of the requirements for a system.  In\n  this context, \\textbf{concrete scenarios} are used for",
                "image": [],
                "options": [
                    "Describing what are the qualities that the system should possess",
                    "Describing a set of steps that a user of the system must\n      perform to accomplish some task",
                    "Describing a use case for the system that makes clear what\n    should be the system's responses to each of the user's inputs",
                    "Describing the system's features by way of different\n    usage scenarios for it, in which users play the role of actors"
                ]
            },
            {
                "questionId": "ModuleComponentOne",
                "content": "Consider the Figure that describes the use of\n    caches in web services.  \n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{../RequestNodeCache}\n    \\end{center}\n    \n    In that Figure, there is a\n    rectangle with the name \\emph{Cache} within another rectangle with\n    the name \\emph{Request Node}.  Taking into account the description\n    made in the text and the goal of that Figure, those rectangles\n    correspond to which type of software elements?",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/exams/RequestNodeCache.png",
                        "width": 80
                    }
                ],
                "options": [
                    "They are both modules",
                    "They are both components",
                    "The \\emph{Request Node} is a component and the\n      \\emph{Cache} is a module",
                    "The \\emph{Request Node} is a module and the \\emph{Cache}\n      is a component"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2015/exams/20160126Exam/exame-20160126-companion-A.tex",
        "quizTitle": "..-data-2015-exams-20160126Exam-exame-20160126-companion-A",
        "questions": [
            {
                "questionId": "ArchitectureInfluenceCycleTwo",
                "content": "Designing the software architecture for a complex system",
                "image": [],
                "options": [
                    "Is useful only if done (even if only partially) before the\n         system's implementation is concluded, given that the architecture\n        is used for restricting the implementation",
                    "Is useful only if done (even if only partially) before the\n        system's implementation is concluded, because if the system is\n        already implemented, its implementation uniquely determines the\n        architecture",
                    "Is useful only if done (even if only partially) before the\n        system passes all of the acceptance tests by the client, given\n        that no more requirements changes will take place after that time",
                    "Is useful even if the implementation is concluded and the\n        system has entered the maintenance phase"
                ]
            },
            {
                "questionId": "RequirementsTwo",
                "content": "The architecturally significant requirements are important in the process of creating\n  the software architecture for a system because they are",
                "image": [],
                "options": [
                    "The most important requirements (both functional and\n      qualities) that the system must achieve",
                    "The components that manage the communication between the\n      remaining elements in the system",
                    "The stakeholders that drive the development of the system",
                    "The tactics that satisfy the most important requirements for\n      the system"
                ]
            },
            {
                "questionId": "ArchitectureDefinitionTwo",
                "content": "The software architecture of a system",
                "image": [],
                "options": [
                    "Depends mostly on the system's functional requirements",
                    "Depends more on the architect's experience than on anything else",
                    "Should not depend on the skills of the developing team",
                    "None of the above"
                ]
            },
            {
                "questionId": "AdventureBuilderTwo",
                "content": "Consider the following architectural view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{../AdventureBuilderComponentConector}\n    \\end{center}\n    \n    In this component-and-connector view the interactions the interactions between components follow the architectural style(s)",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/exams/AdventureBuilderComponentConector.png",
                        "width": 120
                    }
                ],
                "options": [
                    "Communicating processes",
                    "Communicating processes and shared-data",
                    "Communicating processes, shared-data and service-oriented architecture",
                    "Communicating processes, shared-data, service-oriented architecture, and peer-to-peer"
                ]
            },
            {
                "questionId": "ModuleComponentTwo",
                "content": "Which of the following phrases best describe the relationship\n    between modules and components?",
                "image": [],
                "options": [
                    "A module may contain code from different components",
                    "A component may execute code from different modules",
                    "A module may execute code from different components",
                    "A component may contain code from different modules"
                ]
            },
            {
                "questionId": "ScenariosTacticsTwo",
                "content": "General scenarios play an important role in the development of a software architecture\n    because",
                "image": [],
                "options": [
                    "They describe general requirements that all systems should try to satisfy",
                    "They allow us to build a more robust architecture that satisfies less specific\n        requirements, which address a wider range of situations that may happen in\n        the system",
                    "They identify the most important requirements that the system should satisfy",
                    "They guide us in the requirement elicitation process with the system's stakeholders"
                ]
            },
            {
                "questionId": "AvailabilityTwo",
                "content": "There are several tactics to satisfy availability requirements,\n    which may be applied depending on the concrete requirement that we\n    want to satisfy.  Assuming that you want to detect faults of type\n    \\emph{response} in your system, which tactic is more adequate?",
                "image": [],
                "options": [
                    "Ping/Echo",
                    "Heartbeat",
                    "Voting",
                    "Removal from Service"
                ]
            },
            {
                "questionId": "ModifiabilityTwo",
                "content": "Consider the following scenario: \\emph{A system administrator simultaneously launches several instances of the system, each one using a different database, and is able to do it in less than 10 minutes.}",
                "image": [],
                "options": [
                    "This is a performance scenario because the stimulus is an input, \\emph{launches several instances of the system}.",
                    "This is a modifiability scenario which has a defer binding tactic.",
                    "This is not a modifiability scenario because the source of the stimulus cannot be a system administrator.",
                    "This is a modifiability scenario and its environment design time."
                ]
            },
            {
                "questionId": "NginxScenariosTacticsTwo",
                "content": "Web servers typically receive requests from different users\n  concurrently (that is, either different users make requests\n  simultaneously or they make them fast enough that it is not possible\n  for the web server to answer one request from one user before\n  receiving another request from another user).  To process all the\n  requests, web servers may use different implementation strategies.\n  Assuming that we want to develop a web server to serve only static\n  pages with more or less the same size to a set of clients on the\n  same LAN network as the server, which of the following strategies\n  would be better?",
                "image": [],
                "options": [
                    "Launch a new process for processing each request",
                    "Spawn a new thread for processing each request",
                    "Put the requests into a queue and schedule their processing",
                    "Buy a server with high processing power"
                ]
            },
            {
                "questionId": "PerformanceTwo",
                "content": "The two basic contributors for the response time are the processing time and the blocking time. Which tactic for performance may reduce the blocking time",
                "image": [],
                "options": [
                    "Manage sampling rate.",
                    "Limit event response.",
                    "Prioritize events.",
                    "Maintain multiple copies of computation."
                ]
            },
            {
                "questionId": "DesigningArchitectureTwo",
                "content": "During the different steps on how to create an architecture, the precise specification of architecture quality attributes is initially relevant to",
                "image": [],
                "options": [
                    "Make a business case for the system",
                    "Understand the architecturally significant requirements",
                    "The system design",
                    "Documenting and communicating the architecture"
                ]
            },
            {
                "questionId": "ContinousIntegrationScenariosTacticsTwo",
                "content": "In the Continous integration case study can be read about Jenkins\n      \n      \\begin{quote}\n          It takes advantage of the JUnit XML standard for unit test and code coverage reporting to integrate reports from a variety of test tools. Jenkins originated with Sun, but is very widely used and has a robust open-source community associated with it.\n      \\end{quote}\n      \n      The quality of Jenkins that is emphasized in the above sentence is",
                "image": [],
                "options": [
                    "Modifiability",
                    "Availability",
                    "Testability",
                    "Interoperability"
                ]
            },
            {
                "questionId": "InfinispanScenariosTacticsTwo",
                "content": "In the Infinispan case study can be read\n      \n      \\begin{quote}\n          Infinispan supports several pluggable cache stores-adapters that can be used to persist data to disk or any form of secondary storage. The current default implementation is a simplistic hash bucket and linked list implementation, where each hash bucket is represented by a file on the filesystem. While easy to use and configure, this isn't the best-performing implementation.\n      \\end{quote}\n      \n      The main architectural quality addressed in the above excerpt is",
                "image": [],
                "options": [
                    "Performance",
                    "Modifiability",
                    "Usability",
                    "Security"
                ]
            },
            {
                "questionId": "ModuleViewtypeTwo",
                "content": "Consider the Uses architectural style of the Module viewtype",
                "image": [],
                "options": [
                    "Cycles in the uses relation between modules are a good sign, because it indicates that several modules should be tested together.",
                    "The project manager uses this view to get advice on the incremental development of the system.",
                    "The uses relation should be applied to the coarse-grained modules, because it allows to identify circular dependences.",
                    "There isn't any relation with the layered architectural style because the allowed-to-use relation is more generic."
                ]
            },
            {
                "questionId": "UsesGeneralizationTwo",
                "content": "Suppose that in the process of designing a system's software architecture you come to\n    the conclusion that there are uses relations in both directions in almost all of the system's\n    modules. This means that",
                "image": [],
                "options": [
                    "There is a high level of communication between the several modules, and this\n        will cause the system to have a low performance",
                    "It is not possible to install the system in more than one machine",
                    "It is not possible to develop and to test the system incrementally",
                    "It is very hard to explain what the system does, because we need to understand\n        all the execution fluxes"
                ]
            },
            {
                "questionId": "LayeredAspectsDataModelTwo",
                "content": "Suppose that you are implementing a module in a system that has a two layered architecture.\n     Knowing that your module belongs to the upper layer (assuming the usual notation\n     for the layer style), this means that you",
                "image": [],
                "options": [
                    "Can use the operations defined in any of the system's modules",
                    "Can use the operations defined in the lower layer, but not the ones defined in\n         the upper layer",
                    "Can use the operations defined in the upper layer, but not the ones defined in\n         the lower layer",
                    "Should use some operation defined in the lower layer"
                ]
            },
            {
                "questionId": "ComponentConnectorTwo",
                "content": "The connectors on component-and-connector view",
                "image": [],
                "options": [
                    "Represent the network infrastructure that allows components to communicate\n        with each other",
                    "May, on another view of the system, be represented by a set of components\n        and connectors",
                    "Represent the dependency relations that exist among the various components",
                    "Represent the control flow during a execution of the system"
                ]
            },
            {
                "questionId": "RepositoryClientServerTwo",
                "content": "The email system is composed of various types of components\n    playing different roles.  For example, to send an email, a user\n    uses a \\emph{mail user agent} (MUA), to compose his message and\n    send it.  To send the message, the MUA typically connects to a\n    \\emph{mail transfer agent} (MTA) that receives the message,\n    analyzes the message's headers to determine the recipients and,\n    after querying the DNS system to determine the MTA responsible for\n    each recipient, it connects to the MTAs responsible for the\n    destination addresses to deliver the message.  Each of these MTAs\n    receives the message and stores it locally or forwards it to\n    others MTAs until the message reaches its destination MTA.\n    The recipient user of the message will then use his MUA to see the\n    messages that were sent to him.  To do it, the MUA connects to an\n    IMAP or POP server to obtain the user's messages.  Those IMAP and\n    POP servers obtain the messages for a user by reading the messages\n    stored by the MTA.\n\n    Given this simplified description of the operation of the email\n    system, which of the following architectural styles is more\n    appropriate to represent the pattern of interaction between the\n    MTA and the servers IMAP and POP?",
                "image": [],
                "options": [
                    "The Peer-to-Peer style",
                    "The Client-Server style",
                    "The Shared-Data style",
                    "The Publish-subscribe style"
                ]
            },
            {
                "questionId": "TiersDynamicreconfigurationPeertopeerPublishsubscribeTwo",
                "content": "Consider the following excerpt from the tutorial on the Hadoop\n    MapReduce:\n\n    \\begin{quote}\n      Hadoop MapReduce is a software framework for easily writing\n      applications which process vast amounts of data (multi-terabyte\n      data-sets) in-parallel on large clusters (thousands of nodes) of\n      commodity hardware in a reliable, fault-tolerant manner.\n\n      A MapReduce job usually splits the input data-set into\n      independent chunks which are processed by the map tasks in a\n      completely parallel manner.  The framework sorts the outputs of\n      the maps, which are then input to the reduce tasks. Typically\n      both the input and the output of the job are stored in a\n      file-system.  The framework takes care of scheduling tasks,\n      monitoring them and re-executes the failed tasks.\n    \\end{quote}\n\n    Which architectural style of the component-and-connector viewtype\n    is more adequate to describe how the MapReduce works, taking into\n    account its main advantages in solving a problem?",
                "image": [],
                "options": [
                    "The Shared data style",
                    "The Pipes-and-filters style",
                    "The Peer-to-Peer style",
                    "The Communicating Processes style"
                ]
            },
            {
                "questionId": "SOAPipesFiltersTwo",
                "content": "Suppose that you are developing the software architecture of a new\n    system for an organization composed of several organizational\n    units, each one with its own information systems, which have been\n    developed independently of each other over the course of several\n    years and depending on the particular needs of each unit.  Your\n    system has the goal of integrating the various existing systems,\n    providing in this way not only a unified view of how the\n    organization works, but also allowing the creation of new\n    processes within the organization that involve more than one unit.\n    Which architectural style is better suited to design such a\n    system?",
                "image": [],
                "options": [
                    "The Decomposition style",
                    "The Client-Server style",
                    "The Service Oriented Architecture style",
                    "The Communicating Processes style"
                ]
            },
            {
                "questionId": "AllocationTwo",
                "content": "Consider the deployment architectural style of the allocation viewtype.",
                "image": [],
                "options": [
                    "It assigns modules to the hardware.",
                    "It cannot assign software elements to virtual servers because they are not hardware.",
                    "For each set of software elements there is a single possible assignment to hardwre.",
                    "It is useful for system administrators."
                ]
            },
            {
                "questionId": "nginxTwo",
                "content": "In Nginx, given that a \\emph{worker} processes various requests during its\n    life, how does it do it?",
                "image": [],
                "options": [
                    "By interleaving the various processing phases of each\n      request in a sequential process",
                    "By executing in parallel each of the phases of the\n      pipeline corresponding to the processing of a request",
                    "By executing in parallel the processing of the various requests",
                    "By processing completely each request before moving to\n      the next one, in a sequential process"
                ]
            },
            {
                "questionId": "GraphiteViewsTwo",
                "content": "A high-level component-and-connect view of Graphite system can be designed using only the architectural style(s)",
                "image": [],
                "options": [
                    "Shared-data and Communicating-Processes",
                    "Communicating-Processes",
                    "Tiers",
                    "Client-Server and Shared-data"
                ]
            },
            {
                "questionId": "ContinousIntegrationViewsTwo",
                "content": "In the Continous integration case study can be read about future features for Pony-Build\n      \n      \\begin{quote}\n          Currently, each continuous integration system reinvents the wheel by providing its own build configuration language, which is manifestly ridiculous; there are fewer than a dozen commonly used build systems, and probably only a few dozen test runners. Nonetheless, each CI system has a new and different way of specifying the build and test commands to be run. In fact, this seems to be one of the reasons why so many basically identical CI systems exist: each language and community implements their own configuration system, tailored to their own build and test systems, and then layers on the same set of features above that system. Therefore, building a domain-specific language (DSL) capable of representing the options used by the few dozen commonly used build and test tool chains would go a long way toward simplifying the CI landscape.\n      \\end{quote}\n      \n      Suppose that you are the architect that has to change the architecture to accomodate this new feature. Therefore, as an architect",
                "image": [],
                "options": [
                    "You need to change the decomposition view to represent modules with the responsibilities associated with the DSL",
                    "You need to design a client-server view representing the interaction between the DSL and the servers that execute its commands",
                    "You need to design an implementation view to allow system administrators configure the builds",
                    "You do not need to change the views because the DSL does not have any architectural impact"
                ]
            },
            {
                "questionId": "InfinispanViewsTwo",
                "content": "In the Infinispan case study can be read\n      \n      \\begin{quote}\n         Infinispan uses its own serialization scheme, where full class definitions are not written to the stream. Instead, magic numbers are used for known types where each known type is represented by a single byte. This greatly improves not just serialization and de-serialization speed qualities, but also produces a much more compact byte stream for transmission across a network. An externalizer is registered for each known data type, registered against a magic number. This externalizer contains the logic to convert object to bytes and vice versa.\n      \\end{quote}\n      \n      These properties of Infinispan can be represented by",
                "image": [],
                "options": [
                    "A uses view which represent modules for the externalizers",
                    "A client-server view which represent the byte stream for transmission across a network",
                    "A connector that has the serialization and de-serialization speed qualities",
                    "A decomposition view which contains the serialization/de-serilization modules"
                ]
            },
            {
                "questionId": "WebTwoTwo",
                "content": "One of the evolutions in the development of web applications was\n    the appearance of \\emph{mashups}, which are described in Wikipedia\n    as follows:\n\n    \\begin{quote}\n      In web development, a mashup is a web page or application that\n      uses and combines data, presentation or functionality from two\n      or more sources to create new services.\n    \\end{quote}\n\n    Knowing that the sources used by \\emph{mashups} do not know about\n    the existence of the \\emph{mashups} and that they change\n    frequently, forcing the adaptation of the \\emph{mashups} to\n    accomodate those changes, what is the best architecture to\n    minimize the effects of those changes?",
                "image": [],
                "options": [
                    "A \\emph{web services} architecture",
                    "A Client-Server architecture, where the \\emph{mashup}\n      is the client and the various sources are the servers",
                    "A layered architecture, where the access to the various\n      sources is the responsibility of the bottommost layer",
                    "A Publish-Subscribe architecture, where the various\n      sources publish events with the changes made and the\n      \\emph{mashup} subscribes those events"
                ]
            },
            {
                "questionId": "MicroservicesArchitectureTwo",
                "content": "Consider the following figure depicting two different architectures for web applications\n    \n    \\begin{center}\n        \\includegraphics[width=140mm]{../Microservices}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/exams/Microservices.png",
                        "width": 140
                    }
                ],
                "options": [
                    "The main quality of the system in the right part of the figure is scalability",
                    "The main quality of the system in the left part of the figure is scalability",
                    "The main quality of the system in the right part of the figure is ease of development",
                    "The main quality of the system in the left part of the figure is to promote cross-functional teams"
                ]
            },
            {
                "questionId": "AmazonTwo",
                "content": "Consider the following excerpt about the Amazon system\n    \n    \\begin{quote}\n        Mainly, I think service orientation has helped us there. The stored data formats are decoupled from the format in which you communicate data items. If there is no need for sharing schemas of the actual storage layout, you can focus on making sure that the service interfaces can evolve in a way that allows you to handle variations of data formats. You could dictate a rigorous single format, but that would not be realistic if you are in Amazon's platform business. We have to make sure that the platform can be extended by our customers to meet their needs.\n    \\end{quote}\n    \n    The architectural style that better represents these aspects of the Amazon architecture is",
                "image": [],
                "options": [
                    "Data model to express the stored data formats",
                    "Decomposition to express the services interfaces",
                    "Aspects to express the evolution of service interfaces",
                    "Publish-subscribe to express how data is shared between services"
                ]
            },
            {
                "questionId": "ScalableArchitectureTwo",
                "content": "Consider the following excerpt about the Scalable web architecture and distributed systems case study\n    \n    \\begin{quote}\n         Employing such a strategy maximizes data locality for the requests, which can result in decreased request latency. For example, let's say a bunch of nodes request parts of B: partB1, partB2, etc. We can set up our proxy to recognize the spatial locality of the individual requests, collapsing them into a single request and returning only bigB, greatly minimizing the reads from the data origin.\n    \\end{quote}\n    \n    The quality that is achieved with this tactic is",
                "image": [],
                "options": [
                    "Performance because all requests will be processed faster",
                    "Performance because it allows the processing of more requests per unit of time",
                    "Availability because even if PartB1 is not available partB2 can be provided",
                    "Reliability because a single correct read is used to responde to several requests"
                ]
            },
            {
                "questionId": "GraphiteScenarioTacticsTwo",
                "content": "Which quality, or qualities, of the Graphite system are described by the sentence: \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL.}",
                "image": [],
                "options": [
                    "Usability and Performance",
                    "Usability",
                    "Performance",
                    "Testability"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2015/exams/20160126Exam/exame-20160126-companion-B.tex",
        "quizTitle": "..-data-2015-exams-20160126Exam-exame-20160126-companion-B",
        "questions": [
            {
                "questionId": "SOAPipesFiltersTwo",
                "content": "Suppose that you are developing the software architecture of a new\n    system for an organization composed of several organizational\n    units, each one with its own information systems, which have been\n    developed independently of each other over the course of several\n    years and depending on the particular needs of each unit.  Your\n    system has the goal of integrating the various existing systems,\n    providing in this way not only a unified view of how the\n    organization works, but also allowing the creation of new\n    processes within the organization that involve more than one unit.\n    Which architectural style is better suited to design such a\n    system?",
                "image": [],
                "options": [
                    "The Decomposition style",
                    "The Client-Server style",
                    "The Service Oriented Architecture style",
                    "The Communicating Processes style"
                ]
            },
            {
                "questionId": "AllocationTwo",
                "content": "Consider the deployment architectural style of the allocation viewtype.",
                "image": [],
                "options": [
                    "It assigns modules to the hardware.",
                    "It cannot assign software elements to virtual servers because they are not hardware.",
                    "For each set of software elements there is a single possible assignment to hardwre.",
                    "It is useful for system administrators."
                ]
            },
            {
                "questionId": "nginxTwo",
                "content": "In Nginx, given that a \\emph{worker} processes various requests during its\n    life, how does it do it?",
                "image": [],
                "options": [
                    "By interleaving the various processing phases of each\n      request in a sequential process",
                    "By executing in parallel each of the phases of the\n      pipeline corresponding to the processing of a request",
                    "By executing in parallel the processing of the various requests",
                    "By processing completely each request before moving to\n      the next one, in a sequential process"
                ]
            },
            {
                "questionId": "ContinousIntegrationViewsTwo",
                "content": "In the Continous integration case study can be read about future features for Pony-Build\n      \n      \\begin{quote}\n          Currently, each continuous integration system reinvents the wheel by providing its own build configuration language, which is manifestly ridiculous; there are fewer than a dozen commonly used build systems, and probably only a few dozen test runners. Nonetheless, each CI system has a new and different way of specifying the build and test commands to be run. In fact, this seems to be one of the reasons why so many basically identical CI systems exist: each language and community implements their own configuration system, tailored to their own build and test systems, and then layers on the same set of features above that system. Therefore, building a domain-specific language (DSL) capable of representing the options used by the few dozen commonly used build and test tool chains would go a long way toward simplifying the CI landscape.\n      \\end{quote}\n      \n      Suppose that you are the architect that has to change the architecture to accomodate this new feature. Therefore, as an architect",
                "image": [],
                "options": [
                    "You need to change the decomposition view to represent modules with the responsibilities associated with the DSL",
                    "You need to design a client-server view representing the interaction between the DSL and the servers that execute its commands",
                    "You need to design an implementation view to allow system administrators configure the builds",
                    "You do not need to change the views because the DSL does not have any architectural impact"
                ]
            },
            {
                "questionId": "InfinispanViewsTwo",
                "content": "In the Infinispan case study can be read\n      \n      \\begin{quote}\n         Infinispan uses its own serialization scheme, where full class definitions are not written to the stream. Instead, magic numbers are used for known types where each known type is represented by a single byte. This greatly improves not just serialization and de-serialization speed qualities, but also produces a much more compact byte stream for transmission across a network. An externalizer is registered for each known data type, registered against a magic number. This externalizer contains the logic to convert object to bytes and vice versa.\n      \\end{quote}\n      \n      These properties of Infinispan can be represented by",
                "image": [],
                "options": [
                    "A uses view which represent modules for the externalizers",
                    "A client-server view which represent the byte stream for transmission across a network",
                    "A connector that has the serialization and de-serialization speed qualities",
                    "A decomposition view which contains the serialization/de-serilization modules"
                ]
            },
            {
                "questionId": "WebTwoTwo",
                "content": "One of the evolutions in the development of web applications was\n    the appearance of \\emph{mashups}, which are described in Wikipedia\n    as follows:\n\n    \\begin{quote}\n      In web development, a mashup is a web page or application that\n      uses and combines data, presentation or functionality from two\n      or more sources to create new services.\n    \\end{quote}\n\n    Knowing that the sources used by \\emph{mashups} do not know about\n    the existence of the \\emph{mashups} and that they change\n    frequently, forcing the adaptation of the \\emph{mashups} to\n    accomodate those changes, what is the best architecture to\n    minimize the effects of those changes?",
                "image": [],
                "options": [
                    "A \\emph{web services} architecture",
                    "A Client-Server architecture, where the \\emph{mashup}\n      is the client and the various sources are the servers",
                    "A layered architecture, where the access to the various\n      sources is the responsibility of the bottommost layer",
                    "A Publish-Subscribe architecture, where the various\n      sources publish events with the changes made and the\n      \\emph{mashup} subscribes those events"
                ]
            },
            {
                "questionId": "MicroservicesArchitectureTwo",
                "content": "Consider the following figure depicting two different architectures for web applications\n    \n    \\begin{center}\n        \\includegraphics[width=140mm]{../Microservices}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/exams/Microservices.png",
                        "width": 140
                    }
                ],
                "options": [
                    "The main quality of the system in the right part of the figure is scalability",
                    "The main quality of the system in the left part of the figure is scalability",
                    "The main quality of the system in the right part of the figure is ease of development",
                    "The main quality of the system in the left part of the figure is to promote cross-functional teams"
                ]
            },
            {
                "questionId": "AmazonTwo",
                "content": "Consider the following excerpt about the Amazon system\n    \n    \\begin{quote}\n        Mainly, I think service orientation has helped us there. The stored data formats are decoupled from the format in which you communicate data items. If there is no need for sharing schemas of the actual storage layout, you can focus on making sure that the service interfaces can evolve in a way that allows you to handle variations of data formats. You could dictate a rigorous single format, but that would not be realistic if you are in Amazon's platform business. We have to make sure that the platform can be extended by our customers to meet their needs.\n    \\end{quote}\n    \n    The architectural style that better represents these aspects of the Amazon architecture is",
                "image": [],
                "options": [
                    "Data model to express the stored data formats",
                    "Decomposition to express the services interfaces",
                    "Aspects to express the evolution of service interfaces",
                    "Publish-subscribe to express how data is shared between services"
                ]
            },
            {
                "questionId": "ScalableArchitectureTwo",
                "content": "Consider the following excerpt about the Scalable web architecture and distributed systems case study\n    \n    \\begin{quote}\n         Employing such a strategy maximizes data locality for the requests, which can result in decreased request latency. For example, let's say a bunch of nodes request parts of B: partB1, partB2, etc. We can set up our proxy to recognize the spatial locality of the individual requests, collapsing them into a single request and returning only bigB, greatly minimizing the reads from the data origin.\n    \\end{quote}\n    \n    The quality that is achieved with this tactic is",
                "image": [],
                "options": [
                    "Performance because all requests will be processed faster",
                    "Performance because it allows the processing of more requests per unit of time",
                    "Availability because even if PartB1 is not available partB2 can be provided",
                    "Reliability because a single correct read is used to responde to several requests"
                ]
            },
            {
                "questionId": "GraphiteScenarioTacticsTwo",
                "content": "Which quality, or qualities, of the Graphite system are described by the sentence: \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL.}",
                "image": [],
                "options": [
                    "Usability and Performance",
                    "Usability",
                    "Performance",
                    "Testability"
                ]
            },
            {
                "questionId": "GraphiteViewsTwo",
                "content": "A high-level component-and-connect view of Graphite system can be designed using only the architectural style(s)",
                "image": [],
                "options": [
                    "Shared-data and Communicating-Processes",
                    "Communicating-Processes",
                    "Tiers",
                    "Client-Server and Shared-data"
                ]
            },
            {
                "questionId": "ArchitectureInfluenceCycleTwo",
                "content": "Designing the software architecture for a complex system",
                "image": [],
                "options": [
                    "Is useful only if done (even if only partially) before the\n         system's implementation is concluded, given that the architecture\n        is used for restricting the implementation",
                    "Is useful only if done (even if only partially) before the\n        system's implementation is concluded, because if the system is\n        already implemented, its implementation uniquely determines the\n        architecture",
                    "Is useful only if done (even if only partially) before the\n        system passes all of the acceptance tests by the client, given\n        that no more requirements changes will take place after that time",
                    "Is useful even if the implementation is concluded and the\n        system has entered the maintenance phase"
                ]
            },
            {
                "questionId": "RequirementsTwo",
                "content": "The architecturally significant requirements are important in the process of creating\n  the software architecture for a system because they are",
                "image": [],
                "options": [
                    "The most important requirements (both functional and\n      qualities) that the system must achieve",
                    "The components that manage the communication between the\n      remaining elements in the system",
                    "The stakeholders that drive the development of the system",
                    "The tactics that satisfy the most important requirements for\n      the system"
                ]
            },
            {
                "questionId": "ArchitectureDefinitionTwo",
                "content": "The software architecture of a system",
                "image": [],
                "options": [
                    "Depends mostly on the system's functional requirements",
                    "Depends more on the architect's experience than on anything else",
                    "Should not depend on the skills of the developing team",
                    "None of the above"
                ]
            },
            {
                "questionId": "AdventureBuilderTwo",
                "content": "Consider the following architectural view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{../AdventureBuilderComponentConector}\n    \\end{center}\n    \n    In this component-and-connector view the interactions the interactions between components follow the architectural style(s)",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/exams/AdventureBuilderComponentConector.png",
                        "width": 120
                    }
                ],
                "options": [
                    "Communicating processes",
                    "Communicating processes and shared-data",
                    "Communicating processes, shared-data and service-oriented architecture",
                    "Communicating processes, shared-data, service-oriented architecture, and peer-to-peer"
                ]
            },
            {
                "questionId": "ModuleComponentTwo",
                "content": "Which of the following phrases best describe the relationship\n    between modules and components?",
                "image": [],
                "options": [
                    "A module may contain code from different components",
                    "A component may execute code from different modules",
                    "A module may execute code from different components",
                    "A component may contain code from different modules"
                ]
            },
            {
                "questionId": "ScenariosTacticsTwo",
                "content": "General scenarios play an important role in the development of a software architecture\n    because",
                "image": [],
                "options": [
                    "They describe general requirements that all systems should try to satisfy",
                    "They allow us to build a more robust architecture that satisfies less specific\n        requirements, which address a wider range of situations that may happen in\n        the system",
                    "They identify the most important requirements that the system should satisfy",
                    "They guide us in the requirement elicitation process with the system's stakeholders"
                ]
            },
            {
                "questionId": "UsesGeneralizationTwo",
                "content": "Suppose that in the process of designing a system's software architecture you come to\n    the conclusion that there are uses relations in both directions in almost all of the system's\n    modules. This means that",
                "image": [],
                "options": [
                    "There is a high level of communication between the several modules, and this\n        will cause the system to have a low performance",
                    "It is not possible to install the system in more than one machine",
                    "It is not possible to develop and to test the system incrementally",
                    "It is very hard to explain what the system does, because we need to understand\n        all the execution fluxes"
                ]
            },
            {
                "questionId": "LayeredAspectsDataModelTwo",
                "content": "Suppose that you are implementing a module in a system that has a two layered architecture.\n     Knowing that your module belongs to the upper layer (assuming the usual notation\n     for the layer style), this means that you",
                "image": [],
                "options": [
                    "Can use the operations defined in any of the system's modules",
                    "Can use the operations defined in the lower layer, but not the ones defined in\n         the upper layer",
                    "Can use the operations defined in the upper layer, but not the ones defined in\n         the lower layer",
                    "Should use some operation defined in the lower layer"
                ]
            },
            {
                "questionId": "ComponentConnectorTwo",
                "content": "The connectors on component-and-connector view",
                "image": [],
                "options": [
                    "Represent the network infrastructure that allows components to communicate\n        with each other",
                    "May, on another view of the system, be represented by a set of components\n        and connectors",
                    "Represent the dependency relations that exist among the various components",
                    "Represent the control flow during a execution of the system"
                ]
            },
            {
                "questionId": "RepositoryClientServerTwo",
                "content": "The email system is composed of various types of components\n    playing different roles.  For example, to send an email, a user\n    uses a \\emph{mail user agent} (MUA), to compose his message and\n    send it.  To send the message, the MUA typically connects to a\n    \\emph{mail transfer agent} (MTA) that receives the message,\n    analyzes the message's headers to determine the recipients and,\n    after querying the DNS system to determine the MTA responsible for\n    each recipient, it connects to the MTAs responsible for the\n    destination addresses to deliver the message.  Each of these MTAs\n    receives the message and stores it locally or forwards it to\n    others MTAs until the message reaches its destination MTA.\n    The recipient user of the message will then use his MUA to see the\n    messages that were sent to him.  To do it, the MUA connects to an\n    IMAP or POP server to obtain the user's messages.  Those IMAP and\n    POP servers obtain the messages for a user by reading the messages\n    stored by the MTA.\n\n    Given this simplified description of the operation of the email\n    system, which of the following architectural styles is more\n    appropriate to represent the pattern of interaction between the\n    MTA and the servers IMAP and POP?",
                "image": [],
                "options": [
                    "The Peer-to-Peer style",
                    "The Client-Server style",
                    "The Shared-Data style",
                    "The Publish-subscribe style"
                ]
            },
            {
                "questionId": "TiersDynamicreconfigurationPeertopeerPublishsubscribeTwo",
                "content": "Consider the following excerpt from the tutorial on the Hadoop\n    MapReduce:\n\n    \\begin{quote}\n      Hadoop MapReduce is a software framework for easily writing\n      applications which process vast amounts of data (multi-terabyte\n      data-sets) in-parallel on large clusters (thousands of nodes) of\n      commodity hardware in a reliable, fault-tolerant manner.\n\n      A MapReduce job usually splits the input data-set into\n      independent chunks which are processed by the map tasks in a\n      completely parallel manner.  The framework sorts the outputs of\n      the maps, which are then input to the reduce tasks. Typically\n      both the input and the output of the job are stored in a\n      file-system.  The framework takes care of scheduling tasks,\n      monitoring them and re-executes the failed tasks.\n    \\end{quote}\n\n    Which architectural style of the component-and-connector viewtype\n    is more adequate to describe how the MapReduce works, taking into\n    account its main advantages in solving a problem?",
                "image": [],
                "options": [
                    "The Shared data style",
                    "The Pipes-and-filters style",
                    "The Peer-to-Peer style",
                    "The Communicating Processes style"
                ]
            },
            {
                "questionId": "AvailabilityTwo",
                "content": "There are several tactics to satisfy availability requirements,\n    which may be applied depending on the concrete requirement that we\n    want to satisfy.  Assuming that you want to detect faults of type\n    \\emph{response} in your system, which tactic is more adequate?",
                "image": [],
                "options": [
                    "Ping/Echo",
                    "Heartbeat",
                    "Voting",
                    "Removal from Service"
                ]
            },
            {
                "questionId": "ModifiabilityTwo",
                "content": "Consider the following scenario: \\emph{A system administrator simultaneously launches several instances of the system, each one using a different database, and is able to do it in less than 10 minutes.}",
                "image": [],
                "options": [
                    "This is a performance scenario because the stimulus is an input, \\emph{launches several instances of the system}.",
                    "This is a modifiability scenario which has a defer binding tactic.",
                    "This is not a modifiability scenario because the source of the stimulus cannot be a system administrator.",
                    "This is a modifiability scenario and its environment design time."
                ]
            },
            {
                "questionId": "NginxScenariosTacticsTwo",
                "content": "Web servers typically receive requests from different users\n  concurrently (that is, either different users make requests\n  simultaneously or they make them fast enough that it is not possible\n  for the web server to answer one request from one user before\n  receiving another request from another user).  To process all the\n  requests, web servers may use different implementation strategies.\n  Assuming that we want to develop a web server to serve only static\n  pages with more or less the same size to a set of clients on the\n  same LAN network as the server, which of the following strategies\n  would be better?",
                "image": [],
                "options": [
                    "Launch a new process for processing each request",
                    "Spawn a new thread for processing each request",
                    "Put the requests into a queue and schedule their processing",
                    "Buy a server with high processing power"
                ]
            },
            {
                "questionId": "ModuleViewtypeTwo",
                "content": "Consider the Uses architectural style of the Module viewtype",
                "image": [],
                "options": [
                    "Cycles in the uses relation between modules are a good sign, because it indicates that several modules should be tested together.",
                    "The project manager uses this view to get advice on the incremental development of the system.",
                    "The uses relation should be applied to the coarse-grained modules, because it allows to identify circular dependences.",
                    "There isn't any relation with the layered architectural style because the allowed-to-use relation is more generic."
                ]
            },
            {
                "questionId": "PerformanceTwo",
                "content": "The two basic contributors for the response time are the processing time and the blocking time. Which tactic for performance may reduce the blocking time",
                "image": [],
                "options": [
                    "Manage sampling rate.",
                    "Limit event response.",
                    "Prioritize events.",
                    "Maintain multiple copies of computation."
                ]
            },
            {
                "questionId": "DesigningArchitectureTwo",
                "content": "During the different steps on how to create an architecture, the precise specification of architecture quality attributes is initially relevant to",
                "image": [],
                "options": [
                    "Make a business case for the system",
                    "Understand the architecturally significant requirements",
                    "The system design",
                    "Documenting and communicating the architecture"
                ]
            },
            {
                "questionId": "ContinousIntegrationScenariosTacticsTwo",
                "content": "In the Continous integration case study can be read about Jenkins\n      \n      \\begin{quote}\n          It takes advantage of the JUnit XML standard for unit test and code coverage reporting to integrate reports from a variety of test tools. Jenkins originated with Sun, but is very widely used and has a robust open-source community associated with it.\n      \\end{quote}\n      \n      The quality of Jenkins that is emphasized in the above sentence is",
                "image": [],
                "options": [
                    "Modifiability",
                    "Availability",
                    "Testability",
                    "Interoperability"
                ]
            },
            {
                "questionId": "InfinispanScenariosTacticsTwo",
                "content": "In the Infinispan case study can be read\n      \n      \\begin{quote}\n          Infinispan supports several pluggable cache stores-adapters that can be used to persist data to disk or any form of secondary storage. The current default implementation is a simplistic hash bucket and linked list implementation, where each hash bucket is represented by a file on the filesystem. While easy to use and configure, this isn't the best-performing implementation.\n      \\end{quote}\n      \n      The main architectural quality addressed in the above excerpt is",
                "image": [],
                "options": [
                    "Performance",
                    "Modifiability",
                    "Usability",
                    "Security"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2015/test-1/test-11A.tex",
        "quizTitle": "..-data-2015-test-1-test-11A",
        "questions": [
            {
                "questionId": "PragmaticArchitect",
                "content": "According to Frank Buschmann in the article \\emph{Introducing the Pragmatic Architect}",
                "image": [],
                "options": [
                    "The business aspects of the system are for business architects, not the software architects.",
                    "Dealing with the technological aspects of the system should be delayed to the implementation stage of development.",
                    "The modeling of a system is not part of the software architect duties.",
                    "The level of abstraction of the system an architect works may vary."
                ]
            },
            {
                "questionId": "EarlydDecisions",
                "content": "In his article \\emph{Who Needs an Architect?} Martin Fowler refers to the following architecture definition\n        \n    \\begin{quote}\n        \\emph{architecture is the set of design decisions that must be made early in a project}\n    \\end{quote}",
                "image": [],
                "options": [
                    "Martin Fowler disagrees with this definition because we should delay the design decisions and focus on features first.",
                    "Martin Fowler complains about this definition because the early decisions are not necessarily the right ones.",
                    "Martin Fowler complains about this definition because architecture should stress flexibility which can only be necessary later.",
                    "Martin Fowler disagrees with this definition because to design an architecture it is not necessary to make any decision."
                ]
            },
            {
                "questionId": "ImageHostingPerformance",
                "content": "Consider the following informal view of an Image Hosting System\n    \n\\begin{center}\n    \\includegraphics[width=100mm]{ImageHostingPerformance}\n\\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/test-1/ImageHostingPerformance.png",
                        "width": 100
                    }
                ],
                "options": [
                    "This view highlights the availability of the system.",
                    "This view highlights the performance of the \\texttt{Image File Storage}.",
                    "This view highlights the different performance levels for \\texttt{upload} and \\texttt{dowload} operations.",
                    "This view highlights the scalability of \\texttt{upload} and \\texttt{dowload} operations."
                ]
            },
            {
                "questionId": "GeneralScenario",
                "content": "A general scenario for a quality attribute",
                "image": [],
                "options": [
                    "Should be avoided because scenarios should describe very concrete situations.",
                    "Enumerates, for each kind of quality attribute, all the possible types of source of stimulus, stimulus, etc.",
                    "Can omit some of the elements like, for instance, the environment, if they are not relevant for the general scenario.",
                    "Is a very reusable scenario that can be used in many different concrete situations."
                ]
            },
            {
                "questionId": "OmissionRetry",
                "content": "Considering the availability architectural quality, the tactic of retry",
                "image": [],
                "options": [
                    "Can be applied to any kind of availability scenario.",
                    "Is useful to support scenarios where the stimulus is an omission.",
                    "Guarantees that the system will not become unavailable.",
                    "Reduces the availability scenario response time because the request occurs twice."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2015/test-1/test-11B.tex",
        "quizTitle": "..-data-2015-test-1-test-11B",
        "questions": [
            {
                "questionId": "GeneralScenario",
                "content": "A general scenario for a quality attribute",
                "image": [],
                "options": [
                    "Should be avoided because scenarios should describe very concrete situations.",
                    "Enumerates, for each kind of quality attribute, all the possible types of source of stimulus, stimulus, etc.",
                    "Can omit some of the elements like, for instance, the environment, if they are not relevant for the general scenario.",
                    "Is a very reusable scenario that can be used in many different concrete situations."
                ]
            },
            {
                "questionId": "OmissionRetry",
                "content": "Considering the availability architectural quality, the tactic of retry",
                "image": [],
                "options": [
                    "Can be applied to any kind of availability scenario.",
                    "Is useful to support scenarios where the stimulus is an omission.",
                    "Guarantees that the system will not become unavailable.",
                    "Reduces the availability scenario response time because the request occurs twice."
                ]
            },
            {
                "questionId": "PragmaticArchitect",
                "content": "According to Frank Buschmann in the article \\emph{Introducing the Pragmatic Architect}",
                "image": [],
                "options": [
                    "The business aspects of the system are for business architects, not the software architects.",
                    "Dealing with the technological aspects of the system should be delayed to the implementation stage of development.",
                    "The modeling of a system is not part of the software architect duties.",
                    "The level of abstraction of the system an architect works may vary."
                ]
            },
            {
                "questionId": "EarlydDecisions",
                "content": "In his article \\emph{Who Needs an Architect?} Martin Fowler refers to the following architecture definition\n        \n    \\begin{quote}\n        \\emph{architecture is the set of design decisions that must be made early in a project}\n    \\end{quote}",
                "image": [],
                "options": [
                    "Martin Fowler disagrees with this definition because we should delay the design decisions and focus on features first.",
                    "Martin Fowler complains about this definition because the early decisions are not necessarily the right ones.",
                    "Martin Fowler complains about this definition because architecture should stress flexibility which can only be necessary later.",
                    "Martin Fowler disagrees with this definition because to design an architecture it is not necessary to make any decision."
                ]
            },
            {
                "questionId": "ImageHostingPerformance",
                "content": "Consider the following informal view of an Image Hosting System\n    \n\\begin{center}\n    \\includegraphics[width=100mm]{ImageHostingPerformance}\n\\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/test-1/ImageHostingPerformance.png",
                        "width": 100
                    }
                ],
                "options": [
                    "This view highlights the availability of the system.",
                    "This view highlights the performance of the \\texttt{Image File Storage}.",
                    "This view highlights the different performance levels for \\texttt{upload} and \\texttt{dowload} operations.",
                    "This view highlights the scalability of \\texttt{upload} and \\texttt{dowload} operations."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2015/test-1/test-12A.tex",
        "quizTitle": "..-data-2015-test-1-test-12A",
        "questions": [
            {
                "questionId": "ArchitecturalInfluenceCycle",
                "content": "Suppose that after designing a successful architecture for a particular client the software house management decides to create a cross-functional internal department to start providing products for this particular segment of the market.",
                "image": [],
                "options": [
                    "This is a case of an architectural influence cycle where the feedback cycle resulted in changes on the business.",
                    "This is a case of an architectural influence cycle where the feedback cycle resulted in changes on the project.",
                    "This is a case of an architectural influence cycle where the feedback cycle resulted in changes on the business and project.",
                    "This is a case of an architectural influence cycle without feedback."
                ]
            },
            {
                "questionId": "SharedUnderstanding",
                "content": "In his article \\emph{Who Needs an Architect?} Martin Fowler refers to the following architecture definition\n        \n    \\begin{quote}\n        \\emph{the expert developers working on that project have a shared understanding of the system design}\n    \\end{quote}",
                "image": [],
                "options": [
                    "This shared understanding can be represented by a set of architectural views.",
                    "This shared understanding includes the architecturally significant requirements.",
                    "The system algorithms should be part of the shared understanding.",
                    "The shared understanding describes the system from a high-level perspective."
                ]
            },
            {
                "questionId": "ImageHostingScalability",
                "content": "Consider the following informal view of an Image Hosting System\n    \n\\begin{center}\n    \\includegraphics[width=100mm]{ImageHostingScalability}\n\\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/test-1/ImageHostingScalability.png",
                        "width": 100
                    }
                ],
                "options": [
                    "This view highlights the security of the system.",
                    "This view highlights the scalability of \\texttt{upload} and \\texttt{dowload} operations.",
                    "This view highlights the scalability of storage.",
                    "This view highlights the scalability of \\texttt{upload} and \\texttt{dowload} operations, and of storage."
                ]
            },
            {
                "questionId": "InteroperabilityStimulus",
                "content": "In a scenario for interoperability",
                "image": [],
                "options": [
                    "The exchange of information is the stimulus.",
                    "The request to adapt an interface is the stimulus.",
                    "The design of a reusable interface is the stimulus.",
                    "The data input to the system is the stimulus."
                ]
            },
            {
                "questionId": "PingEchoHeartbeat",
                "content": "Considering the availability architectural quality and the tactics of ping/echo and heartbeat",
                "image": [],
                "options": [
                    "These tactics cannot not be applied in conjunction with the self-test tactic.",
                    "These tactics are used to prevent the occurence of a fault.",
                    "Heartbeat is more scalable than ping/echo because the monitor does not need to know in advance the addresses of the components.",
                    "In ping/echo the components have the initiative to start the interaction."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2015/test-1/test-12B.tex",
        "quizTitle": "..-data-2015-test-1-test-12B",
        "questions": [
            {
                "questionId": "PingEchoHeartbeat",
                "content": "Considering the availability architectural quality and the tactics of ping/echo and heartbeat",
                "image": [],
                "options": [
                    "These tactics cannot not be applied in conjunction with the self-test tactic.",
                    "These tactics are used to prevent the occurence of a fault.",
                    "Heartbeat is more scalable than ping/echo because the monitor does not need to know in advance the addresses of the components.",
                    "In ping/echo the components have the initiative to start the interaction."
                ]
            },
            {
                "questionId": "ArchitecturalInfluenceCycle",
                "content": "Suppose that after designing a successful architecture for a particular client the software house management decides to create a cross-functional internal department to start providing products for this particular segment of the market.",
                "image": [],
                "options": [
                    "This is a case of an architectural influence cycle where the feedback cycle resulted in changes on the business.",
                    "This is a case of an architectural influence cycle where the feedback cycle resulted in changes on the project.",
                    "This is a case of an architectural influence cycle where the feedback cycle resulted in changes on the business and project.",
                    "This is a case of an architectural influence cycle without feedback."
                ]
            },
            {
                "questionId": "ImageHostingScalability",
                "content": "Consider the following informal view of an Image Hosting System\n    \n\\begin{center}\n    \\includegraphics[width=100mm]{ImageHostingScalability}\n\\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/test-1/ImageHostingScalability.png",
                        "width": 100
                    }
                ],
                "options": [
                    "This view highlights the security of the system.",
                    "This view highlights the scalability of \\texttt{upload} and \\texttt{dowload} operations.",
                    "This view highlights the scalability of storage.",
                    "This view highlights the scalability of \\texttt{upload} and \\texttt{dowload} operations, and of storage."
                ]
            },
            {
                "questionId": "SharedUnderstanding",
                "content": "In his article \\emph{Who Needs an Architect?} Martin Fowler refers to the following architecture definition\n        \n    \\begin{quote}\n        \\emph{the expert developers working on that project have a shared understanding of the system design}\n    \\end{quote}",
                "image": [],
                "options": [
                    "This shared understanding can be represented by a set of architectural views.",
                    "This shared understanding includes the architecturally significant requirements.",
                    "The system algorithms should be part of the shared understanding.",
                    "The shared understanding describes the system from a high-level perspective."
                ]
            },
            {
                "questionId": "InteroperabilityStimulus",
                "content": "In a scenario for interoperability",
                "image": [],
                "options": [
                    "The exchange of information is the stimulus.",
                    "The request to adapt an interface is the stimulus.",
                    "The design of a reusable interface is the stimulus.",
                    "The data input to the system is the stimulus."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2015/test-1/test-13A.tex",
        "quizTitle": "..-data-2015-test-1-test-13A",
        "questions": [
            {
                "questionId": "Diplomat",
                "content": "Very often, when a software architecture is being designed, conflicting requirements are identified, like between security and availability. The role of the software architect is to",
                "image": [],
                "options": [
                    "Design an architectural solution together with the stakeholders to be sure that everybody agrees on the resolution of conflits.",
                    "Solve the conflicts between requirements by deciding on the best trad-offs the system should support.",
                    "Facilitate the communication among the stakeholders such that they can decide on what are the architecturally significant requirements.",
                    "Design an architecture that supports all the conflicting requirements and present it to the stakeholders."
                ]
            },
            {
                "questionId": "ASDefinition",
                "content": "The definition of software architecture, on the course book, is\n    \\begin{quote}\n        \\emph{The software architecture of a system is the set of structures needed to reason about the system, which comprise software elements, relations among them, and properties of both.}\n    \\end{quote}\n    \n    According to this definition",
                "image": [],
                "options": [
                    "The set of structures is needed to support different levels of performance for the system.",
                    "To reason about a system is to verify whether the architecturally significant requirements are considered by the architecture.",
                    "The hardware is an example of a software element.",
                    "There isn't any relation between the properties of the software elements and the ability to reason about the system."
                ]
            },
            {
                "questionId": "ImageHostingReads",
                "content": "Consider the following informal view of an Image Hosting System\n    \n\\begin{center}\n    \\includegraphics[width=100mm]{ImageHostingReads}\n\\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/test-1/ImageHostingReads.png",
                        "width": 100
                    }
                ],
                "options": [
                    "This view highlights the availability of the \\texttt{Image File Storage}.",
                    "This view highlights the performance of the \\texttt{download} operations.",
                    "This view highlights the performance of \\texttt{upload} operations.",
                    "This view highlights the scalability of \\texttt{upload} and \\texttt{dowload} operations."
                ]
            },
            {
                "questionId": "RequirementsImpact",
                "content": "The requirements impact on how an architecture is designed",
                "image": [],
                "options": [
                    "However, functional requirements do not have any impact on the architecture because the systemic qualities of an architecture are non-functional.",
                    "The functional requirements have a large impact on the definition of views of the component-and-connector viewtype because each component executes a functionality.",
                    "The functional requirements have a large impact on the definition of views of the module viewtype because they are used to define the high cohesion and low coupling of modules.",
                    "The functional requirements can be considered as constraints on the software architecture design."
                ]
            },
            {
                "questionId": "RestartInRedundancy",
                "content": "Considering the availability architectural quality and the tactics of active redundancy, passive redundancy, and spare",
                "image": [],
                "options": [
                    "Active redundancy can be used together with a voting tactic to detect and recover from faults.",
                    "These tactics are used to prevent the occurence of a fault.",
                    "Spare guarantees immediate recover.",
                    "Passive redundancy does not work with non-deterministic behavior of request's execution."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2015/test-1/test-13B.tex",
        "quizTitle": "..-data-2015-test-1-test-13B",
        "questions": [
            {
                "questionId": "ImageHostingReads",
                "content": "Consider the following informal view of an Image Hosting System\n    \n\\begin{center}\n    \\includegraphics[width=100mm]{ImageHostingReads}\n\\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/test-1/ImageHostingReads.png",
                        "width": 100
                    }
                ],
                "options": [
                    "This view highlights the availability of the \\texttt{Image File Storage}.",
                    "This view highlights the performance of the \\texttt{download} operations.",
                    "This view highlights the performance of \\texttt{upload} operations.",
                    "This view highlights the scalability of \\texttt{upload} and \\texttt{dowload} operations."
                ]
            },
            {
                "questionId": "RequirementsImpact",
                "content": "The requirements impact on how an architecture is designed",
                "image": [],
                "options": [
                    "However, functional requirements do not have any impact on the architecture because the systemic qualities of an architecture are non-functional.",
                    "The functional requirements have a large impact on the definition of views of the component-and-connector viewtype because each component executes a functionality.",
                    "The functional requirements have a large impact on the definition of views of the module viewtype because they are used to define the high cohesion and low coupling of modules.",
                    "The functional requirements can be considered as constraints on the software architecture design."
                ]
            },
            {
                "questionId": "Diplomat",
                "content": "Very often, when a software architecture is being designed, conflicting requirements are identified, like between security and availability. The role of the software architect is to",
                "image": [],
                "options": [
                    "Design an architectural solution together with the stakeholders to be sure that everybody agrees on the resolution of conflits.",
                    "Solve the conflicts between requirements by deciding on the best trad-offs the system should support.",
                    "Facilitate the communication among the stakeholders such that they can decide on what are the architecturally significant requirements.",
                    "Design an architecture that supports all the conflicting requirements and present it to the stakeholders."
                ]
            },
            {
                "questionId": "ASDefinition",
                "content": "The definition of software architecture, on the course book, is\n    \\begin{quote}\n        \\emph{The software architecture of a system is the set of structures needed to reason about the system, which comprise software elements, relations among them, and properties of both.}\n    \\end{quote}\n    \n    According to this definition",
                "image": [],
                "options": [
                    "The set of structures is needed to support different levels of performance for the system.",
                    "To reason about a system is to verify whether the architecturally significant requirements are considered by the architecture.",
                    "The hardware is an example of a software element.",
                    "There isn't any relation between the properties of the software elements and the ability to reason about the system."
                ]
            },
            {
                "questionId": "RestartInRedundancy",
                "content": "Considering the availability architectural quality and the tactics of active redundancy, passive redundancy, and spare",
                "image": [],
                "options": [
                    "Active redundancy can be used together with a voting tactic to detect and recover from faults.",
                    "These tactics are used to prevent the occurence of a fault.",
                    "Spare guarantees immediate recover.",
                    "Passive redundancy does not work with non-deterministic behavior of request's execution."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2015/test-2/test-21A.tex",
        "quizTitle": "..-data-2015-test-2-test-21A",
        "questions": [
            {
                "questionId": "PerformanceOne",
                "content": "Consider a scenario for performance where the arrival of events is stochastic with a distribution where there are peeks of events but the arrival of events over a long period is uniform. The best tactic to apply is",
                "image": [],
                "options": [
                    "Manage sampling rate.",
                    "Limit event response.",
                    "Prioritize events.",
                    "Bound execution time."
                ]
            },
            {
                "questionId": "ModifiabilityOne",
                "content": "The modifiability tactic Use an Intermediary between two modules",
                "image": [],
                "options": [
                    "Has as main goal the reduction of the modules' size.",
                    "Results in the creation of a third module that does not have to change when any of the original modules are changed.",
                    "Increases the cohesion between the two modules.",
                    "Cannot be used together with the Reduce Overhead performance tactic."
                ]
            },
            {
                "questionId": "BusinessToDesignOne",
                "content": "The Attribute-Driven Design method is characterized by",
                "image": [],
                "options": [
                    "In each iteration one or more architecturally significant requirements are used to decompose a software element of the system design.",
                    "The architect cannot backtrack the decomposition decisions she made.",
                    "During the design process the number of architecturally significant requirements cannot change.",
                    "Contraints cannot be used as requirements for the decomposition process."
                ]
            },
            {
                "questionId": "GraphiteOne",
                "content": "Consider the following fragment in the description of the Graphite system:\n    \n    \\begin{quote}\n        The Graphite webapp allows users to request custom graphs with a simple URL-based API. Graphing parameters are specified in the query-string of an HTTP GET request, and a PNG image is returned in response. \n    \\end{quote}",
                "image": [],
                "options": [
                    "It describes a performance scenario where the stimulus is the request of a custom graph.",
                    "The scenario is supported by a manage sampling rate tactic because several requests to the same graph return the same result.",
                    "It describes a usability scenario where the source of stimulus is a non-technical user.",
                    "A support user initiative tactic based on the definition of a language is used to achieve this scenario."
                ]
            },
            {
                "questionId": "NginxOne",
                "content": "Consider the following fragment in the description of the nginx case study.\n    \n    \\begin{quote}\n        nginx's configuration system was inspired by Igor Sysoev's experiences with Apache. His main insight was that a scalable configuration system is essential for a web server. The main scaling problem was encountered when maintaining large complicated configurations with lots of virtual servers, directories, locations and datasets. In a relatively big web setup it can be a nightmare if not done properly both at the application level and by the system engineer himself.\n    \\end{quote}",
                "image": [],
                "options": [
                    "It describes an availability scenario because the configuration allows to define redundant virtual servers.",
                    "It describes a scalability scenario because it is possible to increment the size of the configuration at a linear cost.",
                    "It describes a usability scenario where the stimulus is reduce the number of errors when configuring the system.",
                    "It describes a modifiability scenario because of the cost associated with maintaining the configuration."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2015/test-2/test-21B.tex",
        "quizTitle": "..-data-2015-test-2-test-21B",
        "questions": [
            {
                "questionId": "NginxOne",
                "content": "Consider the following fragment in the description of the nginx case study.\n    \n    \\begin{quote}\n        nginx's configuration system was inspired by Igor Sysoev's experiences with Apache. His main insight was that a scalable configuration system is essential for a web server. The main scaling problem was encountered when maintaining large complicated configurations with lots of virtual servers, directories, locations and datasets. In a relatively big web setup it can be a nightmare if not done properly both at the application level and by the system engineer himself.\n    \\end{quote}",
                "image": [],
                "options": [
                    "It describes an availability scenario because the configuration allows to define redundant virtual servers.",
                    "It describes a scalability scenario because it is possible to increment the size of the configuration at a linear cost.",
                    "It describes a usability scenario where the stimulus is reduce the number of errors when configuring the system.",
                    "It describes a modifiability scenario because of the cost associated with maintaining the configuration."
                ]
            },
            {
                "questionId": "BusinessToDesignOne",
                "content": "The Attribute-Driven Design method is characterized by",
                "image": [],
                "options": [
                    "In each iteration one or more architecturally significant requirements are used to decompose a software element of the system design.",
                    "The architect cannot backtrack the decomposition decisions she made.",
                    "During the design process the number of architecturally significant requirements cannot change.",
                    "Contraints cannot be used as requirements for the decomposition process."
                ]
            },
            {
                "questionId": "PerformanceOne",
                "content": "Consider a scenario for performance where the arrival of events is stochastic with a distribution where there are peeks of events but the arrival of events over a long period is uniform. The best tactic to apply is",
                "image": [],
                "options": [
                    "Manage sampling rate.",
                    "Limit event response.",
                    "Prioritize events.",
                    "Bound execution time."
                ]
            },
            {
                "questionId": "GraphiteOne",
                "content": "Consider the following fragment in the description of the Graphite system:\n    \n    \\begin{quote}\n        The Graphite webapp allows users to request custom graphs with a simple URL-based API. Graphing parameters are specified in the query-string of an HTTP GET request, and a PNG image is returned in response. \n    \\end{quote}",
                "image": [],
                "options": [
                    "It describes a performance scenario where the stimulus is the request of a custom graph.",
                    "The scenario is supported by a manage sampling rate tactic because several requests to the same graph return the same result.",
                    "It describes a usability scenario where the source of stimulus is a non-technical user.",
                    "A support user initiative tactic based on the definition of a language is used to achieve this scenario."
                ]
            },
            {
                "questionId": "ModifiabilityOne",
                "content": "The modifiability tactic Use an Intermediary between two modules",
                "image": [],
                "options": [
                    "Has as main goal the reduction of the modules' size.",
                    "Results in the creation of a third module that does not have to change when any of the original modules are changed.",
                    "Increases the cohesion between the two modules.",
                    "Cannot be used together with the Reduce Overhead performance tactic."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2015/test-2/test-22A.tex",
        "quizTitle": "..-data-2015-test-2-test-22A",
        "questions": [
            {
                "questionId": "PerformanceTwo",
                "content": "The two basic contributors for the response time are the processing time and the blocking time. Which tactic for performance may reduce the blocking time",
                "image": [],
                "options": [
                    "Manage sampling rate.",
                    "Limit event response.",
                    "Prioritize events.",
                    "Maintain multiple copies of computation."
                ]
            },
            {
                "questionId": "ModifiabilityTwo",
                "content": "Consider the following scenario: \\emph{A system administrator simultaneously launches several instances of the system, each one using a different database, and is able to do it in less than 10 minutes.}",
                "image": [],
                "options": [
                    "This is a performance scenario because the stimulus is an input, \\emph{launches several instances of the system}.",
                    "This is a modifiability scenario which has a defer binding tactic.",
                    "This is not a modifiability scenario because the source of the stimulus cannot be a system administrator.",
                    "This is a modifiability scenario and its environment design time."
                ]
            },
            {
                "questionId": "BusinessToDesignTwo",
                "content": "Architecturally significant requirements (ASR) are captured in a utility tree where each one of the ASRs are classified in terms of its architectural impact and business value.",
                "image": [],
                "options": [
                    "Only the scenarios that have high architectural impact and high business value should appear in the tree.",
                    "A scenario for a power outage should have a low business value because the fault is temporary.",
                    "A scenario for a 24 hours x 7 days availability of the system should appear as a leaf of the utility tree.",
                    "The utility tree covers all the significant qualities the system has to address."
                ]
            },
            {
                "questionId": "GraphiteTwo",
                "content": "Consider the following fragment in the description of the Graphite system:\n    \n    \\begin{quote}\n        To avoid this kind of catastrophe, I added several features to carbon including configurable limits on how many data points can be queued and rate-limits on how quickly various whisper operations can be performed. These features can protect carbon from spiraling out of control and instead impose less harsh effects like dropping some data points or refusing to accept more data points. However, proper values for those settings are system-specific and require a fair amount of testing to tune. They are useful but they do not fundamentally solve the problem. For that, we'll need more hardware.\n    \\end{quote}\n    \n    The performance tactics referred in the above description are:",
                "image": [],
                "options": [
                    "Bound execution times, bound queue sizes, and increase resources.",
                    "Bound execution times, and increase resources.",
                    "Manage sampling rate, bound queue sizes, and increase resources.",
                    "Bound queue sizes, and increase resources."
                ]
            },
            {
                "questionId": "NginxTwo",
                "content": "In the description of the nginx case study we can read:\n    \n    \\begin{quote}\n        nginx is event-based, so it does not follow Apache's style of spawning new processes or threads for each web page request. The end result is that even as load increases, memory and CPU usage remain manageable. nginx can now deliver tens of thousands of concurrent connections on a server with typical hardware.\n    \\end{quote}\n    \n    The tactic nginx follows to achieve tens of thousands of concurrent connections is",
                "image": [],
                "options": [
                    "Introduce concurrency.",
                    "Increase resources.",
                    "Schedule resources.",
                    "Maintain multiple copies of computation."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2015/test-2/test-22B.tex",
        "quizTitle": "..-data-2015-test-2-test-22B",
        "questions": [
            {
                "questionId": "NginxTwo",
                "content": "In the description of the nginx case study we can read:\n    \n    \\begin{quote}\n        nginx is event-based, so it does not follow Apache's style of spawning new processes or threads for each web page request. The end result is that even as load increases, memory and CPU usage remain manageable. nginx can now deliver tens of thousands of concurrent connections on a server with typical hardware.\n    \\end{quote}\n    \n    The tactic nginx follows to achieve tens of thousands of concurrent connections is",
                "image": [],
                "options": [
                    "Introduce concurrency.",
                    "Increase resources.",
                    "Schedule resources.",
                    "Maintain multiple copies of computation."
                ]
            },
            {
                "questionId": "ModifiabilityTwo",
                "content": "Consider the following scenario: \\emph{A system administrator simultaneously launches several instances of the system, each one using a different database, and is able to do it in less than 10 minutes.}",
                "image": [],
                "options": [
                    "This is a performance scenario because the stimulus is an input, \\emph{launches several instances of the system}.",
                    "This is a modifiability scenario which has a defer binding tactic.",
                    "This is not a modifiability scenario because the source of the stimulus cannot be a system administrator.",
                    "This is a modifiability scenario and its environment design time."
                ]
            },
            {
                "questionId": "GraphiteTwo",
                "content": "Consider the following fragment in the description of the Graphite system:\n    \n    \\begin{quote}\n        To avoid this kind of catastrophe, I added several features to carbon including configurable limits on how many data points can be queued and rate-limits on how quickly various whisper operations can be performed. These features can protect carbon from spiraling out of control and instead impose less harsh effects like dropping some data points or refusing to accept more data points. However, proper values for those settings are system-specific and require a fair amount of testing to tune. They are useful but they do not fundamentally solve the problem. For that, we'll need more hardware.\n    \\end{quote}\n    \n    The performance tactics referred in the above description are:",
                "image": [],
                "options": [
                    "Bound execution times, bound queue sizes, and increase resources.",
                    "Bound execution times, and increase resources.",
                    "Manage sampling rate, bound queue sizes, and increase resources.",
                    "Bound queue sizes, and increase resources."
                ]
            },
            {
                "questionId": "BusinessToDesignTwo",
                "content": "Architecturally significant requirements (ASR) are captured in a utility tree where each one of the ASRs are classified in terms of its architectural impact and business value.",
                "image": [],
                "options": [
                    "Only the scenarios that have high architectural impact and high business value should appear in the tree.",
                    "A scenario for a power outage should have a low business value because the fault is temporary.",
                    "A scenario for a 24 hours x 7 days availability of the system should appear as a leaf of the utility tree.",
                    "The utility tree covers all the significant qualities the system has to address."
                ]
            },
            {
                "questionId": "PerformanceTwo",
                "content": "The two basic contributors for the response time are the processing time and the blocking time. Which tactic for performance may reduce the blocking time",
                "image": [],
                "options": [
                    "Manage sampling rate.",
                    "Limit event response.",
                    "Prioritize events.",
                    "Maintain multiple copies of computation."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2015/test-2/test-23A.tex",
        "quizTitle": "..-data-2015-test-2-test-23A",
        "questions": [
            {
                "questionId": "PerformanceThree",
                "content": "Jeff Atwood wrote an article in its blog about performance of software systems that is entitled, \\emph{Hardware is Cheap, Programmers are Expensive}. Which performance tactic(s) is he suggesting",
                "image": [],
                "options": [
                    "Increase resource efficiency.",
                    "Increase resources.",
                    "Increase resource efficiency and Increase resources.",
                    "Increase resources and Maintain multiple copies of computation."
                ]
            },
            {
                "questionId": "ModifiabilityThree",
                "content": "Consider the modifiability quality and the cost of change.",
                "image": [],
                "options": [
                    "A low cost of change may imply a high cost of development.",
                    "A low cost of change implies a low cost of development, because changing the code is part of development.",
                    "There is no relation between the cost of change and the cost of development.",
                    "A high cost of change occurs if it is necessary to defer the binding of what needs to be changed."
                ]
            },
            {
                "questionId": "BusinessToDesignThree",
                "content": "It was decided that the F\u00e9nix system should be based on open-source software.",
                "image": [],
                "options": [
                    "This decision does not have any impact on the architecture.",
                    "This decision corresponds to a constraint requirement.",
                    "This decision needs to be made concrete by an interoperability scenario.",
                    "This decision is not a consequence of the F\u00e9nix business case."
                ]
            },
            {
                "questionId": "GraphiteThree",
                "content": "Consider the following fragment in the description of the Graphite system:\n    \n    \\begin{quote}\n        Imagine that you have 60,000 metrics that you send to your Graphite server, and each of these metrics has one data point per minute. Remember that each metric has its own whisper file on the filesystem. This means carbon must do one write operation to 60,000 different files each minute. As long as carbon can write to one file each millisecond, it should be able to keep up. This isn't too far fetched, but let's say you have 600,000 metrics updating each minute, or your metrics are updating every second, or perhaps you simply cannot afford fast enough storage. Whatever the case, assume the rate of incoming data points exceeds the rate of write operations that your storage can keep up with. How should this situation be handled?\n    \\end{quote}",
                "image": [],
                "options": [
                    "It describes a reliability scenario because the data points for each metric will be split between a buffer and disk.",
                    "It describes a performance scenario for the execution of reads.",
                    "The tactic used to solve the problem is based in the fact that data points are appended to the end of the metric file.",
                    "The tactic used to solve the problem is not manage sampling rate because there isn't any loss of data points."
                ]
            },
            {
                "questionId": "NginxThree",
                "content": "In the description of the nginx case study we can read:\n    \n    \\begin{quote}\n        nginx's modular architecture generally allows developers to extend the set of web server features without modifying the nginx core. nginx modules come in slightly different incarnations, namely core modules, event modules, phase handlers, protocols, variable handlers, filters, upstreams and load balancers. At this time, nginx doesn't support dynamically loaded modules; i.e., modules are compiled along with the core at build stage.\n    \\end{quote}\n    \n    The above sentence corresponds to",
                "image": [],
                "options": [
                    "A security scenario because it allows the introduction of filters to encrypt the messages.",
                    "A availability scenario because it allows the introduction of load balancers.",
                    "A modifiability scenario where defer binding occurs at compile time.",
                    "A usability scenario because developers can extend the system without having to modify the nginx core."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2015/test-2/test-23B.tex",
        "quizTitle": "..-data-2015-test-2-test-23B",
        "questions": [
            {
                "questionId": "BusinessToDesignThree",
                "content": "It was decided that the F\u00e9nix system should be based on open-source software.",
                "image": [],
                "options": [
                    "This decision does not have any impact on the architecture.",
                    "This decision corresponds to a constraint requirement.",
                    "This decision needs to be made concrete by an interoperability scenario.",
                    "This decision is not a consequence of the F\u00e9nix business case."
                ]
            },
            {
                "questionId": "GraphiteThree",
                "content": "Consider the following fragment in the description of the Graphite system:\n    \n    \\begin{quote}\n        Imagine that you have 60,000 metrics that you send to your Graphite server, and each of these metrics has one data point per minute. Remember that each metric has its own whisper file on the filesystem. This means carbon must do one write operation to 60,000 different files each minute. As long as carbon can write to one file each millisecond, it should be able to keep up. This isn't too far fetched, but let's say you have 600,000 metrics updating each minute, or your metrics are updating every second, or perhaps you simply cannot afford fast enough storage. Whatever the case, assume the rate of incoming data points exceeds the rate of write operations that your storage can keep up with. How should this situation be handled?\n    \\end{quote}",
                "image": [],
                "options": [
                    "It describes a reliability scenario because the data points for each metric will be split between a buffer and disk.",
                    "It describes a performance scenario for the execution of reads.",
                    "The tactic used to solve the problem is based in the fact that data points are appended to the end of the metric file.",
                    "The tactic used to solve the problem is not manage sampling rate because there isn't any loss of data points."
                ]
            },
            {
                "questionId": "PerformanceThree",
                "content": "Jeff Atwood wrote an article in its blog about performance of software systems that is entitled, \\emph{Hardware is Cheap, Programmers are Expensive}. Which performance tactic(s) is he suggesting",
                "image": [],
                "options": [
                    "Increase resource efficiency.",
                    "Increase resources.",
                    "Increase resource efficiency and Increase resources.",
                    "Increase resources and Maintain multiple copies of computation."
                ]
            },
            {
                "questionId": "NginxThree",
                "content": "In the description of the nginx case study we can read:\n    \n    \\begin{quote}\n        nginx's modular architecture generally allows developers to extend the set of web server features without modifying the nginx core. nginx modules come in slightly different incarnations, namely core modules, event modules, phase handlers, protocols, variable handlers, filters, upstreams and load balancers. At this time, nginx doesn't support dynamically loaded modules; i.e., modules are compiled along with the core at build stage.\n    \\end{quote}\n    \n    The above sentence corresponds to",
                "image": [],
                "options": [
                    "A security scenario because it allows the introduction of filters to encrypt the messages.",
                    "A availability scenario because it allows the introduction of load balancers.",
                    "A modifiability scenario where defer binding occurs at compile time.",
                    "A usability scenario because developers can extend the system without having to modify the nginx core."
                ]
            },
            {
                "questionId": "ModifiabilityThree",
                "content": "Consider the modifiability quality and the cost of change.",
                "image": [],
                "options": [
                    "A low cost of change may imply a high cost of development.",
                    "A low cost of change implies a low cost of development, because changing the code is part of development.",
                    "There is no relation between the cost of change and the cost of development.",
                    "A high cost of change occurs if it is necessary to defer the binding of what needs to be changed."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2015/test-3/test-31A.tex",
        "quizTitle": "..-data-2015-test-3-test-31A",
        "questions": [
            {
                "questionId": "ModuleViewtypeOne",
                "content": "Consider the Decomposition architectural style of the Module viewtype",
                "image": [],
                "options": [
                    "Its main goal is to establish the reusability qualities of the architecture.",
                    "Project managers are not interested in views that use this style because it lacks the necessary level of detail.",
                    "Incremental development is a criteria that drives the design of views of this type.",
                    "There should be at least one view of the system using this architectural style."
                ]
            },
            {
                "questionId": "ContinuousIntegrationOne",
                "content": "In the Continuous Integration case study can be read\n    \n    \\begin{quote}\n        The space of architectures for continuous integration systems seems to be dominated by two extremes: master/slave architectures, in which a central server directs and controls remote builds; and reporting architectures, in which a central server aggregates build reports contributed by clients. All of the continuous integration systems of which we are aware have chosen some combination of features from these two architectures.\n    \\end{quote}\n    \n    The tactic that is referred in both architectures is",
                "image": [],
                "options": [
                    "Passive redundancy.",
                    "Active redundancy.",
                    "Voting.",
                    "Maintain multiples copies of computation."
                ]
            },
            {
                "questionId": "InfinispanOne",
                "content": "The Infinispan system can be used as a library, in which case it is embedded into a Java application, or as a server, in which case it is a remote data grid.",
                "image": [],
                "options": [
                    "The library approach allows non-java applications.",
                    "The server approach can scale independently of the number of applications.",
                    "The server approach implements a local cache.",
                    "The library approach does not build a cluster."
                ]
            },
            {
                "questionId": "ComponentAndConnectorOne",
                "content": "Consider the Component-and-Connector viewtype",
                "image": [],
                "options": [
                    "A component cannot be decomposed into a set of components and connectors.",
                    "A connector cannot be decomposed into a set of components and connectors.",
                    "A connector embodies a communication protocol.",
                    "A component can only have a single type of port."
                ]
            },
            {
                "questionId": "CCStyleOne",
                "content": "When describing their system people refer to a part of it as containing a database server. Applying the component-and-connector styles learned in the course we can say that this system uses",
                "image": [],
                "options": [
                    "A client-server style.",
                    "A shared-data style.",
                    "Both, client-server and shared-data styles.",
                    "A blackboard style."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2015/test-3/test-31B.tex",
        "quizTitle": "..-data-2015-test-3-test-31B",
        "questions": [
            {
                "questionId": "CCStyleOne",
                "content": "When describing their system people refer to a part of it as containing a database server. Applying the component-and-connector styles learned in the course we can say that this system uses",
                "image": [],
                "options": [
                    "A client-server style.",
                    "A shared-data style.",
                    "Both, client-server and shared-data styles.",
                    "A blackboard style."
                ]
            },
            {
                "questionId": "ContinuousIntegrationOne",
                "content": "In the Continuous Integration case study can be read\n    \n    \\begin{quote}\n        The space of architectures for continuous integration systems seems to be dominated by two extremes: master/slave architectures, in which a central server directs and controls remote builds; and reporting architectures, in which a central server aggregates build reports contributed by clients. All of the continuous integration systems of which we are aware have chosen some combination of features from these two architectures.\n    \\end{quote}\n    \n    The tactic that is referred in both architectures is",
                "image": [],
                "options": [
                    "Passive redundancy.",
                    "Active redundancy.",
                    "Voting.",
                    "Maintain multiples copies of computation."
                ]
            },
            {
                "questionId": "ModuleViewtypeOne",
                "content": "Consider the Decomposition architectural style of the Module viewtype",
                "image": [],
                "options": [
                    "Its main goal is to establish the reusability qualities of the architecture.",
                    "Project managers are not interested in views that use this style because it lacks the necessary level of detail.",
                    "Incremental development is a criteria that drives the design of views of this type.",
                    "There should be at least one view of the system using this architectural style."
                ]
            },
            {
                "questionId": "InfinispanOne",
                "content": "The Infinispan system can be used as a library, in which case it is embedded into a Java application, or as a server, in which case it is a remote data grid.",
                "image": [],
                "options": [
                    "The library approach allows non-java applications.",
                    "The server approach can scale independently of the number of applications.",
                    "The server approach implements a local cache.",
                    "The library approach does not build a cluster."
                ]
            },
            {
                "questionId": "ComponentAndConnectorOne",
                "content": "Consider the Component-and-Connector viewtype",
                "image": [],
                "options": [
                    "A component cannot be decomposed into a set of components and connectors.",
                    "A connector cannot be decomposed into a set of components and connectors.",
                    "A connector embodies a communication protocol.",
                    "A component can only have a single type of port."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2015/test-3/test-32A.tex",
        "quizTitle": "..-data-2015-test-3-test-32A",
        "questions": [
            {
                "questionId": "ModuleViewtypeTwo",
                "content": "Consider the Uses architectural style of the Module viewtype",
                "image": [],
                "options": [
                    "Cycles in the uses relation between modules are a good sign, because it indicates that several modules should be tested together.",
                    "The project manager uses this view to get advice on the incremental development of the system.",
                    "The uses relation should be applied to the coarse-grained modules, because it allows to identify circular dependences.",
                    "There isn't any relation with the layered architectural style because the allowed-to-use relation is more generic."
                ]
            },
            {
                "questionId": "ContinuousIntegrationTwo",
                "content": "In the Continuous Integration case study can be read\n    \n    \\begin{quote}\n        External resource coordination: Integration tests may depend on non-local resources such as a staging database or a remote web service. The CI system may therefore need to coordinate builds between multiple machines to organize access to these resources.\n    \\end{quote}\n    \n    The referred tactic is",
                "image": [],
                "options": [
                    "Schedule resources.",
                    "Introduce concurrency.",
                    "Tailor interface.",
                    "Increase resources."
                ]
            },
            {
                "questionId": "InfinispanTwo",
                "content": "In the Infinispan case study can be read\n    \n    \\begin{quote}\n        This allows applications to theoretically address an unlimited amount of in-memory storage as nodes are added to the cluster, increasing overall capacity.\n    \\end{quote}\n    \n    The quality that is referred is",
                "image": [],
                "options": [
                    "Modifiability.",
                    "Availability.",
                    "Performance.",
                    "Scalability."
                ]
            },
            {
                "questionId": "ComponentAndConnectorTwo",
                "content": "Consider the Component-and-Connector viewtype",
                "image": [],
                "options": [
                    "A component is an instance and a view can have several instances of the same component type.",
                    "A component type is made of a single architectural style.",
                    "Only components can be associated with application-specific types.",
                    "A component-and-connector view can only use a single architectural style."
                ]
            },
            {
                "questionId": "CCStyleTwo",
                "content": "Consider the peer-to-peer architectural style",
                "image": [],
                "options": [
                    "All the peers are equal.",
                    "Any peer can access any other peer.",
                    "Peers are only used to share files.",
                    "The interaction between peers is symmetric."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2015/test-3/test-32B.tex",
        "quizTitle": "..-data-2015-test-3-test-32B",
        "questions": [
            {
                "questionId": "ComponentAndConnectorTwo",
                "content": "Consider the Component-and-Connector viewtype",
                "image": [],
                "options": [
                    "A component is an instance and a view can have several instances of the same component type.",
                    "A component type is made of a single architectural style.",
                    "Only components can be associated with application-specific types.",
                    "A component-and-connector view can only use a single architectural style."
                ]
            },
            {
                "questionId": "CCStyleTwo",
                "content": "Consider the peer-to-peer architectural style",
                "image": [],
                "options": [
                    "All the peers are equal.",
                    "Any peer can access any other peer.",
                    "Peers are only used to share files.",
                    "The interaction between peers is symmetric."
                ]
            },
            {
                "questionId": "ModuleViewtypeTwo",
                "content": "Consider the Uses architectural style of the Module viewtype",
                "image": [],
                "options": [
                    "Cycles in the uses relation between modules are a good sign, because it indicates that several modules should be tested together.",
                    "The project manager uses this view to get advice on the incremental development of the system.",
                    "The uses relation should be applied to the coarse-grained modules, because it allows to identify circular dependences.",
                    "There isn't any relation with the layered architectural style because the allowed-to-use relation is more generic."
                ]
            },
            {
                "questionId": "ContinuousIntegrationTwo",
                "content": "In the Continuous Integration case study can be read\n    \n    \\begin{quote}\n        External resource coordination: Integration tests may depend on non-local resources such as a staging database or a remote web service. The CI system may therefore need to coordinate builds between multiple machines to organize access to these resources.\n    \\end{quote}\n    \n    The referred tactic is",
                "image": [],
                "options": [
                    "Schedule resources.",
                    "Introduce concurrency.",
                    "Tailor interface.",
                    "Increase resources."
                ]
            },
            {
                "questionId": "InfinispanTwo",
                "content": "In the Infinispan case study can be read\n    \n    \\begin{quote}\n        This allows applications to theoretically address an unlimited amount of in-memory storage as nodes are added to the cluster, increasing overall capacity.\n    \\end{quote}\n    \n    The quality that is referred is",
                "image": [],
                "options": [
                    "Modifiability.",
                    "Availability.",
                    "Performance.",
                    "Scalability."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2015/test-3/test-33A.tex",
        "quizTitle": "..-data-2015-test-3-test-33A",
        "questions": [
            {
                "questionId": "ModuleViewtypeThree",
                "content": "Consider the Layered architectural style of the Module viewtype",
                "image": [],
                "options": [
                    "The modules inside a layer cannot use other modules in the same layer.",
                    "A layer cannot call the layer above.",
                    "Each layer defines a virtual machine because it provides a set of cohesive functionalities to the upper layer.",
                    "It is possible to have a circular allowed-to-use relationship between several layers."
                ]
            },
            {
                "questionId": "ContinuousIntegrationThree",
                "content": "In the Continuous Integration case study can be read\n    \n    \\begin{quote}\n        It takes advantage of the JUnit XML standard for unit test and code coverage reporting to integrate reports from a variety of test tools.\n    \\end{quote}\n    \n    The referred quality is",
                "image": [],
                "options": [
                    "Interoperability.",
                    "Usability.",
                    "Performance.",
                    "Modifiability."
                ]
            },
            {
                "questionId": "InfinispanThree",
                "content": "In the Infinispan case study can be read\n    \n    \\begin{quote}\n        Before putting data on the network, application objects need to be serialized into bytes so that they can be pushed across a network, into the grid, and then again between peers. The bytes then need to be de-serialized back into application objects, when read by the application. In most common configurations, about 20\\% of the time spent in processing a request is spent in serialization and de-serialization.\n    \\end{quote}\n    \n    The above description can motivate a scenario for",
                "image": [],
                "options": [
                    "Performance.",
                    "Availability.",
                    "Modifiability.",
                    "Reliability."
                ]
            },
            {
                "questionId": "ComponentAndConnectorThree",
                "content": "Consider the two following views\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{pipes-and-filters}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/test-3/pipes-and-filters.png",
                        "width": 100
                    }
                ],
                "options": [
                    "The Merge component executes the module merge.",
                    "The Merge component executes the modules merge and stdio.",
                    "The module main is executed in the Merge component.",
                    "The Pipe connectors do not execute any module."
                ]
            },
            {
                "questionId": "CCStyleThree",
                "content": "Consider the shared-data style. Which of the following qualities does it support?",
                "image": [],
                "options": [
                    "Modifiability, because the Data Accessors do not depend on the data model.",
                    "Scalability of read requests, because it is easy add more repositories to where reads are distributed, though there may be some level of inconsistency.",
                    "Scalability of write requests, because a transactional system will synchronize the writes among the several repositories.",
                    "Confidentially of data, because it can be replicated in several repositories."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2015/test-3/test-33B.tex",
        "quizTitle": "..-data-2015-test-3-test-33B",
        "questions": [
            {
                "questionId": "ComponentAndConnectorThree",
                "content": "Consider the two following views\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{pipes-and-filters}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/test-3/pipes-and-filters.png",
                        "width": 100
                    }
                ],
                "options": [
                    "The Merge component executes the module merge.",
                    "The Merge component executes the modules merge and stdio.",
                    "The module main is executed in the Merge component.",
                    "The Pipe connectors do not execute any module."
                ]
            },
            {
                "questionId": "InfinispanThree",
                "content": "In the Infinispan case study can be read\n    \n    \\begin{quote}\n        Before putting data on the network, application objects need to be serialized into bytes so that they can be pushed across a network, into the grid, and then again between peers. The bytes then need to be de-serialized back into application objects, when read by the application. In most common configurations, about 20\\% of the time spent in processing a request is spent in serialization and de-serialization.\n    \\end{quote}\n    \n    The above description can motivate a scenario for",
                "image": [],
                "options": [
                    "Performance.",
                    "Availability.",
                    "Modifiability.",
                    "Reliability."
                ]
            },
            {
                "questionId": "CCStyleThree",
                "content": "Consider the shared-data style. Which of the following qualities does it support?",
                "image": [],
                "options": [
                    "Modifiability, because the Data Accessors do not depend on the data model.",
                    "Scalability of read requests, because it is easy add more repositories to where reads are distributed, though there may be some level of inconsistency.",
                    "Scalability of write requests, because a transactional system will synchronize the writes among the several repositories.",
                    "Confidentially of data, because it can be replicated in several repositories."
                ]
            },
            {
                "questionId": "ContinuousIntegrationThree",
                "content": "In the Continuous Integration case study can be read\n    \n    \\begin{quote}\n        It takes advantage of the JUnit XML standard for unit test and code coverage reporting to integrate reports from a variety of test tools.\n    \\end{quote}\n    \n    The referred quality is",
                "image": [],
                "options": [
                    "Interoperability.",
                    "Usability.",
                    "Performance.",
                    "Modifiability."
                ]
            },
            {
                "questionId": "ModuleViewtypeThree",
                "content": "Consider the Layered architectural style of the Module viewtype",
                "image": [],
                "options": [
                    "The modules inside a layer cannot use other modules in the same layer.",
                    "A layer cannot call the layer above.",
                    "Each layer defines a virtual machine because it provides a set of cohesive functionalities to the upper layer.",
                    "It is possible to have a circular allowed-to-use relationship between several layers."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2015/test-4/test-41A.tex",
        "quizTitle": "..-data-2015-test-4-test-41A",
        "questions": [
            {
                "questionId": "ComponentAndConnectorOne",
                "content": "Consider the Service-Oriented Architecture architectural style",
                "image": [],
                "options": [
                    "The main quality this style addresses is interoperability.",
                    "It cannot be applied when the system includes legacy systems.",
                    "Its enterprise service bus cannot support asynchronous communication between the components.",
                    "The typical communication pattern is point-to-point."
                ]
            },
            {
                "questionId": "AllocationOne",
                "content": "Consider the work assignment architectural style of the allocation viewtype.",
                "image": [],
                "options": [
                    "It assigns components and connectors to people and teams.",
                    "It is useful for the project managers.",
                    "It does not consider the software that is outsourced.",
                    "It allows to estimate the cost of hardware."
                ]
            },
            {
                "questionId": "InfinispanOne",
                "content": "Consider the Infinispan system when it is configured as a remote data grid. The relation between the Applications and the Grid is",
                "image": [],
                "options": [
                    "Client-server.",
                    "Peer-to-peer.",
                    "Master-slave.",
                    "Pipe-and-filter."
                ]
            },
            {
                "questionId": "MicroAndAmazonOne",
                "content": "Consider the following distinction between Monoliths and Microservices made by Matin Fowler\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{MonolithsVsMicroservices}\n    \\end{center}\n    \n    If we try to map this figure into a set of views we will need.",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/test-4/MonolithsVsMicroservices.png",
                        "width": 100
                    }
                ],
                "options": [
                    "A decomposition view.",
                    "A view of the component-and-connector viewtype.",
                    "A view of the component-and-connector viewtype and a deployment view.",
                    "A decomposition view, a view of the component-and-connector viewtype and a deployment view."
                ]
            },
            {
                "questionId": "JenkinsOne",
                "content": "Consider the following representation of the Buildbot system.\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{BuildbotArchitecture}\n    \\end{center}\n    \n    The architecture style between the Buildbot Master and the Clients is:",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/test-4/BuildbotArchitecture.png",
                        "width": 80
                    }
                ],
                "options": [
                    "Peer-to-peer.",
                    "Shared-data where the Buildbot is the data accessor.",
                    "Client-server where the Buildbot is the client.",
                    "Client-server where the Buildbot is the server."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2015/test-4/test-41B.tex",
        "quizTitle": "..-data-2015-test-4-test-41B",
        "questions": [
            {
                "questionId": "MicroAndAmazonOne",
                "content": "Consider the following distinction between Monoliths and Microservices made by Matin Fowler\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{MonolithsVsMicroservices}\n    \\end{center}\n    \n    If we try to map this figure into a set of views we will need.",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/test-4/MonolithsVsMicroservices.png",
                        "width": 100
                    }
                ],
                "options": [
                    "A decomposition view.",
                    "A view of the component-and-connector viewtype.",
                    "A view of the component-and-connector viewtype and a deployment view.",
                    "A decomposition view, a view of the component-and-connector viewtype and a deployment view."
                ]
            },
            {
                "questionId": "AllocationOne",
                "content": "Consider the work assignment architectural style of the allocation viewtype.",
                "image": [],
                "options": [
                    "It assigns components and connectors to people and teams.",
                    "It is useful for the project managers.",
                    "It does not consider the software that is outsourced.",
                    "It allows to estimate the cost of hardware."
                ]
            },
            {
                "questionId": "InfinispanOne",
                "content": "Consider the Infinispan system when it is configured as a remote data grid. The relation between the Applications and the Grid is",
                "image": [],
                "options": [
                    "Client-server.",
                    "Peer-to-peer.",
                    "Master-slave.",
                    "Pipe-and-filter."
                ]
            },
            {
                "questionId": "JenkinsOne",
                "content": "Consider the following representation of the Buildbot system.\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{BuildbotArchitecture}\n    \\end{center}\n    \n    The architecture style between the Buildbot Master and the Clients is:",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/test-4/BuildbotArchitecture.png",
                        "width": 80
                    }
                ],
                "options": [
                    "Peer-to-peer.",
                    "Shared-data where the Buildbot is the data accessor.",
                    "Client-server where the Buildbot is the client.",
                    "Client-server where the Buildbot is the server."
                ]
            },
            {
                "questionId": "ComponentAndConnectorOne",
                "content": "Consider the Service-Oriented Architecture architectural style",
                "image": [],
                "options": [
                    "The main quality this style addresses is interoperability.",
                    "It cannot be applied when the system includes legacy systems.",
                    "Its enterprise service bus cannot support asynchronous communication between the components.",
                    "The typical communication pattern is point-to-point."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2015/test-4/test-42A.tex",
        "quizTitle": "..-data-2015-test-4-test-42A",
        "questions": [
            {
                "questionId": "ComponentAndConnectorThree",
                "content": "Consider the following view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{AdventureBuilder-Tiers}\n    \\end{center}\n    \n    In this view the following architectural styles are used",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/test-4/AdventureBuilder-Tiers.png",
                        "width": 100
                    }
                ],
                "options": [
                    "Tiers.",
                    "Tiers, and Shared-data.",
                    "Tiers, Shared-data, and Service-oriented architecture.",
                    "Tiers, Shared-data, Service-oriented architecture, and Client-server."
                ]
            },
            {
                "questionId": "InfinispanTwo",
                "content": "In the description of Infinispan system can be read\n    \n    \\begin{quote}\n        Infinispan supports several pluggable cache stores-adapters that can be used to persist data to disk or any form of secondary storage. The current default implementation is a simplistic hash bucket and linked list implementation, where each hash bucket is represented by a file on the filesystem. While easy to use and configure, this isn't the best-performing implementation.\n    \\end{quote}\n    \n    The architectural style(s) that should be used to illustrate the sentence is (are)",
                "image": [],
                "options": [
                    "Decomposition.",
                    "Generalization.",
                    "Decomposition and Generalization.",
                    "Peer-to-peer."
                ]
            },
            {
                "questionId": "AllocationTwo",
                "content": "Consider the deployment architectural style of the allocation viewtype.",
                "image": [],
                "options": [
                    "It assigns modules to the hardware.",
                    "It cannot assign software elements to virtual servers because they are not hardware.",
                    "For each set of software elements there is a single possible assignment to hardwre.",
                    "It is useful for system administrators."
                ]
            },
            {
                "questionId": "MicroAndAmazonTwo",
                "content": "Consider the following representation of Amazon's architecture (sorry for the figure's layout: \\textbf{save trees})\n            \n    \\begin{center}\n        \\includegraphics[width=80mm]{AmazonArchitecture}\n    \\end{center}\n    \n    What is the most relevant architecture style that is used in this figure?",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/test-4/AmazonArchitecture.png",
                        "width": 80
                    }
                ],
                "options": [
                    "Client-server to represent performance.",
                    "Tiers to represent scalability.",
                    "Service-oriented architecture to represent interoperability.",
                    "Shared-data to represent modifiability."
                ]
            },
            {
                "questionId": "JenkinsTwo",
                "content": "In the Continuous Integration case can be read\n    \\begin{quote}\n        Build notification: The outcomes of builds generally need to be communicated to interested clients, either via pull (Web, RSS, RPC, etc.) or push notification (e-mail, Twitter, etc.) This can include notification of all builds, or only failed builds, or builds that haven't been executed within a certain period.\n    \\end{quote}\n        The architectural style used in push notifications is",
                "image": [],
                "options": [
                    "Publish-subscribe.",
                    "Client-server.",
                    "Shared-date.",
                    "Generalization."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2015/test-4/test-42B.tex",
        "quizTitle": "..-data-2015-test-4-test-42B",
        "questions": [
            {
                "questionId": "InfinispanTwo",
                "content": "In the description of Infinispan system can be read\n    \n    \\begin{quote}\n        Infinispan supports several pluggable cache stores-adapters that can be used to persist data to disk or any form of secondary storage. The current default implementation is a simplistic hash bucket and linked list implementation, where each hash bucket is represented by a file on the filesystem. While easy to use and configure, this isn't the best-performing implementation.\n    \\end{quote}\n    \n    The architectural style(s) that should be used to illustrate the sentence is (are)",
                "image": [],
                "options": [
                    "Decomposition.",
                    "Generalization.",
                    "Decomposition and Generalization.",
                    "Peer-to-peer."
                ]
            },
            {
                "questionId": "ComponentAndConnectorThree",
                "content": "Consider the following view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{AdventureBuilder-Tiers}\n    \\end{center}\n    \n    In this view the following architectural styles are used",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/test-4/AdventureBuilder-Tiers.png",
                        "width": 100
                    }
                ],
                "options": [
                    "Tiers.",
                    "Tiers, and Shared-data.",
                    "Tiers, Shared-data, and Service-oriented architecture.",
                    "Tiers, Shared-data, Service-oriented architecture, and Client-server."
                ]
            },
            {
                "questionId": "AllocationTwo",
                "content": "Consider the deployment architectural style of the allocation viewtype.",
                "image": [],
                "options": [
                    "It assigns modules to the hardware.",
                    "It cannot assign software elements to virtual servers because they are not hardware.",
                    "For each set of software elements there is a single possible assignment to hardwre.",
                    "It is useful for system administrators."
                ]
            },
            {
                "questionId": "JenkinsTwo",
                "content": "In the Continuous Integration case can be read\n    \\begin{quote}\n        Build notification: The outcomes of builds generally need to be communicated to interested clients, either via pull (Web, RSS, RPC, etc.) or push notification (e-mail, Twitter, etc.) This can include notification of all builds, or only failed builds, or builds that haven't been executed within a certain period.\n    \\end{quote}\n        The architectural style used in push notifications is",
                "image": [],
                "options": [
                    "Publish-subscribe.",
                    "Client-server.",
                    "Shared-date.",
                    "Generalization."
                ]
            },
            {
                "questionId": "MicroAndAmazonTwo",
                "content": "Consider the following representation of Amazon's architecture (sorry for the figure's layout: \\textbf{save trees})\n            \n    \\begin{center}\n        \\includegraphics[width=80mm]{AmazonArchitecture}\n    \\end{center}\n    \n    What is the most relevant architecture style that is used in this figure?",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/test-4/AmazonArchitecture.png",
                        "width": 80
                    }
                ],
                "options": [
                    "Client-server to represent performance.",
                    "Tiers to represent scalability.",
                    "Service-oriented architecture to represent interoperability.",
                    "Shared-data to represent modifiability."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2015/test-4/test-43A.tex",
        "quizTitle": "..-data-2015-test-4-test-43A",
        "questions": [
            {
                "questionId": "ComponentAndConnectorTwo",
                "content": "Consider the following view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{AdventureBuilder-SOA}\n    \\end{center}\n    \n    In this view the following architectural styles are used",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/test-4/AdventureBuilder-SOA.png",
                        "width": 80
                    }
                ],
                "options": [
                    "Service-oriented architecture, and Client-server.",
                    "Service-oriented architecture, and Shared-data.",
                    "Service-oriented architecture, Shared-data, and Peer-to-peer.",
                    "Service-oriented architecture, Shared-data, Peer-to-peer, and Client-server."
                ]
            },
            {
                "questionId": "AllocationThree",
                "content": "Consider the install architectural style of the allocation viewtype.",
                "image": [],
                "options": [
                    "The development team is the main stakeholder interesting in these views.",
                    "It assigns modules to files.",
                    "It is completely independent of the deployment architectural style.",
                    "It helps on the configuration of systems."
                ]
            },
            {
                "questionId": "InfinispanThree",
                "content": "In the description of Infinispan system can be read\n    \n    \\begin{quote}\n        When dealing with thread pools to process such asynchronous tasks, there is always a context switching overhead. That threads are not cheap resources is also noteworthy. Allocating appropriately sized and configured thread pools is important to any installation making use of any of the asynchronous features of Infinispan.\n    \\end{quote}\n    \n    The architectural style that should be used to illustrate the sentence is",
                "image": [],
                "options": [
                    "Client-server.",
                    "Communicating processes.",
                    "Peer-to-peer.",
                    "Shared-data."
                ]
            },
            {
                "questionId": "MicroAndAmazonThree",
                "content": "In the interview Werner Vogels from Amazon gives to Jim Gray, Werner Vogels says that\n    \n    \\begin{quote}\n        The stored data formats are decoupled from the format in which you communicate data items. If there is no need for sharing schemas of the actual storage layout, you can focus on making sure that the service interfaces can evolve in a way that allows you to handle variations of data formats. \n    \\end{quote}\n    \n    Which means that in the software architecture of Amazon's systems",
                "image": [],
                "options": [
                    "The data-shared architectural style is not applied because data is encapsulated inside services.",
                    "The sharing of data is done using a service-oriented architecture.",
                    "Modifiability is not a concern of their architecture.",
                    "The decouple of data formats does not support scalability because of the transactional properties."
                ]
            },
            {
                "questionId": "JenkinsThree",
                "content": "Consider the following representation of the CDash system\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{DashArchitecture}\n    \\end{center}\n    \n    The architecture style between the Dashboard and the Clients is:",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/test-4/DashArchitecture.png",
                        "width": 80
                    }
                ],
                "options": [
                    "Peer-to-peer.",
                    "Shared-data where the Dashboard is the repository.",
                    "Client-server where the Dashboard is the client.",
                    "Client-server where the Dashboard is the server."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2015/test-4/test-43B.tex",
        "quizTitle": "..-data-2015-test-4-test-43B",
        "questions": [
            {
                "questionId": "MicroAndAmazonThree",
                "content": "In the interview Werner Vogels from Amazon gives to Jim Gray, Werner Vogels says that\n    \n    \\begin{quote}\n        The stored data formats are decoupled from the format in which you communicate data items. If there is no need for sharing schemas of the actual storage layout, you can focus on making sure that the service interfaces can evolve in a way that allows you to handle variations of data formats. \n    \\end{quote}\n    \n    Which means that in the software architecture of Amazon's systems",
                "image": [],
                "options": [
                    "The data-shared architectural style is not applied because data is encapsulated inside services.",
                    "The sharing of data is done using a service-oriented architecture.",
                    "Modifiability is not a concern of their architecture.",
                    "The decouple of data formats does not support scalability because of the transactional properties."
                ]
            },
            {
                "questionId": "JenkinsThree",
                "content": "Consider the following representation of the CDash system\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{DashArchitecture}\n    \\end{center}\n    \n    The architecture style between the Dashboard and the Clients is:",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/test-4/DashArchitecture.png",
                        "width": 80
                    }
                ],
                "options": [
                    "Peer-to-peer.",
                    "Shared-data where the Dashboard is the repository.",
                    "Client-server where the Dashboard is the client.",
                    "Client-server where the Dashboard is the server."
                ]
            },
            {
                "questionId": "ComponentAndConnectorTwo",
                "content": "Consider the following view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{AdventureBuilder-SOA}\n    \\end{center}\n    \n    In this view the following architectural styles are used",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2015/test-4/AdventureBuilder-SOA.png",
                        "width": 80
                    }
                ],
                "options": [
                    "Service-oriented architecture, and Client-server.",
                    "Service-oriented architecture, and Shared-data.",
                    "Service-oriented architecture, Shared-data, and Peer-to-peer.",
                    "Service-oriented architecture, Shared-data, Peer-to-peer, and Client-server."
                ]
            },
            {
                "questionId": "AllocationThree",
                "content": "Consider the install architectural style of the allocation viewtype.",
                "image": [],
                "options": [
                    "The development team is the main stakeholder interesting in these views.",
                    "It assigns modules to files.",
                    "It is completely independent of the deployment architectural style.",
                    "It helps on the configuration of systems."
                ]
            },
            {
                "questionId": "InfinispanThree",
                "content": "In the description of Infinispan system can be read\n    \n    \\begin{quote}\n        When dealing with thread pools to process such asynchronous tasks, there is always a context switching overhead. That threads are not cheap resources is also noteworthy. Allocating appropriately sized and configured thread pools is important to any installation making use of any of the asynchronous features of Infinispan.\n    \\end{quote}\n    \n    The architectural style that should be used to illustrate the sentence is",
                "image": [],
                "options": [
                    "Client-server.",
                    "Communicating processes.",
                    "Peer-to-peer.",
                    "Shared-data."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2016/20170113Exam/exame-20170113-companion-A.tex",
        "quizTitle": "..-data-2016-20170113Exam-exame-20170113-companion-A",
        "questions": [
            {
                "questionId": "SoftwareArchitectureOne",
                "content": "Consider that a software development team uses an agile methodology\n  such as XP (Extreme Programming), where no documentation is\n  produced.  Then, the systems developed by that team",
                "image": [],
                "options": [
                    "Typically have a software architecture that results\n    from the common knowledge about the system that is shared among\n    the team members",
                    "Do not have a software architecture, because in agile\n    methodologies there is no architectural design phase",
                    "Do not have a software architecture, because the practice of\n    refactoring allows changing every part of the system easily",
                    "May have a software architecture, but that architecture is\n    not known because it was neither designed nor documented"
                ]
            },
            {
                "questionId": "RequirementsImpact",
                "content": "The requirements impact on how an architecture is designed",
                "image": [],
                "options": [
                    "However, functional requirements do not have any impact on the architecture because the systemic qualities of an architecture are non-functional",
                    "The functional requirements have a large impact on the definition of views of the component-and-connector viewtype because each component executes a functionality",
                    "The functional requirements have a large impact on the definition of views of the module viewtype because they are used to define the high cohesion and low coupling of modules",
                    "The functional requirements can be considered as constraints on the software architecture design"
                ]
            },
            {
                "questionId": "AvailabilityScenarioOne",
                "content": "Consider the following scenario\n      \n      \\begin{quote}\n          If one of the application servers fails to respond when the system is in its normal operation state, the load balancer should redirect requests to another application server.\n      \\end{quote}",
                "image": [],
                "options": [
                    "The stimulus is incorrect response",
                    "The artefact is the load balancer",
                    "The response is not correctly stated",
                    "The quality it addresses is interoperability"
                ]
            },
            {
                "questionId": "AvailabilityVotingEN",
                "content": "The availability quality can be supported by a voting tactic in order to identify faults of",
                "image": [],
                "options": [
                    "Programming, if the components execute modules developed by different teams",
                    "Hardware, if there is hardware redundancy",
                    "Operating Systems, if redundant components execute on top of different operating systems",
                    "All the previous options"
                ]
            },
            {
                "questionId": "MWResourceLoaderTacticEEEN",
                "content": "Consider the following fragment of the \\emph{MediaWiki} system description:\n      \\newline\n      \n      \\emph{To optimize the delivery of JavaScript and CSS assets, the ResourceLoader module was developed to optimize delivery of JS and CSS. Started in 2009, it was completed in 2011 and has been a core feature of MediaWiki since version 1.17. ResourceLoader works by loading JS and CSS assets on demand, thus reducing loading and parsing time when features are unused, for example by older browsers. It also minifies the code, groups resources to save requests, and can embed images as data URIs}\n      \\newline\n      \n      The \\emph{ResourceLoader} supports a quality",
                "image": [],
                "options": [
                    "Performance",
                    "Usability",
                    "Availability",
                    "Modifiability"
                ]
            },
            {
                "questionId": "PerfomanceTacticOne",
                "content": "In which performance tactic it may occur that not all the inputs are processed",
                "image": [],
                "options": [
                    "Manage sampling rate",
                    "Limit event response",
                    "Reduce overhead",
                    "Bound execution times"
                ]
            },
            {
                "questionId": "ScalabilityINGLES",
                "content": "Several of the cases studied in this course had scalability\n    requirements.  That means that those systems should be designed in\n    such a way that they",
                "image": [],
                "options": [
                    "Have high throughput",
                    "Have low latency",
                    "Allow many simultaneous users",
                    "May be easily changed to increase their performance"
                ]
            },
            {
                "questionId": "LayersTactics",
                "content": "The main tactic associated with the layered architectural style is:",
                "image": [],
                "options": [
                    "Split module",
                    "Encapsulate",
                    "Restrict dependencies",
                    "Defer binding"
                ]
            },
            {
                "questionId": "HadoopDisponibilidadeDadosINGLES",
                "content": "One of the key requirements for the HDFS system is that the data\n    stored in the system remains available, even in the presence of\n    various types of failures (non simultaneous) in the hardware in\n    which the system executes.  To show that the system satisfies this\n    requirement",
                "image": [],
                "options": [
                    "We must use various different views, both of the\n      component-and-connector and the allocation viewtypes",
                    "We just have to show, through component-and-connector\n      views, that the system maintains replicas of the data in\n      different components",
                    "We just have to show, through Deployment views,\n      that the \\emph{DataNode} component executes in more than one\n      machine of the cluster",
                    "We just have to show, through Decomposition views, that\n      there are modules responsible for the replication of file blocks"
                ]
            },
            {
                "questionId": "HadoopTacticasRecuperacaoFaltasINGLES",
                "content": "In the HDFS system the fault recovery tactics are:",
                "image": [],
                "options": [
                    "Active replication and passive replication",
                    "Active replication, passive replication, and spare",
                    "Passive replication and spare",
                    "Quorum, active replication, and passive replication"
                ]
            },
            {
                "questionId": "SecondEEEN",
                "content": "The documentation of the software architecture for a system is often\n  composed of several views, because",
                "image": [],
                "options": [
                    "Different stakeholders are interested in different views of the system",
                    "A single view would be too simplistic",
                    "The views describe different aspects of the system",
                    "All of the above"
                ]
            },
            {
                "questionId": "ModuleViewType",
                "content": "The quality that is more relevant to views of the module viewtype is:",
                "image": [],
                "options": [
                    "Modifiability",
                    "Usability",
                    "Security",
                    "Availability"
                ]
            },
            {
                "questionId": "MemcachedModulesINGLES",
                "content": "Consider the following description of \\emph{Memcached}, which is\n    adapted from its Wiki:\n    \\begin{quote}\n      Memcached is an in-memory key-value store for small chunks of\n      arbitrary data from results of database calls, API calls, or\n      page rendering.  It is made up of:\n      \\begin{itemize}\n      \\item Client software, which is given a list of available memcached servers.\n      \\item A client-based hashing algorithm, which chooses a server\n        based on the \"key\" input.\n      \\item Server software, which stores your values with their keys\n        into an internal hash table.\n      \\item Server algorithms, which determine when to throw out old\n        data (if out of memory), or reuse memory.\n      \\end{itemize}\n    \\end{quote}\n    Suppose that you want to present an architectural view for\n    \\emph{Memcached} that represents the above information.  Which\n    view is more adequate?",
                "image": [],
                "options": [
                    "A view of the Data Model style",
                    "A view of the Layers style",
                    "A view of the Decomposition style",
                    "A view of the Uses style"
                ]
            },
            {
                "questionId": "AspectsINGLES",
                "content": "Using the Aspects architectural style promotes the modifiability\n    of a system because",
                "image": [],
                "options": [
                    "It imposes restrictions on which uses relationships may\n      exist between the system's modules",
                    "It makes it easier to create generalization relationships\n      between the system's modules",
                    "It separates in new modules responsibilities that were\n      spread over various of the system's modules",
                    "It allows the decomposition of each of the system's\n      modules into finer grained modules"
                ]
            },
            {
                "questionId": "LayeredAspectsDataModelTwo",
                "content": "Suppose that you are implementing a module in a system that has a two layered architecture.\n     Knowing that your module belongs to the upper layer (assuming the usual notation\n     for the layer style), this means that you",
                "image": [],
                "options": [
                    "Can use the operations defined in any of the system's modules",
                    "Can use the operations defined in the lower layer, but not the ones defined in\n         the upper layer",
                    "Can use the operations defined in the upper layer, but not the ones defined in\n         the lower layer",
                    "Should use some operation defined in the lower layer"
                ]
            },
            {
                "questionId": "AdventureBuilderThree",
                "content": "Consider the following architectural view of the Adventure Builder system, designed around the Order Processing Center\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{../AdventureBuilderCandC}\n    \\end{center}\n    \n    The views \\textbf{does not} use the architectural style",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2016/AdventureBuilderCandC.png",
                        "width": 120
                    }
                ],
                "options": [
                    "Per-to-peer",
                    "Shared-data",
                    "Communicating processes",
                    "Publish-subscribe"
                ]
            },
            {
                "questionId": "AdventureBuilderFive",
                "content": "Consider the following requirement for availability of the Adventure Builder system\n    \n    \\begin{quote}\n        The Consumer Web site sent a purchase order request to the order processing center (OPC). The OPC processed that request but didn't reply to Consumer Web site within five seconds, so the Consumer Web site resends the request to the OPC.\n    \\end{quote}\n    \n    If we represent this requirement as a scenario",
                "image": [],
                "options": [
                    "The stimulus is an omission and the tactic is retry",
                    "The stimulus is a crash and the tactic is retry",
                    "The stimulus is an incorrect timing and the tactic is ignore faulty behaviour",
                    "The stimulus is incorrect response and the tactic is voting"
                ]
            },
            {
                "questionId": "DVDCatalogMeta",
                "content": "Consider the module viewtype views of the DVD Catalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        The application should support other kinds of catalogs (CDs, games, books, ...). \n    \\end{quote}\n    \n    This requirement requires a change of",
                "image": [],
                "options": [
                    "The layered view to support a new specific layer for the customization of the catalog",
                    "The layered view to accommodate a new layer for each kind of catalog, which other layers may use",
                    "The data model view in order to define entities for each kind of catalog",
                    "The data model view in order to define generic entities that can be customized for different kinds of catalogs"
                ]
            },
            {
                "questionId": "AvailabilityINGLES",
                "content": "Suppose that, to satisfy an availability requirement related with\n    the occurrence of faults at the network infrastructure used by\n    your system, you want to use the tactic named \\emph{Ping/Echo}.\n    How does the use of that tactic manifests in the architectural\n    views of your system?",
                "image": [],
                "options": [
                    "Only in the Deployment view",
                    "Only in the Decomposition view",
                    "Only in a component-and-connector view",
                    "Both in a component-and-connector and the Deployment\n      views"
                ]
            },
            {
                "questionId": "PeerToPeerDynamicReconfiguration",
                "content": "In the description of the Gnutella system can be read:\n    \n    \\begin{quote}\n        The topology of the system changes at runtime as peer components connect and disconnect to the network.\n    \\end{quote}",
                "image": [],
                "options": [
                    "When a peer connects to the network it establishes connections with all other peers in the network",
                    "The behavior described in the sentence can be represented in a view where the dynamic reconfiguration architectural style is used",
                    "When a peer receives a connection it sends all its files to the peer connecting it",
                    "The behavior described in the sentence can be represented in a view where the tier architectural style is used"
                ]
            },
            {
                "questionId": "PipeFilterComposition",
                "content": "The Pipe-and-Filter style allows composition of filters",
                "image": [],
                "options": [
                    "But when the filters are executed sequentially the composition power is reduced",
                    "Which improves modifiability, because filters are decoupled through pipes",
                    "But the size of buffers may reduce the composition power",
                    "And filters do not have to agree on the data formats"
                ]
            },
            {
                "questionId": "SOAINGLES",
                "content": "In the Service Oriented Architecture style it is common to have a\n    specialized component, named \\emph{Enterprise Service Bus} (ESB).\n    The goal of using of an ESB in a system is",
                "image": [],
                "options": [
                    "To facilitate the interaction among heterogeneous\n      components that use distinct communication protocols",
                    "To promote the use of a common communication protocol for\n      all the remaining components of the system",
                    "To increase the performance of the interaction between\n      the components of the system",
                    "To create a strong coupling between the various services\n      provided by the organization"
                ]
            },
            {
                "questionId": "WhiteBoxTestingINGLES",
                "content": "Consider the following excerpt from the Wikipedia page on\n    \\emph{white-box testing}:\n    \\begin{quote}\n      White-box testing is a method of testing software that tests\n      internal structures or workings of an application, as opposed to\n      its functionality. In white-box testing an internal perspective\n      of the system (including the module's code), as well as\n      programming skills, are required and used to design test\n      cases. The tester chooses inputs to exercise paths through the\n      code and determine the appropriate outputs.\n    \\end{quote}\n  \n    Assuming that you belong to the team testing a complex system and\n    that you are responsible for performing white box tests on the\n    system, which of the following architectural views of the system\n    would be most useful to you?",
                "image": [],
                "options": [
                    "Work Assignment views",
                    "Generalization views",
                    "Deployment views",
                    "Implementation views"
                ]
            },
            {
                "questionId": "ArqChrome",
                "content": "The Chromium is a web browser that introduced an innovative architecture. In the Chromium description we can read:\n \n  \\begin{quote}\n    We use separate processes for browser tabs to protect the overall\n    application from bugs and glitches in the rendering engine.  We\n    also restrict access from each rendering engine process to others\n    and to the rest of the system.  In some ways, this brings to web\n    browsing the benefits that memory protection and access control\n    brought to operating systems.\n\n    We refer to the main process that runs the UI and manages tab and\n    plugin processes as the \"browser process\" or \"browser.\"  Likewise,\n    the tab-specific processes are called \"render processes\" or\n    \"renderers.\"  The renderers use the WebKit open-source layout\n    engine for interpreting and laying out HTML.\n  \\end{quote}\n  \n  Which architectural style should we use to represent this aspect of Chromium?",
                "image": [],
                "options": [
                    "Communicating Processes",
                    "Client-Server",
                    "Peer-to-Peer",
                    "Uses"
                ]
            },
            {
                "questionId": "TwitterOne",
                "content": "Consider the following description of the behavior of Twitter ingestion mechanisms\n    \n    \\begin{quote}\n        Write. when a tweet  comes in there's an O(n) process to write to Redis clusters, where n is the number of people following you. Painful for Lady Gaga and Barack Obama where they are doing 10s of millions of inserts across the cluster. All the Redis clusters are backing disk, the Flock cluster stores the user timeline to disk, but usually timelines are found in RAM in the Redis cluster.\n    \\end{quote}",
                "image": [],
                "options": [
                    "The quality being addressed is performance and the tactic multiple copies of data",
                    "The quality being addressed is performance and the tactic multiple copies of computation",
                    "The quality being addressed is performance and the tactics multiple copies of data and multiple copies of computation",
                    "The quality being addressed is availability and the tactic passive redundancy"
                ]
            },
            {
                "questionId": "TwitterThree",
                "content": "Consider the following description of the behavior of Twitter\n    \n    \\begin{quote}\n        Solution is a write based fanout approach. Do a lot of processing when tweets arrive to figure out where tweets should go. This makes read time access fast and easy. Don't do any computation on reads. With all the work being performed on the write path ingest rates are slower than the read path, on the order of 4000 QPS.\n    \\end{quote}\n    \n    To describe the performance quality of this behavior, and considering that the number of reads is much higher than the number of writes, we need to have a view that includes",
                "image": [],
                "options": [
                    "Tiers style",
                    "Client-server style",
                    "Shared-data style",
                    "Pipe-and-filter style"
                ]
            },
            {
                "questionId": "MicroservicesOne",
                "content": "Consider the Microservice architectural style. Which of the following sentences \\textbf{does not} describe an advantage of microservices?",
                "image": [],
                "options": [
                    "Each service can be developed and deployed independently",
                    "Easier to scale development",
                    "Eliminates any long-term commitment to a technology stack",
                    "Testing is easier"
                ]
            },
            {
                "questionId": "MicroAndAmazonThree",
                "content": "In the interview Werner Vogels from Amazon gives to Jim Gray, Werner Vogels says that\n    \n    \\begin{quote}\n        The stored data formats are decoupled from the format in which you communicate data items. If there is no need for sharing schemas of the actual storage layout, you can focus on making sure that the service interfaces can evolve in a way that allows you to handle variations of data formats. \n    \\end{quote}\n    \n    Which means that in the software architecture of Amazon's systems",
                "image": [],
                "options": [
                    "The shared-data architectural style is not applied because data is encapsulated inside services",
                    "The sharing of data is done using a service-oriented architecture",
                    "Modifiability is not a concern of their architecture",
                    "The decouple of data formats does not support scalability because of the transactional properties"
                ]
            },
            {
                "questionId": "BoundedContextOne",
                "content": "Consider the following representation of a system following a microservices architecture,\n      \n      \\begin{center}\n          \\includegraphics[width=140mm]{../MicroservicesArchitecture}\n      \\end{center}\n      \n      After an invocation through the REST API",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2016/MicroservicesArchitecture.png",
                        "width": 140
                    }
                ],
                "options": [
                    "an ACID transaction occurs in all the involved applications",
                    "a two-phase commit protocol takes place between the involved applications",
                    "a ACID transaction occurs in each of the involved applications, but we can not infer which transaction occurs first",
                    "an ACID transaction occurs in the invoked application and ACID transactions in the other involved applications will eventually occur later"
                ]
            },
            {
                "questionId": "DomainDesignOne",
                "content": "Consider the following figure\n      \n      \\begin{center}\n          \\includegraphics[width=70mm]{../ProductDomainModelTwo}\n      \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2016/ProductDomainModelTwo.png",
                        "width": 70
                    }
                ],
                "options": [
                    "The access to two different aggregate instances in the context of the same request does not hinder scalability",
                    "This is the solution followed by Twitter client applications",
                    "It describes the typical behavior of a microservices system",
                    "To support high scalability the request of \\texttt{User 1} needs to be decomposed into a request to only one of the aggregate instances and the processing in the other aggregate occurs in the background"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2016/20170113Exam/exame-20170113-companion-B.tex",
        "quizTitle": "..-data-2016-20170113Exam-exame-20170113-companion-B",
        "questions": [
            {
                "questionId": "AvailabilityINGLES",
                "content": "Suppose that, to satisfy an availability requirement related with\n    the occurrence of faults at the network infrastructure used by\n    your system, you want to use the tactic named \\emph{Ping/Echo}.\n    How does the use of that tactic manifests in the architectural\n    views of your system?",
                "image": [],
                "options": [
                    "Only in the Deployment view",
                    "Only in the Decomposition view",
                    "Only in a component-and-connector view",
                    "Both in a component-and-connector and the Deployment\n      views"
                ]
            },
            {
                "questionId": "PeerToPeerDynamicReconfiguration",
                "content": "In the description of the Gnutella system can be read:\n    \n    \\begin{quote}\n        The topology of the system changes at runtime as peer components connect and disconnect to the network.\n    \\end{quote}",
                "image": [],
                "options": [
                    "When a peer connects to the network it establishes connections with all other peers in the network",
                    "The behavior described in the sentence can be represented in a view where the dynamic reconfiguration architectural style is used",
                    "When a peer receives a connection it sends all its files to the peer connecting it",
                    "The behavior described in the sentence can be represented in a view where the tier architectural style is used"
                ]
            },
            {
                "questionId": "PipeFilterComposition",
                "content": "The Pipe-and-Filter style allows composition of filters",
                "image": [],
                "options": [
                    "But when the filters are executed sequentially the composition power is reduced",
                    "Which improves modifiability, because filters are decoupled through pipes",
                    "But the size of buffers may reduce the composition power",
                    "And filters do not have to agree on the data formats"
                ]
            },
            {
                "questionId": "SOAINGLES",
                "content": "In the Service Oriented Architecture style it is common to have a\n    specialized component, named \\emph{Enterprise Service Bus} (ESB).\n    The goal of using of an ESB in a system is",
                "image": [],
                "options": [
                    "To facilitate the interaction among heterogeneous\n      components that use distinct communication protocols",
                    "To promote the use of a common communication protocol for\n      all the remaining components of the system",
                    "To increase the performance of the interaction between\n      the components of the system",
                    "To create a strong coupling between the various services\n      provided by the organization"
                ]
            },
            {
                "questionId": "WhiteBoxTestingINGLES",
                "content": "Consider the following excerpt from the Wikipedia page on\n    \\emph{white-box testing}:\n    \\begin{quote}\n      White-box testing is a method of testing software that tests\n      internal structures or workings of an application, as opposed to\n      its functionality. In white-box testing an internal perspective\n      of the system (including the module's code), as well as\n      programming skills, are required and used to design test\n      cases. The tester chooses inputs to exercise paths through the\n      code and determine the appropriate outputs.\n    \\end{quote}\n  \n    Assuming that you belong to the team testing a complex system and\n    that you are responsible for performing white box tests on the\n    system, which of the following architectural views of the system\n    would be most useful to you?",
                "image": [],
                "options": [
                    "Work Assignment views",
                    "Generalization views",
                    "Deployment views",
                    "Implementation views"
                ]
            },
            {
                "questionId": "ArqChrome",
                "content": "The Chromium is a web browser that introduced an innovative architecture. In the Chromium description we can read:\n \n  \\begin{quote}\n    We use separate processes for browser tabs to protect the overall\n    application from bugs and glitches in the rendering engine.  We\n    also restrict access from each rendering engine process to others\n    and to the rest of the system.  In some ways, this brings to web\n    browsing the benefits that memory protection and access control\n    brought to operating systems.\n\n    We refer to the main process that runs the UI and manages tab and\n    plugin processes as the \"browser process\" or \"browser.\"  Likewise,\n    the tab-specific processes are called \"render processes\" or\n    \"renderers.\"  The renderers use the WebKit open-source layout\n    engine for interpreting and laying out HTML.\n  \\end{quote}\n  \n  Which architectural style should we use to represent this aspect of Chromium?",
                "image": [],
                "options": [
                    "Communicating Processes",
                    "Client-Server",
                    "Peer-to-Peer",
                    "Uses"
                ]
            },
            {
                "questionId": "SoftwareArchitectureOne",
                "content": "Consider that a software development team uses an agile methodology\n  such as XP (Extreme Programming), where no documentation is\n  produced.  Then, the systems developed by that team",
                "image": [],
                "options": [
                    "Typically have a software architecture that results\n    from the common knowledge about the system that is shared among\n    the team members",
                    "Do not have a software architecture, because in agile\n    methodologies there is no architectural design phase",
                    "Do not have a software architecture, because the practice of\n    refactoring allows changing every part of the system easily",
                    "May have a software architecture, but that architecture is\n    not known because it was neither designed nor documented"
                ]
            },
            {
                "questionId": "RequirementsImpact",
                "content": "The requirements impact on how an architecture is designed",
                "image": [],
                "options": [
                    "However, functional requirements do not have any impact on the architecture because the systemic qualities of an architecture are non-functional",
                    "The functional requirements have a large impact on the definition of views of the component-and-connector viewtype because each component executes a functionality",
                    "The functional requirements have a large impact on the definition of views of the module viewtype because they are used to define the high cohesion and low coupling of modules",
                    "The functional requirements can be considered as constraints on the software architecture design"
                ]
            },
            {
                "questionId": "AvailabilityScenarioOne",
                "content": "Consider the following scenario\n      \n      \\begin{quote}\n          If one of the application servers fails to respond when the system is in its normal operation state, the load balancer should redirect requests to another application server.\n      \\end{quote}",
                "image": [],
                "options": [
                    "The stimulus is incorrect response",
                    "The artefact is the load balancer",
                    "The response is not correctly stated",
                    "The quality it addresses is interoperability"
                ]
            },
            {
                "questionId": "AvailabilityVotingEN",
                "content": "The availability quality can be supported by a voting tactic in order to identify faults of",
                "image": [],
                "options": [
                    "Programming, if the components execute modules developed by different teams",
                    "Hardware, if there is hardware redundancy",
                    "Operating Systems, if redundant components execute on top of different operating systems",
                    "All the previous options"
                ]
            },
            {
                "questionId": "MWResourceLoaderTacticEEEN",
                "content": "Consider the following fragment of the \\emph{MediaWiki} system description:\n      \\newline\n      \n      \\emph{To optimize the delivery of JavaScript and CSS assets, the ResourceLoader module was developed to optimize delivery of JS and CSS. Started in 2009, it was completed in 2011 and has been a core feature of MediaWiki since version 1.17. ResourceLoader works by loading JS and CSS assets on demand, thus reducing loading and parsing time when features are unused, for example by older browsers. It also minifies the code, groups resources to save requests, and can embed images as data URIs}\n      \\newline\n      \n      The \\emph{ResourceLoader} supports a quality",
                "image": [],
                "options": [
                    "Performance",
                    "Usability",
                    "Availability",
                    "Modifiability"
                ]
            },
            {
                "questionId": "PerfomanceTacticOne",
                "content": "In which performance tactic it may occur that not all the inputs are processed",
                "image": [],
                "options": [
                    "Manage sampling rate",
                    "Limit event response",
                    "Reduce overhead",
                    "Bound execution times"
                ]
            },
            {
                "questionId": "ScalabilityINGLES",
                "content": "Several of the cases studied in this course had scalability\n    requirements.  That means that those systems should be designed in\n    such a way that they",
                "image": [],
                "options": [
                    "Have high throughput",
                    "Have low latency",
                    "Allow many simultaneous users",
                    "May be easily changed to increase their performance"
                ]
            },
            {
                "questionId": "LayersTactics",
                "content": "The main tactic associated with the layered architectural style is:",
                "image": [],
                "options": [
                    "Split module",
                    "Encapsulate",
                    "Restrict dependencies",
                    "Defer binding"
                ]
            },
            {
                "questionId": "AdventureBuilderThree",
                "content": "Consider the following architectural view of the Adventure Builder system, designed around the Order Processing Center\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{../AdventureBuilderCandC}\n    \\end{center}\n    \n    The views \\textbf{does not} use the architectural style",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2016/AdventureBuilderCandC.png",
                        "width": 120
                    }
                ],
                "options": [
                    "Per-to-peer",
                    "Shared-data",
                    "Communicating processes",
                    "Publish-subscribe"
                ]
            },
            {
                "questionId": "AdventureBuilderFive",
                "content": "Consider the following requirement for availability of the Adventure Builder system\n    \n    \\begin{quote}\n        The Consumer Web site sent a purchase order request to the order processing center (OPC). The OPC processed that request but didn't reply to Consumer Web site within five seconds, so the Consumer Web site resends the request to the OPC.\n    \\end{quote}\n    \n    If we represent this requirement as a scenario",
                "image": [],
                "options": [
                    "The stimulus is an omission and the tactic is retry",
                    "The stimulus is a crash and the tactic is retry",
                    "The stimulus is an incorrect timing and the tactic is ignore faulty behaviour",
                    "The stimulus is incorrect response and the tactic is voting"
                ]
            },
            {
                "questionId": "DVDCatalogMeta",
                "content": "Consider the module viewtype views of the DVD Catalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        The application should support other kinds of catalogs (CDs, games, books, ...). \n    \\end{quote}\n    \n    This requirement requires a change of",
                "image": [],
                "options": [
                    "The layered view to support a new specific layer for the customization of the catalog",
                    "The layered view to accommodate a new layer for each kind of catalog, which other layers may use",
                    "The data model view in order to define entities for each kind of catalog",
                    "The data model view in order to define generic entities that can be customized for different kinds of catalogs"
                ]
            },
            {
                "questionId": "TwitterOne",
                "content": "Consider the following description of the behavior of Twitter ingestion mechanisms\n    \n    \\begin{quote}\n        Write. when a tweet  comes in there's an O(n) process to write to Redis clusters, where n is the number of people following you. Painful for Lady Gaga and Barack Obama where they are doing 10s of millions of inserts across the cluster. All the Redis clusters are backing disk, the Flock cluster stores the user timeline to disk, but usually timelines are found in RAM in the Redis cluster.\n    \\end{quote}",
                "image": [],
                "options": [
                    "The quality being addressed is performance and the tactic multiple copies of data",
                    "The quality being addressed is performance and the tactic multiple copies of computation",
                    "The quality being addressed is performance and the tactics multiple copies of data and multiple copies of computation",
                    "The quality being addressed is availability and the tactic passive redundancy"
                ]
            },
            {
                "questionId": "TwitterThree",
                "content": "Consider the following description of the behavior of Twitter\n    \n    \\begin{quote}\n        Solution is a write based fanout approach. Do a lot of processing when tweets arrive to figure out where tweets should go. This makes read time access fast and easy. Don't do any computation on reads. With all the work being performed on the write path ingest rates are slower than the read path, on the order of 4000 QPS.\n    \\end{quote}\n    \n    To describe the performance quality of this behavior, and considering that the number of reads is much higher than the number of writes, we need to have a view that includes",
                "image": [],
                "options": [
                    "Tiers style",
                    "Client-server style",
                    "Shared-data style",
                    "Pipe-and-filter style"
                ]
            },
            {
                "questionId": "MicroservicesOne",
                "content": "Consider the Microservice architectural style. Which of the following sentences \\textbf{does not} describe an advantage of microservices?",
                "image": [],
                "options": [
                    "Each service can be developed and deployed independently",
                    "Easier to scale development",
                    "Eliminates any long-term commitment to a technology stack",
                    "Testing is easier"
                ]
            },
            {
                "questionId": "MicroAndAmazonThree",
                "content": "In the interview Werner Vogels from Amazon gives to Jim Gray, Werner Vogels says that\n    \n    \\begin{quote}\n        The stored data formats are decoupled from the format in which you communicate data items. If there is no need for sharing schemas of the actual storage layout, you can focus on making sure that the service interfaces can evolve in a way that allows you to handle variations of data formats. \n    \\end{quote}\n    \n    Which means that in the software architecture of Amazon's systems",
                "image": [],
                "options": [
                    "The shared-data architectural style is not applied because data is encapsulated inside services",
                    "The sharing of data is done using a service-oriented architecture",
                    "Modifiability is not a concern of their architecture",
                    "The decouple of data formats does not support scalability because of the transactional properties"
                ]
            },
            {
                "questionId": "BoundedContextOne",
                "content": "Consider the following representation of a system following a microservices architecture,\n      \n      \\begin{center}\n          \\includegraphics[width=140mm]{../MicroservicesArchitecture}\n      \\end{center}\n      \n      After an invocation through the REST API",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2016/MicroservicesArchitecture.png",
                        "width": 140
                    }
                ],
                "options": [
                    "an ACID transaction occurs in all the involved applications",
                    "a two-phase commit protocol takes place between the involved applications",
                    "a ACID transaction occurs in each of the involved applications, but we can not infer which transaction occurs first",
                    "an ACID transaction occurs in the invoked application and ACID transactions in the other involved applications will eventually occur later"
                ]
            },
            {
                "questionId": "DomainDesignOne",
                "content": "Consider the following figure\n      \n      \\begin{center}\n          \\includegraphics[width=70mm]{../ProductDomainModelTwo}\n      \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2016/ProductDomainModelTwo.png",
                        "width": 70
                    }
                ],
                "options": [
                    "The access to two different aggregate instances in the context of the same request does not hinder scalability",
                    "This is the solution followed by Twitter client applications",
                    "It describes the typical behavior of a microservices system",
                    "To support high scalability the request of \\texttt{User 1} needs to be decomposed into a request to only one of the aggregate instances and the processing in the other aggregate occurs in the background"
                ]
            },
            {
                "questionId": "HadoopDisponibilidadeDadosINGLES",
                "content": "One of the key requirements for the HDFS system is that the data\n    stored in the system remains available, even in the presence of\n    various types of failures (non simultaneous) in the hardware in\n    which the system executes.  To show that the system satisfies this\n    requirement",
                "image": [],
                "options": [
                    "We must use various different views, both of the\n      component-and-connector and the allocation viewtypes",
                    "We just have to show, through component-and-connector\n      views, that the system maintains replicas of the data in\n      different components",
                    "We just have to show, through Deployment views,\n      that the \\emph{DataNode} component executes in more than one\n      machine of the cluster",
                    "We just have to show, through Decomposition views, that\n      there are modules responsible for the replication of file blocks"
                ]
            },
            {
                "questionId": "HadoopTacticasRecuperacaoFaltasINGLES",
                "content": "In the HDFS system the fault recovery tactics are:",
                "image": [],
                "options": [
                    "Active replication and passive replication",
                    "Active replication, passive replication, and spare",
                    "Passive replication and spare",
                    "Quorum, active replication, and passive replication"
                ]
            },
            {
                "questionId": "SecondEEEN",
                "content": "The documentation of the software architecture for a system is often\n  composed of several views, because",
                "image": [],
                "options": [
                    "Different stakeholders are interested in different views of the system",
                    "A single view would be too simplistic",
                    "The views describe different aspects of the system",
                    "All of the above"
                ]
            },
            {
                "questionId": "ModuleViewType",
                "content": "The quality that is more relevant to views of the module viewtype is:",
                "image": [],
                "options": [
                    "Modifiability",
                    "Usability",
                    "Security",
                    "Availability"
                ]
            },
            {
                "questionId": "MemcachedModulesINGLES",
                "content": "Consider the following description of \\emph{Memcached}, which is\n    adapted from its Wiki:\n    \\begin{quote}\n      Memcached is an in-memory key-value store for small chunks of\n      arbitrary data from results of database calls, API calls, or\n      page rendering.  It is made up of:\n      \\begin{itemize}\n      \\item Client software, which is given a list of available memcached servers.\n      \\item A client-based hashing algorithm, which chooses a server\n        based on the \"key\" input.\n      \\item Server software, which stores your values with their keys\n        into an internal hash table.\n      \\item Server algorithms, which determine when to throw out old\n        data (if out of memory), or reuse memory.\n      \\end{itemize}\n    \\end{quote}\n    Suppose that you want to present an architectural view for\n    \\emph{Memcached} that represents the above information.  Which\n    view is more adequate?",
                "image": [],
                "options": [
                    "A view of the Data Model style",
                    "A view of the Layers style",
                    "A view of the Decomposition style",
                    "A view of the Uses style"
                ]
            },
            {
                "questionId": "AspectsINGLES",
                "content": "Using the Aspects architectural style promotes the modifiability\n    of a system because",
                "image": [],
                "options": [
                    "It imposes restrictions on which uses relationships may\n      exist between the system's modules",
                    "It makes it easier to create generalization relationships\n      between the system's modules",
                    "It separates in new modules responsibilities that were\n      spread over various of the system's modules",
                    "It allows the decomposition of each of the system's\n      modules into finer grained modules"
                ]
            },
            {
                "questionId": "LayeredAspectsDataModelTwo",
                "content": "Suppose that you are implementing a module in a system that has a two layered architecture.\n     Knowing that your module belongs to the upper layer (assuming the usual notation\n     for the layer style), this means that you",
                "image": [],
                "options": [
                    "Can use the operations defined in any of the system's modules",
                    "Can use the operations defined in the lower layer, but not the ones defined in\n         the upper layer",
                    "Can use the operations defined in the upper layer, but not the ones defined in\n         the lower layer",
                    "Should use some operation defined in the lower layer"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2016/20170131Exam/exame-20170131-companion-A.tex",
        "quizTitle": "..-data-2016-20170131Exam-exame-20170131-companion-A",
        "questions": [
            {
                "questionId": "SoftwareArchitectureTwo",
                "content": "The software architecture of a system",
                "image": [],
                "options": [
                    "Is a high-level view of the system with the purpose of\n  understanding what are the system's goals and features",
                    "Is composed of things such as code units, runtime elements,\n  hardware, and people, together with the relationships among them",
                    "Is a set of guidelines that the developing team should\n  follow in the development of the system",
                    "Is a set of diagrams that show the runtime elements of the\n  system and their relationships"
                ]
            },
            {
                "questionId": "ConcreteScenarios",
                "content": "As part of the process of creating an architecture, we talked about\n  a framework for capturing some of the requirements for a system.  In\n  this context, \\textbf{concrete scenarios} are used for",
                "image": [],
                "options": [
                    "Describing what are the qualities that the system should possess",
                    "Describing a set of steps that a user of the system must\n  perform to accomplish some task",
                    "Describing a use case for the system that makes clear what\n  should be the system's responses to each of the user's inputs",
                    "Describing the system's features by way of different\n  usage scenarios for it, in which users play the role of actors"
                ]
            },
            {
                "questionId": "AvailabilityScenarioTwo",
                "content": "Consider the following availability scenario\n      \n      \\begin{quote}\n         If one of the application servers fails to respond to a request when the system is in its normal operation state, the system should notify the operator and continue to operate normally.\n      \\end{quote}",
                "image": [],
                "options": [
                    "The scenario is not correct",
                    "The scenario is correct but it does not describe whether the request the servers fails to respond to succeeds or fails",
                    "The scenario is correct but it is not clear what is the artefact",
                    "The scenario is not completely correct because it contains two responses"
                ]
            },
            {
                "questionId": "AvailabilityINGLES",
                "content": "Suppose that, to satisfy an availability requirement related with\n    the occurrence of faults at the network infrastructure used by\n    your system, you want to use the tactic named \\emph{Ping/Echo}.\n    How does the use of that tactic manifests in the architectural\n    views of your system?",
                "image": [],
                "options": [
                    "Only in the Deployment view",
                    "Only in the Decomposition view",
                    "Only in a component-and-connector view",
                    "Both in a component-and-connector and the Deployment\n      views"
                ]
            },
            {
                "questionId": "InfinispanThree",
                "content": "Consider the following description of the \\emph{Infinispan} system:\n    \n    \\begin{quote}\n        Before putting data on the network, application objects need to be serialized into bytes so that they can be pushed across a network, into the grid, and then again between peers. The bytes then need to be de-serialized back into application objects, when read by the application. In most common configurations, about 20\\% of the time spent in processing a request is spent in serialization and de-serialization.\n    \\end{quote}\n    \n    The above description can motivate a scenario for",
                "image": [],
                "options": [
                    "Performance",
                    "Availability",
                    "Modifiability",
                    "Reliability"
                ]
            },
            {
                "questionId": "PerfomanceTacticTwo",
                "content": "In which performance tactic it can occur that the inputs are not completely processed, even though they always start being processed",
                "image": [],
                "options": [
                    "Manage sampling rate",
                    "Limit event response",
                    "Reduce overhead",
                    "Bound execution times"
                ]
            },
            {
                "questionId": "ModifiabilityScenario",
                "content": "Consider the following modifiability scenario\n    \n    \\begin{quote}\n        The effort necessary to successfully port the system to execute in a new browser should not be higher than 5 person/month.\n    \\end{quote}",
                "image": [],
                "options": [
                    "The stimulus is to port the system to a new browser",
                    "The environment is build time",
                    "The response is 5 person/month",
                    "To implement the above scenario it is necessary to apply a runtime defer binding tactic"
                ]
            },
            {
                "questionId": "AspectsTactics",
                "content": "The main tactic associated with the aspects architectural style is:",
                "image": [],
                "options": [
                    "Split module",
                    "Increase semantic coherence",
                    "Restrict dependencies",
                    "Defer binding"
                ]
            },
            {
                "questionId": "HadoopStakeholdersEurosINGLES",
                "content": "In the HDFS system, in the stakeholders perspective, the use of low cost servers to build the clusters is:",
                "image": [],
                "options": [
                    "Essential to ensure the system scalability",
                    "Essential to reduce costs whenever there is a fault in a hardware element",
                    "Essential to ensure the system portability",
                    "Essential to facilitate the integration with legacy systems"
                ]
            },
            {
                "questionId": "HadoopHeartbeatINGLES",
                "content": "In HDFS, during normal operation DataNodes use the heartbeat tactic",
                "image": [],
                "options": [
                    "Because this tactic simplifies the addition and removal of DataNodes",
                    "But they could have used the ping tactic instead without adding any overhead to the NameNode",
                    "But the exceptions tactic could have been used as well",
                    "To inform other DataNodes about their availability"
                ]
            },
            {
                "questionId": "ArchitecturalViews",
                "content": "A software system is usually described using different architectural views",
                "image": [],
                "options": [
                    "Each view contains a single architectural style",
                    "Views need to contain more than one architectural style",
                    "A view may not contain any architectural style",
                    "None of the above"
                ]
            },
            {
                "questionId": "FunctionalModule",
                "content": "When designing an architecture requirements can be split into functional, quality attributes, and constraints. Functional requirements have impact on:",
                "image": [],
                "options": [
                    "A module view",
                    "A component-and-connector view",
                    "An allocation view",
                    "They are not represented by a view"
                ]
            },
            {
                "questionId": "SubcontractorsINGLES",
                "content": "Suppose that you are developing a software architecture for a new\n    large scale system and that you intend to resort extensively to\n    third party subcontractors for the development of various parts of\n    the system.  Which architectural styles are most useful to plan\n    the development of the system in this case?",
                "image": [],
                "options": [
                    "The Decomposition and the Work Assignment styles",
                    "The Decomposition and the Layers styles",
                    "The Decomposition and the Uses styles",
                    "The Decomposition and the SOA styles"
                ]
            },
            {
                "questionId": "UsesStyle",
                "content": "To achieve a faster time-to-market, software companies are\n  increasingly using a strategy of incremental releases of their\n  software, where each new release has a set of new features.  Which\n  architectural style is better to analyse whether the system's\n  software architecture is adequate for the planned incremental\n  releases?",
                "image": [],
                "options": [
                    "The Decomposition style",
                    "The Deployment style",
                    "The Uses style",
                    "The Work-assignment style"
                ]
            },
            {
                "questionId": "nginxModuleTypesINGLES",
                "content": "According to the document that describes nginx:\n    \\begin{quote}\n      nginx's modular architecture generally allows developers to\n      extend the set of web server features without modifying the\n      nginx core.  nginx modules come in slightly different\n      incarnations, namely core modules, event modules, phase\n      handlers, protocols, variable handlers, filters, upstreams and\n      load balancers.  [...]  Event modules provide a particular\n      OS-dependent event notification mechanism like kqueue or epoll.\n      Protocol modules allow nginx to communicate through HTTPS,\n      TLS/SSL, SMTP, POP3 and IMAP.\n    \\end{quote}\n    Which architectural style is more adequate to represent the\n    information presented above?",
                "image": [],
                "options": [
                    "The Generalization style",
                    "The Uses style",
                    "The Layers style",
                    "The Aspects style"
                ]
            },
            {
                "questionId": "AdventureBuilderFour",
                "content": "Consider the following architectural view of the Adventure Builder system, designed around the Order Processing Center\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{../AdventureBuilderCandC}\n    \\end{center}\n    \n    The views \\textbf{does not} allow the reason about the quality of",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2016/AdventureBuilderCandC.png",
                        "width": 120
                    }
                ],
                "options": [
                    "Interoperability",
                    "Modifiability",
                    "Performance",
                    "Security"
                ]
            },
            {
                "questionId": "AdventureBuilderSix",
                "content": "Consider the following requirement for availability of the Adventure Builder system\n    \n    \\begin{quote}\n        The Consumer Web site is available to the user 24x7. If an instance of OPC application fails, the fault is detected and the system administrator is notified in 30 seconds; the system continues taking order requests; another OPC instance is automatically created; and data remains in consistent state.\n    \\end{quote}\n    \n    In order to support this quality it is necessary to",
                "image": [],
                "options": [
                    "Use a passive redundancy tactic in the OPC (Order Processing Center)",
                    "Use a passive redundancy tactic in the Consumer Web site",
                    "Use an active redundancy tactic in the OPC (Order Processing Center) ",
                    "Use an active redundancy tactic in the Consumer Web site"
                ]
            },
            {
                "questionId": "DVDCatalogMobile",
                "content": "Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        To support iPhone/iPad/Android version with sync, which allows offline use of the application in the mobile device and data synchronization to occur when a connection is available\n    \\end{quote}\n    \n    This requirement requires a change of",
                "image": [],
                "options": [
                    "The decomposition view to include a module for the synchronization responsibilities",
                    "The uses view to represent how the mobile device uses the Catalog application",
                    "The layered view to include a layer for each type of device",
                    "The domain layer of the layered style to represent the types of devices"
                ]
            },
            {
                "questionId": "TiposVistaDesempenhoINGLES",
                "content": "To analyse the performance of a system",
                "image": [],
                "options": [
                    "Only views of the component-and-connector viewtype are needed",
                    "All viewtypes may be necessary",
                    "Only views of the component-and-connector viewtype and allocation viewtype are needed",
                    "Views of the module viewtype are not needed"
                ]
            },
            {
                "questionId": "PeerToPeerSpace",
                "content": "The Peer-to-Peer architectural style provides high scalability and availability. In the context of a file sharing system",
                "image": [],
                "options": [
                    "The file transfers follows the same path of nodes used to identify where the file was located",
                    "The peer initiating the request for a file needs to know where the file is located",
                    "If a peer providing a file crashes it is necessary to restart downloading the file from the begin",
                    "The price for high scalability and availability is the need to have several replicas of the files to be shared"
                ]
            },
            {
                "questionId": "TresTiersINGLES",
                "content": "Currently, the most popular architecture for an enterprise\n    application is composed of 3 tiers.  The three tiers are",
                "image": [],
                "options": [
                    "The presentation logic layer, domain logic layer, and\n      data access layer",
                    "The traditional web applications, the mashups, and the rich internet applications (RIAs)",
                    "The web browser, o web server, and the data base",
                    "The web services layer, the domain logic layer, and the\n      data access layer"
                ]
            },
            {
                "questionId": "ChromeMultiPlatform",
                "content": "The Chromium is a web browser that introduced an innovative architecture. In the Chromium description we can read:\n\n  \\begin{quote}\n    Chromium is a large and complex cross-platform product.  We try to\n    share as much code as possible between platforms, while\n    implementing the UI and OS integration in the most appropriate way\n    for each.  While this gives a better user experience, it adds\n    extra complexity to the code.  This document describes the\n    recommended practices for keeping such cross-platform code clean.\n\n    We use a variety of different file naming suffixes to indicate\n    when a file should be used:\n    \\begin{itemize}\n    \\item Windows files use the \\texttt{\\_win} suffix.\n    \\item Cocoa (Mac UI) files use the \\texttt{\\_cocoa} suffix, and lower-level Mac files use the \\texttt{\\_mac} suffix.\n    \\item Linux files use \\texttt{\\_linux} for lower-level files, \\texttt{\\_gtk} for GTK-specific files, and \\texttt{\\_x} for X Windows (with no GTK) specific files.\n    \\item Posix files shared between Mac and Linux use the \\texttt{\\_posix} suffix.\n    \\item Files for Chrome's ``Views'' UI (on Windows and experimental GTK) layout system use the \\texttt{\\_views} suffix.\n   \\end{itemize}\n\n    The separate front-ends of the browser are contained in their own directories:\n    \\begin{itemize}\n    \\item Windows Views (and the experimental GTK-views): \\\\\n      \\texttt{chrome/browser/ui/views}\n    \\item Linux GTK: \\texttt{chrome/browser/gtk}\n    \\item Mac: \\texttt{chrome/browser/cocoa}\n    \\end{itemize}\n  \\end{quote}\n  \n  Which architectural style should we use to represent this aspect of Chromium?",
                "image": [],
                "options": [
                    "Implementation",
                    "Work assignment",
                    "Decomposition",
                    "None, because this description does not describe any architectural aspect of the system"
                ]
            },
            {
                "questionId": "SOAInteroperability",
                "content": "The Service-Oriented Architecture style improves interoperability because",
                "image": [],
                "options": [
                    "It enforces the use of a single implementation language among all applications",
                    "The orchestration is in charge of improving the transparent location of service providers",
                    "The enterprise service bus coordinates the execution of several services",
                    "It decouples applications developed for different organizations"
                ]
            },
            {
                "questionId": "InstallView",
                "content": "Consider a system that will require a significative configuration effort during deployment, because it provides several variations of the same functionalities and it is necessary to choose which functionalities better fit in each case. The most helpful architectural view for this situation is",
                "image": [],
                "options": [
                    "Work assignment view",
                    "Install view",
                    "Implementation view",
                    "Deployment view"
                ]
            },
            {
                "questionId": "TwitterTwo",
                "content": "Consider the following description of the behavior of Twitter\n    \n    \\begin{quote}\n        Solution is a write based fanout approach. Do a lot of processing when tweets arrive to figure out where tweets should go. This makes read time access fast and easy. Don't do any computation on reads. With all the work being performed on the write path ingest rates are slower than the read path, on the order of 4000 QPS.\n    \\end{quote}\n    \n    To describe this behavior we need to",
                "image": [],
                "options": [
                    "Write a single scenario on performance",
                    "Write two scenarios on performance",
                    "Write a scenario on performance and a scenario on interoperability",
                    "Write a single scenario on interoperability"
                ]
            },
            {
                "questionId": "TwitterFour",
                "content": "Consider the following description of the behavior of Twitter ingestion mechanisms\n    \n    \\begin{quote}\n        Write. when a tweet  comes in there's an O(n) process to write to Redis clusters, where n is the number of people following you. Painful for Lady Gaga and Barack Obama where they are doing 10s of millions of inserts across the cluster. All the Redis clusters are backing disk, the Flock cluster stores the user timeline to disk, but usually timelines are found in RAM in the Redis cluster.\n    \\end{quote}\n    \n    The view that represents this behavior should be of the",
                "image": [],
                "options": [
                    "Module viewtype",
                    "Component-and-connector viewtype",
                    "Install architectural style of the allocation viewtype",
                    "It is not necessary to represent this behavior because it does not describe any qualities"
                ]
            },
            {
                "questionId": "MicroservicesTwo",
                "content": "Consider the following definition of Microservice architectural style by Martin Fowler\n    \n    \\begin{quote}\n        The microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies.\n    \\end{quote}\n    \n    To represent an architecture based on Microservices",
                "image": [],
                "options": [
                    "We do not need a view of the module viewtype because it is about the runtime properties of the system",
                    "We do not need a view of the allocation viewtype because deployment is automated",
                    "The component-and-connector view should emphasize the performance qualities of systems following the microservices architecture",
                    "It is necessary to use views of the three viewtypes"
                ]
            },
            {
                "questionId": "WorldWideEN",
                "content": "In world-wide systems like Facebook or Amazon,",
                "image": [],
                "options": [
                    "All functionalities can be transactional",
                    "Only a small set of functionalities are transactional",
                    "It is not necessary to have transactional properties because all data is in memory",
                    "Only the isolation property of transactions is supported"
                ]
            },
            {
                "questionId": "BoundedContextTwo",
                "content": "Consider the following representation of a system following a microservices architecture,\n      \n      \\begin{center}\n          \\includegraphics[width=140mm]{../MicroservicesArchitecture}\n      \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2016/MicroservicesArchitecture.png",
                        "width": 140
                    }
                ],
                "options": [
                    "When an event is published to the distributed log, the order of delivery to the different subscribing applications is predefined",
                    "When two events are published to the distributed log they are delivered to the different subscribing applications in the same order",
                    "The distributed log guarantees that events will be delivered only once",
                    "The distributed log may not deliver some of the events that are published to their subscribers"
                ]
            },
            {
                "questionId": "DomainDesignTwo",
                "content": "Consider the following data model\n      \n      \\begin{center}\n          \\includegraphics[width=80mm]{../ProductDomainModel}\n      \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2016/ProductDomainModel.png",
                        "width": 80
                    }
                ],
                "options": [
                    "It allows high scalability because the data model has only four entities",
                    "It allows high scalability because it is possible the implement transactions associated to each one of the aggregates",
                    "It allows high scalability because the only synchronized access is to the \\texttt{ProductId}, so it requires a single contention point",
                    "It does not allow high scalability"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2016/20170131Exam/exame-20170131-companion-B.tex",
        "quizTitle": "..-data-2016-20170131Exam-exame-20170131-companion-B",
        "questions": [
            {
                "questionId": "ModifiabilityScenario",
                "content": "Consider the following modifiability scenario\n    \n    \\begin{quote}\n        The effort necessary to successfully port the system to execute in a new browser should not be higher than 5 person/month.\n    \\end{quote}",
                "image": [],
                "options": [
                    "The stimulus is to port the system to a new browser",
                    "The environment is build time",
                    "The response is 5 person/month",
                    "To implement the above scenario it is necessary to apply a runtime defer binding tactic"
                ]
            },
            {
                "questionId": "AspectsTactics",
                "content": "The main tactic associated with the aspects architectural style is:",
                "image": [],
                "options": [
                    "Split module",
                    "Increase semantic coherence",
                    "Restrict dependencies",
                    "Defer binding"
                ]
            },
            {
                "questionId": "HadoopStakeholdersEurosINGLES",
                "content": "In the HDFS system, in the stakeholders perspective, the use of low cost servers to build the clusters is:",
                "image": [],
                "options": [
                    "Essential to ensure the system scalability",
                    "Essential to reduce costs whenever there is a fault in a hardware element",
                    "Essential to ensure the system portability",
                    "Essential to facilitate the integration with legacy systems"
                ]
            },
            {
                "questionId": "HadoopHeartbeatINGLES",
                "content": "In HDFS, during normal operation DataNodes use the heartbeat tactic",
                "image": [],
                "options": [
                    "Because this tactic simplifies the addition and removal of DataNodes",
                    "But they could have used the ping tactic instead without adding any overhead to the NameNode",
                    "But the exceptions tactic could have been used as well",
                    "To inform other DataNodes about their availability"
                ]
            },
            {
                "questionId": "SoftwareArchitectureTwo",
                "content": "The software architecture of a system",
                "image": [],
                "options": [
                    "Is a high-level view of the system with the purpose of\n  understanding what are the system's goals and features",
                    "Is composed of things such as code units, runtime elements,\n  hardware, and people, together with the relationships among them",
                    "Is a set of guidelines that the developing team should\n  follow in the development of the system",
                    "Is a set of diagrams that show the runtime elements of the\n  system and their relationships"
                ]
            },
            {
                "questionId": "ConcreteScenarios",
                "content": "As part of the process of creating an architecture, we talked about\n  a framework for capturing some of the requirements for a system.  In\n  this context, \\textbf{concrete scenarios} are used for",
                "image": [],
                "options": [
                    "Describing what are the qualities that the system should possess",
                    "Describing a set of steps that a user of the system must\n  perform to accomplish some task",
                    "Describing a use case for the system that makes clear what\n  should be the system's responses to each of the user's inputs",
                    "Describing the system's features by way of different\n  usage scenarios for it, in which users play the role of actors"
                ]
            },
            {
                "questionId": "AvailabilityScenarioTwo",
                "content": "Consider the following availability scenario\n      \n      \\begin{quote}\n         If one of the application servers fails to respond to a request when the system is in its normal operation state, the system should notify the operator and continue to operate normally.\n      \\end{quote}",
                "image": [],
                "options": [
                    "The scenario is not correct",
                    "The scenario is correct but it does not describe whether the request the servers fails to respond to succeeds or fails",
                    "The scenario is correct but it is not clear what is the artefact",
                    "The scenario is not completely correct because it contains two responses"
                ]
            },
            {
                "questionId": "AvailabilityINGLES",
                "content": "Suppose that, to satisfy an availability requirement related with\n    the occurrence of faults at the network infrastructure used by\n    your system, you want to use the tactic named \\emph{Ping/Echo}.\n    How does the use of that tactic manifests in the architectural\n    views of your system?",
                "image": [],
                "options": [
                    "Only in the Deployment view",
                    "Only in the Decomposition view",
                    "Only in a component-and-connector view",
                    "Both in a component-and-connector and the Deployment\n      views"
                ]
            },
            {
                "questionId": "InfinispanThree",
                "content": "Consider the following description of the \\emph{Infinispan} system:\n    \n    \\begin{quote}\n        Before putting data on the network, application objects need to be serialized into bytes so that they can be pushed across a network, into the grid, and then again between peers. The bytes then need to be de-serialized back into application objects, when read by the application. In most common configurations, about 20\\% of the time spent in processing a request is spent in serialization and de-serialization.\n    \\end{quote}\n    \n    The above description can motivate a scenario for",
                "image": [],
                "options": [
                    "Performance",
                    "Availability",
                    "Modifiability",
                    "Reliability"
                ]
            },
            {
                "questionId": "PerfomanceTacticTwo",
                "content": "In which performance tactic it can occur that the inputs are not completely processed, even though they always start being processed",
                "image": [],
                "options": [
                    "Manage sampling rate",
                    "Limit event response",
                    "Reduce overhead",
                    "Bound execution times"
                ]
            },
            {
                "questionId": "TresTiersINGLES",
                "content": "Currently, the most popular architecture for an enterprise\n    application is composed of 3 tiers.  The three tiers are",
                "image": [],
                "options": [
                    "The presentation logic layer, domain logic layer, and\n      data access layer",
                    "The traditional web applications, the mashups, and the rich internet applications (RIAs)",
                    "The web browser, o web server, and the data base",
                    "The web services layer, the domain logic layer, and the\n      data access layer"
                ]
            },
            {
                "questionId": "SOAInteroperability",
                "content": "The Service-Oriented Architecture style improves interoperability because",
                "image": [],
                "options": [
                    "It enforces the use of a single implementation language among all applications",
                    "The orchestration is in charge of improving the transparent location of service providers",
                    "The enterprise service bus coordinates the execution of several services",
                    "It decouples applications developed for different organizations"
                ]
            },
            {
                "questionId": "InstallView",
                "content": "Consider a system that will require a significative configuration effort during deployment, because it provides several variations of the same functionalities and it is necessary to choose which functionalities better fit in each case. The most helpful architectural view for this situation is",
                "image": [],
                "options": [
                    "Work assignment view",
                    "Install view",
                    "Implementation view",
                    "Deployment view"
                ]
            },
            {
                "questionId": "TwitterTwo",
                "content": "Consider the following description of the behavior of Twitter\n    \n    \\begin{quote}\n        Solution is a write based fanout approach. Do a lot of processing when tweets arrive to figure out where tweets should go. This makes read time access fast and easy. Don't do any computation on reads. With all the work being performed on the write path ingest rates are slower than the read path, on the order of 4000 QPS.\n    \\end{quote}\n    \n    To describe this behavior we need to",
                "image": [],
                "options": [
                    "Write a single scenario on performance",
                    "Write two scenarios on performance",
                    "Write a scenario on performance and a scenario on interoperability",
                    "Write a single scenario on interoperability"
                ]
            },
            {
                "questionId": "TwitterFour",
                "content": "Consider the following description of the behavior of Twitter ingestion mechanisms\n    \n    \\begin{quote}\n        Write. when a tweet  comes in there's an O(n) process to write to Redis clusters, where n is the number of people following you. Painful for Lady Gaga and Barack Obama where they are doing 10s of millions of inserts across the cluster. All the Redis clusters are backing disk, the Flock cluster stores the user timeline to disk, but usually timelines are found in RAM in the Redis cluster.\n    \\end{quote}\n    \n    The view that represents this behavior should be of the",
                "image": [],
                "options": [
                    "Module viewtype",
                    "Component-and-connector viewtype",
                    "Install architectural style of the allocation viewtype",
                    "It is not necessary to represent this behavior because it does not describe any qualities"
                ]
            },
            {
                "questionId": "ArchitecturalViews",
                "content": "A software system is usually described using different architectural views",
                "image": [],
                "options": [
                    "Each view contains a single architectural style",
                    "Views need to contain more than one architectural style",
                    "A view may not contain any architectural style",
                    "None of the above"
                ]
            },
            {
                "questionId": "FunctionalModule",
                "content": "When designing an architecture requirements can be split into functional, quality attributes, and constraints. Functional requirements have impact on:",
                "image": [],
                "options": [
                    "A module view",
                    "A component-and-connector view",
                    "An allocation view",
                    "They are not represented by a view"
                ]
            },
            {
                "questionId": "SubcontractorsINGLES",
                "content": "Suppose that you are developing a software architecture for a new\n    large scale system and that you intend to resort extensively to\n    third party subcontractors for the development of various parts of\n    the system.  Which architectural styles are most useful to plan\n    the development of the system in this case?",
                "image": [],
                "options": [
                    "The Decomposition and the Work Assignment styles",
                    "The Decomposition and the Layers styles",
                    "The Decomposition and the Uses styles",
                    "The Decomposition and the SOA styles"
                ]
            },
            {
                "questionId": "UsesStyle",
                "content": "To achieve a faster time-to-market, software companies are\n  increasingly using a strategy of incremental releases of their\n  software, where each new release has a set of new features.  Which\n  architectural style is better to analyse whether the system's\n  software architecture is adequate for the planned incremental\n  releases?",
                "image": [],
                "options": [
                    "The Decomposition style",
                    "The Deployment style",
                    "The Uses style",
                    "The Work-assignment style"
                ]
            },
            {
                "questionId": "nginxModuleTypesINGLES",
                "content": "According to the document that describes nginx:\n    \\begin{quote}\n      nginx's modular architecture generally allows developers to\n      extend the set of web server features without modifying the\n      nginx core.  nginx modules come in slightly different\n      incarnations, namely core modules, event modules, phase\n      handlers, protocols, variable handlers, filters, upstreams and\n      load balancers.  [...]  Event modules provide a particular\n      OS-dependent event notification mechanism like kqueue or epoll.\n      Protocol modules allow nginx to communicate through HTTPS,\n      TLS/SSL, SMTP, POP3 and IMAP.\n    \\end{quote}\n    Which architectural style is more adequate to represent the\n    information presented above?",
                "image": [],
                "options": [
                    "The Generalization style",
                    "The Uses style",
                    "The Layers style",
                    "The Aspects style"
                ]
            },
            {
                "questionId": "AdventureBuilderFour",
                "content": "Consider the following architectural view of the Adventure Builder system, designed around the Order Processing Center\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{../AdventureBuilderCandC}\n    \\end{center}\n    \n    The views \\textbf{does not} allow the reason about the quality of",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2016/AdventureBuilderCandC.png",
                        "width": 120
                    }
                ],
                "options": [
                    "Interoperability",
                    "Modifiability",
                    "Performance",
                    "Security"
                ]
            },
            {
                "questionId": "AdventureBuilderSix",
                "content": "Consider the following requirement for availability of the Adventure Builder system\n    \n    \\begin{quote}\n        The Consumer Web site is available to the user 24x7. If an instance of OPC application fails, the fault is detected and the system administrator is notified in 30 seconds; the system continues taking order requests; another OPC instance is automatically created; and data remains in consistent state.\n    \\end{quote}\n    \n    In order to support this quality it is necessary to",
                "image": [],
                "options": [
                    "Use a passive redundancy tactic in the OPC (Order Processing Center)",
                    "Use a passive redundancy tactic in the Consumer Web site",
                    "Use an active redundancy tactic in the OPC (Order Processing Center) ",
                    "Use an active redundancy tactic in the Consumer Web site"
                ]
            },
            {
                "questionId": "DVDCatalogMobile",
                "content": "Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        To support iPhone/iPad/Android version with sync, which allows offline use of the application in the mobile device and data synchronization to occur when a connection is available\n    \\end{quote}\n    \n    This requirement requires a change of",
                "image": [],
                "options": [
                    "The decomposition view to include a module for the synchronization responsibilities",
                    "The uses view to represent how the mobile device uses the Catalog application",
                    "The layered view to include a layer for each type of device",
                    "The domain layer of the layered style to represent the types of devices"
                ]
            },
            {
                "questionId": "TiposVistaDesempenhoINGLES",
                "content": "To analyse the performance of a system",
                "image": [],
                "options": [
                    "Only views of the component-and-connector viewtype are needed",
                    "All viewtypes may be necessary",
                    "Only views of the component-and-connector viewtype and allocation viewtype are needed",
                    "Views of the module viewtype are not needed"
                ]
            },
            {
                "questionId": "PeerToPeerSpace",
                "content": "The Peer-to-Peer architectural style provides high scalability and availability. In the context of a file sharing system",
                "image": [],
                "options": [
                    "The file transfers follows the same path of nodes used to identify where the file was located",
                    "The peer initiating the request for a file needs to know where the file is located",
                    "If a peer providing a file crashes it is necessary to restart downloading the file from the begin",
                    "The price for high scalability and availability is the need to have several replicas of the files to be shared"
                ]
            },
            {
                "questionId": "MicroservicesTwo",
                "content": "Consider the following definition of Microservice architectural style by Martin Fowler\n    \n    \\begin{quote}\n        The microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies.\n    \\end{quote}\n    \n    To represent an architecture based on Microservices",
                "image": [],
                "options": [
                    "We do not need a view of the module viewtype because it is about the runtime properties of the system",
                    "We do not need a view of the allocation viewtype because deployment is automated",
                    "The component-and-connector view should emphasize the performance qualities of systems following the microservices architecture",
                    "It is necessary to use views of the three viewtypes"
                ]
            },
            {
                "questionId": "WorldWideEN",
                "content": "In world-wide systems like Facebook or Amazon,",
                "image": [],
                "options": [
                    "All functionalities can be transactional",
                    "Only a small set of functionalities are transactional",
                    "It is not necessary to have transactional properties because all data is in memory",
                    "Only the isolation property of transactions is supported"
                ]
            },
            {
                "questionId": "BoundedContextTwo",
                "content": "Consider the following representation of a system following a microservices architecture,\n      \n      \\begin{center}\n          \\includegraphics[width=140mm]{../MicroservicesArchitecture}\n      \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2016/MicroservicesArchitecture.png",
                        "width": 140
                    }
                ],
                "options": [
                    "When an event is published to the distributed log, the order of delivery to the different subscribing applications is predefined",
                    "When two events are published to the distributed log they are delivered to the different subscribing applications in the same order",
                    "The distributed log guarantees that events will be delivered only once",
                    "The distributed log may not deliver some of the events that are published to their subscribers"
                ]
            },
            {
                "questionId": "DomainDesignTwo",
                "content": "Consider the following data model\n      \n      \\begin{center}\n          \\includegraphics[width=80mm]{../ProductDomainModel}\n      \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2016/ProductDomainModel.png",
                        "width": 80
                    }
                ],
                "options": [
                    "It allows high scalability because the data model has only four entities",
                    "It allows high scalability because it is possible the implement transactions associated to each one of the aggregates",
                    "It allows high scalability because the only synchronized access is to the \\texttt{ProductId}, so it requires a single contention point",
                    "It does not allow high scalability"
                ]
            },
            {
                "questionId": "ChromeMultiPlatform",
                "content": "The Chromium is a web browser that introduced an innovative architecture. In the Chromium description we can read:\n\n  \\begin{quote}\n    Chromium is a large and complex cross-platform product.  We try to\n    share as much code as possible between platforms, while\n    implementing the UI and OS integration in the most appropriate way\n    for each.  While this gives a better user experience, it adds\n    extra complexity to the code.  This document describes the\n    recommended practices for keeping such cross-platform code clean.\n\n    We use a variety of different file naming suffixes to indicate\n    when a file should be used:\n    \\begin{itemize}\n    \\item Windows files use the \\texttt{\\_win} suffix.\n    \\item Cocoa (Mac UI) files use the \\texttt{\\_cocoa} suffix, and lower-level Mac files use the \\texttt{\\_mac} suffix.\n    \\item Linux files use \\texttt{\\_linux} for lower-level files, \\texttt{\\_gtk} for GTK-specific files, and \\texttt{\\_x} for X Windows (with no GTK) specific files.\n    \\item Posix files shared between Mac and Linux use the \\texttt{\\_posix} suffix.\n    \\item Files for Chrome's ``Views'' UI (on Windows and experimental GTK) layout system use the \\texttt{\\_views} suffix.\n   \\end{itemize}\n\n    The separate front-ends of the browser are contained in their own directories:\n    \\begin{itemize}\n    \\item Windows Views (and the experimental GTK-views): \\\\\n      \\texttt{chrome/browser/ui/views}\n    \\item Linux GTK: \\texttt{chrome/browser/gtk}\n    \\item Mac: \\texttt{chrome/browser/cocoa}\n    \\end{itemize}\n  \\end{quote}\n  \n  Which architectural style should we use to represent this aspect of Chromium?",
                "image": [],
                "options": [
                    "Implementation",
                    "Work assignment",
                    "Decomposition",
                    "None, because this description does not describe any architectural aspect of the system"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2016/test-1/test-11A.tex",
        "quizTitle": "..-data-2016-test-1-test-11A",
        "questions": [
            {
                "questionId": "SoftwareArchitecture",
                "content": "The software architecture of a system",
                "image": [],
                "options": [
                    "Depends mostly on the system's functional requirements",
                    "Depends more on the architect's experience than on anything else",
                    "Should not depend on the skills of the developing team",
                    "None of the above"
                ]
            },
            {
                "questionId": "TwitterScaleOne",
                "content": "In the description of the Twitter system we can read:\n    \n    \\begin{quote}\n         Twitter is optimized to be highly available on the read path on the home timeline. Read path is in the 10s of milliseconds.\n    \\end{quote}\n    \n    This is achieved because:",
                "image": [],
                "options": [
                    "The writing of a tweet is a synchronous process where different users have a consistent view of the sequence of tweets",
                    "A tweet is written in each one of the Twitter's servers",
                    "The tweet unique ID is written in the home timeline of each one of the writer's followers",
                    "The tweet content is written in the home timeline of each one of the writer's followers"
                ]
            },
            {
                "questionId": "GeneralScenario",
                "content": "A general scenario for a quality attribute",
                "image": [],
                "options": [
                    "Describes a concrete quality that a particular system has to implement",
                    "Enumerates, for each kind of quality attribute, all the possible types of source of stimulus, stimulus, response, etc",
                    "Can omit some of the elements like, for instance, the environment, if they are not relevant for the general scenario",
                    "Is a very reusable scenario that can be effectively used in many different concrete situations"
                ]
            },
            {
                "questionId": "ProxyServer",
                "content": "Consider the following figure that presents a Proxy Server, which collapses requests from different users.\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{ProxyServer}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2016/test-1/ProxyServer.png",
                        "width": 120
                    }
                ],
                "options": [
                    "This solution optimizes the performance in terms of the latency of each request",
                    "This solution allows an \"infinite\"\\ increase of the number clients by allowing the inclusion of more Request Nodes",
                    "This solution continues to provide service even if a crash occurs in the Data server",
                    "This solution optimizes the performance in terms of the throughput of processed requests"
                ]
            },
            {
                "questionId": "HadoopCluster",
                "content": "Consider the following figure that presents the Hadoop cluster topology.\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{HadoopClusterTopology}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2016/test-1/HadoopClusterTopology.png",
                        "width": 100
                    }
                ],
                "options": [
                    "When a new block is created, the first replica is written in the node where the writer is located, to improve availability",
                    "When a new block is created, the second replica is not stored in the same rack than the first replica to increase the availability when a Data Node fails",
                    "When a new block is created, the third replica is stored in the same rack than the second replica to improve the performance of reads",
                    "When a read occurs, the client, if it is located in the cluster, receives a list of the DataNodes where the replicas are, ordered by its closeness to the client, to improve performance of reads"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2016/test-1/test-11B.tex",
        "quizTitle": "..-data-2016-test-1-test-11B",
        "questions": [
            {
                "questionId": "HadoopCluster",
                "content": "Consider the following figure that presents the Hadoop cluster topology.\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{HadoopClusterTopology}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2016/test-1/HadoopClusterTopology.png",
                        "width": 100
                    }
                ],
                "options": [
                    "When a new block is created, the first replica is written in the node where the writer is located, to improve availability",
                    "When a new block is created, the second replica is not stored in the same rack than the first replica to increase the availability when a Data Node fails",
                    "When a new block is created, the third replica is stored in the same rack than the second replica to improve the performance of reads",
                    "When a read occurs, the client, if it is located in the cluster, receives a list of the DataNodes where the replicas are, ordered by its closeness to the client, to improve performance of reads"
                ]
            },
            {
                "questionId": "SoftwareArchitecture",
                "content": "The software architecture of a system",
                "image": [],
                "options": [
                    "Depends mostly on the system's functional requirements",
                    "Depends more on the architect's experience than on anything else",
                    "Should not depend on the skills of the developing team",
                    "None of the above"
                ]
            },
            {
                "questionId": "GeneralScenario",
                "content": "A general scenario for a quality attribute",
                "image": [],
                "options": [
                    "Describes a concrete quality that a particular system has to implement",
                    "Enumerates, for each kind of quality attribute, all the possible types of source of stimulus, stimulus, response, etc",
                    "Can omit some of the elements like, for instance, the environment, if they are not relevant for the general scenario",
                    "Is a very reusable scenario that can be effectively used in many different concrete situations"
                ]
            },
            {
                "questionId": "TwitterScaleOne",
                "content": "In the description of the Twitter system we can read:\n    \n    \\begin{quote}\n         Twitter is optimized to be highly available on the read path on the home timeline. Read path is in the 10s of milliseconds.\n    \\end{quote}\n    \n    This is achieved because:",
                "image": [],
                "options": [
                    "The writing of a tweet is a synchronous process where different users have a consistent view of the sequence of tweets",
                    "A tweet is written in each one of the Twitter's servers",
                    "The tweet unique ID is written in the home timeline of each one of the writer's followers",
                    "The tweet content is written in the home timeline of each one of the writer's followers"
                ]
            },
            {
                "questionId": "ProxyServer",
                "content": "Consider the following figure that presents a Proxy Server, which collapses requests from different users.\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{ProxyServer}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2016/test-1/ProxyServer.png",
                        "width": 120
                    }
                ],
                "options": [
                    "This solution optimizes the performance in terms of the latency of each request",
                    "This solution allows an \"infinite\"\\ increase of the number clients by allowing the inclusion of more Request Nodes",
                    "This solution continues to provide service even if a crash occurs in the Data server",
                    "This solution optimizes the performance in terms of the throughput of processed requests"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2016/test-1/test-12A.tex",
        "quizTitle": "..-data-2016-test-1-test-12A",
        "questions": [
            {
                "questionId": "ArchitecturalTactics",
                "content": "An architectural tactic for a system describes",
                "image": [],
                "options": [
                    "A non-functional requirement a system has to achieve",
                    "How to control the response to one or more stimulus",
                    "What should be the system response in the occurrence of a stimulus",
                    "A decomposition of the system that fulfills an architectural quality"
                ]
            },
            {
                "questionId": "EarlyDecisions",
                "content": "In his article, \\emph{Who Needs and Architect?}, Martin Fowler cites Ralph Johnson definition:\n    \n    \\begin{quote}\n        Architecture is the set of decisions that must be made early in a project.\n    \\end{quote}\n    \n    In his opinion:",
                "image": [],
                "options": [
                    "This is right because if you don't the project fails",
                    "This is wrong because you can easily change these decisions during the project lifetime",
                    "This is right but you cannot be completely sure whether the decisions are the right ones",
                    "This is wrong because it is against the agile way of thinking the software development process"
                ]
            },
            {
                "questionId": "TwitterScaleTwo",
                "content": "In the description of the Twitter system we can read:\n    \n    \\begin{quote}\n        On the search timeline:\n         Write. when a tweet comes in and hits the Ingester only one Early Bird machine is hit. Write time path is O(1). A single tweet is ingested in under 5 seconds between the queuing and processing to find the one Early Bird to write it to.\n    \\end{quote}",
                "image": [],
                "options": [
                    "The search timeline is the most important business use case for Twitter",
                    "The ingestion process includes tokenizing of the tweet to include in an index",
                    "The Early Bird server contains the tweet content",
                    "The write in the Early Bird server is synchronous, only when it finishes does the user receives the feedback of a successful post"
                ]
            },
            {
                "questionId": "Queues",
                "content": "Consider the following figure that presents a Queue where client applications write their requests to be served by a server.\n    \n    \\begin{center}\n        \\includegraphics[width=130mm]{Queues}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2016/test-1/Queues.png",
                        "width": 130
                    }
                ],
                "options": [
                    "This solution assures a consistency view to the clients of the data that is written",
                    "In this solution the clients invocations have to be synchronous",
                    "In this solution the tasks in the queue need to be sequentially processed, only when a task is finished can another start to be processed",
                    "This solution allows the dimensioning of the number of activities (threads or processes) that run in the server, taking into consideration the server's hardware capacity, in order to have a efficient usage of the server's CPU"
                ]
            },
            {
                "questionId": "HadoopCreateFile",
                "content": "In the description of Hadoop we can red.\n    \n    \\begin{quote}\n        The CheckpointNode periodically combines the existing checkpoint and journal to create a new checkpoint and an empty journal. The CheckpointNode usually runs on a different host from the NameNode since it has the same memory requirements as the NameNode.\n    \\end{quote}",
                "image": [],
                "options": [
                    "The periodic rebuild of the checkpoint is done to increase the availability of the NameNode",
                    "The advantage of running the CheckpointNode in a different host is to not degrade the availability of the NameNode during checkpoint construction",
                    "The periodic rebuild of the checkpoint improves the performance of the NameNode during normal operation",
                    "The periodic rebuild of the checkpoint improves the performance of the NameNode during its initialization"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2016/test-1/test-12B.tex",
        "quizTitle": "..-data-2016-test-1-test-12B",
        "questions": [
            {
                "questionId": "HadoopCreateFile",
                "content": "In the description of Hadoop we can red.\n    \n    \\begin{quote}\n        The CheckpointNode periodically combines the existing checkpoint and journal to create a new checkpoint and an empty journal. The CheckpointNode usually runs on a different host from the NameNode since it has the same memory requirements as the NameNode.\n    \\end{quote}",
                "image": [],
                "options": [
                    "The periodic rebuild of the checkpoint is done to increase the availability of the NameNode",
                    "The advantage of running the CheckpointNode in a different host is to not degrade the availability of the NameNode during checkpoint construction",
                    "The periodic rebuild of the checkpoint improves the performance of the NameNode during normal operation",
                    "The periodic rebuild of the checkpoint improves the performance of the NameNode during its initialization"
                ]
            },
            {
                "questionId": "ArchitecturalTactics",
                "content": "An architectural tactic for a system describes",
                "image": [],
                "options": [
                    "A non-functional requirement a system has to achieve",
                    "How to control the response to one or more stimulus",
                    "What should be the system response in the occurrence of a stimulus",
                    "A decomposition of the system that fulfills an architectural quality"
                ]
            },
            {
                "questionId": "TwitterScaleTwo",
                "content": "In the description of the Twitter system we can read:\n    \n    \\begin{quote}\n        On the search timeline:\n         Write. when a tweet comes in and hits the Ingester only one Early Bird machine is hit. Write time path is O(1). A single tweet is ingested in under 5 seconds between the queuing and processing to find the one Early Bird to write it to.\n    \\end{quote}",
                "image": [],
                "options": [
                    "The search timeline is the most important business use case for Twitter",
                    "The ingestion process includes tokenizing of the tweet to include in an index",
                    "The Early Bird server contains the tweet content",
                    "The write in the Early Bird server is synchronous, only when it finishes does the user receives the feedback of a successful post"
                ]
            },
            {
                "questionId": "EarlyDecisions",
                "content": "In his article, \\emph{Who Needs and Architect?}, Martin Fowler cites Ralph Johnson definition:\n    \n    \\begin{quote}\n        Architecture is the set of decisions that must be made early in a project.\n    \\end{quote}\n    \n    In his opinion:",
                "image": [],
                "options": [
                    "This is right because if you don't the project fails",
                    "This is wrong because you can easily change these decisions during the project lifetime",
                    "This is right but you cannot be completely sure whether the decisions are the right ones",
                    "This is wrong because it is against the agile way of thinking the software development process"
                ]
            },
            {
                "questionId": "Queues",
                "content": "Consider the following figure that presents a Queue where client applications write their requests to be served by a server.\n    \n    \\begin{center}\n        \\includegraphics[width=130mm]{Queues}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2016/test-1/Queues.png",
                        "width": 130
                    }
                ],
                "options": [
                    "This solution assures a consistency view to the clients of the data that is written",
                    "In this solution the clients invocations have to be synchronous",
                    "In this solution the tasks in the queue need to be sequentially processed, only when a task is finished can another start to be processed",
                    "This solution allows the dimensioning of the number of activities (threads or processes) that run in the server, taking into consideration the server's hardware capacity, in order to have a efficient usage of the server's CPU"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2016/test-2/test-21A.tex",
        "quizTitle": "..-data-2016-test-2-test-21A",
        "questions": [
            {
                "questionId": "OmissionRetry",
                "content": "Considering the availability architectural quality, the tactic of retry",
                "image": [],
                "options": [
                    "Can be applied to any kind stimulus in availability scenarios",
                    "Is useful to support scenarios where the stimulus is an omission",
                    "Can guarantee that the system will not become unavailable",
                    "When applied it increases the latency of the availability scenario's response time"
                ]
            },
            {
                "questionId": "Scalability",
                "content": "Several of the cases studied in this course have scalability\n    requirements.  That means that those systems should be designed in\n    such a way that they",
                "image": [],
                "options": [
                    "Have high throughput",
                    "Have low latency",
                    "Allow many simultaneous users",
                    "May be easily changed to increase their storage capacity"
                ]
            },
            {
                "questionId": "ModifiabilityOne",
                "content": "In a modifiability scenario the environment can be characterized as design time, compile time, build time, initiation time, and runtime.",
                "image": [],
                "options": [
                    "When the environment is design time it means that the change should be done before the system enters into production",
                    "When the environment is build time it means that it is necessary to codify a new module that is added by rebuilding the system",
                    "When the environment is initiation time it means that it is necessary to restart the system for the change to effect",
                    "When the environment is runtime the cost of doing the change is higher than in the other environments"
                ]
            },
            {
                "questionId": "GraphiteScenarioTacticsOne",
                "content": "In the Graphite system the component \\emph{carbon} provides to \\emph{webapp} components an access interface to the \\emph{buffers} in order to improve the quality of",
                "image": [],
                "options": [
                    "Performance",
                    "Interoperability",
                    "Availability (Reliability)",
                    "Security"
                ]
            },
            {
                "questionId": "HadoopCheckpoint",
                "content": "In the HDFS system when the \\emph{CheckpointNode} and the \\emph{NameNode} are deployed in different nodes, the \\emph{CheckpointNode} provides:",
                "image": [],
                "options": [
                    "Performance and availability qualities",
                    "Performance qualities only",
                    "Availability qualities only",
                    "Performance and security qualities"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2016/test-2/test-21B.tex",
        "quizTitle": "..-data-2016-test-2-test-21B",
        "questions": [
            {
                "questionId": "ModifiabilityOne",
                "content": "In a modifiability scenario the environment can be characterized as design time, compile time, build time, initiation time, and runtime.",
                "image": [],
                "options": [
                    "When the environment is design time it means that the change should be done before the system enters into production",
                    "When the environment is build time it means that it is necessary to codify a new module that is added by rebuilding the system",
                    "When the environment is initiation time it means that it is necessary to restart the system for the change to effect",
                    "When the environment is runtime the cost of doing the change is higher than in the other environments"
                ]
            },
            {
                "questionId": "GraphiteScenarioTacticsOne",
                "content": "In the Graphite system the component \\emph{carbon} provides to \\emph{webapp} components an access interface to the \\emph{buffers} in order to improve the quality of",
                "image": [],
                "options": [
                    "Performance",
                    "Interoperability",
                    "Availability (Reliability)",
                    "Security"
                ]
            },
            {
                "questionId": "HadoopCheckpoint",
                "content": "In the HDFS system when the \\emph{CheckpointNode} and the \\emph{NameNode} are deployed in different nodes, the \\emph{CheckpointNode} provides:",
                "image": [],
                "options": [
                    "Performance and availability qualities",
                    "Performance qualities only",
                    "Availability qualities only",
                    "Performance and security qualities"
                ]
            },
            {
                "questionId": "OmissionRetry",
                "content": "Considering the availability architectural quality, the tactic of retry",
                "image": [],
                "options": [
                    "Can be applied to any kind stimulus in availability scenarios",
                    "Is useful to support scenarios where the stimulus is an omission",
                    "Can guarantee that the system will not become unavailable",
                    "When applied it increases the latency of the availability scenario's response time"
                ]
            },
            {
                "questionId": "Scalability",
                "content": "Several of the cases studied in this course have scalability\n    requirements.  That means that those systems should be designed in\n    such a way that they",
                "image": [],
                "options": [
                    "Have high throughput",
                    "Have low latency",
                    "Allow many simultaneous users",
                    "May be easily changed to increase their storage capacity"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2016/test-2/test-22A.tex",
        "quizTitle": "..-data-2016-test-2-test-22A",
        "questions": [
            {
                "questionId": "Availability",
                "content": "There are several tactics to satisfy availability requirements,\n    which may be applied depending on the concrete requirement that we\n    want to satisfy.  Assuming that you want to detect faults of type\n    \\emph{response} in your system, which tactic is more adequate?",
                "image": [],
                "options": [
                    "The Ping/Echo tactic",
                    "The Heartbeat tactic",
                    "The Voting tactic",
                    "The Removal from Service tactic"
                ]
            },
            {
                "questionId": "Performance",
                "content": "Consider a scenario for performance where the arrival of events is stochastic with a distribution where there are peeks of events but the arrival of events over a long period is uniform. The best tactic to apply is",
                "image": [],
                "options": [
                    "Manage sampling rate",
                    "Limit event response",
                    "Prioritize events",
                    "Bound execution time"
                ]
            },
            {
                "questionId": "ModifiabilityTwo",
                "content": "Consider that a module, that contains a complex business logic, needs to invoke a remote entity using a particular communication protocol and it is needs to manage the invocation, like deal with the possible errors, delays and omissions in the invocation, transform the data before sending it, etc. Which tactic should be applied for a scenario where there will be changes in the communication protocol. Note that the business logic comprises a set of functionalities that is independent of the remote invocation technological aspects.",
                "image": [],
                "options": [
                    "Encapsulate the module such that the clients of the module should not be aware of the remote invocations",
                    "Use an intermediary that contains all the code associated with the remote invocation separating it from the modules' business logic",
                    "Refactor the common parts between the business logic and the remote invocation",
                    "Increase the semantic coherence between the business logic code and the remote invocation code"
                ]
            },
            {
                "questionId": "GraphiteScenarioTacticsTwo",
                "content": "Which quality, or qualities, of the Graphite system are described by the sentence: \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL}",
                "image": [],
                "options": [
                    "Usability and Performance",
                    "Usability",
                    "Performance",
                    "Testability"
                ]
            },
            {
                "questionId": "HadoopNameNodeReplica",
                "content": "The architecture of the HDFS system only allows the existence of\n    one NameNode.  Given the responsibilities of this component and\n    the current architecture of HDFS, what would be the consequences\n    of adding the possibility of having replicas of the NameNode in\n    the system?",
                "image": [],
                "options": [
                    "The system would respond faster to all the\n      clients' requests",
                    "The performance of the system would not change",
                    "The system would respond faster to requests about\n      file locations",
                    "The system would respond faster to requests made by\n      DataNodes to update the metadata"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2016/test-2/test-22B.tex",
        "quizTitle": "..-data-2016-test-2-test-22B",
        "questions": [
            {
                "questionId": "ModifiabilityTwo",
                "content": "Consider that a module, that contains a complex business logic, needs to invoke a remote entity using a particular communication protocol and it is needs to manage the invocation, like deal with the possible errors, delays and omissions in the invocation, transform the data before sending it, etc. Which tactic should be applied for a scenario where there will be changes in the communication protocol. Note that the business logic comprises a set of functionalities that is independent of the remote invocation technological aspects.",
                "image": [],
                "options": [
                    "Encapsulate the module such that the clients of the module should not be aware of the remote invocations",
                    "Use an intermediary that contains all the code associated with the remote invocation separating it from the modules' business logic",
                    "Refactor the common parts between the business logic and the remote invocation",
                    "Increase the semantic coherence between the business logic code and the remote invocation code"
                ]
            },
            {
                "questionId": "GraphiteScenarioTacticsTwo",
                "content": "Which quality, or qualities, of the Graphite system are described by the sentence: \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL}",
                "image": [],
                "options": [
                    "Usability and Performance",
                    "Usability",
                    "Performance",
                    "Testability"
                ]
            },
            {
                "questionId": "HadoopNameNodeReplica",
                "content": "The architecture of the HDFS system only allows the existence of\n    one NameNode.  Given the responsibilities of this component and\n    the current architecture of HDFS, what would be the consequences\n    of adding the possibility of having replicas of the NameNode in\n    the system?",
                "image": [],
                "options": [
                    "The system would respond faster to all the\n      clients' requests",
                    "The performance of the system would not change",
                    "The system would respond faster to requests about\n      file locations",
                    "The system would respond faster to requests made by\n      DataNodes to update the metadata"
                ]
            },
            {
                "questionId": "Performance",
                "content": "Consider a scenario for performance where the arrival of events is stochastic with a distribution where there are peeks of events but the arrival of events over a long period is uniform. The best tactic to apply is",
                "image": [],
                "options": [
                    "Manage sampling rate",
                    "Limit event response",
                    "Prioritize events",
                    "Bound execution time"
                ]
            },
            {
                "questionId": "Availability",
                "content": "There are several tactics to satisfy availability requirements,\n    which may be applied depending on the concrete requirement that we\n    want to satisfy.  Assuming that you want to detect faults of type\n    \\emph{response} in your system, which tactic is more adequate?",
                "image": [],
                "options": [
                    "The Ping/Echo tactic",
                    "The Heartbeat tactic",
                    "The Voting tactic",
                    "The Removal from Service tactic"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2016/test-3/test-31A.tex",
        "quizTitle": "..-data-2016-test-3-test-31A",
        "questions": [
            {
                "questionId": "ModuleViewtypeTwo",
                "content": "Consider the Uses architectural style of the Module viewtype",
                "image": [],
                "options": [
                    "Cycles in the uses relation between modules are a good sign, because it indicates that several modules should be tested together",
                    "The project manager uses this view to get advice on the incremental development of the system",
                    "The uses relation should be applied to the coarse-grained modules, because it allows to identify circular dependences",
                    "There isn't any relation with the layered architectural style because the allowed-to-use relation is more generic"
                ]
            },
            {
                "questionId": "DVDCatalogMultiPlatform",
                "content": "Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        To support multi-platform (Mac, Windows, Linux)\n    \\end{quote}\n    \n    This requirement requires a change of",
                "image": [],
                "options": [
                    "The layered view to deal with the aspects of portability",
                    "The uses view to show the coupling between the different platforms",
                    "The uses view to show the uses relationships between the different platforms",
                    "The data model view to represent each one of the platforms"
                ]
            },
            {
                "questionId": "ModuleComponent",
                "content": "Consider the kind of relations between components and modules.",
                "image": [],
                "options": [
                    "A module contains the code that executes in a single component and a component executes the code of a single module",
                    "A module contains the code that can execute in several components and a component executes the code of a single module",
                    "A module contains the code that executes in a single component and a component can execute the code of several modules",
                    "A module contains the code that can execute in several components and a component can execute the code of several modules"
                ]
            },
            {
                "questionId": "Aspects",
                "content": "An architect is decomposing a system into a set of responsibilities using a view of the Decomposition style. However, she had already to backtrack several times and try new decompositions because she always end up with some responsibility that cannot fit within a single module.",
                "image": [],
                "options": [
                    "This means that in this software system it is not possible to modularize each responsibility in a cohesive module",
                    "She should define finer-grained modules where she splits the unassigned responsibility",
                    "She should try to use a view of the Aspects style, assign this responsibility to a single module and define where it crosscuts the other modules",
                    "She should try to use a view of the Layered style and assign this responsibility to a module in the bottom layer that can be used by all the other modules"
                ]
            },
            {
                "questionId": "AdventureBuilderModuleOne",
                "content": "Consider the following modifiability scenario for the Adventure Builder system \n    \n    \\begin{quote}\n        A new business partner (airline, lodging, or activity provider) that uses its own web services interface is added to the system in no more than 10 person-days of effort for the implementation. The business goal is easy integration with new business partners.\n    \\end{quote}\n    \n    and the following architectural view\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{AdventureBuilderHighLevelVIew}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2016/test-3/AdventureBuilderHighLevelVIew.png",
                        "width": 120
                    }
                ],
                "options": [
                    "The view does not address the scenario",
                    "The view addresses the scenario because it separates the \\texttt{Consumer Website} module from the \\texttt{OpcApp} module",
                    "The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement",
                    "The view addresses the scenario because the \\texttt{Consumer Website} module does not use the interfaces a new business partner has to implement"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2016/test-3/test-31B.tex",
        "quizTitle": "..-data-2016-test-3-test-31B",
        "questions": [
            {
                "questionId": "DVDCatalogMultiPlatform",
                "content": "Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        To support multi-platform (Mac, Windows, Linux)\n    \\end{quote}\n    \n    This requirement requires a change of",
                "image": [],
                "options": [
                    "The layered view to deal with the aspects of portability",
                    "The uses view to show the coupling between the different platforms",
                    "The uses view to show the uses relationships between the different platforms",
                    "The data model view to represent each one of the platforms"
                ]
            },
            {
                "questionId": "ModuleComponent",
                "content": "Consider the kind of relations between components and modules.",
                "image": [],
                "options": [
                    "A module contains the code that executes in a single component and a component executes the code of a single module",
                    "A module contains the code that can execute in several components and a component executes the code of a single module",
                    "A module contains the code that executes in a single component and a component can execute the code of several modules",
                    "A module contains the code that can execute in several components and a component can execute the code of several modules"
                ]
            },
            {
                "questionId": "ModuleViewtypeTwo",
                "content": "Consider the Uses architectural style of the Module viewtype",
                "image": [],
                "options": [
                    "Cycles in the uses relation between modules are a good sign, because it indicates that several modules should be tested together",
                    "The project manager uses this view to get advice on the incremental development of the system",
                    "The uses relation should be applied to the coarse-grained modules, because it allows to identify circular dependences",
                    "There isn't any relation with the layered architectural style because the allowed-to-use relation is more generic"
                ]
            },
            {
                "questionId": "AdventureBuilderModuleOne",
                "content": "Consider the following modifiability scenario for the Adventure Builder system \n    \n    \\begin{quote}\n        A new business partner (airline, lodging, or activity provider) that uses its own web services interface is added to the system in no more than 10 person-days of effort for the implementation. The business goal is easy integration with new business partners.\n    \\end{quote}\n    \n    and the following architectural view\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{AdventureBuilderHighLevelVIew}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2016/test-3/AdventureBuilderHighLevelVIew.png",
                        "width": 120
                    }
                ],
                "options": [
                    "The view does not address the scenario",
                    "The view addresses the scenario because it separates the \\texttt{Consumer Website} module from the \\texttt{OpcApp} module",
                    "The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement",
                    "The view addresses the scenario because the \\texttt{Consumer Website} module does not use the interfaces a new business partner has to implement"
                ]
            },
            {
                "questionId": "Aspects",
                "content": "An architect is decomposing a system into a set of responsibilities using a view of the Decomposition style. However, she had already to backtrack several times and try new decompositions because she always end up with some responsibility that cannot fit within a single module.",
                "image": [],
                "options": [
                    "This means that in this software system it is not possible to modularize each responsibility in a cohesive module",
                    "She should define finer-grained modules where she splits the unassigned responsibility",
                    "She should try to use a view of the Aspects style, assign this responsibility to a single module and define where it crosscuts the other modules",
                    "She should try to use a view of the Layered style and assign this responsibility to a module in the bottom layer that can be used by all the other modules"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2016/test-3/test-32A.tex",
        "quizTitle": "..-data-2016-test-3-test-32A",
        "questions": [
            {
                "questionId": "DVDCatalogAspects",
                "content": "Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        To allow the share of catalogs with family and friends, including some access control. \n    \\end{quote}\n    \n    This requirement requires",
                "image": [],
                "options": [
                    "A change to the uses view to represent that friends can use each other catalog",
                    "A change of the layered view to support different presentations, one for each friend",
                    "A change of the decomposition view to include a set of new modules with the responsibilities associated with the access control",
                    "A new aspect view that includes a module with the responsibilities associated with the access control and that crosscuts some of the other modules"
                ]
            },
            {
                "questionId": "UsesCalls",
                "content": "A function call is not necessarily a uses relation of the Uses architectural style of the Module viewtype because",
                "image": [],
                "options": [
                    "The correctness of the caller module may not depend on the correct implementation of the invoked function in the called module",
                    "The invoked function may not have any input parameter",
                    "The invoked function may not have any output parameter",
                    "The invoked function may not have both any input parameter nor any output parameter"
                ]
            },
            {
                "questionId": "ModuleViewtypeThree",
                "content": "Consider the Layered architectural style of the Module viewtype",
                "image": [],
                "options": [
                    "The modules inside a layer cannot use other modules in the same layer",
                    "A layer cannot call the layer above",
                    "Each layer defines a virtual machine because it provides a set of cohesive functionalities to the upper layer",
                    "It is possible to have a circular allowed-to-use relationship between several layers"
                ]
            },
            {
                "questionId": "DataModelFacebook",
                "content": "In Facebook it is not possible to have the information about more that one bilion users in a single disk. Therefore, a sharding technique is applied, where the persistent information is split between several database servers, and applications are routed to the right servers for queries and updates. To describe this architecture",
                "image": [],
                "options": [
                    "It is not necessary to have any view of the Data Model architectural style because Facebook information has a very simple structure",
                    "It is enough to design a view of the Data Model architectural style at the conceptual level because Facebook information has a very simple structure",
                    "It is enough to design a view of the Data Model architectural style at the logical level because the information will be stored in a relational database",
                    "It is necessary to design a view of the Data Model architectural style at the physical level to deal with performance and consistency issues of the access to data"
                ]
            },
            {
                "questionId": "AdventureBuilderModuleTwo",
                "content": "Consider the following performance/scalability scenario for the Adventure Builder system \n    \n    \\begin{quote}\n        Up to 500 users click to see the catalog of adventure packages following a random distribution over 1 minute; the system is under normal operating conditions; the maximal latency to serve the first page of content is under 5 seconds; average latency for same is less than 2 seconds. If required, the system should easily support an increase in the number of simultaneous requests while maintaining the same latency per request.\n    \\end{quote}\n    \n    and the following architectural view\n    \n    \\begin{center}\n        \\includegraphics[width=105mm]{AdventureBuilderHighLevelVIew}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2016/test-3/AdventureBuilderHighLevelVIew.png",
                        "width": 105
                    }
                ],
                "options": [
                    "The view does not address the scenario",
                    "The view addresses the scenario because it separates the \\texttt{Consumer Website} module from the \\texttt{OpcApp} module to allow the execution of the \\texttt{Consumer Website} module in a component that can have multiple copies of computation",
                    "The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement",
                    "The view addresses the scenario because the \\texttt{Consumer Website} module uses the \\texttt{gwt} and \\texttt{waf} modules"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2016/test-3/test-32B.tex",
        "quizTitle": "..-data-2016-test-3-test-32B",
        "questions": [
            {
                "questionId": "ModuleViewtypeThree",
                "content": "Consider the Layered architectural style of the Module viewtype",
                "image": [],
                "options": [
                    "The modules inside a layer cannot use other modules in the same layer",
                    "A layer cannot call the layer above",
                    "Each layer defines a virtual machine because it provides a set of cohesive functionalities to the upper layer",
                    "It is possible to have a circular allowed-to-use relationship between several layers"
                ]
            },
            {
                "questionId": "DVDCatalogAspects",
                "content": "Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        To allow the share of catalogs with family and friends, including some access control. \n    \\end{quote}\n    \n    This requirement requires",
                "image": [],
                "options": [
                    "A change to the uses view to represent that friends can use each other catalog",
                    "A change of the layered view to support different presentations, one for each friend",
                    "A change of the decomposition view to include a set of new modules with the responsibilities associated with the access control",
                    "A new aspect view that includes a module with the responsibilities associated with the access control and that crosscuts some of the other modules"
                ]
            },
            {
                "questionId": "UsesCalls",
                "content": "A function call is not necessarily a uses relation of the Uses architectural style of the Module viewtype because",
                "image": [],
                "options": [
                    "The correctness of the caller module may not depend on the correct implementation of the invoked function in the called module",
                    "The invoked function may not have any input parameter",
                    "The invoked function may not have any output parameter",
                    "The invoked function may not have both any input parameter nor any output parameter"
                ]
            },
            {
                "questionId": "AdventureBuilderModuleTwo",
                "content": "Consider the following performance/scalability scenario for the Adventure Builder system \n    \n    \\begin{quote}\n        Up to 500 users click to see the catalog of adventure packages following a random distribution over 1 minute; the system is under normal operating conditions; the maximal latency to serve the first page of content is under 5 seconds; average latency for same is less than 2 seconds. If required, the system should easily support an increase in the number of simultaneous requests while maintaining the same latency per request.\n    \\end{quote}\n    \n    and the following architectural view\n    \n    \\begin{center}\n        \\includegraphics[width=105mm]{AdventureBuilderHighLevelVIew}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2016/test-3/AdventureBuilderHighLevelVIew.png",
                        "width": 105
                    }
                ],
                "options": [
                    "The view does not address the scenario",
                    "The view addresses the scenario because it separates the \\texttt{Consumer Website} module from the \\texttt{OpcApp} module to allow the execution of the \\texttt{Consumer Website} module in a component that can have multiple copies of computation",
                    "The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement",
                    "The view addresses the scenario because the \\texttt{Consumer Website} module uses the \\texttt{gwt} and \\texttt{waf} modules"
                ]
            },
            {
                "questionId": "DataModelFacebook",
                "content": "In Facebook it is not possible to have the information about more that one bilion users in a single disk. Therefore, a sharding technique is applied, where the persistent information is split between several database servers, and applications are routed to the right servers for queries and updates. To describe this architecture",
                "image": [],
                "options": [
                    "It is not necessary to have any view of the Data Model architectural style because Facebook information has a very simple structure",
                    "It is enough to design a view of the Data Model architectural style at the conceptual level because Facebook information has a very simple structure",
                    "It is enough to design a view of the Data Model architectural style at the logical level because the information will be stored in a relational database",
                    "It is necessary to design a view of the Data Model architectural style at the physical level to deal with performance and consistency issues of the access to data"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2016/test-4/test-41A.tex",
        "quizTitle": "..-data-2016-test-4-test-41A",
        "questions": [
            {
                "questionId": "ComponentConnectorTwo",
                "content": "The connectors on component-and-connector view",
                "image": [],
                "options": [
                    "Represent the hardware infrastructure that allows components to communicate\n        with each other",
                    "May, on another view of the system, be represented by a set of components\n        and connectors",
                    "Represent the dependency relations that exist among the various components",
                    "Represent the control flow during an execution of the system"
                ]
            },
            {
                "questionId": "PipesFilters",
                "content": "Consider that you intend to develop a system where it is necessary to change the emails received by the server (for instance, to remove potential virus or URLs for phishing sites). The goal is that each email is processed by this system before it is sent to other servers or it is stored locally. Additionally, the system should be easily modified to support new kinds of transformations. Which style is more suitable to satisfy these requirements?",
                "image": [],
                "options": [
                    "Peer-to-Peer",
                    "Pipe-and-Filter",
                    "Client-Server",
                    "Publish-Subscribe"
                ]
            },
            {
                "questionId": "Tiers",
                "content": "The Tiers architectural style",
                "image": [],
                "options": [
                    "Applies layers to tiers",
                    "Restricts the communication between components because, for instance, a group of components should be located in the same hardware",
                    "Is an extension of the Client-Server architectural style",
                    "Defines tiers as components"
                ]
            },
            {
                "questionId": "GraphiteViewsOne",
                "content": "In Graphite system  the \\emph{receiver} and the \\emph{writer threads} support asynchronous writing of metrics to optimize disk accesses. The interaction between these two components follow the architectural style",
                "image": [],
                "options": [
                    "Client-server",
                    "Communicating Processes",
                    "Repository",
                    "Pipes-and-Filters"
                ]
            },
            {
                "questionId": "AdventureBuilderOne",
                "content": "Consider the following view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{AdventureBuilder-SOA}\n    \\end{center}\n    \n    In this view the following architectural styles are used",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2016/test-4/AdventureBuilder-SOA.png",
                        "width": 120
                    }
                ],
                "options": [
                    "Service-oriented architecture, and Client-server",
                    "Service-oriented architecture, and Shared-data",
                    "Service-oriented architecture, Shared-data, and Peer-to-peer",
                    "Service-oriented architecture, Shared-data, Peer-to-peer, and Client-server"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2016/test-4/test-41B.tex",
        "quizTitle": "..-data-2016-test-4-test-41B",
        "questions": [
            {
                "questionId": "AdventureBuilderOne",
                "content": "Consider the following view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{AdventureBuilder-SOA}\n    \\end{center}\n    \n    In this view the following architectural styles are used",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2016/test-4/AdventureBuilder-SOA.png",
                        "width": 120
                    }
                ],
                "options": [
                    "Service-oriented architecture, and Client-server",
                    "Service-oriented architecture, and Shared-data",
                    "Service-oriented architecture, Shared-data, and Peer-to-peer",
                    "Service-oriented architecture, Shared-data, Peer-to-peer, and Client-server"
                ]
            },
            {
                "questionId": "Tiers",
                "content": "The Tiers architectural style",
                "image": [],
                "options": [
                    "Applies layers to tiers",
                    "Restricts the communication between components because, for instance, a group of components should be located in the same hardware",
                    "Is an extension of the Client-Server architectural style",
                    "Defines tiers as components"
                ]
            },
            {
                "questionId": "ComponentConnectorTwo",
                "content": "The connectors on component-and-connector view",
                "image": [],
                "options": [
                    "Represent the hardware infrastructure that allows components to communicate\n        with each other",
                    "May, on another view of the system, be represented by a set of components\n        and connectors",
                    "Represent the dependency relations that exist among the various components",
                    "Represent the control flow during an execution of the system"
                ]
            },
            {
                "questionId": "PipesFilters",
                "content": "Consider that you intend to develop a system where it is necessary to change the emails received by the server (for instance, to remove potential virus or URLs for phishing sites). The goal is that each email is processed by this system before it is sent to other servers or it is stored locally. Additionally, the system should be easily modified to support new kinds of transformations. Which style is more suitable to satisfy these requirements?",
                "image": [],
                "options": [
                    "Peer-to-Peer",
                    "Pipe-and-Filter",
                    "Client-Server",
                    "Publish-Subscribe"
                ]
            },
            {
                "questionId": "GraphiteViewsOne",
                "content": "In Graphite system  the \\emph{receiver} and the \\emph{writer threads} support asynchronous writing of metrics to optimize disk accesses. The interaction between these two components follow the architectural style",
                "image": [],
                "options": [
                    "Client-server",
                    "Communicating Processes",
                    "Repository",
                    "Pipes-and-Filters"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2016/test-4/test-42A.tex",
        "quizTitle": "..-data-2016-test-4-test-42A",
        "questions": [
            {
                "questionId": "InterfaceDelegation",
                "content": "Consider the concept of interface delegation",
                "image": [],
                "options": [
                    "It corresponds to a particular case of a specialization in a generalization view",
                    "It represents a relation between a connector's role and a port of one of its internal components",
                    "It represents a relation between a component's port and a port of one of its internal components",
                    "It represent a relation between a component's port and a connector's role"
                ]
            },
            {
                "questionId": "CommunicationProcesses",
                "content": "The Java web servers, like Tomcat, use threads to process requests. For each request they create (or reuse) a thread to process it.\n    To draw a architectural view that describes this behaviour we should use",
                "image": [],
                "options": [
                    "A Module viewtype view",
                    "A Allocation viewtype view",
                    "A Communicating processes view",
                    "A Install view"
                ]
            },
            {
                "questionId": "PublishSubscribe",
                "content": "In the Publish-Subscribe architectural style",
                "image": [],
                "options": [
                    "A component can subscribe to events",
                    "It is always guaranteed that all the published events are received by their subscribing components",
                    "The events should be delivered by the same order they are sent",
                    "The set of events types are predefined at initialization time"
                ]
            },
            {
                "questionId": "GraphiteViewsTwo",
                "content": "A high-level component-and-connect view of Graphite system can be designed using only the architectural style(s)",
                "image": [],
                "options": [
                    "Shared-data and Communicating-Processes",
                    "Communicating-Processes",
                    "Tiers",
                    "Client-Server and Shared-data"
                ]
            },
            {
                "questionId": "AdventureBuilderTwo",
                "content": "Consider the following view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=140mm]{AdventureBuilder-Tiers}\n    \\end{center}\n    \n    In this view the following architectural styles are used",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2016/test-4/AdventureBuilder-Tiers.png",
                        "width": 140
                    }
                ],
                "options": [
                    "Tiers",
                    "Tiers, and Shared-data",
                    "Tiers, Shared-data, and Service-oriented architecture",
                    "Tiers, Shared-data, Service-oriented architecture, and Client-server"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2016/test-4/test-42B.tex",
        "quizTitle": "..-data-2016-test-4-test-42B",
        "questions": [
            {
                "questionId": "AdventureBuilderTwo",
                "content": "Consider the following view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=140mm]{AdventureBuilder-Tiers}\n    \\end{center}\n    \n    In this view the following architectural styles are used",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2016/test-4/AdventureBuilder-Tiers.png",
                        "width": 140
                    }
                ],
                "options": [
                    "Tiers",
                    "Tiers, and Shared-data",
                    "Tiers, Shared-data, and Service-oriented architecture",
                    "Tiers, Shared-data, Service-oriented architecture, and Client-server"
                ]
            },
            {
                "questionId": "PublishSubscribe",
                "content": "In the Publish-Subscribe architectural style",
                "image": [],
                "options": [
                    "A component can subscribe to events",
                    "It is always guaranteed that all the published events are received by their subscribing components",
                    "The events should be delivered by the same order they are sent",
                    "The set of events types are predefined at initialization time"
                ]
            },
            {
                "questionId": "GraphiteViewsTwo",
                "content": "A high-level component-and-connect view of Graphite system can be designed using only the architectural style(s)",
                "image": [],
                "options": [
                    "Shared-data and Communicating-Processes",
                    "Communicating-Processes",
                    "Tiers",
                    "Client-Server and Shared-data"
                ]
            },
            {
                "questionId": "InterfaceDelegation",
                "content": "Consider the concept of interface delegation",
                "image": [],
                "options": [
                    "It corresponds to a particular case of a specialization in a generalization view",
                    "It represents a relation between a connector's role and a port of one of its internal components",
                    "It represents a relation between a component's port and a port of one of its internal components",
                    "It represent a relation between a component's port and a connector's role"
                ]
            },
            {
                "questionId": "CommunicationProcesses",
                "content": "The Java web servers, like Tomcat, use threads to process requests. For each request they create (or reuse) a thread to process it.\n    To draw a architectural view that describes this behaviour we should use",
                "image": [],
                "options": [
                    "A Module viewtype view",
                    "A Allocation viewtype view",
                    "A Communicating processes view",
                    "A Install view"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2017/20180112-Exam/exame-20180112-companion-A.tex",
        "quizTitle": "..-data-2017-20180112-Exam-exame-20180112-companion-A",
        "questions": [
            {
                "questionId": "AvailabilityOne",
                "content": "The stimulus of an availability scenario is",
                "image": [],
                "options": [
                    "A failure.",
                    "An error.",
                    "A fault.",
                    "An input."
                ]
            },
            {
                "questionId": "PerformanceOne",
                "content": "A response measure of a performance scenario is",
                "image": [],
                "options": [
                    "Stochastic event.",
                    "Overload.",
                    "Change level of service.",
                    "Throughput."
                ]
            },
            {
                "questionId": "ModifiabilityExamOne",
                "content": "The layered architectural style applies the modifiability architectural tactic of",
                "image": [],
                "options": [
                    "Split module.",
                    "Use an intermediary.",
                    "Restrict dependencies.",
                    "Refactor."
                ]
            },
            {
                "questionId": "ModuleViewtypeExamOne",
                "content": "One of the advantages of having views of the module viewtype is that they allow to do an impact analysis to predict the effect of modifying the system. The architectural style of the module viewtype which provides richer information for this impact analysis is",
                "image": [],
                "options": [
                    "Decomposition style.",
                    "Uses style.",
                    "Generalization style.",
                    "Layered style."
                ]
            },
            {
                "questionId": "DecompositionGeneralization",
                "content": "Consider that a chess game should\n  provide an automatic and intelligent chess player, and that to\n  implement that player we will use some of the many chess engines\n  already available in the market.  Moreover, the system should allow\n  the user to choose which engine to use for each new game.  Given\n  these requirements, which of the architectural styles from the\n  module viewtype are best suited to satisfy them?",
                "image": [],
                "options": [
                    "The Decomposition style.",
                    "The Decomposition and Uses styles.",
                    "The Layered style.",
                    "The Generalization and Decomposition styles."
                ]
            },
            {
                "questionId": "ComponentAndConnectorViewtypeOne",
                "content": "In the component-and-connector viewtype connectors can be complex, which means that they provide a rich set of qualities to the interaction between the components that they connect. These complex connectors can be documented in another view using a set of components interacting through simpler connectors.",
                "image": [],
                "options": [
                    "Whenever complex connectors are used in architectural views it is necessary to also document their decomposition.",
                    "It is preferable to only design views that do not use complex connectors to increase understandability.",
                    "If there is some technology available that implements the complex connectors it is not necessary to document their decomposition.",
                    "Whenever possible it should be avoided to use complex connectors because developers have difficult to know how to implement them."
                ]
            },
            {
                "questionId": "PublishsubscribeOne",
                "content": "Typically, Instant Messaging clients have a window to list the contacts of the user, and\n      show in that window the status of each contact (whether it is available, unavailable, busy,\n      etc). Given that the status of a contact may be changed at any time, and that the contact's\n      status is given by the Instant Messaging application of that contact, which architectural\n      style represents best the interaction pattern between these components?",
                "image": [],
                "options": [
                    "The Shared Data style.",
                    "The Pipes-and-filters style.",
                    "The Publish-subscribe style.",
                    "The Client-Server style."
                ]
            },
            {
                "questionId": "ProxyServer",
                "content": "Consider the following figure that presents a Proxy Server that collapses requests from different users.\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{1-proxy-server}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/20180112-Exam/1-proxy-server.png",
                        "width": 120
                    }
                ],
                "options": [
                    "This solution optimizes the performance in terms of the latency of each request.",
                    "This solution allows an \"infinite\"\\ increase of the number clients by allowing the inclusion of more Request Nodes.",
                    "This solution continues to provide service even if a crash occurs in the Data server.",
                    "This solution optimizes the performance in terms of the throughput of processed requests."
                ]
            },
            {
                "questionId": "GraphiteOne",
                "content": "Consider the following fragment in the description of the Graphite system.\n    \n    \\begin{quote}\n        The Graphite webapp allows users to request custom graphs with a simple URL-based API. Graphing parameters are specified in the query-string of an HTTP GET request, and a PNG image is returned in response. \n    \\end{quote}\n    \n    To describe this scenario it should be designed a view that applies the following architectural style",
                "image": [],
                "options": [
                    "Decomposition.",
                    "Aspects.",
                    "Layered.",
                    "Data model."
                ]
            },
            {
                "questionId": "DVDOne",
                "content": "Consider the following usability scenario of the Catalog of DVDs case study\n    \n    \\begin{quote}\n        The user intends to have up-to-date info about the movies and the system informs the user that the existing sources have new information about one of his DVDs, which helps to maintain an up-to-date catalog. \n    \\end{quote}\n    \n    The tactic used to fulfill this scenario is",
                "image": [],
                "options": [
                    "Aggregate.",
                    "Maintain user model.",
                    "Maintain task model.",
                    "Maintain system model."
                ]
            },
            {
                "questionId": "AdventureBuilderOne",
                "content": "Consider the following view of the Adventure Builder case study that applies the tiers architectural style \n    \n    \\begin{center}\n       \\includegraphics[width=100mm]{1-adventure-tiers}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/20180112-Exam/1-adventure-tiers.png",
                        "width": 100
                    }
                ],
                "options": [
                    "This view shows that if is possible to scale differently the \\texttt{web tier} from the \\texttt{EJB tier}.",
                    "This view shows that the \\texttt{Adventure Builder Catalog DB} and the \\texttt{OPC} components should be deployed in the same hardware.",
                    "This view \\textbf{does not} show that the \\texttt{Adventure Builder Catalog DB} and the \\texttt{OPC} components can execute behind a firewall.",
                    "This view \\textbf{does not} show that the access to the \\texttt{web tier} has some security qualities."
                ]
            },
            {
                "questionId": "PulseOne",
                "content": "Consider the following view of the Pulse case study \n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{1-pulse-multiple-copies-computation}\n    \\end{center}\n    \n    This view provides a solution that uses the following tactic",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/20180112-Exam/1-pulse-multiple-copies-computation.png",
                        "width": 120
                    }
                ],
                "options": [
                    "Pipe-and-filter.",
                    "Maintain multiple copies of data.",
                    "Maintain multiple copies of computation.",
                    "Introduce concurrency."
                ]
            },
            {
                "questionId": "OrderPadOne",
                "content": "In the description of architecture of the OrderPad case study it can be read that the updates the user does on the OrderPad when it is offline are not lost. This availability quality is achieved through a",
                "image": [],
                "options": [
                    "Ignore faulty behaviour tactic",
                    "Ping-and-echo tactic",
                    "Active redundancy tactic",
                    "Retry tactic"
                ]
            },
            {
                "questionId": "Layered",
                "content": "Consider the Uses architectural style of the Module viewtype",
                "image": [],
                "options": [
                    "Cycles in the uses relation between modules are a good sign, because it indicates that several modules should be tested together.",
                    "The project manager uses this view to get advice on the incremental development of the system.",
                    "The uses relation should be applied to the coarse-grained modules, because it allows to identify circular dependences.",
                    "There isn't any relation with the layered architectural style because the allowed-to-use relation is more generic."
                ]
            },
            {
                "questionId": "DynamicReconfiguration",
                "content": "In the description of the Gnutella system can be read:\n    \n    \\begin{quote}\n        The topology of the system changes at runtime as peer components connect and disconnect to the network.\n    \\end{quote}",
                "image": [],
                "options": [
                    "When a peer connects to the network it establishes connections with all other peers in the network.",
                    "The behavior described in the sentence can be represented in a view where the dynamic reconfiguration architectural style is used.",
                    "When a peer receives a connection it sends all its files to the peer connecting it.",
                    "The behavior described in the sentence can be represented in a view where the tier architectural style is used."
                ]
            },
            {
                "questionId": "Deployment",
                "content": "In the software architecture of a system, the Deployment architectural style of the allocation viewtype is\n  best suited for",
                "image": [],
                "options": [
                    "Analysing the performance of the system.",
                    "Planning incremental releases of the system.",
                    "Estimating the effort needed to implement the system.",
                    "Analysing the system's portability and reusability."
                ]
            },
            {
                "questionId": "WebAppsOne",
                "content": "Consider a web application that was implemented using three layers: presentation, domain logic, and data access. How are these layers mapped into the components if it is a rich interface application.",
                "image": [],
                "options": [
                    "All layers are mapped to the application server component.",
                    "The presentation and domain logic layers are mapped to the application server component and the data access layer to the repository component.",
                    "The presentation layer is mapped to the browser component and the other two layers are mapped to the application server component.",
                    "All layers are mapped to the browser component where the data access layer will contains, besides a module to access a local repository, modules to access external services."
                ]
            },
            {
                "questionId": "FenixOne",
                "content": "In the context of the FenixEdu case study, the business case was to",
                "image": [],
                "options": [
                    "Incorporate in the organization's core business the goals of a software house.",
                    "Do in-house development.",
                    "Integrate the development of the software system with the organization's business goals.",
                    "Reimplement all the information systems of the organization"
                ]
            },
            {
                "questionId": "AggregateOne",
                "content": "In a microservices architecture, aggregates are used as a unit of processing",
                "image": [],
                "options": [
                    "An aggregate can contain a large number of instances.",
                    "An aggregate is usually loaded in its entirety from the database.",
                    "An aggregate has runtime references to other aggregates.",
                    "An aggregate is cluster of domain classes."
                ]
            },
            {
                "questionId": "MicroservicesExamOne",
                "content": "Consider the Microservice architectural style. Which of the following sentences \\textbf{does not} describe an advantage of microservices?",
                "image": [],
                "options": [
                    "Each service can be developed and deployed independently",
                    "Easier to scale development",
                    "Eliminates any long-term commitment to a technology stack",
                    "Testing is easier"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2017/20180112-Exam/exame-20180112-companion-B.tex",
        "quizTitle": "..-data-2017-20180112-Exam-exame-20180112-companion-B",
        "questions": [
            {
                "questionId": "ComponentAndConnectorViewtypeOne",
                "content": "In the component-and-connector viewtype connectors can be complex, which means that they provide a rich set of qualities to the interaction between the components that they connect. These complex connectors can be documented in another view using a set of components interacting through simpler connectors.",
                "image": [],
                "options": [
                    "Whenever complex connectors are used in architectural views it is necessary to also document their decomposition.",
                    "It is preferable to only design views that do not use complex connectors to increase understandability.",
                    "If there is some technology available that implements the complex connectors it is not necessary to document their decomposition.",
                    "Whenever possible it should be avoided to use complex connectors because developers have difficult to know how to implement them."
                ]
            },
            {
                "questionId": "PublishsubscribeOne",
                "content": "Typically, Instant Messaging clients have a window to list the contacts of the user, and\n      show in that window the status of each contact (whether it is available, unavailable, busy,\n      etc). Given that the status of a contact may be changed at any time, and that the contact's\n      status is given by the Instant Messaging application of that contact, which architectural\n      style represents best the interaction pattern between these components?",
                "image": [],
                "options": [
                    "The Shared Data style.",
                    "The Pipes-and-filters style.",
                    "The Publish-subscribe style.",
                    "The Client-Server style."
                ]
            },
            {
                "questionId": "GraphiteOne",
                "content": "Consider the following fragment in the description of the Graphite system.\n    \n    \\begin{quote}\n        The Graphite webapp allows users to request custom graphs with a simple URL-based API. Graphing parameters are specified in the query-string of an HTTP GET request, and a PNG image is returned in response. \n    \\end{quote}\n    \n    To describe this scenario it should be designed a view that applies the following architectural style",
                "image": [],
                "options": [
                    "Decomposition.",
                    "Aspects.",
                    "Layered.",
                    "Data model."
                ]
            },
            {
                "questionId": "ProxyServer",
                "content": "Consider the following figure that presents a Proxy Server that collapses requests from different users.\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{1-proxy-server}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/20180112-Exam/1-proxy-server.png",
                        "width": 120
                    }
                ],
                "options": [
                    "This solution optimizes the performance in terms of the latency of each request.",
                    "This solution allows an \"infinite\"\\ increase of the number clients by allowing the inclusion of more Request Nodes.",
                    "This solution continues to provide service even if a crash occurs in the Data server.",
                    "This solution optimizes the performance in terms of the throughput of processed requests."
                ]
            },
            {
                "questionId": "FenixOne",
                "content": "In the context of the FenixEdu case study, the business case was to",
                "image": [],
                "options": [
                    "Incorporate in the organization's core business the goals of a software house.",
                    "Do in-house development.",
                    "Integrate the development of the software system with the organization's business goals.",
                    "Reimplement all the information systems of the organization"
                ]
            },
            {
                "questionId": "AvailabilityOne",
                "content": "The stimulus of an availability scenario is",
                "image": [],
                "options": [
                    "A failure.",
                    "An error.",
                    "A fault.",
                    "An input."
                ]
            },
            {
                "questionId": "PerformanceOne",
                "content": "A response measure of a performance scenario is",
                "image": [],
                "options": [
                    "Stochastic event.",
                    "Overload.",
                    "Change level of service.",
                    "Throughput."
                ]
            },
            {
                "questionId": "ModifiabilityExamOne",
                "content": "The layered architectural style applies the modifiability architectural tactic of",
                "image": [],
                "options": [
                    "Split module.",
                    "Use an intermediary.",
                    "Restrict dependencies.",
                    "Refactor."
                ]
            },
            {
                "questionId": "ModuleViewtypeExamOne",
                "content": "One of the advantages of having views of the module viewtype is that they allow to do an impact analysis to predict the effect of modifying the system. The architectural style of the module viewtype which provides richer information for this impact analysis is",
                "image": [],
                "options": [
                    "Decomposition style.",
                    "Uses style.",
                    "Generalization style.",
                    "Layered style."
                ]
            },
            {
                "questionId": "DecompositionGeneralization",
                "content": "Consider that a chess game should\n  provide an automatic and intelligent chess player, and that to\n  implement that player we will use some of the many chess engines\n  already available in the market.  Moreover, the system should allow\n  the user to choose which engine to use for each new game.  Given\n  these requirements, which of the architectural styles from the\n  module viewtype are best suited to satisfy them?",
                "image": [],
                "options": [
                    "The Decomposition style.",
                    "The Decomposition and Uses styles.",
                    "The Layered style.",
                    "The Generalization and Decomposition styles."
                ]
            },
            {
                "questionId": "AggregateOne",
                "content": "In a microservices architecture, aggregates are used as a unit of processing",
                "image": [],
                "options": [
                    "An aggregate can contain a large number of instances.",
                    "An aggregate is usually loaded in its entirety from the database.",
                    "An aggregate has runtime references to other aggregates.",
                    "An aggregate is cluster of domain classes."
                ]
            },
            {
                "questionId": "MicroservicesExamOne",
                "content": "Consider the Microservice architectural style. Which of the following sentences \\textbf{does not} describe an advantage of microservices?",
                "image": [],
                "options": [
                    "Each service can be developed and deployed independently",
                    "Easier to scale development",
                    "Eliminates any long-term commitment to a technology stack",
                    "Testing is easier"
                ]
            },
            {
                "questionId": "DVDOne",
                "content": "Consider the following usability scenario of the Catalog of DVDs case study\n    \n    \\begin{quote}\n        The user intends to have up-to-date info about the movies and the system informs the user that the existing sources have new information about one of his DVDs, which helps to maintain an up-to-date catalog. \n    \\end{quote}\n    \n    The tactic used to fulfill this scenario is",
                "image": [],
                "options": [
                    "Aggregate.",
                    "Maintain user model.",
                    "Maintain task model.",
                    "Maintain system model."
                ]
            },
            {
                "questionId": "AdventureBuilderOne",
                "content": "Consider the following view of the Adventure Builder case study that applies the tiers architectural style \n    \n    \\begin{center}\n       \\includegraphics[width=100mm]{1-adventure-tiers}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/20180112-Exam/1-adventure-tiers.png",
                        "width": 100
                    }
                ],
                "options": [
                    "This view shows that if is possible to scale differently the \\texttt{web tier} from the \\texttt{EJB tier}.",
                    "This view shows that the \\texttt{Adventure Builder Catalog DB} and the \\texttt{OPC} components should be deployed in the same hardware.",
                    "This view \\textbf{does not} show that the \\texttt{Adventure Builder Catalog DB} and the \\texttt{OPC} components can execute behind a firewall.",
                    "This view \\textbf{does not} show that the access to the \\texttt{web tier} has some security qualities."
                ]
            },
            {
                "questionId": "PulseOne",
                "content": "Consider the following view of the Pulse case study \n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{1-pulse-multiple-copies-computation}\n    \\end{center}\n    \n    This view provides a solution that uses the following tactic",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/20180112-Exam/1-pulse-multiple-copies-computation.png",
                        "width": 120
                    }
                ],
                "options": [
                    "Pipe-and-filter.",
                    "Maintain multiple copies of data.",
                    "Maintain multiple copies of computation.",
                    "Introduce concurrency."
                ]
            },
            {
                "questionId": "OrderPadOne",
                "content": "In the description of architecture of the OrderPad case study it can be read that the updates the user does on the OrderPad when it is offline are not lost. This availability quality is achieved through a",
                "image": [],
                "options": [
                    "Ignore faulty behaviour tactic",
                    "Ping-and-echo tactic",
                    "Active redundancy tactic",
                    "Retry tactic"
                ]
            },
            {
                "questionId": "Layered",
                "content": "Consider the Uses architectural style of the Module viewtype",
                "image": [],
                "options": [
                    "Cycles in the uses relation between modules are a good sign, because it indicates that several modules should be tested together.",
                    "The project manager uses this view to get advice on the incremental development of the system.",
                    "The uses relation should be applied to the coarse-grained modules, because it allows to identify circular dependences.",
                    "There isn't any relation with the layered architectural style because the allowed-to-use relation is more generic."
                ]
            },
            {
                "questionId": "DynamicReconfiguration",
                "content": "In the description of the Gnutella system can be read:\n    \n    \\begin{quote}\n        The topology of the system changes at runtime as peer components connect and disconnect to the network.\n    \\end{quote}",
                "image": [],
                "options": [
                    "When a peer connects to the network it establishes connections with all other peers in the network.",
                    "The behavior described in the sentence can be represented in a view where the dynamic reconfiguration architectural style is used.",
                    "When a peer receives a connection it sends all its files to the peer connecting it.",
                    "The behavior described in the sentence can be represented in a view where the tier architectural style is used."
                ]
            },
            {
                "questionId": "Deployment",
                "content": "In the software architecture of a system, the Deployment architectural style of the allocation viewtype is\n  best suited for",
                "image": [],
                "options": [
                    "Analysing the performance of the system.",
                    "Planning incremental releases of the system.",
                    "Estimating the effort needed to implement the system.",
                    "Analysing the system's portability and reusability."
                ]
            },
            {
                "questionId": "WebAppsOne",
                "content": "Consider a web application that was implemented using three layers: presentation, domain logic, and data access. How are these layers mapped into the components if it is a rich interface application.",
                "image": [],
                "options": [
                    "All layers are mapped to the application server component.",
                    "The presentation and domain logic layers are mapped to the application server component and the data access layer to the repository component.",
                    "The presentation layer is mapped to the browser component and the other two layers are mapped to the application server component.",
                    "All layers are mapped to the browser component where the data access layer will contains, besides a module to access a local repository, modules to access external services."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2017/20180130-Exam/exame-20180130-companion-A.tex",
        "quizTitle": "..-data-2017-20180130-Exam-exame-20180130-companion-A",
        "questions": [
            {
                "questionId": "AvailabilityTwo",
                "content": "An availability tactic to prevent faults is",
                "image": [],
                "options": [
                    "Increase competence set.",
                    "Shadow.",
                    "Voting.",
                    "Ignore faulty behavior."
                ]
            },
            {
                "questionId": "PerformanceTwo",
                "content": "A performance tactic to control resource demand is",
                "image": [],
                "options": [
                    "Increase resources.",
                    "Reduce overhead.",
                    "Bound queue sizes.",
                    "Introduce concurrency."
                ]
            },
            {
                "questionId": "ModifiabilityExamTwo",
                "content": "A response measure of a modifiability scenario is",
                "image": [],
                "options": [
                    "When the modification should occur.",
                    "The features that will be implemented.",
                    "The new defects introduced.",
                    "Defer binding."
                ]
            },
            {
                "questionId": "DVDCatalogMobile",
                "content": "Consider the module viewtype views of the Catalog of DVD application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        To support iPhone/iPad/Android version with sync, which allows offline use of the application in the mobile device and data synchronization to occur when a connection is available\n    \\end{quote}\n    \n    This requirement requires a change of",
                "image": [],
                "options": [
                    "The decomposition view to include a module for the synchronization responsibilities",
                    "The uses view to represent how the mobile device uses the Catalog application",
                    "The layered view to include a layer for each type of device",
                    "The domain layer of the layered style to represent the types of devices"
                ]
            },
            {
                "questionId": "ComponentAndConnectorViewtypeTwo",
                "content": "Considered the following two views of a system that receive a stream of character and produce the same stream where the characters are alternately uppercase and lowercase.\n    \n    \\begin{center}\n       \\includegraphics[width=120mm]{1-module-and-cc}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/20180130-Exam/1-module-and-cc.png",
                        "width": 120
                    }
                ],
                "options": [
                    "The \\emph{config} module is not used in the implementation of any component.",
                    "The \\emph{main} module is used in the implementation of all components.",
                    "The connectors only use the \\emph{stdio} module for their implementation.",
                    "The \\emph{Split} component uses the \\emph{to\\_lower} module for its implementation"
                ]
            },
            {
                "questionId": "ModuleViewtypeExamTwo",
                "content": "One of the advantages of having views of the module viewtype is that they allow to do a traceability analysis of requirements, how the functional requirements of the system are supported by module responsibilities. The modifiability tactic that is involved in this mapping is",
                "image": [],
                "options": [
                    "Split module.",
                    "Abstract common services.",
                    "Restrict dependencies.",
                    "Encapsulation."
                ]
            },
            {
                "questionId": "PipesFilters",
                "content": "Consider that you intend to develop a system where it is necessary to change the emails received by the server (for instance, to remove potential virus or URLs for phishing sites). The goal is that each email is processed by this system before it is sent to other servers or it is stored locally. Additionally, the system should be easily modified to support new kinds of transformations. Which style is more suitable to satisfy these requirements?",
                "image": [],
                "options": [
                    "Peer-to-Peer.",
                    "Pipe-and-Filter.",
                    "Client-Server.",
                    "Publish-Subscribe."
                ]
            },
            {
                "questionId": "ScalableArchitectureOne",
                "content": "Consider the following figure that presents a Image Hosting System.\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{1-image-hosting}\n    \\end{center}\n    \n    By adding another Image File Storage component, which contains a redundant copy of the data and provides read access to the clients, but without guaranteeing a ACID transactional behavior between reads and writes, it improves the quality(ies) of",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/20180130-Exam/1-image-hosting.png",
                        "width": 120
                    }
                ],
                "options": [
                    "Performance.",
                    "Availability for incorrect responses from the Image File Storage component.",
                    "Performance and Availability for crashes of the Image File Storage component.",
                    "Performance and Availability for incorrect responses from the Image File Storage component."
                ]
            },
            {
                "questionId": "GraphiteTwo",
                "content": "Which quality, or qualities, of the Graphite system are described by the sentence: \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL.}",
                "image": [],
                "options": [
                    "Usability and Performance.",
                    "Usability.",
                    "Performance.",
                    "Modifiability."
                ]
            },
            {
                "questionId": "WorkAssigment",
                "content": "Consider the Work Assignment architectural style of the allocation viewtype.",
                "image": [],
                "options": [
                    "It assigns components and connectors to people and teams.",
                    "It is useful for the project managers.",
                    "It does not consider the software that is outsourced.",
                    "It allows to estimate the cost of hardware."
                ]
            },
            {
                "questionId": "WebAppsTwo",
                "content": "Consider a web application that supports several types of user interface, e.g., web, mobile, etc. If it has to process a high volume of requests, which depend on the type of user interface, and a multi-tier architecture is followed. How many tiers should be used?",
                "image": [],
                "options": [
                    "One.",
                    "Two.",
                    "Three.",
                    "Four."
                ]
            },
            {
                "questionId": "DVDTwo",
                "content": "Consider the following generalization view of the Catalog of DVD case study to fulfill a modifiability scenario\n    \n    \\begin{center}\n        \\includegraphics[width=60mm]{1-dvd-generalization}\n    \\end{center}\n    \n    From this view the stakeholders can infer",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/20180130-Exam/1-dvd-generalization.png",
                        "width": 60
                    }
                ],
                "options": [
                    "The cost of the modification.",
                    "That the integration of a new source will not have any impact on the other modules of the Catalog of DVDs.",
                    "That the impact of integrating a new source is controlled by the interface of \\emph{Import DVD Info} Module.",
                    "That the modification can occur at runtime."
                ]
            },
            {
                "questionId": "DataModel",
                "content": "In Facebook it is not possible to have the information about more that one bilion users in a single disk. Therefore, a sharding technique is applied, where the persistent information is split between several database servers, and requests are routed to the right servers for queries and updates. Additionally, due to performance requirements, the information needs to be replicated in several servers. To describe this architecture",
                "image": [],
                "options": [
                    "It is not necessary to have any view of the Data Model architectural style because Facebook information has a very simple structure.",
                    "It is enough to design a view of the Data Model architectural style at the conceptual level because Facebook information has a very simple structure.",
                    "It is enough to design a view of the Data Model architectural style at the logical level because the information will be stored in a relational database.",
                    "It is necessary to design a view of the Data Model architectural style at the physical level to deal with performance and consistency issues of the access to data."
                ]
            },
            {
                "questionId": "SOA",
                "content": "Suppose that you are developing the software architecture of a new\n    system for an organization composed of several organizational\n    units, each one with its own information systems, which have been\n    developed independently of each other over the course of several\n    years and depending on the particular needs of each unit.  Your\n    system has the goal of integrating the various existing systems,\n    providing in this way not only a unified view of how the\n    organization works, but also allowing the creation of new\n    processes within the organization that involve more than one unit.\n    Which architectural style is better suited to design such a\n    system?",
                "image": [],
                "options": [
                    "The Decomposition style.",
                    "The Client-Server style.",
                    "The Service Oriented Architecture style.",
                    "The Communicating Processes style."
                ]
            },
            {
                "questionId": "AdventureBuilderTwo",
                "content": "Consider the following view of the Adventure Builder case study \n    \n    \\begin{center}\n       \\includegraphics[width=120mm]{1-adventure-com-proc}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/20180130-Exam/1-adventure-com-proc.png",
                        "width": 120
                    }
                ],
                "options": [
                    "This view shows that the processing of orders is done synchronously.",
                    "This view shows that the processing of tracking requests is done synchronously.",
                    "This view shows that bank debits are done asynchronously.",
                    "This view shows that the responses from the providers are processed synchronously."
                ]
            },
            {
                "questionId": "PulseTwo",
                "content": "Consider the following view of the Pulse case study \n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{1-pulse-multiple-copies-computation}\n    \\end{center}\n    \n    This view applies the following architectural styles",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/20180130-Exam/1-pulse-multiple-copies-computation.png",
                        "width": 120
                    }
                ],
                "options": [
                    "Pipe-and-filter and tiers.",
                    "Shared-data and publish-subscribe.",
                    "Pipe-and-filter and publish-subscribe.",
                    "Pipe-and-filter and shared-data."
                ]
            },
            {
                "questionId": "OrderPadTwo",
                "content": "Consider the architecture of the Morrison's OrderPad. The connector between the client component, executing in the Pad, and the server component, executing in the OrderPadDatabase",
                "image": [],
                "options": [
                    "Guarantees that the redundant data in the client and the server is always synchronized.",
                    "Implements an event bus that allows the server to inform the client about new order recommendations.",
                    "Do not loose the changes done on the client component if the server is not available.",
                    "It completely hides the server faults from the Pad user."
                ]
            },
            {
                "questionId": "FenixTwo",
                "content": "When applying Attribute-Driven Design (ADD) to the FenixEdu system the creation of a view where there are redundant web servers, load balancers and database servers",
                "image": [],
                "options": [
                    "Results from a utility tree for performance.",
                    "Results from a single availability scenario.",
                    "Results from the application of a single ADD iteration.",
                    "Results from the application of several ADD iterations."
                ]
            },
            {
                "questionId": "AggregateTwo",
                "content": "Consider the following decomposition of a domain model into 3 aggregates. If, instead of this decomposition, \\texttt{Customer} and \\texttt{Order} were in the same aggregate  \n    \n    \\begin{center}\n       \\includegraphics[width=120mm]{1-aggregate}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/20180130-Exam/1-aggregate.png",
                        "width": 120
                    }
                ],
                "options": [
                    "It would reduce the scalability for updates of different orders for the same customer.",
                    "Two users would conflict if they attempt to edit different orders for the same customer.",
                    "As the number of orders grows it will be increasingly expensive to load the aggregate.",
                    "All the above."
                ]
            },
            {
                "questionId": "MicroservicesExamTwo",
                "content": "Consider the following definition of Microservice architectural style by Martin Fowler\n    \n    \\begin{quote}\n        The microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies.\n    \\end{quote}\n    \n    To represent an architecture based on Microservices",
                "image": [],
                "options": [
                    "We do not need a view of the module viewtype because it is about the runtime properties of the system.",
                    "We do not need a view of the allocation viewtype because deployment is automated.",
                    "The component-and-connector view should emphasize the performance qualities of systems following the microservices architecture.",
                    "It is necessary to use views of the three viewtypes."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2017/20180130-Exam/exame-20180130-companion-B.tex",
        "quizTitle": "..-data-2017-20180130-Exam-exame-20180130-companion-B",
        "questions": [
            {
                "questionId": "AggregateTwo",
                "content": "Consider the following decomposition of a domain model into 3 aggregates. If, instead of this decomposition, \\texttt{Customer} and \\texttt{Order} were in the same aggregate  \n    \n    \\begin{center}\n       \\includegraphics[width=120mm]{1-aggregate}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/20180130-Exam/1-aggregate.png",
                        "width": 120
                    }
                ],
                "options": [
                    "It would reduce the scalability for updates of different orders for the same customer.",
                    "Two users would conflict if they attempt to edit different orders for the same customer.",
                    "As the number of orders grows it will be increasingly expensive to load the aggregate.",
                    "All the above."
                ]
            },
            {
                "questionId": "AvailabilityTwo",
                "content": "An availability tactic to prevent faults is",
                "image": [],
                "options": [
                    "Increase competence set.",
                    "Shadow.",
                    "Voting.",
                    "Ignore faulty behavior."
                ]
            },
            {
                "questionId": "PerformanceTwo",
                "content": "A performance tactic to control resource demand is",
                "image": [],
                "options": [
                    "Increase resources.",
                    "Reduce overhead.",
                    "Bound queue sizes.",
                    "Introduce concurrency."
                ]
            },
            {
                "questionId": "MicroservicesExamTwo",
                "content": "Consider the following definition of Microservice architectural style by Martin Fowler\n    \n    \\begin{quote}\n        The microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies.\n    \\end{quote}\n    \n    To represent an architecture based on Microservices",
                "image": [],
                "options": [
                    "We do not need a view of the module viewtype because it is about the runtime properties of the system.",
                    "We do not need a view of the allocation viewtype because deployment is automated.",
                    "The component-and-connector view should emphasize the performance qualities of systems following the microservices architecture.",
                    "It is necessary to use views of the three viewtypes."
                ]
            },
            {
                "questionId": "ModifiabilityExamTwo",
                "content": "A response measure of a modifiability scenario is",
                "image": [],
                "options": [
                    "When the modification should occur.",
                    "The features that will be implemented.",
                    "The new defects introduced.",
                    "Defer binding."
                ]
            },
            {
                "questionId": "DVDCatalogMobile",
                "content": "Consider the module viewtype views of the Catalog of DVD application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        To support iPhone/iPad/Android version with sync, which allows offline use of the application in the mobile device and data synchronization to occur when a connection is available\n    \\end{quote}\n    \n    This requirement requires a change of",
                "image": [],
                "options": [
                    "The decomposition view to include a module for the synchronization responsibilities",
                    "The uses view to represent how the mobile device uses the Catalog application",
                    "The layered view to include a layer for each type of device",
                    "The domain layer of the layered style to represent the types of devices"
                ]
            },
            {
                "questionId": "GraphiteTwo",
                "content": "Which quality, or qualities, of the Graphite system are described by the sentence: \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL.}",
                "image": [],
                "options": [
                    "Usability and Performance.",
                    "Usability.",
                    "Performance.",
                    "Modifiability."
                ]
            },
            {
                "questionId": "WorkAssigment",
                "content": "Consider the Work Assignment architectural style of the allocation viewtype.",
                "image": [],
                "options": [
                    "It assigns components and connectors to people and teams.",
                    "It is useful for the project managers.",
                    "It does not consider the software that is outsourced.",
                    "It allows to estimate the cost of hardware."
                ]
            },
            {
                "questionId": "ScalableArchitectureOne",
                "content": "Consider the following figure that presents a Image Hosting System.\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{1-image-hosting}\n    \\end{center}\n    \n    By adding another Image File Storage component, which contains a redundant copy of the data and provides read access to the clients, but without guaranteeing a ACID transactional behavior between reads and writes, it improves the quality(ies) of",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/20180130-Exam/1-image-hosting.png",
                        "width": 120
                    }
                ],
                "options": [
                    "Performance.",
                    "Availability for incorrect responses from the Image File Storage component.",
                    "Performance and Availability for crashes of the Image File Storage component.",
                    "Performance and Availability for incorrect responses from the Image File Storage component."
                ]
            },
            {
                "questionId": "WebAppsTwo",
                "content": "Consider a web application that supports several types of user interface, e.g., web, mobile, etc. If it has to process a high volume of requests, which depend on the type of user interface, and a multi-tier architecture is followed. How many tiers should be used?",
                "image": [],
                "options": [
                    "One.",
                    "Two.",
                    "Three.",
                    "Four."
                ]
            },
            {
                "questionId": "DVDTwo",
                "content": "Consider the following generalization view of the Catalog of DVD case study to fulfill a modifiability scenario\n    \n    \\begin{center}\n        \\includegraphics[width=60mm]{1-dvd-generalization}\n    \\end{center}\n    \n    From this view the stakeholders can infer",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/20180130-Exam/1-dvd-generalization.png",
                        "width": 60
                    }
                ],
                "options": [
                    "The cost of the modification.",
                    "That the integration of a new source will not have any impact on the other modules of the Catalog of DVDs.",
                    "That the impact of integrating a new source is controlled by the interface of \\emph{Import DVD Info} Module.",
                    "That the modification can occur at runtime."
                ]
            },
            {
                "questionId": "DataModel",
                "content": "In Facebook it is not possible to have the information about more that one bilion users in a single disk. Therefore, a sharding technique is applied, where the persistent information is split between several database servers, and requests are routed to the right servers for queries and updates. Additionally, due to performance requirements, the information needs to be replicated in several servers. To describe this architecture",
                "image": [],
                "options": [
                    "It is not necessary to have any view of the Data Model architectural style because Facebook information has a very simple structure.",
                    "It is enough to design a view of the Data Model architectural style at the conceptual level because Facebook information has a very simple structure.",
                    "It is enough to design a view of the Data Model architectural style at the logical level because the information will be stored in a relational database.",
                    "It is necessary to design a view of the Data Model architectural style at the physical level to deal with performance and consistency issues of the access to data."
                ]
            },
            {
                "questionId": "SOA",
                "content": "Suppose that you are developing the software architecture of a new\n    system for an organization composed of several organizational\n    units, each one with its own information systems, which have been\n    developed independently of each other over the course of several\n    years and depending on the particular needs of each unit.  Your\n    system has the goal of integrating the various existing systems,\n    providing in this way not only a unified view of how the\n    organization works, but also allowing the creation of new\n    processes within the organization that involve more than one unit.\n    Which architectural style is better suited to design such a\n    system?",
                "image": [],
                "options": [
                    "The Decomposition style.",
                    "The Client-Server style.",
                    "The Service Oriented Architecture style.",
                    "The Communicating Processes style."
                ]
            },
            {
                "questionId": "AdventureBuilderTwo",
                "content": "Consider the following view of the Adventure Builder case study \n    \n    \\begin{center}\n       \\includegraphics[width=120mm]{1-adventure-com-proc}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/20180130-Exam/1-adventure-com-proc.png",
                        "width": 120
                    }
                ],
                "options": [
                    "This view shows that the processing of orders is done synchronously.",
                    "This view shows that the processing of tracking requests is done synchronously.",
                    "This view shows that bank debits are done asynchronously.",
                    "This view shows that the responses from the providers are processed synchronously."
                ]
            },
            {
                "questionId": "FenixTwo",
                "content": "When applying Attribute-Driven Design (ADD) to the FenixEdu system the creation of a view where there are redundant web servers, load balancers and database servers",
                "image": [],
                "options": [
                    "Results from a utility tree for performance.",
                    "Results from a single availability scenario.",
                    "Results from the application of a single ADD iteration.",
                    "Results from the application of several ADD iterations."
                ]
            },
            {
                "questionId": "PulseTwo",
                "content": "Consider the following view of the Pulse case study \n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{1-pulse-multiple-copies-computation}\n    \\end{center}\n    \n    This view applies the following architectural styles",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/20180130-Exam/1-pulse-multiple-copies-computation.png",
                        "width": 120
                    }
                ],
                "options": [
                    "Pipe-and-filter and tiers.",
                    "Shared-data and publish-subscribe.",
                    "Pipe-and-filter and publish-subscribe.",
                    "Pipe-and-filter and shared-data."
                ]
            },
            {
                "questionId": "OrderPadTwo",
                "content": "Consider the architecture of the Morrison's OrderPad. The connector between the client component, executing in the Pad, and the server component, executing in the OrderPadDatabase",
                "image": [],
                "options": [
                    "Guarantees that the redundant data in the client and the server is always synchronized.",
                    "Implements an event bus that allows the server to inform the client about new order recommendations.",
                    "Do not loose the changes done on the client component if the server is not available.",
                    "It completely hides the server faults from the Pad user."
                ]
            },
            {
                "questionId": "ModuleViewtypeExamTwo",
                "content": "One of the advantages of having views of the module viewtype is that they allow to do a traceability analysis of requirements, how the functional requirements of the system are supported by module responsibilities. The modifiability tactic that is involved in this mapping is",
                "image": [],
                "options": [
                    "Split module.",
                    "Abstract common services.",
                    "Restrict dependencies.",
                    "Encapsulation."
                ]
            },
            {
                "questionId": "PipesFilters",
                "content": "Consider that you intend to develop a system where it is necessary to change the emails received by the server (for instance, to remove potential virus or URLs for phishing sites). The goal is that each email is processed by this system before it is sent to other servers or it is stored locally. Additionally, the system should be easily modified to support new kinds of transformations. Which style is more suitable to satisfy these requirements?",
                "image": [],
                "options": [
                    "Peer-to-Peer.",
                    "Pipe-and-Filter.",
                    "Client-Server.",
                    "Publish-Subscribe."
                ]
            },
            {
                "questionId": "ComponentAndConnectorViewtypeTwo",
                "content": "Considered the following two views of a system that receive a stream of character and produce the same stream where the characters are alternately uppercase and lowercase.\n    \n    \\begin{center}\n       \\includegraphics[width=120mm]{1-module-and-cc}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/20180130-Exam/1-module-and-cc.png",
                        "width": 120
                    }
                ],
                "options": [
                    "The \\emph{config} module is not used in the implementation of any component.",
                    "The \\emph{main} module is used in the implementation of all components.",
                    "The connectors only use the \\emph{stdio} module for their implementation.",
                    "The \\emph{Split} component uses the \\emph{to\\_lower} module for its implementation"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2017/test-1/test-11A.tex",
        "quizTitle": "..-data-2017-test-1-test-11A",
        "questions": [
            {
                "questionId": "QueuesQualities",
                "content": "Consider the following figure that presents a Queue where client applications write their requests to be processed by a server.\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{Queues}\n    \\end{center}\n    \n    This solution \\textbf{does not} provide the following quality:",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-1/Queues.png",
                        "width": 100
                    }
                ],
                "options": [
                    "Availability whenever the server running the tasks crashes, the tasks are restarted and eventually finished",
                    "Performance of the tasks execution, scheduling of tasks can be optimized for the particular context of the system",
                    "Performance of the services being executed by the clients, they can execute other actions while waiting for the response",
                    "Simple programming model, the clients only need to concern about the business logic of the application, the remote services are transparent"
                ]
            },
            {
                "questionId": "ElevatorCommon",
                "content": "In the Architect Elevator article by Gregor Hohpe can be read:\n    \n    \\begin{quote}\n        Finding the appropriate context requires the architect to visit many floors of the organization.\n    \\end{quote}\n    \n    This sentence reflects the fact that an architecture is",
                "image": [],
                "options": [
                    "The result of decisions that are made at the \"upper floors\" of the organization",
                    "The sole decision of an architect",
                    "A common understanding to be achieve among all the system stakeholders",
                    "A set of software elements and their relations"
                ]
            },
            {
                "questionId": "MicroservicesProject",
                "content": "In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:\n    \n    \\begin{quote}\n        The microservice approach to division ..., splitting up into services organized around business capability. Such services take a broad-stack implementation of software for that business area, including user-interface, persistent storage, and any external collaborations. Consequently the teams are cross-functional, including the full range of skills required for the development: user-experience, database, and project management.\n    \\end{quote}\n    \n    Considering the architecture influence cycle, which influence factor it is being considered?",
                "image": [],
                "options": [
                    "Commercial",
                    "Technical",
                    "Project",
                    "Professional"
                ]
            },
            {
                "questionId": "ScalablePartitioning",
                "content": "Consider the following figure that presents an architectural view of an \\emph{Image Hosting Application} which resulted from the enrichment of another architectural view by adding another \\emph{Image File Storage} pair, in the figure they are distinguished by 1 and 2. \n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{ScalablePartitioning}\n    \\end{center}\n    \n    Which quality results from this enrichment, that was not provided by the previous version of the architecture?",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-1/ScalablePartitioning.png",
                        "width": 100
                    }
                ],
                "options": [
                    "Availability of the Image Write Service, whenever one of the Image Write Service components crashes",
                    "Scalability of the Image File Storage in terms of the storage capacity",
                    "Availability of the Image File Storage, whenever the Image File Storage component crashes",
                    "Performance of the Image Write Service"
                ]
            },
            {
                "questionId": "PerformanceSenario",
                "content": "Consider the following scenario for performance\n    \n    \\begin{quote}\n        During the enrollment period the FenixEDU system should be able to completely enroll 5.000 students in less than 30 minutes.\n    \\end{quote}",
                "image": [],
                "options": [
                    "The source of stimulus is the FenixEDU system",
                    "The stimulus is periodic",
                    "The environment is overloaded",
                    "The measure of the response is throughput"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2017/test-1/test-11B.tex",
        "quizTitle": "..-data-2017-test-1-test-11B",
        "questions": [
            {
                "questionId": "ElevatorCommon",
                "content": "In the Architect Elevator article by Gregor Hohpe can be read:\n    \n    \\begin{quote}\n        Finding the appropriate context requires the architect to visit many floors of the organization.\n    \\end{quote}\n    \n    This sentence reflects the fact that an architecture is",
                "image": [],
                "options": [
                    "The result of decisions that are made at the \"upper floors\" of the organization",
                    "The sole decision of an architect",
                    "A common understanding to be achieve among all the system stakeholders",
                    "A set of software elements and their relations"
                ]
            },
            {
                "questionId": "PerformanceSenario",
                "content": "Consider the following scenario for performance\n    \n    \\begin{quote}\n        During the enrollment period the FenixEDU system should be able to completely enroll 5.000 students in less than 30 minutes.\n    \\end{quote}",
                "image": [],
                "options": [
                    "The source of stimulus is the FenixEDU system",
                    "The stimulus is periodic",
                    "The environment is overloaded",
                    "The measure of the response is throughput"
                ]
            },
            {
                "questionId": "MicroservicesProject",
                "content": "In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:\n    \n    \\begin{quote}\n        The microservice approach to division ..., splitting up into services organized around business capability. Such services take a broad-stack implementation of software for that business area, including user-interface, persistent storage, and any external collaborations. Consequently the teams are cross-functional, including the full range of skills required for the development: user-experience, database, and project management.\n    \\end{quote}\n    \n    Considering the architecture influence cycle, which influence factor it is being considered?",
                "image": [],
                "options": [
                    "Commercial",
                    "Technical",
                    "Project",
                    "Professional"
                ]
            },
            {
                "questionId": "ScalablePartitioning",
                "content": "Consider the following figure that presents an architectural view of an \\emph{Image Hosting Application} which resulted from the enrichment of another architectural view by adding another \\emph{Image File Storage} pair, in the figure they are distinguished by 1 and 2. \n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{ScalablePartitioning}\n    \\end{center}\n    \n    Which quality results from this enrichment, that was not provided by the previous version of the architecture?",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-1/ScalablePartitioning.png",
                        "width": 100
                    }
                ],
                "options": [
                    "Availability of the Image Write Service, whenever one of the Image Write Service components crashes",
                    "Scalability of the Image File Storage in terms of the storage capacity",
                    "Availability of the Image File Storage, whenever the Image File Storage component crashes",
                    "Performance of the Image Write Service"
                ]
            },
            {
                "questionId": "QueuesQualities",
                "content": "Consider the following figure that presents a Queue where client applications write their requests to be processed by a server.\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{Queues}\n    \\end{center}\n    \n    This solution \\textbf{does not} provide the following quality:",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-1/Queues.png",
                        "width": 100
                    }
                ],
                "options": [
                    "Availability whenever the server running the tasks crashes, the tasks are restarted and eventually finished",
                    "Performance of the tasks execution, scheduling of tasks can be optimized for the particular context of the system",
                    "Performance of the services being executed by the clients, they can execute other actions while waiting for the response",
                    "Simple programming model, the clients only need to concern about the business logic of the application, the remote services are transparent"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2017/test-1/test-12A.tex",
        "quizTitle": "..-data-2017-test-1-test-12A",
        "questions": [
            {
                "questionId": "ElevatorInteroperability",
                "content": "In the Architect Elevator article by Gregor Hohpe can be read:\n    \n    \\begin{quote}\n        Once a developer approached our architecture team with an application that had \"significant scalability demands\". A quick look at the architecture diagram revealed numerous components communicating via XML messages. When I pointed out that this may be the very reason for the performance concerns, I was quickly informed that this was an architecture decision and couldn't be changed. Assuming the architects are smart and well-intentioned, they may have thought about interoperability when they made this decision but may be unaware of the negative impact on run-time performance and development velocity.\n    \\end{quote}\n    \n    From this sentence we can conclude that",
                "image": [],
                "options": [
                    "Interoperability is a quality that as lower priority than performance",
                    "Scalability should be the quality to be achieved first by any architecture",
                    "That the use of XML technology for interoperability is not a correct decision",
                    "None of the above"
                ]
            },
            {
                "questionId": "MicroservicesModularity",
                "content": "In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:\n    \n    \\begin{quote}\n        As well as the fact that services are independently deployable and scalable, each service also provides a firm module boundary, even allowing for different services to be written in different programming languages. They can also be managed by different teams.\n    \\end{quote}\n    \n    Which is not necessarily an advantage of being independently deployable and scalable?",
                "image": [],
                "options": [
                    "Performance",
                    "Availability",
                    "Modifiability",
                    "Time to market"
                ]
            },
            {
                "questionId": "ReadsAndWrites",
                "content": "Consider the following figure that presents an architectural view of an \\emph{Image Hosting Application}. \n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{ScalablePartitioning}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-1/ScalablePartitioning.png",
                        "width": 100
                    }
                ],
                "options": [
                    "The number of Image Write Service components should be the same of the number Image Retrieval Service components",
                    "The hardware where of Image Write Service components execute should have the same capabilities of the hardware where Image Retrieval Service components run",
                    "Both components, the Image Write Service and the Image Retrieval Service, should be designed using an synchronous model of interactions, where a thread is associated with each request",
                    "The separation of write and retrieval services allows them do scale independently"
                ]
            },
            {
                "questionId": "QueuesSyncAndAsync",
                "content": "Consider the following figure that presents a Queue where client applications write their requests to be processed by a server (asynchronous) and compare with another architectural design (synchronous) where a thread is associated with each request.\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{Queues}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-1/Queues.png",
                        "width": 100
                    }
                ],
                "options": [
                    "The synchronous solution requires less memory than asynchronous solution",
                    "The asynchronous solution can support a larger number of simultaneous requests",
                    "In the synchronous solution a task can be associated, during its execution, with different execution entities, e.g. thread",
                    "In the asynchronous solution a task is always associated, during its execution, with the same execution entity, e.g. thread"
                ]
            },
            {
                "questionId": "PerformanceTacticsOne",
                "content": "Which of the following tactics is not related with the management of resources",
                "image": [],
                "options": [
                    "Introduce concurrency",
                    "Limit event response",
                    "Maintain multiple copies of data",
                    "Schedule resources"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2017/test-1/test-12B.tex",
        "quizTitle": "..-data-2017-test-1-test-12B",
        "questions": [
            {
                "questionId": "QueuesSyncAndAsync",
                "content": "Consider the following figure that presents a Queue where client applications write their requests to be processed by a server (asynchronous) and compare with another architectural design (synchronous) where a thread is associated with each request.\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{Queues}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-1/Queues.png",
                        "width": 100
                    }
                ],
                "options": [
                    "The synchronous solution requires less memory than asynchronous solution",
                    "The asynchronous solution can support a larger number of simultaneous requests",
                    "In the synchronous solution a task can be associated, during its execution, with different execution entities, e.g. thread",
                    "In the asynchronous solution a task is always associated, during its execution, with the same execution entity, e.g. thread"
                ]
            },
            {
                "questionId": "ElevatorInteroperability",
                "content": "In the Architect Elevator article by Gregor Hohpe can be read:\n    \n    \\begin{quote}\n        Once a developer approached our architecture team with an application that had \"significant scalability demands\". A quick look at the architecture diagram revealed numerous components communicating via XML messages. When I pointed out that this may be the very reason for the performance concerns, I was quickly informed that this was an architecture decision and couldn't be changed. Assuming the architects are smart and well-intentioned, they may have thought about interoperability when they made this decision but may be unaware of the negative impact on run-time performance and development velocity.\n    \\end{quote}\n    \n    From this sentence we can conclude that",
                "image": [],
                "options": [
                    "Interoperability is a quality that as lower priority than performance",
                    "Scalability should be the quality to be achieved first by any architecture",
                    "That the use of XML technology for interoperability is not a correct decision",
                    "None of the above"
                ]
            },
            {
                "questionId": "MicroservicesModularity",
                "content": "In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:\n    \n    \\begin{quote}\n        As well as the fact that services are independently deployable and scalable, each service also provides a firm module boundary, even allowing for different services to be written in different programming languages. They can also be managed by different teams.\n    \\end{quote}\n    \n    Which is not necessarily an advantage of being independently deployable and scalable?",
                "image": [],
                "options": [
                    "Performance",
                    "Availability",
                    "Modifiability",
                    "Time to market"
                ]
            },
            {
                "questionId": "ReadsAndWrites",
                "content": "Consider the following figure that presents an architectural view of an \\emph{Image Hosting Application}. \n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{ScalablePartitioning}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-1/ScalablePartitioning.png",
                        "width": 100
                    }
                ],
                "options": [
                    "The number of Image Write Service components should be the same of the number Image Retrieval Service components",
                    "The hardware where of Image Write Service components execute should have the same capabilities of the hardware where Image Retrieval Service components run",
                    "Both components, the Image Write Service and the Image Retrieval Service, should be designed using an synchronous model of interactions, where a thread is associated with each request",
                    "The separation of write and retrieval services allows them do scale independently"
                ]
            },
            {
                "questionId": "PerformanceTacticsOne",
                "content": "Which of the following tactics is not related with the management of resources",
                "image": [],
                "options": [
                    "Introduce concurrency",
                    "Limit event response",
                    "Maintain multiple copies of data",
                    "Schedule resources"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2017/test-1/test-13A.tex",
        "quizTitle": "..-data-2017-test-1-test-13A",
        "questions": [
            {
                "questionId": "DataStorageAvailability",
                "content": "Consider the following figure that presents an architectural view of an \\emph{Image Hosting Application}. \n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{ScalablePartitioning}\n    \\end{center}\n    \n    The replication between the Image File Storage \\emph{n} and Image File Storage \\emph{nb}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-1/ScalablePartitioning.png",
                        "width": 100
                    }
                ],
                "options": [
                    "Provides the quality of availability",
                    "Provides the quality of performance",
                    "Provides the quality of modifiability",
                    "Does not provide any additional quality"
                ]
            },
            {
                "questionId": "MicroservicesConsistency",
                "content": "In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:\n    \n    \\begin{quote}\n        Decentralizing responsibility for data across microservices has implications for managing updates. The common approach to dealing with updates has been to use transactions to guarantee consistency when updating multiple resources. This approach is often used within monoliths.\n    \\end{quote}\n    \n    What is the impact of decentralizing responsibility for data across microservices?",
                "image": [],
                "options": [
                    "The need to use a two-phase commit protocol",
                    "The need to have a tight integration of the development teams",
                    "The need to have eventual consistency and compensating operations",
                    "The need to deploy all the microservices simultaneously"
                ]
            },
            {
                "questionId": "ElevatorDevops",
                "content": "In the Architect Elevator article by Gregor Hohpe can be read:\n    \n    \\begin{quote}\n        A lot of large companies have discovered the benefits of cloud computing but see it mainly as an infrastructure topic. I feel that's misguided: being able to get compute resources more quickly and cheaply is useful, but the real business benefit lies in a fully automated tool chain that minimizes the time in which a normal code change can go into production. Not quite coincidentally, this is my favorite definition of DevOps.\n    \\end{quote}\n    \n    In the author's opinion",
                "image": [],
                "options": [
                    "Time to market is the most important impact of cloud computing in an architecture",
                    "Reduction of cost is the most important impact of cloud computing in an architecture",
                    "Cloud computing has impact on the business but it is not an architectural aspect",
                    "Using cloud computing we cannot delay some architectural decisions"
                ]
            },
            {
                "questionId": "QueuesCrash",
                "content": "Consider the following figure that presents a Queue where client applications write their requests to be processed by a server (asynchronous) and compare with another architectural design (synchronous) where a thread is associated with each request.\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{Queues}\n    \\end{center}\n    \n    Consider a situation where the server that processes the tasks crashes",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-1/Queues.png",
                        "width": 100
                    }
                ],
                "options": [
                    "In the synchronous solution only some of the tasks that are being executed are lost and they have to be resubmitted by the client",
                    "In the asynchronous solution the tasks that are being executed are lost and they have to be resubmitted by the client",
                    "In the asynchronous solution it is possible to provide an implement where the tasks being executed are finished without requiring the client to resubmitted them",
                    "In the synchronous solution the tasks being executed are finished without requiring the client to resubmitted them"
                ]
            },
            {
                "questionId": "PerformanceTacticsTwo",
                "content": "Which of the following tactics is not related with the control of resource demand",
                "image": [],
                "options": [
                    "Manage sampling rate",
                    "Bound execution times",
                    "Maintain multiple copies of computation",
                    "Increase resource efficiency"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2017/test-1/test-13B.tex",
        "quizTitle": "..-data-2017-test-1-test-13B",
        "questions": [
            {
                "questionId": "QueuesCrash",
                "content": "Consider the following figure that presents a Queue where client applications write their requests to be processed by a server (asynchronous) and compare with another architectural design (synchronous) where a thread is associated with each request.\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{Queues}\n    \\end{center}\n    \n    Consider a situation where the server that processes the tasks crashes",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-1/Queues.png",
                        "width": 100
                    }
                ],
                "options": [
                    "In the synchronous solution only some of the tasks that are being executed are lost and they have to be resubmitted by the client",
                    "In the asynchronous solution the tasks that are being executed are lost and they have to be resubmitted by the client",
                    "In the asynchronous solution it is possible to provide an implement where the tasks being executed are finished without requiring the client to resubmitted them",
                    "In the synchronous solution the tasks being executed are finished without requiring the client to resubmitted them"
                ]
            },
            {
                "questionId": "DataStorageAvailability",
                "content": "Consider the following figure that presents an architectural view of an \\emph{Image Hosting Application}. \n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{ScalablePartitioning}\n    \\end{center}\n    \n    The replication between the Image File Storage \\emph{n} and Image File Storage \\emph{nb}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-1/ScalablePartitioning.png",
                        "width": 100
                    }
                ],
                "options": [
                    "Provides the quality of availability",
                    "Provides the quality of performance",
                    "Provides the quality of modifiability",
                    "Does not provide any additional quality"
                ]
            },
            {
                "questionId": "MicroservicesConsistency",
                "content": "In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:\n    \n    \\begin{quote}\n        Decentralizing responsibility for data across microservices has implications for managing updates. The common approach to dealing with updates has been to use transactions to guarantee consistency when updating multiple resources. This approach is often used within monoliths.\n    \\end{quote}\n    \n    What is the impact of decentralizing responsibility for data across microservices?",
                "image": [],
                "options": [
                    "The need to use a two-phase commit protocol",
                    "The need to have a tight integration of the development teams",
                    "The need to have eventual consistency and compensating operations",
                    "The need to deploy all the microservices simultaneously"
                ]
            },
            {
                "questionId": "PerformanceTacticsTwo",
                "content": "Which of the following tactics is not related with the control of resource demand",
                "image": [],
                "options": [
                    "Manage sampling rate",
                    "Bound execution times",
                    "Maintain multiple copies of computation",
                    "Increase resource efficiency"
                ]
            },
            {
                "questionId": "ElevatorDevops",
                "content": "In the Architect Elevator article by Gregor Hohpe can be read:\n    \n    \\begin{quote}\n        A lot of large companies have discovered the benefits of cloud computing but see it mainly as an infrastructure topic. I feel that's misguided: being able to get compute resources more quickly and cheaply is useful, but the real business benefit lies in a fully automated tool chain that minimizes the time in which a normal code change can go into production. Not quite coincidentally, this is my favorite definition of DevOps.\n    \\end{quote}\n    \n    In the author's opinion",
                "image": [],
                "options": [
                    "Time to market is the most important impact of cloud computing in an architecture",
                    "Reduction of cost is the most important impact of cloud computing in an architecture",
                    "Cloud computing has impact on the business but it is not an architectural aspect",
                    "Using cloud computing we cannot delay some architectural decisions"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2017/test-2/test-21-A.tex",
        "quizTitle": "..-data-2017-test-2-test-21-A",
        "questions": [
            {
                "questionId": "AvailabilityVotingFirst",
                "content": "There are several tactics to satisfy availability requirements,\n    which may be applied depending on the concrete requirement that we\n    want to satisfy.  Assuming that you want to detect faults of type\n    \\emph{response} in your system, which tactic is more adequate?",
                "image": [],
                "options": [
                    "Ping/Echo.",
                    "Retry.",
                    "Voting.",
                    "Passive Redundancy."
                ]
            },
            {
                "questionId": "ModifiabilityOne",
                "content": "The modifiability tactic Use an Intermediary between two modules",
                "image": [],
                "options": [
                    "Has as main goal the reduction of the modules' size.",
                    "Results in the creation of a third module that makes the original modules independent.",
                    "Increases the cohesion between the two modules.",
                    "May conflict with the Reduce Overhead performance tactic."
                ]
            },
            {
                "questionId": "FenixADD",
                "content": "When applying Attribute-Driven Design (ADD) to the FenixEdu system the creation of a view where there are redundant web servers, load balancers and database servers",
                "image": [],
                "options": [
                    "Results from a utility tree for performance.",
                    "Results from a single availability scenario.",
                    "Results from the application of a single ADD iteration.",
                    "Results from the application of several ADD iterations."
                ]
            },
            {
                "questionId": "ModuleViewtypeOne",
                "content": "Consider the Decomposition architectural style of the Module viewtype",
                "image": [],
                "options": [
                    "Its main goal is to establish the reusability qualities of the architecture.",
                    "Project managers are not interested in views that use this style because it lacks the necessary level of detail.",
                    "Views of this type are mostly useful to guide the testing of the system.",
                    "There should be at least one view of the system using this architectural style."
                ]
            },
            {
                "questionId": "GraphiteComposerUIPerformance",
                "content": "The \\emph{Composer UI} component of Graphite system, described as - \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL} - to be effective needs to show to the user the changes she performs in the graph such that she has immediate feedback whenever she clicks on a option. To do so, the architecture needs to include",
                "image": [],
                "options": [
                    "Task Model tactics.",
                    "System Model tactics.",
                    "performance tactics.",
                    "User Model tactics."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2017/test-2/test-21-B.tex",
        "quizTitle": "..-data-2017-test-2-test-21-B",
        "questions": [
            {
                "questionId": "ModuleViewtypeOne",
                "content": "Consider the Decomposition architectural style of the Module viewtype",
                "image": [],
                "options": [
                    "Its main goal is to establish the reusability qualities of the architecture.",
                    "Project managers are not interested in views that use this style because it lacks the necessary level of detail.",
                    "Views of this type are mostly useful to guide the testing of the system.",
                    "There should be at least one view of the system using this architectural style."
                ]
            },
            {
                "questionId": "GraphiteComposerUIPerformance",
                "content": "The \\emph{Composer UI} component of Graphite system, described as - \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL} - to be effective needs to show to the user the changes she performs in the graph such that she has immediate feedback whenever she clicks on a option. To do so, the architecture needs to include",
                "image": [],
                "options": [
                    "Task Model tactics.",
                    "System Model tactics.",
                    "performance tactics.",
                    "User Model tactics."
                ]
            },
            {
                "questionId": "AvailabilityVotingFirst",
                "content": "There are several tactics to satisfy availability requirements,\n    which may be applied depending on the concrete requirement that we\n    want to satisfy.  Assuming that you want to detect faults of type\n    \\emph{response} in your system, which tactic is more adequate?",
                "image": [],
                "options": [
                    "Ping/Echo.",
                    "Retry.",
                    "Voting.",
                    "Passive Redundancy."
                ]
            },
            {
                "questionId": "ModifiabilityOne",
                "content": "The modifiability tactic Use an Intermediary between two modules",
                "image": [],
                "options": [
                    "Has as main goal the reduction of the modules' size.",
                    "Results in the creation of a third module that makes the original modules independent.",
                    "Increases the cohesion between the two modules.",
                    "May conflict with the Reduce Overhead performance tactic."
                ]
            },
            {
                "questionId": "FenixADD",
                "content": "When applying Attribute-Driven Design (ADD) to the FenixEdu system the creation of a view where there are redundant web servers, load balancers and database servers",
                "image": [],
                "options": [
                    "Results from a utility tree for performance.",
                    "Results from a single availability scenario.",
                    "Results from the application of a single ADD iteration.",
                    "Results from the application of several ADD iterations."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2017/test-2/test-22-A.tex",
        "quizTitle": "..-data-2017-test-2-test-22-A",
        "questions": [
            {
                "questionId": "AvailabilityVotingSecond",
                "content": "The availability quality can be supported by a voting tactic in order to identify faults of",
                "image": [],
                "options": [
                    "Programming, if the components execute modules developed by different teams.",
                    "Hardware, if there is hardware redundancy.",
                    "Operating Systems, if redundant components execute on top of different operating systems..",
                    "All the previous options."
                ]
            },
            {
                "questionId": "ModifiabilityTwo",
                "content": "Consider the following scenario: \\emph{A system administrator adds more copies of computation of the system, each one using a different database, and is able to do it in less than 10 minutes.}",
                "image": [],
                "options": [
                    "This is a performance scenario and the measure of the response is 10 minutes latency.",
                    "This is a modifiability scenario which has a defer binding tactic.",
                    "This is not a modifiability scenario because the source of the stimulus cannot be a system administrator.",
                    "This is a modifiability scenario and its environment design time."
                ]
            },
            {
                "questionId": "LowArchitecturalImpact",
                "content": "Consider an architecturally significant requirement (ASR) that has a low impact on the architecture but a high business value",
                "image": [],
                "options": [
                    "This ASR can easily be supported by the architecture because it has little effect in the architecture.",
                    "This ASR requires a specific architectural design because it profoundly affects the architecture.",
                    "The cost of meeting the ASR after development starts is too high.",
                    "Any ASR that has a high business value cannot have a low architecture impact because it needs to be supported by the architecture."
                ]
            },
            {
                "questionId": "Decomposition",
                "content": "The Decomposition architectural style of the Module viewtype",
                "image": [],
                "options": [
                    "Is applied only once at the beginning of the architectural design process.",
                    "Is applied at the begin of the architectural design process but may be necessary to redo it later.",
                    "Is mostly driven by the security attribute quality.",
                    "Follows a bottom-up decomposition process of the system."
                ]
            },
            {
                "questionId": "GraphiteScenarioTacticsOne",
                "content": "In the Graphite system the component \\emph{carbon} provides to \\emph{webapp} components an access interface to the \\emph{buffers} in order to improve the quality of",
                "image": [],
                "options": [
                    "Performance.",
                    "Interoperability.",
                    "Availability.",
                    "Security."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2017/test-2/test-22-B.tex",
        "quizTitle": "..-data-2017-test-2-test-22-B",
        "questions": [
            {
                "questionId": "GraphiteScenarioTacticsOne",
                "content": "In the Graphite system the component \\emph{carbon} provides to \\emph{webapp} components an access interface to the \\emph{buffers} in order to improve the quality of",
                "image": [],
                "options": [
                    "Performance.",
                    "Interoperability.",
                    "Availability.",
                    "Security."
                ]
            },
            {
                "questionId": "AvailabilityVotingSecond",
                "content": "The availability quality can be supported by a voting tactic in order to identify faults of",
                "image": [],
                "options": [
                    "Programming, if the components execute modules developed by different teams.",
                    "Hardware, if there is hardware redundancy.",
                    "Operating Systems, if redundant components execute on top of different operating systems..",
                    "All the previous options."
                ]
            },
            {
                "questionId": "LowArchitecturalImpact",
                "content": "Consider an architecturally significant requirement (ASR) that has a low impact on the architecture but a high business value",
                "image": [],
                "options": [
                    "This ASR can easily be supported by the architecture because it has little effect in the architecture.",
                    "This ASR requires a specific architectural design because it profoundly affects the architecture.",
                    "The cost of meeting the ASR after development starts is too high.",
                    "Any ASR that has a high business value cannot have a low architecture impact because it needs to be supported by the architecture."
                ]
            },
            {
                "questionId": "ModifiabilityTwo",
                "content": "Consider the following scenario: \\emph{A system administrator adds more copies of computation of the system, each one using a different database, and is able to do it in less than 10 minutes.}",
                "image": [],
                "options": [
                    "This is a performance scenario and the measure of the response is 10 minutes latency.",
                    "This is a modifiability scenario which has a defer binding tactic.",
                    "This is not a modifiability scenario because the source of the stimulus cannot be a system administrator.",
                    "This is a modifiability scenario and its environment design time."
                ]
            },
            {
                "questionId": "Decomposition",
                "content": "The Decomposition architectural style of the Module viewtype",
                "image": [],
                "options": [
                    "Is applied only once at the beginning of the architectural design process.",
                    "Is applied at the begin of the architectural design process but may be necessary to redo it later.",
                    "Is mostly driven by the security attribute quality.",
                    "Follows a bottom-up decomposition process of the system."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2017/test-2/test-23-A.tex",
        "quizTitle": "..-data-2017-test-2-test-23-A",
        "questions": [
            {
                "questionId": "Voting",
                "content": "A voting tactic can be used to",
                "image": [],
                "options": [
                    "Prevent a fault in hardware.",
                    "Prevent a fault in software.",
                    "Prevent a fault in a process.",
                    "Detect a fault."
                ]
            },
            {
                "questionId": "ModifiabilityThree",
                "content": "Consider the modifiability quality and the cost of change.",
                "image": [],
                "options": [
                    "A low cost of change may imply a high cost of development.",
                    "A low cost of change implies a low cost of development, because changing the code is part of development.",
                    "There is no relation between the cost of change and the cost of development.",
                    "The cost of change is higher if it occurs at runtime."
                ]
            },
            {
                "questionId": "IterativeDesign",
                "content": "Designing an architecture",
                "image": [],
                "options": [
                    "Is driven by functional requirements.",
                    "Is done in a single step, after all the tactics were identified.",
                    "Is a top-down process where a initial decomposition is chosen and it is successively decomposed without changing the initial decisions.",
                    "Is an iterative process where architectural designs are proposed as hypothesis and tested."
                ]
            },
            {
                "questionId": "ArchitecturalViews",
                "content": "A software system is usually described using different architectural views",
                "image": [],
                "options": [
                    "Each view contains a single architectural style.",
                    "Views need to contain more than one architectural style.",
                    "A view may not contain any architectural style.",
                    "None of the above."
                ]
            },
            {
                "questionId": "GraphiteReliability",
                "content": "In the Graphite system description can be read:\n    \n    \\begin{quote}\n        We've got 600,000 metrics that update every minute and we're assuming our storage can only keep up with 60,000 write operations per minute. This means we will have approximately 10 minutes worth of data sitting in carbon's queues at any given time. To a user this means that the graphs they request from the Graphite webapp will be missing the most recent 10 minutes of data.\n    \\end{quote}",
                "image": [],
                "options": [
                    "The quality addressed is availability and transactions tactic is required to solve the problem.",
                    "The quality addressed is performance and a limit event response is required to solve the problem.",
                    "The quality addressed is availability and a voting design tactic is required to solve the problem.",
                    "The quality addressed is performance and a maintain multiple copies of data design tactic is required to solve the problem."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2017/test-2/test-23-B.tex",
        "quizTitle": "..-data-2017-test-2-test-23-B",
        "questions": [
            {
                "questionId": "IterativeDesign",
                "content": "Designing an architecture",
                "image": [],
                "options": [
                    "Is driven by functional requirements.",
                    "Is done in a single step, after all the tactics were identified.",
                    "Is a top-down process where a initial decomposition is chosen and it is successively decomposed without changing the initial decisions.",
                    "Is an iterative process where architectural designs are proposed as hypothesis and tested."
                ]
            },
            {
                "questionId": "ArchitecturalViews",
                "content": "A software system is usually described using different architectural views",
                "image": [],
                "options": [
                    "Each view contains a single architectural style.",
                    "Views need to contain more than one architectural style.",
                    "A view may not contain any architectural style.",
                    "None of the above."
                ]
            },
            {
                "questionId": "GraphiteReliability",
                "content": "In the Graphite system description can be read:\n    \n    \\begin{quote}\n        We've got 600,000 metrics that update every minute and we're assuming our storage can only keep up with 60,000 write operations per minute. This means we will have approximately 10 minutes worth of data sitting in carbon's queues at any given time. To a user this means that the graphs they request from the Graphite webapp will be missing the most recent 10 minutes of data.\n    \\end{quote}",
                "image": [],
                "options": [
                    "The quality addressed is availability and transactions tactic is required to solve the problem.",
                    "The quality addressed is performance and a limit event response is required to solve the problem.",
                    "The quality addressed is availability and a voting design tactic is required to solve the problem.",
                    "The quality addressed is performance and a maintain multiple copies of data design tactic is required to solve the problem."
                ]
            },
            {
                "questionId": "Voting",
                "content": "A voting tactic can be used to",
                "image": [],
                "options": [
                    "Prevent a fault in hardware.",
                    "Prevent a fault in software.",
                    "Prevent a fault in a process.",
                    "Detect a fault."
                ]
            },
            {
                "questionId": "ModifiabilityThree",
                "content": "Consider the modifiability quality and the cost of change.",
                "image": [],
                "options": [
                    "A low cost of change may imply a high cost of development.",
                    "A low cost of change implies a low cost of development, because changing the code is part of development.",
                    "There is no relation between the cost of change and the cost of development.",
                    "The cost of change is higher if it occurs at runtime."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2017/test-3/test-31A.tex",
        "quizTitle": "..-data-2017-test-3-test-31A",
        "questions": [
            {
                "questionId": "ModuleStylesOne",
                "content": "Suppose that in the development of an enterprise application (which needs to access a\n      database) it was decided to use the FenixFramework library to simplify the development\n      of the data access code. Which architectural style is the most adequate to represent this\n      decision?",
                "image": [],
                "options": [
                    "The Aspects style.",
                    "The Generalisation style.",
                    "The Decomposition style.",
                    "The Shared-data style."
                ]
            },
            {
                "questionId": "AdventureBuilderComponentAndConnectorOne",
                "content": "Consider the following view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=95mm]{AdventureBuilderComponentAndConnector}\n    \\end{center}\n    \n    In this view the following architectural styles are used",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-3/AdventureBuilderComponentAndConnector.png",
                        "width": 95
                    }
                ],
                "options": [
                    "Service-oriented architecture, and Client-server.",
                    "Service-oriented architecture, and Shared-data.",
                    "Service-oriented architecture, Shared-data, and Client-server.",
                    "Service-oriented architecture, Shared-data, Client-server and Peer-to-peer."
                ]
            },
            {
                "questionId": "AdventureBuilderModuleOne",
                "content": "Consider the following modifiability scenario for the Adventure Builder system \n    \n    \\begin{quote}\n        A new business partner (airline, lodging, or activity provider) that uses its own web services interface is added to the system in no more than 10 person-days of effort for the implementation. The business goal is easy integration with new business partners.\n    \\end{quote}\n    \n    and the following architectural view\n    \n    \\begin{center}\n        \\includegraphics[width=95mm]{AdventureBuilderModule}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-3/AdventureBuilderModule.png",
                        "width": 95
                    }
                ],
                "options": [
                    "The view does not address the scenario",
                    "The view addresses the scenario because it separates the \\texttt{Consumer Website} module from the \\texttt{OpcApp} module.",
                    "The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement.",
                    "The view addresses the scenario because the \\texttt{Consumer Website} module does not use the interfaces a new business partner has to implement."
                ]
            },
            {
                "questionId": "InterfaceDelegation",
                "content": "Consider the concept of interface delegation",
                "image": [],
                "options": [
                    "It corresponds to a particular case of a specialization in a generalization view.",
                    "It represents a relation between a connector's role and a port of one of its internal components.",
                    "It represents a relation between a component's port and a port of one of its internal components.",
                    "It represents a relation between a component's port and a connector's role."
                ]
            },
            {
                "questionId": "PipeFilterComposition",
                "content": "The Pipe-and-Filter style allows composition of filters",
                "image": [],
                "options": [
                    "But when the filters are executed sequentially the composition power is reduced.",
                    "Which improves modifiability, because filters are decoupled through pipes.",
                    "But the size of buffers may reduce the composition power.",
                    "And filters do not have to agree on the data formats."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2017/test-3/test-31B.tex",
        "quizTitle": "..-data-2017-test-3-test-31B",
        "questions": [
            {
                "questionId": "AdventureBuilderComponentAndConnectorOne",
                "content": "Consider the following view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=95mm]{AdventureBuilderComponentAndConnector}\n    \\end{center}\n    \n    In this view the following architectural styles are used",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-3/AdventureBuilderComponentAndConnector.png",
                        "width": 95
                    }
                ],
                "options": [
                    "Service-oriented architecture, and Client-server.",
                    "Service-oriented architecture, and Shared-data.",
                    "Service-oriented architecture, Shared-data, and Client-server.",
                    "Service-oriented architecture, Shared-data, Client-server and Peer-to-peer."
                ]
            },
            {
                "questionId": "ModuleStylesOne",
                "content": "Suppose that in the development of an enterprise application (which needs to access a\n      database) it was decided to use the FenixFramework library to simplify the development\n      of the data access code. Which architectural style is the most adequate to represent this\n      decision?",
                "image": [],
                "options": [
                    "The Aspects style.",
                    "The Generalisation style.",
                    "The Decomposition style.",
                    "The Shared-data style."
                ]
            },
            {
                "questionId": "InterfaceDelegation",
                "content": "Consider the concept of interface delegation",
                "image": [],
                "options": [
                    "It corresponds to a particular case of a specialization in a generalization view.",
                    "It represents a relation between a connector's role and a port of one of its internal components.",
                    "It represents a relation between a component's port and a port of one of its internal components.",
                    "It represents a relation between a component's port and a connector's role."
                ]
            },
            {
                "questionId": "PipeFilterComposition",
                "content": "The Pipe-and-Filter style allows composition of filters",
                "image": [],
                "options": [
                    "But when the filters are executed sequentially the composition power is reduced.",
                    "Which improves modifiability, because filters are decoupled through pipes.",
                    "But the size of buffers may reduce the composition power.",
                    "And filters do not have to agree on the data formats."
                ]
            },
            {
                "questionId": "AdventureBuilderModuleOne",
                "content": "Consider the following modifiability scenario for the Adventure Builder system \n    \n    \\begin{quote}\n        A new business partner (airline, lodging, or activity provider) that uses its own web services interface is added to the system in no more than 10 person-days of effort for the implementation. The business goal is easy integration with new business partners.\n    \\end{quote}\n    \n    and the following architectural view\n    \n    \\begin{center}\n        \\includegraphics[width=95mm]{AdventureBuilderModule}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-3/AdventureBuilderModule.png",
                        "width": 95
                    }
                ],
                "options": [
                    "The view does not address the scenario",
                    "The view addresses the scenario because it separates the \\texttt{Consumer Website} module from the \\texttt{OpcApp} module.",
                    "The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement.",
                    "The view addresses the scenario because the \\texttt{Consumer Website} module does not use the interfaces a new business partner has to implement."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2017/test-3/test-32A.tex",
        "quizTitle": "..-data-2017-test-3-test-32A",
        "questions": [
            {
                "questionId": "PublishSubscribe",
                "content": "In the Publish-Subscribe architectural style",
                "image": [],
                "options": [
                    "A component can subscribe to events.",
                    "All the published events are received by their subscribing components.",
                    "The events should be received by the same order they are sent.",
                    "The set of events types are predefined at initialization time."
                ]
            },
            {
                "questionId": "AdventureBuilderComponentAndConnectorSecond",
                "content": "Consider the following view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=95mm]{AdventureBuilderComponentAndConnector}\n    \\end{center}\n    \n    In this view it is possible to reason that",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-3/AdventureBuilderComponentAndConnector.png",
                        "width": 95
                    }
                ],
                "options": [
                    "If the OPC crashes the Consumer Website can continue to provide service in degraded mode.",
                    "If the OPC crashes the Consumer Website can continue to provide service in normal mode.",
                    "If the Adventure Catalog BD crashes the Consumer Website can continue to present the Adventure Builder offers.",
                    "If a Bank component is not available the OPC cannot continue to provide service."
                ]
            },
            {
                "questionId": "AdventureBuilderModuleThree",
                "content": "Consider the following performance/scalability scenario for the Adventure Builder system \n    \n    \\begin{quote}\n        Up to 500 users click to see the catalog of adventure packages following a random distribution over 1 minute; the system is under normal operating conditions; the maximal latency to serve the first page of content is under 5 seconds; average latency for same is less than 2 seconds. If required, the system should easily support an increase in the number of simultaneous requests while maintaining the same latency per request.\n    \\end{quote}\n    \n    and the following architectural view\n    \n    \\begin{center}\n        \\includegraphics[width=95mm]{AdventureBuilderModule}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-3/AdventureBuilderModule.png",
                        "width": 95
                    }
                ],
                "options": [
                    "The view does not address the scenario.",
                    "The view addresses the scenario because it separates the \\texttt{Consumer Website} module from the \\texttt{OpcApp} module to allow the execution of the \\texttt{Consumer Website} module in a component that can have multiple copies of computation.",
                    "The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement.",
                    "The view addresses the scenario because the \\texttt{Consumer Website} module uses the \\texttt{gwt} and \\texttt{waf} modules."
                ]
            },
            {
                "questionId": "ConnectorAttach",
                "content": "A connector may be attached to components of different types because",
                "image": [],
                "options": [
                    "The type of a connector does not depend on the type of its roles.",
                    "Components of different types may have ports of the same type.",
                    "The attachment is a runtime relation which dynamically manages type compliance.",
                    "The attachment between components and connectors only depends on their ports and roles types."
                ]
            },
            {
                "questionId": "UsesOne",
                "content": "Which\n  architectural style is \n  adequate for planning incremental\n  releases?",
                "image": [],
                "options": [
                    "The Decomposition style.",
                    "The Generalisation style.",
                    "The Uses style.",
                    "The Aspects style."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2017/test-3/test-32B.tex",
        "quizTitle": "..-data-2017-test-3-test-32B",
        "questions": [
            {
                "questionId": "AdventureBuilderComponentAndConnectorSecond",
                "content": "Consider the following view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=95mm]{AdventureBuilderComponentAndConnector}\n    \\end{center}\n    \n    In this view it is possible to reason that",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-3/AdventureBuilderComponentAndConnector.png",
                        "width": 95
                    }
                ],
                "options": [
                    "If the OPC crashes the Consumer Website can continue to provide service in degraded mode.",
                    "If the OPC crashes the Consumer Website can continue to provide service in normal mode.",
                    "If the Adventure Catalog BD crashes the Consumer Website can continue to present the Adventure Builder offers.",
                    "If a Bank component is not available the OPC cannot continue to provide service."
                ]
            },
            {
                "questionId": "PublishSubscribe",
                "content": "In the Publish-Subscribe architectural style",
                "image": [],
                "options": [
                    "A component can subscribe to events.",
                    "All the published events are received by their subscribing components.",
                    "The events should be received by the same order they are sent.",
                    "The set of events types are predefined at initialization time."
                ]
            },
            {
                "questionId": "UsesOne",
                "content": "Which\n  architectural style is \n  adequate for planning incremental\n  releases?",
                "image": [],
                "options": [
                    "The Decomposition style.",
                    "The Generalisation style.",
                    "The Uses style.",
                    "The Aspects style."
                ]
            },
            {
                "questionId": "AdventureBuilderModuleThree",
                "content": "Consider the following performance/scalability scenario for the Adventure Builder system \n    \n    \\begin{quote}\n        Up to 500 users click to see the catalog of adventure packages following a random distribution over 1 minute; the system is under normal operating conditions; the maximal latency to serve the first page of content is under 5 seconds; average latency for same is less than 2 seconds. If required, the system should easily support an increase in the number of simultaneous requests while maintaining the same latency per request.\n    \\end{quote}\n    \n    and the following architectural view\n    \n    \\begin{center}\n        \\includegraphics[width=95mm]{AdventureBuilderModule}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-3/AdventureBuilderModule.png",
                        "width": 95
                    }
                ],
                "options": [
                    "The view does not address the scenario.",
                    "The view addresses the scenario because it separates the \\texttt{Consumer Website} module from the \\texttt{OpcApp} module to allow the execution of the \\texttt{Consumer Website} module in a component that can have multiple copies of computation.",
                    "The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement.",
                    "The view addresses the scenario because the \\texttt{Consumer Website} module uses the \\texttt{gwt} and \\texttt{waf} modules."
                ]
            },
            {
                "questionId": "ConnectorAttach",
                "content": "A connector may be attached to components of different types because",
                "image": [],
                "options": [
                    "The type of a connector does not depend on the type of its roles.",
                    "Components of different types may have ports of the same type.",
                    "The attachment is a runtime relation which dynamically manages type compliance.",
                    "The attachment between components and connectors only depends on their ports and roles types."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2017/test-3/test-33A.tex",
        "quizTitle": "..-data-2017-test-3-test-33A",
        "questions": [
            {
                "questionId": "LayeredAspectsDataModelOne",
                "content": "In a layered architecture composed by four layers, where the topmost\n  layer is the layer number 1 and the bottommost layer is the layer\n  number 4, which of the layers is more modifiable?",
                "image": [],
                "options": [
                    "Layer 1.",
                    "Layer 4.",
                    "In a layered architecture all layers are equally modifiable.",
                    "Modifiability is not made easier by a layered architecture."
                ]
            },
            {
                "questionId": "AdventureBuilderComponentAndConnectorThird",
                "content": "Consider the following view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=95mm]{AdventureBuilderComponentAndConnector}\n    \\end{center}\n    \n    This view \\textbf{does not} apply the architectural style",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-3/AdventureBuilderComponentAndConnector.png",
                        "width": 95
                    }
                ],
                "options": [
                    "Client-server.",
                    "Publish-subscribe.",
                    "Shared-data.",
                    "Peer-to-peer."
                ]
            },
            {
                "questionId": "AdventureBuilderModuleTwo",
                "content": "Consider the following availability scenario for the Adventure Builder system \n    \n    \\begin{quote}\n        The Consumer Web site is available to the user 24x7. If an instance of OPC application fails, the fault is detected and the system administrator is notified in 30 seconds; the system continues taking order requests; another OPC instance is created; and data remains in consistent state.\n    \\end{quote}\n    \n    and the following architectural view\n    \n    \\begin{center}\n        \\includegraphics[width=95mm]{AdventureBuilderModule}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-3/AdventureBuilderModule.png",
                        "width": 95
                    }
                ],
                "options": [
                    "The view does not address the scenario",
                    "The view addresses the scenario because the uses relation between the \\texttt{Consumer Website} module and the \\texttt{OpcApp} module has the require properties.",
                    "The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement.",
                    "The view addresses the scenario because the \\texttt{Consumer Website} module uses the \\texttt{gwt} and \\texttt{waf} modules."
                ]
            },
            {
                "questionId": "ComponentViewType",
                "content": "The quality(ies) that is(are) more relevant to views of the component-and-connector viewtype is(are):",
                "image": [],
                "options": [
                    "Modifiability.",
                    "Availability and Performance.",
                    "Testability and Modifiability.",
                    "Maintainability and Availability."
                ]
            },
            {
                "questionId": "PeerToPeerSpace",
                "content": "The Peer-to-Peer architectural style provides high scalability and availability. In the context of a file sharing system",
                "image": [],
                "options": [
                    "The file transfer has to follow the same path of nodes used to identify where the file was located.",
                    "The peer initiating the request for a file needs to know where the file is located.",
                    "If a peer providing a file crashes the file will not be downloaded.",
                    "The price for high scalability and availability is the need to have several replicas of the files to be shared."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2017/test-3/test-33B.tex",
        "quizTitle": "..-data-2017-test-3-test-33B",
        "questions": [
            {
                "questionId": "AdventureBuilderComponentAndConnectorThird",
                "content": "Consider the following view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=95mm]{AdventureBuilderComponentAndConnector}\n    \\end{center}\n    \n    This view \\textbf{does not} apply the architectural style",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-3/AdventureBuilderComponentAndConnector.png",
                        "width": 95
                    }
                ],
                "options": [
                    "Client-server.",
                    "Publish-subscribe.",
                    "Shared-data.",
                    "Peer-to-peer."
                ]
            },
            {
                "questionId": "LayeredAspectsDataModelOne",
                "content": "In a layered architecture composed by four layers, where the topmost\n  layer is the layer number 1 and the bottommost layer is the layer\n  number 4, which of the layers is more modifiable?",
                "image": [],
                "options": [
                    "Layer 1.",
                    "Layer 4.",
                    "In a layered architecture all layers are equally modifiable.",
                    "Modifiability is not made easier by a layered architecture."
                ]
            },
            {
                "questionId": "AdventureBuilderModuleTwo",
                "content": "Consider the following availability scenario for the Adventure Builder system \n    \n    \\begin{quote}\n        The Consumer Web site is available to the user 24x7. If an instance of OPC application fails, the fault is detected and the system administrator is notified in 30 seconds; the system continues taking order requests; another OPC instance is created; and data remains in consistent state.\n    \\end{quote}\n    \n    and the following architectural view\n    \n    \\begin{center}\n        \\includegraphics[width=95mm]{AdventureBuilderModule}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-3/AdventureBuilderModule.png",
                        "width": 95
                    }
                ],
                "options": [
                    "The view does not address the scenario",
                    "The view addresses the scenario because the uses relation between the \\texttt{Consumer Website} module and the \\texttt{OpcApp} module has the require properties.",
                    "The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement.",
                    "The view addresses the scenario because the \\texttt{Consumer Website} module uses the \\texttt{gwt} and \\texttt{waf} modules."
                ]
            },
            {
                "questionId": "PeerToPeerSpace",
                "content": "The Peer-to-Peer architectural style provides high scalability and availability. In the context of a file sharing system",
                "image": [],
                "options": [
                    "The file transfer has to follow the same path of nodes used to identify where the file was located.",
                    "The peer initiating the request for a file needs to know where the file is located.",
                    "If a peer providing a file crashes the file will not be downloaded.",
                    "The price for high scalability and availability is the need to have several replicas of the files to be shared."
                ]
            },
            {
                "questionId": "ComponentViewType",
                "content": "The quality(ies) that is(are) more relevant to views of the component-and-connector viewtype is(are):",
                "image": [],
                "options": [
                    "Modifiability.",
                    "Availability and Performance.",
                    "Testability and Modifiability.",
                    "Maintainability and Availability."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2017/test-4/test-41A.tex",
        "quizTitle": "..-data-2017-test-4-test-41A",
        "questions": [
            {
                "questionId": "Tiers",
                "content": "The Tiers architectural style",
                "image": [],
                "options": [
                    "Applies layers to tiers.",
                    "Restricts the communication between components because, for instance, a group of components should be located in the same hardware.",
                    "Is an extension of the Client-Server architectural style.",
                    "Defines tiers as components."
                ]
            },
            {
                "questionId": "DVDTopDecomposition",
                "content": "Consider the following decomposition view of the Catalog of DVD case study.\n    \n    \\begin{center}\n       \\includegraphics[width=100mm]{dvd-top-decomposition}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-4/dvd-top-decomposition.png",
                        "width": 100
                    }
                ],
                "options": [
                    "The decomposition was driven by a defer binding tactic.",
                    "The decomposition was driven by a quality that is supported by a restrict dependencies tactic.",
                    "The decomposition was driven by a split module tactic.",
                    "The decomposition was driven by a quality that is supported by an encapsulate tactic."
                ]
            },
            {
                "questionId": "GraphitePerformanceScenario",
                "content": "In the context of the \\emph{Graphite} case study, consider the following view that represents the internal behavior of the \\emph{Carbon} component, where the components \\texttt{r1,... , rn, w} are threads and \\texttt{q1, ..., qn} are buffers. This view shows the Graphite's architecture support of\n    \n    \\begin{center}\n       \\includegraphics[width=120mm]{graphite-carbon}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-4/graphite-carbon.png",
                        "width": 120
                    }
                ],
                "options": [
                    "A performance scenario associated with the throughput of writing data points to disk.",
                    "A performance scenario associated with the latency of writing data points to disk.",
                    "An availability scenario associated with a fault in the \\emph{Carbon} component.",
                    "A usability scenario."
                ]
            },
            {
                "questionId": "OrderPadPortability",
                "content": "Consider the architecture of the Morrison's OrderPad. The decision whether use a Native application or HTML5 for the implementation of the client in the Pad was taken because",
                "image": [],
                "options": [
                    "HTML5 provides better portability qualities.",
                    "Native applications provide better modifiability qualities.",
                    "HTML5 provides better usability qualities.",
                    "Native applications provide better support for working offline."
                ]
            },
            {
                "questionId": "MicroservicesOne",
                "content": "Consider the architectural solutions for microservices architectures that use the event sourcing technique. This technique has the following advantage",
                "image": [],
                "options": [
                    "Simplifies the evolution of the event schema.",
                    "Simplifies the query operations in  the event store.",
                    "Allows the querying of a past state.",
                    "Provides a programming model developers are familiar with."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2017/test-4/test-41B.tex",
        "quizTitle": "..-data-2017-test-4-test-41B",
        "questions": [
            {
                "questionId": "GraphitePerformanceScenario",
                "content": "In the context of the \\emph{Graphite} case study, consider the following view that represents the internal behavior of the \\emph{Carbon} component, where the components \\texttt{r1,... , rn, w} are threads and \\texttt{q1, ..., qn} are buffers. This view shows the Graphite's architecture support of\n    \n    \\begin{center}\n       \\includegraphics[width=120mm]{graphite-carbon}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-4/graphite-carbon.png",
                        "width": 120
                    }
                ],
                "options": [
                    "A performance scenario associated with the throughput of writing data points to disk.",
                    "A performance scenario associated with the latency of writing data points to disk.",
                    "An availability scenario associated with a fault in the \\emph{Carbon} component.",
                    "A usability scenario."
                ]
            },
            {
                "questionId": "MicroservicesOne",
                "content": "Consider the architectural solutions for microservices architectures that use the event sourcing technique. This technique has the following advantage",
                "image": [],
                "options": [
                    "Simplifies the evolution of the event schema.",
                    "Simplifies the query operations in  the event store.",
                    "Allows the querying of a past state.",
                    "Provides a programming model developers are familiar with."
                ]
            },
            {
                "questionId": "Tiers",
                "content": "The Tiers architectural style",
                "image": [],
                "options": [
                    "Applies layers to tiers.",
                    "Restricts the communication between components because, for instance, a group of components should be located in the same hardware.",
                    "Is an extension of the Client-Server architectural style.",
                    "Defines tiers as components."
                ]
            },
            {
                "questionId": "DVDTopDecomposition",
                "content": "Consider the following decomposition view of the Catalog of DVD case study.\n    \n    \\begin{center}\n       \\includegraphics[width=100mm]{dvd-top-decomposition}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-4/dvd-top-decomposition.png",
                        "width": 100
                    }
                ],
                "options": [
                    "The decomposition was driven by a defer binding tactic.",
                    "The decomposition was driven by a quality that is supported by a restrict dependencies tactic.",
                    "The decomposition was driven by a split module tactic.",
                    "The decomposition was driven by a quality that is supported by an encapsulate tactic."
                ]
            },
            {
                "questionId": "OrderPadPortability",
                "content": "Consider the architecture of the Morrison's OrderPad. The decision whether use a Native application or HTML5 for the implementation of the client in the Pad was taken because",
                "image": [],
                "options": [
                    "HTML5 provides better portability qualities.",
                    "Native applications provide better modifiability qualities.",
                    "HTML5 provides better usability qualities.",
                    "Native applications provide better support for working offline."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2017/test-4/test-42A.tex",
        "quizTitle": "..-data-2017-test-4-test-42A",
        "questions": [
            {
                "questionId": "CommunicatingProcesses",
                "content": "In the web page of the NGINX HTTP server can be read\n    \n    \\begin{quote}\n        NGINX is a free, open-source, high-performance HTTP server and reverse proxy, as well as an IMAP/POP3 proxy server. (...)\n        Unlike traditional servers, NGINX doesn't rely on threads to handle requests. Instead it uses a much more scalable event-driven (asynchronous) architecture. This architecture uses small, but more importantly, predictable amounts of memory under load.\n    \\end{quote}\n    \n    According to the above description the most adequate architectural style to represent the performance qualities of NGINX is",
                "image": [],
                "options": [
                    "Dynamic Reconfiguration.",
                    "Tiers.",
                    "Communicating Processes.",
                    "Install."
                ]
            },
            {
                "questionId": "DVDAutocomplete",
                "content": "Consider the following decomposition views of the Catalog of DVD case study were the \\emph{Autocomplete} module is implemented in javascript and executes in a browser.\n    \n    \\begin{center}\n    \\includegraphics[width=120mm]{dvd-autocomplete}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-4/dvd-autocomplete.png",
                        "width": 120
                    }
                ],
                "options": [
                    "The view illustrates the achievement of a security scenario.",
                    "The view illustrates the achievement of a performance scenario.",
                    "The view results from the implementation of a support user initiative tactic.",
                    "The view results from the implementation of a support system initiative tactic."
                ]
            },
            {
                "questionId": "GraphiteAvailabilityScenario",
                "content": "In the context of the \\emph{Graphite} case study, consider the following view that represents the internal behavior of the \\emph{Carbon} component, where the components \\texttt{r1,... , rn, w} are threads and \\texttt{q1, ..., qn} are buffers. The port \\emph{read}, which provides an interface to read the data points stored in the queue, can be used, in an enrichment of the view, to illustrate\n    \n    \\begin{center}\n       \\includegraphics[width=120mm]{graphite-carbon}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-4/graphite-carbon.png",
                        "width": 120
                    }
                ],
                "options": [
                    "A modifiability scenario the \\emph{Graphite} system.",
                    "A usability scenario of the \\emph{Graphite} system.",
                    "A performance scenario of the \\emph{Graphite} system.",
                    "An availability scenario of the \\emph{Graphite} system."
                ]
            },
            {
                "questionId": "Silk",
                "content": "In the Amazon Silk browser",
                "image": [],
                "options": [
                    "A request for a web page corresponds to a peer-to-peer interaction between all the web components containing the resources.",
                    "Web pages are explicitly cached on the browser to optimize accesses.",
                    "A request for a web page corresponds to requesting a service from the amazon cloud.",
                    "It is possible to customize the number of threads that run in the mobile device."
                ]
            },
            {
                "questionId": "MicroservicesTwo",
                "content": "Suppose that an architect needs to decide whether to follow a modular monolith architecture or a microservices architecture for a new large system. The system to be developed has a complex logic and high volume of requests.",
                "image": [],
                "options": [
                    "She should decide to use a microservices architecture to improve the scalability of the system.",
                    "She should decide to use a modular monolith architecture to reduce the cost of development, because developers will not need to define intermediate states for the transactional execution of the business logic.",
                    "She should try to split the system in parts in order to isolate the complex business logic and use the two architectural approaches accordingly.",
                    "She should give up because it is not possible to have the two approaches in a singe architecture."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2017/test-4/test-42B.tex",
        "quizTitle": "..-data-2017-test-4-test-42B",
        "questions": [
            {
                "questionId": "GraphiteAvailabilityScenario",
                "content": "In the context of the \\emph{Graphite} case study, consider the following view that represents the internal behavior of the \\emph{Carbon} component, where the components \\texttt{r1,... , rn, w} are threads and \\texttt{q1, ..., qn} are buffers. The port \\emph{read}, which provides an interface to read the data points stored in the queue, can be used, in an enrichment of the view, to illustrate\n    \n    \\begin{center}\n       \\includegraphics[width=120mm]{graphite-carbon}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-4/graphite-carbon.png",
                        "width": 120
                    }
                ],
                "options": [
                    "A modifiability scenario the \\emph{Graphite} system.",
                    "A usability scenario of the \\emph{Graphite} system.",
                    "A performance scenario of the \\emph{Graphite} system.",
                    "An availability scenario of the \\emph{Graphite} system."
                ]
            },
            {
                "questionId": "Silk",
                "content": "In the Amazon Silk browser",
                "image": [],
                "options": [
                    "A request for a web page corresponds to a peer-to-peer interaction between all the web components containing the resources.",
                    "Web pages are explicitly cached on the browser to optimize accesses.",
                    "A request for a web page corresponds to requesting a service from the amazon cloud.",
                    "It is possible to customize the number of threads that run in the mobile device."
                ]
            },
            {
                "questionId": "MicroservicesTwo",
                "content": "Suppose that an architect needs to decide whether to follow a modular monolith architecture or a microservices architecture for a new large system. The system to be developed has a complex logic and high volume of requests.",
                "image": [],
                "options": [
                    "She should decide to use a microservices architecture to improve the scalability of the system.",
                    "She should decide to use a modular monolith architecture to reduce the cost of development, because developers will not need to define intermediate states for the transactional execution of the business logic.",
                    "She should try to split the system in parts in order to isolate the complex business logic and use the two architectural approaches accordingly.",
                    "She should give up because it is not possible to have the two approaches in a singe architecture."
                ]
            },
            {
                "questionId": "CommunicatingProcesses",
                "content": "In the web page of the NGINX HTTP server can be read\n    \n    \\begin{quote}\n        NGINX is a free, open-source, high-performance HTTP server and reverse proxy, as well as an IMAP/POP3 proxy server. (...)\n        Unlike traditional servers, NGINX doesn't rely on threads to handle requests. Instead it uses a much more scalable event-driven (asynchronous) architecture. This architecture uses small, but more importantly, predictable amounts of memory under load.\n    \\end{quote}\n    \n    According to the above description the most adequate architectural style to represent the performance qualities of NGINX is",
                "image": [],
                "options": [
                    "Dynamic Reconfiguration.",
                    "Tiers.",
                    "Communicating Processes.",
                    "Install."
                ]
            },
            {
                "questionId": "DVDAutocomplete",
                "content": "Consider the following decomposition views of the Catalog of DVD case study were the \\emph{Autocomplete} module is implemented in javascript and executes in a browser.\n    \n    \\begin{center}\n    \\includegraphics[width=120mm]{dvd-autocomplete}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-4/dvd-autocomplete.png",
                        "width": 120
                    }
                ],
                "options": [
                    "The view illustrates the achievement of a security scenario.",
                    "The view illustrates the achievement of a performance scenario.",
                    "The view results from the implementation of a support user initiative tactic.",
                    "The view results from the implementation of a support system initiative tactic."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2017/test-4/test-43A.tex",
        "quizTitle": "..-data-2017-test-4-test-43A",
        "questions": [
            {
                "questionId": "AllocationStylesCost",
                "content": "Consider a stakeholder that is particularly concerned about the total cost of the project. When it comes to describing the system using allocation viewtypes is interested in",
                "image": [],
                "options": [
                    "A deployment view.",
                    "A work assignment view.",
                    "A deployment and a work assignment view.",
                    "A install view."
                ]
            },
            {
                "questionId": "DVDGeneralization",
                "content": "Consider the following generalization view of the Catalog of DVD case study.\n    \n    \\begin{center}\n       \\includegraphics[width=60mm]{dvd-generalization}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-4/dvd-generalization.png",
                        "width": 60
                    }
                ],
                "options": [
                    "This generalization was driven by a split module tactic.",
                    "This view fulfills an availability scenario, which defines the expected behavior whenever an external source is not available.",
                    "This view fulfills a modifiability scenario, which states about the cost of adding a new source of information to the system.",
                    "This view fulfills a modifiability scenario, which states that it should be easy to support the system in new software platforms, e.g. \\emph{Windows} or \\emph{OS X} ."
                ]
            },
            {
                "questionId": "GraphiteWebapp",
                "content": "In the context of the \\emph{Graphite} case study, consider the following application-specific types that are used in a view to represent the internal behavior of the \\emph{Webapp} component. \n    \n    \\begin{center}\n       \\includegraphics[width=120mm]{graphite-webapp}\n    \\end{center}\n    \n    This view can show that the architecture fulfills",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-4/graphite-webapp.png",
                        "width": 120
                    }
                ],
                "options": [
                    "A modifiability scenario the \\emph{Graphite} system.",
                    "A usability scenario of the \\emph{Graphite} system.",
                    "A single performance scenario of the \\emph{Graphite} system.",
                    "At least two performance scenarios of the \\emph{Graphite} system."
                ]
            },
            {
                "questionId": "OrderPadIterative",
                "content": "Consider the architecture of the Morrison's OrderPad. In the description of the system can be read:\n    \n    \\begin{quote}\n        The pilot version included some architectural short-cuts that would not work with the full complement of stores. One of these was using a file-transfer to send data to the mainframe rather than MQ, which wouldn't perform well once many stores were active.\n    \\end{quote}\n    \n    This approach means that",
                "image": [],
                "options": [
                    "Performance was traded for easy of development to reduce the overall development costs.",
                    "An iterative development was followed, which allowed more time to develop a connector with good performance in the latter stages of the project.",
                    "Performance was traded for the availability quality.",
                    "An incremental development was followed, which allowed to have the system in production without being necessary to export all the information to the mainframe."
                ]
            },
            {
                "questionId": "MicroservicesThree",
                "content": "Consider the architectural solutions for microservices architectures that use the Command Query Responsibility Segregation (CQRS) technique in the context of Event Sourcing. This technique has the following disadvantage",
                "image": [],
                "options": [
                    "Does not allow optimizations according to the type of query.",
                    "Does not support independent scalability according to the type of operation.",
                    "Reads may not be consistent with the most recent write.",
                    "Querying the event sourcing becomes more complex."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2017/test-4/test-43B.tex",
        "quizTitle": "..-data-2017-test-4-test-43B",
        "questions": [
            {
                "questionId": "OrderPadIterative",
                "content": "Consider the architecture of the Morrison's OrderPad. In the description of the system can be read:\n    \n    \\begin{quote}\n        The pilot version included some architectural short-cuts that would not work with the full complement of stores. One of these was using a file-transfer to send data to the mainframe rather than MQ, which wouldn't perform well once many stores were active.\n    \\end{quote}\n    \n    This approach means that",
                "image": [],
                "options": [
                    "Performance was traded for easy of development to reduce the overall development costs.",
                    "An iterative development was followed, which allowed more time to develop a connector with good performance in the latter stages of the project.",
                    "Performance was traded for the availability quality.",
                    "An incremental development was followed, which allowed to have the system in production without being necessary to export all the information to the mainframe."
                ]
            },
            {
                "questionId": "AllocationStylesCost",
                "content": "Consider a stakeholder that is particularly concerned about the total cost of the project. When it comes to describing the system using allocation viewtypes is interested in",
                "image": [],
                "options": [
                    "A deployment view.",
                    "A work assignment view.",
                    "A deployment and a work assignment view.",
                    "A install view."
                ]
            },
            {
                "questionId": "DVDGeneralization",
                "content": "Consider the following generalization view of the Catalog of DVD case study.\n    \n    \\begin{center}\n       \\includegraphics[width=60mm]{dvd-generalization}\n    \\end{center}",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-4/dvd-generalization.png",
                        "width": 60
                    }
                ],
                "options": [
                    "This generalization was driven by a split module tactic.",
                    "This view fulfills an availability scenario, which defines the expected behavior whenever an external source is not available.",
                    "This view fulfills a modifiability scenario, which states about the cost of adding a new source of information to the system.",
                    "This view fulfills a modifiability scenario, which states that it should be easy to support the system in new software platforms, e.g. \\emph{Windows} or \\emph{OS X} ."
                ]
            },
            {
                "questionId": "GraphiteWebapp",
                "content": "In the context of the \\emph{Graphite} case study, consider the following application-specific types that are used in a view to represent the internal behavior of the \\emph{Webapp} component. \n    \n    \\begin{center}\n       \\includegraphics[width=120mm]{graphite-webapp}\n    \\end{center}\n    \n    This view can show that the architecture fulfills",
                "image": [
                    {
                        "image": "/home/pedro/as-tutor/data/2017/test-4/graphite-webapp.png",
                        "width": 120
                    }
                ],
                "options": [
                    "A modifiability scenario the \\emph{Graphite} system.",
                    "A usability scenario of the \\emph{Graphite} system.",
                    "A single performance scenario of the \\emph{Graphite} system.",
                    "At least two performance scenarios of the \\emph{Graphite} system."
                ]
            },
            {
                "questionId": "MicroservicesThree",
                "content": "Consider the architectural solutions for microservices architectures that use the Command Query Responsibility Segregation (CQRS) technique in the context of Event Sourcing. This technique has the following disadvantage",
                "image": [],
                "options": [
                    "Does not allow optimizations according to the type of query.",
                    "Does not support independent scalability according to the type of operation.",
                    "Reads may not be consistent with the most recent write.",
                    "Querying the event sourcing becomes more complex."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2018/20190111-Exam/exame-20190111-companion-A.tex",
        "quizTitle": "..-data-2018-20190111-Exam-exame-20190111-companion-A",
        "questions": [
            {
                "questionId": "AvailabilityOne",
                "content": "Considering the availability architectural quality and the tactics of ping/echo and heartbeat",
                "image": [],
                "options": [
                    "These tactics cannot be applied in conjunction with the self-test tactic.",
                    "These tactics are used to prevent the occurrence of a fault.",
                    "Heartbeat is more scalable than ping/echo because the monitor does not need to know in advance the addresses of the components.",
                    "In ping/echo the components have the initiative to start the interaction."
                ]
            },
            {
                "questionId": "PerformanceOne",
                "content": "To analyse the performance of a system",
                "image": [],
                "options": [
                    "Only views of the component-and-connector viewtype are needed",
                    "All viewtypes may be necessary",
                    "Only views of the component-and-connector viewtype and allocation viewtype are needed",
                    "Views of the module viewtype are not needed"
                ]
            },
            {
                "questionId": "ModifiabilityOne",
                "content": "In a modifiability scenario the environment can be characterized as design time, compile time, build time, initiation time, and runtime.",
                "image": [],
                "options": [
                    "When the environment is design time it means that the change should be done before the system enters into production",
                    "When the environment is build time it means that it is necessary to codify a new module that is added by rebuilding the system",
                    "When the environment is initiation time it means that it is necessary to restart the system for the change to take effect",
                    "When the environment is runtime the cost of doing the change is higher than in the other environments"
                ]
            },
            {
                "questionId": "ModuleViewTypeOne",
                "content": "The quality that is more relevant to views of the module viewtype is:",
                "image": [],
                "options": [
                    "Modifiability.",
                    "Usability.",
                    "Security.",
                    "Availability."
                ]
            },
            {
                "questionId": "ModuleStyleOne",
                "content": "Consider the following description of \\emph{Memcached}, which is\n    adapted from its Wiki:\n    \\begin{quote}\n      Memcached is an in-memory key-value store for small chunks of\n      arbitrary data from results of database calls, API calls, or\n      page rendering.  It is made up of:\n      \\begin{itemize}\n      \\item Client software, which is given a list of available memcached servers.\n      \\item A client-based hashing algorithm, which chooses a server\n        based on the \"key\" input.\n      \\item Server software, which stores your values with their keys\n        into an internal hash table.\n      \\item Server algorithms, which determine when to throw out old\n        data (if out of memory), or reuse memory.\n      \\end{itemize}\n    \\end{quote}\n    Suppose that you want to present an architectural view for\n    \\emph{Memcached} that represents the above information.  Which\n    view is more adequate?",
                "image": [],
                "options": [
                    "A view of the Data Model style",
                    "A view of the Layers style",
                    "A view of the Decomposition style",
                    "A view of the Uses style"
                ]
            },
            {
                "questionId": "ModuleStyleThree",
                "content": "The Generalization architectural style of the module viewtype can be use to support the evolution of a system",
                "image": [],
                "options": [
                    "By changing the commonalities that are in the children.",
                    "Because the \\emph{is-a} relation does not allow reuse of implementation.",
                    "By adding, removing, or changing children.",
                    "By changing a parent, which will automatically change all the children that inherit from it."
                ]
            },
            {
                "questionId": "ComponentAndConnectorViewtypeOne",
                "content": "According to the document that describes the architecture of web\n    services:\n    \\begin{quote}\n      Another critical piece of any distributed system is a load\n      balancer.  Load balancers are a principal part of any\n      architecture, as their role is to distribute load across a set\n      of nodes responsible for servicing requests.  This allows\n      multiple nodes to transparently service the same function in a\n      system.  Their main purpose is to handle a lot of simultaneous\n      connections and route those connections to one of the request\n      nodes, allowing the system to scale to service more requests by\n      just adding nodes.\n    \\end{quote}\n    Based on this description, what is the best way to represent the\n    architecture of a system that is using a \\emph{load balancer}?",
                "image": [],
                "options": [
                    "With a component-and-connector view, where the \n      \\emph{load balancer} is a component of the system",
                    "With a Deployment view, where the \\emph{load balancer} is\n      part of the communication infra-structure used to execute the\n      system",
                    "With a Uses view, representing the existing dependencies\n      between the \\emph{load balancer} and the services that it uses",
                    "With a Layers view, where the \\emph{load balancer}\n      creates an abstraction layer between who makes the request and\n      who provides the service"
                ]
            },
            {
                "questionId": "ComponentAndConnectorStyleOne",
                "content": "The repository architectural style provides performance because",
                "image": [],
                "options": [
                    "It implements a maintain multiple copies of computation tactic.",
                    "It supports the concurrent access of data accessors.",
                    "It supports the access to persistent information.",
                    "It implements a maintain multiple copies of data tactic."
                ]
            },
            {
                "questionId": "ComponentAndConnectorStyleThree",
                "content": "Typically, Instant Messaging clients have a window to list the contacts of the user, and\n  show in that window the status of each contact (whether it is available, unavailable, busy,\n  etc). Given that the status of a contact may be changed at any time, and that the contact's\n  status is given by the Instant Messaging application of that contact, which architectural\n  style represents best the interaction pattern between these components?",
                "image": [],
                "options": [
                    "The Shared Data style",
                    "The Pipes-and-filters style",
                    "The Publish-subscribe style",
                    "The Client-Server style"
                ]
            },
            {
                "questionId": "AllocationOne",
                "content": "In the software architecture of a system, the Deployment view is best suited for",
                "image": [],
                "options": [
                    "Analysing the performance of the system",
                    "Planning incremental releases of the system",
                    "Estimating the effort needed to implement the system",
                    "Analysing the system's portability and reusability"
                ]
            },
            {
                "questionId": "WebApplicationsOne",
                "content": "One of the evolutions in the development of web applications was\n    the appearance of \\emph{mashups}, which are described in Wikipedia\n    as follows:\n\n    \\begin{quote}\n      In web development, a mashup is a web page or application that\n      uses and combines data, presentation or functionality from two\n      or more sources to create new services.\n    \\end{quote}\n\n    Knowing that the sources used by \\emph{mashups} do not know about\n    the existence of the \\emph{mashups} and that they change\n    frequently, forcing the adaptation of the \\emph{mashups} to\n    accommodate those changes, what is the best architecture to\n    minimize the effects of those changes?",
                "image": [],
                "options": [
                    "A \\emph{web services} architecture",
                    "A Client-Server architecture, where the \\emph{mashup}\n      is the client and the various sources are the servers",
                    "A layered architecture, where the access to the various\n      sources is the responsibility of the bottommost layer",
                    "A Publish-Subscribe architecture, where the various\n      sources publish events with the changes made and the\n      \\emph{mashup} subscribes those events"
                ]
            },
            {
                "questionId": "ScalableArchitectureOne",
                "content": "Consider the following excerpt about the Scalable web architecture and distributed systems case study about two different possible implementations of a global cache\n\t\n\t\\begin{quote}\n\t\t There are two common forms of global caches (...), when a cached response is not found in the cache, the cache itself becomes responsible for retrieving the missing piece of data from the underlying store. (...) it is the responsibility of request nodes to retrieve any data that is not found in the cache. \t\n\t \\end{quote}",
                "image": [],
                "options": [
                    "The solution where the application is responsible for retrieving the missing piece of data from the underlying store has better availability",
                    "The solution where the cache is responsible for retrieving the missing piece of data from the underlying store has better availability",
                    "The solution where the application is responsible for retrieving the missing piece of data from the underlying store has better modifiability",
                    "The solution where the cache is responsible for retrieving the missing piece of data from the underlying store has better performance"
                ]
            },
            {
                "questionId": "DVDCatalogOne",
                "content": "Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n\t\n\t\\begin{quote}\n\t\tTo allow the share of catalogs with family and friends, including some access control. \n\t\\end{quote}\n\t\n\tThis requirement requires",
                "image": [],
                "options": [
                    "A change to the uses view to represent that friends can use each other catalog.",
                    "A change of the layered view to support different presentations, one for each friend.",
                    "A change of the decomposition view to include the responsibilities associated with the access control.",
                    "A new aspect view to include the responsibilities associated with the access control."
                ]
            },
            {
                "questionId": "AdventureBuilderOne",
                "content": "Consider the following architectural view of the Adventure Builder system, designed around the Order Processing Center\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=12cm]{../AdventureBuilderCandC}\n\t\\end{center}\n\t\n\tThe views \\textbf{does not} allow the reason about the quality of",
                "image": [],
                "options": [
                    "Interoperability",
                    "Modifiability",
                    "Performance",
                    "Security"
                ]
            },
            {
                "questionId": "GraphiteOne",
                "content": "In the Graphite system, in order to improve performance the component \\emph{carbon} do not write directly on disk, it uses a buffer instead:",
                "image": [],
                "options": [
                    "but this reduces reliability because de webapp components do not access the most recent data",
                    "but it reduces performance, anyway, because the buffer components easily overflow",
                    "and it does not penalize reliability because it also provides an interface that the webapp components can use to access the most recent data",
                    "and it improves security because the buffer is protected agains attacks"
                ]
            },
            {
                "questionId": "ChromeOne",
                "content": "In the description of Chrome case study we can read:\n\t  \\newline\n\t  \n\t  \\emph{Chrome maintains a single instance of the resource dispatcher, which is shared across all render processes, and runs within the browser kernel process.}\n\t  \\newline\n\t  \n\t  The \\emph{Resource Dispatcher} contributes to the performance quality because it implements a tactic of",
                "image": [],
                "options": [
                    "Schedule Resources",
                    "Increase Resources",
                    "Introduce Concurrency",
                    "Maintain Multiple Copies of Computation"
                ]
            },
            {
                "questionId": "SocialCalcOne",
                "content": "In the description of the SocialCalc case study can be read:\n\t\n\t\\begin{quote}\n\t\tTherefore, on browsers with support for CSS3, we use the box-shadow property to represent multiple peer cursors in the same cell.\n\t\\end{quote} \n\t\n\tThis corresponds to the application of",
                "image": [],
                "options": [
                    "Maintain system model tactic.",
                    "Support user initiative tactic.",
                    "Maintain multiple copies of data tactic.",
                    "Conflict detection tactic."
                ]
            },
            {
                "questionId": "OrderPadOne",
                "content": "Consider the architecture of the Morrison's OrderPad. In the description of the system can be read:\n\t\n\t\\begin{quote}\n\t\tOne of these was using a file-transfer to send data to the mainframe rather than MQ, which wouldn't perform well once many stores were active.\n\t\\end{quote}\n\t\n\tThis approach means that",
                "image": [],
                "options": [
                    "Performance was traded for easy of development.",
                    "An iterative development was followed, which allowed more time to develop a connector with good performance in the latter stages of the project.",
                    "Performance was traded for the modifiability quality.",
                    "An incremental development was followed, which allowed to have the system in production without being necessary to export all the information to the mainframe."
                ]
            },
            {
                "questionId": "AggregatesOne",
                "content": "Consider the following decomposition of a domain model into 3 aggregates. \n\t\n\t\\centering\n\t\\includegraphics[width=12cm]{../1-aggregate}",
                "image": [],
                "options": [
                    "This decomposition is the only possible of the original domain model.",
                    "This decomposition implies that, in average, customers are going to have a large number of orders.",
                    "This decomposition implies that products will frequently change their unique identification.",
                    "All the above."
                ]
            },
            {
                "questionId": "EventSourcingOne",
                "content": "Command Query Responsibility Segregation (CQRS) technique uses the following architectural styles",
                "image": [],
                "options": [
                    "Client-server and Repository.",
                    "Repository and Publish-subscribe.",
                    "Publish-subscribe and Repository.",
                    "Client-server, Repository and Publish-subscribe."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2018/20190111-Exam/exame-20190111-companion-B.tex",
        "quizTitle": "..-data-2018-20190111-Exam-exame-20190111-companion-B",
        "questions": [
            {
                "questionId": "ModuleViewTypeOne",
                "content": "The quality that is more relevant to views of the module viewtype is:",
                "image": [],
                "options": [
                    "Modifiability.",
                    "Usability.",
                    "Security.",
                    "Availability."
                ]
            },
            {
                "questionId": "ModuleStyleOne",
                "content": "Consider the following description of \\emph{Memcached}, which is\n    adapted from its Wiki:\n    \\begin{quote}\n      Memcached is an in-memory key-value store for small chunks of\n      arbitrary data from results of database calls, API calls, or\n      page rendering.  It is made up of:\n      \\begin{itemize}\n      \\item Client software, which is given a list of available memcached servers.\n      \\item A client-based hashing algorithm, which chooses a server\n        based on the \"key\" input.\n      \\item Server software, which stores your values with their keys\n        into an internal hash table.\n      \\item Server algorithms, which determine when to throw out old\n        data (if out of memory), or reuse memory.\n      \\end{itemize}\n    \\end{quote}\n    Suppose that you want to present an architectural view for\n    \\emph{Memcached} that represents the above information.  Which\n    view is more adequate?",
                "image": [],
                "options": [
                    "A view of the Data Model style",
                    "A view of the Layers style",
                    "A view of the Decomposition style",
                    "A view of the Uses style"
                ]
            },
            {
                "questionId": "ModuleStyleThree",
                "content": "The Generalization architectural style of the module viewtype can be use to support the evolution of a system",
                "image": [],
                "options": [
                    "By changing the commonalities that are in the children.",
                    "Because the \\emph{is-a} relation does not allow reuse of implementation.",
                    "By adding, removing, or changing children.",
                    "By changing a parent, which will automatically change all the children that inherit from it."
                ]
            },
            {
                "questionId": "ComponentAndConnectorViewtypeOne",
                "content": "According to the document that describes the architecture of web\n    services:\n    \\begin{quote}\n      Another critical piece of any distributed system is a load\n      balancer.  Load balancers are a principal part of any\n      architecture, as their role is to distribute load across a set\n      of nodes responsible for servicing requests.  This allows\n      multiple nodes to transparently service the same function in a\n      system.  Their main purpose is to handle a lot of simultaneous\n      connections and route those connections to one of the request\n      nodes, allowing the system to scale to service more requests by\n      just adding nodes.\n    \\end{quote}\n    Based on this description, what is the best way to represent the\n    architecture of a system that is using a \\emph{load balancer}?",
                "image": [],
                "options": [
                    "With a component-and-connector view, where the \n      \\emph{load balancer} is a component of the system",
                    "With a Deployment view, where the \\emph{load balancer} is\n      part of the communication infra-structure used to execute the\n      system",
                    "With a Uses view, representing the existing dependencies\n      between the \\emph{load balancer} and the services that it uses",
                    "With a Layers view, where the \\emph{load balancer}\n      creates an abstraction layer between who makes the request and\n      who provides the service"
                ]
            },
            {
                "questionId": "ComponentAndConnectorStyleOne",
                "content": "The repository architectural style provides performance because",
                "image": [],
                "options": [
                    "It implements a maintain multiple copies of computation tactic.",
                    "It supports the concurrent access of data accessors.",
                    "It supports the access to persistent information.",
                    "It implements a maintain multiple copies of data tactic."
                ]
            },
            {
                "questionId": "ScalableArchitectureOne",
                "content": "Consider the following excerpt about the Scalable web architecture and distributed systems case study about two different possible implementations of a global cache\n\t\n\t\\begin{quote}\n\t\t There are two common forms of global caches (...), when a cached response is not found in the cache, the cache itself becomes responsible for retrieving the missing piece of data from the underlying store. (...) it is the responsibility of request nodes to retrieve any data that is not found in the cache. \t\n\t \\end{quote}",
                "image": [],
                "options": [
                    "The solution where the application is responsible for retrieving the missing piece of data from the underlying store has better availability",
                    "The solution where the cache is responsible for retrieving the missing piece of data from the underlying store has better availability",
                    "The solution where the application is responsible for retrieving the missing piece of data from the underlying store has better modifiability",
                    "The solution where the cache is responsible for retrieving the missing piece of data from the underlying store has better performance"
                ]
            },
            {
                "questionId": "DVDCatalogOne",
                "content": "Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n\t\n\t\\begin{quote}\n\t\tTo allow the share of catalogs with family and friends, including some access control. \n\t\\end{quote}\n\t\n\tThis requirement requires",
                "image": [],
                "options": [
                    "A change to the uses view to represent that friends can use each other catalog.",
                    "A change of the layered view to support different presentations, one for each friend.",
                    "A change of the decomposition view to include the responsibilities associated with the access control.",
                    "A new aspect view to include the responsibilities associated with the access control."
                ]
            },
            {
                "questionId": "ComponentAndConnectorStyleThree",
                "content": "Typically, Instant Messaging clients have a window to list the contacts of the user, and\n  show in that window the status of each contact (whether it is available, unavailable, busy,\n  etc). Given that the status of a contact may be changed at any time, and that the contact's\n  status is given by the Instant Messaging application of that contact, which architectural\n  style represents best the interaction pattern between these components?",
                "image": [],
                "options": [
                    "The Shared Data style",
                    "The Pipes-and-filters style",
                    "The Publish-subscribe style",
                    "The Client-Server style"
                ]
            },
            {
                "questionId": "AllocationOne",
                "content": "In the software architecture of a system, the Deployment view is best suited for",
                "image": [],
                "options": [
                    "Analysing the performance of the system",
                    "Planning incremental releases of the system",
                    "Estimating the effort needed to implement the system",
                    "Analysing the system's portability and reusability"
                ]
            },
            {
                "questionId": "EventSourcingOne",
                "content": "Command Query Responsibility Segregation (CQRS) technique uses the following architectural styles",
                "image": [],
                "options": [
                    "Client-server and Repository.",
                    "Repository and Publish-subscribe.",
                    "Publish-subscribe and Repository.",
                    "Client-server, Repository and Publish-subscribe."
                ]
            },
            {
                "questionId": "AdventureBuilderOne",
                "content": "Consider the following architectural view of the Adventure Builder system, designed around the Order Processing Center\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=12cm]{../AdventureBuilderCandC}\n\t\\end{center}\n\t\n\tThe views \\textbf{does not} allow the reason about the quality of",
                "image": [],
                "options": [
                    "Interoperability",
                    "Modifiability",
                    "Performance",
                    "Security"
                ]
            },
            {
                "questionId": "GraphiteOne",
                "content": "In the Graphite system, in order to improve performance the component \\emph{carbon} do not write directly on disk, it uses a buffer instead:",
                "image": [],
                "options": [
                    "but this reduces reliability because de webapp components do not access the most recent data",
                    "but it reduces performance, anyway, because the buffer components easily overflow",
                    "and it does not penalize reliability because it also provides an interface that the webapp components can use to access the most recent data",
                    "and it improves security because the buffer is protected agains attacks"
                ]
            },
            {
                "questionId": "WebApplicationsOne",
                "content": "One of the evolutions in the development of web applications was\n    the appearance of \\emph{mashups}, which are described in Wikipedia\n    as follows:\n\n    \\begin{quote}\n      In web development, a mashup is a web page or application that\n      uses and combines data, presentation or functionality from two\n      or more sources to create new services.\n    \\end{quote}\n\n    Knowing that the sources used by \\emph{mashups} do not know about\n    the existence of the \\emph{mashups} and that they change\n    frequently, forcing the adaptation of the \\emph{mashups} to\n    accommodate those changes, what is the best architecture to\n    minimize the effects of those changes?",
                "image": [],
                "options": [
                    "A \\emph{web services} architecture",
                    "A Client-Server architecture, where the \\emph{mashup}\n      is the client and the various sources are the servers",
                    "A layered architecture, where the access to the various\n      sources is the responsibility of the bottommost layer",
                    "A Publish-Subscribe architecture, where the various\n      sources publish events with the changes made and the\n      \\emph{mashup} subscribes those events"
                ]
            },
            {
                "questionId": "ChromeOne",
                "content": "In the description of Chrome case study we can read:\n\t  \\newline\n\t  \n\t  \\emph{Chrome maintains a single instance of the resource dispatcher, which is shared across all render processes, and runs within the browser kernel process.}\n\t  \\newline\n\t  \n\t  The \\emph{Resource Dispatcher} contributes to the performance quality because it implements a tactic of",
                "image": [],
                "options": [
                    "Schedule Resources",
                    "Increase Resources",
                    "Introduce Concurrency",
                    "Maintain Multiple Copies of Computation"
                ]
            },
            {
                "questionId": "SocialCalcOne",
                "content": "In the description of the SocialCalc case study can be read:\n\t\n\t\\begin{quote}\n\t\tTherefore, on browsers with support for CSS3, we use the box-shadow property to represent multiple peer cursors in the same cell.\n\t\\end{quote} \n\t\n\tThis corresponds to the application of",
                "image": [],
                "options": [
                    "Maintain system model tactic.",
                    "Support user initiative tactic.",
                    "Maintain multiple copies of data tactic.",
                    "Conflict detection tactic."
                ]
            },
            {
                "questionId": "OrderPadOne",
                "content": "Consider the architecture of the Morrison's OrderPad. In the description of the system can be read:\n\t\n\t\\begin{quote}\n\t\tOne of these was using a file-transfer to send data to the mainframe rather than MQ, which wouldn't perform well once many stores were active.\n\t\\end{quote}\n\t\n\tThis approach means that",
                "image": [],
                "options": [
                    "Performance was traded for easy of development.",
                    "An iterative development was followed, which allowed more time to develop a connector with good performance in the latter stages of the project.",
                    "Performance was traded for the modifiability quality.",
                    "An incremental development was followed, which allowed to have the system in production without being necessary to export all the information to the mainframe."
                ]
            },
            {
                "questionId": "AggregatesOne",
                "content": "Consider the following decomposition of a domain model into 3 aggregates. \n\t\n\t\\centering\n\t\\includegraphics[width=12cm]{../1-aggregate}",
                "image": [],
                "options": [
                    "This decomposition is the only possible of the original domain model.",
                    "This decomposition implies that, in average, customers are going to have a large number of orders.",
                    "This decomposition implies that products will frequently change their unique identification.",
                    "All the above."
                ]
            },
            {
                "questionId": "AvailabilityOne",
                "content": "Considering the availability architectural quality and the tactics of ping/echo and heartbeat",
                "image": [],
                "options": [
                    "These tactics cannot be applied in conjunction with the self-test tactic.",
                    "These tactics are used to prevent the occurrence of a fault.",
                    "Heartbeat is more scalable than ping/echo because the monitor does not need to know in advance the addresses of the components.",
                    "In ping/echo the components have the initiative to start the interaction."
                ]
            },
            {
                "questionId": "PerformanceOne",
                "content": "To analyse the performance of a system",
                "image": [],
                "options": [
                    "Only views of the component-and-connector viewtype are needed",
                    "All viewtypes may be necessary",
                    "Only views of the component-and-connector viewtype and allocation viewtype are needed",
                    "Views of the module viewtype are not needed"
                ]
            },
            {
                "questionId": "ModifiabilityOne",
                "content": "In a modifiability scenario the environment can be characterized as design time, compile time, build time, initiation time, and runtime.",
                "image": [],
                "options": [
                    "When the environment is design time it means that the change should be done before the system enters into production",
                    "When the environment is build time it means that it is necessary to codify a new module that is added by rebuilding the system",
                    "When the environment is initiation time it means that it is necessary to restart the system for the change to take effect",
                    "When the environment is runtime the cost of doing the change is higher than in the other environments"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2018/20190129-Exam/exame-20190129-companion-A.tex",
        "quizTitle": "..-data-2018-20190129-Exam-exame-20190129-companion-A",
        "questions": [
            {
                "questionId": "AvailabilityTwo",
                "content": "A voting tactic can be used to",
                "image": [],
                "options": [
                    "Prevent a fault in hardware.",
                    "Prevent a fault in software.",
                    "Prevent a fault in a process.",
                    "Detect a fault."
                ]
            },
            {
                "questionId": "PerformanceTwo",
                "content": "Consider a scenario for performance where the arrival of events is stochastic with a distribution where there are peeks of events but the arrival of events over a long period is uniform. The best tactic to apply is",
                "image": [],
                "options": [
                    "Manage sampling rate",
                    "Limit event response",
                    "Prioritize events",
                    "Bound execution time"
                ]
            },
            {
                "questionId": "ModifiabilityTwo",
                "content": "The main tactic associated with the layered architectural style is:",
                "image": [],
                "options": [
                    "Split module",
                    "Encapsulate",
                    "Restrict dependencies",
                    "Defer binding"
                ]
            },
            {
                "questionId": "ModuleViewTypeTwo",
                "content": "Consider the kind of relations between components and modules.",
                "image": [],
                "options": [
                    "A module contains the code that executes in a single component and a component executes the code of a single module",
                    "A module contains the code that can execute in several components and a component executes the code of a single module",
                    "A module contains the code that executes in a single component and a component can execute the code of several modules",
                    "A module contains the code that can execute in several components and a component can execute the code of several modules"
                ]
            },
            {
                "questionId": "ModuleStyleTwo",
                "content": "Suppose that you are implementing a module in a system that has a two layered architecture.\n\t Knowing that your module belongs to the upper layer (assuming the usual notation\n\t for the layer style), this means that you",
                "image": [],
                "options": [
                    "Can use the operations defined in any of the system's modules",
                    "Can use the operations defined in the lower layer, but not the ones defined in\n\t \tthe upper layer",
                    "Can use the operations defined in the upper layer, but not the ones defined in\n\t \tthe lower layer",
                    "Should use some operation defined in the lower layer"
                ]
            },
            {
                "questionId": "ModuleStyleFour",
                "content": "Using the Aspects architectural style promotes the modifiability\n    of a system because",
                "image": [],
                "options": [
                    "It imposes restrictions on which uses relationships may\n      exist between the system's modules",
                    "It makes it easier to create generalization relationships\n      between the system's modules",
                    "It separates in new modules responsibilities that were\n      spread over various of the system's modules",
                    "It allows the decomposition of each of the system's\n      modules into finer grained modules"
                ]
            },
            {
                "questionId": "ComponentAndConnectorViewtypeTwo",
                "content": "Consider the concept of interface delegation",
                "image": [],
                "options": [
                    "It corresponds to a particular case of a specialization in a generalization view.",
                    "It represents a relation between a connector's role and a port of one of its internal components.",
                    "It represents a relation between a component's port and a port of one of its internal components.",
                    "It represents a relation between a component's port and a connector's role."
                ]
            },
            {
                "questionId": "ComponentAndConnectorStyleTwo",
                "content": "In the Service Oriented Architecture style it is common to have a\n    specialized component, named \\emph{Enterprise Service Bus} (ESB).\n    The goal of using of an ESB in a system is",
                "image": [],
                "options": [
                    "To facilitate the interaction among heterogeneous\n      components that use distinct communication protocols",
                    "To promote the use of a common communication protocol for\n      all the remaining components of the system",
                    "To increase the performance of the interaction between\n      the components of the system",
                    "To create a strong coupling between the various services\n      provided by the organization"
                ]
            },
            {
                "questionId": "ComponentAndConnectorStyleFour",
                "content": "In the description of the Gnutella system can be read:\n\t\n\t\\begin{quote}\n\t\tThe topology of the system changes at runtime as peer components connect and disconnect to the network.\n\t\\end{quote}",
                "image": [],
                "options": [
                    "When a peer connects to the network it establishes connections with all other peers in the network",
                    "The behavior described in the sentence can be represented in a view where the dynamic reconfiguration architectural style is used",
                    "When a peer receives a connection it sends all its files to the peer connecting it",
                    "The behavior described in the sentence can be represented in a view where the tier architectural style is used"
                ]
            },
            {
                "questionId": "AllocationTwo",
                "content": "Consider the install architectural style of the allocation viewtype.",
                "image": [],
                "options": [
                    "The development team is the main stakeholder interesting in these views.",
                    "It assigns modules to files.",
                    "It is completely independent of the deployment architectural style.",
                    "It helps on the configuration of systems."
                ]
            },
            {
                "questionId": "WebApplicationsTwo",
                "content": "Web applications went through several evolutions over the last\n    years.  One of those evolutions was to make their user interfaces\n    more sophisticated, by leveraging on new technologies available in\n    the browsers, such as, for example, Javascript, to provide a more\n    satisfying user experience.  What were the most visible\n    consequences of such an evolution on the typical software\n    architecture of a web application?",
                "image": [],
                "options": [
                    "The presentation logic layer and how it relates with the\n      underlying layer changed",
                    "The style of the connector used to represent the interaction between\n      the browser and the web server changed",
                    "The browser is now a component of a different type",
                    "That evolution did not have any consequences on the\n      software architecture of a web application"
                ]
            },
            {
                "questionId": "ScalableArchitectureTwo",
                "content": "Consider the use of a proxy to collapse requests. This corresponds to a tactic of",
                "image": [],
                "options": [
                    "Manage sampling rate",
                    "Limit event response",
                    "Prioritize events",
                    "Bound execution times"
                ]
            },
            {
                "questionId": "DVDCatalogTwo",
                "content": "Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n\t\n\t\\begin{quote}\n\t\tTo support multi-platform (Mac, Windows, Linux)\n\t\\end{quote}\n\t\n\tThis requirement requires a change of",
                "image": [],
                "options": [
                    "The layered view to deal with the aspects of portability.",
                    "The uses view to show the coupling between the different platforms.",
                    "The uses view to show the uses relationships between the different platforms.",
                    "The data model view to represent each one of the platforms."
                ]
            },
            {
                "questionId": "AdventureBuilderTwo",
                "content": "Consider the following performance/scalability scenario for the Adventure Builder system \n\t\n\t\\begin{quote}\n\t\tUp to 500 users click to see the catalog of adventure packages following a random distribution over 1 minute; the system is under normal operating conditions; the maximal latency to serve the first page of content is under 5 seconds; average latency for same is less than 2 seconds. If required, the system should easily support an increase in the number of simultaneous requests while maintaining the same latency per request.\n\t\\end{quote}\n\t\n\tand the following architectural view\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=10.5cm]{../AdventureBuilderHighLevelVIew}\n\t\\end{center}",
                "image": [],
                "options": [
                    "The view does not address the scenario",
                    "The view addresses the scenario because it separates the \\texttt{Consumer Website} module from the \\texttt{OpcApp} module to allow the execution of the \\texttt{Consumer Website} module in a component that can have multiple copies of computation",
                    "The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement",
                    "The view addresses the scenario because the \\texttt{Consumer Website} module uses the \\texttt{gwt} and \\texttt{waf} modules"
                ]
            },
            {
                "questionId": "GraphiteTwo",
                "content": "The \\emph{Composer UI} component of Graphite system, described as - \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL} - to be effective needs to show to the user the changes she performs in the graph such that she has immediate feedback about the result of the changes. To do so, the system needs to implement the tactics of",
                "image": [],
                "options": [
                    "Task Model",
                    "System Model",
                    "Performance",
                    "User Model"
                ]
            },
            {
                "questionId": "ChromeTwo",
                "content": "In the description of the Chrome case study you can read:\n\t  \\newline\n\t  \n\t  \\emph{Typing in the Omnibox (URL) bar triggers high-likelihood suggestions, which may similarly kick off a DNS lookup, TCP pre-connect, and even prerender the page in a hidden tab.} \n\t  \\newline\n\t  \n\t  This description refers to the qualities of",
                "image": [],
                "options": [
                    "Usability e Modifiability",
                    "Performance e Usability",
                    "Availability e Usability",
                    "Availability e Performance"
                ]
            },
            {
                "questionId": "SocialCalcTwo",
                "content": "Consider the architectural views for the SocialCalc system. In the case description can be read:\n\t\n\t\\begin{quote}\n\t\tThe save format is in standard MIME multipart/mixed format, consisting of four text/plain; charset=UTF-8 parts, each part containing newline-delimited text with colon-delimited data fields. The parts are...\n\t\\end{quote}\n\t\n\tFrom the above excerpt can be inferred the need to have",
                "image": [],
                "options": [
                    "A module view of the decomposition style.",
                    "A module view of the data model style.",
                    "A component-and-connector view of the service-oriented architecture style.",
                    "A module view of the uses style."
                ]
            },
            {
                "questionId": "OrderPadTwo",
                "content": "Frank Buschmann defines Featuritis as\n\t\t\n\t\\begin{quote}\n\t\tFeaturitis is the tendency to trade functional coverage for quality - the more functions the earlier they're delivered, the better.\n\t\\end{quote}\n\t\n\tIn the OrderPad system the architect regretted not getting performance tests going earlier. The OrderPad system",
                "image": [],
                "options": [
                    "Suffered from featuritis, because the architect decided to delay the difficult parts for latter in the development.",
                    "Did not suffer from featuritis.",
                    "Suffered from some level of featuritis, but it allowed to have a pilot from which the team learned.",
                    "Suffered from featuritis, but it had no impact on the final development."
                ]
            },
            {
                "questionId": "AggregatesTwo",
                "content": "Consider the following decomposition of a domain model into 3 aggregates. If, instead of this decomposition, \\texttt{Customer} and \\texttt{Order} were in the same aggregate  \n\t\n\t\\centering\n\t\\includegraphics[width=12cm]{../1-aggregate}",
                "image": [],
                "options": [
                    "It would reduce the scalability for updates of different orders for the same customer.",
                    "Two users would not conflict if they attempt to edit different orders for the same customer.",
                    "The increase of the number of orders would not have impact on the load the aggregate.",
                    "All the above."
                ]
            },
            {
                "questionId": "EventSourcingTwo",
                "content": "Consider the architectural solutions for microservices architectures that use the Command Query Responsibility Segregation (CQRS) technique in the context of Event Sourcing. This technique has the following disadvantage",
                "image": [],
                "options": [
                    "Does not allow optimizations according to the type of query.",
                    "Does not support independent scalability according to the type of operation.",
                    "Reads may not be consistent with the most recent write.",
                    "Does not support joins."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2018/20190129-Exam/exame-20190129-companion-B.tex",
        "quizTitle": "..-data-2018-20190129-Exam-exame-20190129-companion-B",
        "questions": [
            {
                "questionId": "ModuleStyleTwo",
                "content": "Suppose that you are implementing a module in a system that has a two layered architecture.\n\t Knowing that your module belongs to the upper layer (assuming the usual notation\n\t for the layer style), this means that you",
                "image": [],
                "options": [
                    "Can use the operations defined in any of the system's modules",
                    "Can use the operations defined in the lower layer, but not the ones defined in\n\t \tthe upper layer",
                    "Can use the operations defined in the upper layer, but not the ones defined in\n\t \tthe lower layer",
                    "Should use some operation defined in the lower layer"
                ]
            },
            {
                "questionId": "ModuleStyleFour",
                "content": "Using the Aspects architectural style promotes the modifiability\n    of a system because",
                "image": [],
                "options": [
                    "It imposes restrictions on which uses relationships may\n      exist between the system's modules",
                    "It makes it easier to create generalization relationships\n      between the system's modules",
                    "It separates in new modules responsibilities that were\n      spread over various of the system's modules",
                    "It allows the decomposition of each of the system's\n      modules into finer grained modules"
                ]
            },
            {
                "questionId": "ComponentAndConnectorViewtypeTwo",
                "content": "Consider the concept of interface delegation",
                "image": [],
                "options": [
                    "It corresponds to a particular case of a specialization in a generalization view.",
                    "It represents a relation between a connector's role and a port of one of its internal components.",
                    "It represents a relation between a component's port and a port of one of its internal components.",
                    "It represents a relation between a component's port and a connector's role."
                ]
            },
            {
                "questionId": "ComponentAndConnectorStyleTwo",
                "content": "In the Service Oriented Architecture style it is common to have a\n    specialized component, named \\emph{Enterprise Service Bus} (ESB).\n    The goal of using of an ESB in a system is",
                "image": [],
                "options": [
                    "To facilitate the interaction among heterogeneous\n      components that use distinct communication protocols",
                    "To promote the use of a common communication protocol for\n      all the remaining components of the system",
                    "To increase the performance of the interaction between\n      the components of the system",
                    "To create a strong coupling between the various services\n      provided by the organization"
                ]
            },
            {
                "questionId": "ComponentAndConnectorStyleFour",
                "content": "In the description of the Gnutella system can be read:\n\t\n\t\\begin{quote}\n\t\tThe topology of the system changes at runtime as peer components connect and disconnect to the network.\n\t\\end{quote}",
                "image": [],
                "options": [
                    "When a peer connects to the network it establishes connections with all other peers in the network",
                    "The behavior described in the sentence can be represented in a view where the dynamic reconfiguration architectural style is used",
                    "When a peer receives a connection it sends all its files to the peer connecting it",
                    "The behavior described in the sentence can be represented in a view where the tier architectural style is used"
                ]
            },
            {
                "questionId": "AllocationTwo",
                "content": "Consider the install architectural style of the allocation viewtype.",
                "image": [],
                "options": [
                    "The development team is the main stakeholder interesting in these views.",
                    "It assigns modules to files.",
                    "It is completely independent of the deployment architectural style.",
                    "It helps on the configuration of systems."
                ]
            },
            {
                "questionId": "WebApplicationsTwo",
                "content": "Web applications went through several evolutions over the last\n    years.  One of those evolutions was to make their user interfaces\n    more sophisticated, by leveraging on new technologies available in\n    the browsers, such as, for example, Javascript, to provide a more\n    satisfying user experience.  What were the most visible\n    consequences of such an evolution on the typical software\n    architecture of a web application?",
                "image": [],
                "options": [
                    "The presentation logic layer and how it relates with the\n      underlying layer changed",
                    "The style of the connector used to represent the interaction between\n      the browser and the web server changed",
                    "The browser is now a component of a different type",
                    "That evolution did not have any consequences on the\n      software architecture of a web application"
                ]
            },
            {
                "questionId": "AvailabilityTwo",
                "content": "A voting tactic can be used to",
                "image": [],
                "options": [
                    "Prevent a fault in hardware.",
                    "Prevent a fault in software.",
                    "Prevent a fault in a process.",
                    "Detect a fault."
                ]
            },
            {
                "questionId": "PerformanceTwo",
                "content": "Consider a scenario for performance where the arrival of events is stochastic with a distribution where there are peeks of events but the arrival of events over a long period is uniform. The best tactic to apply is",
                "image": [],
                "options": [
                    "Manage sampling rate",
                    "Limit event response",
                    "Prioritize events",
                    "Bound execution time"
                ]
            },
            {
                "questionId": "ModifiabilityTwo",
                "content": "The main tactic associated with the layered architectural style is:",
                "image": [],
                "options": [
                    "Split module",
                    "Encapsulate",
                    "Restrict dependencies",
                    "Defer binding"
                ]
            },
            {
                "questionId": "AggregatesTwo",
                "content": "Consider the following decomposition of a domain model into 3 aggregates. If, instead of this decomposition, \\texttt{Customer} and \\texttt{Order} were in the same aggregate  \n\t\n\t\\centering\n\t\\includegraphics[width=12cm]{../1-aggregate}",
                "image": [],
                "options": [
                    "It would reduce the scalability for updates of different orders for the same customer.",
                    "Two users would not conflict if they attempt to edit different orders for the same customer.",
                    "The increase of the number of orders would not have impact on the load the aggregate.",
                    "All the above."
                ]
            },
            {
                "questionId": "EventSourcingTwo",
                "content": "Consider the architectural solutions for microservices architectures that use the Command Query Responsibility Segregation (CQRS) technique in the context of Event Sourcing. This technique has the following disadvantage",
                "image": [],
                "options": [
                    "Does not allow optimizations according to the type of query.",
                    "Does not support independent scalability according to the type of operation.",
                    "Reads may not be consistent with the most recent write.",
                    "Does not support joins."
                ]
            },
            {
                "questionId": "ModuleViewTypeTwo",
                "content": "Consider the kind of relations between components and modules.",
                "image": [],
                "options": [
                    "A module contains the code that executes in a single component and a component executes the code of a single module",
                    "A module contains the code that can execute in several components and a component executes the code of a single module",
                    "A module contains the code that executes in a single component and a component can execute the code of several modules",
                    "A module contains the code that can execute in several components and a component can execute the code of several modules"
                ]
            },
            {
                "questionId": "ScalableArchitectureTwo",
                "content": "Consider the use of a proxy to collapse requests. This corresponds to a tactic of",
                "image": [],
                "options": [
                    "Manage sampling rate",
                    "Limit event response",
                    "Prioritize events",
                    "Bound execution times"
                ]
            },
            {
                "questionId": "DVDCatalogTwo",
                "content": "Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n\t\n\t\\begin{quote}\n\t\tTo support multi-platform (Mac, Windows, Linux)\n\t\\end{quote}\n\t\n\tThis requirement requires a change of",
                "image": [],
                "options": [
                    "The layered view to deal with the aspects of portability.",
                    "The uses view to show the coupling between the different platforms.",
                    "The uses view to show the uses relationships between the different platforms.",
                    "The data model view to represent each one of the platforms."
                ]
            },
            {
                "questionId": "AdventureBuilderTwo",
                "content": "Consider the following performance/scalability scenario for the Adventure Builder system \n\t\n\t\\begin{quote}\n\t\tUp to 500 users click to see the catalog of adventure packages following a random distribution over 1 minute; the system is under normal operating conditions; the maximal latency to serve the first page of content is under 5 seconds; average latency for same is less than 2 seconds. If required, the system should easily support an increase in the number of simultaneous requests while maintaining the same latency per request.\n\t\\end{quote}\n\t\n\tand the following architectural view\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=10.5cm]{../AdventureBuilderHighLevelVIew}\n\t\\end{center}",
                "image": [],
                "options": [
                    "The view does not address the scenario",
                    "The view addresses the scenario because it separates the \\texttt{Consumer Website} module from the \\texttt{OpcApp} module to allow the execution of the \\texttt{Consumer Website} module in a component that can have multiple copies of computation",
                    "The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement",
                    "The view addresses the scenario because the \\texttt{Consumer Website} module uses the \\texttt{gwt} and \\texttt{waf} modules"
                ]
            },
            {
                "questionId": "GraphiteTwo",
                "content": "The \\emph{Composer UI} component of Graphite system, described as - \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL} - to be effective needs to show to the user the changes she performs in the graph such that she has immediate feedback about the result of the changes. To do so, the system needs to implement the tactics of",
                "image": [],
                "options": [
                    "Task Model",
                    "System Model",
                    "Performance",
                    "User Model"
                ]
            },
            {
                "questionId": "ChromeTwo",
                "content": "In the description of the Chrome case study you can read:\n\t  \\newline\n\t  \n\t  \\emph{Typing in the Omnibox (URL) bar triggers high-likelihood suggestions, which may similarly kick off a DNS lookup, TCP pre-connect, and even prerender the page in a hidden tab.} \n\t  \\newline\n\t  \n\t  This description refers to the qualities of",
                "image": [],
                "options": [
                    "Usability e Modifiability",
                    "Performance e Usability",
                    "Availability e Usability",
                    "Availability e Performance"
                ]
            },
            {
                "questionId": "SocialCalcTwo",
                "content": "Consider the architectural views for the SocialCalc system. In the case description can be read:\n\t\n\t\\begin{quote}\n\t\tThe save format is in standard MIME multipart/mixed format, consisting of four text/plain; charset=UTF-8 parts, each part containing newline-delimited text with colon-delimited data fields. The parts are...\n\t\\end{quote}\n\t\n\tFrom the above excerpt can be inferred the need to have",
                "image": [],
                "options": [
                    "A module view of the decomposition style.",
                    "A module view of the data model style.",
                    "A component-and-connector view of the service-oriented architecture style.",
                    "A module view of the uses style."
                ]
            },
            {
                "questionId": "OrderPadTwo",
                "content": "Frank Buschmann defines Featuritis as\n\t\t\n\t\\begin{quote}\n\t\tFeaturitis is the tendency to trade functional coverage for quality - the more functions the earlier they're delivered, the better.\n\t\\end{quote}\n\t\n\tIn the OrderPad system the architect regretted not getting performance tests going earlier. The OrderPad system",
                "image": [],
                "options": [
                    "Suffered from featuritis, because the architect decided to delay the difficult parts for latter in the development.",
                    "Did not suffer from featuritis.",
                    "Suffered from some level of featuritis, but it allowed to have a pilot from which the team learned.",
                    "Suffered from featuritis, but it had no impact on the final development."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2018/test-1/test-11-A.tex",
        "quizTitle": "..-data-2018-test-1-test-11-A",
        "questions": [
            {
                "questionId": "MicroservicesMonitorability",
                "content": "In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:\n\t\n\t\\begin{quote}\n\t\tMicroservice teams would expect to see (...) for each individual service such as dashboards showing up/down status and a variety of operational and business relevant metrics. Details on circuit breaker status, current throughput and latency are other examples we often encounter in the wild.\n\t\\end{quote}\n\t\n\tWhich quality is being referred?",
                "image": [],
                "options": [
                    "Performance",
                    "Availability",
                    "Usability",
                    "Monitorability"
                ]
            },
            {
                "questionId": "NetflixTacticsOne",
                "content": "In the description of the \\emph{How Netflix works} can be read:\n\t\n\t\\begin{quote}\n\t\tThe Netflix app or website determines what particular device you are using to watch, and fetches the exact file for that show meant to specially play on your particular device, with a particular video quality based on how fast your internet is at that moment.\n\t\\end{quote}\n\t\n\tWhich corresponds to the application of the following tactic",
                "image": [],
                "options": [
                    "Manage sampling rate",
                    "Limit event response",
                    "Introduce concurrency",
                    "Prioritize events"
                ]
            },
            {
                "questionId": "LoadBalancer",
                "content": "To which performance tactic can a load balancer be associated?",
                "image": [],
                "options": [
                    "Maintain multiple copies of data",
                    "Maintain multiple copies of computation",
                    "Bound execution times",
                    "Reduce overhead"
                ]
            },
            {
                "questionId": "GPComposerUIQuality",
                "content": "Which quality, or qualities, of the Graphite system are described by the sentence: \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL.}",
                "image": [],
                "options": [
                    "Usability and Performance",
                    "Usability",
                    "Performance",
                    "Testability"
                ]
            },
            {
                "questionId": "ChromeQualities",
                "content": "Which quality(ies) of Chrome can be inferred from the sentence below?\n\t\n\t\\begin{quote}\n\t\tBy contrast, Chrome works on a multi-process model, which provides process and memory isolation, and a tight security sandbox for each tab. In an increasingly multi-core world, the ability to isolate the processes as well as shield each open tab from other misbehaving pages alone proves that Chrome has a significant performance edge over the competition. In fact, it is important to note that most other browsers have followed suit, or are in the process of migrating to similar architecture.\n\t\\end{quote}",
                "image": [],
                "options": [
                    "Performance",
                    "Security",
                    "Performance and security",
                    "Security and modifiability"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2018/test-1/test-11-B.tex",
        "quizTitle": "..-data-2018-test-1-test-11-B",
        "questions": [
            {
                "questionId": "NetflixTacticsOne",
                "content": "In the description of the \\emph{How Netflix works} can be read:\n\t\n\t\\begin{quote}\n\t\tThe Netflix app or website determines what particular device you are using to watch, and fetches the exact file for that show meant to specially play on your particular device, with a particular video quality based on how fast your internet is at that moment.\n\t\\end{quote}\n\t\n\tWhich corresponds to the application of the following tactic",
                "image": [],
                "options": [
                    "Manage sampling rate",
                    "Limit event response",
                    "Introduce concurrency",
                    "Prioritize events"
                ]
            },
            {
                "questionId": "LoadBalancer",
                "content": "To which performance tactic can a load balancer be associated?",
                "image": [],
                "options": [
                    "Maintain multiple copies of data",
                    "Maintain multiple copies of computation",
                    "Bound execution times",
                    "Reduce overhead"
                ]
            },
            {
                "questionId": "GPComposerUIQuality",
                "content": "Which quality, or qualities, of the Graphite system are described by the sentence: \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL.}",
                "image": [],
                "options": [
                    "Usability and Performance",
                    "Usability",
                    "Performance",
                    "Testability"
                ]
            },
            {
                "questionId": "ChromeQualities",
                "content": "Which quality(ies) of Chrome can be inferred from the sentence below?\n\t\n\t\\begin{quote}\n\t\tBy contrast, Chrome works on a multi-process model, which provides process and memory isolation, and a tight security sandbox for each tab. In an increasingly multi-core world, the ability to isolate the processes as well as shield each open tab from other misbehaving pages alone proves that Chrome has a significant performance edge over the competition. In fact, it is important to note that most other browsers have followed suit, or are in the process of migrating to similar architecture.\n\t\\end{quote}",
                "image": [],
                "options": [
                    "Performance",
                    "Security",
                    "Performance and security",
                    "Security and modifiability"
                ]
            },
            {
                "questionId": "MicroservicesMonitorability",
                "content": "In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:\n\t\n\t\\begin{quote}\n\t\tMicroservice teams would expect to see (...) for each individual service such as dashboards showing up/down status and a variety of operational and business relevant metrics. Details on circuit breaker status, current throughput and latency are other examples we often encounter in the wild.\n\t\\end{quote}\n\t\n\tWhich quality is being referred?",
                "image": [],
                "options": [
                    "Performance",
                    "Availability",
                    "Usability",
                    "Monitorability"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2018/test-1/test-11-C.tex",
        "quizTitle": "..-data-2018-test-1-test-11-C",
        "questions": [
            {
                "questionId": "LoadBalancer",
                "content": "To which performance tactic can a load balancer be associated?",
                "image": [],
                "options": [
                    "Maintain multiple copies of data",
                    "Maintain multiple copies of computation",
                    "Bound execution times",
                    "Reduce overhead"
                ]
            },
            {
                "questionId": "GPComposerUIQuality",
                "content": "Which quality, or qualities, of the Graphite system are described by the sentence: \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL.}",
                "image": [],
                "options": [
                    "Usability and Performance",
                    "Usability",
                    "Performance",
                    "Testability"
                ]
            },
            {
                "questionId": "ChromeQualities",
                "content": "Which quality(ies) of Chrome can be inferred from the sentence below?\n\t\n\t\\begin{quote}\n\t\tBy contrast, Chrome works on a multi-process model, which provides process and memory isolation, and a tight security sandbox for each tab. In an increasingly multi-core world, the ability to isolate the processes as well as shield each open tab from other misbehaving pages alone proves that Chrome has a significant performance edge over the competition. In fact, it is important to note that most other browsers have followed suit, or are in the process of migrating to similar architecture.\n\t\\end{quote}",
                "image": [],
                "options": [
                    "Performance",
                    "Security",
                    "Performance and security",
                    "Security and modifiability"
                ]
            },
            {
                "questionId": "MicroservicesMonitorability",
                "content": "In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:\n\t\n\t\\begin{quote}\n\t\tMicroservice teams would expect to see (...) for each individual service such as dashboards showing up/down status and a variety of operational and business relevant metrics. Details on circuit breaker status, current throughput and latency are other examples we often encounter in the wild.\n\t\\end{quote}\n\t\n\tWhich quality is being referred?",
                "image": [],
                "options": [
                    "Performance",
                    "Availability",
                    "Usability",
                    "Monitorability"
                ]
            },
            {
                "questionId": "NetflixTacticsOne",
                "content": "In the description of the \\emph{How Netflix works} can be read:\n\t\n\t\\begin{quote}\n\t\tThe Netflix app or website determines what particular device you are using to watch, and fetches the exact file for that show meant to specially play on your particular device, with a particular video quality based on how fast your internet is at that moment.\n\t\\end{quote}\n\t\n\tWhich corresponds to the application of the following tactic",
                "image": [],
                "options": [
                    "Manage sampling rate",
                    "Limit event response",
                    "Introduce concurrency",
                    "Prioritize events"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2018/test-1/test-11-D.tex",
        "quizTitle": "..-data-2018-test-1-test-11-D",
        "questions": [
            {
                "questionId": "GPComposerUIQuality",
                "content": "Which quality, or qualities, of the Graphite system are described by the sentence: \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL.}",
                "image": [],
                "options": [
                    "Usability and Performance",
                    "Usability",
                    "Performance",
                    "Testability"
                ]
            },
            {
                "questionId": "ChromeQualities",
                "content": "Which quality(ies) of Chrome can be inferred from the sentence below?\n\t\n\t\\begin{quote}\n\t\tBy contrast, Chrome works on a multi-process model, which provides process and memory isolation, and a tight security sandbox for each tab. In an increasingly multi-core world, the ability to isolate the processes as well as shield each open tab from other misbehaving pages alone proves that Chrome has a significant performance edge over the competition. In fact, it is important to note that most other browsers have followed suit, or are in the process of migrating to similar architecture.\n\t\\end{quote}",
                "image": [],
                "options": [
                    "Performance",
                    "Security",
                    "Performance and security",
                    "Security and modifiability"
                ]
            },
            {
                "questionId": "MicroservicesMonitorability",
                "content": "In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:\n\t\n\t\\begin{quote}\n\t\tMicroservice teams would expect to see (...) for each individual service such as dashboards showing up/down status and a variety of operational and business relevant metrics. Details on circuit breaker status, current throughput and latency are other examples we often encounter in the wild.\n\t\\end{quote}\n\t\n\tWhich quality is being referred?",
                "image": [],
                "options": [
                    "Performance",
                    "Availability",
                    "Usability",
                    "Monitorability"
                ]
            },
            {
                "questionId": "NetflixTacticsOne",
                "content": "In the description of the \\emph{How Netflix works} can be read:\n\t\n\t\\begin{quote}\n\t\tThe Netflix app or website determines what particular device you are using to watch, and fetches the exact file for that show meant to specially play on your particular device, with a particular video quality based on how fast your internet is at that moment.\n\t\\end{quote}\n\t\n\tWhich corresponds to the application of the following tactic",
                "image": [],
                "options": [
                    "Manage sampling rate",
                    "Limit event response",
                    "Introduce concurrency",
                    "Prioritize events"
                ]
            },
            {
                "questionId": "LoadBalancer",
                "content": "To which performance tactic can a load balancer be associated?",
                "image": [],
                "options": [
                    "Maintain multiple copies of data",
                    "Maintain multiple copies of computation",
                    "Bound execution times",
                    "Reduce overhead"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2018/test-1/test-12-A.tex",
        "quizTitle": "..-data-2018-test-1-test-12-A",
        "questions": [
            {
                "questionId": "MicroservicesModuleAndComponent",
                "content": "In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:\n\t\n\t\\begin{quote}\n\t\tAs well as the fact that services are independently deployable and scalable, each service also provides a firm module boundary, even allowing for different services to be written in different programming languages. They can also be managed by different teams.\n\t\\end{quote}\n\t\n\tFor this description it is relevant to consider the software architecture concept(s) of",
                "image": [],
                "options": [
                    "Component",
                    "Module",
                    "Component and Module",
                    "None of the above"
                ]
            },
            {
                "questionId": "NetflixTacticsTwo",
                "content": "In the description of the \\emph{How Netflix works} can be read:\n\t\n\t\\begin{quote}\n\t\tWhat CDNs basically do is, they take the original website and the media content it contains, and copy it across hundreds of servers spread all over the world. So when, say, you log in from Budapest, instead of connecting to the main Netflix server in the United States it will load a ditto copy of it from a CDN server that is the closest to Budapest.\n\t\\end{quote}\n\t\n\tWhich corresponds to the application of the following tactic",
                "image": [],
                "options": [
                    "Manage sampling rate",
                    "Limit event response",
                    "Maintain multiple copies of data",
                    "Maintain multiple copies of computation"
                ]
            },
            {
                "questionId": "Queues",
                "content": "To which performance tactic can the use of queues be associated?",
                "image": [],
                "options": [
                    "Limit event response",
                    "Schedule resources",
                    "Bound execution times",
                    "Increase resource efficiency"
                ]
            },
            {
                "questionId": "GraphiteScenarioTacticsOne",
                "content": "In the Graphite system the component \\emph{carbon} provides to \\emph{webapp} components an access interface to the \\emph{buffers} in order to improve the quality of",
                "image": [],
                "options": [
                    "Performance.",
                    "Interoperability.",
                    "Availability.",
                    "Security."
                ]
            },
            {
                "questionId": "ChromeTactics",
                "content": "Which performance tactic is referred in the following description of Chrome?\n\n\t\\begin{quote}\n\t\tThe ability of the browser to optimize the order, priority, and latency of each network resource is one of the most critical contributors to the overall user experience. You may not be aware of it, but Chrome's network stack is, quite literally, getting smarter every day, trying to hide or decrease the latency cost of each resource: it learns likely DNS lookups, it remembers the topology of the web, it pre-connects to likely destination targets, and more. From the outside, it presents itself as a simple resource fetching mechanism, but from the inside it is an elaborate and a fascinating case study for how to optimize web performance and deliver the best experience to the user.\n\t\\end{quote}",
                "image": [],
                "options": [
                    "Limit event response",
                    "Maintain multiple copies of computation",
                    "Maintain multiple copies of data",
                    "Schedule resources"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2018/test-1/test-12-B.tex",
        "quizTitle": "..-data-2018-test-1-test-12-B",
        "questions": [
            {
                "questionId": "NetflixTacticsTwo",
                "content": "In the description of the \\emph{How Netflix works} can be read:\n\t\n\t\\begin{quote}\n\t\tWhat CDNs basically do is, they take the original website and the media content it contains, and copy it across hundreds of servers spread all over the world. So when, say, you log in from Budapest, instead of connecting to the main Netflix server in the United States it will load a ditto copy of it from a CDN server that is the closest to Budapest.\n\t\\end{quote}\n\t\n\tWhich corresponds to the application of the following tactic",
                "image": [],
                "options": [
                    "Manage sampling rate",
                    "Limit event response",
                    "Maintain multiple copies of data",
                    "Maintain multiple copies of computation"
                ]
            },
            {
                "questionId": "Queues",
                "content": "To which performance tactic can the use of queues be associated?",
                "image": [],
                "options": [
                    "Limit event response",
                    "Schedule resources",
                    "Bound execution times",
                    "Increase resource efficiency"
                ]
            },
            {
                "questionId": "GraphiteScenarioTacticsOne",
                "content": "In the Graphite system the component \\emph{carbon} provides to \\emph{webapp} components an access interface to the \\emph{buffers} in order to improve the quality of",
                "image": [],
                "options": [
                    "Performance.",
                    "Interoperability.",
                    "Availability.",
                    "Security."
                ]
            },
            {
                "questionId": "ChromeTactics",
                "content": "Which performance tactic is referred in the following description of Chrome?\n\n\t\\begin{quote}\n\t\tThe ability of the browser to optimize the order, priority, and latency of each network resource is one of the most critical contributors to the overall user experience. You may not be aware of it, but Chrome's network stack is, quite literally, getting smarter every day, trying to hide or decrease the latency cost of each resource: it learns likely DNS lookups, it remembers the topology of the web, it pre-connects to likely destination targets, and more. From the outside, it presents itself as a simple resource fetching mechanism, but from the inside it is an elaborate and a fascinating case study for how to optimize web performance and deliver the best experience to the user.\n\t\\end{quote}",
                "image": [],
                "options": [
                    "Limit event response",
                    "Maintain multiple copies of computation",
                    "Maintain multiple copies of data",
                    "Schedule resources"
                ]
            },
            {
                "questionId": "MicroservicesModuleAndComponent",
                "content": "In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:\n\t\n\t\\begin{quote}\n\t\tAs well as the fact that services are independently deployable and scalable, each service also provides a firm module boundary, even allowing for different services to be written in different programming languages. They can also be managed by different teams.\n\t\\end{quote}\n\t\n\tFor this description it is relevant to consider the software architecture concept(s) of",
                "image": [],
                "options": [
                    "Component",
                    "Module",
                    "Component and Module",
                    "None of the above"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2018/test-1/test-12-C.tex",
        "quizTitle": "..-data-2018-test-1-test-12-C",
        "questions": [
            {
                "questionId": "Queues",
                "content": "To which performance tactic can the use of queues be associated?",
                "image": [],
                "options": [
                    "Limit event response",
                    "Schedule resources",
                    "Bound execution times",
                    "Increase resource efficiency"
                ]
            },
            {
                "questionId": "GraphiteScenarioTacticsOne",
                "content": "In the Graphite system the component \\emph{carbon} provides to \\emph{webapp} components an access interface to the \\emph{buffers} in order to improve the quality of",
                "image": [],
                "options": [
                    "Performance.",
                    "Interoperability.",
                    "Availability.",
                    "Security."
                ]
            },
            {
                "questionId": "ChromeTactics",
                "content": "Which performance tactic is referred in the following description of Chrome?\n\n\t\\begin{quote}\n\t\tThe ability of the browser to optimize the order, priority, and latency of each network resource is one of the most critical contributors to the overall user experience. You may not be aware of it, but Chrome's network stack is, quite literally, getting smarter every day, trying to hide or decrease the latency cost of each resource: it learns likely DNS lookups, it remembers the topology of the web, it pre-connects to likely destination targets, and more. From the outside, it presents itself as a simple resource fetching mechanism, but from the inside it is an elaborate and a fascinating case study for how to optimize web performance and deliver the best experience to the user.\n\t\\end{quote}",
                "image": [],
                "options": [
                    "Limit event response",
                    "Maintain multiple copies of computation",
                    "Maintain multiple copies of data",
                    "Schedule resources"
                ]
            },
            {
                "questionId": "MicroservicesModuleAndComponent",
                "content": "In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:\n\t\n\t\\begin{quote}\n\t\tAs well as the fact that services are independently deployable and scalable, each service also provides a firm module boundary, even allowing for different services to be written in different programming languages. They can also be managed by different teams.\n\t\\end{quote}\n\t\n\tFor this description it is relevant to consider the software architecture concept(s) of",
                "image": [],
                "options": [
                    "Component",
                    "Module",
                    "Component and Module",
                    "None of the above"
                ]
            },
            {
                "questionId": "NetflixTacticsTwo",
                "content": "In the description of the \\emph{How Netflix works} can be read:\n\t\n\t\\begin{quote}\n\t\tWhat CDNs basically do is, they take the original website and the media content it contains, and copy it across hundreds of servers spread all over the world. So when, say, you log in from Budapest, instead of connecting to the main Netflix server in the United States it will load a ditto copy of it from a CDN server that is the closest to Budapest.\n\t\\end{quote}\n\t\n\tWhich corresponds to the application of the following tactic",
                "image": [],
                "options": [
                    "Manage sampling rate",
                    "Limit event response",
                    "Maintain multiple copies of data",
                    "Maintain multiple copies of computation"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2018/test-1/test-12-D.tex",
        "quizTitle": "..-data-2018-test-1-test-12-D",
        "questions": [
            {
                "questionId": "GraphiteScenarioTacticsOne",
                "content": "In the Graphite system the component \\emph{carbon} provides to \\emph{webapp} components an access interface to the \\emph{buffers} in order to improve the quality of",
                "image": [],
                "options": [
                    "Performance.",
                    "Interoperability.",
                    "Availability.",
                    "Security."
                ]
            },
            {
                "questionId": "ChromeTactics",
                "content": "Which performance tactic is referred in the following description of Chrome?\n\n\t\\begin{quote}\n\t\tThe ability of the browser to optimize the order, priority, and latency of each network resource is one of the most critical contributors to the overall user experience. You may not be aware of it, but Chrome's network stack is, quite literally, getting smarter every day, trying to hide or decrease the latency cost of each resource: it learns likely DNS lookups, it remembers the topology of the web, it pre-connects to likely destination targets, and more. From the outside, it presents itself as a simple resource fetching mechanism, but from the inside it is an elaborate and a fascinating case study for how to optimize web performance and deliver the best experience to the user.\n\t\\end{quote}",
                "image": [],
                "options": [
                    "Limit event response",
                    "Maintain multiple copies of computation",
                    "Maintain multiple copies of data",
                    "Schedule resources"
                ]
            },
            {
                "questionId": "MicroservicesModuleAndComponent",
                "content": "In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:\n\t\n\t\\begin{quote}\n\t\tAs well as the fact that services are independently deployable and scalable, each service also provides a firm module boundary, even allowing for different services to be written in different programming languages. They can also be managed by different teams.\n\t\\end{quote}\n\t\n\tFor this description it is relevant to consider the software architecture concept(s) of",
                "image": [],
                "options": [
                    "Component",
                    "Module",
                    "Component and Module",
                    "None of the above"
                ]
            },
            {
                "questionId": "NetflixTacticsTwo",
                "content": "In the description of the \\emph{How Netflix works} can be read:\n\t\n\t\\begin{quote}\n\t\tWhat CDNs basically do is, they take the original website and the media content it contains, and copy it across hundreds of servers spread all over the world. So when, say, you log in from Budapest, instead of connecting to the main Netflix server in the United States it will load a ditto copy of it from a CDN server that is the closest to Budapest.\n\t\\end{quote}\n\t\n\tWhich corresponds to the application of the following tactic",
                "image": [],
                "options": [
                    "Manage sampling rate",
                    "Limit event response",
                    "Maintain multiple copies of data",
                    "Maintain multiple copies of computation"
                ]
            },
            {
                "questionId": "Queues",
                "content": "To which performance tactic can the use of queues be associated?",
                "image": [],
                "options": [
                    "Limit event response",
                    "Schedule resources",
                    "Bound execution times",
                    "Increase resource efficiency"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2018/test-2/test-21-A.tex",
        "quizTitle": "..-data-2018-test-2-test-21-A",
        "questions": [
            {
                "questionId": "ModifiabilityResponseMeasure",
                "content": "A response measure of a modifiability scenario is",
                "image": [],
                "options": [
                    "When the modification should occur.",
                    "The features that will be implemented.",
                    "The new defects introduced.",
                    "Defer binding."
                ]
            },
            {
                "questionId": "IterativeDesign",
                "content": "Designing an architecture",
                "image": [],
                "options": [
                    "Is driven by functional requirements.",
                    "Is done in a single step, after all the tactics were identified.",
                    "Is a top-down process where a initial decomposition is chosen and it is successively decomposed without changing the initial decisions.",
                    "Is an iterative process where architectural designs are proposed as hypothesis and tested."
                ]
            },
            {
                "questionId": "Decomposition",
                "content": "The Decomposition architectural style of the Module viewtype",
                "image": [],
                "options": [
                    "Is applied only once at the beginning of the architectural design process.",
                    "Is applied at the begin of the architectural design process but may be necessary to redo it later.",
                    "Is mostly driven by the security attribute quality.",
                    "Follows a bottom-up decomposition process of the system."
                ]
            },
            {
                "questionId": "ChromeTabSecurity",
                "content": "In the Chrome system the use of a process per tab results form the application of a tactic of",
                "image": [],
                "options": [
                    "Limit access.",
                    "Increase resources.",
                    "Increase resource efficiency.",
                    "Maintain multiple copies of data."
                ]
            },
            {
                "questionId": "SocialCalcTacticsOne",
                "content": "In the description of the SocialCalc case study can be read:\n\t\n\t\\begin{quote}\n\t\tAs the user scrolls the spreadsheet through our custom-drawn scroll bars, we dynamically update the innerHTML of the pre-drawn \\textsc{<td>} elements. This means we don't need to create or destroy any \\textsc{<tr>} or \\textsc{<td>} elements in many common cases, which greatly speeds up response time.\n\t\\end{quote} \n\t\n\tThis corresponds to the application of",
                "image": [],
                "options": [
                    "Manage sampling rate tactic.",
                    "Increase resource efficiency tactic.",
                    "Introduce concurrency tactic.",
                    "Schedule resources tactic."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2018/test-2/test-21-B.tex",
        "quizTitle": "..-data-2018-test-2-test-21-B",
        "questions": [
            {
                "questionId": "ChromeTabSecurity",
                "content": "In the Chrome system the use of a process per tab results form the application of a tactic of",
                "image": [],
                "options": [
                    "Limit access.",
                    "Increase resources.",
                    "Increase resource efficiency.",
                    "Maintain multiple copies of data."
                ]
            },
            {
                "questionId": "SocialCalcTacticsOne",
                "content": "In the description of the SocialCalc case study can be read:\n\t\n\t\\begin{quote}\n\t\tAs the user scrolls the spreadsheet through our custom-drawn scroll bars, we dynamically update the innerHTML of the pre-drawn \\textsc{<td>} elements. This means we don't need to create or destroy any \\textsc{<tr>} or \\textsc{<td>} elements in many common cases, which greatly speeds up response time.\n\t\\end{quote} \n\t\n\tThis corresponds to the application of",
                "image": [],
                "options": [
                    "Manage sampling rate tactic.",
                    "Increase resource efficiency tactic.",
                    "Introduce concurrency tactic.",
                    "Schedule resources tactic."
                ]
            },
            {
                "questionId": "ModifiabilityResponseMeasure",
                "content": "A response measure of a modifiability scenario is",
                "image": [],
                "options": [
                    "When the modification should occur.",
                    "The features that will be implemented.",
                    "The new defects introduced.",
                    "Defer binding."
                ]
            },
            {
                "questionId": "IterativeDesign",
                "content": "Designing an architecture",
                "image": [],
                "options": [
                    "Is driven by functional requirements.",
                    "Is done in a single step, after all the tactics were identified.",
                    "Is a top-down process where a initial decomposition is chosen and it is successively decomposed without changing the initial decisions.",
                    "Is an iterative process where architectural designs are proposed as hypothesis and tested."
                ]
            },
            {
                "questionId": "Decomposition",
                "content": "The Decomposition architectural style of the Module viewtype",
                "image": [],
                "options": [
                    "Is applied only once at the beginning of the architectural design process.",
                    "Is applied at the begin of the architectural design process but may be necessary to redo it later.",
                    "Is mostly driven by the security attribute quality.",
                    "Follows a bottom-up decomposition process of the system."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2018/test-2/test-22-A.tex",
        "quizTitle": "..-data-2018-test-2-test-22-A",
        "questions": [
            {
                "questionId": "AvailabilityVotingFirst",
                "content": "There are several tactics to satisfy availability requirements,\n    which may be applied depending on the concrete requirement that we\n    want to satisfy.  Assuming that you want to detect faults of type\n    \\emph{response} in your system, which tactic is more adequate?",
                "image": [],
                "options": [
                    "Ping/Echo.",
                    "Retry.",
                    "Voting.",
                    "Passive Redundancy."
                ]
            },
            {
                "questionId": "LowArchitecturalImpact",
                "content": "Consider an architecturally significant requirement (ASR) that has a low impact on the architecture but a high business value",
                "image": [],
                "options": [
                    "This ASR can easily be supported by the architecture because it has little effect in the architecture.",
                    "This ASR requires a specific architectural design because it profoundly affects the architecture.",
                    "The cost of meeting the ASR after development starts is too high.",
                    "Any ASR that has a high business value cannot have a low architecture impact because it needs to be supported by the architecture."
                ]
            },
            {
                "questionId": "UsesCalls",
                "content": "A function call is not necessarily a uses relation of the Uses architectural style of the Module viewtype because",
                "image": [],
                "options": [
                    "The correctness of the caller module may not depend on the correct implementation of the invoked function in the called module.",
                    "The invoked function may not have any input parameter.",
                    "The invoked function may not have any output parameter.",
                    "The invoked function may not have both any input parameter nor any output parameter."
                ]
            },
            {
                "questionId": "ChromePredictor",
                "content": "In the description of the Chrome system can be read\n\t\n\t\\begin{quote}\n\t\tThe goal of the predictor is to evaluate the likelihood of its success, and then to trigger the activity if resources are available. \n\t\\end{quote}\n\t\n\tThe above sentence refer to",
                "image": [],
                "options": [
                    "Maintain multiple copies of data tactic.",
                    "Introduce concurrence tactic.",
                    "Increase resource efficiency tactic.",
                    "Schedule resources tactic."
                ]
            },
            {
                "questionId": "SocialCalcTacticsTwo",
                "content": "In the description of the SocialCalc case study can be read:\n\t\n\t\\begin{quote}\n\t\tA simple improvement is for each client to broadcast its cursor position to other users, so everyone can see which cells are being worked on.\n\t\\end{quote}\n\t\n\tThis sentence describes a tactic for usability which is",
                "image": [],
                "options": [
                    "Maintain task model",
                    "Maintain user model",
                    "Maintain system model",
                    "Aggregate"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2018/test-2/test-22-B.tex",
        "quizTitle": "..-data-2018-test-2-test-22-B",
        "questions": [
            {
                "questionId": "UsesCalls",
                "content": "A function call is not necessarily a uses relation of the Uses architectural style of the Module viewtype because",
                "image": [],
                "options": [
                    "The correctness of the caller module may not depend on the correct implementation of the invoked function in the called module.",
                    "The invoked function may not have any input parameter.",
                    "The invoked function may not have any output parameter.",
                    "The invoked function may not have both any input parameter nor any output parameter."
                ]
            },
            {
                "questionId": "ChromePredictor",
                "content": "In the description of the Chrome system can be read\n\t\n\t\\begin{quote}\n\t\tThe goal of the predictor is to evaluate the likelihood of its success, and then to trigger the activity if resources are available. \n\t\\end{quote}\n\t\n\tThe above sentence refer to",
                "image": [],
                "options": [
                    "Maintain multiple copies of data tactic.",
                    "Introduce concurrence tactic.",
                    "Increase resource efficiency tactic.",
                    "Schedule resources tactic."
                ]
            },
            {
                "questionId": "AvailabilityVotingFirst",
                "content": "There are several tactics to satisfy availability requirements,\n    which may be applied depending on the concrete requirement that we\n    want to satisfy.  Assuming that you want to detect faults of type\n    \\emph{response} in your system, which tactic is more adequate?",
                "image": [],
                "options": [
                    "Ping/Echo.",
                    "Retry.",
                    "Voting.",
                    "Passive Redundancy."
                ]
            },
            {
                "questionId": "LowArchitecturalImpact",
                "content": "Consider an architecturally significant requirement (ASR) that has a low impact on the architecture but a high business value",
                "image": [],
                "options": [
                    "This ASR can easily be supported by the architecture because it has little effect in the architecture.",
                    "This ASR requires a specific architectural design because it profoundly affects the architecture.",
                    "The cost of meeting the ASR after development starts is too high.",
                    "Any ASR that has a high business value cannot have a low architecture impact because it needs to be supported by the architecture."
                ]
            },
            {
                "questionId": "SocialCalcTacticsTwo",
                "content": "In the description of the SocialCalc case study can be read:\n\t\n\t\\begin{quote}\n\t\tA simple improvement is for each client to broadcast its cursor position to other users, so everyone can see which cells are being worked on.\n\t\\end{quote}\n\t\n\tThis sentence describes a tactic for usability which is",
                "image": [],
                "options": [
                    "Maintain task model",
                    "Maintain user model",
                    "Maintain system model",
                    "Aggregate"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2018/test-3/test-31-A.tex",
        "quizTitle": "..-data-2018-test-3-test-31-A",
        "questions": [
            {
                "questionId": "Layered",
                "content": "Consider the Layered architectural style of the Module viewtype",
                "image": [],
                "options": [
                    "The modules inside a layer cannot use other modules in the same layer",
                    "A layer cannot call the layer above",
                    "Each layer defines a virtual machine because it provides a set of cohesive functionalities to the upper layer",
                    "It is possible to have a circular allowed-to-use relationship between several layers"
                ]
            },
            {
                "questionId": "DataModelOne",
                "content": "The detail that can be used in a view of the Data Model viewtype can be conceptual, logical or physical.",
                "image": [],
                "options": [
                    "If there are performance requirements concerning the access to data, then the level of detail should be physical",
                    "It should always consider the physical detail level",
                    "The logical detail level should only be used when the target of implementation is a relational database",
                    "Only the conceptual level is required, the other two levels of detail are optional"
                ]
            },
            {
                "questionId": "ComponentAndConnectorOne",
                "content": "In the component-and-connector viewtype connectors can be complex, which means that they provide a rich set of qualities to the interaction between the components that they connect. These complex connectors can be documented in another view using a set of components interacting through simpler connectors.",
                "image": [],
                "options": [
                    "Whenever complex connectors are used in architectural views it is necessary to also document their decomposition.",
                    "It is preferable to only design views that do not use complex connectors to increase understandability.",
                    "If there is some technology available that implements the complex connectors, according to its expected qualities, it is not necessary to document their decomposition.",
                    "Whenever possible it should be avoided to use complex connectors because developers have difficult to know how to implement them."
                ]
            },
            {
                "questionId": "PipesFilters",
                "content": "Consider that you intend to develop a system where it is necessary to change the emails received by the server (for instance, to remove potential virus or URLs for phishing sites). The goal is that each email is processed by this system before it is sent to other servers or it is stored locally. Additionally, the system should be easily modified to support new kinds of transformations. Which style is more suitable to satisfy these requirements?",
                "image": [],
                "options": [
                    "Peer-to-Peer.",
                    "Pipe-and-Filter.",
                    "Client-Server.",
                    "Publish-Subscribe."
                ]
            },
            {
                "questionId": "SOA",
                "content": "Consider the Service-Oriented Architecture architectural style",
                "image": [],
                "options": [
                    "The main quality this style addresses is interoperability.",
                    "It cannot be applied when the system includes legacy systems.",
                    "Its enterprise service bus cannot support asynchronous communication between the components.",
                    "The typical communication pattern is point-to-point."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2018/test-3/test-31-B.tex",
        "quizTitle": "..-data-2018-test-3-test-31-B",
        "questions": [
            {
                "questionId": "ComponentAndConnectorOne",
                "content": "In the component-and-connector viewtype connectors can be complex, which means that they provide a rich set of qualities to the interaction between the components that they connect. These complex connectors can be documented in another view using a set of components interacting through simpler connectors.",
                "image": [],
                "options": [
                    "Whenever complex connectors are used in architectural views it is necessary to also document their decomposition.",
                    "It is preferable to only design views that do not use complex connectors to increase understandability.",
                    "If there is some technology available that implements the complex connectors, according to its expected qualities, it is not necessary to document their decomposition.",
                    "Whenever possible it should be avoided to use complex connectors because developers have difficult to know how to implement them."
                ]
            },
            {
                "questionId": "PipesFilters",
                "content": "Consider that you intend to develop a system where it is necessary to change the emails received by the server (for instance, to remove potential virus or URLs for phishing sites). The goal is that each email is processed by this system before it is sent to other servers or it is stored locally. Additionally, the system should be easily modified to support new kinds of transformations. Which style is more suitable to satisfy these requirements?",
                "image": [],
                "options": [
                    "Peer-to-Peer.",
                    "Pipe-and-Filter.",
                    "Client-Server.",
                    "Publish-Subscribe."
                ]
            },
            {
                "questionId": "SOA",
                "content": "Consider the Service-Oriented Architecture architectural style",
                "image": [],
                "options": [
                    "The main quality this style addresses is interoperability.",
                    "It cannot be applied when the system includes legacy systems.",
                    "Its enterprise service bus cannot support asynchronous communication between the components.",
                    "The typical communication pattern is point-to-point."
                ]
            },
            {
                "questionId": "Layered",
                "content": "Consider the Layered architectural style of the Module viewtype",
                "image": [],
                "options": [
                    "The modules inside a layer cannot use other modules in the same layer",
                    "A layer cannot call the layer above",
                    "Each layer defines a virtual machine because it provides a set of cohesive functionalities to the upper layer",
                    "It is possible to have a circular allowed-to-use relationship between several layers"
                ]
            },
            {
                "questionId": "DataModelOne",
                "content": "The detail that can be used in a view of the Data Model viewtype can be conceptual, logical or physical.",
                "image": [],
                "options": [
                    "If there are performance requirements concerning the access to data, then the level of detail should be physical",
                    "It should always consider the physical detail level",
                    "The logical detail level should only be used when the target of implementation is a relational database",
                    "Only the conceptual level is required, the other two levels of detail are optional"
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2018/test-3/test-32-A.tex",
        "quizTitle": "..-data-2018-test-3-test-32-A",
        "questions": [
            {
                "questionId": "Aspects",
                "content": "Using the Aspects architectural style promotes the modifiability\n    of a system because",
                "image": [],
                "options": [
                    "It imposes restrictions on which uses relationships may\n      exist between the system's modules",
                    "It makes it easier to create generalization relationships\n      between the system's modules",
                    "It separates in new modules responsibilities that were\n      spread over various of the system's modules",
                    "It allows the decomposition of each of the system's\n      modules into finer grained modules"
                ]
            },
            {
                "questionId": "DataModelTwo",
                "content": "In Facebook it is not possible to have the information about more that one bilion users in a single disk. Therefore, a sharding technique is applied, where the persistent information is split between several database servers, and requests are routed to the right servers for queries and updates. Additionally, due to performance requirements, the information needs to be replicated in several servers. To describe this architecture",
                "image": [],
                "options": [
                    "It is not necessary to have any view of the Data Model architectural style because Facebook information has a very simple structure.",
                    "It is enough to design a view of the Data Model architectural style at the conceptual level because Facebook information has a very simple structure.",
                    "It is enough to design a view of the Data Model architectural style at the logical level because the information will be stored in a relational database.",
                    "It is necessary to design a view of the Data Model architectural style at the physical level to deal with performance and consistency issues of the access to data."
                ]
            },
            {
                "questionId": "ComponentAndConnectorTwo",
                "content": "Consider the Component-and-Connector viewtype",
                "image": [],
                "options": [
                    "A component is an instance and a view can have several instances of the same component type.",
                    "A component type is made of a single architectural style.",
                    "Only components can be associated with application-specific types.",
                    "A component-and-connector view can only use a single architectural style."
                ]
            },
            {
                "questionId": "PeerToPeer",
                "content": "Consider the peer-to-peer architectural style",
                "image": [],
                "options": [
                    "All the peers are equal.",
                    "Any peer can access any other peer.",
                    "Peers are only used to share files.",
                    "The interaction between peers is symmetric."
                ]
            },
            {
                "questionId": "Tiers",
                "content": "The Tiers architectural style",
                "image": [],
                "options": [
                    "Applies layers to tiers.",
                    "Restricts the communication between components because, for instance, a group of components should be located in the same hardware.",
                    "Is an extension of the Client-Server architectural style.",
                    "Defines tiers as components."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2018/test-3/test-32-B.tex",
        "quizTitle": "..-data-2018-test-3-test-32-B",
        "questions": [
            {
                "questionId": "Tiers",
                "content": "The Tiers architectural style",
                "image": [],
                "options": [
                    "Applies layers to tiers.",
                    "Restricts the communication between components because, for instance, a group of components should be located in the same hardware.",
                    "Is an extension of the Client-Server architectural style.",
                    "Defines tiers as components."
                ]
            },
            {
                "questionId": "Aspects",
                "content": "Using the Aspects architectural style promotes the modifiability\n    of a system because",
                "image": [],
                "options": [
                    "It imposes restrictions on which uses relationships may\n      exist between the system's modules",
                    "It makes it easier to create generalization relationships\n      between the system's modules",
                    "It separates in new modules responsibilities that were\n      spread over various of the system's modules",
                    "It allows the decomposition of each of the system's\n      modules into finer grained modules"
                ]
            },
            {
                "questionId": "PeerToPeer",
                "content": "Consider the peer-to-peer architectural style",
                "image": [],
                "options": [
                    "All the peers are equal.",
                    "Any peer can access any other peer.",
                    "Peers are only used to share files.",
                    "The interaction between peers is symmetric."
                ]
            },
            {
                "questionId": "DataModelTwo",
                "content": "In Facebook it is not possible to have the information about more that one bilion users in a single disk. Therefore, a sharding technique is applied, where the persistent information is split between several database servers, and requests are routed to the right servers for queries and updates. Additionally, due to performance requirements, the information needs to be replicated in several servers. To describe this architecture",
                "image": [],
                "options": [
                    "It is not necessary to have any view of the Data Model architectural style because Facebook information has a very simple structure.",
                    "It is enough to design a view of the Data Model architectural style at the conceptual level because Facebook information has a very simple structure.",
                    "It is enough to design a view of the Data Model architectural style at the logical level because the information will be stored in a relational database.",
                    "It is necessary to design a view of the Data Model architectural style at the physical level to deal with performance and consistency issues of the access to data."
                ]
            },
            {
                "questionId": "ComponentAndConnectorTwo",
                "content": "Consider the Component-and-Connector viewtype",
                "image": [],
                "options": [
                    "A component is an instance and a view can have several instances of the same component type.",
                    "A component type is made of a single architectural style.",
                    "Only components can be associated with application-specific types.",
                    "A component-and-connector view can only use a single architectural style."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2018/test-4/test-41-A.tex",
        "quizTitle": "..-data-2018-test-4-test-41-A",
        "questions": [
            {
                "questionId": "AllocationStylesCost",
                "content": "Consider a stakeholder that is particularly concerned about the total cost of the project. When it comes to describing the system using allocation viewtypes she is interested in",
                "image": [],
                "options": [
                    "A deployment view.",
                    "A work assignment view.",
                    "A deployment and a work assignment view.",
                    "A install view."
                ]
            },
            {
                "questionId": "DVDCatalogMeta",
                "content": "Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n\t\n\t\\begin{quote}\n\t\tThe application should support other kinds of catalogs (CDs, games, books, ...). \n\t\\end{quote}\n\t\n\tThis requirement requires a change of",
                "image": [],
                "options": [
                    "The layered view to support a new specific layer for the customization of the catalog.",
                    "The layered view to accommodate a new layer for each kind of catalog, which other layers may use.",
                    "The data model view in order to define entities for each kind of catalog.",
                    "The data model view in order to define generic entities that can be customized for different kinds of catalogs."
                ]
            },
            {
                "questionId": "GraphiteClientServer",
                "content": "In Graphite system, in order to generate up-to-date graphs, the \\emph{WebApp} component interacts with the \\emph{Carbon} component. The interaction between these two components follows the architectural style",
                "image": [],
                "options": [
                    "Client-server.",
                    "Communicating Processes.",
                    "Repository.",
                    "Pipes-and-Filters."
                ]
            },
            {
                "questionId": "ChromeCommunicatingProcesses",
                "content": "In Chrome system, to show that it provides availability when the javascript code executing in a tab crashes, and security when the javascript code executing in a tab tries to access the information in another tab, it is necessary to design",
                "image": [],
                "options": [
                    "One view of the component-and-connector viewtype and another of the deployment style.",
                    "A single view of the communicating processes style.",
                    "Two views of the communicating processes style.",
                    "A view of the aspects style."
                ]
            },
            {
                "questionId": "AggregateAndEventSourcing",
                "content": "How can be guaranteed that the update of an aggregate and the publishing of an event about the update is an atomic action",
                "image": [],
                "options": [
                    "The aggregates publishes the event in a message broker and subscribes to the published event.",
                    "Using the database of the aggregate as a temporary message queue.",
                    "Using event sourcing.",
                    "All of the above."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2018/test-4/test-41-B.tex",
        "quizTitle": "..-data-2018-test-4-test-41-B",
        "questions": [
            {
                "questionId": "ChromeCommunicatingProcesses",
                "content": "In Chrome system, to show that it provides availability when the javascript code executing in a tab crashes, and security when the javascript code executing in a tab tries to access the information in another tab, it is necessary to design",
                "image": [],
                "options": [
                    "One view of the component-and-connector viewtype and another of the deployment style.",
                    "A single view of the communicating processes style.",
                    "Two views of the communicating processes style.",
                    "A view of the aspects style."
                ]
            },
            {
                "questionId": "AggregateAndEventSourcing",
                "content": "How can be guaranteed that the update of an aggregate and the publishing of an event about the update is an atomic action",
                "image": [],
                "options": [
                    "The aggregates publishes the event in a message broker and subscribes to the published event.",
                    "Using the database of the aggregate as a temporary message queue.",
                    "Using event sourcing.",
                    "All of the above."
                ]
            },
            {
                "questionId": "AllocationStylesCost",
                "content": "Consider a stakeholder that is particularly concerned about the total cost of the project. When it comes to describing the system using allocation viewtypes she is interested in",
                "image": [],
                "options": [
                    "A deployment view.",
                    "A work assignment view.",
                    "A deployment and a work assignment view.",
                    "A install view."
                ]
            },
            {
                "questionId": "DVDCatalogMeta",
                "content": "Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n\t\n\t\\begin{quote}\n\t\tThe application should support other kinds of catalogs (CDs, games, books, ...). \n\t\\end{quote}\n\t\n\tThis requirement requires a change of",
                "image": [],
                "options": [
                    "The layered view to support a new specific layer for the customization of the catalog.",
                    "The layered view to accommodate a new layer for each kind of catalog, which other layers may use.",
                    "The data model view in order to define entities for each kind of catalog.",
                    "The data model view in order to define generic entities that can be customized for different kinds of catalogs."
                ]
            },
            {
                "questionId": "GraphiteClientServer",
                "content": "In Graphite system, in order to generate up-to-date graphs, the \\emph{WebApp} component interacts with the \\emph{Carbon} component. The interaction between these two components follows the architectural style",
                "image": [],
                "options": [
                    "Client-server.",
                    "Communicating Processes.",
                    "Repository.",
                    "Pipes-and-Filters."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2018/test-4/test-42-A.tex",
        "quizTitle": "..-data-2018-test-4-test-42-A",
        "questions": [
            {
                "questionId": "WorkAssignment",
                "content": "The Work-assignment is an architectural style of the allocation viewtype, where",
                "image": [],
                "options": [
                    "Components are allocated to persons and teams.",
                    "Modules are allocated to persons and teams.",
                    "Components and modules are allocated to persons and teams.",
                    "None of the above."
                ]
            },
            {
                "questionId": "DVDCatalogMobile",
                "content": "Consider the module viewtype views of the Catalog of DVD application. The architect knows about a new requirement \n\t\n\t\\begin{quote}\n\t\tTo support iPhone, iPad, Android versions with sync, which allows offline use of the application in the mobile device and data synchronization to occur when a connection is available\n\t\\end{quote}\n\t\n\tThis requirement requires a change of",
                "image": [],
                "options": [
                    "The decomposition view to include a module for the synchronization responsibilities.",
                    "The uses view to represent how the mobile device uses the Catalog application.",
                    "The layered view to include a layer for each type of device.",
                    "The domain layer of the layered style to represent the types of devices."
                ]
            },
            {
                "questionId": "GraphiteCommunicationProcesses",
                "content": "In Graphite system the \\emph{receiver} and the \\emph{writer threads} support asynchronous writing of metrics to optimize disk accesses. The interaction between these two components follow the architectural style",
                "image": [],
                "options": [
                    "Client-server.",
                    "Communicating Processes.",
                    "Repository.",
                    "Pipes-and-Filters."
                ]
            },
            {
                "questionId": "ChromeDynamicReconfiguration",
                "content": "In Chrome system, to show that it provides mobility qualities by managing the number of tab, it is necessary to use",
                "image": [],
                "options": [
                    "The communicating processes style.",
                    "The communicating processes style and the dynamic reconfiguration style.",
                    "The communicating processes style and the pipes-and-filters style.",
                    "The dynamic reconfiguration style."
                ]
            },
            {
                "questionId": "EventSourcing",
                "content": "Event Sourcing is a technique that use the following architectural style",
                "image": [],
                "options": [
                    "The communicating processes.",
                    "Pipes-and-filters.",
                    "Publish-subscribe.",
                    "Dynamic reconfiguration."
                ]
            }
        ]
    },
    {
        "quizFile": "/home/pedro/as-tutor/SQL/../data/2018/test-4/test-42-B.tex",
        "quizTitle": "..-data-2018-test-4-test-42-B",
        "questions": [
            {
                "questionId": "GraphiteCommunicationProcesses",
                "content": "In Graphite system the \\emph{receiver} and the \\emph{writer threads} support asynchronous writing of metrics to optimize disk accesses. The interaction between these two components follow the architectural style",
                "image": [],
                "options": [
                    "Client-server.",
                    "Communicating Processes.",
                    "Repository.",
                    "Pipes-and-Filters."
                ]
            },
            {
                "questionId": "ChromeDynamicReconfiguration",
                "content": "In Chrome system, to show that it provides mobility qualities by managing the number of tab, it is necessary to use",
                "image": [],
                "options": [
                    "The communicating processes style.",
                    "The communicating processes style and the dynamic reconfiguration style.",
                    "The communicating processes style and the pipes-and-filters style.",
                    "The dynamic reconfiguration style."
                ]
            },
            {
                "questionId": "EventSourcing",
                "content": "Event Sourcing is a technique that use the following architectural style",
                "image": [],
                "options": [
                    "The communicating processes.",
                    "Pipes-and-filters.",
                    "Publish-subscribe.",
                    "Dynamic reconfiguration."
                ]
            },
            {
                "questionId": "WorkAssignment",
                "content": "The Work-assignment is an architectural style of the allocation viewtype, where",
                "image": [],
                "options": [
                    "Components are allocated to persons and teams.",
                    "Modules are allocated to persons and teams.",
                    "Components and modules are allocated to persons and teams.",
                    "None of the above."
                ]
            },
            {
                "questionId": "DVDCatalogMobile",
                "content": "Consider the module viewtype views of the Catalog of DVD application. The architect knows about a new requirement \n\t\n\t\\begin{quote}\n\t\tTo support iPhone, iPad, Android versions with sync, which allows offline use of the application in the mobile device and data synchronization to occur when a connection is available\n\t\\end{quote}\n\t\n\tThis requirement requires a change of",
                "image": [],
                "options": [
                    "The decomposition view to include a module for the synchronization responsibilities.",
                    "The uses view to represent how the mobile device uses the Catalog application.",
                    "The layered view to include a layer for each type of device.",
                    "The domain layer of the layered style to represent the types of devices."
                ]
            }
        ]
    }
]