--
-- PostgreSQL database dump
--

-- Dumped from database version 10.8 (Ubuntu 10.8-0ubuntu0.18.04.1)
-- Dumped by pg_dump version 10.8 (Ubuntu 10.8-0ubuntu0.18.04.1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET xmloption = content;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: answers; Type: TABLE; Schema: public; Owner: pedro
--

CREATE TABLE public.answers (
 student_id integer NOT NULL,
 question_id integer NOT NULL,
 quiz_id integer NOT NULL,
 answer_date timestamp without time zone,
 time_taken timestamp without time zone,
 option integer
);


ALTER TABLE public.answers OWNER TO pedro;

--
-- Name: images; Type: TABLE; Schema: public; Owner: pedro
--

CREATE TABLE public.images (
 question_id integer NOT NULL,
 url character varying(255),
 width integer
);


ALTER TABLE public.images OWNER TO pedro;

--
-- Name: options; Type: TABLE; Schema: public; Owner: pedro
--

CREATE TABLE public.options (
 question_id integer NOT NULL,
 option integer NOT NULL,
 content text,
 correct boolean DEFAULT false
);


ALTER TABLE public.options OWNER TO pedro;

--
-- Name: question_has_topic; Type: TABLE; Schema: public; Owner: pedro
--

CREATE TABLE public.question_has_topic (
 topic_id integer NOT NULL,
 question_id integer NOT NULL,
 votes integer,
 score integer
);


ALTER TABLE public.question_has_topic OWNER TO pedro;

--
-- Name: questions; Type: TABLE; Schema: public; Owner: pedro
--

CREATE TABLE public.questions (
 id integer NOT NULL,
 name character varying(255),
 new_id integer,
 content text,
 difficulty integer,
 active boolean DEFAULT true
);


ALTER TABLE public.questions OWNER TO pedro;

--
-- Name: questions_id_seq; Type: SEQUENCE; Schema: public; Owner: pedro
--

CREATE SEQUENCE public.questions_id_seq
 AS integer
 START WITH 1
 INCREMENT BY 1
 NO MINVALUE
 NO MAXVALUE
 CACHE 1;


ALTER TABLE public.questions_id_seq OWNER TO pedro;

--
-- Name: questions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: pedro
--

ALTER SEQUENCE public.questions_id_seq OWNED BY public.questions.id;


--
-- Name: quiz_has_question; Type: TABLE; Schema: public; Owner: pedro
--

CREATE TABLE public.quiz_has_question (
 quiz_id integer NOT NULL,
 question_id integer NOT NULL
);


ALTER TABLE public.quiz_has_question OWNER TO pedro;

--
-- Name: quizzes; Type: TABLE; Schema: public; Owner: pedro
--

CREATE TABLE public.quizzes (
 id integer NOT NULL,
 title character varying(255),
 year integer,
 type character varying(255),
 series integer,
 version character varying(5)
);


ALTER TABLE public.quizzes OWNER TO pedro;

--
-- Name: quizzes_id_seq; Type: SEQUENCE; Schema: public; Owner: pedro
--

CREATE SEQUENCE public.quizzes_id_seq
 AS integer
 START WITH 1
 INCREMENT BY 1
 NO MINVALUE
 NO MAXVALUE
 CACHE 1;


ALTER TABLE public.quizzes_id_seq OWNER TO pedro;

--
-- Name: quizzes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: pedro
--

ALTER SEQUENCE public.quizzes_id_seq OWNED BY public.quizzes.id;


--
-- Name: students; Type: TABLE; Schema: public; Owner: pedro
--

CREATE TABLE public.students (
 id integer NOT NULL,
 name character varying(255),
 type character varying(255),
 year integer
);


ALTER TABLE public.students OWNER TO pedro;

--
-- Name: students_id_seq; Type: SEQUENCE; Schema: public; Owner: pedro
--

CREATE SEQUENCE public.students_id_seq
 AS integer
 START WITH 1
 INCREMENT BY 1
 NO MINVALUE
 NO MAXVALUE
 CACHE 1;


ALTER TABLE public.students_id_seq OWNER TO pedro;

--
-- Name: students_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: pedro
--

ALTER SEQUENCE public.students_id_seq OWNED BY public.students.id;


--
-- Name: topics; Type: TABLE; Schema: public; Owner: pedro
--

CREATE TABLE public.topics (
 id integer NOT NULL,
 name character varying(255)
);


ALTER TABLE public.topics OWNER TO pedro;

--
-- Name: topics_id_seq; Type: SEQUENCE; Schema: public; Owner: pedro
--

CREATE SEQUENCE public.topics_id_seq
 AS integer
 START WITH 1
 INCREMENT BY 1
 NO MINVALUE
 NO MAXVALUE
 CACHE 1;


ALTER TABLE public.topics_id_seq OWNER TO pedro;

--
-- Name: topics_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: pedro
--

ALTER SEQUENCE public.topics_id_seq OWNED BY public.topics.id;


--
-- Name: questions id; Type: DEFAULT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.questions ALTER COLUMN id SET DEFAULT nextval('public.questions_id_seq'::regclass);


--
-- Name: quizzes id; Type: DEFAULT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.quizzes ALTER COLUMN id SET DEFAULT nextval('public.quizzes_id_seq'::regclass);


--
-- Name: students id; Type: DEFAULT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.students ALTER COLUMN id SET DEFAULT nextval('public.students_id_seq'::regclass);


--
-- Name: topics id; Type: DEFAULT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.topics ALTER COLUMN id SET DEFAULT nextval('public.topics_id_seq'::regclass);


--
-- Data for Name: answers; Type: TABLE DATA; Schema: public; Owner: pedro
--

COPY public.answers (student_id, question_id, quiz_id, answer_date, time_taken, option) FROM stdin;
\.


--
-- Data for Name: images; Type: TABLE DATA; Schema: public; Owner: pedro
--

COPY public.images (question_id, url, width) FROM stdin;
201	201.png	100
214	214.png	100
262	262.png	70
268	268.png	120
293	293.png	120
299	299.png	70
383	383.png	100
388	388.png	120
395	395.png	100
398	398.png	100
402	402.png	80
404	404.png	80
407	407.png	100
409	409.png	80
412	412.png	80
414	414.png	80
417	417.png	100
419	419.png	80
422	422.png	80
426	426.png	80
429	429.png	150
443	443.png	100
446	446.png	100
454	454.png	100
462	462.png	150
470	470.png	100
476	476.png	80
480	480.png	80
484	484.png	120
490	490.png	100
507	507.png	140
517	517.png	140
525	525.png	120
537	537.png	100
543	543.png	100
550	550.png	100
553	553.png	100
558	558.png	100
563	563.png	100
566	566.png	100
624	624.png	100
626	626.png	100
634	634.png	100
635	635.png	80
636	636.png	100
639	639.png	80
641	641.png	100
644	644.png	80
647	647.png	100
650	650.png	80
651	651.png	80
655	655.png	80
657	657.png	80
658	658.png	80
676	676.png	120
689	689.png	140
690	690.png	70
705	705.png	120
712	712.png	140
713	713.png	70
736	736.png	120
749	749.png	140
750	750.png	80
771	771.png	120
778	778.png	140
779	779.png	80
784	784.png	120
785	785.png	100
786	786.png	100
790	790.png	120
794	794.png	130
800	800.png	130
824	824.png	120
830	830.png	120
835	835.png	105
839	839.png	105
845	845.png	120
846	846.png	120
855	855.png	140
856	856.png	140
868	868.png	120
871	871.png	100
872	872.png	120
884	884.png	120
894	894.png	100
895	895.png	120
905	905.png	120
908	908.png	120
912	912.png	60
915	915.png	120
916	916.png	120
919	919.png	120
921	921.png	120
929	929.png	120
931	931.png	60
934	934.png	120
936	936.png	120
940	940.png	120
941	941.png	100
944	944.png	100
949	949.png	100
950	950.png	100
953	953.png	100
954	954.png	100
956	956.png	100
959	959.png	100
961	961.png	100
964	964.png	100
966	966.png	100
967	967.png	100
1002	1002.png	95
1003	1003.png	95
1006	1006.png	95
1010	1010.png	95
1012	1012.png	95
1013	1013.png	95
1016	1016.png	95
1019	1019.png	95
1022	1022.png	95
1023	1023.png	95
1026	1026.png	95
1028	1028.png	95
1032	1032.png	100
1033	1033.png	120
1036	1036.png	120
1039	1039.png	100
1042	1042.png	120
1043	1043.png	120
1046	1046.png	120
1050	1050.png	120
1052	1052.png	60
1053	1053.png	120
1058	1058.png	60
1059	1059.png	120
\.


--
-- Data for Name: options; Type: TABLE DATA; Schema: public; Owner: pedro
--

COPY public.options (question_id, option, content, correct) FROM stdin;
1	0	It makes no sense to use views of the module viewtype, as they give only a static view of the system	f
1	1	You should use only views of the component-and-connector viewtype, which describe the dynamic aspects of the system	f
1	2	You may need to use views of the three viewtypes	f
1	3	The only views that are relevant to performance requirements are views of the Deployment style	f
2	0	Influence the software development process and its management, but not the software architecture of the system under development	f
2	1	Should be captured in scenarios, as the requirements for quality attributes, and be taken into account in the design of the software architecture	f
2	2	Are important to determine the feasibility of the system, but once we reach the conclusion that the system can be developed with these restrictions, software architecture no longer depends on these factors	f
2	3	Are not one of the influences of the software architecture in the Architecture Business Cycle	f
3	0	The *decomposition* and *uses* styles, which allow us to show how dependent a certain module is of other parts of the system	f
3	1	The *implementation* style, which allows us to know where are the artifacts that implement a certain module	f
3	2	The *layers* style, which allows us to show that the structure of our system is composed of various modules that may be easily reused in other systems	f
3	3	The *client-server* and *deployment* styles, which allow us to isolate the required functionality in a component that executes autonomously and, thus, reusable in other systems	f
4	0	To keep the current architecture of the system and optimize the code to achieve the currently required performance levels	f
4	1	To change the Deployment view, replicating the server component by more machines	f
4	2	To review the system's architecture so that part of the computation that is currently done at the server shifts to the clients	f
4	3	To replace the machine used to run the server component by a more powerful machine that meets the new performance requirements, keeping only a server component running	f
5	0	Those three viewtypes complement each other, but they are completely independent, showing different aspects that have no relation among them	f
5	1	The module and component-and-connector viewtypes are independent of one another, but the allocation viewtype depends on the first two	f
5	2	Each viewtype uses different software elements, such as modules or components, so it does not make sense to talk about relationships among these viewtypes	f
5	3	Even though each viewtype addresses different aspects of a system, there are relationships among all of them	f
6	0	Layer 1	f
6	1	Layer 4	f
6	2	In a layered architecture all layers are equally modifiable	f
6	3	Modifiability is not made easier by a layered architecture	f
7	0	Is useful only if done (even if only partially) before the system's implementation is concluded, given that the architecture is used for restricting the implementation	f
7	1	Is useful only if done (even if only partially) before the system's implementation is concluded, because if the system is already implemented, its implementation uniquely determines the architecture	f
7	2	Is useful only if done (even if only partially) before the system passes all of the acceptance tests by the client, given that no more requirements changes will take place after that time	f
7	3	Is useful even if the implementation is concluded and the system has entered the maintenance phase	f
8	0	A subset of the requirements that do not have conflicts among them and that correspond to the most important business goals	f
8	1	A subset of the requirements that have many conflicts among them and for which you need to find tradeoffs early in the design process	f
8	2	A subset of the requirements that correspond to the most important business goals, regardless of whether they have conflicts among them or not	f
8	3	A subset of the requirements that is chosen exclusively by the architect by taking into account their influence on the system's architecture	f
9	0	The *Peer-to-Peer* style	f
9	1	The *Shared data* style	f
9	2	The *Client-Server* style	f
9	3	The *Publish-subscribe* style	f
10	0	The *Communicating Processes* style	f
10	1	The *Pipes-and-filters* style	f
10	2	The *Peer-to-Peer* style	f
10	3	The *Shared data* style	f
11	0	Given that the change is on execution aspects, the change manifests itself only through the modification of components and connectors on the system	f
11	1	This change in the way of how web applications run does not correspond to any change in its architecture, because at the architectural level we still have the same components	f
11	2	The only architectural change is on the Deployment view, because the components and connectors remain the same, but execute in different places	f
11	3	This change manifests itself on the relationship between the system's modules and components	f
12	0	The *Communicating Processes* style	f
12	1	The *Uses* style	f
12	2	The *Layers* style	f
12	3	The *Peer-to-Peer* style	f
13	0	*Decomposition* and *Layers* views	f
13	1	*Decomposition* and *Work assignment* views	f
13	2	*Decomposition* and *Implementation* views	f
13	3	*Decomposition* and *Generalization* views	f
14	0	*Decomposition* and *Implementation* views	f
14	1	*Decomposition* and *Uses* views	f
14	2	*Component-and-connector* views	f
14	3	 None, given that to perform black-box testing you do not need to know the code or the internal structure of the application to be tested	f
15	0	The *Shared data* style	f
15	1	The *Repository* style	f
15	2	The *Layers* style	f
15	3	The *Client-Server* style	f
16	0	The *Decompostion* and *Implementation* styles	f
16	1	The *Deployment* and *Uses* styles	f
16	2	The *Client-Server* and *Generalization* styles	f
16	3	the *Deployment* and *Layers* styles	f
17	0	Views of the Component-and-Connector viewtype	f
17	1	Views of the Module viewtype	f
17	2	Views of the Allocation viewtype	f
17	3	All of the above	f
18	0	To control and to reduce the interface exposed by the domain logic layer, thereby increasing the modifiability of that layer	f
18	1	To allow the existence of more than one layer of presentation logic for the same application (to provide for example, an interface to web services)	f
18	2	To expose different interfaces of the domain logic layer so that it allows the implementation of different layers for the presentation logic	f
18	3	To facilitate the use of the data access layer by the presentation logic layer	f
19	0	To implement each of the services that are executed whenever the client makes a request to the server	f
19	1	To improve the server performance by maintaining a cache of the objects most accessed during the processing of a client request	f
19	2	To split the computation required to process each request made by the client in smaller units of work that are parallelizable	f
19	3	To keep a record of changes made to the data during a business transaction and to coordinate the writing of these changes to the database	f
20	0	To improve the performance of the application server because it maintains a cache of entities that reduces the number of operations made on the database	f
20	1	To avoid loading a lot of data from the database when an entity that has many relationships with other entities is loaded	f
20	2	To prevent data inconsistencies when there are multiple accesses within the same business operation to the same entity	f
20	3	To map each entity loaded by the server to the identity of that entity in the database, so that the server is able to update the database later, if needed	f
21	0	Stakeholders requirements do not emphasize performance as the most important issue	f
21	1	The Hadoop small development team is highly competent and skilled	f
21	2	Stakeholders do not mind if two simultaneous reads on the same file by two different applications may return different values	f
21	3	The Hadoop system implementation uses complex distributed algorithms for scalability	f
22	0	There is a conflict between availability and performance qualities	f
22	1	The availability quality is more important, thus performance is addressed afterwards and depends on the tactics used for availability	f
22	2	There is no conflict between availability and performance qualities	f
22	3	Availability and performance qualities are ensured at deployment time only	f
23	0	Active replication and passive replication	f
23	1	Active replication, passive replication, and spare	f
23	2	Passive replication and spare	f
23	3	Quorum, active replication, and passive replication	f
24	0	Shadow operation	f
24	1	State Resynchronization	f
24	2	Checkpoint/Rollback	f
24	3	All of the above	f
25	0	Authenticate users and authorize users	f
25	1	Authenticate users, authorize users, and limit exposure	f
25	2	Authenticate users, authorize users, and limit access	f
25	3	Authenticate users, authorize users, limit access, and maintain integrity	f
26	0	Because this tactic does not overload the NameNode	f
26	1	But they could have used the ping tactic instead, because it has the same overhead for the NameNode	f
26	2	But the exceptions tactic could have been used as well	f
26	3	To inform other DataNodes about their availability	f
27	0	Because it has a well-defined interface	f
27	1	That aggregates modules according to the uses relationship	f
27	2	Because it has a well-defined interface and hides the internal behaviour	f
27	3	That provides a set of complete and cohesive services	f
28	0	Because it is a natural extension of the use cases concept	f
28	1	But it requires additional information on the modules internal structure	f
28	2	But it needs to be complemented, for each uses relationship, with the level of coupling	f
28	3	And contains all the information required to assess effectively the impact	f
29	0	The call's results may not have impact on the correct execution of the caller module	f
29	1	The call's results may not have impact on the correct execution of the callee module	f
29	2	The call may not transfer data between the modules	f
29	3	The uses relationship requires calls to return control to the caller module	f
30	0	We should always satisfy in the first place the requirements of more important stakeholders (such as the client)	f
30	1	If no order was established among them, we would not know from where should we start the design process	f
30	2	If one of the stakeholders complains that his requirement is not satisfied, we may explain to him that there were other more important requirements first	f
30	3	When it is not possible to satisfy all of the requirements optimally, we should be aware of their relative importance so that we may find a solution that corresponds to a satisfactory trade-off	f
31	0	The Shared data style	f
31	1	The Pipes-and-filters style	f
31	2	The Peer-to-Peer style	f
31	3	The Client-Server style	f
32	0	A Client-Server architecture, where the DataNode is the Client and the NameNode is the Server	f
32	1	A Client-Server architecture, where the NameNode is the Client and the DataNode is the Server	f
32	2	A Peer-to-Peer architecture	f
32	3	A Communicating Processes architecture	f
33	0	That view will always be incomplete without the NameNode, because the HDFS Client needs to interact with it	f
33	1	That view will always be incomplete without the NameNode, because the DataNode needs to interact with it	f
33	2	The view does not need to include the NameNode, but in that case it will not be possible to reason about the availability of the system	f
33	3	The availability guarantee may be given by the usage of an adequate connector between the HDFS Client and the DataNodes	f
34	0	The Shared Data style	f
34	1	The Communicating Processes style	f
34	2	The Deployment style	f
34	3	The Peer-to-Peer style	f
35	0	The system would respond faster to all of the clients' requests	f
35	1	The performance of the system would not change	f
35	2	The system would respond faster to requests about file locations	f
35	3	The system would respond faster to requests made by DataNodes to update the metadata	f
36	0	To control and to reduce the interface exposed by the domain logic layer, thereby increasing the modifiability of that layer	f
36	1	To allow the existence of more than one interface to the domain logic layer (to provide, for example, an interface to web services)	f
36	2	To allow the existence of different presentation logic layers	f
36	3	To facilitate the use of the data access layer by the presentation logic layer	f
37	0	That should not be allowed because all interactions among components must be made through the Repository	f
37	1	That is an acceptable solution if we want to reduce the dependencies among the various components of the system	f
37	2	That is the recommended solution if there is a control flow that involves the choreography of both components	f
37	3	That interaction cannot be represented in this view, but it may in another view of the system's architecture	f
38	0	Work Assignment views	f
38	1	Generalization views	f
38	2	Deployment views	f
38	3	Implementation views	f
39	0	The presentation logic layer, domain logic layer, and data access layer	f
39	1	The traditional web applications, the mashups, and the rich internet applications (RIAs)	f
39	2	The web browser, o web server, and the data base	f
39	3	The web services layer, the domain logic layer, and the data access layer	f
40	0	The Work Assignment style	f
40	1	The Client-Server style	f
40	2	The Deployment style	f
40	3	The Communicating Processes style	f
41	0	Essential to ensure the system scalability	f
41	1	Essential to reduce costs whenever there is a fault in a hardware element	f
41	2	Essential to ensure the system portability	f
41	3	Essential to facilitate the integration with legacy systems	f
42	0	Allows the creation of checkpoints but it is necessary to request all the information from the *NameNode* whenever a new checkpoint creation begins	f
42	1	Does not allow the creation of checkpoints	f
42	2	Allows the creation of checkpoints using the information that it gradually receives from the *NameNode*	f
42	3	Allows the creation of checkpoints without requiring any kind of information from the *NameNode*	f
43	0	Performance and availability qualities	f
43	1	Performance qualities only	f
43	2	Availability qualities only	f
43	3	Performance and security qualities	f
44	0	Increases the system modifiability whenever it is necessary to change the placement policy	f
44	1	Allows *DataNodes* to decide which replicas they have	f
44	2	Increases the system modifiability whenever it is necessary to change the the deployment structure	f
44	3	Allow several replicas to be located in different *DataNodes*	f
45	0	Because this tactic does not overload the *NameNode*	f
45	1	But it would imply an *overhead* in the *NameNode*	f
45	2	But an exceptions tactic could be used as well	f
45	3	To notify other *DataNodes* that they are available	f
46	0	This script is part of the system deployment module	f
46	1	This script is a module that implements a security tactic	f
46	2	This script is a module that implements a modifiability tactic	f
46	3	This script cannot be considered a module because it is only a script	f
47	0	Availability, security, and performance	f
47	1	Availability only	f
47	2	Availability and performance	f
47	3	Availability and security	f
48	0	Only views of the component-and-connector viewtype are needed	f
48	1	All viewtypes may be necessary	f
48	2	Only views of the component-and-connector viewtype and allocation viewtype are needed	f
48	3	Views of the module viewtype are not needed	f
49	0	Means that it may be difficult to design incremental testing	f
49	1	Means that it is possible to implement the system according to an incremental development process	f
49	2	Means that the modules that are part of the loop should be implemented first	f
49	3	Gives a hint to replace the uses relations by is-a relations	f
50	0	Is that the *Allowed to Use* relation defines a restriction for the possible *Uses* relations between modules belonging to different layers	f
50	1	Is that the *Uses* relation can happen only among modules belonging to the same layer	f
50	2	Is that the *Allowed to Use* relation does not imply that the correctness of the upper layer depends on the correct implementation of its nearest lower layer	f
50	3	Is that the *Allowed to Use* relation is a *Uses* relation between layers	f
51	0	It does not make sense to use an architectural view for this, because this is an implementation detail that does affect the system's qualities	f
51	1	Using a view of the module viewtype that shows the interfaces available for the client to do the write	f
51	2	Using a view of the component-and-connector viewtype	f
89	2	The Shared-Data style	f
51	3	Using a view of the architectural style Deployment	f
52	0	We must use various different views, both of the component-and-connector and the allocation viewtypes	f
52	1	We just have to show, through component-and-connector views, that the system maintains replicas of the data in different components	f
52	2	We just have to show, through Deployment views, that the *DataNode* component executes in more than one machine of the cluster	f
52	3	We just have to show, through Decomposition views, that there are modules responsible for the replication of file blocks	f
53	0	The Shared data style	f
53	1	The Pipes-and-filters style	f
53	2	The Peer-to-Peer style	f
53	3	The Communicating Processes style	f
54	0	The component-and-connector view must, necessarily, be changed to include the components *NameNode* and *DataNode*, with which the web application has to interact to access its data	f
54	1	The layered view of the web application will have to include a new layer corresponding to the Hadoop MapReduce framework	f
54	2	The application continues to have a three-tiered architecture, where one of the tiers is now the HDFS system	f
54	3	The Deployment view must be changed to include the racks needed to run the HDFS system	f
55	0	The Pipes-and-filters style	f
55	1	The Publish-Subscribe style	f
55	2	The Peer-to-Peer style	f
55	3	The Client Server style	f
56	0	Affects only the domain logic layer	f
56	1	May affect the data access layer because each pattern puts different requirements on the interface of that layer	f
56	2	Does not affect the presentation logic layer because it cannot use it	f
56	3	Does not affect the data access layer because the data access layer does not use the domain logic layer	f
57	0	A machine may execute only one component, but a component may execute in more than one machine	f
57	1	A component may execute in only one machine, but a machine may execute more than one component	f
57	2	Each component executes in only one machine and each machine executes only one component	f
57	3	All components may execute in all machines	f
58	0	In the Deployment view, because the presentation component is now executing in a different place	f
58	1	In the component-and-connector view, because the connector between the web client and the web server has to change	f
58	2	In the Layer view, because the order of the layers will have to change	f
58	3	In the mapping between layers of the system and the components where they execute	f
59	0	A *web services* architecture	f
59	1	A Client-Server architecture, where the *mashup* is the client and the various sources are the servers	f
59	2	A layered architecture, where the access to the various sources is the responsibility of the bottommost layer	f
59	3	A Publish-Subscribe architecture, where the various sources publish events with the changes made and the *mashup* subscribes those events	f
60	0	Only views of the component-and-connector viewtype are needed	f
60	1	Only views of the Deployment style are needed	f
60	2	We may need views of the component-and-connector viewtype and of the Deployment style	f
60	3	We always need views of the component-and-connector viewtype and of the Deployment style	f
61	0	The UK government, because it funded the project	f
61	1	The researchers, because they invented the Haskell programming language	f
61	2	The UK government, because it intended that the system could be used to develop the British software industry	f
61	3	The researchers, because they wanted to use the system to validate their research	f
62	0	As modules of the system	f
62	1	As components of the system	f
62	2	The compiler and the RTS as components and the boot libraries as a module	f
62	3	The compiler as a component and the other two as modules	f
63	0	Made the type-checking much simpler	f
63	1	Satisfied performance requirements of the system	f
63	2	Made the desugaring simpler	f
63	3	Satisfied usability requirements of the system	f
64	0	The performance of the compiler, because the RTS is written as very efficient C code	f
64	1	The performance of the compiled programs, because the RTS is written as very efficient C code	f
64	2	The portability, because the RTS creates an abstraction layer that hides some of the details of the operating system	f
64	3	The modifiability of the compiled programs, because we may change their behavior by changing only the RTS	f
65	0	To allow the parallel execution of the several compilation phases, thereby improving the compiler performance	f
65	1	To allow the compilation of very large programs, because wach phase may execute incrementally without loading the entire program into memory at once	f
65	2	To facilitate changing the phases used in the compilation process, thereby making the compiler more modifiable	f
65	3	All other options	f
66	0	It is a system with a Peer-to-Peer architecture	f
66	1	It is a system with a Client-Server architecture	f
66	2	It allows the development of systems with a Peer-to-Peer architecture	f
66	3	It allows the development of systems with Peer-to-Peer, Client-Server, or Publish-Subscribe architectures	f
67	0	The Tiers style	f
67	1	The Communicating Processes style	f
67	2	The Deployment style	f
67	3	The Work Assignment style	f
68	0	Increases the portability of the system for other operating systems	f
68	1	Facilitates the addition of new messaging patterns	f
68	2	Makes the system more scalable	f
68	3	Facilitates the reuse of the messaging patterns	f
69	0	To reduce the latency of sending a message when the system is overloaded	f
69	1	To increase the throughput of the system when it is overloaded	f
69	2	To reduce the amount of memory needed to send a large number of messages	f
69	3	To reduce the CPU usage when the system has just a few messages to send	f
70	0	The Pipe-and-Filter style	f
70	1	The Shared data style	f
70	2	The Communicating Processes style	f
70	3	The Client-Server style	f
71	0	To have better throughput than Apache	f
71	1	To have a lower latency in the processing of a request than Apache	f
71	2	To be more modifiable than Apache	f
71	3	To allow more simultaneous connections than Apache	f
72	0	The code is easier to develop because it is not concurrent	f
72	1	They wanted to have a more efficient use of the computational resources	f
72	2	Event-driven programs are easier to change	f
72	3	In an event-driven system each component may function independently of the others	f
73	0	The Generalization style	f
73	1	The Uses style	f
73	2	The Layers style	f
73	3	The Aspects style	f
74	0	To make the system more modifiable	f
74	1	To make the system more portable to different operating systems	f
74	2	To make the system faster	f
74	3	To make the system more fault tolerant	f
75	0	The Shared-data style	f
75	1	The Communicating Processes style	f
75	2	The Peer-to-Peer style	f
75	3	The Client-Server style	f
76	0	Increases the availability	f
76	1	Increases the capacity	f
76	2	Increases the capacity but decreases the availability	f
76	3	Increases both the availability and the capacity	f
77	0	Only in the Deployment view, because only the number of machines storing images was changed	f
77	1	In the Uses view, because each *Image Write/Retrieval Service* is going to use a different *Image File Storage*	f
77	2	In the Component-and-Connector view, because components and connectors need to be changed	f
77	3	In the Decomposition view, because we need more modules to represent the split of images by different elements of the architecture	f
78	0	Increasing the performance of the *Upload* operation	f
78	1	Increasing the performance of the *Retrieval* operation	f
78	2	Increasing the scalability of the system	f
78	3	Increasing the fault tolerance of the system	f
79	0	We now have four layers, where each layer is executed in the corresponding tier, as before	f
79	1	Each one of the two middle tiers executes the previously existing three layers, and no change is needed on the layers view	f
79	2	There is no relation between the tiers and the layers, so the layers architecture is not changed	f
79	3	The execution of the previously existing layers is split between the two new tiers, and new intermediate layers may be needed	f
80	0	With a component-and-connector view, where the *load balancer* is a component of the system	f
80	1	With a Deployment view, where the *load balancer* is part of the communication infra-structure used to execute the system	f
80	2	With a Uses view, representing the existing dependencies between the *load balancer* and the services that it uses	f
80	3	With a Layers view, where the *load balancer* creates an abstraction layer between who makes the request and who provides the service	f
81	0	The domain logic layer was implemented with the Domain Model pattern	f
81	1	The domain logic layer was implemented with the Transaction Script pattern	f
81	2	The domain logic layer was implemented with the Service Layer pattern	f
81	3	The domain logic layer was implemented with a rich domain model, on top of which there was a thin service layer	f
82	0	The Decomposition style	f
82	1	The Generalization style	f
82	2	The Uses style	f
82	3	The SOA style	f
83	0	Have high throughput	f
83	1	Have low latency	f
83	2	Allow many simultaneous users	f
83	3	May be easily changed to increase their performance	f
84	0	To facilitate the interaction among heterogeneous components that use distinct communication protocols	f
84	1	To promote the use of a common communication protocol for all the remaining components of the system	f
84	2	To increase the performance of the interaction between the components of the system	f
84	3	To create a strong coupling between the various services provided by the organization	f
85	0	The Ping/Echo tactic	f
85	1	The Heartbeat tactic	f
85	2	The Voting tactic	f
85	3	The Removal from Service tactic	f
86	0	The Communicating Processes style	f
86	1	The Client-Server style	f
86	2	Any style of the component-and-connector viewtype	f
86	3	The Decomposition style	f
87	0	In the Deployment view	f
87	1	In the Decomposition view	f
87	2	In a view of the component-and-connector type	f
87	3	In the Aspects view	f
88	0	To create an abstraction layer between the architecture of the system and its functionalities, so that the architecture may be changed later without affecting the functionalities	f
88	1	To create an artifact that may be used to explain the system's software architecture to the various stakeholders	f
88	2	To allow testing and validating the software architecture in the early development stages	f
88	3	To facilitate the work assignment to the members of the development team that will implement the system's functionalities	f
89	0	The Peer-to-Peer style	f
89	1	The Client-Server style	f
89	3	The Publish-subscribe style	f
90	0	Does not change the existing modules of the system, because they are determined by the system's Decomposition, which is not changed	f
90	1	Adds restrictions to the dependency relationships that exist between modules and that are represented using other styles, as with the layers style	f
90	2	Typically gives rise to more modules than what we would have if not using this style	f
90	3	Introduces only a new type of relation among the existing modules of the system, which resulted from other styles of the module viewtype	f
91	0	To process all of the requests to send messages with a single thread, to free the remaining cores for the user threads	f
91	1	To launch a worker thread for each user thread to guarantee that each user thread may send messages independently of what the others are doing	f
91	2	To launch a worker thread for each core, to maximize the core usage and to minimize the need for synchronization among threads	f
91	3	To launch a worker thread to process the sending of a new message, to guarantee maximal parallelism in message sending	f
92	0	Only module views	f
92	1	Only component-and-connector views	f
92	2	Only allocation views	f
92	3	Module and component-and-connector views	f
93	0	It is less robust, because a fault in the *broker* causes a failure in the system	f
93	1	It is less modifiable, because all components depend on the *broker*	f
93	2	It has less performance, because the *broker* introduces greater latency in the communication	f
93	3	It is more expensive, because it forces the existence of additional hardware to execute the *broker*	f
94	0	Views of the Generalization style	f
94	1	Views of the Layers style	f
94	2	Views of the Decomposition style	f
94	3	Views of the Uses style	f
95	0	Usability	f
95	1	Modifiability	f
95	2	Performance	f
95	3	Security	f
96	0	The Publish-Subscribe style	f
96	1	The Client-Server style	f
96	2	The Peer-to-Peer style	f
96	3	The Communicating Processes style	f
97	0	The Layers style	f
97	1	The Uses style	f
97	2	The Shared data style	f
97	3	The Communicating Processes style	f
98	0	A new *worker* is created whenever a new connection is established with the server, and that *worker* processes all of the requests for that connection, being destroyed at the end of the connection	f
98	1	There is a *pool* of *workers* that are reused between connections, but each *worker* processes only requests of a connection at a time	f
98	2	Each *worker* is responsible for various connections, processing all requests from those connections	f
98	3	Each *worker* processes requests that it obtains from a *pool of requests* that is shared among all workers	f
99	0	By interleaving the various processing phases of each request in a sequential process	f
99	1	By executing in parallel each of the phases of the pipeline corresponding to the processing of a request	f
99	2	By executing in parallel the processing of the various requests	f
99	3	By processing completely each request before moving to the next one, in a sequential process	f
100	0	Have a throughput higher than Apache	f
100	1	Be able to process each request faster than Apache	f
100	2	Be able to launch more simultaneous threads than Apache	f
100	3	Be able to reduce the amount of memory needed for each connection	f
101	0	The *Decomposition* style	f
101	1	The *Client-Server* style	f
101	2	The *Layers* style	f
101	3	The *Communicating Processes* style	f
102	0	To increase the performance of RTS	f
102	1	To allow changing the GC algorithm without affecting the rest of the system	f
102	2	To increase the performance of the programs compiled by the GHC	f
102	3	To make the RTS more portable to other operating systems	f
103	0	It does not manifest, as it corresponds only to an extension to the Haskell language that must be processed by the compiler	f
103	1	In the existence of a compiler component that is responsible for interpreting and applying the rewrite rules during the compilation of a program	f
103	2	In a view of the Generalization style that includes a module defining an abstract interface that all *rewrite rules* must implement and of which all modules with the *rewrite rules* are specializations	f
103	3	In a view of the Pipes-and-Filters style, corresponding to the process of compiling an Haskell program, to which is added a new filter whenever a new *rewrite rule* is defined	f
104	0	A diagram of the component-and-connector viewtype	f
104	1	A diagram of the module viewtype	f
104	2	A diagram of the deployment style	f
104	3	A diagram of the implementation style	f
105	0	A diagram of the component-and-connector viewtype, showing the data flow between the various compiler components	f
105	1	A diagram of the module viewtype, showing a decomposition of the compiler in the various modules that are responsible by each of the compilation process steps	f
105	2	A diagram of the module viewtype, showing which modules use other modules	f
105	3	A layered diagram, where there is a layer responsible for the code generation	f
106	0	They are both modules	f
106	1	They are both components	f
106	2	The *Request Node* is a component and the *Cache* is a module	f
106	3	The *Request Node* is a module and the *Cache* is a component	f
107	0	Increasing performance and availability	f
107	1	Increasing availability and decreasing performance	f
107	2	Increasing performance and decreasing availability	f
107	3	Increasing scalability and availability	f
108	0	The Shared-Data style	f
108	1	The Client-Server style	f
108	2	The Peer-to-Peer style	f
108	3	The Communicating Processes style	f
109	0	The performance decreases	f
109	1	The availability of the system's data decreases	f
109	2	The availability of the system's services decreases	f
109	3	The system is not affected in any way	f
110	0	A view of the Data Model style	f
110	1	A view of the Layers style	f
110	2	A view of the Decomposition style	f
110	3	A view of the Uses style	f
111	0	To start using the Transaction Script pattern in the domain logic layer	f
111	1	To start using the Service Layer pattern in a new layer	f
111	2	To move from an anemic domain model to a rich domain model	f
111	3	To eliminate the service layer	f
112	0	Views of the Module viewtype	f
112	1	Views of the Component-and-Connector viewtype	f
112	2	Views of the Allocation viewtype	f
112	3	Views of the Component-and-Connector and Allocation viewtypes	f
113	0	The Decomposition and the Work Assignment styles	f
113	1	The Decomposition and the Layers styles	f
113	2	The Decomposition and the Uses styles	f
113	3	The Decomposition and the SOA styles	f
114	0	It imposes restrictions on which uses relationships may exist between the system's modules	f
114	1	It makes it easier to create generalization relationships between the system's modules	f
114	2	It separates in new modules responsibilities that were spread over various of the system's modules	f
114	3	It allows the decomposition of each of the system's modules into finer grained modules	f
115	0	The Decomposition style	f
115	1	The Client-Server style	f
115	2	The Service Oriented Architecture style	f
115	3	The Communicating Processes style	f
116	0	The Peer-to-Peer style	f
116	1	The Client-Server style	f
116	2	The Shared-Data style	f
116	3	The Publish-subscribe style	f
117	0	Only in the Deployment view	f
117	1	Only in the Decomposition view	f
117	2	Only in a component-and-connector view	f
117	3	Both in a component-and-connector and the Deployment views	f
118	0	By using HTTPS in the communication between the browser and the web server	f
118	1	By using robust authentication mechanisms to identify the users of the system with confidence	f
118	2	By encrypting the information in the database with a password that is known only by the web server	f
118	3	None of the other options solves the problem	f
119	0	The presentation logic layer and how it relates with the underlying layer changed	f
119	1	The connector used to represent the interaction between the browser and the web server changed	f
119	2	The browser is now a component of a different type	f
119	3	That evolution did not have any consequences on the software architecture of a web application	f
120	0	A component	f
120	1	A grouping of components	f
120	2	A module	f
120	3	A layer	f
121	0	Client-server	f
121	1	Communicating Processes	f
121	2	Repository	f
121	3	Pipes-and-Filters	f
122	0	Maintain Multiple Copies of Computation	f
122	1	Maintain Multiple Copies of Data	f
122	2	Passive Redundancy	f
122	3	Active Redundancy	f
123	0	Usability and Performance	f
123	1	Usability	f
123	2	Performance	f
123	3	Testability	f
124	0	Performance, availability, and usability	f
124	1	Performance, availability, and testability	f
124	2	Reliability, performance, and usability	f
124	3	Performance and usability	f
125	0	Client-Server e Repository	f
125	1	Repository e Service Oriented Architecture	f
125	2	Client-Server, Repository, Communicating-Processes e Service Oriented Architecture	f
125	3	Client-Server, Repository e Communicating-Processes	f
126	0	By using a Timestamp tactic	f
126	1	By using a Retry tactic	f
126	2	Storing the information in the client using cookies	f
126	3	By using a Transactions tactic	f
127	0	May stop accepting reads	f
127	1	May stop accepting writes	f
127	2	May stop accepting reads and writes	f
127	3	May need to add more servers to the cluster	f
128	0	Increase Resource Efficiency	f
128	1	Increase Resources	f
128	2	Prioritize Events	f
128	3	Maintain Multiple Copies of Data	f
129	0	Data Encryption	f
129	1	Intrusion Detection	f
129	2	Limit Access	f
129	3	Authorize Actors	f
130	0	Introduce Concurrency	f
130	1	Maintain Multiple Copies of Computation	f
130	2	Limit Exposition	f
130	3	Active Redundancy	f
131	0	Publication-Subscription	f
131	1	Pipes-and-Filters	f
131	2	Dynamic Creation and Destruction	f
131	3	Client-server	f
132	0	It can take advantage of concurrency	f
132	1	The *browser* needs to make more requests to the server	f
132	2	It uses machine learning techniques	f
132	3	It does not depend on a proprietary service	f
133	0	It is always the same for all instances of Chrome	f
133	1	It is defined compile-time of Chrome code	f
133	2	It is defined during the initialization of each instance of Chrome	f
133	3	It can change during the execution of each instance of Chrome	f
134	0	Maintain User Model tactic	f
134	1	Maintain Task Model tactic	f
134	2	Maintain System Model tactic	f
134	3	Support User Initiative tactics	f
135	0	It is necessary to decompress the complete file, even though if only a small part of the information is needed	f
135	1	Pickle algorithm is not efficient	f
135	2	It is a Python specific solution	f
135	3	Limitations of the concurrent access to files	f
136	0	Increase the modifiability quality, because the new user interface was implemented using the REST interface	f
136	1	Increase the modifiability quality, because external applications stopped using the administrative functionalities	f
136	2	Increase the interoperability quality, because external applications can read and send messages to GNU Mailman	f
136	3	None of the previous options	f
137	0	A sequence of bytes to allow independence between filters	f
137	1	An object tree to allow the simultaneous execution of several filters	f
137	2	A sequence of bytes to allow that the order of filters execution is not relevant	f
137	3	An object tree to simplify the processing of each filter	f
138	0	Effectively guarantees the FIFO delivery of messages and the queue runners do not need to synchronize	f
138	1	Guarantees the FIFO delivery of messages but the queue runners need to synchronize	f
138	2	Does not guarantee the FIFO delivery of messages, some messages may be delivery by a different order	f
138	3	Guarantees the FIFO delivery of messages because in each *queue* only are stored messages which arrived with a difference of more than one minute	f
139	0	Client-Server	f
139	1	Peer-to-Peer	f
139	2	Dynamic Creation and Destruction	f
139	3	Tiers	f
140	0	Each messages does not need to be accessed concurrently by several processes	f
140	1	Pickle can efficiently write and read messages	f
140	2	Each message is stored as a file in a directory	f
140	3	Al the previous options	f
141	0	Allocate modules to the file system	f
141	1	Differ on the emphasis on production and development phases of the software process	f
141	2	Are applied to completely distinct sets of files	f
141	3	Are applied to the same set of files	f
142	0	Interoperability e Performance	f
142	1	Performance and Availability	f
142	2	Easy Development and Performance	f
142	3	Modifiability and Performance	f
143	0	Defer Binding	f
143	1	Passive Redundancy	f
143	2	Active Redundancy	f
143	3	Passive Redundancy and Active Redundancy	f
144	0	It is necessary to use a optimistic concurrency control policy because the transactions cannot be open for a long period	f
144	1	It is necessary to use a pessimistic concurrency control policy to avoid frequent conflicts in the transactions	f
144	2	Both, pessimistic and optimistic, concurrency control policies can be used	f
144	3	Transactional management is the complete responsibility of the repository	f
145	0	Programming, if the components execute modules developed by different teams	f
145	1	Hardware, if there is hardware redundancy	f
145	2	Operating Systems, if redundant components execute on top of different operating systems	f
145	3	All the previous options	f
146	0	Detect and Recover from the attack	f
146	1	Resist to the attack	f
146	2	React to the attack	f
146	3	Resist and React to the attack	f
147	0	If there are performance requirements concerning the access to data, then the level of detail should be physical	f
147	1	It should always consider the physical detail level	f
147	2	The logical detail level should only be used when the target of implementation is a relational database	f
147	3	Only the conceptual level is required, the other two levels of detail are optional	f
148	0	Depend on the types of the publishers components	f
148	1	Only depend on the type of events	f
148	2	Are completely independent	f
148	3	It is necessary to support dynamic Defer Binding of components, publishers and subscribers, to the connector to be completely independent	f
149	0	They only concern the web designers	f
149	1	They are dependent on performance tactics	f
149	2	They are dependent on availability tactics	f
149	3	They are not implemented by a usability tactic	f
150	0	All functionalities can be transactional	f
150	1	Only a small set of functionalities are transactional	f
150	2	It is not necessary to have transactional properties because all data is in memory	f
150	3	Only the isolation property of transactions is supported	f
151	0	Performance	f
151	1	Reliability and Performance	f
151	2	Reliability	f
151	3	Security	f
152	0	Repository and Communicating-Processes	f
152	1	Communicating-Processes	f
152	2	Tiers	f
152	3	Client-Server and Repository	f
153	0	Task Model	f
153	1	System Model	f
153	2	Performance	f
153	3	User Model	f
154	0	Only have a server for write requests	f
154	1	Store all the information statically	f
154	2	Prioritize performance and availability over functionality	f
154	3	Use several levels of cache	f
155	0	Passive Redundancy and Increase Resources Efficiency	f
155	1	Active Redundancy and Increase Resources Efficiency	f
155	2	Active Redundancy and Maintain Multiple Copies of Computation	f
155	3	Passive Redundancy and Maintain Multiple Copies of Computation	f
156	0	In the server	f
156	1	By the load balancer	f
156	2	In the repository	f
156	3	In the client	f
157	0	Escalating Restart	f
157	1	Voting	f
157	2	Degradation	f
157	3	Exception Handling	f
158	0	Prioritize Events	f
158	1	Increase Resources	f
158	2	Increase Resources Efficiency	f
158	3	Maintain Multiple Copies of Data	f
159	0	Security and Mobility	f
159	1	Performance, Security and Interoperability	f
159	2	Security, Performance, Usability, Interoperability and Mobility	f
159	3	Security, Performance, Usability and Mobility	f
160	0	Schedule Resources	f
160	1	Increase Resources	f
160	2	Introduce Concurrency	f
160	3	Maintain Multiple Copies of Computation	f
161	0	Separates the Renderer process from the other processes	f
161	1	The *browser* needs to make less requests to the server	f
161	2	Applies machine learning techniques	f
161	3	Uses prefetching	f
162	0	Repository	f
162	1	Communicating-Processes	f
162	2	Service-Oriented Architecture	f
162	3	Client-Server	f
163	0	Uses the Introduce Concurrency tactic	f
163	1	The page is in cache	f
163	2	Uses the Maintain Multiple Copies of Computation tactic	f
163	3	Uses the Maintain Multiple Copies of Data tactic	f
164	0	Usability e Modifiability	f
164	1	Performance e Usability	f
164	2	Availability e Usability	f
164	3	Availability e Performance	f
165	0	The new user interface started using the REST interface	f
165	1	External applications can administrate the GNU Mailman mailing lists	f
165	2	External applications can read and send messages to GNU Mailman	f
165	3	The GNU Mailman interface became public	f
166	0	Communicating-Processes	f
166	1	Client-Server	f
166	2	Pipes-and-Filters	f
166	3	Publish-Subscribe	f
167	0	Data Model	f
167	1	Decomposition	f
167	2	Aspects	f
167	3	Pipes-and-Filters	f
168	0	The quality of Performance	f
168	1	The quality of Availability	f
168	2	The quality of Reliability	f
168	3	The FIFO delivery of messages	f
169	0	Security	f
169	1	Security and Testability	f
169	2	Reliability and Modifiability	f
169	3	Reliability and Testability	f
170	0	Module	f
170	1	Component-and-Connector	f
170	2	Module and Component-and-Connector	f
170	3	Module, but only for the Decomposition architectural style	f
171	0	Modifiability and Interoperability	f
171	1	Performance and Interoperability	f
171	2	Easiness of Development and Performance	f
171	3	Interoperability	f
172	0	Decomposition	f
172	1	Aspects	f
172	2	Uses	f
172	3	Data Model	f
173	0	User Model and Undo	f
173	1	User Model	f
173	2	User Model and System Model	f
173	3	System Model	f
174	0	It is not possible to support SQL searches in the application server	f
174	1	It is always necessary to search in the database before accessing an object	f
174	2	All accesses to objects should occur through their inter-references	f
174	3	It is necessary that each object has a unique identifier	f
175	0	Exception Handling	f
175	1	Increase Competence Set	f
175	2	Exception Prevention	f
175	3	Exception Detection	f
176	0	The Model module uses the Observer module	f
176	1	The Model module uses the Observer module if data is sent in the notification	f
176	2	The Model module uses the Observer module if complex data is sent in the notification	f
176	3	In what concerns the notification, the Model module does not use the Observer module	f
177	0	The Uses views are designed first	f
177	1	The Layered view are designed first	f
177	2	There isn't any predefined order to design Uses and Layered views	f
177	3	Whenever there is at least one Uses view then a Layered view needs to be designed as well	f
178	0	Can only contain a single architectural style	f
178	1	May contain several architectural styles, but only if the are of the Component-and-Connector and Allocation viewtypes	f
178	2	May contain several architectural styles, but only if they are of the same viewtype	f
178	3	May contain several architectural styles, if that is the best way to convey the information to a group of stakeholders	f
179	0	Can only be applied after the Decomposition view is finished	f
179	1	Can be applied before a Decomposition view is designed	f
179	2	Once applied in a view may be necessary to change the Decomposition view	f
179	3	Should be applied in at least a view of the system	f
180	0	It is an advantage for programmers that the transactional behavior is transparently provided	f
180	1	It is not necessary to have transactional behavior in the business logic	f
180	2	The Component-and-Connector architecture needs to have three Tiers	f
180	3	The Module architecture needs to have three Layers	f
181	0	Depends mostly on the system's functional requirements.	f
181	1	Depends more on the architect's experience than on anything else.	f
181	2	Should not depend on the skills of the developing team.	f
181	3	Is driven by a trade-off among the stakeholders needs.	f
182	0	May be responsible for the Featuritis problems of architectures.	f
182	1	May be responsible for the Performitis problems of architectures.	f
182	2	Is focused on creating common generalizations of several systems.	f
182	3	Is focused on the details of the architecture.	f
183	0	Suffered from featuritis, because the architect decided to delay the difficult parts for latter in the development.	f
183	1	Did not suffer from featuritis.	f
183	2	Suffered from some level of featuritis, but it allowed to have a pilot from which the team learned.	f
183	3	Suffered from featuritis, but it had no impact on the final development.	f
184	0	Is a high-level view of the system with the purpose of understanding what are the system's goals and features.	f
184	1	Is composed of things such as code units, runtime elements, hardware, and people, together with the relationships among them.	f
184	2	Is a set of guidelines that the developing team should follow in the development of the system.	f
184	3	Is a set of diagrams that show the runtime elements of the system and their relationships.	f
185	0	A module may contain code from different components.	f
185	1	A component may execute code from different modules.	f
185	2	A module may execute code from different components.	f
185	3	A component may contain code from different modules.	f
186	0	The current location is the source of the stimulus.	f
186	1	The traffic monitoring system is the environment.	f
186	2	The Google Map is the artefact.	f
186	3	The location information is correctly included with a probability of 99.99% is the response measure.	f
187	0	A Condition Monitoring tactic for the Availability quality.	f
187	1	An Encrypt Data tactic for the Security quality.	f
187	2	A Verify Message Integrity tactic to React to Attacks for the Security quality.	f
187	3	An Exception Prevention tactic to Prevent Faults for the Availability quality.	f
188	0	The source of stimulus for scenarios of the Availability quality.	f
188	1	The stimulus for scenarios of the Availability quality.	f
188	2	The stimulus for scenarios of the Security quality.	f
188	3	The source of stimulus for scenarios of the Security quality.	f
189	0	Manage sampling rate tactic.	f
189	1	Increase resource efficiency tactic.	f
189	2	Introduce concurrency tactic.	f
189	3	Schedule resources tactic.	f
190	0	The source of stimulus is the ruleset.	f
190	1	The ruleset designer is the stimulus.	f
190	2	The environment is design time.	f
190	3	The response is defer binding.	f
191	0	Schedule resources.	f
191	1	Condition monitoring.	f
191	2	Reduce overhead.	f
191	3	Increase resource efficiency.	f
192	0	The most important requirements (both functional and qualities) that the system must achieve.	f
192	1	How the components manage the communication between the remaining elements in the system.	f
192	2	The stakeholders that drive the development of the system.	f
192	3	The tactics that satisfy the most important requirements for the system.	f
193	0	The Decomposition style.	f
193	1	The Decomposition and Uses styles.	f
193	2	The Layered style.	f
193	3	The Generalization and Decomposition styles.	f
194	0	The Decomposition style.	f
194	1	The Deployment style.	f
194	2	The Uses style.	f
194	3	The Work-assignment style.	f
195	0	Create a decomposition where there is a module corresponding to the Windows OS and another one for the Mac OS X, each one responsible for containing the OS-specific code.	f
195	1	Use a classic 3-layer architecture with the following layers, from top to bottom: Presentation, Domain Logic, and Data Access.	f
195	2	Use an aspect-oriented architecture, where an aspect is used to generate a graphical interface.	f
195	3	Use two deployment views, each one allocating different components to different machines with different operating systems.	f
196	0	It corresponds to a particular case of a specialization in a generalization view.	f
196	1	It represents a relation between a connector's role and a port of one of its internal components.	f
196	2	It represents a relation between a component's port and a port of one of its internal components.	f
196	3	It represent a relation between a component's port and a connector's role.	f
197	0	We have to use a Repository component-and-connector style.	f
197	1	It is not necessary to use a ''Data Access'' layer because the information is simple.	f
197	2	We must identify a module for writing the scores in a Decomposition style.	f
197	3	We may assign the responsibility of writing the scores to another module that already has other responsibilities.	f
198	0	Client-server in both cases.	f
198	1	Client-server in the first case and Peer-to-peer in the second.	f
198	2	Peer-to-peer in both cases.	f
198	3	Peer-to-peer in the first case and Client-Server in the second.	f
199	0	Peer-to-Peer.	f
199	1	Pipe-and-Filter.	f
199	2	Client-Server.	f
199	3	Publish-Subscribe.	f
200	0	Work assignment view.	f
200	1	Install view.	f
200	2	Implementation view.	f
200	3	Deployment view.	f
201	0	The Requirements function is part of the Design module.	f
201	1	The Requirements function is not part of the RulesSet module.	f
201	2	The Requirements function is part of the Objects module.	f
201	3	The Requirements function is part of the Dynamic Design module.	f
321	0	Performance.	f
202	0	A component-and-connector view using a shared-data style.	f
202	1	A data model view.	f
202	2	A service-oriented architecture view.	f
202	3	A data model view and a component-and-connector view using a shared-data style.	f
203	0	Peer-to-peer style.	f
203	1	Pipe-and-Filter style.	f
203	2	Shared-data style.	f
203	3	Publish-subscribe style.	f
204	0	The team did not know the FenixFramework.	f
204	1	The domain only needs CRUD (Create, Read, Update, and Delete) operations.	f
204	2	A domain layer is absent from the architecture.	f
204	3	Most of the information is stored in the client.	f
205	0	It is necessary to design two deployment views, one for each deployment option.	f
205	1	It is necessary to design a single deployment view that contains all the variation, because only the hardware capabilities change.	f
205	2	Two different component-and-connector views are necessary to represent the same runtime behavior of the system.	f
205	3	The deployment options have a large impact on the work assignment view.	f
206	0	Passive redundancy for availability, because it is possible to recover from the commands log.	f
206	1	Undo tactic for usability, because the server can undo the snapshot.	f
206	2	Increase resource efficiency tactic for performance, because it reduces the need of upfront calculus/computation on new clients.	f
206	3	Multiple copies of data tactic for performance, clients do not have to execute the commands.	f
207	0	The server propagates them to all the clients.	f
207	1	The server propagates local commands and cursor movements to the clients, and keeps the snapshots for the initialization of new clients.	f
207	2	The server only propagates local commands to the clients and keeps cursor movements in a log and the snapshots in a repository.	f
207	3	The server propagates the snapshots and the cursor movements to the clients and store the local commands for the initialization of new clients.	f
208	0	Testability.	f
208	1	Modifiability.	f
208	2	Testability and Modifiability.	f
208	3	Performance.	f
209	0	The Transaction Script pattern to help demarcate the business transactions.	f
209	1	The Domain Model pattern to reduce the interface of the Domain Logic layer to a controlled set.	f
209	2	The Data Access layer to be able to access the data that it needs in each service.	f
209	3	The Table Module pattern to hide the details of the table structure for the Presentation layer.	f
210	0	The Transaction Script pattern.	f
210	1	The Table Module pattern.	f
210	2	The Domain Model pattern.	f
210	3	The Service Layer pattern.	f
211	0	The Transaction Script pattern to help demarcate the business transactions.	f
211	1	The Domain Model pattern to reduce the interface of the Domain Logic layer to a controlled set.	f
211	2	The Data Access layer to be able to access the data that it needs in each service.	f
211	3	The Table Module pattern to hide the details of the table structure for the Presentation layer.	f
212	0	The Transaction Script pattern.	f
212	1	The Table Module pattern.	f
212	2	The Domain Model pattern.	f
212	3	The Service Layer pattern.	f
213	0	Work assignment view.	f
213	1	Install view.	f
213	2	Implementation view.	f
213	3	Deployment view.	f
214	0	The Requirements function is part of the Design module.	f
214	1	The Requirements function is not part of the RulesSet module.	f
214	2	The Requirements function is part of the Objects module.	f
214	3	The Requirements function is part of the Dynamic Design module.	f
215	0	A Condition Monitoring tactic for the Availability quality.	f
215	1	An Encrypt Data tactic for the Security quality.	f
215	2	A Verify Message Integrity tactic to React to Attacks for the Security quality.	f
215	3	An Exception Prevention tactic to Prevent Faults for the Availability quality.	f
216	0	The source of stimulus for scenarios of the Availability quality.	f
216	1	The stimulus for scenarios of the Availability quality.	f
216	2	The stimulus for scenarios of the Security quality.	f
216	3	The source of stimulus for scenarios of the Security quality.	f
217	0	Manage sampling rate tactic.	f
217	1	Increase resource efficiency tactic.	f
217	2	Introduce concurrency tactic.	f
217	3	Schedule resources tactic.	f
218	0	The source of stimulus is the ruleset.	f
218	1	The ruleset designer is the stimulus.	f
218	2	The environment is design time.	f
218	3	The response is defer binding.	f
219	0	Schedule resources.	f
219	1	Condition monitoring.	f
219	2	Reduce overhead.	f
219	3	Increase resource efficiency.	f
220	0	Create a decomposition where there is a module corresponding to the Windows OS and another one for the Mac OS X, each one responsible for containing the OS-specific code.	f
220	1	Use a classic 3-layer architecture with the following layers, from top to bottom: Presentation, Domain Logic, and Data Access.	f
220	2	Use an aspect-oriented architecture, where an aspect is used to generate a graphical interface.	f
220	3	Use two deployment views, each one allocating different components to different machines with different operating systems.	f
221	0	It corresponds to a particular case of a specialization in a generalization view.	f
221	1	It represents a relation between a connector's role and a port of one of its internal components.	f
221	2	It represents a relation between a component's port and a port of one of its internal components.	f
221	3	It represent a relation between a component's port and a connector's role.	f
222	0	We have to use a Repository component-and-connector style.	f
222	1	It is not necessary to use a ''Data Access'' layer because the information is simple.	f
222	2	We must identify a module for writing the scores in a Decomposition style.	f
222	3	We may assign the responsibility of writing the scores to another module that already has other responsibilities.	f
223	0	Client-server in both cases.	f
223	1	Client-server in the first case and Peer-to-peer in the second.	f
223	2	Peer-to-peer in both cases.	f
223	3	Peer-to-peer in the first case and Client-Server in the second.	f
224	0	Depends mostly on the system's functional requirements.	f
224	1	Depends more on the architect's experience than on anything else.	f
224	2	Should not depend on the skills of the developing team.	f
224	3	Is driven by a trade-off among the stakeholders needs.	f
225	0	May be responsible for the Featuritis problems of architectures.	f
225	1	May be responsible for the Performitis problems of architectures.	f
225	2	Is focused on creating common generalizations of several systems.	f
225	3	Is focused on the details of the architecture.	f
226	0	A module may contain code from different components.	f
226	1	A component may execute code from different modules.	f
226	2	A module may execute code from different components.	f
226	3	A component may contain code from different modules.	f
227	0	The current location is the source of the stimulus.	f
227	1	The traffic monitoring system is the environment.	f
227	2	The Google Map is the artefact.	f
227	3	The location information is correctly included with a probability of 99.99% is the response measure.	f
228	0	Peer-to-Peer.	f
228	1	Pipe-and-Filter.	f
228	2	Client-Server.	f
228	3	Publish-Subscribe.	f
229	0	A component-and-connector view using a shared-data style.	f
229	1	A data model view.	f
229	2	A service-oriented architecture view.	f
229	3	A data model view and a component-and-connector view using a shared-data style.	f
230	0	Peer-to-peer style.	f
230	1	Pipe-and-Filter style.	f
230	2	Shared-data style.	f
230	3	Publish-subscribe style.	f
231	0	The team did not know the FenixFramework.	f
231	1	The domain only needs CRUD (Create, Read, Update, and Delete) operations.	f
231	2	A domain layer is absent from the architecture.	f
231	3	Most of the information is stored in the client.	f
232	0	It is necessary to design two deployment views, one for each deployment option.	f
232	1	It is necessary to design a single deployment view that contains all the variation, because only the hardware capabilities change.	f
232	2	Two different component-and-connector views are necessary to represent the same runtime behavior of the system.	f
232	3	The deployment options have a large impact on the work assignment view.	f
233	0	Passive redundancy for availability, because it is possible to recover from the commands log.	f
233	1	Undo tactic for usability, because the server can undo the snapshot.	f
233	2	Increase resource efficiency tactic for performance, because it reduces the need of upfront calculus/computation on new clients.	f
233	3	Multiple copies of data tactic for performance, clients do not have to execute the commands.	f
234	0	The server propagates them to all the clients.	f
234	1	The server propagates local commands and cursor movements to the clients, and keeps the snapshots for the initialization of new clients.	f
234	2	The server only propagates local commands to the clients and keeps cursor movements in a log and the snapshots in a repository.	f
234	3	The server propagates the snapshots and the cursor movements to the clients and store the local commands for the initialization of new clients.	f
235	0	Testability.	f
235	1	Modifiability.	f
235	2	Testability and Modifiability.	f
235	3	Performance.	f
236	0	Suffered from featuritis, because the architect decided to delay the difficult parts for latter in the development.	f
236	1	Did not suffer from featuritis.	f
236	2	Suffered from some level of featuritis, but it allowed to have a pilot from which the team learned.	f
236	3	Suffered from featuritis, but it had no impact on the final development.	f
237	0	Is a high-level view of the system with the purpose of understanding what are the system's goals and features.	f
237	1	Is composed of things such as code units, runtime elements, hardware, and people, together with the relationships among them.	f
237	2	Is a set of guidelines that the developing team should follow in the development of the system.	f
237	3	Is a set of diagrams that show the runtime elements of the system and their relationships.	f
238	0	The most important requirements (both functional and qualities) that the system must achieve.	f
238	1	How the components manage the communication between the remaining elements in the system.	f
238	2	The stakeholders that drive the development of the system.	f
238	3	The tactics that satisfy the most important requirements for the system.	f
239	0	The Decomposition style.	f
239	1	The Decomposition and Uses styles.	f
239	2	The Layered style.	f
239	3	The Generalization and Decomposition styles.	f
240	0	The Decomposition style.	f
240	1	The Deployment style.	f
240	2	The Uses style.	f
240	3	The Work-assignment style.	f
241	0	To analyse the source code of the system to see how it is built	f
241	1	To analyse the system's functional requirements to see what is the system supposed to do	f
241	2	To analyse the implemented set of features to see what is it that the system actually does	f
241	3	To talk with the people that developed the system to know what they did and why they did it	f
242	0	The architecture of a system cannot change	f
242	1	The main goal of an architect is to identify the quality attributes of system	f
242	2	Architecture is the design that gets harder to change as development progresses	f
242	3	The main goal of an architect is to design a detailed structure of the system that supports most of the requirements	f
243	0	It is not a good idea to consider performance when designing the architecture of the system	f
243	1	The performance of a system only depends on the global performance strategies	f
243	2	Testability and maintainability always conflict with performance	f
243	3	None of the above	f
244	0	Represent different architectural qualities and they may not be all represented in a single view	f
244	1	Have a view for each stakeholder	f
244	2	Have at least a view for each viewtype	f
244	3	Have a view for each group of interconnected components, and very often a system has several groups of interconnected components	f
245	0	A module	f
245	1	A component	f
245	2	Both, a module and a component	f
245	3	An allocation element	f
246	0	Describing what are the qualities that the system should possess	f
246	1	Describing a set of steps that a user of the system must perform to accomplish some task	f
246	2	Describing a use case for the system that makes clear what should be the system's responses to each of the user's inputs	f
246	3	Describing the system's features by way of different usage scenarios for it, in which users play the role of actors	f
247	0	Ping-and-echo requires the availability monitor to know the addresses of the components it is monitoring	f
247	1	Heartbeat requires the availability monitor to confirm the reception of the signal	f
247	2	In Ping-and-echo the availability monitor should always send the same request	f
247	3	In Heartbeat, the monitored components can change the message rate	f
248	0	It is not possible to achieve this requirement. A non-architectural solution is to be careful when hiring system administrators	f
248	1	It is necessary to use the authenticate authors tactic to authenticate system administrators before they access to the database	f
248	2	It is necessary to use the encrypt data tactic to encrypt the information with a password that is in a configuration file	f
248	3	It is necessary to use the encrypt data tactic to encrypt the information on the client web browser, before it is send to the web server	f
249	0	Maintain task model	f
249	1	Maintain user model	f
249	2	Maintain system model	f
249	3	Aggregate	f
250	0	A scenario for performance associated with a multiple copies of computation tactic	f
250	1	A scenario for usability associated with a support system initiative tactic	f
250	2	A scenario for performance associated with a limit event response tactic	f
250	3	A scenario for usability associated with a support user initiative tactic	f
251	0	Multiple copies of computation	f
251	1	Active redundancy	f
251	2	Increase resource efficiency	f
251	3	All of the above	f
252	0	We should always satisfy in the first place the requirements of the more important stakeholders (such as the client)	f
252	1	If no order was established among them, we would not know from where should we start the design process	f
252	2	If one of the stakeholders complains that her requirement is not satisfied, we may explain to her that there were other more important requirements first	f
252	3	When it is not possible to satisfy all of the requirements optimally, we should be aware of their relative importance so that we may find a solution that corresponds to a satisfactory trade-off	f
253	0	Decomposition view	f
253	1	Data model view	f
253	2	Generalization view	f
253	3	Layered view	f
254	0	Peer-to-Peer to represent the communication between the components	f
254	1	Client-Server to represent the request the application makes to the different new sources	f
254	2	Generalisation to represent an abstraction common to all interfaces and keep API-specific details in child modules	f
254	3	Layers to create a virtual machine that hides the internals of the application from its users interface code to allow the support of different user interfaces	f
255	0	Performance because there is an overhead of communication between the modules.	f
255	1	Install because most of the modules need to be assigned to the same executable file	f
255	2	Development because it is not possible to do incremental development	f
255	3	Availability because if a module fails the failure easily propagates to all the other modules	f
256	0	A Module viewtype view	f
256	1	A Allocation viewtype view	f
256	2	A Communicating processes view	f
256	3	A Install view	f
257	0	It is enough to show the load-balancer between the web clients machines and the servers machines using a deployment view	f
257	1	It is necessary to change the connector between the web clients and the web servers, in the component-and-connector view, to show the semantics that is provided by the load-balancer	f
257	2	It is necessary to create a uses view to show how clients require the correct functioning of servers	f
257	3	It is necessary to change the component-and-connector view to show the communicating processes	f
258	0	They have many different use cases, corresponding to many distinct user interfaces	f
258	1	They have to process very large amounts of data in each request	f
258	2	They need to be able to process concurrent requests from the users	f
258	3	They have a very complex domain logic that requires much processing power for answering each request	f
259	0	The Shared Data style	f
259	1	The Pipes-and-filters style	f
259	2	The Publish-subscribe style	f
259	3	The Client-Server style	f
260	0	Analysing the performance of the system	f
260	1	Planning incremental releases of the system	f
260	2	Estimating the effort needed to implement the system	f
260	3	Analysing the system's portability and reusability	f
261	0	A generalisation architectural style	f
261	1	An aspects architectural style	f
261	2	A data model architectural style	f
261	3	A shared-data architectural style	f
262	0	Subscribes to the same kind of events that the \extsc{sub2} port	f
262	1	Subscribes to the same kind of events that the \extsc{inputSub} port	f
262	2	Subscribes to cursor position events	f
262	3	It is unnecessary in the diagram because the \extsc{:TableEditor} can use port \extsc{sub2} through the \extsc{:Sheet} component	f
263	0	The communicating processes architectural style	f
263	1	The client-server architectural style	f
263	2	The deployment architectural style	f
263	3	All of the above	f
264	0	Ignore faulty behaviour tactic	f
264	1	Ping-and-echo tactic	f
264	2	Active redundancy tactic	f
264	3	Retry tactic	f
265	0	Performance, because it describes what is the response to REST API calls	f
265	1	Modifiability, because the jsdom code can not be reused by several threads	f
265	2	Security, because it describes a "queue overflow" attack	f
265	3	Interoperability, because the REST API allow the exchange of information with external applications	f
266	0	Reduce overhead tactic	f
266	1	Increase resource efficiency tactic	f
266	2	Increase resources tactic	f
266	3	Testability tactic	f
267	0	Overall costs, because of deployment	f
267	1	Availability, because of the interprocess communication	f
267	2	Testability, because of the logic complexity	f
267	3	Performance, because there is not a significative improvement by using more CPUs	f
268	0	A publish-subscribe style	f
268	1	A peer-to-peer style	f
268	2	A client-server style	f
268	3	A communication processes style	f
269	0	Requires a more skilled team, because the object-oriented paradigm is more complex than the procedural paradigm	f
269	1	Is typically used with more complex data access code	f
269	2	Requires that we write more code when we have only a couple of simple use cases	f
269	3	All of the above	f
270	0	The Service Layer pattern	f
270	1	The Active Record pattern	f
270	2	The Transaction Script pattern	f
270	3	The Data Mapper pattern	f
271	0	Ignore faulty behaviour tactic	f
271	1	Ping-and-echo tactic	f
271	2	Active redundancy tactic	f
271	3	Retry tactic	f
272	0	Requires a more skilled team, because the object-oriented paradigm is more complex than the procedural paradigm	f
272	1	Is typically used with more complex data access code	f
272	2	Requires that we write more code when we have only a couple of simple use cases	f
272	3	All of the above	f
273	0	The Service Layer pattern	f
273	1	The Active Record pattern	f
273	2	The Transaction Script pattern	f
273	3	The Data Mapper pattern	f
274	0	Describing what are the qualities that the system should possess	f
274	1	Describing a set of steps that a user of the system must perform to accomplish some task	f
274	2	Describing a use case for the system that makes clear what should be the system's responses to each of the user's inputs	f
274	3	Describing the system's features by way of different usage scenarios for it, in which users play the role of actors	f
275	0	Ping-and-echo requires the availability monitor to know the addresses of the components it is monitoring	f
275	1	Heartbeat requires the availability monitor to confirm the reception of the signal	f
275	2	In Ping-and-echo the availability monitor should always send the same request	f
275	3	In Heartbeat, the monitored components can change the message rate	f
276	0	It is not possible to achieve this requirement. A non-architectural solution is to be careful when hiring system administrators	f
276	1	It is necessary to use the authenticate authors tactic to authenticate system administrators before they access to the database	f
276	2	It is necessary to use the encrypt data tactic to encrypt the information with a password that is in a configuration file	f
276	3	It is necessary to use the encrypt data tactic to encrypt the information on the client web browser, before it is send to the web server	f
277	0	Maintain task model	f
277	1	Maintain user model	f
277	2	Maintain system model	f
277	3	Aggregate	f
278	0	A scenario for performance associated with a multiple copies of computation tactic	f
278	1	A scenario for usability associated with a support system initiative tactic	f
278	2	A scenario for performance associated with a limit event response tactic	f
278	3	A scenario for usability associated with a support user initiative tactic	f
279	0	Multiple copies of computation	f
279	1	Active redundancy	f
279	2	Increase resource efficiency	f
279	3	All of the above	f
280	0	Decomposition view	f
280	1	Data model view	f
280	2	Generalization view	f
280	3	Layered view	f
281	0	To analyse the source code of the system to see how it is built	f
281	1	To analyse the system's functional requirements to see what is the system supposed to do	f
281	2	To analyse the implemented set of features to see what is it that the system actually does	f
281	3	To talk with the people that developed the system to know what they did and why they did it	f
282	0	The architecture of a system cannot change	f
282	1	The main goal of an architect is to identify the quality attributes of system	f
282	2	Architecture is the design that gets harder to change as development progresses	f
282	3	The main goal of an architect is to design a detailed structure of the system that supports most of the requirements	f
283	0	It is not a good idea to consider performance when designing the architecture of the system	f
283	1	The performance of a system only depends on the global performance strategies	f
283	2	Testability and maintainability always conflict with performance	f
283	3	None of the above	f
284	0	Represent different architectural qualities and they may not be all represented in a single view	f
284	1	Have a view for each stakeholder	f
284	2	Have at least a view for each viewtype	f
284	3	Have a view for each group of interconnected components, and very often a system has several groups of interconnected components	f
285	0	We should always satisfy in the first place the requirements of the more important stakeholders (such as the client)	f
285	1	If no order was established among them, we would not know from where should we start the design process	f
285	2	If one of the stakeholders complains that her requirement is not satisfied, we may explain to her that there were other more important requirements first	f
285	3	When it is not possible to satisfy all of the requirements optimally, we should be aware of their relative importance so that we may find a solution that corresponds to a satisfactory trade-off	f
286	0	A module	f
286	1	A component	f
286	2	Both, a module and a component	f
286	3	An allocation element	f
287	0	Peer-to-Peer to represent the communication between the components	f
287	1	Client-Server to represent the request the application makes to the different new sources	f
287	2	Generalisation to represent an abstraction common to all interfaces and keep API-specific details in child modules	f
287	3	Layers to create a virtual machine that hides the internals of the application from its users interface code to allow the support of different user interfaces	f
288	0	Performance because there is an overhead of communication between the modules.	f
288	1	Install because most of the modules need to be assigned to the same executable file	f
288	2	Development because it is not possible to do incremental development	f
288	3	Availability because if a module fails the failure easily propagates to all the other modules	f
289	0	Performance, because it describes what is the response to REST API calls	f
289	1	Modifiability, because the jsdom code can not be reused by several threads	f
289	2	Security, because it describes a "queue overflow" attack	f
289	3	Interoperability, because the REST API allow the exchange of information with external applications	f
290	0	Reduce overhead tactic	f
290	1	Increase resource efficiency tactic	f
290	2	Increase resources tactic	f
290	3	Testability tactic	f
291	0	Overall costs, because of deployment	f
291	1	Availability, because of the interprocess communication	f
291	2	Testability, because of the logic complexity	f
291	3	Performance, because there is not a significative improvement by using more CPUs	f
292	0	A Module viewtype view	f
292	1	A Allocation viewtype view	f
292	2	A Communicating processes view	f
292	3	A Install view	f
293	0	A publish-subscribe style	f
293	1	A peer-to-peer style	f
293	2	A client-server style	f
293	3	A communication processes style	f
294	0	It is enough to show the load-balancer between the web clients machines and the servers machines using a deployment view	f
294	1	It is necessary to change the connector between the web clients and the web servers, in the component-and-connector view, to show the semantics that is provided by the load-balancer	f
294	2	It is necessary to create a uses view to show how clients require the correct functioning of servers	f
294	3	It is necessary to change the component-and-connector view to show the communicating processes	f
295	0	They have many different use cases, corresponding to many distinct user interfaces	f
295	1	They have to process very large amounts of data in each request	f
295	2	They need to be able to process concurrent requests from the users	f
295	3	They have a very complex domain logic that requires much processing power for answering each request	f
296	0	The Shared Data style	f
296	1	The Pipes-and-filters style	f
296	2	The Publish-subscribe style	f
296	3	The Client-Server style	f
297	0	Analysing the performance of the system	f
297	1	Planning incremental releases of the system	f
297	2	Estimating the effort needed to implement the system	f
297	3	Analysing the system's portability and reusability	f
298	0	A generalisation architectural style	f
298	1	An aspects architectural style	f
298	2	A data model architectural style	f
298	3	A shared-data architectural style	f
299	0	Subscribes to the same kind of events that the \extsc{sub2} port	f
299	1	Subscribes to the same kind of events that the \extsc{inputSub} port	f
299	2	Subscribes to cursor position events	f
299	3	It is unnecessary in the diagram because the \extsc{:TableEditor} can use port \extsc{sub2} through the \extsc{:Sheet} component	f
300	0	The communicating processes architectural style	f
300	1	The client-server architectural style	f
300	2	The deployment architectural style	f
300	3	All of the above	f
301	0	Featuritis may result from a requirement of the technical context.	f
301	1	Featuritis requires the performance quality because the end user needs to execute the features.	f
301	2	Featuritis may be a result of a requirement of the business context.	f
301	3	Featuritis requires the modifiability quality to allow a the system to be easily modified to support new features.	f
302	0	Performance is a quality that you have to address at the end of the development process.	f
302	1	There is no system which can have good performance and be easily maintainable.	f
302	2	We have to distinguish architectural performance from opportunistic performance.	f
302	3	The system performance quality has impact on the performance of the execution of tests.	f
303	0	The book definition does not consider relevant the externally visible properties.	f
303	1	The book definition also considers that the properties are externally visible because they are used for reasoning by the stakeholders.	f
303	2	The book definition also considers that the properties are externally visible because by definition an architectural property is externally visible.	f
303	3	The book definition is not correct, as pointed out in the errata.	f
304	0	This shared understanding is what distinguishes architecture from design.	f
304	1	This shared understanding is necessary to define precise requirements.	f
304	2	This shared understanding does not allow to define the architecture trade-offs because some of the stakeholders have their own goals.	f
304	3	This shared understanding does not allow to have a global perspective of the system, because stakeholders have different interests.	f
305	0	Make a business case for the system.	f
305	1	Understand the architecturally significant requirements.	f
305	2	The system design.	f
305	3	Documenting and communicating the architecture.	f
306	0	Frank Buschmann is referring to some possible consequences of the modifiability quality.	f
306	1	Frank Buschmann are considering performance and security as the most important qualities.	f
306	2	Frank Buschmann is referring that the consequences of a flexible system is poor performance and bad security.	f
306	3	Frank Buschmann is not considering modifiability as an important quality	f
307	0	Performance should be the last quality to be addressed because it is a local property of an architecture.	f
307	1	Modifiability, flexibility, should be the first quality to be addressed because it allows the delay of architectural decisions.	f
307	2	The lack of functionality results in a system without business value, therefore a rich set of features should be implemented first.	f
307	3	A solution for any quality in isolation may lead to a biased architecture.	f
308	0	A component.	f
308	1	A module.	f
308	2	Both, a component and a module, depending on the perspective.	f
308	3	An external element.	f
309	0	This is right because if you don't the project fails.	f
309	1	This is wrong because you can easily change these decisions during the project lifetime.	f
309	2	This is right but you cannot be completely sure whether the decisions are the right ones.	f
309	3	This is wrong because it is against agile way of thinking the software development process.	f
310	0	Is unable to define a domain model of the system.	f
310	1	Is focused on the technology context of the architecture.	f
310	2	Is focused on creating common generalizations of several systems.	f
310	3	Is focused on the details of the architecture.	f
311	0	Such misunderstanding and mistrust occurs because the stakeholders have their own agendas	f
311	1	The cycle Frank Buschmann refers to is the Architectural Influence Cycle.	f
311	2	The cycle Frank Buschmann refers to allows the clarification of requirements.	f
311	3	To break such misunderstanding and mistrust the architecture has to make explicit the stakeholders needs.	f
312	0	Is a functional prototype, which tests the functionalities required by the business stakeholders.	f
312	1	Is an architecture that demonstrates that the system will support the qualities raised by the stakeholders.	f
312	2	Is a baseline architecture that allows to experiment with the most significant architectural requirements.	f
312	3	Is an object-oriented framework, which integrates functional and non-functional requirements of the system.	f
313	0	A component.	f
313	1	A module.	f
313	2	Both, a component and a module, depending on the perspective.	f
313	3	An external element.	f
314	0	Modifiability.	f
314	1	Usability.	f
314	2	Security.	f
314	3	Availability.	f
315	0	Are unable to understand the technology capabilities.	f
315	1	Are focused on the project context of the architecture.	f
315	2	Are unable to distinguish architecture from design.	f
315	3	Are focused on the business context of the architecture.	f
316	0	A flexible architecture occurs when it is not possible to identify all the requirements.	f
316	1	A solution to this problem is to prioritize the system qualities.	f
316	2	Performance uncertainty about the system should be dealt with more flexibility.	f
316	3	A solution to this problem is to reduce the level of flexibility of a system.	f
317	0	Project and Technical Contexts.	f
317	1	Project and Professional Contexts.	f
317	2	Business and Project Contexts.	f
317	3	Professional and Technical Contexts.	f
318	0	A module view.	f
318	1	A component-and-connector view.	f
318	2	An allocation view.	f
318	3	They are not represented by a view.	f
319	0	Modifiability.	f
319	1	Availability and Performance.	f
319	2	Testability.	f
319	3	Availability.	f
320	0	Tries to guarantee that the final system will have the qualities required by stakeholders.	f
320	1	Tries to guarantee that the final system will have the qualities aimed by the architecture.	f
320	2	Does not allow developers to define some of the design of the system	f
320	3	It requires automatic generation of code from the architecture.	f
321	1	Availability.	f
321	2	Reliability.	f
321	3	Fault-tolerance	f
322	0	Implements a tactic to recover from faults.	f
322	1	Implements a tactic to prevent faults.	f
322	2	Can be used as the source of a stimulus in a scenario.	f
322	3	Can be used in a non-concurrent system.	f
323	0	Is an aggregate design tactic.	f
323	1	Is a maintain user model design tactic.	f
323	2	Is a design tactic for a scenario where the source of stimulus are technical users.	f
323	3	Is a design tactic for a scenario where the source of stimulus is the graph owner user.	f
324	0	Detect intrusion.	f
324	1	Limit access.	f
324	2	Limit exposure.	f
324	3	Separate entities.	f
325	0	Limit access.	f
325	1	Increase resources.	f
325	2	Increase resource efficiency.	f
325	3	Maintain multiple copies of data.	f
326	0	The stimulus is a system input.	f
326	1	The response can be omitted.	f
326	2	The artefact can be outside the system.	f
326	3	The stimulus and the response should be always present.	f
327	0	Prevent a fault in hardware.	f
327	1	Prevent a fault in software.	f
327	2	Prevent a fault in a process.	f
327	3	Detect a fault.	f
328	0	The quality addressed is availability.	f
328	1	The quality addressed is performance.	f
328	2	The quality addressed is availability and a voting design tactic is required to solve the problem.	f
328	3	The quality addressed is performance and a maintain multiple copies of data design tactic is required to solve the problem.	f
329	0	Detect intrusion.	f
329	1	Detect service denial.	f
329	2	Verify message integrity.	f
329	3	Detect message delay.	f
330	0	Increase resources.	f
330	1	Introduce concurrency.	f
330	2	Reduce overhead.	f
330	3	Manage sample rate.	f
331	0	Performance.	f
331	1	Availability.	f
331	2	Interoperability.	f
331	3	Testability.	f
332	0	Ignore faulty behavior.	f
332	1	Transactions.	f
332	2	Rollback.	f
332	3	Exception prevention.	f
333	0	A Maintain Multiple Copies of Computation design tactic in Carbon.	f
333	1	A Maintain Multiple Copies of Computation design tactic in the WebApp such that reads do not compete with writes.	f
333	2	A Maintain Multiple Copies of Data design tactic in Carbon.	f
333	3	A Maintain Multiple Copies of Data design tactic in the WebApp such that reads do not compete with writes.	f
334	0	Limit access, to restrict the access to the database system.	f
334	1	Limit exposure, locate the database system in the intranet.	f
334	2	Separate entities, to allow the use of more strict tactics on the sensitive data.	f
334	3	Change default settings, because default passwords are sensitive.	f
335	0	Maintain user model tactic.	f
335	1	Introduce concurrence tactic.	f
335	2	Increase resource efficiency tactic.	f
335	3	Maintain task model tactic.	f
336	0	Is a mediator, an application of the mediator pattern, between the input stimulus and the output response.	f
336	1	May be associated to other tactics to deal with a single stimulus.	f
336	2	Is an architectural pattern.	f
336	3	Is a system decomposition.	f
337	0	This situation corresponds to the use of the degradation availability tactic.	f
337	1	This situation corresponds to the use of the removal from service availability tactic.	f
337	2	This situation corresponds to the use of the limit access security tactic.	f
337	3	This situation corresponds to the use of the limit exposure security tactic.	f
338	0	The quality addressed is availability.	f
338	1	The quality addressed is modifiability.	f
338	2	The quality addressed is availability and an active redundancy design tactic is required to solve the problem.	f
338	3	The quality addressed is modifiability and an increase cohesion design tactic is required to solve the problem.	f
339	0	Detect and Resist.	f
339	1	Detect and React.	f
339	2	Detect and Recover.	f
339	3	Resist and React.	f
340	0	Maintain multiple copies of data tactic.	f
340	1	Introduce concurrence tactic.	f
340	2	Increase resource efficiency tactic.	f
340	3	Schedule resources tactic.	f
341	0	Incorporate in the organization's core business the goals of a software house.	f
341	1	Do in-house development.	f
341	2	Integrate the development of the software system with the organization's business goals.	f
341	3	Reimplement all the information systems of the organization	f
342	0	Is driven by functional requirements.	f
342	1	Is done in a single step, after all the tactics were identified.	f
342	2	Is a top-down process where a initial decomposition is chosen and it is successively decomposed without changing the initial decisions.	f
342	3	Is an iterative process where architectural designs are proposed as hypothesis and tested.	f
343	0	Testability.	f
343	1	Reliability.	f
343	2	Availability.	f
343	3	Usability.	f
344	0	Interoperability.	f
344	1	Performance.	f
344	2	Availability.	f
344	3	Usability.	f
345	0	Results in a similar decomposition as if the criteria was not applied but some modules are identified to be outsourced.	f
345	1	Results in a decomposition where each module may be implemented by a single developer.	f
1069	2	The Publish-subscribe style	f
345	2	Allows to increase the overall calendar development time of the project because there is a communication overhead with external teams.	f
345	3	Allows to identify modules for which the development team does not have the required implementation competences.	f
346	0	Business scenario.	f
346	1	Availability scenario.	f
346	2	Modifiability scenario.	f
346	3	Usability scenario.	f
347	0	This ASR can easily be supported by the architecture because it has little effect in the architecture.	f
347	1	This ASR requires a specific architectural design because it profoundly affects the architecture.	f
347	2	The cost of meeting the ASR after development starts is too high.	f
347	3	Any ASR that has a high business value cannot have a low architecture impact because it needs to be supported by the architecture.	f
348	0	Performance.	f
348	1	Modifiability.	f
348	2	Availability.	f
348	3	Usability.	f
349	0	Change default settings.	f
349	1	Limit access.	f
349	2	Support user initiative.	f
349	3	Support system initiative.	f
350	0	Results in a similar decomposition as if the criteria was not applied but some modules are identified to be outsourced.	f
350	1	Results in a decomposition where each module may be implemented by a single developer.	f
350	2	Allows to increase the overall calendar development time of the project because there is a communication overhead with external teams.	f
350	3	Allows to identify modules for which the development team does not have the required implementation competences.	f
351	0	Only contains business qualities.	f
351	1	Cannot be defined for the security quality.	f
351	2	Contains the architectural tactics associated with architecturally significant requirements.	f
351	3	Contains the business value and the architectural impact of architecturally significant requirements.	f
352	0	This ASR can easily be supported by the architecture.	f
352	1	This ASR should be supported by the architecture because of its high impact.	f
352	2	The architect have to decide on the cost/benefit of designing an architecture that supports this ASR.	f
352	3	The architect should support this ASR after designing an architecture that supports all the ASRs with high business value.	f
353	0	Performance.	f
353	1	Reliability.	f
353	2	Availability.	f
353	3	Usability.	f
354	0	Performance.	f
354	1	Interoperability.	f
354	2	Availability.	f
354	3	Usability.	f
355	0	Is applied only once at the beginning of the architectural design process.	f
355	1	Is applied at the begin of the architectural design process but may be necessary to redo it later.	f
355	2	Is mostly driven by the security attribute quality.	f
355	3	Follows a bottom-up decomposition process of the system.	f
356	0	Business scenario.	f
356	1	Availability scenario.	f
356	2	Modifiability scenario.	f
356	3	Usability scenario.	f
357	0	Results from a utility tree for performance.	f
357	1	Results from a single availability scenario.	f
357	2	Results from the application of a single ADD iteration.	f
357	3	Results from the application of several ADD iterations.	f
358	0	Maintain system model tactic.	f
358	1	Support user initiative tactic.	f
358	2	Maintain multiple copies of data tactic.	f
358	3	Conflict detection tactic.	f
359	0	Rollback.	f
359	1	Persistence.	f
359	2	Retry.	f
359	3	Passive redundancy.	f
360	0	Is applied only once at the beginning of the architectural design process.	f
360	1	Is applied at the begin of the architectural design process but may be necessary to redo it later.	f
360	2	Is mostly driven by the security attribute quality.	f
360	3	Follows a bottom-up decomposition process of the system.	f
361	0	Applying the generalization style to identify child modules of a module in the loop chain.	f
361	1	Applying the decomposition style to some of the modules in the loop chain.	f
361	2	Identifying which of the *uses* dependencies are actually generalization dependencies.	f
361	3	Decomposing a *uses* relation into different interfaces.	f
362	0	She should try to use a view of the Aspects style, assign this responsibility to a module such that the other modules can crosscut this responsibility.	f
362	1	She should try to use a view of the Aspects style, assign this responsibility to a module and bind it to the modules affected by it.	f
362	2	She should define finer-grained modules where she splits the unassigned responsibility.	f
362	3	This means that in this software system it is not possible to modularize each responsibility in a cohesive module.	f
363	0	Limit exposure.	f
363	1	Limit access.	f
363	2	Authorize actors.	f
363	3	Separate entities.	f
364	0	The type of a connector does not depend on the type of its roles.	f
364	1	The type of a component does not depend on the type of its ports.	f
364	2	The attachment is a runtime relation which dynamically manages type compliance.	f
364	3	The attachment between components and connectors only depends on their ports and roles types.	f
365	0	It implements a maintain multiple copies of computation tactic.	f
365	1	It supports the concurrent access of data accessors.	f
365	2	It supports the access to persistent information.	f
365	3	It implements a maintain multiple copies of data tactic.	f
366	0	By changing the commonalities that are in the children.	f
366	1	Because the *is-a* relation does not allow reuse of implementation.	f
366	2	By adding, removing, or changing children.	f
366	3	By changing a parent, which will automatically change all the children that inherit from it.	f
367	0	It is necessary design a CRUD matrix to show the dependencies between the persistent information.	f
367	1	It is enough to design a view of the Data Model architectural style at the conceptual level because Facebook information has a very simple structure.	f
367	2	It is not necessary to have any view of the Data Model architectural style because Facebook information has a very simple structure.	f
367	3	It is necessary to design a view of the Data Model architectural style at the physical level to deal with performance issues of the access to data.	f
368	0	Schedule resources.	f
368	1	Maintain multiple copies of data.	f
368	2	Increase resource efficiency.	f
368	3	Reduce overhead.	f
369	0	She encapsulates the connector qualities inside a higher level component.	f
369	1	She delays the complete specification of the connector for development time to have human resources to prototype and measure different implementations.	f
369	2	She does not want to clutter the view with details and trusts the development team to implement the connector according to the required quality level.	f
369	3	The required quality associated with the connector is supported by existing and well-know technology.	f
370	0	She can define a variant of this style with asynchronous communication by allowing the client to register callbacks that the server calls at specific times.	f
370	1	She has to use another architectural style to describe asynchronous communication.	f
370	2	She can use the request/reply connector but the server should not return results to the client.	f
370	3	She can define a variant of this style with asynchronous communication by allowing the server to have the initiative to initiate the interaction.	f
371	0	Allows the analysis of the impact of changes because if a module uses another it will necessarily have to change whenever the used module changes.	f
371	1	Improves testability because if a module uses another then it is only possible to test them together.	f
371	2	Allows incremental development because the possible increments of functionally can be inferred from use dependencies.	f
371	3	Improves testability because it informs the tester about which modules involved in circular use dependencies.	f
372	0	Relates a view of the Uses style with a view of the Data Model style.	f
372	1	Is an extension of a view of the Data Model style.	f
372	2	Allows to avoid redundancy and inconsistency.	f
372	3	Describes the structure of the data used by the system.	f
373	0	Multiple copies of computation and Passive redundancy tactics.	f
373	1	Multiple copies of computation tactic.	f
373	2	Passive redundancy tactic.	f
373	3	Multiple copies of computation and Active redundancy tactics.	f
374	0	A module interface has to be attached to a single component port.	f
374	1	A module interface can be replicated but component ports cannot.	f
374	2	A module interface cannot be replicated but component ports can.	f
374	3	A module interface may be attached to several component ports.	f
375	0	It allows an undefined number of clients.	f
375	1	It is possible to have redundant servers.	f
375	2	Servers can also be clients.	f
375	3	Servers can send a heartbeat to clients.	f
376	0	A module contains the code that executes in a single component and a component executes the code of a single module.	f
376	1	A module contains the code that can execute in several components and a component executes the code of a single module.	f
376	2	A module contains the code that executes in a single component and a component can execute the code of several modules.	f
376	3	A module contains the code that can execute in several components and a component can execute the code of several modules.	f
377	0	Sanity checking.	f
377	1	Exception detection.	f
377	2	Detect intrusion.	f
377	3	Condition monitoring.	f
378	0	It is possible to integrate a new data accessor without changing the other data accessors.	f
378	1	It is possible to change the repository schema without changing the data accessors.	f
378	2	The integration of a new data accessor only implies changes in the data accessors that access the same type of data.	f
378	3	The communication between data accessors does not occur through the repository.	f
379	0	The correctness of the caller module may not depend on the correct implementation of the invoked function in the called module.	f
379	1	The invoked function may not have any input parameter.	f
379	2	The invoked function may not have any output parameter.	f
379	3	The invoked function may not have both any input parameter nor any output parameter.	f
380	0	This means that the modules inside a layer cannot be loosely coupled.	f
380	1	This means that this architectural style emphasizes the quality of performance.	f
380	2	This means that each module cannot use other modules inside the same layer.	f
380	3	This means that the modules inside a layer are likely to be ported to a new application together.	f
381	0	The file transfers follows the same path of nodes used to identify where the file was located.	f
381	1	The peer initiating the request for a file needs to know where the file is located.	f
381	2	If a peer providing a file crashes it is necessary to restart to download the file from the begin.	f
381	3	The price for high scalability and availability is the need to have several replicas of the files to be shared.	f
382	0	Is a Client-Server style because consumers are clients and providers are servers.	f
382	1	Is a Peer-to-Peer style because consumers and providers are peers.	f
382	2	Can use a Service Registry to improve transparency of location of service providers.	f
382	3	Is a Publish-subscriber style because consumers use an enterprise service bus.	f
383	0	In the view there are multiple instances of the `Queue` component.	f
383	1	In the view there are multiple instances of the `Writer` component.	f
383	2	In the view `Receiver` component's `client` port is not associated with an external port.	f
383	3	In the view the `produce` port of a `Receiver` component is attached to the `consume` port of a `Writer` component.	f
384	0	A deployment view.	f
384	1	A work assignment view.	f
384	2	A deployment and a work assignment view.	f
384	3	A install view.	f
385	0	The layered view to support a new specific layer for the customization of the catalog.	f
385	1	The layered view to accommodate a new layer for which kind of catalog, which other layers may use.	f
385	2	The data model view in order to define entities for each kind of catalog.	f
385	3	The data model view in order to define generic entities that can be customized for different kinds of catalogs.	f
386	0	When a peer connects to the network it establishes connections with all other peers in the network.	f
386	1	The behavior described in the sentence can be represented in a view where the dynamic reconfiguration architectural style is used.	f
386	2	When a peer receives a connection it sends all its files to the peer connecting it.	f
386	3	The behavior described in the sentence can be represented in a view where the tier architectural style is used.	f
387	0	It encapsulates applications through well-defined interfaces.	f
387	1	It decouples the coordination of the interaction among applications from the applications themselves.	f
387	2	It improves transparency of location of service providers.	f
387	3	It encapsulates applications through well-defined interfaces, decouples the coordination of the interaction among applications from the applications themselves, and improves transparency of location of service providers.	f
388	0	There is a message passing connector between the `read` port of `Queue` and the `data points access` port of `WebApp`.	f
388	1	There is a interface delegation relation between the `read` port of `Queue` and the `query` port of `Carbon`.	f
388	2	There is a connector between the `producer` port of a `Queue` component and the `client` port of its `Carbon` component.	f
388	3	The `client` ports of `Carbon` and `WebApp` are connected to a `Client` component through the same connector instance.	f
389	0	Deployment style.	f
389	1	Implementation style.	f
389	2	Install style.	f
389	3	Work assignment style.	f
390	0	A change to the uses view to represent that friends can use each other catalog.	f
390	1	A change of the layered view to support different presentations, one for each friend.	f
390	2	A change of the decomposition view to include the responsibilities associated with the access control.	f
390	3	A new aspect view to include the responsibilities associated with the access control.	f
391	0	It applies layers to tiers.	f
391	1	Restrict the communication between components because, for instance, a group of components should be located in the same hardware.	f
391	2	Is an extension of the Client-Server architectural style.	f
391	3	Defines tiers as components.	f
392	0	It enforces the use of a single implementation language among all applications.	f
392	1	The orchestration is in charge of improving the transparent location of service providers.	f
392	2	The enterprise service bus coordinates the execution of several services.	f
392	3	It decouples applications developed for different organizations.	f
393	0	Deployment style.	f
393	1	Implementation style.	f
393	2	Install style.	f
393	3	Work assignment style.	f
394	0	The decomposition view to include a module for the synchronization responsibilities.	f
394	1	The uses view to represent how the mobile device uses the Catalog application.	f
394	2	The layered view to include a layer for each type of device.	f
394	3	The domain layer of the layered view to represent the types of devices.	f
395	0	Memcached can be considered a sub-module of the Store Graphs module.	f
395	1	Memcached can be considered a sub-module of the Present Graphs module.	f
395	2	Memcached can be considered a direct sub-module of the top Graphite module.	f
395	3	Memcached is not a module.	f
396	0	A component can subscribe to events.	f
396	1	All the published events are received by their subscribing components.	f
396	2	The events should be delivered by the same order they are sent.	f
396	3	The set of events types are predefined at initialization time.	f
397	0	But when the filters are executed sequentially the composition power is reduced.	f
397	1	Which improves modifiability, because filters are decoupled through pipes.	f
397	2	But the size of buffers may reduce the composition power.	f
397	3	And filters do not have to agree on the data formats.	f
398	0	Buffering can be considered a sub-module of the Store Graphs module.	f
398	1	Buffering can be considered a sub-module of the Present Graphs module.	f
398	2	Buffering can be considered a direct sub-module of the top Graphite module.	f
398	3	Buffering is not a module.	f
399	0	A work assignment view.	f
399	1	A deployment view.	f
399	2	An install view.	f
399	3	An implementation view.	f
400	0	The layered view to deal with the aspects of portability.	f
400	1	The uses view to show the coupling between the different platforms.	f
400	2	The uses view to show the uses relationships between the different platforms.	f
400	3	The data model view to represent each one of the platforms.	f
401	0	Amazon Silk is more convenient for mobile devices because it does most of the computation in the cloud.	f
401	1	Google Chrome is more convenient for mobile devices because it has an optimized network stack that runs in any kind device.	f
419	1	The \extsc{Parser} module is part of the code executed by the \extsc{: Sheet} component.	f
401	2	Amazon Silk is more convenient for mobile devices because it customizes the number of threads that run in the device.	f
401	3	Google Chrome is more convenient for mobile devices because content delivery is optimized.	f
402	0	There is a ThousandParsec connector.	f
402	1	There is a Read/Write connector which encapsulates a redundant Repository.	f
402	2	There is a Read/Write connector which guarantees that players turns are not lost.	f
402	3	There is a Read/Write connector which guarantees that only the turns of the last two players may be lost.	f
403	0	Supports asynchronous communication to deal with disconnected mode.	f
403	1	Implements an event bus that allows the server to inform the client about new order recommendations.	f
403	2	May loose some of the changes done on the client component.	f
403	3	Has reduced reliability qualities.	f
404	0	The \extsc{ConflictResolution} module is part of the code executed by the \extsc{: TableEditor} component.	f
404	1	The \extsc{ConflictResolution} module is part of the code executed by the \extsc{: Sheet} component.	f
404	2	The code of the \extsc{ConflictResolution} module is executed by a broadcast connector that implements an eventbus between the \extsc{SpreadSheet} components.	f
404	3	The code of the \extsc{ConflictResolution} module is executed in a server component because it needs to be centralized.	f
405	0	An object oriented style is followed.	f
405	1	The business logic is organized around record sets.	f
405	2	Row Data Gateway is the most suitable data source pattern.	f
405	3	A Service Layer should be used to provide an interface for the presentation layer.	f
406	0	In Amazon Silk a request for a web page corresponds to a peer-to-peer interaction between all the web components containing the resources.	f
406	1	In Google Chrome a request for a web page is accomplished by a single access to the internet.	f
406	2	In Amazon Silk a request for a web page corresponds to requesting a service from the amazon cloud.	f
406	3	In Google Chrome a request for a web page aggregates the page on the background before it is sent to the client.	f
407	0	Should be described as a submodule of the RulesSet module.	f
407	1	Should be described as a submodule of but not included in the RulesSet subtree.	f
407	2	Should be described as a submodule of the Design module.	f
407	3	Should not be described as a module because it is a component.	f
408	0	Performance was traded for easy of development.	f
408	1	An iterative development was followed, which allowed more time to develop a connector with good performance in the latter stages of the project.	f
408	2	Performance was traded for the modifiability quality.	f
408	3	An incremental development was followed, which allowed to have the system in production without being necessary to export all the information to the mainframe.	f
409	0	The \extsc{: TableEditor} broadcasts the cursor position through the \extsc{: Sheet}.	f
409	1	An interface delegation is missing in the picture to represent the \extsc{: TableEditor} broadcasting the cursor position through the \extsc{Pub} port.	f
409	2	The \extsc{: Sheet} broadcasts the cursor position through the \extsc{Pub} port.	f
409	3	The \extsc{: TableEditor} broadcasts the cursor position through its \extsc{: StatusCallback} port.	f
410	0	Are responsible for loading the objects they refer to.	f
410	1	Are responsible for the management of transactions, begin and end of transactions.	f
410	2	Contain the business logic.	f
410	3	May not even exist, only record sets are used.	f
411	0	Amazon Silk predicts accesses based on the information gathered for all Silk users.	f
411	1	Google Chrome uses a usability maintain system model tactic.	f
411	2	Amazon Silk predictions are constrained by the amount of information it can store about each user access.	f
411	3	Google Chrome predictions do not require storage in the client-side.	f
412	0	There is a ThousandParsec connector.	f
412	1	There is a Request/Reply connector.	f
412	2	There is a ThousandParsec connector which can be decomposed into a set of components and Request/Reply connectors.	f
412	3	There is an EventBus connector.	f
413	0	Was taken because HTML5 provides better portability qualities.	f
413	1	Was taken because Native applications provide better modifiability qualities.	f
413	2	Was taken because HTML5 provides better usability qualities.	f
413	3	Was taken because Native application provide better support for working offline.	f
414	0	The server implements the \extsc{: Repository} component and the \extsc{: Broadcast} connector.	f
414	1	The server implements the \extsc{: Repository} component.	f
414	2	The server implements the \extsc{: Broadcast} connector.	f
414	3	The server implements the \extsc{SpreadSheet} components	f
415	0	Table Data Gateway and Row Data Gateway.	f
415	1	Row Data Gateway and Active Record.	f
415	2	Row Data Gateway and Data Mapper.	f
415	3	Active Record and Data Mapper.	f
416	0	Amazon Silk explicitly caches pages on the browser to optimize accesses.	f
416	1	Google Chrome predictor takes into consideration the amount of available cache.	f
416	2	Amazon Silk cache is not shared between different users of the service to support confidentiality.	f
416	3	Google Chrome cache is shared among the different users of a desktop machine.	f
417	0	As a specialization of the RulesSet module.	f
417	1	As a submodule of the RulesSet module.	f
417	2	As a module but not included in the RulesSet subtree.	f
417	3	As a specialization of the Design module.	f
418	0	Two distinct unidirectional connectors.	f
418	1	A single bidirectional connector.	f
418	2	Three distinct unidirectional connectors.	f
418	3	A single unidirectional connector.	f
419	0	The \extsc{Parser} module is part of the code executed by the \extsc{: TableEditor} component.	f
419	2	The code of the \extsc{Parser} module is executed by a repository component, which is not represented in the view.	f
419	3	The code of the \extsc{Parser} module is executed by both, the \extsc{: Sheet} and the repository components (the latter is not visible in the view).	f
420	0	Table Data Gateway and Row Data Gateway.	f
420	1	Row Data Gateway and Active Record.	f
420	2	Row Data Gateway and Data Mapper.	f
420	3	Active Record and Data Mapper.	f
421	0	This law highlights the impact of the business on the architecture	f
421	1	This law can be seen as an example of the architecture influence cycle	f
421	2	This law states that architectures impact on the structure of the organization	f
421	3	This law does not apply to the design of architectures	f
422	0	Becomes unavailable for clients if there is a fault in the hardware of web server (srv-web)	f
422	1	Becomes unavailable for clients if there is a fault in the hardware of database server (srv-db)	f
422	2	Becomes unavailable for clients if there is a fault in the hardware of service server (srv-opc)	f
422	3	Becomes unavailable for banks if there is a fault in the hardware of service server (srv-opc)	f
423	0	Performance is a quality that you have to address at the end of the development process	f
423	1	There is no system which can have good performance and be easily maintainable	f
423	2	We have to distinguish architectural performance from opportunistic performance	f
423	3	The system performance quality has impact on the performance of the execution of tests	f
424	0	Typically have a software architecture that results from the common knowledge about the system that is shared among the team members	f
424	1	Do not have a software architecture, because in agile methodologies there is no architectural design phase	f
424	2	Do not have a software architecture, because the practice of refactoring allows changing every part of the system easily	f
424	3	May have a software architecture, but that architecture is not known because it was neither designed nor documented	f
425	0	Describing what are the qualities that the system should possess	f
425	1	Describing a set of steps that a user of the system must perform to accomplish some task	f
425	2	Describing a use case for the system that makes clear what should be the system's responses to each of the user's inputs	f
425	3	Describing the system's features by way of different usage scenarios for it, in which users play the role of actors	f
426	0	They are both modules	f
426	1	They are both components	f
426	2	The *Request Node* is a component and the *Cache* is a module	f
426	3	The *Request Node* is a module and the *Cache* is a component	f
427	0	Retry	f
427	1	Active redundancy	f
427	2	Ignore faulty behaviour	f
427	3	Ping/Echo	f
428	0	Consider the requirements not realistic	f
428	1	Apply tactics of defer binding to allow the addition of the new sources of information in initialization time	f
428	2	Identify what should be the common and specific parts of the module responsible for the interaction with the external sources, before interacting again with the stakeholders	f
428	3	Consider this requirement as a non architecturally significant requirement	f
429	0	Increasing performance and availability	f
429	1	Increasing availability and decreasing performance	f
429	2	Increasing performance and decreasing availability	f
429	3	Increasing performance, scalability and availability	f
430	0	Due to its configuration strategy Apache has better performance	f
430	1	Performance was the main concern of the design of the configuration strategy in Nginx	f
430	2	Apache emphasizes the usability quality for system administrators by allowing to split the configuration by different files	f
430	3	Nginx emphasizes the usability quality for system administrators by reducing the number or errors	f
431	0	The stimulus is to integrate reports from a variety of test tools	f
431	1	The response is JUnit XML standard	f
431	2	The source of the stimulus is Sun	f
431	3	The measure of the response is a robust open-source community associated with it	f
432	0	Modifiability and Performance	f
432	1	Availability and Modifiability	f
432	2	Performance and Reliability	f
432	3	Reliability and Security	f
433	0	We should always satisfy in the first place the requirements of more important stakeholders (such as the client)	f
433	1	If no order was established among them, we would not know from where should we start the design process	f
433	2	If one of the stakeholders complains that his requirement is not satisfied, we may explain to him that there were other more important requirements first	f
433	3	When it is not possible to satisfy all of the requirements optimally, we should be aware of their relative importance so that we may find a solution that corresponds to a satisfactory trade-off	f
434	0	A view of the Data Model style	f
434	1	A view of the Layers style	f
434	2	A view of the Decomposition style	f
434	3	A view of the Uses style	f
435	0	The Decomposition style	f
435	1	The Deployment style	f
435	2	The Uses style	f
435	3	The Work-assignment style	f
436	0	Layer 1	f
436	1	Layer 4	f
436	2	In a layered architecture all layers are equally modifiable	f
436	3	Modifiability is not made easier by a layered architecture	f
437	0	It makes no sense to use views of the module viewtype, as they give only a static view of the system	f
437	1	You should use only views of the component-and-connector viewtype, which describe the dynamic aspects of the system	f
437	2	You may need to use views of the three viewtypes	f
457	1	A view of the Layers style	f
437	3	The only views that are relevant to performance requirements are views of the Deployment style	f
438	0	The Work Assignment style	f
438	1	The Client-Server style	f
438	2	The Deployment style	f
438	3	The Communicating Processes style	f
439	0	The Shared Data style	f
439	1	The Pipes-and-filters style	f
439	2	The Publish-subscribe style	f
439	3	The Client-Server style	f
440	0	The Peer-to-Peer style	f
440	1	The Pipes-and-filters style	f
440	2	The Client-Server style	f
440	3	The Publish-subscribe style	f
441	0	Components are allocated to persons and teams	f
441	1	Modules are allocated to persons and teams	f
441	2	Components and modules are allocated to persons and teams	f
441	3	None of the above	f
442	0	Launching a new process for processing each request is too expensive	f
442	1	Using threads ensures that the processing of each request is isolated from the remaining requests	f
442	2	With this approach they may use all of the available cores in multiprocessor machines	f
442	3	They are used for implementing enterprise applications that typically have complex domain logic and, by using threads, it is easier to reuse code from one request to another	f
443	0	An increase resource efficiency tactic	f
443	1	A schedule resources tactic	f
443	2	A multiple copies of computation tactic	f
443	3	A manage sampling rate tactic	f
444	0	A decomposition view which represent the module for compare-and-set	f
444	1	A client-server view with non-blocking connectors for the interaction between threads and core data structures	f
444	2	A communicating-processes view with non-blocking connectors for the interaction between threads and core data structures	f
444	3	A deployment view which allocate threads to the multi-cores	f
445	0	In the Deployment view, because the presentation component is now executing in a different place	f
445	1	In the component-and-connector view, because the connector between the web client and the web server has to change	f
445	2	In the Layer view, because the order of the layers will have to change	f
445	3	In the mapping between layers of the system and the components where they execute	f
446	0	The left part of the figure represents a three-layered architecture	f
446	1	The most relevant architectural style in the right part of the figure is shared-data	f
446	2	The system represented in the left part of the figure tends to be non-transactional	f
446	3	The system represented in the right part of the figure tends to have good modifiability	f
447	0	Service-oriented architecture to express how clients can access the services	f
447	1	Client-server to express how multiple clients can access the applications	f
447	2	Tiers to express that different applications define their own contexts	f
447	3	Decomposition to express the different responsibilities assigned to each application	f
448	0	The solution where the application is responsible for the eviction has better availability	f
448	1	The solution where the cache is responsible for the eviction has better availability	f
448	2	The solution where the application is responsible for the eviction has better modifiability	f
448	3	The solution where the cache is responsible for the eviction has better performance	f
449	0	Performance	f
449	1	Interoperability	f
449	2	Reliability	f
449	3	Security	f
450	0	Client-server	f
450	1	Communicating Processes	f
450	2	Repository	f
450	3	Pipes-and-Filters	f
451	0	The stimulus is to integrate reports from a variety of test tools	f
451	1	The response is JUnit XML standard	f
451	2	The source of the stimulus is Sun	f
451	3	The measure of the response is a robust open-source community associated with it	f
452	0	Modifiability and Performance	f
452	1	Availability and Modifiability	f
452	2	Performance and Reliability	f
452	3	Reliability and Security	f
453	0	In the Deployment view, because the presentation component is now executing in a different place	f
453	1	In the component-and-connector view, because the connector between the web client and the web server has to change	f
453	2	In the Layer view, because the order of the layers will have to change	f
453	3	In the mapping between layers of the system and the components where they execute	f
454	0	The left part of the figure represents a three-layered architecture	f
454	1	The most relevant architectural style in the right part of the figure is shared-data	f
454	2	The system represented in the left part of the figure tends to be non-transactional	f
454	3	The system represented in the right part of the figure tends to have good modifiability	f
455	0	Service-oriented architecture to express how clients can access the services	f
455	1	Client-server to express how multiple clients can access the applications	f
455	2	Tiers to express that different applications define their own contexts	f
455	3	Decomposition to express the different responsibilities assigned to each application	f
456	0	We should always satisfy in the first place the requirements of more important stakeholders (such as the client)	f
456	1	If no order was established among them, we would not know from where should we start the design process	f
456	2	If one of the stakeholders complains that his requirement is not satisfied, we may explain to him that there were other more important requirements first	f
456	3	When it is not possible to satisfy all of the requirements optimally, we should be aware of their relative importance so that we may find a solution that corresponds to a satisfactory trade-off	f
457	0	A view of the Data Model style	f
457	2	A view of the Decomposition style	f
457	3	A view of the Uses style	f
458	0	The Decomposition style	f
458	1	The Deployment style	f
458	2	The Uses style	f
458	3	The Work-assignment style	f
459	0	Layer 1	f
459	1	Layer 4	f
459	2	In a layered architecture all layers are equally modifiable	f
459	3	Modifiability is not made easier by a layered architecture	f
460	0	Retry	f
460	1	Active redundancy	f
460	2	Ignore faulty behaviour	f
460	3	Ping/Echo	f
461	0	Consider the requirements not realistic	f
461	1	Apply tactics of defer binding to allow the addition of the new sources of information in initialization time	f
461	2	Identify what should be the common and specific parts of the module responsible for the interaction with the external sources, before interacting again with the stakeholders	f
461	3	Consider this requirement as a non architecturally significant requirement	f
462	0	Increasing performance and availability	f
462	1	Increasing availability and decreasing performance	f
462	2	Increasing performance and decreasing availability	f
462	3	Increasing performance, scalability and availability	f
463	0	Due to its configuration strategy Apache has better performance	f
463	1	Performance was the main concern of the design of the configuration strategy in Nginx	f
463	2	Apache emphasizes the usability quality for system administrators by allowing to split the configuration by different files	f
463	3	Nginx emphasizes the usability quality for system administrators by reducing the number or errors	f
464	0	It makes no sense to use views of the module viewtype, as they give only a static view of the system	f
464	1	You should use only views of the component-and-connector viewtype, which describe the dynamic aspects of the system	f
464	2	You may need to use views of the three viewtypes	f
464	3	The only views that are relevant to performance requirements are views of the Deployment style	f
465	0	The Work Assignment style	f
465	1	The Client-Server style	f
465	2	The Deployment style	f
465	3	The Communicating Processes style	f
466	0	The Shared Data style	f
466	1	The Pipes-and-filters style	f
466	2	The Publish-subscribe style	f
466	3	The Client-Server style	f
467	0	The Peer-to-Peer style	f
467	1	The Pipes-and-filters style	f
467	2	The Client-Server style	f
467	3	The Publish-subscribe style	f
468	0	Components are allocated to persons and teams	f
468	1	Modules are allocated to persons and teams	f
468	2	Components and modules are allocated to persons and teams	f
468	3	None of the above	f
469	0	Launching a new process for processing each request is too expensive	f
469	1	Using threads ensures that the processing of each request is isolated from the remaining requests	f
469	2	With this approach they may use all of the available cores in multiprocessor machines	f
469	3	They are used for implementing enterprise applications that typically have complex domain logic and, by using threads, it is easier to reuse code from one request to another	f
470	0	An increase resource efficiency tactic	f
470	1	A schedule resources tactic	f
470	2	A multiple copies of computation tactic	f
470	3	A manage sampling rate tactic	f
471	0	A decomposition view which represent the module for compare-and-set	f
471	1	A client-server view with non-blocking connectors for the interaction between threads and core data structures	f
471	2	A communicating-processes view with non-blocking connectors for the interaction between threads and core data structures	f
471	3	A deployment view which allocate threads to the multi-cores	f
472	0	The solution where the application is responsible for the eviction has better availability	f
472	1	The solution where the cache is responsible for the eviction has better availability	f
472	2	The solution where the application is responsible for the eviction has better modifiability	f
472	3	The solution where the cache is responsible for the eviction has better performance	f
473	0	Performance	f
473	1	Interoperability	f
473	2	Reliability	f
473	3	Security	f
474	0	Client-server	f
474	1	Communicating Processes	f
474	2	Repository	f
474	3	Pipes-and-Filters	f
475	0	This law highlights the impact of the business on the architecture	f
475	1	This law can be seen as an example of the architecture influence cycle	f
475	2	This law states that architectures impact on the structure of the organization	f
475	3	This law does not apply to the design of architectures	f
476	0	Becomes unavailable for clients if there is a fault in the hardware of web server (srv-web)	f
476	1	Becomes unavailable for clients if there is a fault in the hardware of database server (srv-db)	f
476	2	Becomes unavailable for clients if there is a fault in the hardware of service server (srv-opc)	f
476	3	Becomes unavailable for banks if there is a fault in the hardware of service server (srv-opc)	f
477	0	Performance is a quality that you have to address at the end of the development process	f
477	1	There is no system which can have good performance and be easily maintainable	f
477	2	We have to distinguish architectural performance from opportunistic performance	f
477	3	The system performance quality has impact on the performance of the execution of tests	f
478	0	Typically have a software architecture that results from the common knowledge about the system that is shared among the team members	f
478	1	Do not have a software architecture, because in agile methodologies there is no architectural design phase	f
478	2	Do not have a software architecture, because the practice of refactoring allows changing every part of the system easily	f
478	3	May have a software architecture, but that architecture is not known because it was neither designed nor documented	f
479	0	Describing what are the qualities that the system should possess	f
479	1	Describing a set of steps that a user of the system must perform to accomplish some task	f
479	2	Describing a use case for the system that makes clear what should be the system's responses to each of the user's inputs	f
479	3	Describing the system's features by way of different usage scenarios for it, in which users play the role of actors	f
480	0	They are both modules	f
480	1	They are both components	f
480	2	The *Request Node* is a component and the *Cache* is a module	f
480	3	The *Request Node* is a module and the *Cache* is a component	f
481	0	Is useful only if done (even if only partially) before the system's implementation is concluded, given that the architecture is used for restricting the implementation	f
481	1	Is useful only if done (even if only partially) before the system's implementation is concluded, because if the system is already implemented, its implementation uniquely determines the architecture	f
481	2	Is useful only if done (even if only partially) before the system passes all of the acceptance tests by the client, given that no more requirements changes will take place after that time	f
481	3	Is useful even if the implementation is concluded and the system has entered the maintenance phase	f
482	0	The most important requirements (both functional and qualities) that the system must achieve	f
482	1	The components that manage the communication between the remaining elements in the system	f
482	2	The stakeholders that drive the development of the system	f
482	3	The tactics that satisfy the most important requirements for the system	f
483	0	Depends mostly on the system's functional requirements	f
483	1	Depends more on the architect's experience than on anything else	f
483	2	Should not depend on the skills of the developing team	f
483	3	None of the above	f
484	0	Communicating processes	f
484	1	Communicating processes and shared-data	f
484	2	Communicating processes, shared-data and service-oriented architecture	f
484	3	Communicating processes, shared-data, service-oriented architecture, and peer-to-peer	f
485	0	A module may contain code from different components	f
485	1	A component may execute code from different modules	f
485	2	A module may execute code from different components	f
485	3	A component may contain code from different modules	f
486	0	They describe general requirements that all systems should try to satisfy	f
486	1	They allow us to build a more robust architecture that satisfies less specific requirements, which address a wider range of situations that may happen in the system	f
486	2	They identify the most important requirements that the system should satisfy	f
486	3	They guide us in the requirement elicitation process with the system's stakeholders	f
487	0	Ping/Echo	f
487	1	Heartbeat	f
487	2	Voting	f
487	3	Removal from Service	f
488	0	Have high throughput	f
488	1	Have low latency	f
488	2	Allow many simultaneous users	f
488	3	May be easily changed to increase their performance	f
489	0	Launch a new process for processing each request	f
489	1	Spawn a new thread for processing each request	f
489	2	Put the requests into a queue and schedule their processing	f
489	3	Buy a server with high processing power	f
490	0	Increasing performance and availability	f
490	1	Increasing availability and decreasing performance	f
490	2	Increasing performance and decreasing availability	f
490	3	Increasing scalability and availability	f
491	0	Make a business case for the system	f
491	1	Understand the architecturally significant requirements	f
491	2	The system design	f
491	3	Documenting and communicating the architecture	f
492	0	Modifiability	f
492	1	Availability	f
492	2	Testability	f
492	3	Interoperability	f
493	0	Performance	f
493	1	Modifiability	f
493	2	Usability	f
493	3	Security	f
494	0	A Deployment view	f
494	1	A Component-and-Connector view	f
494	2	A Uses view	f
494	3	A Decomposition view	f
495	0	There is a high level of communication between the several modules, and this will cause the system to have a low performance	f
495	1	It is not possible to install the system in more than one machine	f
495	2	It is not possible to develop and to test the system incrementally	f
495	3	It is very hard to explain what the system does, because we need to understand all the execution fluxes	f
496	0	Can use the operations defined in any of the system's modules	f
496	1	Can use the operations defined in the lower layer, but not the ones defined in the upper layer	f
496	2	Can use the operations defined in the upper layer, but not the ones defined in the lower layer	f
496	3	Should use some operation defined in the lower layer	f
497	0	Represent the network infrastructure that allows components to communicate with each other	f
497	1	May, on another view of the system, be represented by a set of components and connectors	f
497	2	Represent the dependency relations that exist among the various components	f
497	3	Represent the control flow during a execution of the system	f
498	0	The Peer-to-Peer style	f
498	1	The Client-Server style	f
498	2	The Shared-Data style	f
498	3	The Publish-subscribe style	f
499	0	The Shared data style	f
499	1	The Pipes-and-filters style	f
499	2	The Peer-to-Peer style	f
499	3	The Communicating Processes style	f
500	0	The Decomposition style	f
500	1	The Client-Server style	f
500	2	The Service Oriented Architecture style	f
500	3	The Communicating Processes style	f
501	0	Analysing the performance of the system	f
501	1	Planning incremental releases of the system	f
501	2	Estimating the effort needed to implement the system	f
501	3	Analysing the system's portability and reusability	f
502	0	By interleaving the various processing phases of each request in a sequential process	f
502	1	By executing in parallel each of the phases of the pipeline corresponding to the processing of a request	f
502	2	By executing in parallel the processing of the various requests	f
502	3	By processing completely each request before moving to the next one, in a sequential process	f
503	0	Shared-data and Communicating-Processes	f
503	1	Communicating-Processes	f
503	2	Tiers	f
503	3	Client-Server and Shared-data	f
504	0	You need to change the decomposition view to represent modules with the responsibilities associated with the DSL	f
504	1	You need to design a client-server view representing the interaction between the DSL and the servers that execute its commands	f
504	2	You need to design an implementation view to allow system administrators configure the builds	f
504	3	You do not need to change the views because the DSL does not have any architectural impact	f
505	0	A uses view which represent modules for the externalizers	f
505	1	A client-server view which represent the byte stream for transmission across a network	f
505	2	A connector that has the serialization and de-serialization speed qualities	f
505	3	A decomposition view which contains the serialization/de-serilization modules	f
506	0	A *web services* architecture	f
506	1	A Client-Server architecture, where the *mashup* is the client and the various sources are the servers	f
506	2	A layered architecture, where the access to the various sources is the responsibility of the bottommost layer	f
506	3	A Publish-Subscribe architecture, where the various sources publish events with the changes made and the *mashup* subscribes those events	f
507	0	The main quality of the system in the right part of the figure is scalability	f
507	1	The main quality of the system in the left part of the figure is scalability	f
507	2	The main quality of the system in the right part of the figure is ease of development	f
507	3	The main quality of the system in the left part of the figure is to promote cross-functional teams	f
508	0	Data model to express the stored data formats	f
508	1	Decomposition to express the services interfaces	f
508	2	Aspects to express the evolution of service interfaces	f
508	3	Publish-subscribe to express how data is shared between services	f
509	0	Performance because all requests will be processed faster	f
509	1	Performance because it allows the processing of more requests per unit of time	f
509	2	Availability because even if PartB1 is not available partB2 can be provided	f
509	3	Reliability because a single correct read is used to responde to several requests	f
510	0	Usability and Performance	f
510	1	Usability	f
510	2	Performance	f
510	3	Testability	f
511	0	The Decomposition style	f
511	1	The Client-Server style	f
511	2	The Service Oriented Architecture style	f
511	3	The Communicating Processes style	f
512	0	Analysing the performance of the system	f
512	1	Planning incremental releases of the system	f
512	2	Estimating the effort needed to implement the system	f
512	3	Analysing the system's portability and reusability	f
513	0	By interleaving the various processing phases of each request in a sequential process	f
513	1	By executing in parallel each of the phases of the pipeline corresponding to the processing of a request	f
513	2	By executing in parallel the processing of the various requests	f
513	3	By processing completely each request before moving to the next one, in a sequential process	f
514	0	You need to change the decomposition view to represent modules with the responsibilities associated with the DSL	f
514	1	You need to design a client-server view representing the interaction between the DSL and the servers that execute its commands	f
514	2	You need to design an implementation view to allow system administrators configure the builds	f
514	3	You do not need to change the views because the DSL does not have any architectural impact	f
515	0	A uses view which represent modules for the externalizers	f
515	1	A client-server view which represent the byte stream for transmission across a network	f
515	2	A connector that has the serialization and de-serialization speed qualities	f
515	3	A decomposition view which contains the serialization/de-serilization modules	f
516	0	A *web services* architecture	f
516	1	A Client-Server architecture, where the *mashup* is the client and the various sources are the servers	f
516	2	A layered architecture, where the access to the various sources is the responsibility of the bottommost layer	f
516	3	A Publish-Subscribe architecture, where the various sources publish events with the changes made and the *mashup* subscribes those events	f
517	0	The main quality of the system in the right part of the figure is scalability	f
517	1	The main quality of the system in the left part of the figure is scalability	f
517	2	The main quality of the system in the right part of the figure is ease of development	f
517	3	The main quality of the system in the left part of the figure is to promote cross-functional teams	f
518	0	Data model to express the stored data formats	f
518	1	Decomposition to express the services interfaces	f
518	2	Aspects to express the evolution of service interfaces	f
518	3	Publish-subscribe to express how data is shared between services	f
519	0	Performance because all requests will be processed faster	f
519	1	Performance because it allows the processing of more requests per unit of time	f
519	2	Availability because even if PartB1 is not available partB2 can be provided	f
519	3	Reliability because a single correct read is used to responde to several requests	f
520	0	Usability and Performance	f
520	1	Usability	f
520	2	Performance	f
520	3	Testability	f
521	0	Shared-data and Communicating-Processes	f
521	1	Communicating-Processes	f
521	2	Tiers	f
521	3	Client-Server and Shared-data	f
522	0	Is useful only if done (even if only partially) before the system's implementation is concluded, given that the architecture is used for restricting the implementation	f
522	1	Is useful only if done (even if only partially) before the system's implementation is concluded, because if the system is already implemented, its implementation uniquely determines the architecture	f
522	2	Is useful only if done (even if only partially) before the system passes all of the acceptance tests by the client, given that no more requirements changes will take place after that time	f
522	3	Is useful even if the implementation is concluded and the system has entered the maintenance phase	f
523	0	The most important requirements (both functional and qualities) that the system must achieve	f
523	1	The components that manage the communication between the remaining elements in the system	f
523	2	The stakeholders that drive the development of the system	f
523	3	The tactics that satisfy the most important requirements for the system	f
524	0	Depends mostly on the system's functional requirements	f
524	1	Depends more on the architect's experience than on anything else	f
524	2	Should not depend on the skills of the developing team	f
524	3	None of the above	f
525	0	Communicating processes	f
525	1	Communicating processes and shared-data	f
525	2	Communicating processes, shared-data and service-oriented architecture	f
525	3	Communicating processes, shared-data, service-oriented architecture, and peer-to-peer	f
526	0	A module may contain code from different components	f
526	1	A component may execute code from different modules	f
526	2	A module may execute code from different components	f
526	3	A component may contain code from different modules	f
527	0	They describe general requirements that all systems should try to satisfy	f
527	1	They allow us to build a more robust architecture that satisfies less specific requirements, which address a wider range of situations that may happen in the system	f
527	2	They identify the most important requirements that the system should satisfy	f
527	3	They guide us in the requirement elicitation process with the system's stakeholders	f
528	0	There is a high level of communication between the several modules, and this will cause the system to have a low performance	f
528	1	It is not possible to install the system in more than one machine	f
528	2	It is not possible to develop and to test the system incrementally	f
528	3	It is very hard to explain what the system does, because we need to understand all the execution fluxes	f
529	0	Can use the operations defined in any of the system's modules	f
529	1	Can use the operations defined in the lower layer, but not the ones defined in the upper layer	f
529	2	Can use the operations defined in the upper layer, but not the ones defined in the lower layer	f
529	3	Should use some operation defined in the lower layer	f
530	0	Represent the network infrastructure that allows components to communicate with each other	f
530	1	May, on another view of the system, be represented by a set of components and connectors	f
530	2	Represent the dependency relations that exist among the various components	f
530	3	Represent the control flow during a execution of the system	f
531	0	The Peer-to-Peer style	f
531	1	The Client-Server style	f
531	2	The Shared-Data style	f
531	3	The Publish-subscribe style	f
532	0	The Shared data style	f
532	1	The Pipes-and-filters style	f
532	2	The Peer-to-Peer style	f
532	3	The Communicating Processes style	f
533	0	Ping/Echo	f
533	1	Heartbeat	f
533	2	Voting	f
533	3	Removal from Service	f
534	0	Have high throughput	f
534	1	Have low latency	f
534	2	Allow many simultaneous users	f
534	3	May be easily changed to increase their performance	f
535	0	Launch a new process for processing each request	f
535	1	Spawn a new thread for processing each request	f
535	2	Put the requests into a queue and schedule their processing	f
535	3	Buy a server with high processing power	f
536	0	A Deployment view	f
536	1	A Component-and-Connector view	f
536	2	A Uses view	f
536	3	A Decomposition view	f
537	0	Increasing performance and availability	f
537	1	Increasing availability and decreasing performance	f
1069	3	The Client-Server style	f
537	2	Increasing performance and decreasing availability	f
537	3	Increasing scalability and availability	f
538	0	Make a business case for the system	f
538	1	Understand the architecturally significant requirements	f
538	2	The system design	f
538	3	Documenting and communicating the architecture	f
539	0	Modifiability	f
539	1	Availability	f
539	2	Testability	f
539	3	Interoperability	f
540	0	Performance	f
540	1	Modifiability	f
540	2	Usability	f
540	3	Security	f
541	0	The business aspects of the system are for business architects, not the software architects.	f
541	1	Dealing with the technological aspects of the system should be delayed to the implementation stage of development.	f
541	2	The modeling of a system is not part of the software architect duties.	f
541	3	The level of abstraction of the system an architect works may vary.	f
542	0	Martin Fowler disagrees with this definition because we should delay the design decisions and focus on features first.	f
542	1	Martin Fowler complains about this definition because the early decisions are not necessarily the right ones.	f
542	2	Martin Fowler complains about this definition because architecture should stress flexibility which can only be necessary later.	f
542	3	Martin Fowler disagrees with this definition because to design an architecture it is not necessary to make any decision.	f
543	0	This view highlights the availability of the system.	f
543	1	This view highlights the performance of the `Image File Storage`.	f
543	2	This view highlights the different performance levels for `upload` and `dowload` operations.	f
543	3	This view highlights the scalability of `upload` and `dowload` operations.	f
544	0	Should be avoided because scenarios should describe very concrete situations.	f
544	1	Enumerates, for each kind of quality attribute, all the possible types of source of stimulus, stimulus, etc.	f
544	2	Can omit some of the elements like, for instance, the environment, if they are not relevant for the general scenario.	f
544	3	Is a very reusable scenario that can be used in many different concrete situations.	f
545	0	Can be applied to any kind of availability scenario.	f
545	1	Is useful to support scenarios where the stimulus is an omission.	f
545	2	Guarantees that the system will not become unavailable.	f
545	3	Reduces the availability scenario response time because the request occurs twice.	f
546	0	Should be avoided because scenarios should describe very concrete situations.	f
546	1	Enumerates, for each kind of quality attribute, all the possible types of source of stimulus, stimulus, etc.	f
546	2	Can omit some of the elements like, for instance, the environment, if they are not relevant for the general scenario.	f
546	3	Is a very reusable scenario that can be used in many different concrete situations.	f
547	0	Can be applied to any kind of availability scenario.	f
547	1	Is useful to support scenarios where the stimulus is an omission.	f
547	2	Guarantees that the system will not become unavailable.	f
547	3	Reduces the availability scenario response time because the request occurs twice.	f
548	0	The business aspects of the system are for business architects, not the software architects.	f
548	1	Dealing with the technological aspects of the system should be delayed to the implementation stage of development.	f
548	2	The modeling of a system is not part of the software architect duties.	f
548	3	The level of abstraction of the system an architect works may vary.	f
549	0	Martin Fowler disagrees with this definition because we should delay the design decisions and focus on features first.	f
549	1	Martin Fowler complains about this definition because the early decisions are not necessarily the right ones.	f
549	2	Martin Fowler complains about this definition because architecture should stress flexibility which can only be necessary later.	f
549	3	Martin Fowler disagrees with this definition because to design an architecture it is not necessary to make any decision.	f
550	0	This view highlights the availability of the system.	f
550	1	This view highlights the performance of the `Image File Storage`.	f
550	2	This view highlights the different performance levels for `upload` and `dowload` operations.	f
550	3	This view highlights the scalability of `upload` and `dowload` operations.	f
551	0	This is a case of an architectural influence cycle where the feedback cycle resulted in changes on the business.	f
551	1	This is a case of an architectural influence cycle where the feedback cycle resulted in changes on the project.	f
551	2	This is a case of an architectural influence cycle where the feedback cycle resulted in changes on the business and project.	f
551	3	This is a case of an architectural influence cycle without feedback.	f
552	0	This shared understanding can be represented by a set of architectural views.	f
552	1	This shared understanding includes the architecturally significant requirements.	f
552	2	The system algorithms should be part of the shared understanding.	f
552	3	The shared understanding describes the system from a high-level perspective.	f
553	0	This view highlights the security of the system.	f
553	1	This view highlights the scalability of `upload` and `dowload` operations.	f
553	2	This view highlights the scalability of storage.	f
553	3	This view highlights the scalability of `upload` and `dowload` operations, and of storage.	f
554	0	The exchange of information is the stimulus.	f
554	1	The request to adapt an interface is the stimulus.	f
554	2	The design of a reusable interface is the stimulus.	f
554	3	The data input to the system is the stimulus.	f
555	0	These tactics cannot not be applied in conjunction with the self-test tactic.	f
1088	1	The Pipes-and-filters style	f
555	1	These tactics are used to prevent the occurence of a fault.	f
555	2	Heartbeat is more scalable than ping/echo because the monitor does not need to know in advance the addresses of the components.	f
555	3	In ping/echo the components have the initiative to start the interaction.	f
556	0	These tactics cannot not be applied in conjunction with the self-test tactic.	f
556	1	These tactics are used to prevent the occurence of a fault.	f
556	2	Heartbeat is more scalable than ping/echo because the monitor does not need to know in advance the addresses of the components.	f
556	3	In ping/echo the components have the initiative to start the interaction.	f
557	0	This is a case of an architectural influence cycle where the feedback cycle resulted in changes on the business.	f
557	1	This is a case of an architectural influence cycle where the feedback cycle resulted in changes on the project.	f
557	2	This is a case of an architectural influence cycle where the feedback cycle resulted in changes on the business and project.	f
557	3	This is a case of an architectural influence cycle without feedback.	f
558	0	This view highlights the security of the system.	f
558	1	This view highlights the scalability of `upload` and `dowload` operations.	f
558	2	This view highlights the scalability of storage.	f
558	3	This view highlights the scalability of `upload` and `dowload` operations, and of storage.	f
559	0	This shared understanding can be represented by a set of architectural views.	f
559	1	This shared understanding includes the architecturally significant requirements.	f
559	2	The system algorithms should be part of the shared understanding.	f
559	3	The shared understanding describes the system from a high-level perspective.	f
560	0	The exchange of information is the stimulus.	f
560	1	The request to adapt an interface is the stimulus.	f
560	2	The design of a reusable interface is the stimulus.	f
560	3	The data input to the system is the stimulus.	f
561	0	Design an architectural solution together with the stakeholders to be sure that everybody agrees on the resolution of conflits.	f
561	1	Solve the conflicts between requirements by deciding on the best trad-offs the system should support.	f
561	2	Facilitate the communication among the stakeholders such that they can decide on what are the architecturally significant requirements.	f
561	3	Design an architecture that supports all the conflicting requirements and present it to the stakeholders.	f
562	0	The set of structures is needed to support different levels of performance for the system.	f
562	1	To reason about a system is to verify whether the architecturally significant requirements are considered by the architecture.	f
562	2	The hardware is an example of a software element.	f
562	3	There isn't any relation between the properties of the software elements and the ability to reason about the system.	f
563	0	This view highlights the availability of the `Image File Storage`.	f
563	1	This view highlights the performance of the `download` operations.	f
563	2	This view highlights the performance of `upload` operations.	f
563	3	This view highlights the scalability of `upload` and `dowload` operations.	f
564	0	However, functional requirements do not have any impact on the architecture because the systemic qualities of an architecture are non-functional.	f
564	1	The functional requirements have a large impact on the definition of views of the component-and-connector viewtype because each component executes a functionality.	f
564	2	The functional requirements have a large impact on the definition of views of the module viewtype because they are used to define the high cohesion and low coupling of modules.	f
564	3	The functional requirements can be considered as constraints on the software architecture design.	f
565	0	Active redundancy can be used together with a voting tactic to detect and recover from faults.	f
565	1	These tactics are used to prevent the occurence of a fault.	f
565	2	Spare guarantees immediate recover.	f
565	3	Passive redundancy does not work with non-deterministic behavior of request's execution.	f
566	0	This view highlights the availability of the `Image File Storage`.	f
566	1	This view highlights the performance of the `download` operations.	f
566	2	This view highlights the performance of `upload` operations.	f
566	3	This view highlights the scalability of `upload` and `dowload` operations.	f
567	0	However, functional requirements do not have any impact on the architecture because the systemic qualities of an architecture are non-functional.	f
567	1	The functional requirements have a large impact on the definition of views of the component-and-connector viewtype because each component executes a functionality.	f
567	2	The functional requirements have a large impact on the definition of views of the module viewtype because they are used to define the high cohesion and low coupling of modules.	f
567	3	The functional requirements can be considered as constraints on the software architecture design.	f
568	0	Design an architectural solution together with the stakeholders to be sure that everybody agrees on the resolution of conflits.	f
568	1	Solve the conflicts between requirements by deciding on the best trad-offs the system should support.	f
568	2	Facilitate the communication among the stakeholders such that they can decide on what are the architecturally significant requirements.	f
568	3	Design an architecture that supports all the conflicting requirements and present it to the stakeholders.	f
569	0	The set of structures is needed to support different levels of performance for the system.	f
569	1	To reason about a system is to verify whether the architecturally significant requirements are considered by the architecture.	f
569	2	The hardware is an example of a software element.	f
569	3	There isn't any relation between the properties of the software elements and the ability to reason about the system.	f
570	0	Active redundancy can be used together with a voting tactic to detect and recover from faults.	f
570	1	These tactics are used to prevent the occurence of a fault.	f
570	2	Spare guarantees immediate recover.	f
570	3	Passive redundancy does not work with non-deterministic behavior of request's execution.	f
571	0	Manage sampling rate.	f
571	1	Limit event response.	f
571	2	Prioritize events.	f
571	3	Bound execution time.	f
572	0	Has as main goal the reduction of the modules' size.	f
572	1	Results in the creation of a third module that does not have to change when any of the original modules are changed.	f
572	2	Increases the cohesion between the two modules.	f
572	3	Cannot be used together with the Reduce Overhead performance tactic.	f
573	0	In each iteration one or more architecturally significant requirements are used to decompose a software element of the system design.	f
573	1	The architect cannot backtrack the decomposition decisions she made.	f
573	2	During the design process the number of architecturally significant requirements cannot change.	f
573	3	Contraints cannot be used as requirements for the decomposition process.	f
574	0	It describes a performance scenario where the stimulus is the request of a custom graph.	f
574	1	The scenario is supported by a manage sampling rate tactic because several requests to the same graph return the same result.	f
574	2	It describes a usability scenario where the source of stimulus is a non-technical user.	f
574	3	A support user initiative tactic based on the definition of a language is used to achieve this scenario.	f
575	0	It describes an availability scenario because the configuration allows to define redundant virtual servers.	f
575	1	It describes a scalability scenario because it is possible to increment the size of the configuration at a linear cost.	f
575	2	It describes a usability scenario where the stimulus is reduce the number of errors when configuring the system.	f
575	3	It describes a modifiability scenario because of the cost associated with maintaining the configuration.	f
576	0	It describes an availability scenario because the configuration allows to define redundant virtual servers.	f
576	1	It describes a scalability scenario because it is possible to increment the size of the configuration at a linear cost.	f
576	2	It describes a usability scenario where the stimulus is reduce the number of errors when configuring the system.	f
576	3	It describes a modifiability scenario because of the cost associated with maintaining the configuration.	f
577	0	In each iteration one or more architecturally significant requirements are used to decompose a software element of the system design.	f
577	1	The architect cannot backtrack the decomposition decisions she made.	f
577	2	During the design process the number of architecturally significant requirements cannot change.	f
577	3	Contraints cannot be used as requirements for the decomposition process.	f
578	0	Manage sampling rate.	f
578	1	Limit event response.	f
578	2	Prioritize events.	f
578	3	Bound execution time.	f
579	0	It describes a performance scenario where the stimulus is the request of a custom graph.	f
579	1	The scenario is supported by a manage sampling rate tactic because several requests to the same graph return the same result.	f
579	2	It describes a usability scenario where the source of stimulus is a non-technical user.	f
579	3	A support user initiative tactic based on the definition of a language is used to achieve this scenario.	f
580	0	Has as main goal the reduction of the modules' size.	f
580	1	Results in the creation of a third module that does not have to change when any of the original modules are changed.	f
580	2	Increases the cohesion between the two modules.	f
580	3	Cannot be used together with the Reduce Overhead performance tactic.	f
581	0	Manage sampling rate.	f
581	1	Limit event response.	f
581	2	Prioritize events.	f
581	3	Maintain multiple copies of computation.	f
582	0	This is a performance scenario because the stimulus is an input, *launches several instances of the system*.	f
582	1	This is a modifiability scenario which has a defer binding tactic.	f
582	2	This is not a modifiability scenario because the source of the stimulus cannot be a system administrator.	f
582	3	This is a modifiability scenario and its environment design time.	f
583	0	Only the scenarios that have high architectural impact and high business value should appear in the tree.	f
583	1	A scenario for a power outage should have a low business value because the fault is temporary.	f
583	2	A scenario for a 24 hours x 7 days availability of the system should appear as a leaf of the utility tree.	f
583	3	The utility tree covers all the significant qualities the system has to address.	f
584	0	Bound execution times, bound queue sizes, and increase resources.	f
584	1	Bound execution times, and increase resources.	f
584	2	Manage sampling rate, bound queue sizes, and increase resources.	f
584	3	Bound queue sizes, and increase resources.	f
585	0	Introduce concurrency.	f
585	1	Increase resources.	f
585	2	Schedule resources.	f
585	3	Maintain multiple copies of computation.	f
586	0	Introduce concurrency.	f
586	1	Increase resources.	f
586	2	Schedule resources.	f
586	3	Maintain multiple copies of computation.	f
587	0	This is a performance scenario because the stimulus is an input, *launches several instances of the system*.	f
587	1	This is a modifiability scenario which has a defer binding tactic.	f
587	2	This is not a modifiability scenario because the source of the stimulus cannot be a system administrator.	f
587	3	This is a modifiability scenario and its environment design time.	f
588	0	Bound execution times, bound queue sizes, and increase resources.	f
588	1	Bound execution times, and increase resources.	f
588	2	Manage sampling rate, bound queue sizes, and increase resources.	f
588	3	Bound queue sizes, and increase resources.	f
589	0	Only the scenarios that have high architectural impact and high business value should appear in the tree.	f
589	1	A scenario for a power outage should have a low business value because the fault is temporary.	f
589	2	A scenario for a 24 hours x 7 days availability of the system should appear as a leaf of the utility tree.	f
589	3	The utility tree covers all the significant qualities the system has to address.	f
590	0	Manage sampling rate.	f
590	1	Limit event response.	f
590	2	Prioritize events.	f
590	3	Maintain multiple copies of computation.	f
591	0	Increase resource efficiency.	f
591	1	Increase resources.	f
591	2	Increase resource efficiency and Increase resources.	f
591	3	Increase resources and Maintain multiple copies of computation.	f
592	0	A low cost of change may imply a high cost of development.	f
592	1	A low cost of change implies a low cost of development, because changing the code is part of development.	f
592	2	There is no relation between the cost of change and the cost of development.	f
592	3	A high cost of change occurs if it is necessary to defer the binding of what needs to be changed.	f
593	0	This decision does not have any impact on the architecture.	f
593	1	This decision corresponds to a constraint requirement.	f
593	2	This decision needs to be made concrete by an interoperability scenario.	f
593	3	This decision is not a consequence of the Fénix business case.	f
594	0	It describes a reliability scenario because the data points for each metric will be split between a buffer and disk.	f
594	1	It describes a performance scenario for the execution of reads.	f
594	2	The tactic used to solve the problem is based in the fact that data points are appended to the end of the metric file.	f
594	3	The tactic used to solve the problem is not manage sampling rate because there isn't any loss of data points.	f
595	0	A security scenario because it allows the introduction of filters to encrypt the messages.	f
595	1	A availability scenario because it allows the introduction of load balancers.	f
595	2	A modifiability scenario where defer binding occurs at compile time.	f
595	3	A usability scenario because developers can extend the system without having to modify the nginx core.	f
596	0	This decision does not have any impact on the architecture.	f
596	1	This decision corresponds to a constraint requirement.	f
596	2	This decision needs to be made concrete by an interoperability scenario.	f
596	3	This decision is not a consequence of the Fénix business case.	f
597	0	It describes a reliability scenario because the data points for each metric will be split between a buffer and disk.	f
597	1	It describes a performance scenario for the execution of reads.	f
597	2	The tactic used to solve the problem is based in the fact that data points are appended to the end of the metric file.	f
597	3	The tactic used to solve the problem is not manage sampling rate because there isn't any loss of data points.	f
598	0	Increase resource efficiency.	f
598	1	Increase resources.	f
598	2	Increase resource efficiency and Increase resources.	f
598	3	Increase resources and Maintain multiple copies of computation.	f
599	0	A security scenario because it allows the introduction of filters to encrypt the messages.	f
599	1	A availability scenario because it allows the introduction of load balancers.	f
599	2	A modifiability scenario where defer binding occurs at compile time.	f
599	3	A usability scenario because developers can extend the system without having to modify the nginx core.	f
600	0	A low cost of change may imply a high cost of development.	f
600	1	A low cost of change implies a low cost of development, because changing the code is part of development.	f
600	2	There is no relation between the cost of change and the cost of development.	f
600	3	A high cost of change occurs if it is necessary to defer the binding of what needs to be changed.	f
601	0	Its main goal is to establish the reusability qualities of the architecture.	f
601	1	Project managers are not interested in views that use this style because it lacks the necessary level of detail.	f
601	2	Incremental development is a criteria that drives the design of views of this type.	f
601	3	There should be at least one view of the system using this architectural style.	f
602	0	Passive redundancy.	f
602	1	Active redundancy.	f
602	2	Voting.	f
602	3	Maintain multiples copies of computation.	f
603	0	The library approach allows non-java applications.	f
603	1	The server approach can scale independently of the number of applications.	f
603	2	The server approach implements a local cache.	f
603	3	The library approach does not build a cluster.	f
604	0	A component cannot be decomposed into a set of components and connectors.	f
604	1	A connector cannot be decomposed into a set of components and connectors.	f
604	2	A connector embodies a communication protocol.	f
604	3	A component can only have a single type of port.	f
605	0	A client-server style.	f
605	1	A shared-data style.	f
605	2	Both, client-server and shared-data styles.	f
605	3	A blackboard style.	f
606	0	A client-server style.	f
606	1	A shared-data style.	f
606	2	Both, client-server and shared-data styles.	f
606	3	A blackboard style.	f
607	0	Passive redundancy.	f
607	1	Active redundancy.	f
607	2	Voting.	f
607	3	Maintain multiples copies of computation.	f
608	0	Its main goal is to establish the reusability qualities of the architecture.	f
1088	2	The Publish-subscribe style	f
608	1	Project managers are not interested in views that use this style because it lacks the necessary level of detail.	f
608	2	Incremental development is a criteria that drives the design of views of this type.	f
608	3	There should be at least one view of the system using this architectural style.	f
609	0	The library approach allows non-java applications.	f
609	1	The server approach can scale independently of the number of applications.	f
609	2	The server approach implements a local cache.	f
609	3	The library approach does not build a cluster.	f
610	0	A component cannot be decomposed into a set of components and connectors.	f
610	1	A connector cannot be decomposed into a set of components and connectors.	f
610	2	A connector embodies a communication protocol.	f
610	3	A component can only have a single type of port.	f
611	0	Cycles in the uses relation between modules are a good sign, because it indicates that several modules should be tested together.	f
611	1	The project manager uses this view to get advice on the incremental development of the system.	f
611	2	The uses relation should be applied to the coarse-grained modules, because it allows to identify circular dependences.	f
611	3	There isn't any relation with the layered architectural style because the allowed-to-use relation is more generic.	f
612	0	Schedule resources.	f
612	1	Introduce concurrency.	f
612	2	Tailor interface.	f
612	3	Increase resources.	f
613	0	Modifiability.	f
613	1	Availability.	f
613	2	Performance.	f
613	3	Scalability.	f
614	0	A component is an instance and a view can have several instances of the same component type.	f
614	1	A component type is made of a single architectural style.	f
614	2	Only components can be associated with application-specific types.	f
614	3	A component-and-connector view can only use a single architectural style.	f
615	0	All the peers are equal.	f
615	1	Any peer can access any other peer.	f
615	2	Peers are only used to share files.	f
615	3	The interaction between peers is symmetric.	f
616	0	A component is an instance and a view can have several instances of the same component type.	f
616	1	A component type is made of a single architectural style.	f
616	2	Only components can be associated with application-specific types.	f
616	3	A component-and-connector view can only use a single architectural style.	f
617	0	All the peers are equal.	f
617	1	Any peer can access any other peer.	f
617	2	Peers are only used to share files.	f
617	3	The interaction between peers is symmetric.	f
618	0	Cycles in the uses relation between modules are a good sign, because it indicates that several modules should be tested together.	f
618	1	The project manager uses this view to get advice on the incremental development of the system.	f
618	2	The uses relation should be applied to the coarse-grained modules, because it allows to identify circular dependences.	f
618	3	There isn't any relation with the layered architectural style because the allowed-to-use relation is more generic.	f
619	0	Schedule resources.	f
619	1	Introduce concurrency.	f
619	2	Tailor interface.	f
619	3	Increase resources.	f
620	0	Modifiability.	f
620	1	Availability.	f
620	2	Performance.	f
620	3	Scalability.	f
621	0	The modules inside a layer cannot use other modules in the same layer.	f
621	1	A layer cannot call the layer above.	f
621	2	Each layer defines a virtual machine because it provides a set of cohesive functionalities to the upper layer.	f
621	3	It is possible to have a circular allowed-to-use relationship between several layers.	f
622	0	Interoperability.	f
622	1	Usability.	f
622	2	Performance.	f
622	3	Modifiability.	f
623	0	Performance.	f
623	1	Availability.	f
623	2	Modifiability.	f
623	3	Reliability.	f
624	0	The Merge component executes the module merge.	f
624	1	The Merge component executes the modules merge and stdio.	f
624	2	The module main is executed in the Merge component.	f
624	3	The Pipe connectors do not execute any module.	f
625	0	Modifiability, because the Data Accessors do not depend on the data model.	f
625	1	Scalability of read requests, because it is easy add more repositories to where reads are distributed, though there may be some level of inconsistency.	f
625	2	Scalability of write requests, because a transactional system will synchronize the writes among the several repositories.	f
625	3	Confidentially of data, because it can be replicated in several repositories.	f
626	0	The Merge component executes the module merge.	f
626	1	The Merge component executes the modules merge and stdio.	f
626	2	The module main is executed in the Merge component.	f
626	3	The Pipe connectors do not execute any module.	f
627	0	Performance.	f
627	1	Availability.	f
627	2	Modifiability.	f
627	3	Reliability.	f
628	0	Modifiability, because the Data Accessors do not depend on the data model.	f
628	1	Scalability of read requests, because it is easy add more repositories to where reads are distributed, though there may be some level of inconsistency.	f
628	2	Scalability of write requests, because a transactional system will synchronize the writes among the several repositories.	f
628	3	Confidentially of data, because it can be replicated in several repositories.	f
629	0	Interoperability.	f
629	1	Usability.	f
629	2	Performance.	f
629	3	Modifiability.	f
630	0	The modules inside a layer cannot use other modules in the same layer.	f
630	1	A layer cannot call the layer above.	f
630	2	Each layer defines a virtual machine because it provides a set of cohesive functionalities to the upper layer.	f
630	3	It is possible to have a circular allowed-to-use relationship between several layers.	f
631	0	The main quality this style addresses is interoperability.	f
631	1	It cannot be applied when the system includes legacy systems.	f
631	2	Its enterprise service bus cannot support asynchronous communication between the components.	f
631	3	The typical communication pattern is point-to-point.	f
632	0	It assigns components and connectors to people and teams.	f
632	1	It is useful for the project managers.	f
632	2	It does not consider the software that is outsourced.	f
632	3	It allows to estimate the cost of hardware.	f
633	0	Client-server.	f
633	1	Peer-to-peer.	f
633	2	Master-slave.	f
633	3	Pipe-and-filter.	f
634	0	A decomposition view.	f
634	1	A view of the component-and-connector viewtype.	f
634	2	A view of the component-and-connector viewtype and a deployment view.	f
634	3	A decomposition view, a view of the component-and-connector viewtype and a deployment view.	f
635	0	Peer-to-peer.	f
635	1	Shared-data where the Buildbot is the data accessor.	f
635	2	Client-server where the Buildbot is the client.	f
635	3	Client-server where the Buildbot is the server.	f
636	0	A decomposition view.	f
636	1	A view of the component-and-connector viewtype.	f
636	2	A view of the component-and-connector viewtype and a deployment view.	f
636	3	A decomposition view, a view of the component-and-connector viewtype and a deployment view.	f
637	0	It assigns components and connectors to people and teams.	f
637	1	It is useful for the project managers.	f
637	2	It does not consider the software that is outsourced.	f
637	3	It allows to estimate the cost of hardware.	f
638	0	Client-server.	f
638	1	Peer-to-peer.	f
638	2	Master-slave.	f
638	3	Pipe-and-filter.	f
639	0	Peer-to-peer.	f
639	1	Shared-data where the Buildbot is the data accessor.	f
639	2	Client-server where the Buildbot is the client.	f
639	3	Client-server where the Buildbot is the server.	f
640	0	The main quality this style addresses is interoperability.	f
640	1	It cannot be applied when the system includes legacy systems.	f
640	2	Its enterprise service bus cannot support asynchronous communication between the components.	f
640	3	The typical communication pattern is point-to-point.	f
641	0	Tiers.	f
641	1	Tiers, and Shared-data.	f
641	2	Tiers, Shared-data, and Service-oriented architecture.	f
641	3	Tiers, Shared-data, Service-oriented architecture, and Client-server.	f
642	0	Decomposition.	f
642	1	Generalization.	f
642	2	Decomposition and Generalization.	f
642	3	Peer-to-peer.	f
643	0	It assigns modules to the hardware.	f
643	1	It cannot assign software elements to virtual servers because they are not hardware.	f
643	2	For each set of software elements there is a single possible assignment to hardwre.	f
643	3	It is useful for system administrators.	f
644	0	Client-server to represent performance.	f
644	1	Tiers to represent scalability.	f
644	2	Service-oriented architecture to represent interoperability.	f
644	3	Shared-data to represent modifiability.	f
645	0	Publish-subscribe.	f
645	1	Client-server.	f
645	2	Shared-date.	f
645	3	Generalization.	f
646	0	Decomposition.	f
646	1	Generalization.	f
646	2	Decomposition and Generalization.	f
646	3	Peer-to-peer.	f
647	0	Tiers.	f
647	1	Tiers, and Shared-data.	f
647	2	Tiers, Shared-data, and Service-oriented architecture.	f
647	3	Tiers, Shared-data, Service-oriented architecture, and Client-server.	f
648	0	It assigns modules to the hardware.	f
648	1	It cannot assign software elements to virtual servers because they are not hardware.	f
648	2	For each set of software elements there is a single possible assignment to hardwre.	f
648	3	It is useful for system administrators.	f
649	0	Publish-subscribe.	f
649	1	Client-server.	f
649	2	Shared-date.	f
649	3	Generalization.	f
650	0	Client-server to represent performance.	f
650	1	Tiers to represent scalability.	f
650	2	Service-oriented architecture to represent interoperability.	f
650	3	Shared-data to represent modifiability.	f
651	0	Service-oriented architecture, and Client-server.	f
651	1	Service-oriented architecture, and Shared-data.	f
651	2	Service-oriented architecture, Shared-data, and Peer-to-peer.	f
651	3	Service-oriented architecture, Shared-data, Peer-to-peer, and Client-server.	f
652	0	The development team is the main stakeholder interesting in these views.	f
652	1	It assigns modules to files.	f
652	2	It is completely independent of the deployment architectural style.	f
652	3	It helps on the configuration of systems.	f
653	0	Client-server.	f
653	1	Communicating processes.	f
653	2	Peer-to-peer.	f
653	3	Shared-data.	f
654	0	The data-shared architectural style is not applied because data is encapsulated inside services.	f
654	1	The sharing of data is done using a service-oriented architecture.	f
654	2	Modifiability is not a concern of their architecture.	f
654	3	The decouple of data formats does not support scalability because of the transactional properties.	f
655	0	Peer-to-peer.	f
655	1	Shared-data where the Dashboard is the repository.	f
655	2	Client-server where the Dashboard is the client.	f
655	3	Client-server where the Dashboard is the server.	f
656	0	The data-shared architectural style is not applied because data is encapsulated inside services.	f
656	1	The sharing of data is done using a service-oriented architecture.	f
656	2	Modifiability is not a concern of their architecture.	f
656	3	The decouple of data formats does not support scalability because of the transactional properties.	f
657	0	Peer-to-peer.	f
657	1	Shared-data where the Dashboard is the repository.	f
657	2	Client-server where the Dashboard is the client.	f
657	3	Client-server where the Dashboard is the server.	f
658	0	Service-oriented architecture, and Client-server.	f
658	1	Service-oriented architecture, and Shared-data.	f
658	2	Service-oriented architecture, Shared-data, and Peer-to-peer.	f
658	3	Service-oriented architecture, Shared-data, Peer-to-peer, and Client-server.	f
659	0	The development team is the main stakeholder interesting in these views.	f
659	1	It assigns modules to files.	f
659	2	It is completely independent of the deployment architectural style.	f
659	3	It helps on the configuration of systems.	f
660	0	Client-server.	f
660	1	Communicating processes.	f
660	2	Peer-to-peer.	f
660	3	Shared-data.	f
661	0	Typically have a software architecture that results from the common knowledge about the system that is shared among the team members	f
661	1	Do not have a software architecture, because in agile methodologies there is no architectural design phase	f
661	2	Do not have a software architecture, because the practice of refactoring allows changing every part of the system easily	f
661	3	May have a software architecture, but that architecture is not known because it was neither designed nor documented	f
662	0	However, functional requirements do not have any impact on the architecture because the systemic qualities of an architecture are non-functional	f
662	1	The functional requirements have a large impact on the definition of views of the component-and-connector viewtype because each component executes a functionality	f
662	2	The functional requirements have a large impact on the definition of views of the module viewtype because they are used to define the high cohesion and low coupling of modules	f
662	3	The functional requirements can be considered as constraints on the software architecture design	f
663	0	The stimulus is incorrect response	f
663	1	The artefact is the load balancer	f
663	2	The response is not correctly stated	f
663	3	The quality it addresses is interoperability	f
664	0	Programming, if the components execute modules developed by different teams	f
664	1	Hardware, if there is hardware redundancy	f
664	2	Operating Systems, if redundant components execute on top of different operating systems	f
664	3	All the previous options	f
665	0	Performance	f
665	1	Usability	f
665	2	Availability	f
665	3	Modifiability	f
666	0	Manage sampling rate	f
666	1	Limit event response	f
666	2	Reduce overhead	f
666	3	Bound execution times	f
667	0	Have high throughput	f
667	1	Have low latency	f
667	2	Allow many simultaneous users	f
667	3	May be easily changed to increase their performance	f
668	0	Split module	f
668	1	Encapsulate	f
668	2	Restrict dependencies	f
668	3	Defer binding	f
669	0	We must use various different views, both of the component-and-connector and the allocation viewtypes	f
669	1	We just have to show, through component-and-connector views, that the system maintains replicas of the data in different components	f
669	2	We just have to show, through Deployment views, that the *DataNode* component executes in more than one machine of the cluster	f
669	3	We just have to show, through Decomposition views, that there are modules responsible for the replication of file blocks	f
670	0	Active replication and passive replication	f
670	1	Active replication, passive replication, and spare	f
670	2	Passive replication and spare	f
670	3	Quorum, active replication, and passive replication	f
671	0	Different stakeholders are interested in different views of the system	f
671	1	A single view would be too simplistic	f
671	2	The views describe different aspects of the system	f
671	3	All of the above	f
672	0	Modifiability	f
672	1	Usability	f
672	2	Security	f
672	3	Availability	f
673	0	A view of the Data Model style	f
673	1	A view of the Layers style	f
673	2	A view of the Decomposition style	f
673	3	A view of the Uses style	f
674	0	It imposes restrictions on which uses relationships may exist between the system's modules	f
674	1	It makes it easier to create generalization relationships between the system's modules	f
674	2	It separates in new modules responsibilities that were spread over various of the system's modules	f
674	3	It allows the decomposition of each of the system's modules into finer grained modules	f
675	0	Can use the operations defined in any of the system's modules	f
675	1	Can use the operations defined in the lower layer, but not the ones defined in the upper layer	f
675	2	Can use the operations defined in the upper layer, but not the ones defined in the lower layer	f
675	3	Should use some operation defined in the lower layer	f
676	0	Per-to-peer	f
676	1	Shared-data	f
676	2	Communicating processes	f
676	3	Publish-subscribe	f
677	0	The stimulus is an omission and the tactic is retry	f
677	1	The stimulus is a crash and the tactic is retry	f
677	2	The stimulus is an incorrect timing and the tactic is ignore faulty behaviour	f
677	3	The stimulus is incorrect response and the tactic is voting	f
678	0	The layered view to support a new specific layer for the customization of the catalog	f
678	1	The layered view to accommodate a new layer for each kind of catalog, which other layers may use	f
678	2	The data model view in order to define entities for each kind of catalog	f
678	3	The data model view in order to define generic entities that can be customized for different kinds of catalogs	f
679	0	Only in the Deployment view	f
679	1	Only in the Decomposition view	f
679	2	Only in a component-and-connector view	f
679	3	Both in a component-and-connector and the Deployment views	f
680	0	When a peer connects to the network it establishes connections with all other peers in the network	f
680	1	The behavior described in the sentence can be represented in a view where the dynamic reconfiguration architectural style is used	f
680	2	When a peer receives a connection it sends all its files to the peer connecting it	f
680	3	The behavior described in the sentence can be represented in a view where the tier architectural style is used	f
681	0	But when the filters are executed sequentially the composition power is reduced	f
681	1	Which improves modifiability, because filters are decoupled through pipes	f
681	2	But the size of buffers may reduce the composition power	f
681	3	And filters do not have to agree on the data formats	f
682	0	To facilitate the interaction among heterogeneous components that use distinct communication protocols	f
682	1	To promote the use of a common communication protocol for all the remaining components of the system	f
682	2	To increase the performance of the interaction between the components of the system	f
682	3	To create a strong coupling between the various services provided by the organization	f
683	0	Work Assignment views	f
683	1	Generalization views	f
683	2	Deployment views	f
683	3	Implementation views	f
684	0	Communicating Processes	f
684	1	Client-Server	f
684	2	Peer-to-Peer	f
684	3	Uses	f
685	0	The quality being addressed is performance and the tactic multiple copies of data	f
685	1	The quality being addressed is performance and the tactic multiple copies of computation	f
685	2	The quality being addressed is performance and the tactics multiple copies of data and multiple copies of computation	f
685	3	The quality being addressed is availability and the tactic passive redundancy	f
686	0	Tiers style	f
686	1	Client-server style	f
686	2	Shared-data style	f
686	3	Pipe-and-filter style	f
687	0	Each service can be developed and deployed independently	f
687	1	Easier to scale development	f
687	2	Eliminates any long-term commitment to a technology stack	f
687	3	Testing is easier	f
688	0	The shared-data architectural style is not applied because data is encapsulated inside services	f
688	1	The sharing of data is done using a service-oriented architecture	f
688	2	Modifiability is not a concern of their architecture	f
688	3	The decouple of data formats does not support scalability because of the transactional properties	f
689	0	an ACID transaction occurs in all the involved applications	f
689	1	a two-phase commit protocol takes place between the involved applications	f
689	2	a ACID transaction occurs in each of the involved applications, but we can not infer which transaction occurs first	f
689	3	an ACID transaction occurs in the invoked application and ACID transactions in the other involved applications will eventually occur later	f
690	0	The access to two different aggregate instances in the context of the same request does not hinder scalability	f
690	1	This is the solution followed by Twitter client applications	f
690	2	It describes the typical behavior of a microservices system	f
690	3	To support high scalability the request of `User 1` needs to be decomposed into a request to only one of the aggregate instances and the processing in the other aggregate occurs in the background	f
691	0	Only in the Deployment view	f
691	1	Only in the Decomposition view	f
691	2	Only in a component-and-connector view	f
691	3	Both in a component-and-connector and the Deployment views	f
692	0	When a peer connects to the network it establishes connections with all other peers in the network	f
692	1	The behavior described in the sentence can be represented in a view where the dynamic reconfiguration architectural style is used	f
692	2	When a peer receives a connection it sends all its files to the peer connecting it	f
692	3	The behavior described in the sentence can be represented in a view where the tier architectural style is used	f
693	0	But when the filters are executed sequentially the composition power is reduced	f
693	1	Which improves modifiability, because filters are decoupled through pipes	f
693	2	But the size of buffers may reduce the composition power	f
693	3	And filters do not have to agree on the data formats	f
694	0	To facilitate the interaction among heterogeneous components that use distinct communication protocols	f
694	1	To promote the use of a common communication protocol for all the remaining components of the system	f
694	2	To increase the performance of the interaction between the components of the system	f
1088	3	The Client-Server style	f
694	3	To create a strong coupling between the various services provided by the organization	f
695	0	Work Assignment views	f
695	1	Generalization views	f
695	2	Deployment views	f
695	3	Implementation views	f
696	0	Communicating Processes	f
696	1	Client-Server	f
696	2	Peer-to-Peer	f
696	3	Uses	f
697	0	Typically have a software architecture that results from the common knowledge about the system that is shared among the team members	f
697	1	Do not have a software architecture, because in agile methodologies there is no architectural design phase	f
697	2	Do not have a software architecture, because the practice of refactoring allows changing every part of the system easily	f
697	3	May have a software architecture, but that architecture is not known because it was neither designed nor documented	f
698	0	However, functional requirements do not have any impact on the architecture because the systemic qualities of an architecture are non-functional	f
698	1	The functional requirements have a large impact on the definition of views of the component-and-connector viewtype because each component executes a functionality	f
698	2	The functional requirements have a large impact on the definition of views of the module viewtype because they are used to define the high cohesion and low coupling of modules	f
698	3	The functional requirements can be considered as constraints on the software architecture design	f
699	0	The stimulus is incorrect response	f
699	1	The artefact is the load balancer	f
699	2	The response is not correctly stated	f
699	3	The quality it addresses is interoperability	f
700	0	Programming, if the components execute modules developed by different teams	f
700	1	Hardware, if there is hardware redundancy	f
700	2	Operating Systems, if redundant components execute on top of different operating systems	f
700	3	All the previous options	f
701	0	Performance	f
701	1	Usability	f
701	2	Availability	f
701	3	Modifiability	f
702	0	Manage sampling rate	f
702	1	Limit event response	f
702	2	Reduce overhead	f
702	3	Bound execution times	f
703	0	Have high throughput	f
703	1	Have low latency	f
703	2	Allow many simultaneous users	f
703	3	May be easily changed to increase their performance	f
704	0	Split module	f
704	1	Encapsulate	f
704	2	Restrict dependencies	f
704	3	Defer binding	f
705	0	Per-to-peer	f
705	1	Shared-data	f
705	2	Communicating processes	f
705	3	Publish-subscribe	f
706	0	The stimulus is an omission and the tactic is retry	f
706	1	The stimulus is a crash and the tactic is retry	f
706	2	The stimulus is an incorrect timing and the tactic is ignore faulty behaviour	f
706	3	The stimulus is incorrect response and the tactic is voting	f
707	0	The layered view to support a new specific layer for the customization of the catalog	f
707	1	The layered view to accommodate a new layer for each kind of catalog, which other layers may use	f
707	2	The data model view in order to define entities for each kind of catalog	f
707	3	The data model view in order to define generic entities that can be customized for different kinds of catalogs	f
708	0	The quality being addressed is performance and the tactic multiple copies of data	f
708	1	The quality being addressed is performance and the tactic multiple copies of computation	f
708	2	The quality being addressed is performance and the tactics multiple copies of data and multiple copies of computation	f
708	3	The quality being addressed is availability and the tactic passive redundancy	f
709	0	Tiers style	f
709	1	Client-server style	f
709	2	Shared-data style	f
709	3	Pipe-and-filter style	f
710	0	Each service can be developed and deployed independently	f
710	1	Easier to scale development	f
710	2	Eliminates any long-term commitment to a technology stack	f
710	3	Testing is easier	f
711	0	The shared-data architectural style is not applied because data is encapsulated inside services	f
711	1	The sharing of data is done using a service-oriented architecture	f
711	2	Modifiability is not a concern of their architecture	f
711	3	The decouple of data formats does not support scalability because of the transactional properties	f
712	0	an ACID transaction occurs in all the involved applications	f
712	1	a two-phase commit protocol takes place between the involved applications	f
712	2	a ACID transaction occurs in each of the involved applications, but we can not infer which transaction occurs first	f
712	3	an ACID transaction occurs in the invoked application and ACID transactions in the other involved applications will eventually occur later	f
713	0	The access to two different aggregate instances in the context of the same request does not hinder scalability	f
713	1	This is the solution followed by Twitter client applications	f
713	2	It describes the typical behavior of a microservices system	f
713	3	To support high scalability the request of `User 1` needs to be decomposed into a request to only one of the aggregate instances and the processing in the other aggregate occurs in the background	f
714	0	We must use various different views, both of the component-and-connector and the allocation viewtypes	f
714	1	We just have to show, through component-and-connector views, that the system maintains replicas of the data in different components	f
714	2	We just have to show, through Deployment views, that the *DataNode* component executes in more than one machine of the cluster	f
737	3	Use an active redundancy tactic in the Consumer Web site	f
714	3	We just have to show, through Decomposition views, that there are modules responsible for the replication of file blocks	f
715	0	Active replication and passive replication	f
715	1	Active replication, passive replication, and spare	f
715	2	Passive replication and spare	f
715	3	Quorum, active replication, and passive replication	f
716	0	Different stakeholders are interested in different views of the system	f
716	1	A single view would be too simplistic	f
716	2	The views describe different aspects of the system	f
716	3	All of the above	f
717	0	Modifiability	f
717	1	Usability	f
717	2	Security	f
717	3	Availability	f
718	0	A view of the Data Model style	f
718	1	A view of the Layers style	f
718	2	A view of the Decomposition style	f
718	3	A view of the Uses style	f
719	0	It imposes restrictions on which uses relationships may exist between the system's modules	f
719	1	It makes it easier to create generalization relationships between the system's modules	f
719	2	It separates in new modules responsibilities that were spread over various of the system's modules	f
719	3	It allows the decomposition of each of the system's modules into finer grained modules	f
720	0	Can use the operations defined in any of the system's modules	f
720	1	Can use the operations defined in the lower layer, but not the ones defined in the upper layer	f
720	2	Can use the operations defined in the upper layer, but not the ones defined in the lower layer	f
720	3	Should use some operation defined in the lower layer	f
721	0	Is a high-level view of the system with the purpose of understanding what are the system's goals and features	f
721	1	Is composed of things such as code units, runtime elements, hardware, and people, together with the relationships among them	f
721	2	Is a set of guidelines that the developing team should follow in the development of the system	f
721	3	Is a set of diagrams that show the runtime elements of the system and their relationships	f
722	0	Describing what are the qualities that the system should possess	f
722	1	Describing a set of steps that a user of the system must perform to accomplish some task	f
722	2	Describing a use case for the system that makes clear what should be the system's responses to each of the user's inputs	f
722	3	Describing the system's features by way of different usage scenarios for it, in which users play the role of actors	f
723	0	The scenario is not correct	f
723	1	The scenario is correct but it does not describe whether the request the servers fails to respond to succeeds or fails	f
723	2	The scenario is correct but it is not clear what is the artefact	f
723	3	The scenario is not completely correct because it contains two responses	f
724	0	Only in the Deployment view	f
724	1	Only in the Decomposition view	f
724	2	Only in a component-and-connector view	f
724	3	Both in a component-and-connector and the Deployment views	f
725	0	Performance	f
725	1	Availability	f
725	2	Modifiability	f
725	3	Reliability	f
726	0	Manage sampling rate	f
726	1	Limit event response	f
726	2	Reduce overhead	f
726	3	Bound execution times	f
727	0	The stimulus is to port the system to a new browser	f
727	1	The environment is build time	f
727	2	The response is 5 person/month	f
727	3	To implement the above scenario it is necessary to apply a runtime defer binding tactic	f
728	0	Split module	f
728	1	Increase semantic coherence	f
728	2	Restrict dependencies	f
728	3	Defer binding	f
729	0	Essential to ensure the system scalability	f
729	1	Essential to reduce costs whenever there is a fault in a hardware element	f
729	2	Essential to ensure the system portability	f
729	3	Essential to facilitate the integration with legacy systems	f
730	0	Because this tactic simplifies the addition and removal of DataNodes	f
730	1	But they could have used the ping tactic instead without adding any overhead to the NameNode	f
730	2	But the exceptions tactic could have been used as well	f
730	3	To inform other DataNodes about their availability	f
731	0	Each view contains a single architectural style	f
731	1	Views need to contain more than one architectural style	f
731	2	A view may not contain any architectural style	f
731	3	None of the above	f
732	0	A module view	f
732	1	A component-and-connector view	f
732	2	An allocation view	f
732	3	They are not represented by a view	f
733	0	The Decomposition and the Work Assignment styles	f
733	1	The Decomposition and the Layers styles	f
733	2	The Decomposition and the Uses styles	f
733	3	The Decomposition and the SOA styles	f
734	0	The Decomposition style	f
734	1	The Deployment style	f
734	2	The Uses style	f
734	3	The Work-assignment style	f
735	0	The Generalization style	f
735	1	The Uses style	f
735	2	The Layers style	f
735	3	The Aspects style	f
736	0	Interoperability	f
736	1	Modifiability	f
736	2	Performance	f
736	3	Security	f
737	0	Use a passive redundancy tactic in the OPC (Order Processing Center)	f
737	1	Use a passive redundancy tactic in the Consumer Web site	f
737	2	Use an active redundancy tactic in the OPC (Order Processing Center) 	f
757	0	The scenario is not correct	f
738	0	The decomposition view to include a module for the synchronization responsibilities	f
738	1	The uses view to represent how the mobile device uses the Catalog application	f
738	2	The layered view to include a layer for each type of device	f
738	3	The domain layer of the layered style to represent the types of devices	f
739	0	Only views of the component-and-connector viewtype are needed	f
739	1	All viewtypes may be necessary	f
739	2	Only views of the component-and-connector viewtype and allocation viewtype are needed	f
739	3	Views of the module viewtype are not needed	f
740	0	The file transfers follows the same path of nodes used to identify where the file was located	f
740	1	The peer initiating the request for a file needs to know where the file is located	f
740	2	If a peer providing a file crashes it is necessary to restart downloading the file from the begin	f
740	3	The price for high scalability and availability is the need to have several replicas of the files to be shared	f
741	0	The presentation logic layer, domain logic layer, and data access layer	f
741	1	The traditional web applications, the mashups, and the rich internet applications (RIAs)	f
741	2	The web browser, o web server, and the data base	f
741	3	The web services layer, the domain logic layer, and the data access layer	f
742	0	Implementation	f
742	1	Work assignment	f
742	2	Decomposition	f
742	3	None, because this description does not describe any architectural aspect of the system	f
743	0	It enforces the use of a single implementation language among all applications	f
743	1	The orchestration is in charge of improving the transparent location of service providers	f
743	2	The enterprise service bus coordinates the execution of several services	f
743	3	It decouples applications developed for different organizations	f
744	0	Work assignment view	f
744	1	Install view	f
744	2	Implementation view	f
744	3	Deployment view	f
745	0	Write a single scenario on performance	f
745	1	Write two scenarios on performance	f
745	2	Write a scenario on performance and a scenario on interoperability	f
745	3	Write a single scenario on interoperability	f
746	0	Module viewtype	f
746	1	Component-and-connector viewtype	f
746	2	Install architectural style of the allocation viewtype	f
746	3	It is not necessary to represent this behavior because it does not describe any qualities	f
747	0	We do not need a view of the module viewtype because it is about the runtime properties of the system	f
747	1	We do not need a view of the allocation viewtype because deployment is automated	f
747	2	The component-and-connector view should emphasize the performance qualities of systems following the microservices architecture	f
747	3	It is necessary to use views of the three viewtypes	f
748	0	All functionalities can be transactional	f
748	1	Only a small set of functionalities are transactional	f
748	2	It is not necessary to have transactional properties because all data is in memory	f
748	3	Only the isolation property of transactions is supported	f
749	0	When an event is published to the distributed log, the order of delivery to the different subscribing applications is predefined	f
749	1	When two events are published to the distributed log they are delivered to the different subscribing applications in the same order	f
749	2	The distributed log guarantees that events will be delivered only once	f
749	3	The distributed log may not deliver some of the events that are published to their subscribers	f
750	0	It allows high scalability because the data model has only four entities	f
750	1	It allows high scalability because it is possible the implement transactions associated to each one of the aggregates	f
750	2	It allows high scalability because the only synchronized access is to the `ProductId`, so it requires a single contention point	f
750	3	It does not allow high scalability	f
751	0	The stimulus is to port the system to a new browser	f
751	1	The environment is build time	f
751	2	The response is 5 person/month	f
751	3	To implement the above scenario it is necessary to apply a runtime defer binding tactic	f
752	0	Split module	f
752	1	Increase semantic coherence	f
752	2	Restrict dependencies	f
752	3	Defer binding	f
753	0	Essential to ensure the system scalability	f
753	1	Essential to reduce costs whenever there is a fault in a hardware element	f
753	2	Essential to ensure the system portability	f
753	3	Essential to facilitate the integration with legacy systems	f
754	0	Because this tactic simplifies the addition and removal of DataNodes	f
754	1	But they could have used the ping tactic instead without adding any overhead to the NameNode	f
754	2	But the exceptions tactic could have been used as well	f
754	3	To inform other DataNodes about their availability	f
755	0	Is a high-level view of the system with the purpose of understanding what are the system's goals and features	f
755	1	Is composed of things such as code units, runtime elements, hardware, and people, together with the relationships among them	f
755	2	Is a set of guidelines that the developing team should follow in the development of the system	f
755	3	Is a set of diagrams that show the runtime elements of the system and their relationships	f
756	0	Describing what are the qualities that the system should possess	f
756	1	Describing a set of steps that a user of the system must perform to accomplish some task	f
756	2	Describing a use case for the system that makes clear what should be the system's responses to each of the user's inputs	f
756	3	Describing the system's features by way of different usage scenarios for it, in which users play the role of actors	f
757	1	The scenario is correct but it does not describe whether the request the servers fails to respond to succeeds or fails	f
757	2	The scenario is correct but it is not clear what is the artefact	f
757	3	The scenario is not completely correct because it contains two responses	f
758	0	Only in the Deployment view	f
758	1	Only in the Decomposition view	f
758	2	Only in a component-and-connector view	f
758	3	Both in a component-and-connector and the Deployment views	f
759	0	Performance	f
759	1	Availability	f
759	2	Modifiability	f
759	3	Reliability	f
760	0	Manage sampling rate	f
760	1	Limit event response	f
760	2	Reduce overhead	f
760	3	Bound execution times	f
761	0	The presentation logic layer, domain logic layer, and data access layer	f
761	1	The traditional web applications, the mashups, and the rich internet applications (RIAs)	f
761	2	The web browser, o web server, and the data base	f
761	3	The web services layer, the domain logic layer, and the data access layer	f
762	0	It enforces the use of a single implementation language among all applications	f
762	1	The orchestration is in charge of improving the transparent location of service providers	f
762	2	The enterprise service bus coordinates the execution of several services	f
762	3	It decouples applications developed for different organizations	f
763	0	Work assignment view	f
763	1	Install view	f
763	2	Implementation view	f
763	3	Deployment view	f
764	0	Write a single scenario on performance	f
764	1	Write two scenarios on performance	f
764	2	Write a scenario on performance and a scenario on interoperability	f
764	3	Write a single scenario on interoperability	f
765	0	Module viewtype	f
765	1	Component-and-connector viewtype	f
765	2	Install architectural style of the allocation viewtype	f
765	3	It is not necessary to represent this behavior because it does not describe any qualities	f
766	0	Each view contains a single architectural style	f
766	1	Views need to contain more than one architectural style	f
766	2	A view may not contain any architectural style	f
766	3	None of the above	f
767	0	A module view	f
767	1	A component-and-connector view	f
767	2	An allocation view	f
767	3	They are not represented by a view	f
768	0	The Decomposition and the Work Assignment styles	f
768	1	The Decomposition and the Layers styles	f
768	2	The Decomposition and the Uses styles	f
768	3	The Decomposition and the SOA styles	f
769	0	The Decomposition style	f
769	1	The Deployment style	f
769	2	The Uses style	f
769	3	The Work-assignment style	f
770	0	The Generalization style	f
770	1	The Uses style	f
770	2	The Layers style	f
770	3	The Aspects style	f
771	0	Interoperability	f
771	1	Modifiability	f
771	2	Performance	f
771	3	Security	f
772	0	Use a passive redundancy tactic in the OPC (Order Processing Center)	f
772	1	Use a passive redundancy tactic in the Consumer Web site	f
772	2	Use an active redundancy tactic in the OPC (Order Processing Center) 	f
772	3	Use an active redundancy tactic in the Consumer Web site	f
773	0	The decomposition view to include a module for the synchronization responsibilities	f
773	1	The uses view to represent how the mobile device uses the Catalog application	f
773	2	The layered view to include a layer for each type of device	f
773	3	The domain layer of the layered style to represent the types of devices	f
774	0	Only views of the component-and-connector viewtype are needed	f
774	1	All viewtypes may be necessary	f
774	2	Only views of the component-and-connector viewtype and allocation viewtype are needed	f
774	3	Views of the module viewtype are not needed	f
775	0	The file transfers follows the same path of nodes used to identify where the file was located	f
775	1	The peer initiating the request for a file needs to know where the file is located	f
775	2	If a peer providing a file crashes it is necessary to restart downloading the file from the begin	f
775	3	The price for high scalability and availability is the need to have several replicas of the files to be shared	f
776	0	We do not need a view of the module viewtype because it is about the runtime properties of the system	f
776	1	We do not need a view of the allocation viewtype because deployment is automated	f
776	2	The component-and-connector view should emphasize the performance qualities of systems following the microservices architecture	f
776	3	It is necessary to use views of the three viewtypes	f
777	0	All functionalities can be transactional	f
777	1	Only a small set of functionalities are transactional	f
777	2	It is not necessary to have transactional properties because all data is in memory	f
777	3	Only the isolation property of transactions is supported	f
778	0	When an event is published to the distributed log, the order of delivery to the different subscribing applications is predefined	f
778	1	When two events are published to the distributed log they are delivered to the different subscribing applications in the same order	f
778	2	The distributed log guarantees that events will be delivered only once	f
778	3	The distributed log may not deliver some of the events that are published to their subscribers	f
779	0	It allows high scalability because the data model has only four entities	f
846	1	Service-oriented architecture, and Shared-data	f
779	1	It allows high scalability because it is possible the implement transactions associated to each one of the aggregates	f
779	2	It allows high scalability because the only synchronized access is to the `ProductId`, so it requires a single contention point	f
779	3	It does not allow high scalability	f
780	0	Implementation	f
780	1	Work assignment	f
780	2	Decomposition	f
780	3	None, because this description does not describe any architectural aspect of the system	f
781	0	Depends mostly on the system's functional requirements	f
781	1	Depends more on the architect's experience than on anything else	f
781	2	Should not depend on the skills of the developing team	f
781	3	None of the above	f
782	0	The writing of a tweet is a synchronous process where different users have a consistent view of the sequence of tweets	f
782	1	A tweet is written in each one of the Twitter's servers	f
782	2	The tweet unique ID is written in the home timeline of each one of the writer's followers	f
782	3	The tweet content is written in the home timeline of each one of the writer's followers	f
783	0	Describes a concrete quality that a particular system has to implement	f
783	1	Enumerates, for each kind of quality attribute, all the possible types of source of stimulus, stimulus, response, etc	f
783	2	Can omit some of the elements like, for instance, the environment, if they are not relevant for the general scenario	f
783	3	Is a very reusable scenario that can be effectively used in many different concrete situations	f
784	0	This solution optimizes the performance in terms of the latency of each request	f
784	1	This solution allows an "infinite"increase of the number clients by allowing the inclusion of more Request Nodes	f
784	2	This solution continues to provide service even if a crash occurs in the Data server	f
784	3	This solution optimizes the performance in terms of the throughput of processed requests	f
785	0	When a new block is created, the first replica is written in the node where the writer is located, to improve availability	f
785	1	When a new block is created, the second replica is not stored in the same rack than the first replica to increase the availability when a Data Node fails	f
785	2	When a new block is created, the third replica is stored in the same rack than the second replica to improve the performance of reads	f
785	3	When a read occurs, the client, if it is located in the cluster, receives a list of the DataNodes where the replicas are, ordered by its closeness to the client, to improve performance of reads	f
786	0	When a new block is created, the first replica is written in the node where the writer is located, to improve availability	f
786	1	When a new block is created, the second replica is not stored in the same rack than the first replica to increase the availability when a Data Node fails	f
786	2	When a new block is created, the third replica is stored in the same rack than the second replica to improve the performance of reads	f
786	3	When a read occurs, the client, if it is located in the cluster, receives a list of the DataNodes where the replicas are, ordered by its closeness to the client, to improve performance of reads	f
787	0	Depends mostly on the system's functional requirements	f
787	1	Depends more on the architect's experience than on anything else	f
787	2	Should not depend on the skills of the developing team	f
787	3	None of the above	f
788	0	Describes a concrete quality that a particular system has to implement	f
788	1	Enumerates, for each kind of quality attribute, all the possible types of source of stimulus, stimulus, response, etc	f
788	2	Can omit some of the elements like, for instance, the environment, if they are not relevant for the general scenario	f
788	3	Is a very reusable scenario that can be effectively used in many different concrete situations	f
789	0	The writing of a tweet is a synchronous process where different users have a consistent view of the sequence of tweets	f
789	1	A tweet is written in each one of the Twitter's servers	f
789	2	The tweet unique ID is written in the home timeline of each one of the writer's followers	f
789	3	The tweet content is written in the home timeline of each one of the writer's followers	f
790	0	This solution optimizes the performance in terms of the latency of each request	f
790	1	This solution allows an "infinite"increase of the number clients by allowing the inclusion of more Request Nodes	f
790	2	This solution continues to provide service even if a crash occurs in the Data server	f
790	3	This solution optimizes the performance in terms of the throughput of processed requests	f
791	0	A non-functional requirement a system has to achieve	f
791	1	How to control the response to one or more stimulus	f
791	2	What should be the system response in the occurrence of a stimulus	f
791	3	A decomposition of the system that fulfills an architectural quality	f
792	0	This is right because if you don't the project fails	f
792	1	This is wrong because you can easily change these decisions during the project lifetime	f
792	2	This is right but you cannot be completely sure whether the decisions are the right ones	f
792	3	This is wrong because it is against the agile way of thinking the software development process	f
793	0	The search timeline is the most important business use case for Twitter	f
793	1	The ingestion process includes tokenizing of the tweet to include in an index	f
793	2	The Early Bird server contains the tweet content	f
793	3	The write in the Early Bird server is synchronous, only when it finishes does the user receives the feedback of a successful post	f
794	0	This solution assures a consistency view to the clients of the data that is written	f
794	1	In this solution the clients invocations have to be synchronous	f
794	2	In this solution the tasks in the queue need to be sequentially processed, only when a task is finished can another start to be processed	f
813	2	Refactor the common parts between the business logic and the remote invocation	f
1204	3	Publish-Subscribe.	f
794	3	This solution allows the dimensioning of the number of activities (threads or processes) that run in the server, taking into consideration the server's hardware capacity, in order to have a efficient usage of the server's CPU	f
795	0	The periodic rebuild of the checkpoint is done to increase the availability of the NameNode	f
795	1	The advantage of running the CheckpointNode in a different host is to not degrade the availability of the NameNode during checkpoint construction	f
795	2	The periodic rebuild of the checkpoint improves the performance of the NameNode during normal operation	f
795	3	The periodic rebuild of the checkpoint improves the performance of the NameNode during its initialization	f
796	0	The periodic rebuild of the checkpoint is done to increase the availability of the NameNode	f
796	1	The advantage of running the CheckpointNode in a different host is to not degrade the availability of the NameNode during checkpoint construction	f
796	2	The periodic rebuild of the checkpoint improves the performance of the NameNode during normal operation	f
796	3	The periodic rebuild of the checkpoint improves the performance of the NameNode during its initialization	f
797	0	A non-functional requirement a system has to achieve	f
797	1	How to control the response to one or more stimulus	f
797	2	What should be the system response in the occurrence of a stimulus	f
797	3	A decomposition of the system that fulfills an architectural quality	f
798	0	The search timeline is the most important business use case for Twitter	f
798	1	The ingestion process includes tokenizing of the tweet to include in an index	f
798	2	The Early Bird server contains the tweet content	f
798	3	The write in the Early Bird server is synchronous, only when it finishes does the user receives the feedback of a successful post	f
799	0	This is right because if you don't the project fails	f
799	1	This is wrong because you can easily change these decisions during the project lifetime	f
799	2	This is right but you cannot be completely sure whether the decisions are the right ones	f
799	3	This is wrong because it is against the agile way of thinking the software development process	f
800	0	This solution assures a consistency view to the clients of the data that is written	f
800	1	In this solution the clients invocations have to be synchronous	f
800	2	In this solution the tasks in the queue need to be sequentially processed, only when a task is finished can another start to be processed	f
800	3	This solution allows the dimensioning of the number of activities (threads or processes) that run in the server, taking into consideration the server's hardware capacity, in order to have a efficient usage of the server's CPU	f
801	0	Can be applied to any kind stimulus in availability scenarios	f
801	1	Is useful to support scenarios where the stimulus is an omission	f
801	2	Can guarantee that the system will not become unavailable	f
801	3	When applied it increases the latency of the availability scenario's response time	f
802	0	Have high throughput	f
802	1	Have low latency	f
802	2	Allow many simultaneous users	f
802	3	May be easily changed to increase their storage capacity	f
803	0	When the environment is design time it means that the change should be done before the system enters into production	f
803	1	When the environment is build time it means that it is necessary to codify a new module that is added by rebuilding the system	f
803	2	When the environment is initiation time it means that it is necessary to restart the system for the change to effect	f
803	3	When the environment is runtime the cost of doing the change is higher than in the other environments	f
804	0	Performance	f
804	1	Interoperability	f
804	2	Availability (Reliability)	f
804	3	Security	f
805	0	Performance and availability qualities	f
805	1	Performance qualities only	f
805	2	Availability qualities only	f
805	3	Performance and security qualities	f
806	0	When the environment is design time it means that the change should be done before the system enters into production	f
806	1	When the environment is build time it means that it is necessary to codify a new module that is added by rebuilding the system	f
806	2	When the environment is initiation time it means that it is necessary to restart the system for the change to effect	f
806	3	When the environment is runtime the cost of doing the change is higher than in the other environments	f
807	0	Performance	f
807	1	Interoperability	f
807	2	Availability (Reliability)	f
807	3	Security	f
808	0	Performance and availability qualities	f
808	1	Performance qualities only	f
808	2	Availability qualities only	f
808	3	Performance and security qualities	f
809	0	Can be applied to any kind stimulus in availability scenarios	f
809	1	Is useful to support scenarios where the stimulus is an omission	f
809	2	Can guarantee that the system will not become unavailable	f
809	3	When applied it increases the latency of the availability scenario's response time	f
810	0	Have high throughput	f
810	1	Have low latency	f
810	2	Allow many simultaneous users	f
810	3	May be easily changed to increase their storage capacity	f
811	0	The Ping/Echo tactic	f
811	1	The Heartbeat tactic	f
811	2	The Voting tactic	f
811	3	The Removal from Service tactic	f
812	0	Manage sampling rate	f
812	1	Limit event response	f
812	2	Prioritize events	f
812	3	Bound execution time	f
813	0	Encapsulate the module such that the clients of the module should not be aware of the remote invocations	f
813	1	Use an intermediary that contains all the code associated with the remote invocation separating it from the modules' business logic	f
813	3	Increase the semantic coherence between the business logic code and the remote invocation code	f
814	0	Usability and Performance	f
814	1	Usability	f
814	2	Performance	f
814	3	Testability	f
815	0	The system would respond faster to all the clients' requests	f
815	1	The performance of the system would not change	f
815	2	The system would respond faster to requests about file locations	f
815	3	The system would respond faster to requests made by DataNodes to update the metadata	f
816	0	Encapsulate the module such that the clients of the module should not be aware of the remote invocations	f
816	1	Use an intermediary that contains all the code associated with the remote invocation separating it from the modules' business logic	f
816	2	Refactor the common parts between the business logic and the remote invocation	f
816	3	Increase the semantic coherence between the business logic code and the remote invocation code	f
817	0	Usability and Performance	f
817	1	Usability	f
817	2	Performance	f
817	3	Testability	f
818	0	The system would respond faster to all the clients' requests	f
818	1	The performance of the system would not change	f
818	2	The system would respond faster to requests about file locations	f
818	3	The system would respond faster to requests made by DataNodes to update the metadata	f
819	0	Manage sampling rate	f
819	1	Limit event response	f
819	2	Prioritize events	f
819	3	Bound execution time	f
820	0	The Ping/Echo tactic	f
820	1	The Heartbeat tactic	f
820	2	The Voting tactic	f
820	3	The Removal from Service tactic	f
821	0	The layered view to deal with the aspects of portability	f
821	1	The uses view to show the coupling between the different platforms	f
821	2	The uses view to show the uses relationships between the different platforms	f
821	3	The data model view to represent each one of the platforms	f
822	0	A module contains the code that executes in a single component and a component executes the code of a single module	f
822	1	A module contains the code that can execute in several components and a component executes the code of a single module	f
822	2	A module contains the code that executes in a single component and a component can execute the code of several modules	f
822	3	A module contains the code that can execute in several components and a component can execute the code of several modules	f
823	0	Cycles in the uses relation between modules are a good sign, because it indicates that several modules should be tested together	f
823	1	The project manager uses this view to get advice on the incremental development of the system	f
823	2	The uses relation should be applied to the coarse-grained modules, because it allows to identify circular dependences	f
823	3	There isn't any relation with the layered architectural style because the allowed-to-use relation is more generic	f
824	0	The view does not address the scenario	f
824	1	The view addresses the scenario because it separates the `Consumer Website` module from the `OpcApp` module	f
824	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement	f
824	3	The view addresses the scenario because the `Consumer Website` module does not use the interfaces a new business partner has to implement	f
825	0	This means that in this software system it is not possible to modularize each responsibility in a cohesive module	f
825	1	She should define finer-grained modules where she splits the unassigned responsibility	f
825	2	She should try to use a view of the Aspects style, assign this responsibility to a single module and define where it crosscuts the other modules	f
825	3	She should try to use a view of the Layered style and assign this responsibility to a module in the bottom layer that can be used by all the other modules	f
826	0	Cycles in the uses relation between modules are a good sign, because it indicates that several modules should be tested together	f
826	1	The project manager uses this view to get advice on the incremental development of the system	f
826	2	The uses relation should be applied to the coarse-grained modules, because it allows to identify circular dependences	f
826	3	There isn't any relation with the layered architectural style because the allowed-to-use relation is more generic	f
827	0	The layered view to deal with the aspects of portability	f
827	1	The uses view to show the coupling between the different platforms	f
827	2	The uses view to show the uses relationships between the different platforms	f
827	3	The data model view to represent each one of the platforms	f
828	0	A module contains the code that executes in a single component and a component executes the code of a single module	f
828	1	A module contains the code that can execute in several components and a component executes the code of a single module	f
828	2	A module contains the code that executes in a single component and a component can execute the code of several modules	f
828	3	A module contains the code that can execute in several components and a component can execute the code of several modules	f
829	0	This means that in this software system it is not possible to modularize each responsibility in a cohesive module	f
829	1	She should define finer-grained modules where she splits the unassigned responsibility	f
829	2	She should try to use a view of the Aspects style, assign this responsibility to a single module and define where it crosscuts the other modules	f
829	3	She should try to use a view of the Layered style and assign this responsibility to a module in the bottom layer that can be used by all the other modules	f
830	0	The view does not address the scenario	f
830	1	The view addresses the scenario because it separates the `Consumer Website` module from the `OpcApp` module	f
846	0	Service-oriented architecture, and Client-server	f
830	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement	f
830	3	The view addresses the scenario because the `Consumer Website` module does not use the interfaces a new business partner has to implement	f
831	0	A change to the uses view to represent that friends can use each other catalog	f
831	1	A change of the layered view to support different presentations, one for each friend	f
831	2	A change of the decomposition view to include a set of new modules with the responsibilities associated with the access control	f
831	3	A new aspect view that includes a module with the responsibilities associated with the access control and that crosscuts some of the other modules	f
832	0	The correctness of the caller module may not depend on the correct implementation of the invoked function in the called module	f
832	1	The invoked function may not have any input parameter	f
832	2	The invoked function may not have any output parameter	f
832	3	The invoked function may not have both any input parameter nor any output parameter	f
833	0	The modules inside a layer cannot use other modules in the same layer	f
833	1	A layer cannot call the layer above	f
833	2	Each layer defines a virtual machine because it provides a set of cohesive functionalities to the upper layer	f
833	3	It is possible to have a circular allowed-to-use relationship between several layers	f
834	0	It is not necessary to have any view of the Data Model architectural style because Facebook information has a very simple structure	f
834	1	It is enough to design a view of the Data Model architectural style at the conceptual level because Facebook information has a very simple structure	f
834	2	It is enough to design a view of the Data Model architectural style at the logical level because the information will be stored in a relational database	f
834	3	It is necessary to design a view of the Data Model architectural style at the physical level to deal with performance and consistency issues of the access to data	f
835	0	The view does not address the scenario	f
835	1	The view addresses the scenario because it separates the `Consumer Website` module from the `OpcApp` module to allow the execution of the `Consumer Website` module in a component that can have multiple copies of computation	f
835	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement	f
835	3	The view addresses the scenario because the `Consumer Website` module uses the `gwt` and `waf` modules	f
836	0	The modules inside a layer cannot use other modules in the same layer	f
836	1	A layer cannot call the layer above	f
836	2	Each layer defines a virtual machine because it provides a set of cohesive functionalities to the upper layer	f
836	3	It is possible to have a circular allowed-to-use relationship between several layers	f
837	0	A change to the uses view to represent that friends can use each other catalog	f
837	1	A change of the layered view to support different presentations, one for each friend	f
837	2	A change of the decomposition view to include a set of new modules with the responsibilities associated with the access control	f
837	3	A new aspect view that includes a module with the responsibilities associated with the access control and that crosscuts some of the other modules	f
838	0	The correctness of the caller module may not depend on the correct implementation of the invoked function in the called module	f
838	1	The invoked function may not have any input parameter	f
838	2	The invoked function may not have any output parameter	f
838	3	The invoked function may not have both any input parameter nor any output parameter	f
839	0	The view does not address the scenario	f
839	1	The view addresses the scenario because it separates the `Consumer Website` module from the `OpcApp` module to allow the execution of the `Consumer Website` module in a component that can have multiple copies of computation	f
839	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement	f
839	3	The view addresses the scenario because the `Consumer Website` module uses the `gwt` and `waf` modules	f
840	0	It is not necessary to have any view of the Data Model architectural style because Facebook information has a very simple structure	f
840	1	It is enough to design a view of the Data Model architectural style at the conceptual level because Facebook information has a very simple structure	f
840	2	It is enough to design a view of the Data Model architectural style at the logical level because the information will be stored in a relational database	f
840	3	It is necessary to design a view of the Data Model architectural style at the physical level to deal with performance and consistency issues of the access to data	f
841	0	Represent the hardware infrastructure that allows components to communicate with each other	f
841	1	May, on another view of the system, be represented by a set of components and connectors	f
841	2	Represent the dependency relations that exist among the various components	f
841	3	Represent the control flow during an execution of the system	f
842	0	Peer-to-Peer	f
842	1	Pipe-and-Filter	f
842	2	Client-Server	f
842	3	Publish-Subscribe	f
843	0	Applies layers to tiers	f
843	1	Restricts the communication between components because, for instance, a group of components should be located in the same hardware	f
843	2	Is an extension of the Client-Server architectural style	f
843	3	Defines tiers as components	f
844	0	Client-server	f
844	1	Communicating Processes	f
844	2	Repository	f
844	3	Pipes-and-Filters	f
845	0	Service-oriented architecture, and Client-server	f
845	1	Service-oriented architecture, and Shared-data	f
845	2	Service-oriented architecture, Shared-data, and Peer-to-peer	f
845	3	Service-oriented architecture, Shared-data, Peer-to-peer, and Client-server	f
846	2	Service-oriented architecture, Shared-data, and Peer-to-peer	f
846	3	Service-oriented architecture, Shared-data, Peer-to-peer, and Client-server	f
847	0	Applies layers to tiers	f
847	1	Restricts the communication between components because, for instance, a group of components should be located in the same hardware	f
847	2	Is an extension of the Client-Server architectural style	f
847	3	Defines tiers as components	f
848	0	Represent the hardware infrastructure that allows components to communicate with each other	f
848	1	May, on another view of the system, be represented by a set of components and connectors	f
848	2	Represent the dependency relations that exist among the various components	f
848	3	Represent the control flow during an execution of the system	f
849	0	Peer-to-Peer	f
849	1	Pipe-and-Filter	f
849	2	Client-Server	f
849	3	Publish-Subscribe	f
850	0	Client-server	f
850	1	Communicating Processes	f
850	2	Repository	f
850	3	Pipes-and-Filters	f
851	0	It corresponds to a particular case of a specialization in a generalization view	f
851	1	It represents a relation between a connector's role and a port of one of its internal components	f
851	2	It represents a relation between a component's port and a port of one of its internal components	f
851	3	It represent a relation between a component's port and a connector's role	f
852	0	A Module viewtype view	f
852	1	A Allocation viewtype view	f
852	2	A Communicating processes view	f
852	3	A Install view	f
853	0	A component can subscribe to events	f
853	1	It is always guaranteed that all the published events are received by their subscribing components	f
853	2	The events should be delivered by the same order they are sent	f
853	3	The set of events types are predefined at initialization time	f
854	0	Shared-data and Communicating-Processes	f
854	1	Communicating-Processes	f
854	2	Tiers	f
854	3	Client-Server and Shared-data	f
855	0	Tiers	f
855	1	Tiers, and Shared-data	f
855	2	Tiers, Shared-data, and Service-oriented architecture	f
855	3	Tiers, Shared-data, Service-oriented architecture, and Client-server	f
856	0	Tiers	f
856	1	Tiers, and Shared-data	f
856	2	Tiers, Shared-data, and Service-oriented architecture	f
856	3	Tiers, Shared-data, Service-oriented architecture, and Client-server	f
857	0	A component can subscribe to events	f
857	1	It is always guaranteed that all the published events are received by their subscribing components	f
857	2	The events should be delivered by the same order they are sent	f
857	3	The set of events types are predefined at initialization time	f
858	0	Shared-data and Communicating-Processes	f
858	1	Communicating-Processes	f
858	2	Tiers	f
858	3	Client-Server and Shared-data	f
859	0	It corresponds to a particular case of a specialization in a generalization view	f
859	1	It represents a relation between a connector's role and a port of one of its internal components	f
859	2	It represents a relation between a component's port and a port of one of its internal components	f
859	3	It represent a relation between a component's port and a connector's role	f
860	0	A Module viewtype view	f
860	1	A Allocation viewtype view	f
860	2	A Communicating processes view	f
860	3	A Install view	f
861	0	A failure.	f
861	1	An error.	f
861	2	A fault.	f
861	3	An input.	f
862	0	Stochastic event.	f
862	1	Overload.	f
862	2	Change level of service.	f
862	3	Throughput.	f
863	0	Split module.	f
863	1	Use an intermediary.	f
863	2	Restrict dependencies.	f
863	3	Refactor.	f
864	0	Decomposition style.	f
864	1	Uses style.	f
864	2	Generalization style.	f
864	3	Layered style.	f
865	0	The Decomposition style.	f
865	1	The Decomposition and Uses styles.	f
865	2	The Layered style.	f
865	3	The Generalization and Decomposition styles.	f
866	0	Whenever complex connectors are used in architectural views it is necessary to also document their decomposition.	f
866	1	It is preferable to only design views that do not use complex connectors to increase understandability.	f
866	2	If there is some technology available that implements the complex connectors it is not necessary to document their decomposition.	f
866	3	Whenever possible it should be avoided to use complex connectors because developers have difficult to know how to implement them.	f
867	0	The Shared Data style.	f
867	1	The Pipes-and-filters style.	f
867	2	The Publish-subscribe style.	f
867	3	The Client-Server style.	f
868	0	This solution optimizes the performance in terms of the latency of each request.	f
868	1	This solution allows an "infinite"increase of the number clients by allowing the inclusion of more Request Nodes.	f
868	2	This solution continues to provide service even if a crash occurs in the Data server.	f
868	3	This solution optimizes the performance in terms of the throughput of processed requests.	f
869	0	Decomposition.	f
869	1	Aspects.	f
869	2	Layered.	f
869	3	Data model.	f
870	0	Aggregate.	f
870	1	Maintain user model.	f
870	2	Maintain task model.	f
870	3	Maintain system model.	f
871	0	This view shows that if is possible to scale differently the `web tier` from the `EJB tier`.	f
871	1	This view shows that the `Adventure Builder Catalog DB` and the `OPC` components should be deployed in the same hardware.	f
871	2	This view **does not** show that the `Adventure Builder Catalog DB` and the `OPC` components can execute behind a firewall.	f
871	3	This view **does not** show that the access to the `web tier` has some security qualities.	f
872	0	Pipe-and-filter.	f
872	1	Maintain multiple copies of data.	f
872	2	Maintain multiple copies of computation.	f
872	3	Introduce concurrency.	f
873	0	Ignore faulty behaviour tactic	f
873	1	Ping-and-echo tactic	f
873	2	Active redundancy tactic	f
873	3	Retry tactic	f
874	0	Cycles in the uses relation between modules are a good sign, because it indicates that several modules should be tested together.	f
874	1	The project manager uses this view to get advice on the incremental development of the system.	f
874	2	The uses relation should be applied to the coarse-grained modules, because it allows to identify circular dependences.	f
874	3	There isn't any relation with the layered architectural style because the allowed-to-use relation is more generic.	f
875	0	When a peer connects to the network it establishes connections with all other peers in the network.	f
875	1	The behavior described in the sentence can be represented in a view where the dynamic reconfiguration architectural style is used.	f
875	2	When a peer receives a connection it sends all its files to the peer connecting it.	f
875	3	The behavior described in the sentence can be represented in a view where the tier architectural style is used.	f
876	0	Analysing the performance of the system.	f
876	1	Planning incremental releases of the system.	f
876	2	Estimating the effort needed to implement the system.	f
876	3	Analysing the system's portability and reusability.	f
877	0	All layers are mapped to the application server component.	f
877	1	The presentation and domain logic layers are mapped to the application server component and the data access layer to the repository component.	f
877	2	The presentation layer is mapped to the browser component and the other two layers are mapped to the application server component.	f
877	3	All layers are mapped to the browser component where the data access layer will contains, besides a module to access a local repository, modules to access external services.	f
878	0	Incorporate in the organization's core business the goals of a software house.	f
878	1	Do in-house development.	f
878	2	Integrate the development of the software system with the organization's business goals.	f
878	3	Reimplement all the information systems of the organization	f
879	0	An aggregate can contain a large number of instances.	f
879	1	An aggregate is usually loaded in its entirety from the database.	f
879	2	An aggregate has runtime references to other aggregates.	f
879	3	An aggregate is cluster of domain classes.	f
880	0	Each service can be developed and deployed independently	f
880	1	Easier to scale development	f
880	2	Eliminates any long-term commitment to a technology stack	f
880	3	Testing is easier	f
881	0	Whenever complex connectors are used in architectural views it is necessary to also document their decomposition.	f
881	1	It is preferable to only design views that do not use complex connectors to increase understandability.	f
881	2	If there is some technology available that implements the complex connectors it is not necessary to document their decomposition.	f
881	3	Whenever possible it should be avoided to use complex connectors because developers have difficult to know how to implement them.	f
882	0	The Shared Data style.	f
882	1	The Pipes-and-filters style.	f
882	2	The Publish-subscribe style.	f
882	3	The Client-Server style.	f
883	0	Decomposition.	f
883	1	Aspects.	f
883	2	Layered.	f
883	3	Data model.	f
884	0	This solution optimizes the performance in terms of the latency of each request.	f
884	1	This solution allows an "infinite"increase of the number clients by allowing the inclusion of more Request Nodes.	f
884	2	This solution continues to provide service even if a crash occurs in the Data server.	f
884	3	This solution optimizes the performance in terms of the throughput of processed requests.	f
885	0	Incorporate in the organization's core business the goals of a software house.	f
885	1	Do in-house development.	f
885	2	Integrate the development of the software system with the organization's business goals.	f
885	3	Reimplement all the information systems of the organization	f
886	0	A failure.	f
886	1	An error.	f
886	2	A fault.	f
886	3	An input.	f
887	0	Stochastic event.	f
887	1	Overload.	f
887	2	Change level of service.	f
887	3	Throughput.	f
888	0	Split module.	f
888	1	Use an intermediary.	f
888	2	Restrict dependencies.	f
888	3	Refactor.	f
889	0	Decomposition style.	f
889	1	Uses style.	f
889	2	Generalization style.	f
889	3	Layered style.	f
890	0	The Decomposition style.	f
890	1	The Decomposition and Uses styles.	f
890	2	The Layered style.	f
890	3	The Generalization and Decomposition styles.	f
891	0	An aggregate can contain a large number of instances.	f
891	1	An aggregate is usually loaded in its entirety from the database.	f
891	2	An aggregate has runtime references to other aggregates.	f
891	3	An aggregate is cluster of domain classes.	f
892	0	Each service can be developed and deployed independently	f
892	1	Easier to scale development	f
892	2	Eliminates any long-term commitment to a technology stack	f
892	3	Testing is easier	f
893	0	Aggregate.	f
893	1	Maintain user model.	f
893	2	Maintain task model.	f
893	3	Maintain system model.	f
894	0	This view shows that if is possible to scale differently the `web tier` from the `EJB tier`.	f
894	1	This view shows that the `Adventure Builder Catalog DB` and the `OPC` components should be deployed in the same hardware.	f
894	2	This view **does not** show that the `Adventure Builder Catalog DB` and the `OPC` components can execute behind a firewall.	f
894	3	This view **does not** show that the access to the `web tier` has some security qualities.	f
895	0	Pipe-and-filter.	f
895	1	Maintain multiple copies of data.	f
895	2	Maintain multiple copies of computation.	f
895	3	Introduce concurrency.	f
896	0	Ignore faulty behaviour tactic	f
896	1	Ping-and-echo tactic	f
896	2	Active redundancy tactic	f
896	3	Retry tactic	f
897	0	Cycles in the uses relation between modules are a good sign, because it indicates that several modules should be tested together.	f
897	1	The project manager uses this view to get advice on the incremental development of the system.	f
897	2	The uses relation should be applied to the coarse-grained modules, because it allows to identify circular dependences.	f
897	3	There isn't any relation with the layered architectural style because the allowed-to-use relation is more generic.	f
898	0	When a peer connects to the network it establishes connections with all other peers in the network.	f
898	1	The behavior described in the sentence can be represented in a view where the dynamic reconfiguration architectural style is used.	f
898	2	When a peer receives a connection it sends all its files to the peer connecting it.	f
898	3	The behavior described in the sentence can be represented in a view where the tier architectural style is used.	f
899	0	Analysing the performance of the system.	f
899	1	Planning incremental releases of the system.	f
899	2	Estimating the effort needed to implement the system.	f
899	3	Analysing the system's portability and reusability.	f
900	0	All layers are mapped to the application server component.	f
900	1	The presentation and domain logic layers are mapped to the application server component and the data access layer to the repository component.	f
900	2	The presentation layer is mapped to the browser component and the other two layers are mapped to the application server component.	f
900	3	All layers are mapped to the browser component where the data access layer will contains, besides a module to access a local repository, modules to access external services.	f
901	0	Increase competence set.	f
901	1	Shadow.	f
901	2	Voting.	f
901	3	Ignore faulty behavior.	f
902	0	Increase resources.	f
902	1	Reduce overhead.	f
902	2	Bound queue sizes.	f
902	3	Introduce concurrency.	f
903	0	When the modification should occur.	f
903	1	The features that will be implemented.	f
903	2	The new defects introduced.	f
903	3	Defer binding.	f
904	0	The decomposition view to include a module for the synchronization responsibilities	f
904	1	The uses view to represent how the mobile device uses the Catalog application	f
904	2	The layered view to include a layer for each type of device	f
904	3	The domain layer of the layered style to represent the types of devices	f
905	0	The *config* module is not used in the implementation of any component.	f
905	1	The *main* module is used in the implementation of all components.	f
905	2	The connectors only use the *stdio* module for their implementation.	f
905	3	The *Split* component uses the *to_lower* module for its implementation	f
906	0	Split module.	f
906	1	Abstract common services.	f
906	2	Restrict dependencies.	f
906	3	Encapsulation.	f
907	0	Peer-to-Peer.	f
907	1	Pipe-and-Filter.	f
907	2	Client-Server.	f
907	3	Publish-Subscribe.	f
908	0	Performance.	f
908	1	Availability for incorrect responses from the Image File Storage component.	f
908	2	Performance and Availability for crashes of the Image File Storage component.	f
908	3	Performance and Availability for incorrect responses from the Image File Storage component.	f
909	0	Usability and Performance.	f
909	1	Usability.	f
909	2	Performance.	f
909	3	Modifiability.	f
910	0	It assigns components and connectors to people and teams.	f
910	1	It is useful for the project managers.	f
910	2	It does not consider the software that is outsourced.	f
910	3	It allows to estimate the cost of hardware.	f
911	0	One.	f
911	1	Two.	f
911	2	Three.	f
911	3	Four.	f
912	0	The cost of the modification.	f
912	1	That the integration of a new source will not have any impact on the other modules of the Catalog of DVDs.	f
912	2	That the impact of integrating a new source is controlled by the interface of *Import DVD Info* Module.	f
912	3	That the modification can occur at runtime.	f
913	0	It is not necessary to have any view of the Data Model architectural style because Facebook information has a very simple structure.	f
933	2	The Service Oriented Architecture style.	f
933	3	The Communicating Processes style.	f
913	1	It is enough to design a view of the Data Model architectural style at the conceptual level because Facebook information has a very simple structure.	f
913	2	It is enough to design a view of the Data Model architectural style at the logical level because the information will be stored in a relational database.	f
913	3	It is necessary to design a view of the Data Model architectural style at the physical level to deal with performance and consistency issues of the access to data.	f
914	0	The Decomposition style.	f
914	1	The Client-Server style.	f
914	2	The Service Oriented Architecture style.	f
914	3	The Communicating Processes style.	f
915	0	This view shows that the processing of orders is done synchronously.	f
915	1	This view shows that the processing of tracking requests is done synchronously.	f
915	2	This view shows that bank debits are done asynchronously.	f
915	3	This view shows that the responses from the providers are processed synchronously.	f
916	0	Pipe-and-filter and tiers.	f
916	1	Shared-data and publish-subscribe.	f
916	2	Pipe-and-filter and publish-subscribe.	f
916	3	Pipe-and-filter and shared-data.	f
917	0	Guarantees that the redundant data in the client and the server is always synchronized.	f
917	1	Implements an event bus that allows the server to inform the client about new order recommendations.	f
917	2	Do not loose the changes done on the client component if the server is not available.	f
917	3	It completely hides the server faults from the Pad user.	f
918	0	Results from a utility tree for performance.	f
918	1	Results from a single availability scenario.	f
918	2	Results from the application of a single ADD iteration.	f
918	3	Results from the application of several ADD iterations.	f
919	0	It would reduce the scalability for updates of different orders for the same customer.	f
919	1	Two users would conflict if they attempt to edit different orders for the same customer.	f
919	2	As the number of orders grows it will be increasingly expensive to load the aggregate.	f
919	3	All the above.	f
920	0	We do not need a view of the module viewtype because it is about the runtime properties of the system.	f
920	1	We do not need a view of the allocation viewtype because deployment is automated.	f
920	2	The component-and-connector view should emphasize the performance qualities of systems following the microservices architecture.	f
920	3	It is necessary to use views of the three viewtypes.	f
921	0	It would reduce the scalability for updates of different orders for the same customer.	f
921	1	Two users would conflict if they attempt to edit different orders for the same customer.	f
921	2	As the number of orders grows it will be increasingly expensive to load the aggregate.	f
921	3	All the above.	f
922	0	Increase competence set.	f
922	1	Shadow.	f
922	2	Voting.	f
922	3	Ignore faulty behavior.	f
923	0	Increase resources.	f
923	1	Reduce overhead.	f
923	2	Bound queue sizes.	f
923	3	Introduce concurrency.	f
924	0	We do not need a view of the module viewtype because it is about the runtime properties of the system.	f
924	1	We do not need a view of the allocation viewtype because deployment is automated.	f
924	2	The component-and-connector view should emphasize the performance qualities of systems following the microservices architecture.	f
924	3	It is necessary to use views of the three viewtypes.	f
925	0	When the modification should occur.	f
925	1	The features that will be implemented.	f
925	2	The new defects introduced.	f
925	3	Defer binding.	f
926	0	The decomposition view to include a module for the synchronization responsibilities	f
926	1	The uses view to represent how the mobile device uses the Catalog application	f
926	2	The layered view to include a layer for each type of device	f
926	3	The domain layer of the layered style to represent the types of devices	f
927	0	Usability and Performance.	f
927	1	Usability.	f
927	2	Performance.	f
927	3	Modifiability.	f
928	0	It assigns components and connectors to people and teams.	f
928	1	It is useful for the project managers.	f
928	2	It does not consider the software that is outsourced.	f
928	3	It allows to estimate the cost of hardware.	f
929	0	Performance.	f
929	1	Availability for incorrect responses from the Image File Storage component.	f
929	2	Performance and Availability for crashes of the Image File Storage component.	f
929	3	Performance and Availability for incorrect responses from the Image File Storage component.	f
930	0	One.	f
930	1	Two.	f
930	2	Three.	f
930	3	Four.	f
931	0	The cost of the modification.	f
931	1	That the integration of a new source will not have any impact on the other modules of the Catalog of DVDs.	f
931	2	That the impact of integrating a new source is controlled by the interface of *Import DVD Info* Module.	f
931	3	That the modification can occur at runtime.	f
932	0	It is not necessary to have any view of the Data Model architectural style because Facebook information has a very simple structure.	f
932	1	It is enough to design a view of the Data Model architectural style at the conceptual level because Facebook information has a very simple structure.	f
932	2	It is enough to design a view of the Data Model architectural style at the logical level because the information will be stored in a relational database.	f
932	3	It is necessary to design a view of the Data Model architectural style at the physical level to deal with performance and consistency issues of the access to data.	f
933	0	The Decomposition style.	f
933	1	The Client-Server style.	f
934	0	This view shows that the processing of orders is done synchronously.	f
934	1	This view shows that the processing of tracking requests is done synchronously.	f
934	2	This view shows that bank debits are done asynchronously.	f
934	3	This view shows that the responses from the providers are processed synchronously.	f
935	0	Results from a utility tree for performance.	f
935	1	Results from a single availability scenario.	f
935	2	Results from the application of a single ADD iteration.	f
935	3	Results from the application of several ADD iterations.	f
936	0	Pipe-and-filter and tiers.	f
936	1	Shared-data and publish-subscribe.	f
936	2	Pipe-and-filter and publish-subscribe.	f
936	3	Pipe-and-filter and shared-data.	f
937	0	Guarantees that the redundant data in the client and the server is always synchronized.	f
937	1	Implements an event bus that allows the server to inform the client about new order recommendations.	f
937	2	Do not loose the changes done on the client component if the server is not available.	f
937	3	It completely hides the server faults from the Pad user.	f
938	0	Split module.	f
938	1	Abstract common services.	f
938	2	Restrict dependencies.	f
938	3	Encapsulation.	f
939	0	Peer-to-Peer.	f
939	1	Pipe-and-Filter.	f
939	2	Client-Server.	f
939	3	Publish-Subscribe.	f
940	0	The *config* module is not used in the implementation of any component.	f
940	1	The *main* module is used in the implementation of all components.	f
940	2	The connectors only use the *stdio* module for their implementation.	f
940	3	The *Split* component uses the *to_lower* module for its implementation	f
941	0	Availability whenever the server running the tasks crashes, the tasks are restarted and eventually finished	f
941	1	Performance of the tasks execution, scheduling of tasks can be optimized for the particular context of the system	f
941	2	Performance of the services being executed by the clients, they can execute other actions while waiting for the response	f
941	3	Simple programming model, the clients only need to concern about the business logic of the application, the remote services are transparent	f
942	0	The result of decisions that are made at the "upper floors" of the organization	f
942	1	The sole decision of an architect	f
942	2	A common understanding to be achieve among all the system stakeholders	f
942	3	A set of software elements and their relations	f
943	0	Commercial	f
943	1	Technical	f
943	2	Project	f
943	3	Professional	f
944	0	Availability of the Image Write Service, whenever one of the Image Write Service components crashes	f
944	1	Scalability of the Image File Storage in terms of the storage capacity	f
944	2	Availability of the Image File Storage, whenever the Image File Storage component crashes	f
944	3	Performance of the Image Write Service	f
945	0	The source of stimulus is the FenixEDU system	f
945	1	The stimulus is periodic	f
945	2	The environment is overloaded	f
945	3	The measure of the response is throughput	f
946	0	The result of decisions that are made at the "upper floors" of the organization	f
946	1	The sole decision of an architect	f
946	2	A common understanding to be achieve among all the system stakeholders	f
946	3	A set of software elements and their relations	f
947	0	The source of stimulus is the FenixEDU system	f
947	1	The stimulus is periodic	f
947	2	The environment is overloaded	f
947	3	The measure of the response is throughput	f
948	0	Commercial	f
948	1	Technical	f
948	2	Project	f
948	3	Professional	f
949	0	Availability of the Image Write Service, whenever one of the Image Write Service components crashes	f
949	1	Scalability of the Image File Storage in terms of the storage capacity	f
949	2	Availability of the Image File Storage, whenever the Image File Storage component crashes	f
949	3	Performance of the Image Write Service	f
950	0	Availability whenever the server running the tasks crashes, the tasks are restarted and eventually finished	f
950	1	Performance of the tasks execution, scheduling of tasks can be optimized for the particular context of the system	f
950	2	Performance of the services being executed by the clients, they can execute other actions while waiting for the response	f
950	3	Simple programming model, the clients only need to concern about the business logic of the application, the remote services are transparent	f
951	0	Interoperability is a quality that as lower priority than performance	f
951	1	Scalability should be the quality to be achieved first by any architecture	f
951	2	That the use of XML technology for interoperability is not a correct decision	f
951	3	None of the above	f
952	0	Performance	f
952	1	Availability	f
952	2	Modifiability	f
952	3	Time to market	f
953	0	The number of Image Write Service components should be the same of the number Image Retrieval Service components	f
953	1	The hardware where of Image Write Service components execute should have the same capabilities of the hardware where Image Retrieval Service components run	f
953	2	Both components, the Image Write Service and the Image Retrieval Service, should be designed using an synchronous model of interactions, where a thread is associated with each request	f
953	3	The separation of write and retrieval services allows them do scale independently	f
954	0	The synchronous solution requires less memory than asynchronous solution	f
954	1	The asynchronous solution can support a larger number of simultaneous requests	f
954	2	In the synchronous solution a task can be associated, during its execution, with different execution entities, e.g. thread	f
954	3	In the asynchronous solution a task is always associated, during its execution, with the same execution entity, e.g. thread	f
955	0	Introduce concurrency	f
955	1	Limit event response	f
955	2	Maintain multiple copies of data	f
955	3	Schedule resources	f
956	0	The synchronous solution requires less memory than asynchronous solution	f
956	1	The asynchronous solution can support a larger number of simultaneous requests	f
956	2	In the synchronous solution a task can be associated, during its execution, with different execution entities, e.g. thread	f
956	3	In the asynchronous solution a task is always associated, during its execution, with the same execution entity, e.g. thread	f
957	0	Interoperability is a quality that as lower priority than performance	f
957	1	Scalability should be the quality to be achieved first by any architecture	f
957	2	That the use of XML technology for interoperability is not a correct decision	f
957	3	None of the above	f
958	0	Performance	f
958	1	Availability	f
958	2	Modifiability	f
958	3	Time to market	f
959	0	The number of Image Write Service components should be the same of the number Image Retrieval Service components	f
959	1	The hardware where of Image Write Service components execute should have the same capabilities of the hardware where Image Retrieval Service components run	f
959	2	Both components, the Image Write Service and the Image Retrieval Service, should be designed using an synchronous model of interactions, where a thread is associated with each request	f
959	3	The separation of write and retrieval services allows them do scale independently	f
960	0	Introduce concurrency	f
960	1	Limit event response	f
960	2	Maintain multiple copies of data	f
960	3	Schedule resources	f
961	0	Provides the quality of availability	f
961	1	Provides the quality of performance	f
961	2	Provides the quality of modifiability	f
961	3	Does not provide any additional quality	f
962	0	The need to use a two-phase commit protocol	f
962	1	The need to have a tight integration of the development teams	f
962	2	The need to have eventual consistency and compensating operations	f
962	3	The need to deploy all the microservices simultaneously	f
963	0	Time to market is the most important impact of cloud computing in an architecture	f
963	1	Reduction of cost is the most important impact of cloud computing in an architecture	f
963	2	Cloud computing has impact on the business but it is not an architectural aspect	f
963	3	Using cloud computing we cannot delay some architectural decisions	f
964	0	In the synchronous solution only some of the tasks that are being executed are lost and they have to be resubmitted by the client	f
964	1	In the asynchronous solution the tasks that are being executed are lost and they have to be resubmitted by the client	f
964	2	In the asynchronous solution it is possible to provide an implement where the tasks being executed are finished without requiring the client to resubmitted them	f
964	3	In the synchronous solution the tasks being executed are finished without requiring the client to resubmitted them	f
965	0	Manage sampling rate	f
965	1	Bound execution times	f
965	2	Maintain multiple copies of computation	f
965	3	Increase resource efficiency	f
966	0	In the synchronous solution only some of the tasks that are being executed are lost and they have to be resubmitted by the client	f
966	1	In the asynchronous solution the tasks that are being executed are lost and they have to be resubmitted by the client	f
966	2	In the asynchronous solution it is possible to provide an implement where the tasks being executed are finished without requiring the client to resubmitted them	f
966	3	In the synchronous solution the tasks being executed are finished without requiring the client to resubmitted them	f
967	0	Provides the quality of availability	f
967	1	Provides the quality of performance	f
967	2	Provides the quality of modifiability	f
967	3	Does not provide any additional quality	f
968	0	The need to use a two-phase commit protocol	f
968	1	The need to have a tight integration of the development teams	f
968	2	The need to have eventual consistency and compensating operations	f
968	3	The need to deploy all the microservices simultaneously	f
969	0	Manage sampling rate	f
969	1	Bound execution times	f
969	2	Maintain multiple copies of computation	f
969	3	Increase resource efficiency	f
970	0	Time to market is the most important impact of cloud computing in an architecture	f
970	1	Reduction of cost is the most important impact of cloud computing in an architecture	f
970	2	Cloud computing has impact on the business but it is not an architectural aspect	f
970	3	Using cloud computing we cannot delay some architectural decisions	f
971	0	Ping/Echo.	f
971	1	Retry.	f
971	2	Voting.	f
971	3	Passive Redundancy.	f
972	0	Has as main goal the reduction of the modules' size.	f
972	1	Results in the creation of a third module that makes the original modules independent.	f
972	2	Increases the cohesion between the two modules.	f
972	3	May conflict with the Reduce Overhead performance tactic.	f
973	0	Results from a utility tree for performance.	f
973	1	Results from a single availability scenario.	f
973	2	Results from the application of a single ADD iteration.	f
973	3	Results from the application of several ADD iterations.	f
974	0	Its main goal is to establish the reusability qualities of the architecture.	f
1051	0	A deployment view.	f
974	1	Project managers are not interested in views that use this style because it lacks the necessary level of detail.	f
974	2	Views of this type are mostly useful to guide the testing of the system.	f
974	3	There should be at least one view of the system using this architectural style.	f
975	0	Task Model tactics.	f
975	1	System Model tactics.	f
975	2	performance tactics.	f
975	3	User Model tactics.	f
976	0	Its main goal is to establish the reusability qualities of the architecture.	f
976	1	Project managers are not interested in views that use this style because it lacks the necessary level of detail.	f
976	2	Views of this type are mostly useful to guide the testing of the system.	f
976	3	There should be at least one view of the system using this architectural style.	f
977	0	Task Model tactics.	f
977	1	System Model tactics.	f
977	2	performance tactics.	f
977	3	User Model tactics.	f
978	0	Ping/Echo.	f
978	1	Retry.	f
978	2	Voting.	f
978	3	Passive Redundancy.	f
979	0	Has as main goal the reduction of the modules' size.	f
979	1	Results in the creation of a third module that makes the original modules independent.	f
979	2	Increases the cohesion between the two modules.	f
979	3	May conflict with the Reduce Overhead performance tactic.	f
980	0	Results from a utility tree for performance.	f
980	1	Results from a single availability scenario.	f
980	2	Results from the application of a single ADD iteration.	f
980	3	Results from the application of several ADD iterations.	f
981	0	Programming, if the components execute modules developed by different teams.	f
981	1	Hardware, if there is hardware redundancy.	f
981	2	Operating Systems, if redundant components execute on top of different operating systems..	f
981	3	All the previous options.	f
982	0	This is a performance scenario and the measure of the response is 10 minutes latency.	f
982	1	This is a modifiability scenario which has a defer binding tactic.	f
982	2	This is not a modifiability scenario because the source of the stimulus cannot be a system administrator.	f
982	3	This is a modifiability scenario and its environment design time.	f
983	0	This ASR can easily be supported by the architecture because it has little effect in the architecture.	f
983	1	This ASR requires a specific architectural design because it profoundly affects the architecture.	f
983	2	The cost of meeting the ASR after development starts is too high.	f
983	3	Any ASR that has a high business value cannot have a low architecture impact because it needs to be supported by the architecture.	f
984	0	Is applied only once at the beginning of the architectural design process.	f
984	1	Is applied at the begin of the architectural design process but may be necessary to redo it later.	f
984	2	Is mostly driven by the security attribute quality.	f
984	3	Follows a bottom-up decomposition process of the system.	f
985	0	Performance.	f
985	1	Interoperability.	f
985	2	Availability.	f
985	3	Security.	f
986	0	Performance.	f
986	1	Interoperability.	f
986	2	Availability.	f
986	3	Security.	f
987	0	Programming, if the components execute modules developed by different teams.	f
987	1	Hardware, if there is hardware redundancy.	f
987	2	Operating Systems, if redundant components execute on top of different operating systems..	f
987	3	All the previous options.	f
988	0	This ASR can easily be supported by the architecture because it has little effect in the architecture.	f
988	1	This ASR requires a specific architectural design because it profoundly affects the architecture.	f
988	2	The cost of meeting the ASR after development starts is too high.	f
988	3	Any ASR that has a high business value cannot have a low architecture impact because it needs to be supported by the architecture.	f
989	0	This is a performance scenario and the measure of the response is 10 minutes latency.	f
989	1	This is a modifiability scenario which has a defer binding tactic.	f
989	2	This is not a modifiability scenario because the source of the stimulus cannot be a system administrator.	f
989	3	This is a modifiability scenario and its environment design time.	f
990	0	Is applied only once at the beginning of the architectural design process.	f
990	1	Is applied at the begin of the architectural design process but may be necessary to redo it later.	f
990	2	Is mostly driven by the security attribute quality.	f
990	3	Follows a bottom-up decomposition process of the system.	f
991	0	Prevent a fault in hardware.	f
991	1	Prevent a fault in software.	f
991	2	Prevent a fault in a process.	f
991	3	Detect a fault.	f
992	0	A low cost of change may imply a high cost of development.	f
992	1	A low cost of change implies a low cost of development, because changing the code is part of development.	f
992	2	There is no relation between the cost of change and the cost of development.	f
992	3	The cost of change is higher if it occurs at runtime.	f
993	0	Is driven by functional requirements.	f
993	1	Is done in a single step, after all the tactics were identified.	f
993	2	Is a top-down process where a initial decomposition is chosen and it is successively decomposed without changing the initial decisions.	f
993	3	Is an iterative process where architectural designs are proposed as hypothesis and tested.	f
994	0	Each view contains a single architectural style.	f
994	1	Views need to contain more than one architectural style.	f
994	2	A view may not contain any architectural style.	f
994	3	None of the above.	f
995	0	The quality addressed is availability and transactions tactic is required to solve the problem.	f
995	1	The quality addressed is performance and a limit event response is required to solve the problem.	f
995	2	The quality addressed is availability and a voting design tactic is required to solve the problem.	f
995	3	The quality addressed is performance and a maintain multiple copies of data design tactic is required to solve the problem.	f
996	0	Is driven by functional requirements.	f
996	1	Is done in a single step, after all the tactics were identified.	f
996	2	Is a top-down process where a initial decomposition is chosen and it is successively decomposed without changing the initial decisions.	f
996	3	Is an iterative process where architectural designs are proposed as hypothesis and tested.	f
997	0	Each view contains a single architectural style.	f
997	1	Views need to contain more than one architectural style.	f
997	2	A view may not contain any architectural style.	f
997	3	None of the above.	f
998	0	The quality addressed is availability and transactions tactic is required to solve the problem.	f
998	1	The quality addressed is performance and a limit event response is required to solve the problem.	f
998	2	The quality addressed is availability and a voting design tactic is required to solve the problem.	f
998	3	The quality addressed is performance and a maintain multiple copies of data design tactic is required to solve the problem.	f
999	0	Prevent a fault in hardware.	f
999	1	Prevent a fault in software.	f
999	2	Prevent a fault in a process.	f
999	3	Detect a fault.	f
1000	0	A low cost of change may imply a high cost of development.	f
1000	1	A low cost of change implies a low cost of development, because changing the code is part of development.	f
1000	2	There is no relation between the cost of change and the cost of development.	f
1000	3	The cost of change is higher if it occurs at runtime.	f
1001	0	The Aspects style.	f
1001	1	The Generalisation style.	f
1001	2	The Decomposition style.	f
1001	3	The Shared-data style.	f
1002	0	Service-oriented architecture, and Client-server.	f
1002	1	Service-oriented architecture, and Shared-data.	f
1002	2	Service-oriented architecture, Shared-data, and Client-server.	f
1002	3	Service-oriented architecture, Shared-data, Client-server and Peer-to-peer.	f
1003	0	The view does not address the scenario	f
1003	1	The view addresses the scenario because it separates the `Consumer Website` module from the `OpcApp` module.	f
1003	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement.	f
1003	3	The view addresses the scenario because the `Consumer Website` module does not use the interfaces a new business partner has to implement.	f
1004	0	It corresponds to a particular case of a specialization in a generalization view.	f
1004	1	It represents a relation between a connector's role and a port of one of its internal components.	f
1004	2	It represents a relation between a component's port and a port of one of its internal components.	f
1004	3	It represents a relation between a component's port and a connector's role.	f
1005	0	But when the filters are executed sequentially the composition power is reduced.	f
1005	1	Which improves modifiability, because filters are decoupled through pipes.	f
1005	2	But the size of buffers may reduce the composition power.	f
1005	3	And filters do not have to agree on the data formats.	f
1006	0	Service-oriented architecture, and Client-server.	f
1006	1	Service-oriented architecture, and Shared-data.	f
1006	2	Service-oriented architecture, Shared-data, and Client-server.	f
1006	3	Service-oriented architecture, Shared-data, Client-server and Peer-to-peer.	f
1007	0	The Aspects style.	f
1007	1	The Generalisation style.	f
1007	2	The Decomposition style.	f
1007	3	The Shared-data style.	f
1008	0	It corresponds to a particular case of a specialization in a generalization view.	f
1008	1	It represents a relation between a connector's role and a port of one of its internal components.	f
1008	2	It represents a relation between a component's port and a port of one of its internal components.	f
1008	3	It represents a relation between a component's port and a connector's role.	f
1009	0	But when the filters are executed sequentially the composition power is reduced.	f
1009	1	Which improves modifiability, because filters are decoupled through pipes.	f
1009	2	But the size of buffers may reduce the composition power.	f
1009	3	And filters do not have to agree on the data formats.	f
1010	0	The view does not address the scenario	f
1010	1	The view addresses the scenario because it separates the `Consumer Website` module from the `OpcApp` module.	f
1010	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement.	f
1010	3	The view addresses the scenario because the `Consumer Website` module does not use the interfaces a new business partner has to implement.	f
1011	0	A component can subscribe to events.	f
1011	1	All the published events are received by their subscribing components.	f
1011	2	The events should be received by the same order they are sent.	f
1011	3	The set of events types are predefined at initialization time.	f
1012	0	If the OPC crashes the Consumer Website can continue to provide service in degraded mode.	f
1012	1	If the OPC crashes the Consumer Website can continue to provide service in normal mode.	f
1012	2	If the Adventure Catalog BD crashes the Consumer Website can continue to present the Adventure Builder offers.	f
1012	3	If a Bank component is not available the OPC cannot continue to provide service.	f
1013	0	The view does not address the scenario.	f
1013	1	The view addresses the scenario because it separates the `Consumer Website` module from the `OpcApp` module to allow the execution of the `Consumer Website` module in a component that can have multiple copies of computation.	f
1013	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement.	f
1013	3	The view addresses the scenario because the `Consumer Website` module uses the `gwt` and `waf` modules.	f
1014	0	The type of a connector does not depend on the type of its roles.	f
1014	1	Components of different types may have ports of the same type.	f
1014	2	The attachment is a runtime relation which dynamically manages type compliance.	f
1014	3	The attachment between components and connectors only depends on their ports and roles types.	f
1015	0	The Decomposition style.	f
1015	1	The Generalisation style.	f
1015	2	The Uses style.	f
1015	3	The Aspects style.	f
1016	0	If the OPC crashes the Consumer Website can continue to provide service in degraded mode.	f
1016	1	If the OPC crashes the Consumer Website can continue to provide service in normal mode.	f
1016	2	If the Adventure Catalog BD crashes the Consumer Website can continue to present the Adventure Builder offers.	f
1016	3	If a Bank component is not available the OPC cannot continue to provide service.	f
1017	0	A component can subscribe to events.	f
1017	1	All the published events are received by their subscribing components.	f
1017	2	The events should be received by the same order they are sent.	f
1017	3	The set of events types are predefined at initialization time.	f
1018	0	The Decomposition style.	f
1018	1	The Generalisation style.	f
1018	2	The Uses style.	f
1018	3	The Aspects style.	f
1019	0	The view does not address the scenario.	f
1019	1	The view addresses the scenario because it separates the `Consumer Website` module from the `OpcApp` module to allow the execution of the `Consumer Website` module in a component that can have multiple copies of computation.	f
1019	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement.	f
1019	3	The view addresses the scenario because the `Consumer Website` module uses the `gwt` and `waf` modules.	f
1020	0	The type of a connector does not depend on the type of its roles.	f
1020	1	Components of different types may have ports of the same type.	f
1020	2	The attachment is a runtime relation which dynamically manages type compliance.	f
1020	3	The attachment between components and connectors only depends on their ports and roles types.	f
1021	0	Layer 1.	f
1021	1	Layer 4.	f
1021	2	In a layered architecture all layers are equally modifiable.	f
1021	3	Modifiability is not made easier by a layered architecture.	f
1022	0	Client-server.	f
1022	1	Publish-subscribe.	f
1022	2	Shared-data.	f
1022	3	Peer-to-peer.	f
1023	0	The view does not address the scenario	f
1023	1	The view addresses the scenario because the uses relation between the `Consumer Website` module and the `OpcApp` module has the require properties.	f
1023	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement.	f
1023	3	The view addresses the scenario because the `Consumer Website` module uses the `gwt` and `waf` modules.	f
1024	0	Modifiability.	f
1024	1	Availability and Performance.	f
1024	2	Testability and Modifiability.	f
1024	3	Maintainability and Availability.	f
1025	0	The file transfer has to follow the same path of nodes used to identify where the file was located.	f
1025	1	The peer initiating the request for a file needs to know where the file is located.	f
1025	2	If a peer providing a file crashes the file will not be downloaded.	f
1025	3	The price for high scalability and availability is the need to have several replicas of the files to be shared.	f
1026	0	Client-server.	f
1026	1	Publish-subscribe.	f
1026	2	Shared-data.	f
1026	3	Peer-to-peer.	f
1027	0	Layer 1.	f
1027	1	Layer 4.	f
1027	2	In a layered architecture all layers are equally modifiable.	f
1027	3	Modifiability is not made easier by a layered architecture.	f
1028	0	The view does not address the scenario	f
1028	1	The view addresses the scenario because the uses relation between the `Consumer Website` module and the `OpcApp` module has the require properties.	f
1028	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement.	f
1028	3	The view addresses the scenario because the `Consumer Website` module uses the `gwt` and `waf` modules.	f
1029	0	The file transfer has to follow the same path of nodes used to identify where the file was located.	f
1029	1	The peer initiating the request for a file needs to know where the file is located.	f
1029	2	If a peer providing a file crashes the file will not be downloaded.	f
1029	3	The price for high scalability and availability is the need to have several replicas of the files to be shared.	f
1030	0	Modifiability.	f
1030	1	Availability and Performance.	f
1030	2	Testability and Modifiability.	f
1030	3	Maintainability and Availability.	f
1031	0	Applies layers to tiers.	f
1031	1	Restricts the communication between components because, for instance, a group of components should be located in the same hardware.	f
1031	2	Is an extension of the Client-Server architectural style.	f
1031	3	Defines tiers as components.	f
1032	0	The decomposition was driven by a defer binding tactic.	f
1051	1	A work assignment view.	f
1032	1	The decomposition was driven by a quality that is supported by a restrict dependencies tactic.	f
1032	2	The decomposition was driven by a split module tactic.	f
1032	3	The decomposition was driven by a quality that is supported by an encapsulate tactic.	f
1033	0	A performance scenario associated with the throughput of writing data points to disk.	f
1033	1	A performance scenario associated with the latency of writing data points to disk.	f
1033	2	An availability scenario associated with a fault in the *Carbon* component.	f
1033	3	A usability scenario.	f
1034	0	HTML5 provides better portability qualities.	f
1034	1	Native applications provide better modifiability qualities.	f
1034	2	HTML5 provides better usability qualities.	f
1034	3	Native applications provide better support for working offline.	f
1035	0	Simplifies the evolution of the event schema.	f
1035	1	Simplifies the query operations in the event store.	f
1035	2	Allows the querying of a past state.	f
1035	3	Provides a programming model developers are familiar with.	f
1036	0	A performance scenario associated with the throughput of writing data points to disk.	f
1036	1	A performance scenario associated with the latency of writing data points to disk.	f
1036	2	An availability scenario associated with a fault in the *Carbon* component.	f
1036	3	A usability scenario.	f
1037	0	Simplifies the evolution of the event schema.	f
1037	1	Simplifies the query operations in the event store.	f
1037	2	Allows the querying of a past state.	f
1037	3	Provides a programming model developers are familiar with.	f
1038	0	Applies layers to tiers.	f
1038	1	Restricts the communication between components because, for instance, a group of components should be located in the same hardware.	f
1038	2	Is an extension of the Client-Server architectural style.	f
1038	3	Defines tiers as components.	f
1039	0	The decomposition was driven by a defer binding tactic.	f
1039	1	The decomposition was driven by a quality that is supported by a restrict dependencies tactic.	f
1039	2	The decomposition was driven by a split module tactic.	f
1039	3	The decomposition was driven by a quality that is supported by an encapsulate tactic.	f
1040	0	HTML5 provides better portability qualities.	f
1040	1	Native applications provide better modifiability qualities.	f
1040	2	HTML5 provides better usability qualities.	f
1040	3	Native applications provide better support for working offline.	f
1041	0	Dynamic Reconfiguration.	f
1041	1	Tiers.	f
1041	2	Communicating Processes.	f
1041	3	Install.	f
1042	0	The view illustrates the achievement of a security scenario.	f
1042	1	The view illustrates the achievement of a performance scenario.	f
1042	2	The view results from the implementation of a support user initiative tactic.	f
1042	3	The view results from the implementation of a support system initiative tactic.	f
1043	0	A modifiability scenario the *Graphite* system.	f
1043	1	A usability scenario of the *Graphite* system.	f
1043	2	A performance scenario of the *Graphite* system.	f
1043	3	An availability scenario of the *Graphite* system.	f
1044	0	A request for a web page corresponds to a peer-to-peer interaction between all the web components containing the resources.	f
1044	1	Web pages are explicitly cached on the browser to optimize accesses.	f
1044	2	A request for a web page corresponds to requesting a service from the amazon cloud.	f
1044	3	It is possible to customize the number of threads that run in the mobile device.	f
1045	0	She should decide to use a microservices architecture to improve the scalability of the system.	f
1045	1	She should decide to use a modular monolith architecture to reduce the cost of development, because developers will not need to define intermediate states for the transactional execution of the business logic.	f
1045	2	She should try to split the system in parts in order to isolate the complex business logic and use the two architectural approaches accordingly.	f
1045	3	She should give up because it is not possible to have the two approaches in a singe architecture.	f
1046	0	A modifiability scenario the *Graphite* system.	f
1046	1	A usability scenario of the *Graphite* system.	f
1046	2	A performance scenario of the *Graphite* system.	f
1046	3	An availability scenario of the *Graphite* system.	f
1047	0	A request for a web page corresponds to a peer-to-peer interaction between all the web components containing the resources.	f
1047	1	Web pages are explicitly cached on the browser to optimize accesses.	f
1047	2	A request for a web page corresponds to requesting a service from the amazon cloud.	f
1047	3	It is possible to customize the number of threads that run in the mobile device.	f
1048	0	She should decide to use a microservices architecture to improve the scalability of the system.	f
1048	1	She should decide to use a modular monolith architecture to reduce the cost of development, because developers will not need to define intermediate states for the transactional execution of the business logic.	f
1048	2	She should try to split the system in parts in order to isolate the complex business logic and use the two architectural approaches accordingly.	f
1048	3	She should give up because it is not possible to have the two approaches in a singe architecture.	f
1049	0	Dynamic Reconfiguration.	f
1049	1	Tiers.	f
1049	2	Communicating Processes.	f
1049	3	Install.	f
1050	0	The view illustrates the achievement of a security scenario.	f
1050	1	The view illustrates the achievement of a performance scenario.	f
1050	2	The view results from the implementation of a support user initiative tactic.	f
1050	3	The view results from the implementation of a support system initiative tactic.	f
1051	2	A deployment and a work assignment view.	f
1051	3	A install view.	f
1052	0	This generalization was driven by a split module tactic.	f
1052	1	This view fulfills an availability scenario, which defines the expected behavior whenever an external source is not available.	f
1052	2	This view fulfills a modifiability scenario, which states about the cost of adding a new source of information to the system.	f
1052	3	This view fulfills a modifiability scenario, which states that it should be easy to support the system in new software platforms, e.g. *Windows* or *OS X* .	f
1053	0	A modifiability scenario the *Graphite* system.	f
1053	1	A usability scenario of the *Graphite* system.	f
1053	2	A single performance scenario of the *Graphite* system.	f
1053	3	At least two performance scenarios of the *Graphite* system.	f
1054	0	Performance was traded for easy of development to reduce the overall development costs.	f
1054	1	An iterative development was followed, which allowed more time to develop a connector with good performance in the latter stages of the project.	f
1054	2	Performance was traded for the availability quality.	f
1054	3	An incremental development was followed, which allowed to have the system in production without being necessary to export all the information to the mainframe.	f
1055	0	Does not allow optimizations according to the type of query.	f
1055	1	Does not support independent scalability according to the type of operation.	f
1055	2	Reads may not be consistent with the most recent write.	f
1055	3	Querying the event sourcing becomes more complex.	f
1056	0	Performance was traded for easy of development to reduce the overall development costs.	f
1056	1	An iterative development was followed, which allowed more time to develop a connector with good performance in the latter stages of the project.	f
1056	2	Performance was traded for the availability quality.	f
1056	3	An incremental development was followed, which allowed to have the system in production without being necessary to export all the information to the mainframe.	f
1057	0	A deployment view.	f
1057	1	A work assignment view.	f
1057	2	A deployment and a work assignment view.	f
1057	3	A install view.	f
1058	0	This generalization was driven by a split module tactic.	f
1058	1	This view fulfills an availability scenario, which defines the expected behavior whenever an external source is not available.	f
1058	2	This view fulfills a modifiability scenario, which states about the cost of adding a new source of information to the system.	f
1058	3	This view fulfills a modifiability scenario, which states that it should be easy to support the system in new software platforms, e.g. *Windows* or *OS X* .	f
1059	0	A modifiability scenario the *Graphite* system.	f
1059	1	A usability scenario of the *Graphite* system.	f
1059	2	A single performance scenario of the *Graphite* system.	f
1059	3	At least two performance scenarios of the *Graphite* system.	f
1060	0	Does not allow optimizations according to the type of query.	f
1060	1	Does not support independent scalability according to the type of operation.	f
1060	2	Reads may not be consistent with the most recent write.	f
1060	3	Querying the event sourcing becomes more complex.	f
1061	0	These tactics cannot be applied in conjunction with the self-test tactic.	f
1061	1	These tactics are used to prevent the occurrence of a fault.	f
1061	2	Heartbeat is more scalable than ping/echo because the monitor does not need to know in advance the addresses of the components.	f
1061	3	In ping/echo the components have the initiative to start the interaction.	f
1062	0	Only views of the component-and-connector viewtype are needed	f
1062	1	All viewtypes may be necessary	f
1062	2	Only views of the component-and-connector viewtype and allocation viewtype are needed	f
1062	3	Views of the module viewtype are not needed	f
1063	0	When the environment is design time it means that the change should be done before the system enters into production	f
1063	1	When the environment is build time it means that it is necessary to codify a new module that is added by rebuilding the system	f
1063	2	When the environment is initiation time it means that it is necessary to restart the system for the change to take effect	f
1063	3	When the environment is runtime the cost of doing the change is higher than in the other environments	f
1064	0	Modifiability.	f
1064	1	Usability.	f
1064	2	Security.	f
1064	3	Availability.	f
1065	0	A view of the Data Model style	f
1065	1	A view of the Layers style	f
1065	2	A view of the Decomposition style	f
1065	3	A view of the Uses style	f
1066	0	By changing the commonalities that are in the children.	f
1066	1	Because the *is-a* relation does not allow reuse of implementation.	f
1066	2	By adding, removing, or changing children.	f
1066	3	By changing a parent, which will automatically change all the children that inherit from it.	f
1067	0	With a component-and-connector view, where the *load balancer* is a component of the system	f
1067	1	With a Deployment view, where the *load balancer* is part of the communication infra-structure used to execute the system	f
1067	2	With a Uses view, representing the existing dependencies between the *load balancer* and the services that it uses	f
1067	3	With a Layers view, where the *load balancer* creates an abstraction layer between who makes the request and who provides the service	f
1068	0	It implements a maintain multiple copies of computation tactic.	f
1068	1	It supports the concurrent access of data accessors.	f
1068	2	It supports the access to persistent information.	f
1068	3	It implements a maintain multiple copies of data tactic.	f
1069	0	The Shared Data style	f
1069	1	The Pipes-and-filters style	f
1070	0	Analysing the performance of the system	f
1070	1	Planning incremental releases of the system	f
1070	2	Estimating the effort needed to implement the system	f
1070	3	Analysing the system's portability and reusability	f
1071	0	A *web services* architecture	f
1071	1	A Client-Server architecture, where the *mashup* is the client and the various sources are the servers	f
1071	2	A layered architecture, where the access to the various sources is the responsibility of the bottommost layer	f
1071	3	A Publish-Subscribe architecture, where the various sources publish events with the changes made and the *mashup* subscribes those events	f
1072	0	The solution where the application is responsible for retrieving the missing piece of data from the underlying store has better availability	f
1072	1	The solution where the cache is responsible for retrieving the missing piece of data from the underlying store has better availability	f
1072	2	The solution where the application is responsible for retrieving the missing piece of data from the underlying store has better modifiability	f
1072	3	The solution where the cache is responsible for retrieving the missing piece of data from the underlying store has better performance	f
1073	0	A change to the uses view to represent that friends can use each other catalog.	f
1073	1	A change of the layered view to support different presentations, one for each friend.	f
1073	2	A change of the decomposition view to include the responsibilities associated with the access control.	f
1073	3	A new aspect view to include the responsibilities associated with the access control.	f
1074	0	Interoperability	f
1074	1	Modifiability	f
1074	2	Performance	f
1074	3	Security	f
1075	0	but this reduces reliability because de webapp components do not access the most recent data	f
1075	1	but it reduces performance, anyway, because the buffer components easily overflow	f
1075	2	and it does not penalize reliability because it also provides an interface that the webapp components can use to access the most recent data	f
1075	3	and it improves security because the buffer is protected agains attacks	f
1076	0	Schedule Resources	f
1076	1	Increase Resources	f
1076	2	Introduce Concurrency	f
1076	3	Maintain Multiple Copies of Computation	f
1077	0	Maintain system model tactic.	f
1077	1	Support user initiative tactic.	f
1077	2	Maintain multiple copies of data tactic.	f
1077	3	Conflict detection tactic.	f
1078	0	Performance was traded for easy of development.	f
1078	1	An iterative development was followed, which allowed more time to develop a connector with good performance in the latter stages of the project.	f
1078	2	Performance was traded for the modifiability quality.	f
1078	3	An incremental development was followed, which allowed to have the system in production without being necessary to export all the information to the mainframe.	f
1079	0	This decomposition is the only possible of the original domain model.	f
1079	1	This decomposition implies that, in average, customers are going to have a large number of orders.	f
1079	2	This decomposition implies that products will frequently change their unique identification.	f
1079	3	All the above.	f
1080	0	Client-server and Repository.	f
1080	1	Repository and Publish-subscribe.	f
1080	2	Publish-subscribe and Repository.	f
1080	3	Client-server, Repository and Publish-subscribe.	f
1081	0	Modifiability.	f
1081	1	Usability.	f
1081	2	Security.	f
1081	3	Availability.	f
1082	0	A view of the Data Model style	f
1082	1	A view of the Layers style	f
1082	2	A view of the Decomposition style	f
1082	3	A view of the Uses style	f
1083	0	By changing the commonalities that are in the children.	f
1083	1	Because the *is-a* relation does not allow reuse of implementation.	f
1083	2	By adding, removing, or changing children.	f
1083	3	By changing a parent, which will automatically change all the children that inherit from it.	f
1084	0	With a component-and-connector view, where the *load balancer* is a component of the system	f
1084	1	With a Deployment view, where the *load balancer* is part of the communication infra-structure used to execute the system	f
1084	2	With a Uses view, representing the existing dependencies between the *load balancer* and the services that it uses	f
1084	3	With a Layers view, where the *load balancer* creates an abstraction layer between who makes the request and who provides the service	f
1085	0	It implements a maintain multiple copies of computation tactic.	f
1085	1	It supports the concurrent access of data accessors.	f
1085	2	It supports the access to persistent information.	f
1085	3	It implements a maintain multiple copies of data tactic.	f
1086	0	The solution where the application is responsible for retrieving the missing piece of data from the underlying store has better availability	f
1086	1	The solution where the cache is responsible for retrieving the missing piece of data from the underlying store has better availability	f
1086	2	The solution where the application is responsible for retrieving the missing piece of data from the underlying store has better modifiability	f
1086	3	The solution where the cache is responsible for retrieving the missing piece of data from the underlying store has better performance	f
1087	0	A change to the uses view to represent that friends can use each other catalog.	f
1087	1	A change of the layered view to support different presentations, one for each friend.	f
1087	2	A change of the decomposition view to include the responsibilities associated with the access control.	f
1087	3	A new aspect view to include the responsibilities associated with the access control.	f
1088	0	The Shared Data style	f
1089	0	Analysing the performance of the system	f
1089	1	Planning incremental releases of the system	f
1089	2	Estimating the effort needed to implement the system	f
1089	3	Analysing the system's portability and reusability	f
1090	0	Client-server and Repository.	f
1090	1	Repository and Publish-subscribe.	f
1090	2	Publish-subscribe and Repository.	f
1090	3	Client-server, Repository and Publish-subscribe.	f
1091	0	Interoperability	f
1091	1	Modifiability	f
1091	2	Performance	f
1091	3	Security	f
1092	0	but this reduces reliability because de webapp components do not access the most recent data	f
1092	1	but it reduces performance, anyway, because the buffer components easily overflow	f
1092	2	and it does not penalize reliability because it also provides an interface that the webapp components can use to access the most recent data	f
1092	3	and it improves security because the buffer is protected agains attacks	f
1093	0	A *web services* architecture	f
1093	1	A Client-Server architecture, where the *mashup* is the client and the various sources are the servers	f
1093	2	A layered architecture, where the access to the various sources is the responsibility of the bottommost layer	f
1093	3	A Publish-Subscribe architecture, where the various sources publish events with the changes made and the *mashup* subscribes those events	f
1094	0	Schedule Resources	f
1094	1	Increase Resources	f
1094	2	Introduce Concurrency	f
1094	3	Maintain Multiple Copies of Computation	f
1095	0	Maintain system model tactic.	f
1095	1	Support user initiative tactic.	f
1095	2	Maintain multiple copies of data tactic.	f
1095	3	Conflict detection tactic.	f
1096	0	Performance was traded for easy of development.	f
1096	1	An iterative development was followed, which allowed more time to develop a connector with good performance in the latter stages of the project.	f
1096	2	Performance was traded for the modifiability quality.	f
1096	3	An incremental development was followed, which allowed to have the system in production without being necessary to export all the information to the mainframe.	f
1097	0	This decomposition is the only possible of the original domain model.	f
1097	1	This decomposition implies that, in average, customers are going to have a large number of orders.	f
1097	2	This decomposition implies that products will frequently change their unique identification.	f
1097	3	All the above.	f
1098	0	These tactics cannot be applied in conjunction with the self-test tactic.	f
1098	1	These tactics are used to prevent the occurrence of a fault.	f
1098	2	Heartbeat is more scalable than ping/echo because the monitor does not need to know in advance the addresses of the components.	f
1098	3	In ping/echo the components have the initiative to start the interaction.	f
1099	0	Only views of the component-and-connector viewtype are needed	f
1099	1	All viewtypes may be necessary	f
1099	2	Only views of the component-and-connector viewtype and allocation viewtype are needed	f
1099	3	Views of the module viewtype are not needed	f
1100	0	When the environment is design time it means that the change should be done before the system enters into production	f
1100	1	When the environment is build time it means that it is necessary to codify a new module that is added by rebuilding the system	f
1100	2	When the environment is initiation time it means that it is necessary to restart the system for the change to take effect	f
1100	3	When the environment is runtime the cost of doing the change is higher than in the other environments	f
1101	0	Prevent a fault in hardware.	f
1101	1	Prevent a fault in software.	f
1101	2	Prevent a fault in a process.	f
1101	3	Detect a fault.	f
1102	0	Manage sampling rate	f
1102	1	Limit event response	f
1102	2	Prioritize events	f
1102	3	Bound execution time	f
1103	0	Split module	f
1103	1	Encapsulate	f
1103	2	Restrict dependencies	f
1103	3	Defer binding	f
1104	0	A module contains the code that executes in a single component and a component executes the code of a single module	f
1104	1	A module contains the code that can execute in several components and a component executes the code of a single module	f
1104	2	A module contains the code that executes in a single component and a component can execute the code of several modules	f
1104	3	A module contains the code that can execute in several components and a component can execute the code of several modules	f
1105	0	Can use the operations defined in any of the system's modules	f
1105	1	Can use the operations defined in the lower layer, but not the ones defined inthe upper layer	f
1105	2	Can use the operations defined in the upper layer, but not the ones defined inthe lower layer	f
1105	3	Should use some operation defined in the lower layer	f
1106	0	It imposes restrictions on which uses relationships may exist between the system's modules	f
1106	1	It makes it easier to create generalization relationships between the system's modules	f
1106	2	It separates in new modules responsibilities that were spread over various of the system's modules	f
1106	3	It allows the decomposition of each of the system's modules into finer grained modules	f
1107	0	It corresponds to a particular case of a specialization in a generalization view.	f
1107	1	It represents a relation between a connector's role and a port of one of its internal components.	f
1107	2	It represents a relation between a component's port and a port of one of its internal components.	f
1107	3	It represents a relation between a component's port and a connector's role.	f
1108	0	To facilitate the interaction among heterogeneous components that use distinct communication protocols	f
1108	1	To promote the use of a common communication protocol for all the remaining components of the system	f
1108	2	To increase the performance of the interaction between the components of the system	f
1108	3	To create a strong coupling between the various services provided by the organization	f
1109	0	When a peer connects to the network it establishes connections with all other peers in the network	f
1109	1	The behavior described in the sentence can be represented in a view where the dynamic reconfiguration architectural style is used	f
1109	2	When a peer receives a connection it sends all its files to the peer connecting it	f
1109	3	The behavior described in the sentence can be represented in a view where the tier architectural style is used	f
1110	0	The development team is the main stakeholder interesting in these views.	f
1110	1	It assigns modules to files.	f
1110	2	It is completely independent of the deployment architectural style.	f
1110	3	It helps on the configuration of systems.	f
1111	0	The presentation logic layer and how it relates with the underlying layer changed	f
1111	1	The style of the connector used to represent the interaction between the browser and the web server changed	f
1111	2	The browser is now a component of a different type	f
1111	3	That evolution did not have any consequences on the software architecture of a web application	f
1112	0	Manage sampling rate	f
1112	1	Limit event response	f
1112	2	Prioritize events	f
1112	3	Bound execution times	f
1113	0	The layered view to deal with the aspects of portability.	f
1113	1	The uses view to show the coupling between the different platforms.	f
1113	2	The uses view to show the uses relationships between the different platforms.	f
1113	3	The data model view to represent each one of the platforms.	f
1114	0	The view does not address the scenario	f
1114	1	The view addresses the scenario because it separates the `Consumer Website` module from the `OpcApp` module to allow the execution of the `Consumer Website` module in a component that can have multiple copies of computation	f
1114	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement	f
1114	3	The view addresses the scenario because the `Consumer Website` module uses the `gwt` and `waf` modules	f
1115	0	Task Model	f
1115	1	System Model	f
1115	2	Performance	f
1115	3	User Model	f
1116	0	Usability e Modifiability	f
1116	1	Performance e Usability	f
1116	2	Availability e Usability	f
1116	3	Availability e Performance	f
1117	0	A module view of the decomposition style.	f
1117	1	A module view of the data model style.	f
1117	2	A component-and-connector view of the service-oriented architecture style.	f
1117	3	A module view of the uses style.	f
1118	0	Suffered from featuritis, because the architect decided to delay the difficult parts for latter in the development.	f
1118	1	Did not suffer from featuritis.	f
1118	2	Suffered from some level of featuritis, but it allowed to have a pilot from which the team learned.	f
1118	3	Suffered from featuritis, but it had no impact on the final development.	f
1119	0	It would reduce the scalability for updates of different orders for the same customer.	f
1119	1	Two users would not conflict if they attempt to edit different orders for the same customer.	f
1119	2	The increase of the number of orders would not have impact on the load the aggregate.	f
1119	3	All the above.	f
1120	0	Does not allow optimizations according to the type of query.	f
1120	1	Does not support independent scalability according to the type of operation.	f
1120	2	Reads may not be consistent with the most recent write.	f
1120	3	Does not support joins.	f
1121	0	Can use the operations defined in any of the system's modules	f
1121	1	Can use the operations defined in the lower layer, but not the ones defined inthe upper layer	f
1121	2	Can use the operations defined in the upper layer, but not the ones defined inthe lower layer	f
1121	3	Should use some operation defined in the lower layer	f
1122	0	It imposes restrictions on which uses relationships may exist between the system's modules	f
1122	1	It makes it easier to create generalization relationships between the system's modules	f
1122	2	It separates in new modules responsibilities that were spread over various of the system's modules	f
1122	3	It allows the decomposition of each of the system's modules into finer grained modules	f
1123	0	It corresponds to a particular case of a specialization in a generalization view.	f
1123	1	It represents a relation between a connector's role and a port of one of its internal components.	f
1123	2	It represents a relation between a component's port and a port of one of its internal components.	f
1123	3	It represents a relation between a component's port and a connector's role.	f
1124	0	To facilitate the interaction among heterogeneous components that use distinct communication protocols	f
1124	1	To promote the use of a common communication protocol for all the remaining components of the system	f
1124	2	To increase the performance of the interaction between the components of the system	f
1124	3	To create a strong coupling between the various services provided by the organization	f
1125	0	When a peer connects to the network it establishes connections with all other peers in the network	f
1125	1	The behavior described in the sentence can be represented in a view where the dynamic reconfiguration architectural style is used	f
1125	2	When a peer receives a connection it sends all its files to the peer connecting it	f
1125	3	The behavior described in the sentence can be represented in a view where the tier architectural style is used	f
1126	0	The development team is the main stakeholder interesting in these views.	f
1126	1	It assigns modules to files.	f
1126	2	It is completely independent of the deployment architectural style.	f
1126	3	It helps on the configuration of systems.	f
1127	0	The presentation logic layer and how it relates with the underlying layer changed	f
1127	1	The style of the connector used to represent the interaction between the browser and the web server changed	f
1127	2	The browser is now a component of a different type	f
1127	3	That evolution did not have any consequences on the software architecture of a web application	f
1128	0	Prevent a fault in hardware.	f
1128	1	Prevent a fault in software.	f
1128	2	Prevent a fault in a process.	f
1128	3	Detect a fault.	f
1129	0	Manage sampling rate	f
1129	1	Limit event response	f
1129	2	Prioritize events	f
1129	3	Bound execution time	f
1130	0	Split module	f
1130	1	Encapsulate	f
1130	2	Restrict dependencies	f
1130	3	Defer binding	f
1131	0	It would reduce the scalability for updates of different orders for the same customer.	f
1131	1	Two users would not conflict if they attempt to edit different orders for the same customer.	f
1131	2	The increase of the number of orders would not have impact on the load the aggregate.	f
1131	3	All the above.	f
1132	0	Does not allow optimizations according to the type of query.	f
1132	1	Does not support independent scalability according to the type of operation.	f
1132	2	Reads may not be consistent with the most recent write.	f
1132	3	Does not support joins.	f
1133	0	A module contains the code that executes in a single component and a component executes the code of a single module	f
1133	1	A module contains the code that can execute in several components and a component executes the code of a single module	f
1133	2	A module contains the code that executes in a single component and a component can execute the code of several modules	f
1133	3	A module contains the code that can execute in several components and a component can execute the code of several modules	f
1134	0	Manage sampling rate	f
1134	1	Limit event response	f
1134	2	Prioritize events	f
1134	3	Bound execution times	f
1135	0	The layered view to deal with the aspects of portability.	f
1135	1	The uses view to show the coupling between the different platforms.	f
1135	2	The uses view to show the uses relationships between the different platforms.	f
1135	3	The data model view to represent each one of the platforms.	f
1136	0	The view does not address the scenario	f
1136	1	The view addresses the scenario because it separates the `Consumer Website` module from the `OpcApp` module to allow the execution of the `Consumer Website` module in a component that can have multiple copies of computation	f
1136	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement	f
1136	3	The view addresses the scenario because the `Consumer Website` module uses the `gwt` and `waf` modules	f
1137	0	Task Model	f
1137	1	System Model	f
1137	2	Performance	f
1137	3	User Model	f
1138	0	Usability e Modifiability	f
1138	1	Performance e Usability	f
1138	2	Availability e Usability	f
1138	3	Availability e Performance	f
1139	0	A module view of the decomposition style.	f
1139	1	A module view of the data model style.	f
1139	2	A component-and-connector view of the service-oriented architecture style.	f
1139	3	A module view of the uses style.	f
1140	0	Suffered from featuritis, because the architect decided to delay the difficult parts for latter in the development.	f
1140	1	Did not suffer from featuritis.	f
1140	2	Suffered from some level of featuritis, but it allowed to have a pilot from which the team learned.	f
1140	3	Suffered from featuritis, but it had no impact on the final development.	f
1141	0	Performance	f
1141	1	Availability	f
1141	2	Usability	f
1141	3	Monitorability	f
1142	0	Manage sampling rate	f
1142	1	Limit event response	f
1142	2	Introduce concurrency	f
1142	3	Prioritize events	f
1143	0	Maintain multiple copies of data	f
1143	1	Maintain multiple copies of computation	f
1143	2	Bound execution times	f
1143	3	Reduce overhead	f
1144	0	Usability and Performance	f
1144	1	Usability	f
1144	2	Performance	f
1144	3	Testability	f
1145	0	Performance	f
1145	1	Security	f
1145	2	Performance and security	f
1145	3	Security and modifiability	f
1146	0	Manage sampling rate	f
1146	1	Limit event response	f
1146	2	Introduce concurrency	f
1146	3	Prioritize events	f
1147	0	Maintain multiple copies of data	f
1147	1	Maintain multiple copies of computation	f
1147	2	Bound execution times	f
1147	3	Reduce overhead	f
1148	0	Usability and Performance	f
1148	1	Usability	f
1148	2	Performance	f
1148	3	Testability	f
1149	0	Performance	f
1149	1	Security	f
1149	2	Performance and security	f
1149	3	Security and modifiability	f
1150	0	Performance	f
1150	1	Availability	f
1150	2	Usability	f
1150	3	Monitorability	f
1151	0	Maintain multiple copies of data	f
1151	1	Maintain multiple copies of computation	f
1151	2	Bound execution times	f
1151	3	Reduce overhead	f
1152	0	Usability and Performance	f
1152	1	Usability	f
1152	2	Performance	f
1152	3	Testability	f
1153	0	Performance	f
1153	1	Security	f
1153	2	Performance and security	f
1153	3	Security and modifiability	f
1154	0	Performance	f
1154	1	Availability	f
1154	2	Usability	f
1154	3	Monitorability	f
1155	0	Manage sampling rate	f
1155	1	Limit event response	f
1155	2	Introduce concurrency	f
1155	3	Prioritize events	f
1156	0	Usability and Performance	f
1156	1	Usability	f
1156	2	Performance	f
1156	3	Testability	f
1157	0	Performance	f
1157	1	Security	f
1157	2	Performance and security	f
1157	3	Security and modifiability	f
1158	0	Performance	f
1158	1	Availability	f
1158	2	Usability	f
1158	3	Monitorability	f
1159	0	Manage sampling rate	f
1159	1	Limit event response	f
1159	2	Introduce concurrency	f
1159	3	Prioritize events	f
1160	0	Maintain multiple copies of data	f
1160	1	Maintain multiple copies of computation	f
1160	2	Bound execution times	f
1160	3	Reduce overhead	f
1161	0	Component	f
1161	1	Module	f
1161	2	Component and Module	f
1161	3	None of the above	f
1162	0	Manage sampling rate	f
1162	1	Limit event response	f
1162	2	Maintain multiple copies of data	f
1162	3	Maintain multiple copies of computation	f
1163	0	Limit event response	f
1163	1	Schedule resources	f
1163	2	Bound execution times	f
1163	3	Increase resource efficiency	f
1164	0	Performance.	f
1164	1	Interoperability.	f
1164	2	Availability.	f
1164	3	Security.	f
1165	0	Limit event response	f
1165	1	Maintain multiple copies of computation	f
1165	2	Maintain multiple copies of data	f
1165	3	Schedule resources	f
1166	0	Manage sampling rate	f
1166	1	Limit event response	f
1166	2	Maintain multiple copies of data	f
1166	3	Maintain multiple copies of computation	f
1167	0	Limit event response	f
1167	1	Schedule resources	f
1167	2	Bound execution times	f
1167	3	Increase resource efficiency	f
1168	0	Performance.	f
1168	1	Interoperability.	f
1168	2	Availability.	f
1168	3	Security.	f
1169	0	Limit event response	f
1169	1	Maintain multiple copies of computation	f
1169	2	Maintain multiple copies of data	f
1169	3	Schedule resources	f
1170	0	Component	f
1170	1	Module	f
1170	2	Component and Module	f
1170	3	None of the above	f
1171	0	Limit event response	f
1171	1	Schedule resources	f
1171	2	Bound execution times	f
1171	3	Increase resource efficiency	f
1172	0	Performance.	f
1172	1	Interoperability.	f
1172	2	Availability.	f
1172	3	Security.	f
1173	0	Limit event response	f
1173	1	Maintain multiple copies of computation	f
1173	2	Maintain multiple copies of data	f
1173	3	Schedule resources	f
1174	0	Component	f
1174	1	Module	f
1174	2	Component and Module	f
1174	3	None of the above	f
1175	0	Manage sampling rate	f
1175	1	Limit event response	f
1175	2	Maintain multiple copies of data	f
1175	3	Maintain multiple copies of computation	f
1176	0	Performance.	f
1176	1	Interoperability.	f
1176	2	Availability.	f
1176	3	Security.	f
1177	0	Limit event response	f
1177	1	Maintain multiple copies of computation	f
1177	2	Maintain multiple copies of data	f
1177	3	Schedule resources	f
1178	0	Component	f
1178	1	Module	f
1178	2	Component and Module	f
1178	3	None of the above	f
1179	0	Manage sampling rate	f
1179	1	Limit event response	f
1179	2	Maintain multiple copies of data	f
1179	3	Maintain multiple copies of computation	f
1180	0	Limit event response	f
1180	1	Schedule resources	f
1180	2	Bound execution times	f
1180	3	Increase resource efficiency	f
1181	0	When the modification should occur.	f
1181	1	The features that will be implemented.	f
1181	2	The new defects introduced.	f
1181	3	Defer binding.	f
1182	0	Is driven by functional requirements.	f
1182	1	Is done in a single step, after all the tactics were identified.	f
1182	2	Is a top-down process where a initial decomposition is chosen and it is successively decomposed without changing the initial decisions.	f
1182	3	Is an iterative process where architectural designs are proposed as hypothesis and tested.	f
1183	0	Is applied only once at the beginning of the architectural design process.	f
1183	1	Is applied at the begin of the architectural design process but may be necessary to redo it later.	f
1183	2	Is mostly driven by the security attribute quality.	f
1183	3	Follows a bottom-up decomposition process of the system.	f
1184	0	Limit access.	f
1184	1	Increase resources.	f
1184	2	Increase resource efficiency.	f
1184	3	Maintain multiple copies of data.	f
1185	0	Manage sampling rate tactic.	f
1185	1	Increase resource efficiency tactic.	f
1185	2	Introduce concurrency tactic.	f
1185	3	Schedule resources tactic.	f
1186	0	Limit access.	f
1186	1	Increase resources.	f
1186	2	Increase resource efficiency.	f
1186	3	Maintain multiple copies of data.	f
1187	0	Manage sampling rate tactic.	f
1187	1	Increase resource efficiency tactic.	f
1187	2	Introduce concurrency tactic.	f
1187	3	Schedule resources tactic.	f
1188	0	When the modification should occur.	f
1188	1	The features that will be implemented.	f
1188	2	The new defects introduced.	f
1188	3	Defer binding.	f
1189	0	Is driven by functional requirements.	f
1189	1	Is done in a single step, after all the tactics were identified.	f
1189	2	Is a top-down process where a initial decomposition is chosen and it is successively decomposed without changing the initial decisions.	f
1189	3	Is an iterative process where architectural designs are proposed as hypothesis and tested.	f
1190	0	Is applied only once at the beginning of the architectural design process.	f
1190	1	Is applied at the begin of the architectural design process but may be necessary to redo it later.	f
1190	2	Is mostly driven by the security attribute quality.	f
1190	3	Follows a bottom-up decomposition process of the system.	f
1191	0	The correctness of the caller module may not depend on the correct implementation of the invoked function in the called module.	f
1191	1	The invoked function may not have any input parameter.	f
1191	2	The invoked function may not have any output parameter.	f
1191	3	The invoked function may not have both any input parameter nor any output parameter.	f
1192	0	Maintain multiple copies of data tactic.	f
1192	1	Introduce concurrence tactic.	f
1192	2	Increase resource efficiency tactic.	f
1192	3	Schedule resources tactic.	f
1193	0	Ping/Echo.	f
1193	1	Retry.	f
1193	2	Voting.	f
1193	3	Passive Redundancy.	f
1194	0	This ASR can easily be supported by the architecture because it has little effect in the architecture.	f
1194	1	This ASR requires a specific architectural design because it profoundly affects the architecture.	f
1194	2	The cost of meeting the ASR after development starts is too high.	f
1194	3	Any ASR that has a high business value cannot have a low architecture impact because it needs to be supported by the architecture.	f
1195	0	Maintain task model	f
1195	1	Maintain user model	f
1195	2	Maintain system model	f
1195	3	Aggregate	f
1196	0	Ping/Echo.	f
1196	1	Retry.	f
1196	2	Voting.	f
1196	3	Passive Redundancy.	f
1197	0	This ASR can easily be supported by the architecture because it has little effect in the architecture.	f
1197	1	This ASR requires a specific architectural design because it profoundly affects the architecture.	f
1197	2	The cost of meeting the ASR after development starts is too high.	f
1197	3	Any ASR that has a high business value cannot have a low architecture impact because it needs to be supported by the architecture.	f
1198	0	The correctness of the caller module may not depend on the correct implementation of the invoked function in the called module.	f
1198	1	The invoked function may not have any input parameter.	f
1198	2	The invoked function may not have any output parameter.	f
1198	3	The invoked function may not have both any input parameter nor any output parameter.	f
1199	0	Maintain multiple copies of data tactic.	f
1199	1	Introduce concurrence tactic.	f
1199	2	Increase resource efficiency tactic.	f
1199	3	Schedule resources tactic.	f
1200	0	Maintain task model	f
1200	1	Maintain user model	f
1200	2	Maintain system model	f
1200	3	Aggregate	f
1201	0	The modules inside a layer cannot use other modules in the same layer	f
1201	1	A layer cannot call the layer above	f
1201	2	Each layer defines a virtual machine because it provides a set of cohesive functionalities to the upper layer	f
1201	3	It is possible to have a circular allowed-to-use relationship between several layers	f
1202	0	If there are performance requirements concerning the access to data, then the level of detail should be physical	f
1202	1	It should always consider the physical detail level	f
1202	2	The logical detail level should only be used when the target of implementation is a relational database	f
1202	3	Only the conceptual level is required, the other two levels of detail are optional	f
1203	0	Whenever complex connectors are used in architectural views it is necessary to also document their decomposition.	f
1203	1	It is preferable to only design views that do not use complex connectors to increase understandability.	f
1203	2	If there is some technology available that implements the complex connectors, according to its expected qualities, it is not necessary to document their decomposition.	f
1203	3	Whenever possible it should be avoided to use complex connectors because developers have difficult to know how to implement them.	f
1204	0	Peer-to-Peer.	f
1204	1	Pipe-and-Filter.	f
1204	2	Client-Server.	f
1205	0	The main quality this style addresses is interoperability.	f
1205	1	It cannot be applied when the system includes legacy systems.	f
1205	2	Its enterprise service bus cannot support asynchronous communication between the components.	f
1205	3	The typical communication pattern is point-to-point.	f
1206	0	Whenever complex connectors are used in architectural views it is necessary to also document their decomposition.	f
1206	1	It is preferable to only design views that do not use complex connectors to increase understandability.	f
1206	2	If there is some technology available that implements the complex connectors, according to its expected qualities, it is not necessary to document their decomposition.	f
1206	3	Whenever possible it should be avoided to use complex connectors because developers have difficult to know how to implement them.	f
1207	0	Peer-to-Peer.	f
1207	1	Pipe-and-Filter.	f
1207	2	Client-Server.	f
1207	3	Publish-Subscribe.	f
1208	0	The main quality this style addresses is interoperability.	f
1208	1	It cannot be applied when the system includes legacy systems.	f
1208	2	Its enterprise service bus cannot support asynchronous communication between the components.	f
1208	3	The typical communication pattern is point-to-point.	f
1209	0	The modules inside a layer cannot use other modules in the same layer	f
1209	1	A layer cannot call the layer above	f
1209	2	Each layer defines a virtual machine because it provides a set of cohesive functionalities to the upper layer	f
1209	3	It is possible to have a circular allowed-to-use relationship between several layers	f
1210	0	If there are performance requirements concerning the access to data, then the level of detail should be physical	f
1210	1	It should always consider the physical detail level	f
1210	2	The logical detail level should only be used when the target of implementation is a relational database	f
1210	3	Only the conceptual level is required, the other two levels of detail are optional	f
1211	0	It imposes restrictions on which uses relationships may exist between the system's modules	f
1211	1	It makes it easier to create generalization relationships between the system's modules	f
1211	2	It separates in new modules responsibilities that were spread over various of the system's modules	f
1211	3	It allows the decomposition of each of the system's modules into finer grained modules	f
1212	0	It is not necessary to have any view of the Data Model architectural style because Facebook information has a very simple structure.	f
1212	1	It is enough to design a view of the Data Model architectural style at the conceptual level because Facebook information has a very simple structure.	f
1212	2	It is enough to design a view of the Data Model architectural style at the logical level because the information will be stored in a relational database.	f
1212	3	It is necessary to design a view of the Data Model architectural style at the physical level to deal with performance and consistency issues of the access to data.	f
1213	0	A component is an instance and a view can have several instances of the same component type.	f
1213	1	A component type is made of a single architectural style.	f
1213	2	Only components can be associated with application-specific types.	f
1213	3	A component-and-connector view can only use a single architectural style.	f
1214	0	All the peers are equal.	f
1214	1	Any peer can access any other peer.	f
1214	2	Peers are only used to share files.	f
1214	3	The interaction between peers is symmetric.	f
1215	0	Applies layers to tiers.	f
1215	1	Restricts the communication between components because, for instance, a group of components should be located in the same hardware.	f
1215	2	Is an extension of the Client-Server architectural style.	f
1215	3	Defines tiers as components.	f
1216	0	Applies layers to tiers.	f
1216	1	Restricts the communication between components because, for instance, a group of components should be located in the same hardware.	f
1216	2	Is an extension of the Client-Server architectural style.	f
1216	3	Defines tiers as components.	f
1217	0	It imposes restrictions on which uses relationships may exist between the system's modules	f
1217	1	It makes it easier to create generalization relationships between the system's modules	f
1217	2	It separates in new modules responsibilities that were spread over various of the system's modules	f
1217	3	It allows the decomposition of each of the system's modules into finer grained modules	f
1218	0	All the peers are equal.	f
1218	1	Any peer can access any other peer.	f
1218	2	Peers are only used to share files.	f
1218	3	The interaction between peers is symmetric.	f
1219	0	It is not necessary to have any view of the Data Model architectural style because Facebook information has a very simple structure.	f
1219	1	It is enough to design a view of the Data Model architectural style at the conceptual level because Facebook information has a very simple structure.	f
1219	2	It is enough to design a view of the Data Model architectural style at the logical level because the information will be stored in a relational database.	f
1219	3	It is necessary to design a view of the Data Model architectural style at the physical level to deal with performance and consistency issues of the access to data.	f
1220	0	A component is an instance and a view can have several instances of the same component type.	f
1220	1	A component type is made of a single architectural style.	f
1220	2	Only components can be associated with application-specific types.	f
1220	3	A component-and-connector view can only use a single architectural style.	f
1221	0	A deployment view.	f
1221	1	A work assignment view.	f
1221	2	A deployment and a work assignment view.	f
1221	3	A install view.	f
1222	0	The layered view to support a new specific layer for the customization of the catalog.	f
1222	1	The layered view to accommodate a new layer for each kind of catalog, which other layers may use.	f
1222	2	The data model view in order to define entities for each kind of catalog.	f
1222	3	The data model view in order to define generic entities that can be customized for different kinds of catalogs.	f
1223	0	Client-server.	f
1223	1	Communicating Processes.	f
1223	2	Repository.	f
1223	3	Pipes-and-Filters.	f
1224	0	One view of the component-and-connector viewtype and another of the deployment style.	f
1224	1	A single view of the communicating processes style.	f
1224	2	Two views of the communicating processes style.	f
1224	3	A view of the aspects style.	f
1225	0	The aggregates publishes the event in a message broker and subscribes to the published event.	f
1225	1	Using the database of the aggregate as a temporary message queue.	f
1225	2	Using event sourcing.	f
1225	3	All of the above.	f
1226	0	One view of the component-and-connector viewtype and another of the deployment style.	f
1226	1	A single view of the communicating processes style.	f
1226	2	Two views of the communicating processes style.	f
1226	3	A view of the aspects style.	f
1227	0	The aggregates publishes the event in a message broker and subscribes to the published event.	f
1227	1	Using the database of the aggregate as a temporary message queue.	f
1227	2	Using event sourcing.	f
1227	3	All of the above.	f
1228	0	A deployment view.	f
1228	1	A work assignment view.	f
1228	2	A deployment and a work assignment view.	f
1228	3	A install view.	f
1229	0	The layered view to support a new specific layer for the customization of the catalog.	f
1229	1	The layered view to accommodate a new layer for each kind of catalog, which other layers may use.	f
1229	2	The data model view in order to define entities for each kind of catalog.	f
1229	3	The data model view in order to define generic entities that can be customized for different kinds of catalogs.	f
1230	0	Client-server.	f
1230	1	Communicating Processes.	f
1230	2	Repository.	f
1230	3	Pipes-and-Filters.	f
1231	0	Components are allocated to persons and teams.	f
1231	1	Modules are allocated to persons and teams.	f
1231	2	Components and modules are allocated to persons and teams.	f
1231	3	None of the above.	f
1232	0	The decomposition view to include a module for the synchronization responsibilities.	f
1232	1	The uses view to represent how the mobile device uses the Catalog application.	f
1232	2	The layered view to include a layer for each type of device.	f
1232	3	The domain layer of the layered style to represent the types of devices.	f
1233	0	Client-server.	f
1233	1	Communicating Processes.	f
1233	2	Repository.	f
1233	3	Pipes-and-Filters.	f
1234	0	The communicating processes style.	f
1234	1	The communicating processes style and the dynamic reconfiguration style.	f
1234	2	The communicating processes style and the pipes-and-filters style.	f
1234	3	The dynamic reconfiguration style.	f
1235	0	The communicating processes.	f
1235	1	Pipes-and-filters.	f
1235	2	Publish-subscribe.	f
1235	3	Dynamic reconfiguration.	f
1236	0	Client-server.	f
1236	1	Communicating Processes.	f
1236	2	Repository.	f
1236	3	Pipes-and-Filters.	f
1237	0	The communicating processes style.	f
1237	1	The communicating processes style and the dynamic reconfiguration style.	f
1237	2	The communicating processes style and the pipes-and-filters style.	f
1237	3	The dynamic reconfiguration style.	f
1238	0	The communicating processes.	f
1238	1	Pipes-and-filters.	f
1238	2	Publish-subscribe.	f
1238	3	Dynamic reconfiguration.	f
1239	0	Components are allocated to persons and teams.	f
1239	1	Modules are allocated to persons and teams.	f
1239	2	Components and modules are allocated to persons and teams.	f
1239	3	None of the above.	f
1240	0	The decomposition view to include a module for the synchronization responsibilities.	f
1240	1	The uses view to represent how the mobile device uses the Catalog application.	f
1240	2	The layered view to include a layer for each type of device.	f
1240	3	The domain layer of the layered style to represent the types of devices.	f
\.


--
-- Data for Name: question_has_topic; Type: TABLE DATA; Schema: public; Owner: pedro
--

COPY public.question_has_topic (topic_id, question_id, votes, score) FROM stdin;
\.


--
-- Data for Name: questions; Type: TABLE DATA; Schema: public; Owner: pedro
--

COPY public.questions (id, name, new_id, content, difficulty, active) FROM stdin;
1	VistasDesempenho	\N	Suppose that there are certain performance requirements for a system, and that you want to show to the stakeholders of the system that the software architecture that you designed meet those requirements. To do this	\N	t
2	AtrQualNegocio	\N	There are other factors that affect the development of a software system, besides its functional requirements and quality attributes. For example, factors such as budget or available time. These factors	\N	t
3	Reutilizar	\N	Suppose that you are developing a new software system and that you want some part of the system's functionality to be easily reusable in future systems. Which of the following architectural styles are more suitable to show that the system architecture meets this requirement.	\N	t
4	AumentarDesempenhoClienteServidor	\N	Suppose you have a system with a client-server architecture that was designed to support the simultaneous existence of at most 100 clients, without specific requirements for availability. The solution adopted and put into operation four years ago is a single server component to which all clients connect to. This solution satisfies the initial requirements but with the recent increase in the maximum number of clients to 200, the system no longer has acceptable performance. Not knowing anything else about the system's architecture, which solution do you propose to solve the system's performance problems?	\N	t
5	TresTiposVista	\N	According to the SEI model, there are three different architectural viewtypes that are usually necessary to describe completely a software architecture.	\N	t
6	ModificabilidadeCamadas	\N	In a layered architecture composed by four layers, where the topmost layer is the layer number 1 and the bottommost layer is the layer number 4, which of the layers is more modifiable?	\N	t
7	UtilidadeArquitectura	\N	Designing the software architecture for a complex system	\N	t
8	ArchitecturalDrivers	\N	The requirements for complex systems are usually very numerous and conflicting among them, making it impossible to satisfy all the requirements in a given implementation of the system. Therefore, the recommended process for making the design of a software architecture involves the identification of the *architectural drivers* that will shape the design of architecture. These *architectural drivers* should be chosen so that they are	\N	t
9	ArqEmailMTA	\N	The email system is composed of various types of components playing different roles. For example, to send an email, a user can use a program such as Microsoft Outlook or Mozilla Thunderbird, generically designed a *mail user agent* (MUA), to compose his message and send it. To send the message, the MUA typically connects to a *mail transfer agent* (MTA) that receives the message, analyzes the message's headers to determine the recipients and, after querying the DNS system to determine the MTA responsible for each recipient, it connects to the MTAs responsible for the destination addresses to deliver the message. Each of these MTAs receives the message and stores it locally or forwards it to others MTAs (for example, when there are forwards or aliases configured, or when the MTA that receives the message is not the ultimately responsible for the email address of the recipient). Given this simplified description of the operation of the email system, which of the following architectural styles is more appropriate to represent the pattern of interaction between the MTAs?	\N	t
10	ArqEmailIMAP	\N	Considering yet the example of the email system, MUAs are used not only to compose and to send messages, but also for users to read the email messages sent to them. For this, the MUAs have to get those messages from the component that stores them to show them to the user. Two different ways of doing this is by using the POP and IMAP protocols. In the first case, messages are moved from the POP server to the user's computer. In second case, the messages are always stored on the IMAP server, allowing the user to access email from different computers, as long as they are able to connect to the same IMAP server. Which of the following architectural styles is more appropriate to represent the pattern of interaction between the MUAs and a IMAP server?	\N	t
11	AlteracaoWebDois	\N	The recent developments in web applications that made them provide a richer user interface led to a change in its architecture: part of the application's computation has to be done in the web browser used by users to access the application. How is this change in the architecture manifested in the different types of views that describe the software architecture of a web application?	\N	t
12	XBoardChess	\N	Given the complexity of building a good automatic Chess player, programs that play chess usually make use of existing chess engines, as shown by the following excerpt from Wikipedia:  \n>"A chess engine is a computer program that can play the game of chess. Most chess engines do not have their own graphical user interface (GUI) but are rather console applications that communicate with a GUI such as XBoard (Linux) and WinBoard (Windows) via a standard protocol."  \nIn the web page for XBoard, we may read the following:  \n>"XBoard is a graphical user interface for chess [...]. It displays a chessboard on the screen, accepts moves made with the mouse, and loads and saves games in Portable Game Notation (PGN). It serves as a front-end for many different chess services, including:  \n-  Chess engines that will run on your machine and play a game against you or help you analyze, such as GNU Chess, Crafty, or many others.  \n-  [...]  \n"  \nGiven the above information on XBoard, chess engines, and how they interact at runtime, which of the following architectural styles best represents the of architecture of a software system based on XBoard and one of the engines?	\N	t
13	AlterarFuncionalidadesExistentes	\N	Suppose that you join the development team of a very large software system, and that you are assigned some tasks to change some existing features. Which of the following architectural views would be, in principle, more useful to you to perform those tasks quickly?	\N	t
14	BlackBoxTesting	\N	Consider the following excerpt from the Wikipedia page on *black-box testing*:  \n>"Black-box testing is a method of software testing that tests the functionality of an application as opposed to its internal structures or workings. Specific knowledge of the application's code/internal structure and programming knowledge in general is not required. Test cases are built around specifications and requirements, i.e., what the application is supposed to do."  \nAssuming that you belong to the team testing a complex system and that you are responsible for performing black box tests on the system, which of the following architectural views of the system would be most useful to you?	\N	t
61	GHCStakeholdersINGLES	\N	Two of the *stakeholders* for the Glasgow Haskell Compiler were the UK government and the researchers that want to do research on functional programming languages. Which of these *stakeholders* had a more significant influence in the software architecture of the system?	\N	t
210	ActiveRecord	\N	The Active Record pattern is best used when we are also using	\N	t
15	TrocarBDCamadas	\N	Consider an enterprise application that needs to keep its data persistently, but for which no one knows yet what is the volume of information that will be handled by the application. Therefore, the system's architect intends to develop the system such that it is possible to change easily the relational database (RDBMS) component used to store the application's data, replacing it with an RDBMS from another manufacturer. Given that this is a common requirement, the recommended software architecture for such applications fulfills this requirement by using a particular architectural style. Which style is it?	\N	t
16	GoogleAppEngine	\N	Suppose that you decided to use the Google App Engine (GAE) in the development of a web application. The GAE is described in the Wikipedia as follows:  \n>"Google App Engine is a platform for developing and hosting web applications in Google-managed data centers. Google App Engine is cloud computing technology. It virtualizes applications across multiple servers and data centers. [...] Google App Engine is free up to a certain level of used resources. Fees are charged for additional storage, bandwidth, or CPU cycles required by the application."  \nOn the other hand, the GAE documentation reads the following:  \n>"With App Engine, you can build web applications using standard Java technologies and run them on Google's scalable infrastructure. The Java environment provides a Java 6 JVM, a Java Servlets interface, and support for standard interfaces to the App Engine scalable datastore and services, such as JDO, JPA, JavaMail, and JCache. Standards support makes developing your application easy and familiar, and also makes porting your application to and from your own servlet environment straightforward."  \nTaking into account these two perspectives on the GAE, which architectural styles are more appropriate to represent the use of GAE in the software architecture of your web application?	\N	t
17	PluginsEclipse	\N	The Eclipse IDE is an open source application written in Java, and is extensible through the use of plug-ins. In the document that describes the existing plug-ins architecture in Eclipse, we may read the following:  \n>"A plug-in in Eclipse is a component that provides a certain type of service within the context of the Eclipse workbench. [...] The plug-in class provides configuration and management support for the plug-in. A plug-in class in Eclipse must extend `org.eclipse.core.runtime.Plugin`, which is an abstract class that provides generic facilities for managing plug-ins."  \nConsidering the model and terminology used in the course to describe a software architecture, what kind of views are more appropriate to represent the plug-ins architecture of Eclipse described above?	\N	t
18	ServiceLayer	\N	When someone uses the Domain Model pattern to implement the domain logic layer of an enterprise application, it is common to use also the Service Layer pattern. The Service Layer pattern is used in these cases	\N	t
19	UnitOfWork	\N	The Unit of Work pattern is often used in enterprise applications	\N	t
20	IdentityMap	\N	The Identity Map pattern is typically used in enterprise applications	\N	t
21	HadoopEscalabilidadePossivelINGLES	\N	The scalability quality is achieved in the Hadoop system only because	\N	t
22	HadoopDisponibilidadeDesempenhoINGLES	\N	In the Hadoop system:	\N	t
23	HadoopTacticasRecuperacaoFaltasINGLES	\N	In the Hadoop system the fault recovery tactics are:	\N	t
24	HadoopTacticasRecuperacaoFaltasDoisINGLES	\N	In the Hadoop system the tactics used to reintroduce a DataNode after its failure are:	\N	t
25	HadoopTacticasSegurancaINGLES	\N	The security tactics used in The Hadoop system deployed at Yahoo! are:	\N	t
26	HadoopHeartbeatINGLES	\N	During normal operation DataNodes use the heartbeat tactic	\N	t
27	ModulosCamadasINGLES	\N	A layer, in the layers architectural style, is a module:	\N	t
28	UtilizacaoImpactoAlteracoesINGLES	\N	The uses architectural style allows to assess the impact of changes in modules	\N	t
29	UtilizacaoNotificaINGLES	\N	In the uses architectural style a call does not necessarily correspond to a uses relationship because:	\N	t
30	UtilizacaoNotificaDoisINGLES	\N	According to the attribute-driven design process, we should design the software architecture for a system based on a selected list of requirements, which are called the *architectural drivers*. These architectural drivers should be sorted according to their importance for the system's stakeholders because	\N	t
31	HadoopInteraccaoDataNodesINGLES	\N	In the HDFS system, the main responsibility of the DataNode component is to store the data blocks corresponding to the client's files, and usually there are several instances of this component on each system. The architectural style that best describes the interaction pattern among the various instances of DataNode is	\N	t
32	HadoopInteraccaoNameNodeDataNodesINGLES	\N	According to Section 8.2.3, the NameNode component issues commands to the DataNodes so that they execute some operations on their blocks, whereas DataNodes have to send reports regularly to the NameNode. The architecture that best describes how these two types of components interact in the HDFS system is	\N	t
33	HadoopNameNodeComoConectorINGLES	\N	Imagine that you intend to describe how a client reads a file from an HDFS system while supporting sporadic failures in the hardware of some DataNodes, but without affecting the availability of the system. To accomplish that, you want to use a component-and-connector view containing only two types of components: the HDFS Client, and the DataNode.	\N	t
34	HadoopNameNodeThreadsINGLES	\N	The last paragraph of Section 8.2.2 describes the solution used by the NameNode to obtain a certain level of performance while writing to disk. Which architectural style is more adequate to represent the solution used?	\N	t
35	HadoopReplicarNameNodeINGLES	\N	The architecture of the HDFS system only allows the existence of one NameNode. Given the responsibilities of this component and the current architecture of HDFS, what would be the consequences of adding the possibility of having replicas of the NameNode in the system?	\N	t
36	ServiceLayerINGLES	\N	When someone uses the Domain Model pattern to implement the domain logic layer of an enterprise application, it is common to use also the Service Layer pattern. The Service Layer pattern is used in these cases	\N	t
37	SharedDataAccessorsDirectINGLES	\N	Imagine that you are developing an architectural view where you are using the Shared Data style and that a member of your team proposes that two of Data Accessors communicate directly between them. In your opinion	\N	t
130	CHPerformanceQualityINGLES	\N	In Chrome it is possible to associate a Renderer Process to each Tab, which results in the increase of performance due to a tactic of	\N	t
211	ServiceLayer	\N	The Service Layer pattern is typically used in conjunction with	\N	t
212	ActiveRecord	\N	The Active Record pattern is best used when we are also using	\N	t
38	WhiteBoxTestingINGLES	\N	Consider the following excerpt from the Wikipedia page on *white-box testing*:  \n>"White-box testing is a method of testing software that tests internal structures or workings of an application, as opposed to its functionality. In white-box testing an internal perspective of the system (including the module's code), as well as programming skills, are required and used to design test cases. The tester chooses inputs to exercise paths through the code and determine the appropriate outputs."  \nAssuming that you belong to the team testing a complex system and that you are responsible for performing white box tests on the system, which of the following architectural views of the system would be most useful to you?	\N	t
39	TresTiersINGLES	\N	Currently, the most popular architecture for an enterprise application is composed of 3 tiers. The three tiers are	\N	t
40	TempoRespostaAplicacaoEmpresarialINGLES	\N	Suppose that you are designing the software architecture for an enterprise application that has requirements about the maximum response time for a certain type of requests. Moreover, assume that those requests arrive at the system periodically, whereas the remaining requests have an unpredictable frequency. Finally, assume that your system will have a single server that will be executing on a predefined machine with a 12-core AMD processor. To show to the stakeholders that your system satisfies the performance requirements you have to use views of which architectural style?	\N	t
41	HadoopStakeholdersEurosINGLES	\N	From the stakeholders perspective the use of low cost servers to build the clusters is:	\N	t
42	HadoopCheckpointBackupNodeINGLES	\N	In the Hadoop system the use of a *BackupNode* instead of a *CheckpointNode*:	\N	t
43	HadoopCheckpointINGLES	\N	In the Hadoop system when the *CheckpointNode* and the *NameNode* are deployed in different nodes, the *CheckpointNode* provides:	\N	t
44	HadoopPoliticaLocalizacaoReplicasINGLES	\N	The Hadoop system support of different block placement policies:	\N	t
45	HadoopPingINGLES	\N	In the Hadoop system, during normal operation, *NameNode* could use a ping tactic to know whether *DataNodes* are available	\N	t
46	HadoopInstalacaoINGLES	\N	Knowing the deployment structure in the Hadoop system is critical to the effective system operation. Therefore, for each deployment, the administrator can configure a script that returns a node's rack identification given a node's address (see section 8.3.2).	\N	t
47	TacticaCheckpointRollbackINGLES	\N	The *Checkpoint/rollback* tactic is a tactic for	\N	t
48	TiposVistaDesempenhoINGLES	\N	To analyse the performance of a system	\N	t
49	UsaCircularINGLES	\N	A view of the *Uses* style that contains a loop in the uses relationships	\N	t
50	UsaPodeUsarINGLES	\N	The main difference between the *Uses* relation of the Uses style and the *Allowed to Use* relation of the Layers style	\N	t
51	HadoopFileWriteBufferedINGLES	\N	The third paragraph of section 8.3.1 describes the buffering mechanism used by an HDFS client when it is writing to a file. How would you describe this mechanism using an architectural view?	\N	t
52	HadoopDisponibilidadeDadosINGLES	\N	One of the key requirements for the HDFS system is that the data stored in the system remains available, even in the presence of various types of failures (non simultaneous) in the hardware in which the system executes. To show that the system satisfies this requirement	\N	t
53	HadoopMapReduceINGLES	\N	Consider the following excerpt from the tutorial on the Hadoop MapReduce:  \n>"Hadoop MapReduce is a software framework for easily writing applications which process vast amounts of data (multi-terabyte data-sets) in-parallel on large clusters (thousands of nodes) of commodity hardware in a reliable, fault-tolerant manner. A MapReduce job usually splits the input data-set into independent chunks which are processed by the map tasks in a completely parallel manner. The framework sorts the outputs of the maps, which are then input to the reduce tasks. Typically both the input and the output of the job are stored in a file-system. The framework takes care of scheduling tasks, monitoring them and re-executes the failed tasks."  \nWhich architectural style of the component-and-connector viewtype is more adequate to describe how the MapReduce works, taking into account its main advantages in solving a problem?	\N	t
54	HadoopComoDatabaseINGLES	\N	Suppose that you are implementing a web application and that you decided to use an HDFS system to store the data of your application---that is, your web application will be a client of the HDFS system. How does this decision affects the architecture of your web application?	\N	t
55	HadoopCheckpointNodeINGLES	\N	Considering the description of the *CheckpointNode* made in Section~8.2.5, which architectural style best represents the interaction between the *CheckpointNode* and the *NameNode* components?	\N	t
56	DomainModelINGLES	\N	*Domain Model* and *Transaction Script* are two of the existing patterns to implement the domain logic layer of an enterprise application. Choosing one or the other	\N	t
57	RelacaoComponentesMaquinasINGLES	\N	Which of the following sentences best captures the restrictions regarding which components may execute in which machines in the Deployment style?	\N	t
58	WebDoisINGLES	\N	With the evolution of the web application technologies, it is now possible to develop web applications with a user interface similar to the interface of desktop applications. Yet, for this to happen, part of the code that was executing in the web server is now executing in the web browser. How does this change manifests in the software architecture of the system?	\N	t
59	MashupsINGLES	\N	One of the evolutions in the development of web applications was the appearance of *mashups*, which are described in Wikipedia as follows:  \n>"In web development, a mashup is a web page or application that uses and combines data, presentation or functionality from two or more sources to create new services."  \nKnowing that the sources used by *mashups* do not know about the existence of the *mashups* and that they change frequently, forcing the adaptation of the *mashups* to accomodate those changes, what is the best architecture to minimize the effects of those changes?	\N	t
60	SegurancaINGLES	\N	Suppose that you are designing the software architecture for an enterprise application that has security requirements about the confidentiality of some of its data. To show to the stakeholders that your system satisfies the security requirements you have to use views of which architectural style?	\N	t
437	ComponentConnectorOne	\N	Suppose that there are certain performance requirements for a system, and that you want to show to the stakeholders of the system that the software architecture that you designed meet those requirements. To do this	\N	t
62	GHCChunksINGLES	\N	According to the document that describes the Glasgow Haskell Compiler:  \n>"At the highest level, GHC can be divided into three distinct chunks:  \n-  The compiler itself.  \n-  The Boot Libraries.  \n-  The Runtime System (RTS).  \n"  \nWhat is the most architecturally correct way of classifying the three *chunks* that this text refers to?	\N	t
63	GHCDesugaringINGLES	\N	One of the most important decisions during the development of the Glasgow Haskell Compiler was to perform the type-checking before the desugaring of an Haskell program into a program in the Core language (*type-check-before-desugar*). This design decision	\N	t
64	GHCRTSINGLES	\N	According to the document that describes the Glasgow Haskell Compiler:  \n>"The Runtime System is a library of mostly C code that is linked into every Haskell program. It provides the support infrastructure needed for running the compiled Haskell code, including the following main components:  \n-  Memory management, including a parallel, generational, garbage collector;  \n-  Thread management and scheduling;  \n-  The primitive operations provided by GHC;  \n-  A bytecode interpreter and dynamic linker for GHCi.  \n"  \nWhich system qualities are improved by the design decision of creating the Runtime System, described above?	\N	t
65	GHCPipeAndFilterINGLES	\N	Like many other compilers, the compilation of an Haskell program with the Glasgow Haskell Compiler uses the Pipe-and-Filter style, creating a *pipeline* composed of several compilation phases. The goal of using this architectural style in GHC is	\N	t
66	ZeroMQAppsINGLES	\N	Which of the following sentences better describes the ZeroMQ system?	\N	t
67	ZeroMQWorkersPerCoreINGLES	\N	According to the document that describes ZeroMQ:  \n>"The idea was to launch one worker thread per CPU core---having two threads sharing the same core would only mean a lot of context switching for no particular advantage."  \nWhich architectural style is more adequate to represent the information presented above?	\N	t
68	ZeroMQMessagingPatternsINGLES	\N	According to the document that describes ZeroMQ:  \n>"Messaging patterns form a layer (the so-called "scalability layer") on top of the transport layer (TCP and friends). Individual messaging patterns are implementations of this layer."  \nWhat is the main advantage of this layered architecture adopted by ZeroMQ?	\N	t
69	ZeroMQBatchingINGLES	\N	ZeroMQ uses dynamic batching to control the performance of the system. The goal of this approach is	\N	t
70	ZeroMQLockFreeINGLES	\N	According to the document that describes ZeroMQ:  \n>"ØMQ uses a lock-free queue in pipe objects to pass messages between the user's threads and ØMQ's worker threads. There are two interesting aspects to how ØMQ uses the lock-free queue. First, each queue has exactly one writer thread and exactly one reader thread. If there's a need for 1-to-N communication, multiple queues are created. Given that this way the queue doesn't have to take care of synchronising the writers (there's only one writer) or readers (there's only one reader) it can be implemented in an extra-efficient way."  \nThe architectural style that better represents the interaction pattern described above is	\N	t
71	nginxFirstADINGLES	\N	The main architectural driver for the nginx system was	\N	t
72	nginxEventDrivenINGLES	\N	According to the document that describes nginx:  \n>"Traditional process- or thread-based models of handling concurrent connections involve handling each connection with a separate process or thread, and blocking on network or input/output operations. nginx followed a different model. It was actually inspired by the ongoing development of advanced event-based mechanisms in a variety of operating systems. What resulted is a modular, event-driven, asynchronous, single-threaded, non-blocking architecture which became the foundation of nginx code."  \nThe decision of turning nginx into an *event-driven*, *asynchronous*, *single-threaded*, and *non-blocking* system was made because	\N	t
73	nginxModuleTypesINGLES	\N	According to the document that describes nginx:  \n>"nginx's modular architecture generally allows developers to extend the set of web server features without modifying the nginx core. nginx modules come in slightly different incarnations, namely core modules, event modules, phase handlers, protocols, variable handlers, filters, upstreams and load balancers. [...] Event modules provide a particular OS-dependent event notification mechanism like kqueue or epoll. Protocol modules allow nginx to communicate through HTTPS, TLS/SSL, SMTP, POP3 and IMAP."  \nWhich architectural style is more adequate to represent the information presented above?	\N	t
74	nginxOSOptimizationsINGLES	\N	According to the document that describes nginx:  \n>"While handling a variety of actions associated with accepting, processing and managing network connections and content retrieval, nginx uses event notification mechanisms and a number of disk I/O performance enhancements in Linux, Solaris and BSD-based operating systems, like kqueue, epoll, and event ports. The goal is to provide as many hints to the operating system as possible, in regards to obtaining timely asynchronous feedback for inbound and outbound traffic, disk operations, reading from or writing to sockets, timeouts and so on."  \nThe goal of this approach used in the development of nginx was	\N	t
75	nginxProcessThreadINGLES	\N	According to the document that describes nginx:  \n>"Traditional process- or thread-based models of handling concurrent connections involve handling each connection with a separate process or thread, and blocking on network or input/output operations."  \nThe architectural style that better describes the model presented above for processing requests is	\N	t
76	WebPartioningINGLES	\N	According to the document that describes the architecture of web services (attached at the end of this document), one of the approaches introduced in Section~1.2 is *partitioning*, shown in Figure~1.4. The use of *partitioning*	\N	t
77	WebPartitioningDoisINGLES	\N	Considering again the case of the previous question, compare the architectures sketched in Figure~1.3 and Figure~1.4. The difference between the two shows	\N	t
78	WebRedundancyINGLES	\N	Consider again the architecture shown in Figure~1.3, where redundancy was introduced into the system. In this particular case, introducing redundancy into the architecture has the goal of	\N	t
79	ThreeVsFourTiersINGLES	\N	The typical software architecture of an enterprise application is composed of three tiers and three layers. Yet, we may have variations of this architecture. For instance, by separating the middle tier in two tiers. In this case, which other changes exist on the architecture that are related with the layers?	\N	t
80	WebLoadBalancerINGLES	\N	According to the document that describes the architecture of web services:  \n>"Another critical piece of any distributed system is a load balancer. Load balancers are a principal part of any architecture, as their role is to distribute load across a set of nodes responsible for servicing requests. This allows multiple nodes to transparently service the same function in a system. Their main purpose is to handle a lot of simultaneous connections and route those connections to one of the request nodes, allowing the system to scale to service more requests by just adding nodes."  \nBased on this description, what is the best way to represent the architecture of a system that is using a *load balancer*?	\N	t
81	DomainLogicFenixINGLES	\N	The first architecture of the Fénix system, corresponding to its first years of development, could be described as a three-layered architecture, typical of an enterprise application. One of those layers was the *domain logic* layer. Which of the following sentences best describes the Fénix architecture in what concerns that layer?	\N	t
82	IncrementalReleasesINGLES	\N	To achieve a faster time-to-market, software companies are increasingly using a strategy of incremental releases of their software, where each new release has a set of new features. Which architectural style is better to analyse whether the system's software architecture is adequate for the planned incremental releases?	\N	t
83	ScalabilityINGLES	\N	Several of the cases studied in this course had scalability requirements. That means that those systems should be designed in such a way that they	\N	t
84	SOAINGLES	\N	In the Service Oriented Architecture style it is common to have a specialized component, named *Enterprise Service Bus* (ESB). The goal of using of an ESB in a system is	\N	t
85	AvailabilityINGLES	\N	There are several tactics to satisfy availability requirements, which may be applied depending on the concrete requirement that we want to satisfy. Assuming that you want to detect faults of type *response* in your system, which tactic is more adequate?	\N	t
86	ChromiumDecompositionINGLES	\N	The web page that describes the architecture of Chromium OS (an open source project to implement a new operating system) starts like this:  \n>"Chromium OS consists of three major components:  \n-  The Chromium-based browser and the window manager  \n-  System-level software and user-land services: the kernel, drivers, connection manager, and so on  \n-  Firmware  \n"  \nConsidering this brief description of the software architecture of Chromium OS, which architectural style is more adequate to represent it?	\N	t
87	SecurityINGLES	\N	Suppose that, to satisfy a security requirement related with possible attacks coming from users that access your system through the Internet, you want to use the tactic named *Limit Exposure*. How does the use of that tactic manifests in the architectural views of your system?	\N	t
88	SkeletonSystemINGLES	\N	One of the best practices in the design of a software architecture is to create a skeleton system. What is its purpose?	\N	t
89	ArqEmailMTAIMAPINGLES	\N	The email system is composed of various types of components playing different roles. For example, to send an email, a user uses a *mail user agent* (MUA), to compose his message and send it. To send the message, the MUA typically connects to a *mail transfer agent* (MTA) that receives the message, analyzes the message's headers to determine the recipients and, after querying the DNS system to determine the MTA responsible for each recipient, it connects to the MTAs responsible for the destination addresses to deliver the message. Each of these MTAs receives the message and stores it locally or forwards it to others MTAs until the message reaches its destination MTA. The recipient user of the message will then use his MUA to see the messages that were sent to him. To do it, the MUA connects to an IMAP or POP server to obtain the user's messages. Those IMAP and POP servers obtain the messages for a user by reading the messages stored by the MTA. Given this simplified description of the operation of the email system, which of the following architectural styles is more appropriate to represent the pattern of interaction between the MTA and the servers IMAP and POP?	\N	t
90	AspectsINGLES	\N	The Aspects style was introduced recently as a new style of the module viewtype. Using this style in the software architecture of a system	\N	t
91	ZeroMQScaleMulticoreINGLES	\N	According to the document that describes ZeroMQ:  \n>"One of the requirements for ØMQ was to take advantage of multi-core boxes; in other words, to scale the throughput linearly with the number of available CPU cores."  \nTo satisfy this requirement, the solution adopted by ZeroMQ was	\N	t
92	ZeroMQAsLibraryINGLES	\N	Knowing that in the document describing ZeroMQ there is the following statement:  \n>"ØMQ is a library, not a messaging server."  \nWhich views are needed to describe the software architecture of ZeroMQ?	\N	t
93	ZeroMQBrokerINGLES	\N	According to the document that describes ZeroMQ:  \n>"It took us several years working on AMQP protocol [...] to realise that there's something wrong with the classic client/server model of smart messaging server (broker) and dumb messaging clients."  \nWhat is the main problem, according to the authors, of the *broker*-based model?	\N	t
94	ZeroMQExtensibleEnginesINGLES	\N	According to the document that describes ZeroMQ:  \n>"The objects that handle data transfer are composed of two parts: the session object is responsible for interacting with the ØMQ socket, and the engine object is responsible for communication with the network. There's only one kind of the session object, but there's a different engine type for each underlying protocol ØMQ supports. Thus, we have TCP engines, IPC engines, PGM engines, etc. The set of engines is extensible---in the future we may choose to implement, say, a WebSocket engine or an SCTP engine."  \nSupposing that the code implementing the *session object* does not need to be changed when a new type of *engine* is added to the system, which architectural views are better to show this extensibility aspect of the system?	\N	t
95	ZeroMQBSDSocketsINGLES	\N	According to the document that describes ZeroMQ:  \n>"In early versions of ØMQ the API was based on AMQP's model of exchanges and queues. I spent the end of 2009 rewriting it almost from scratch to use the BSD Socket API instead."  \nWhich requirements were targeted by this change in the system?	\N	t
213	InstallView	\N	Consider a system that will require a significative configuration effort during deployment, because it provides several variations of the same functionalities and it is necessary to choose which functionalities better fit in each case. The most helpful architectural view for this situation is	\N	t
96	nginxProcessesINGLES	\N	According to the document that describes nginx:  \n>"nginx runs several processes in memory; there is a single master process and several worker processes. There are also a couple of special purpose processes, specifically a cache loader and cache manager. All processes are single-threaded in version 1.x of nginx. All processes primarily use shared-memory mechanisms for inter-process communication."  \nAssuming that you want to highlight how the various nginx processes communicate among themselves, which architectural style is more adequate to represent the above information?	\N	t
97	nginxCachingINGLES	\N	In the continuation of the description presented in the previous question, later in the document there is this passage:  \n>"Caching in nginx is implemented in the form of hierarchical data storage on a filesystem. Cache keys are configurable, and different request-specific parameters can be used to control what gets into the cache. Cache keys and cache metadata are stored in the shared memory segments, which the cache loader, cache manager and workers can access."  \nWhich architectural style is more adequate to represent the use of cache in nginx?	\N	t
98	nginxWorkersINGLES	\N	As mentioned in the previous questions, the use of *workers* is one of the crucial elements in the software architecture of nginx. Which of the following sentences best describes how *workers* work in nginx?	\N	t
99	nginxWorkerParallelINGLES	\N	Given that a *worker* processes various requests during its life, how does it do it?	\N	t
100	nginxCTenKProblemINGLES	\N	The main *architectural driver* for the nginx system was to solve the *C10K problem*: being able to maintain 10.000 simultaneous connections with a single server running on conventional hardware. For this o happen, nginx must	\N	t
101	GHCBlockLayerINGLES	\N	The document describing the Glasgow Haskell Compiler presents two design decisions about the development of the *Runtime System*. The first of those decisions is described like this:  \n>"The garbage collector is built on top of a block layer that manages memory in units of blocks, where a block is a multiple of 4 KB in size. The block layer has a very simple API: [...]. This is the only API used by the garbage collector for allocating and deallocating memory. Blocks of memory are allocated with `allocGroup` and freed with `freeGroup`."  \nWhich architectural style is more adequate to represent this design decision?	\N	t
102	GHCBlockLayerQualitiesINGLES	\N	What was the main goal of the GHC's authors that led them to the design decision described in the previous question?	\N	t
103	GHCRewriteRulesINGLES	\N	Some of the *architectural drivers* of the Glasgow Haskell Compiler are related with the system's extensibility, and one of the solutions adopted by its authors to provide that extensibility was the introduction of *user-defined rewrite rules*, described in the document as follows:  \n>"The core of GHC is a long sequence of optimisation passes, each of which performs some semantics-preserving transformation, `Core` into `Core`. But the author of a library defines functions that often have some non-trivial, domain-specific transformations of their own, ones that cannot possibly be predicted by GHC. So GHC allows library authors to define rewrite rules that are used to rewrite the program during optimisation. In this way, programmers can, in effect, extend GHC with domain-specific optimisations."  \nHow does this solution manifests in the software architecture of the system?	\N	t
104	GHCAsLibraryINGLES	\N	According to the document that describes the Glasgow Haskell Compiler:  \n>"As the popularity of the Haskell language has grown, there has been an increasing need for tools and infrastructure that understand Haskell source code, and GHC of course contains a lot of the functionality necessary for building these tools: a Haskell parser, abstract syntax, type checker and so on. With this in mind, we made a simple change to GHC: rather than building GHC as a monolithic program, we build GHC as a library, that is then linked with a small Main module to make the GHC executable itself, but also shipped in library form so that users can call it from their own programs. At the same time we built an API to expose GHC's functionality to clients."  \nWhich architectural diagram is more adequate to represent the information presented above?	\N	t
105	GHCCodeGenerationINGLES	\N	According to the document that describes the Glasgow Haskell Compiler:  \n>"Once the `Core` program has been optimised, the process of code generation begins. The code generator first converts the `Core` into a language called `STG`, which is essentially just `Core` annotated with more information required by the code generator. Then, `STG` is translated to `Cmm`, a low-level imperative language with an explicit stack. From here, the code takes one of three routes:  \n-  Native code generation: [...]  \n-  LLVM code generation: [...]  \n-  C code generation: [...]  \n"  \nThat is, GHC may use one of three alternative code generators, which have different qualities (omitted in the excerpt presented above). Supposing that you want to present an architectural diagram to represent the description presented above, which one seems more adequate?	\N	t
106	WebCacheModuleINGLES	\N	Consider the Figure~1.8 in the document that describes the use of caches in web services (see annex). In that Figure, there is a rectangle with the name *Cache* within another rectangle with the name *Request Node*. Taking into account the description made in the text and the goal of that Figure, those rectangles correspond to which type of software elements?	\N	t
107	WebCacheGlobalINGLES	\N	Consider the change in the architecture introduced from Figure~1.9 to Figure~1.10 in the document that describes the use of caches in web services (see annex). That change has the goal and the consequence of, respectively	\N	t
108	WebDistributedCacheINGLES	\N	Consider the paragraph marked with the number 1 in the document that describes the use of caches in web services (see annex), where the concept of *distributed cache* is introduced. Which architectural style better represents the interaction pattern that exists among the various request nodes?	\N	t
109	WebMissingCacheNodeINGLES	\N	Consider the paragraph marked with the number 2 in the document that describes the use of caches in web services (see annex), where the failure of a node in the distributed cache is discussed. When that happens, what are the consequences for the system?	\N	t
208	EtherCalcModifiabilityTestability	\N	In the EtherCalc case description can be read  \n>"The in-browser SocialCalc engine is written in JavaScript. We considered translating that logic into Perl, but that would have carried the steep cost of maintaining two code bases."  \nThe excerpt is referring to a quality of	\N	t
110	MemcachedModulesINGLES	\N	Consider the following description of *Memcached*, which is adapted from its Wiki:  \n>"Memcached is an in-memory key-value store for small chunks of arbitrary data from results of database calls, API calls, or page rendering. It is made up of:  \n-  Client software, which is given a list of available memcached servers.  \n-  A client-based hashing algorithm, which chooses a server based on the "key" input.  \n-  Server software, which stores your values with their keys into an internal hash table.  \n-  Server algorithms, which determine when to throw out old data (if out of memory), or reuse memory.  \n"  \nSuppose that you want to present an architectural view for *Memcached* that represents the above information. Which view is more adequate?	\N	t
111	DomainLogicFenixINGLES	\N	One of the major changes introduced in the software architecture of the Fénix system, compared to its first architecture, was	\N	t
112	PerformanceINGLES	\N	Several of the cases studied in this course had performance requirements. Which architectural views are typically needed to show that those requirements are satisfied?	\N	t
113	SubcontractorsINGLES	\N	Suppose that you are developing a software architecture for a new large scale system and that you intend to resort extensively to third party subcontractors for the development of various parts of the system. Which architectural styles are most useful to plan the development of the system in this case?	\N	t
114	AspectsINGLES	\N	Using the Aspects architectural style promotes the modifiability of a system because	\N	t
115	SOAINGLES	\N	Suppose that you are developing the software architecture of a new system for an organization composed of several organizational units, each one with its own information systems, which have been developed independently of each other over the course of several years and depending on the particular needs of each unit. Your system has the goal of integrating the various existing systems, providing in this way not only a unified view of how the organization works, but also allowing the creation of new processes within the organization that involve more than one unit. Which architectural style is better suited to design such a system?	\N	t
116	ArqEmailMUAMTAINGLES	\N	The email system is composed of various types of components playing different roles. For example, to send an email, a user uses a *mail user agent* (MUA), to compose his message and send it. To send the message, the MUA typically connects to a *mail transfer agent* (MTA) that receives the message, analyzes the message's headers to determine the recipients and, after querying the DNS system to determine the MTA responsible for each recipient, it connects to the MTAs responsible for the destination addresses to deliver the message. Each of these MTAs receives the message and stores it locally or forwards it to others MTAs until the message reaches its destination MTA. The recipient user of the message will then use his MUA to see the messages that were sent to him. To do it, the MUA connects to an IMAP or POP server to obtain the user's messages. Those IMAP and POP servers obtain the messages for a user by reading the messages stored by the MTA. Given this simplified description of the operation of the email system, which of the following architectural styles is more appropriate to represent the pattern of interaction between the MUA and the MTA?	\N	t
117	AvailabilityINGLES	\N	Suppose that, to satisfy an availability requirement related with the occurrence of faults at the network infrastructure used by your system, you want to use the tactic named *Ping/Echo*. How does the use of that tactic manifests in the architectural views of your system?	\N	t
118	SecurityINGLES	\N	Suppose that you are developing a web application that keeps in a database some information that is introduced by the users and that one of the requirements is that the information should be kept confidential, such that no one but the author of the information should be able to see it (but the author may access that information whenever he wants it). How would you satisfy this requirement?	\N	t
119	WebEvolutionINGLES	\N	Web applications went through several evolutions over the last years. One of those evolutions was to make their user interfaces more sophisticated, by leveraging on new technologies available in the browsers, such as, for example, Javascript, to provide a more satisfying user experience. What were the most visible consequences of such an evolution on the typical software architecture of a web application?	\N	t
120	TiersINGLES	\N	One of the terms often used to describe the software architecture of a system is the term *tier*, being common, for instance, to talk about *multi-tier* systems. Taking into account the various types of software elements that compose a software architecture, a *tier* is	\N	t
121	GPReceiverWriterStyleINGLES	\N	In Graphite system the *receiver* and the *writer threads* support asynchronous writing of metrics to optimize disk accesses. The interaction between these two components follow the architectural style	\N	t
122	GPCarbonRelayINGLES	\N	In the Graphite system the component *carbon-relay* implements a tactic	\N	t
123	GPComposerUIQualityINGLES	\N	Which quality, or qualities, of the Graphite system are described by the sentence: *Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL.*	\N	t
124	MWQualitiesINGLES	\N	Which are the most significant qualities of the MediaWiki system?	\N	t
125	MWArchitecuralStyleINGLES	\N	The architectural styles which are more suitable to describe the MediaWiki system from the end user viewpoint are	\N	t
126	MWReliabilityTacticsINGLES	\N	The MediaWiki system tries to enforce a reliability criteria that all the changes done by a writer are consistently visualized in her subsequent reads	\N	t
127	MWReliabilityReadsImplementationINGLES	\N	The MediaWiki system tries to guarantee a reliability criteria where all information is available to be read by any reader in less than 30 seconds after being written. To achieve this criteria the load balancer	\N	t
128	MWResourceLoaderTacticINGLES	\N	Consider the following fragment of the MediaWiki system description:  \n*To optimize the delivery of JavaScript and CSS assets, the ResourceLoader module was developed to optimize delivery of JS and CSS. Started in 2009, it was completed in 2011 and has been a core feature of MediaWiki since version 1.17. ResourceLoader works by loading JS and CSS assets on demand, thus reducing loading and parsing time when features are unused, for example by older browsers. It also minifies the code, groups resources to save requests, and can embed images as data URIs.*  \nThe *ResourceLoader* implements a tactic	\N	t
129	CHSecurityQualityINGLES	\N	In Chrome, to accomplish the security quality, the Browser Process implements a tactic	\N	t
209	ServiceLayer	\N	The Service Layer pattern is typically used in conjunction with	\N	t
131	CHMobilityArchitecturalStyleINGLES	\N	In the description of the Chrome case you can read:  \n*On Android devices, Chrome leverages the same multi-process architecture as the desktop version - there is a browser process, and one or more renderer processes. The one difference is that due to memory constraints of the mobile device, Chrome may not be able to run a dedicated renderer for each open tab. Instead, Chrome determines the optimal number of renderer processes based on available memory, and other constraints of the device, and shares the renderer process between the multiple tabs.*  \nThis description can be represented by a view of viewtype Component-and-Connector using the architectural style	\N	t
132	CHAmazonSilkTwoEN	\N	An advantage of Chrome when compared with Amazon Silk is	\N	t
133	CHSecurityLevelEN	\N	One of the qualities of Chrome is the execution of the JavaScript code inside a process, which allows the isolation against possible interferences between the execution of JavaScript programs that are loaded from different sites. The isolation level	\N	t
134	CHOmniboxTacticsEN	\N	In the description of the Chrome case study you can read:  \n*Typing in the Omnibox (URL) bar triggers high-likelihood suggestions, which may similarly kick off a DNS lookup, TCP pre-connect, and even prerender the page in a hidden tab.*  \nThis description refers to	\N	t
135	GMPicklePerformanceEN	\N	Consider the following fragment of GNU Mailman  \n*In Mailman 2, the MailList object's state is stored in a file called config.pck, which is just the pickled representation of the MailList object's dictionary. Every Python object has an attribute dictionary called __dict__. So saving a mailing list object then is simply a matter of pickling its __dict__ to a file, and loading it just involves reading the pickle from the file and reconstituting its __dict__.*  \nAlthough simple, this solution resulted in several problems which had a negative impact on performance. This is due to:	\N	t
136	GMRestModularityEN	\N	Consider the following fragment of GNU Mailman case study:  \n*Mailman 3 has adopted the Representational State Transfer (REST) model for external administrative control. REST is based on HTTP, and Mailman's default object representation is JSON. These protocols are ubiquitous and well-supported in a large variety of programming languages and environments, making it fairly easy to integrate Mailman with third party systems. REST was the perfect fit for Mailman 3, and now much of its functionality is exposed through a REST API.*  \nThis solution allowed:	\N	t
137	GMPipesFiltersDataEN	\N	Consider the following fragment of GNU Mailman case study:  \n*Once a message has made its way through the chains and rules and is accepted for posting, the message must be further processed before it can be delivered to the final recipients. For example, some headers may get added or deleted, and some messages may get some extra decorations that provide important disclaimers or information, such as how to leave the mailing list.*  \nThe Pipes-and-Filters architectural style is used in the handling of messages. In this context the data type which is sent among the filters is	\N	t
138	GMReliabilityFIFOEN	\N	In the description of the GNU Mailman case study it is proposed a solution that, when there are several queue runners executing on the same queue, the delivery of messages is done according to arrival order (FIFO).  \n*There's another side effect of this algorithm that did cause problems during the early design of this system. Despite the unpredictability of email delivery in general, the best user experience is provided by processing the queue files in FIFO order, so that replies to a mailing list get sent out in roughly chronological order.*  \nThe proposed solution	\N	t
139	GMMasterRunnerEN	\N	The function of Master Runner component of GNU Mailman can be represented using an architecture style of	\N	t
140	GMMessagesPersistenceEN	\N	In Mailman 3 messages are still being persistently stored using pickle because	\N	t
141	InstallImplementationStylesEN	\N	The Install and Implementation architectural styles	\N	t
142	FenixTwoEN	\N	The architecturally significant qualities of the second Fénix architecture are:	\N	t
143	ElasticityDeferBindingEN	\N	The elasticity of a system, defined as its capability to easily adapt to load changes, is often represented as a required property of the scalability quality. For this level of easiness contribute the architectural solutions associated with the following tactic(s)	\N	t
144	UnitOfWorkEN	\N	The Unit of Work pattern can be implemented in an application server, while it is still necessary to use transactions in the repository to access to the data. In this situation	\N	t
145	AvailabilityVotingEN	\N	The availability quality can be supported by a voting tactic in order to identify faults of	\N	t
146	SecurityInternalSourceEN	\N	When the source of an attack is internal to an organization the tactics which are more efective are	\N	t
147	DataModelEN	\N	The detail that can be used in a view of the Data Model view type can be conceptual, logical or physical.	\N	t
148	PublishSubscribeEN	\N	In the Publish-Subscribe architectural style, the components, from the point of view of the modules they execute	\N	t
149	UsabilityNonArchitecturalEN	\N	Some usability qualities are not architectural because	\N	t
150	WorldWideEN	\N	In world-wide systems like Facebook or Amazon,	\N	t
151	GPCarbonBufferInterfaceEN	\N	In the Graphite system the component *carbon* provides to *webapp* components an access interface to the *buffers* in order to improve the quality(ies) of	\N	t
152	GPCCViewEN	\N	An higher-level component-and-connect view of Graphite system can be designed using only the architectural style(s)	\N	t
153	GPComposerUIPerformanceEN	\N	The *Composer UI* component of Graphite system, described as - *Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL* - to be effective needs to show to the user the changes she performs in the graph such that she has immediate feedback about the result of the changes. To do so, the system needs to implement the tactics of	\N	t
154	MWLowCostEN	\N	The design of the MediaWiki architecture was constrained the requirement that the solution should have relatively low cost. Due to this restriction it was taken the architectural decision of	\N	t
155	MWTacticsEN	\N	Consider a Component-and-Connector architectural view of the MediaWiki system where all the clients are connected to a server through a request-reply connector. This connector implements the tactics	\N	t
156	MWReliabilityImplementationEN	\N	The MediaWiki system tries to enforce a reliability criteria that all the changes done by a writer are consistently visualized in her subsequent reads. This criteria is implemented	\N	t
157	MWReliabilityReadsTacticEN	\N	The MediaWiki system tries to guarantee a reliability criteria where all information is available to be read by any reader in less than 30 seconds after being written. To achieve this criteria it is implemented a tactic of	\N	t
158	MWVerBlobTacticEN	\N	In the description of MediaWiki system we can read:  \n*The first revision of the blob is stored in full, and following revisions to the same page are stored as diffs relative to the previous revision; the blobs are then gzipped. Because the revisions are grouped per page, they tend to be similar, so the diffs are relatively small and gzip works well. The compression ratio achieved on Wikimedia sites nears 98%.*  \nThis description refers to a tactic of	\N	t
159	CHQualitiesEN	\N	Chrome, as described in the case study, was designed to support the accomplish the following architectural qualities:	\N	t
160	CHPerformanceQualityTwoEN	\N	In the description of Chrome case study we can read:  \n*Chrome maintains a single instance of the resource dispatcher, which is shared across all render processes, and runs within the browser kernel process.*  \nThe *Resource Dispatcher* contributes to the performance quality because it implements a tactic of	\N	t
161	CHAmazonSilkEN	\N	An advantage of Amazon Silk when compared with Chrome is	\N	t
162	CHRenderStyleEN	\N	An architectural view of the Component-and-Connector viewtype that describes the interactions within the Renderer Process component of Chrome, uses the architectural style	\N	t
163	CHPrerenderTacticsEN	\N	In some situations Chrome prerenders a page. To do it	\N	t
164	CHOmniboxQualitiesEN	\N	In the description of the Chrome case study you can read:  \n*Typing in the Omnibox (URL) bar triggers high-likelihood suggestions, which may similarly kick off a DNS lookup, TCP pre-connect, and even prerender the page in a hidden tab.*  \nThis description refers to the qualities of	\N	t
165	GMRestInteroperabilityEN	\N	Consider the following fragment of GNU Mailman case study:  \n*Mailman 3 has adopted the Representational State Transfer (REST) model for external administrative control. REST is based on HTTP, and Mailman's default object representation is JSON. These protocols are ubiquitous and well-supported in a large variety of programming languages and environments, making it fairly easy to integrate Mailman with third party systems. REST was the perfect fit for Mailman 3, and now much of its functionality is exposed through a REST API.*  \nThis solution allowed increased interoperability because	\N	t
166	GMPipesFiltersEN	\N	Consider the following fragment of GNU Mailman case study:  \n*Once a message has made its way through the chains and rules and is accepted for posting, the message must be further processed before it can be delivered to the final recipients. For example, some headers may get added or deleted, and some messages may get some extra decorations that provide important disclaimers or information, such as how to leave the mailing list.*  \nThe architectural style that is more accurate to describe the flexible processing of messages is	\N	t
167	GMDataModelEN	\N	Consider the following fragment of GNU Mailman case study:  \n*Email messages can act as containers for other types of data, as defined in the various MIME standards. A container message part can encode an image, some audio, or just about any type of binary or text data, including other container parts.*  \nThe architectural style that is more accurate to describe this transcription is	\N	t
168	GMPerformanceEN	\N	Consider the following transcription of the GNU Mailman system:  \n*...Mailman supports running more than one runner process per queue directory...*  \nIt has the goal to support	\N	t
169	GMReliabilityBounceEN	\N	Consider the following description of the GNU Mailman system:  \n*VERP stands for Variable Envelope Return Path, and it is a well-known technique that mailing lists use to unambiguously determine bouncing recipient addresses. When an address on a mailing list is no longer active, the recipient's mail server will send a notification back to the sender. In the case of a mailing list, you want this bounce to go back to the mailing list, not to the original author of the message; the author can't do anything about the bounce, and worse, sending the bounce back to the author can leak information about who is subscribed to the mailing list. When the mailing list gets the bounce, however, it can do something useful, such as disable the bouncing address or remove it from the list's membership.*  \nThis transcription describes the quality(ies) of	\N	t
170	GMSwitchboardEN	\N	Consider the following description of the GNU Mailman system:  \n*There is a core Mailman class called Switchboard which provides an interface for enqueuing (i.e., writing) and dequeuing (i.e., reading) the message object tree and metadata dictionary to files in a specific queue directory. Every queue directory has at least one switchboard instance, and every queue runner instance has exactly one switchboard.*  \nThis transcription contains relevant information for viewtypes of	\N	t
171	FenixThreeEN	\N	The architecturally significant requirements of the third architecture of Fénix are	\N	t
172	FenixOneEN	\N	In the Fénix first architecture it was common programmers forget to lock objects in the context of transactions. A solution for this problem can be architecturally described using a view of the architectural style	\N	t
173	InternationalizationTacticsEN	\N	The internationalization of the user interface is supported by the tactic(s)	\N	t
174	IdentityMapEN	\N	To implement the Identity Map pattern	\N	t
175	AvailabilityDefensiveEN	\N	In defensive programming the programmer checks that the conditions under which modules are invoked comply with their specification, and if they don't an exception is raised to avoid failure propagation. When defensive programming is followed, in the context of availability quality, we are using a tactic of	\N	t
176	ObserverUsesEN	\N	In the Observer design pattern, where the model invokes a notification method on all its observers whenever it is changed, can be said, in what concerns the Uses relation of the Uses architectural style, that	\N	t
177	UsesLayersEN	\N	Consider the Uses and Layered architectural styles.	\N	t
178	SeveralStylesViewEN	\N	An architectural view	\N	t
179	ApplyUsesEN	\N	The Uses architectural style	\N	t
180	EnterpriseWideEN	\N	In a enterprise-wide system, like Fénix system,	\N	t
181	ArchitectureInfluenceCycle	\N	The software architecture of a system	\N	t
182	TechoGeeks	\N	Frank Buschmann, *Introducing the Pragmatic Architect*, defines the *techno-geeks* architects. This kind of architect	\N	t
183	FeaturitisOrderPad	\N	Frank Buschmann states that:  \n>"Featuritis is the tendency to trade functional coverage for quality - the more functions the earlier they're delivered, the better."  \nIn the OrderPad system the architect regretted not getting performance tests going earlier. The OrderPad system	\N	t
184	ArchitectureDefinition	\N	The software architecture of a system	\N	t
185	ModuleComponent	\N	Which of the following phrases best describe the relationship between modules and components?	\N	t
186	Scenario	\N	Consider the following scenario  \n>"Our vehicle information system send our current location to the traffic monitoring system. The traffic monitoring system combines our location with other information, overlays this information on a Google Map, and broadcasts it. Our location information is correctly included with a probability of 99.99%."  \n	\N	t
187	Checksum	\N	Checksum is a technic that it is often used in architectural design. It can be used as	\N	t
188	Attack	\N	An attack is	\N	t
189	SocialCalcTactics	\N	In the description of the SocialCalc case study can be read:  \n>"As the user scrolls the spreadsheet through our custom-drawn scroll bars, we dynamically update the innerHTML of the pre-drawn \extsc{<td>} elements. This means we don't need to create or destroy any \extsc{<tr>} or \extsc{<td>} elements in many common cases, which greatly speeds up response time."  \nThis corresponds to the application of	\N	t
190	ThousandParsecTactics	\N	In the description of the Thousand Parsec case study can be read:  \n>"A ruleset designer thus has the ability to create new object types or store additional information in the existing object types as required by the ruleset, allowing for virtually unlimited extensibility in terms of the available physical objects in the game."  \nThis excerpt can be represented as a modifiability scenario where	\N	t
191	GitTactics	\N	In the description of the Git case study can be read:  \n>"Git tackles the storage space problem by packing objects in a compressed format, using an index file which points to offsets to locate specific objects in the corresponding packed file."  \nThe tactic addressed in this fragments is:	\N	t
192	DesigningArchitecture	\N	The architectural significant requirements are important in the process of creating the software architecture for a system because they define	\N	t
193	DecompositionGeneralization	\N	Consider that a chess game should provide an automatic and intelligent chess player, and that to implement that player we will use some of the many chess engines already available in the market. Moreover, the system should allow the user to choose which engine to use for each new game. Given these requirements, which of the architectural styles from the module viewtype are best suited to satisfy them?	\N	t
194	UsesStyle	\N	To achieve a faster time-to-market, software companies are increasingly using a strategy of incremental releases of their software, where each new release has a set of new features. Which architectural style is better to analyse whether the system's software architecture is adequate for the planned incremental releases?	\N	t
195	Layered	\N	Assume that one of the requirements for a graphical chess game is that it should be able to run both in Microsoft's Windows and Apple's Mac OS X operating systems. A good solution for this system would:	\N	t
196	InterfaceDelegation	\N	Consider the concept of interface delegation	\N	t
197	Repository	\N	A requirement for a chess game is that it keeps a table with the best scores obtained in the game. Naturally, this information should be kept between two different executions of the system. Assuming that the game is a web-based application, then	\N	t
198	PeerToPeer	\N	An email client such as Mozilla's Thunderbird or Microsoft's Outlook allows a user both to read the emails that were sent to him and to send new emails to other people. To do that, the email client connects to other components (one or more): some of these components keep the user's mailboxes with all the emails that were sent to him, whereas other components know how to forward the emails sent by the user to their final destinations (associated with a new set of destinations). In either case, it is always the email client that makes a request to the other components, but whereas in the first case the email client receives all the information about the user's emails, in the second case only a success or failure error code is returned. The architectural patterns that best describe the interactions between the components from the client to the final destinations	\N	t
199	PipesFilters	\N	Consider that you intend to develop a system where it is necessary to change the emails received by the server (for instance, to remove potential virus or URLs for phishing sites). The goal is that each email is processed by this system before it is sent to other servers or it is stored locally. Additionally, the system should be easily modified to support new kinds of transformations. Which style is more suitable to satisfy these requirements?	\N	t
200	InstallView	\N	Consider a system that will require a significative configuration effort during deployment, because it provides several variations of the same functionalities and it is necessary to choose which functionalities better fit in each case. The most helpful architectural view for this situation is	\N	t
201	ThounsandParsecView	\N	Consider the architectural views for the ThousandParsec system. In the case description can be read:  \n>"The Requirements function verifies that each component added to the design conforms to the rules of other previously added components."  \nThe following diagram depicts a fragment of a proposal for the decomposition view of the system. ![image][image]	\N	t
202	SocialCalcView	\N	Consider the architectural views for the SocialCalc system. In the case description can be read:  \n>"The save format is in standard MIME multipart/mixed format, consisting of four text/plain; charset=UTF-8 parts, each part containing newline-delimited text with colon-delimited data fields. The parts are... This format is designed to be human-readable, as well as being relatively easy to generate programmatically. This makes it possible for Drupal's Sheetnode plugin to use PHP to convert between this format and other popular spreadsheet formats, such as Excel (.xls) and OpenDocument (.ods)."  \nFrom the above excerpt can be inferred the need to have	\N	t
203	GitViews	\N	The architectural style that best represents the runtime execution of a system Git installed for a small group of developers is	\N	t
204	OrderPad	\N	In the OrderPad system they have decided to use a Row Data Gateway data access pattern because	\N	t
205	EtherCalcAllocation	\N	Consider the architectural views of EtherCalc system. In the case study description can be read  \n>"The Socialtext platform has both behind-the-firewall and on-the-cloud deployment options, imposing unique constraints on EtherCalc's resource and performance requirements."  \n	\N	t
206	EtherCalcRedundancy	\N	In EtherCalc initial prototype clients send their local commands and snapshots to the server, which result on redundant information on the server about the state of the spreadsheet. This redundancy is an application of	\N	t
207	EtherCalcSnapshotPerformance	\N	In EtherCalc initial prototype clients send their local commands, cursor movements and snapshots to the server.	\N	t
853	PublishSubscribe	\N	In the Publish-Subscribe architectural style	\N	t
214	ThounsandParsecView	\N	Consider the architectural views for the ThousandParsec system. In the case description can be read:  \n>"The Requirements function verifies that each component added to the design conforms to the rules of other previously added components."  \nThe following diagram depicts a fragment of a proposal for the decomposition view of the system. ![image][image]	\N	t
215	Checksum	\N	Checksum is a technic that it is often used in architectural design. It can be used as	\N	t
216	Attack	\N	An attack is	\N	t
217	SocialCalcTactics	\N	In the description of the SocialCalc case study can be read:  \n>"As the user scrolls the spreadsheet through our custom-drawn scroll bars, we dynamically update the innerHTML of the pre-drawn \extsc{<td>} elements. This means we don't need to create or destroy any \extsc{<tr>} or \extsc{<td>} elements in many common cases, which greatly speeds up response time."  \nThis corresponds to the application of	\N	t
218	ThousandParsecTactics	\N	In the description of the Thousand Parsec case study can be read:  \n>"A ruleset designer thus has the ability to create new object types or store additional information in the existing object types as required by the ruleset, allowing for virtually unlimited extensibility in terms of the available physical objects in the game."  \nThis excerpt can be represented as a modifiability scenario where	\N	t
219	GitTactics	\N	In the description of the Git case study can be read:  \n>"Git tackles the storage space problem by packing objects in a compressed format, using an index file which points to offsets to locate specific objects in the corresponding packed file."  \nThe tactic addressed in this fragments is:	\N	t
220	Layered	\N	Assume that one of the requirements for a graphical chess game is that it should be able to run both in Microsoft's Windows and Apple's Mac OS X operating systems. A good solution for this system would:	\N	t
221	InterfaceDelegation	\N	Consider the concept of interface delegation	\N	t
222	Repository	\N	A requirement for a chess game is that it keeps a table with the best scores obtained in the game. Naturally, this information should be kept between two different executions of the system. Assuming that the game is a web-based application, then	\N	t
223	PeerToPeer	\N	An email client such as Mozilla's Thunderbird or Microsoft's Outlook allows a user both to read the emails that were sent to him and to send new emails to other people. To do that, the email client connects to other components (one or more): some of these components keep the user's mailboxes with all the emails that were sent to him, whereas other components know how to forward the emails sent by the user to their final destinations (associated with a new set of destinations). In either case, it is always the email client that makes a request to the other components, but whereas in the first case the email client receives all the information about the user's emails, in the second case only a success or failure error code is returned. The architectural patterns that best describe the interactions between the components from the client to the final destinations	\N	t
224	ArchitectureInfluenceCycle	\N	The software architecture of a system	\N	t
225	TechoGeeks	\N	Frank Buschmann, *Introducing the Pragmatic Architect*, defines the *techno-geeks* architects. This kind of architect	\N	t
226	ModuleComponent	\N	Which of the following phrases best describe the relationship between modules and components?	\N	t
227	Scenario	\N	Consider the following scenario  \n>"Our vehicle information system send our current location to the traffic monitoring system. The traffic monitoring system combines our location with other information, overlays this information on a Google Map, and broadcasts it. Our location information is correctly included with a probability of 99.99%."  \n	\N	t
228	PipesFilters	\N	Consider that you intend to develop a system where it is necessary to change the emails received by the server (for instance, to remove potential virus or URLs for phishing sites). The goal is that each email is processed by this system before it is sent to other servers or it is stored locally. Additionally, the system should be easily modified to support new kinds of transformations. Which style is more suitable to satisfy these requirements?	\N	t
229	SocialCalcView	\N	Consider the architectural views for the SocialCalc system. In the case description can be read:  \n>"The save format is in standard MIME multipart/mixed format, consisting of four text/plain; charset=UTF-8 parts, each part containing newline-delimited text with colon-delimited data fields. The parts are... This format is designed to be human-readable, as well as being relatively easy to generate programmatically. This makes it possible for Drupal's Sheetnode plugin to use PHP to convert between this format and other popular spreadsheet formats, such as Excel (.xls) and OpenDocument (.ods)."  \nFrom the above excerpt can be inferred the need to have	\N	t
230	GitViews	\N	The architectural style that best represents the runtime execution of a system Git installed for a small group of developers is	\N	t
231	OrderPad	\N	In the OrderPad system they have decided to use a Row Data Gateway data access pattern because	\N	t
232	EtherCalcAllocation	\N	Consider the architectural views of EtherCalc system. In the case study description can be read  \n>"The Socialtext platform has both behind-the-firewall and on-the-cloud deployment options, imposing unique constraints on EtherCalc's resource and performance requirements."  \n	\N	t
233	EtherCalcRedundancy	\N	In EtherCalc initial prototype clients send their local commands and snapshots to the server, which result on redundant information on the server about the state of the spreadsheet. This redundancy is an application of	\N	t
234	EtherCalcSnapshotPerformance	\N	In EtherCalc initial prototype clients send their local commands, cursor movements and snapshots to the server.	\N	t
235	EtherCalcModifiabilityTestability	\N	In the EtherCalc case description can be read  \n>"The in-browser SocialCalc engine is written in JavaScript. We considered translating that logic into Perl, but that would have carried the steep cost of maintaining two code bases."  \nThe excerpt is referring to a quality of	\N	t
236	FeaturitisOrderPad	\N	Frank Buschmann states that:  \n>"Featuritis is the tendency to trade functional coverage for quality - the more functions the earlier they're delivered, the better."  \nIn the OrderPad system the architect regretted not getting performance tests going earlier. The OrderPad system	\N	t
237	ArchitectureDefinition	\N	The software architecture of a system	\N	t
238	DesigningArchitecture	\N	The architectural significant requirements are important in the process of creating the software architecture for a system because they define	\N	t
239	DecompositionGeneralization	\N	Consider that a chess game should provide an automatic and intelligent chess player, and that to implement that player we will use some of the many chess engines already available in the market. Moreover, the system should allow the user to choose which engine to use for each new game. Given these requirements, which of the architectural styles from the module viewtype are best suited to satisfy them?	\N	t
240	UsesStyle	\N	To achieve a faster time-to-market, software companies are increasingly using a strategy of incremental releases of their software, where each new release has a set of new features. Which architectural style is better to analyse whether the system's software architecture is adequate for the planned incremental releases?	\N	t
241	ArchitectureKnowledge	\N	Assuming that you were asked to document the software architecture of an existing (and already developed) system, the best thing for you to do would be	\N	t
242	ArchitectureEvolution	\N	Ralph Johnson says that  \n>"Architecture is the decisions that you wish you could get right early in a project."  \nThis sentence reflects the fact that	\N	t
243	Performitis	\N	Marquardt characterizes performitis as:  \n>"Each part of the system is directly influenced by local performance tuning measures. There is no global performance strategy, or it ignores other qualities of the system such as testability and maintainability."  \nThis means that	\N	t
244	ArchitecturalViews	\N	The software architecture of a system is usually represented through several views because we need to	\N	t
245	ModueComponent	\N	On the web page of Memcached can be read:  \n>"..., high-performance, distributed memory object caching system, generic in nature, but intended for use in speeding up dynamic web applications by alleviating database load."  \nAccording to this information, Memcached is	\N	t
246	ConcreteScenario	\N	As part of the process of creating an architecture, we talked about a framework for capturing some of the requirements for a system. In this context, **concrete scenarios** are used for	\N	t
247	AvailabilityPingEchoHeartbeat	\N	Ping-and-echo and Heartbeat are two availability tactics to detect faults.	\N	t
248	SecurityDatabase	\N	Consider that when designing the architecture of a web application, the architect intends to guarantee of the confidentiality of persistent data in face of an attack from a system administrator.	\N	t
249	SocialCalcTactic	\N	In the description of the SocialCalc case study can be read:  \n>"A simple improvement is for each client to broadcast its cursor position to other users, so everyone can see which cells are being worked on."  \nThis sentence describes a tactic for usability which is	\N	t
250	ThousandParsecScenario	\N	In the description of the ThousandParsec case study can be read:  \n>"The Thousand Parsec Component Language (TPCL) exists to allow clients to create designs locally without server interaction - allowing for instant feedback about the properties, makeup, and validity of the designs."  \nFrom this sentence can be written	\N	t
251	GitTactic	\N	In the description of GitHub case study can be read  \n>"Once the Smoke proxy has determined the user's route, it establishes a transparent proxy to the proper file server. We have four pairs of fileservers. Their names are fs1a, fs1b, ..., fs4a, fs4b. These are 8 core, 16GB RAM bare metal servers, each with six 300GB 15K RPM SAS drives arranged in RAID 10. At any given time one server in each pair is active and the other is waiting to take over should there be a fatal failure in the master. All repository data is constantly replicated from the master to the slave via DRBD."  \nIn this description we can find the application of tactics like	\N	t
252	ArchitecturallySignificantRequirements	\N	According to the attribute-driven design process, we should design the software architecture for a system based on a selected list of requirements, which are called the *architecturally significant requirements*. These architecturally significant requirements should be sorted according to their importance for the system's stakeholders because	\N	t
253	ModuleTraceability	\N	Views of the module viewtype can be used to support requirements traceability analysis, determine how the functional requirements of a system are supported. This is represented by	\N	t
254	GeneralizationInterfaces	\N	You have to develop an application that collects news from different web sources and process that information to present a digest to the application users. The different sources provide similar information through different interfaces (APIs). Additionally, the new sources may change the interfaces, for instance to enhance their service. Which architectural style can be used to represent this requirements?	\N	t
255	UsesIncremental	\N	When designing the architecture for a system the architect realises that most of the modules have bidirectional uses relationships. This has impact on	\N	t
256	ComponentAndConnnector	\N	The Java web servers, like Tomcat, use threads to process requests. For each request they create (or reuse) a thread to process it. To draw a architectural view that describes this behaviour we should use	\N	t
257	LoadBalancer	\N	To increase the availability of a web application it is possible to use a load-balancer between the clients and the servers that detects server failures and transparently redirects the requests to the servers that are functioning properly. To represent this architecture	\N	t
258	ThreeTiers	\N	One way to increase the performance of a 3-tier enterprise application (with the standard separation in the web client, web server, and database tiers) is to replicate the web server tier and to add a load-balancer between the web clients and the web servers. Unfortunately, for some enterprise applications that option is not enough (or does not work at all), because	\N	t
259	PublishSubscribe	\N	Typically, Instant Messaging clients have a window to list the contacts of the user, and show in that window the status of each contact (whether it is available, unavailable, busy, etc). Given that the status of a contact may be changed at any time, and that the contact's status is given by the Instant Messaging application of that contact, which architectural style represents best the interaction pattern between these components?	\N	t
260	DeploymentPerformance	\N	In the software architecture of a system, the Deployment view is best suited for	\N	t
261	ThousandParsecPersistence	\N	In the description of ThousandParsec case study can be read  \n>"The flagship server, \extsc{tpserver-cpp}, provides an abstract persistence interface and a modular plugin system to allow for various database back ends."  \nThis above sentence can be diagrammatically represented using	\N	t
507	MicroservicesArchitectureTwo	\N	Consider the following figure depicting two different architectures for web applications ![image][image]	\N	t
262	SocialCalcBroadcastEvents	\N	Consider the (partial) component-and-connector view for the \extsc{:SpreasdSheet} component of the SocialCalc system ![image][image] The \extsc{sub1} port	\N	t
263	GitHubViews	\N	In the description of GitHub case study can be read  \n>"For requests to the main website, the load balancer ships your request off to one of the four frontend machines. Each of these is an 8 core, 16GB RAM bare metal server. Their names are fe1, ..., fe4. Nginx accepts the connection and sends it to a Unix domain socket upon which sixteen Unicorn worker processes are selecting. One of these workers grabs the request and runs the Rails code necessary to fulfill it."  \nTo represent the above description it is necessary to use	\N	t
264	OrderPadTactics	\N	In the description of architecture of the OrderPad case study, it can be read that the updates the user does on the OrderPad when it is offline are not lost. This availability quality is achieved through a	\N	t
265	EtherCalcPerformance	\N	In the description of EtherCalc case study can be read  \n>"Because all jsdom code runs in a single thread, subsequent REST API calls are blocked until the previous command's rendering completes. Under high concurrency, this queue eventually triggered a latent bug that ultimately resulted in server lock-up."  \nThe above sentence is related to a quality for	\N	t
266	EtherCalcTactic	\N	In the description of EtherCalc case study can be read  \n>"So, we removed jsdom from the RenderSheet function, re-implemented a minimal DOM in 20 lines of LiveScript for HTML export, then ran the profiler again. Much better! We have improved throughput by a factor of 4, HTML exporting is 20 times faster, and the lock-up problem is gone."  \nThe above sentence describes a	\N	t
267	EtherCalcTestability	\N	In the description of EtherCalc case study can be read how the architect tried to increase the performance in a multi-core context  \n>"Is there a way to make use of all those spare CPUs in the multi-tenant server? For other Node.js services running on multi-core hosts, we utilized a pre-forking cluster server that creates a process for each CPU. However, while EtherCalc does support multi-server scaling with Redis, the interplay of Socket.io clustering with RedisStore in a single server would have massively complicated the logic, making debugging much more difficult."  \nThis possible solution has impact on the	\N	t
268	EtherCalcViews	\N	In the description of EtherCalc case study can be read how the architect increased the performance in a multi-core context  \n>"Instead of pre-forking a fixed number of processes, we sought a way to create one background thread for each server-side spreadsheet, thereby distributing the work of command execution among all CPU cores."  \nWhich is represented by the diagram  \n![image][image] The above diagram, describing a server spreadsheet, can be represented using	\N	t
269	TransactionScript	\N	Compared to the Transaction Script pattern, the Domain Logic pattern has a higher initial cost of adoption. That is, it is harder to start with the Domain Logic pattern than with the Transaction Script pattern. The reason for this is that the Domain Logic pattern	\N	t
270	ActiveRecordRuby	\N	Ruby on Rails is a popular full-stack framework for building web applications. One of the elements of this framework is the **model**, which is described in the Rails documentation in the following way:  \n>"A model represents the information (data) of the application and the rules to manipulate that data. In the case of Rails, models are primarily used for managing the rules of interaction with a corresponding database table. In most cases, one table in your database will correspond to one model in your application. The bulk of your application's business logic will be concentrated in the models."  \nGiven this description, the Rails' model is best described as an instance of	\N	t
271	OrderPadTactics	\N	In the description of architecture of the OrderPad case study, it can be read that the updates the user does on the OrderPad when it is offline are not lost. This availability quality is achieved through a	\N	t
272	TransactionScript	\N	Compared to the Transaction Script pattern, the Domain Logic pattern has a higher initial cost of adoption. That is, it is harder to start with the Domain Logic pattern than with the Transaction Script pattern. The reason for this is that the Domain Logic pattern	\N	t
273	ActiveRecordRuby	\N	Ruby on Rails is a popular full-stack framework for building web applications. One of the elements of this framework is the **model**, which is described in the Rails documentation in the following way:  \n>"A model represents the information (data) of the application and the rules to manipulate that data. In the case of Rails, models are primarily used for managing the rules of interaction with a corresponding database table. In most cases, one table in your database will correspond to one model in your application. The bulk of your application's business logic will be concentrated in the models."  \nGiven this description, the Rails' model is best described as an instance of	\N	t
274	ConcreteScenario	\N	As part of the process of creating an architecture, we talked about a framework for capturing some of the requirements for a system. In this context, **concrete scenarios** are used for	\N	t
275	AvailabilityPingEchoHeartbeat	\N	Ping-and-echo and Heartbeat are two availability tactics to detect faults.	\N	t
276	SecurityDatabase	\N	Consider that when designing the architecture of a web application, the architect intends to guarantee of the confidentiality of persistent data in face of an attack from a system administrator.	\N	t
277	SocialCalcTactic	\N	In the description of the SocialCalc case study can be read:  \n>"A simple improvement is for each client to broadcast its cursor position to other users, so everyone can see which cells are being worked on."  \nThis sentence describes a tactic for usability which is	\N	t
278	ThousandParsecScenario	\N	In the description of the ThousandParsec case study can be read:  \n>"The Thousand Parsec Component Language (TPCL) exists to allow clients to create designs locally without server interaction - allowing for instant feedback about the properties, makeup, and validity of the designs."  \nFrom this sentence can be written	\N	t
299	SocialCalcBroadcastEvents	\N	Consider the (partial) component-and-connector view for the \extsc{:SpreasdSheet} component of the SocialCalc system ![image][image] The \extsc{sub1} port	\N	t
1216	Tiers	\N	The Tiers architectural style	\N	t
279	GitTactic	\N	In the description of GitHub case study can be read  \n>"Once the Smoke proxy has determined the user's route, it establishes a transparent proxy to the proper file server. We have four pairs of fileservers. Their names are fs1a, fs1b, ..., fs4a, fs4b. These are 8 core, 16GB RAM bare metal servers, each with six 300GB 15K RPM SAS drives arranged in RAID 10. At any given time one server in each pair is active and the other is waiting to take over should there be a fatal failure in the master. All repository data is constantly replicated from the master to the slave via DRBD."  \nIn this description we can find the application of tactics like	\N	t
280	ModuleTraceability	\N	Views of the module viewtype can be used to support requirements traceability analysis, determine how the functional requirements of a system are supported. This is represented by	\N	t
281	ArchitectureKnowledge	\N	Assuming that you were asked to document the software architecture of an existing (and already developed) system, the best thing for you to do would be	\N	t
282	ArchitectureEvolution	\N	Ralph Johnson says that  \n>"Architecture is the decisions that you wish you could get right early in a project."  \nThis sentence reflects the fact that	\N	t
283	Performitis	\N	Marquardt characterizes performitis as:  \n>"Each part of the system is directly influenced by local performance tuning measures. There is no global performance strategy, or it ignores other qualities of the system such as testability and maintainability."  \nThis means that	\N	t
284	ArchitecturalViews	\N	The software architecture of a system is usually represented through several views because we need to	\N	t
285	ArchitecturallySignificantRequirements	\N	According to the attribute-driven design process, we should design the software architecture for a system based on a selected list of requirements, which are called the *architecturally significant requirements*. These architecturally significant requirements should be sorted according to their importance for the system's stakeholders because	\N	t
286	ModueComponent	\N	On the web page of Memcached can be read:  \n>"..., high-performance, distributed memory object caching system, generic in nature, but intended for use in speeding up dynamic web applications by alleviating database load."  \nAccording to this information, Memcached is	\N	t
287	GeneralizationInterfaces	\N	You have to develop an application that collects news from different web sources and process that information to present a digest to the application users. The different sources provide similar information through different interfaces (APIs). Additionally, the new sources may change the interfaces, for instance to enhance their service. Which architectural style can be used to represent this requirements?	\N	t
288	UsesIncremental	\N	When designing the architecture for a system the architect realises that most of the modules have bidirectional uses relationships. This has impact on	\N	t
289	EtherCalcPerformance	\N	In the description of EtherCalc case study can be read  \n>"Because all jsdom code runs in a single thread, subsequent REST API calls are blocked until the previous command's rendering completes. Under high concurrency, this queue eventually triggered a latent bug that ultimately resulted in server lock-up."  \nThe above sentence is related to a quality for	\N	t
290	EtherCalcTactic	\N	In the description of EtherCalc case study can be read  \n>"So, we removed jsdom from the RenderSheet function, re-implemented a minimal DOM in 20 lines of LiveScript for HTML export, then ran the profiler again. Much better! We have improved throughput by a factor of 4, HTML exporting is 20 times faster, and the lock-up problem is gone."  \nThe above sentence describes a	\N	t
291	EtherCalcTestability	\N	In the description of EtherCalc case study can be read how the architect tried to increase the performance in a multi-core context  \n>"Is there a way to make use of all those spare CPUs in the multi-tenant server? For other Node.js services running on multi-core hosts, we utilized a pre-forking cluster server that creates a process for each CPU. However, while EtherCalc does support multi-server scaling with Redis, the interplay of Socket.io clustering with RedisStore in a single server would have massively complicated the logic, making debugging much more difficult."  \nThis possible solution has impact on the	\N	t
292	ComponentAndConnnector	\N	The Java web servers, like Tomcat, use threads to process requests. For each request they create (or reuse) a thread to process it. To draw a architectural view that describes this behaviour we should use	\N	t
293	EtherCalcViews	\N	In the description of EtherCalc case study can be read how the architect increased the performance in a multi-core context  \n>"Instead of pre-forking a fixed number of processes, we sought a way to create one background thread for each server-side spreadsheet, thereby distributing the work of command execution among all CPU cores."  \nWhich is represented by the diagram  \n![image][image] The above diagram, describing a server spreadsheet, can be represented using	\N	t
294	LoadBalancer	\N	To increase the availability of a web application it is possible to use a load-balancer between the clients and the servers that detects server failures and transparently redirects the requests to the servers that are functioning properly. To represent this architecture	\N	t
295	ThreeTiers	\N	One way to increase the performance of a 3-tier enterprise application (with the standard separation in the web client, web server, and database tiers) is to replicate the web server tier and to add a load-balancer between the web clients and the web servers. Unfortunately, for some enterprise applications that option is not enough (or does not work at all), because	\N	t
296	PublishSubscribe	\N	Typically, Instant Messaging clients have a window to list the contacts of the user, and show in that window the status of each contact (whether it is available, unavailable, busy, etc). Given that the status of a contact may be changed at any time, and that the contact's status is given by the Instant Messaging application of that contact, which architectural style represents best the interaction pattern between these components?	\N	t
297	DeploymentPerformance	\N	In the software architecture of a system, the Deployment view is best suited for	\N	t
298	ThousandParsecPersistence	\N	In the description of ThousandParsec case study can be read  \n>"The flagship server, \extsc{tpserver-cpp}, provides an abstract persistence interface and a modular plugin system to allow for various database back ends."  \nThis above sentence can be diagrammatically represented using	\N	t
526	ModuleComponentTwo	\N	Which of the following phrases best describe the relationship between modules and components?	\N	t
300	GitHubViews	\N	In the description of GitHub case study can be read  \n>"For requests to the main website, the load balancer ships your request off to one of the four frontend machines. Each of these is an 8 core, 16GB RAM bare metal server. Their names are fe1, ..., fe4. Nginx accepts the connection and sends it to a Unix domain socket upon which sixteen Unicorn worker processes are selecting. One of these workers grabs the request and runs the Rails code necessary to fulfill it."  \nTo represent the above description it is necessary to use	\N	t
301	Featuritis	\N	Frank Buschmann states that:  \n>"Featuritis is the tendency to trade functional coverage for quality - the more functions the earlier they're delivered, the better."  \n	\N	t
302	Performitis	\N	Frank Buschmann cites the characterization Marquardt does of Performitis:  \n>"Each part of the system is directly influenced by local performance tuning measures. There is no global performance strategy, or it ignores other qualities of the system as testability and maintainability."  \nFrom this problem you can conclude that:	\N	t
303	ArchitectureDefinition	\N	On the course slides you can find the following definition of architecture:  \n>"The software architecture of a program or computing system is the structure or structures of the system, which comprise software elements, the externally visible properties of those elements, and the relationships among them."  \nHowever, in the book you can find another definition:  \n>"The software architecture of a system is the set of structures needed to reason about the system, which comprise the software elements, relations among them, and the properties of both."  \n	\N	t
304	SharedUnderstanding	\N	Martin Fowler, *Who Needs and Architect?*, cites Ralph Johnson sentence:  \n>"In most successful software projects, the expert developers working on that project have a shared understanding of the system design. This shared understanding is called architecture."  \n	\N	t
305	CreateArchitectureOne	\N	During the different steps on how to create an architecture, the precise specification of architecture quality attributes is initially relevant to	\N	t
306	Flexibilitis	\N	Frank Buschmann states that:  \n>"Overly flexible systems are hard to configure, and when they're finally configured, they lack qualities like performance or security."  \n	\N	t
307	FeaturitisPerformitisFlexibilities	\N	In his article, *Featuritis, Performitis, and Other Deseases*, Frank Buschmann claims that:	\N	t
308	ComponentvsModule	\N	In wikipedia you can find the following fragment of a definition:  \n>"An individual software component is a software package, or a module that encapsulates a set of related functions."  \nAccording to the definitions taught in the course the above *individual software component* corresponds to:	\N	t
309	EarlyDecisions	\N	In his article, *Who Needs and Architect?*, Martin Fowler cites Ralph Johnson definition:  \n>"Architecture is the set of decisions that must be made early in a project."  \nIn his opinion:	\N	t
310	ArchitectAstronauts	\N	Frank Buschmann, *Introducing the Pragmatic Architect*, defines the *architecture astronauts*. This kind of architect	\N	t
311	Explicit	\N	Frank Buschmann states that:  \n>"There's only one escape from such situations: architects must actively break the cycle of mutual misunderstanding and mistrust!"  \n	\N	t
312	WalkingSkeleton	\N	The *Walking Skeleton* referred in Frank Buschmann's article, *Featuritis, Performitis, and Other Deseases*:	\N	t
313	ComponentvsModuleTwo	\N	In the Java documentation you can find:  \n>"`public abstract class Component`\*`extends Object`\*`implements ImageObserver, MenuContainer, Serializable`"  \nClass `Component` is:	\N	t
314	ModuleViewType	\N	The quality that is more relevant to views of the module viewtype is:	\N	t
315	ArchitectDwarves	\N	Frank Buschmann, *Introducing the Pragmatic Architect*, defines the *architecture dwarves*. These kind of architects	\N	t
316	Prioritize	\N	Frank Buschmann states that:  \n>"Architects use flexibility as a cover for uncertainty."  \n	\N	t
317	HammersNails	\N	In his article *On Hammers and Nails, and Falling in Love with Technology and Design* what is the main type of influence on the architecture?	\N	t
318	FunctionalModule	\N	When designing an architecture requirements can be split into functional, quality attributes, and constraints. Functional requirements have impact on:	\N	t
319	ComponentViewType	\N	The quality(ies) that is(are) more relevant to views of the component-and-connector viewtype is(are):	\N	t
320	CreateArchitectureTwo	\N	The *Ensuring that the implementation conforms to the architecture* step of how to create an architecture	\N	t
321	AvailabilityScenario	\N	Consider the following scenario  \n>"When writing to the database the system receives an exception about a write failure. The system should stop interacting with data base and write a log message."  \nThe quality addressed by this scenario is	\N	t
322	PingEcho	\N	A heartbeat monitor	\N	t
323	GraphiteTechnicaAndNonTechnicalUsers	\N	Human-editable URL API for creating graphs is a usability design tactic used in the Graphite system. This tactic	\N	t
324	Firewall	\N	Having a single point of access to an intranet is a security tactic of	\N	t
325	ChromeTabSecurity	\N	In the Chrome system the use of a process per tab results form the application of a tactic of	\N	t
326	Scenario	\N	In a quality scenario	\N	t
327	Voting	\N	A voting tactic can be used to	\N	t
328	GraphiteReliability	\N	In the Graphite system description can be read:  \n>"We've got 600,000 metrics that update every minute and we're assuming our storage can only keep up with 60,000 write operations per minute. This means we will have approximately 10 minutes worth of data sitting in carbon's queues at any given time. To a user this means that the graphs they request from the Graphite webapp will be missing the most recent 10 minutes of data."  \n	\N	t
329	VerifyMessageIntegrity	\N	In the Fenix system a checksum is associated to a set of grades. This is an application of the tactic	\N	t
330	ChromePerformance	\N	In the Chrome system the following tactic is used to improve performance	\N	t
389	ImplementationStyle	\N	An architecture can also be represented by the set of files which contains its modules code. A suitable architectural style to represent this set of files is	\N	t
527	ScenariosTacticsTwo	\N	General scenarios play an important role in the development of a software architecture because	\N	t
331	InteroperabilityScenario	\N	Consider the following scenario  \n>"Our vehicle information system send our current location to the traffic monitoring system. The traffic monitoring system combines our location with other information, overlays this information on a Google Map, and broadcasts it. Our location information is correctly included with a probability of 99.99%."  \nThe quality addressed by this scenario is	\N	t
332	GarbageCollector	\N	In wikipedia you can find the following definition:  \n>"The garbage collector, or just collector, attempts to reclaim garbage, or memory occupied by objects that are no longer in use by the program."  \nThe garbage collector is a component that implements an availability tactic of	\N	t
333	GraphiteBackend	\N	To reduce the backend load (writes) the Graphite system uses	\N	t
334	SeparateEntities	\N	In a system where there are sensitive data an appropriate tactic to be used is	\N	t
335	ChromeUsability	\N	In the description of the Chrome system can be read  \n>"As the user types, the Omnibox automatically proposes an action, which is either a URL based on your navigation history, or a search query."  \nThe above sentence refers to	\N	t
336	Tactics	\N	An architectural tactic	\N	t
337	Degradation	\N	Consider a enterprise web system, which provides services both on the company's intranet and to the company's clients on the internet, that when under a denial of service attack decides to stop providing internet services.	\N	t
338	GraphiteModifiability	\N	In the Graphite system description can be read:  \n>"Making multiple Graphite servers appear to be a single system from a user perspective isn't terribly difficult, at least for a naive implementation."  \n	\N	t
339	InternalAttack	\N	In a system where the source of attacks can be internal, from authorized users, the appropriate tactics to be used are	\N	t
340	ChromePredictor	\N	In the description of the Chrome system can be read  \n>"The goal of the predictor is to evaluate the likelihood of its success, and then to trigger the activity if resources are available."  \nThe above sentence refer to	\N	t
341	FenixBusinessCase	\N	In the context of the FenixEdu case study, the business case was to	\N	t
342	IterativeDesign	\N	Designing an architecture	\N	t
343	SocialCalcUsability	\N	In the description of the SocialCalc case study can be read:  \n>"Even with race conditions resolved, it is still suboptimal to accidentally overwrite the cell another user is currently editing. A simple improvement is for each client to broadcast its cursor position to other users, so everyone can see which cells are being worked on."  \nFrom this fragment can be identified a scenario for	\N	t
344	ThounsandParsecInteroperability	\N	In the description of the Thousand Parsec case study can be read:  \n>"Finding a public Thousand Parsec server to play on is much like locating a lone stealth scout in deep space - a daunting prospect if one doesn't know where to look. Fortunately, public servers can announce themselves to a metaserver, whose location, as a central hub, should ideally be well-known to players."  \nFrom this fragment can be identified a scenario for	\N	t
345	DecompositionBuilvsBuy	\N	A criteria for the the application of the Decomposition architectural style of the Module viewtype is Build-vs-Buy decisions. The application of the criteria	\N	t
346	BusinessScenarioOne	\N	In the context of the FenixEdu case study the following scenario was identified.  \n>"The school management pretends that all the members of the school, students, administrative staff, faculty and management should be able to use the system to perform their activities efficiently without requiring the installation of any client software or a long learning process."  \nThis is a	\N	t
347	LowArchitecturalImpact	\N	Consider an architecturally significant requirement (ASR) that has a low impact on the architecture but a high business value	\N	t
348	SocialCalcModifiability	\N	In the description of the SocialCalc case study can be read:  \n>"To make this work across browsers and operating systems, we use the Web::Hippie4 framework, a high-level abstraction of JSON-over-WebSocket with convenient jQuery bindings."  \nFrom this fragment can be identified a scenario for	\N	t
349	ThounsandParsecSystemInitiative	\N	In the description of the Thousand Parsec case study can be read:  \n>"Next, the player is prompted to configure options for the ruleset and server, with sane defaults pulled from the metadata. Finally, if any compatible AI clients are installed, the player is prompted to configure one or more of them to play against."  \nThe tactic referred in the fragments is	\N	t
350	DecompositionBuilvsBuy	\N	A criteria for the the application of the Decomposition architectural style of the Module viewtype is Build-vs-Buy decisions. The application of the criteria	\N	t
351	UtilityTree	\N	A utility tree	\N	t
352	HighBusinessValue	\N	Consider an architecturally significant requirement (ASR) that has a high impact on the architecture but a low business value	\N	t
353	SocialCalcAvailability	\N	In the description of the SocialCalc case study can be read:  \n>"If users A and B simultaneously perform an operation affecting the same cells, then receive and execute commands broadcast from the other user, they will end up in different states."  \nFrom this fragment can be identified a scenario for	\N	t
354	ThounsandParsecAvailability	\N	In the description of the Thousand Parsec case study can be read:  \n>"Turns also have a time limit imposed by the server, so that slow or unresponsive players cannot hold up a game."  \nFrom this fragment can be identified a scenario for	\N	t
355	Decomposition	\N	The Decomposition architectural style of the Module viewtype	\N	t
356	BusinessScenarioTwo	\N	In the context of the FenixEdu case study the following scenario was identified.  \n>"The management intends that the system should be available to all users, even after offices close and classes finish because students may need courses material to study 24X7 and faculty and administrative staff may want to work from home."  \nThis is a	\N	t
357	FenixADD	\N	When applying Attribute-Driven Design (ADD) to the FenixEdu system the creation of a view where there are redundant web servers, load balancers and database servers	\N	t
358	SocialCalcMaintainTaskModel	\N	In the description of the SocialCalc case study can be read:  \n>"Therefore, on browsers with support for CSS3, we use the box-shadow property to represent multiple peer cursors in the same cell."  \nThis corresponds to the application of	\N	t
1217	Aspects	\N	Using the Aspects architectural style promotes the modifiability of a system because	\N	t
359	ThounsandParsecRollback	\N	In the description of the Thousand Parsec case study can be read:  \n>"Besides often running far longer than the circadian rhythms of the players' species, during this extended period the server process might be prematurely terminated for any number of reasons. To allow players to pick up a game where they left off, Thousand Parsec servers provide persistence by storing the entire state of the universe (or even multiple universes) in a database."  \nThe tactic referred in the fragments is	\N	t
360	Decomposition	\N	The Decomposition architectural style of the Module viewtype	\N	t
361	UsesCycles	\N	Consider a view of the module viewtype where there is a uses loop, a cycle of uses dependences between several modules. It may be possible to break the dependence cycle by	\N	t
362	Aspects	\N	An architect is decomposing a system into a set of responsibilities using a view of the Decomposition style. However, she had already to backtrack several times and try new decompositions because she end up with some responsibility that can not be within a single module.	\N	t
363	GitHubSecurity	\N	In the description of the GitHub case study can be read:  \n>"Of course, allowing arbitrary execution of commands is unsafe, so SSH includes the ability to restrict what commands can be executed. In a very simple case, you can restrict execution to git-shell which is included with Git. All this script does is check the command that you're trying to execute and ensure that it's one of git upload-pack, git receive-pack, or git upload-archive."  \nThe tactic addressed in this fragments is:	\N	t
364	ConnectorAttach	\N	A connector may be attached to components of different types because	\N	t
365	RepositoryPerformance	\N	The repository architectural style provides performance because	\N	t
366	GeneralizationEvolution	\N	The Generalization architectural style of the module viewtype can be use to support the evolution of a system	\N	t
367	DataModelFacebook	\N	In Facebook it is not possible to have the information about more that one bilion users in a single disk. Therefore, a sharding technique is applied, where the persistent information is split between several database servers, and applications are routed to the right servers for queries and updates. To describe this architecture	\N	t
368	GitIncreaseResourceEfficiency	\N	In the description of the Git case study can be read how it efficiently compares content:  \n>"When a content (i.e., file or directory) node in the graph has the same reference identity (the SHA in Git) as that in a different commit, the two nodes are guaranteed to contain the same content, allowing Git to short-circuit content diffing efficiently."  \nThe performance tactic addressed in this fragments is:	\N	t
369	ConnectorDecomposition	\N	Consider an architect that is designing a component-and-connector view. In some point the architect decides that she does not need to decompose a connector with a demanding quality level. This may occur because	\N	t
370	ClientServerSynchronous	\N	In the client-server architectural style the request/reply connector is synchronous. Consider an architect that wants to describe an asynchronous interaction between clients and servers.	\N	t
371	UsesFor	\N	The Uses architectural style of the Module viewtype	\N	t
372	UsesDataModel	\N	A CRUD matrix, which indicates whether each module creates, reads, updates, or deletes data (CRUD, for short) from each data entity. The CRUD matrix	\N	t
373	GitHubComputationRedundancy	\N	In the description of the GitHub case study can be read:  \n>"Once the Smoke proxy has determined the user's route, it establishes a transparent proxy to the proper file server. We have four pairs of file servers. Their names are fs1a, fs1b, ..., fs4a, fs4b. These are 8 core, 16GB RAM bare metal servers, each with six 300GB 15K RPM SAS drives arranged in RAID 10. At any given time one server in each pair is active and the other is waiting to take over should there be a fatal failure in the master. All repository data is constantly replicated from the master to the slave via DRBD."  \nThe four pairs of file servers implement:	\N	t
374	ComponentPorts	\N	Consider the concepts of module interface and component port.	\N	t
375	ClientServerAvailability	\N	The client-server architectural style provides availability because	\N	t
376	ModuleComponent	\N	Consider the kind of relations between components and modules.	\N	t
377	GitConditionMonitoring	\N	In the description of the Git case study can be read how to deal with the corruption of pack files in the context of the availability quality:  \n>"If an object was only copied partially or another form of data corruption occurred, recalculating the SHA of the current object will identify such corruption."  \nThe tactic addressed in this fragments is:	\N	t
378	RepositoryModifiability	\N	The repository architectural style provides modifiability because	\N	t
379	UsesCalls	\N	A function call is not necessarily a uses relation of the Uses architectural style of the Module viewtype because	\N	t
380	LayeredVirtualMachine	\N	According to the definition of the Layered architectural style, each layer represents a grouping of modules that offers a cohesive set of services.	\N	t
381	PeerToPeerSpace	\N	The Peer-to-Peer architectural style provides high scalability and availability. In the context of a file sharing system	\N	t
382	SOAClientServerPeertoPeer	\N	The Service-Oriented Architecture style	\N	t
383	GraphiteCarbon	\N	Consider the following application-specific types that were defined for a component-and-connector view that depicts the components within `Carbon` component. ![image][image]	\N	t
384	AllocationStylesCost	\N	Consider a stakeholder that is particularly concerned about the total cost of the project. When it comes to describing the system using allocation viewtypes is interested in	\N	t
385	DVDCatalogMeta	\N	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement  \n>"The application should support other kinds of catalogs (CDs, games, books, ...)."  \nThis requirement requires a change of	\N	t
386	PeerToPeerDynamicReconfiguration	\N	In the description of the Gnutella system can be read:  \n>"The topology of the system changes at runtime as peer components connect and disconnect to the network."  \n	\N	t
387	SOAQualities	\N	The Service-Oriented Architecture style improves modifiability because	\N	t
388	GraphiteDataPointSocket	\N	Consider the following application-specific types. Note that `Queue` components are within the `Carbon` components. In a view that contains components of these three types ![image][image]	\N	t
1218	PeerToPeer	\N	Consider the peer-to-peer architectural style	\N	t
390	DVDCatalogAspects	\N	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement  \n>"To allow the share of catalogs with family and friends, including some access control."  \nThis requirement requires	\N	t
391	Tiers	\N	The Tiers architectural style	\N	t
392	SOAInteroperability	\N	The Service-Oriented Architecture style improves interoperability because	\N	t
393	InstallStyle	\N	An important stage of the development of any system is its build into the set of executable files. A suitable architectural style which helps on the definition of the build process is	\N	t
394	DVDCatalogMobile	\N	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement  \n>"To support iPhone/iPad/Android version with sync, which allows offline use of the application in the mobile device and data synchronization to occur when a connection is available"  \nThis requirement requires a change of	\N	t
395	GraphiteDecompositionMemcached	\N	Consider the following decomposition view of the Graphite system where module \extsc{Store Graphs} is responsible for managing the storage of datapoints and graphs and module \extsc{Present Graphs} for graphs generation and presentation. Memcache is a library that maintains datapoints in memory to reduce the overhead of obtaining them from the file system. ![image][image]	\N	t
396	PublishSubscribe	\N	In the Publish-Subscribe architectural style	\N	t
397	PipeFilterComposition	\N	The Pipe-and-Filter style allows composition of filters	\N	t
398	GraphiteDecompositionBuffering	\N	Consider the following decomposition view of the Graphite system where module \extsc{Store Graphs} is responsible for managing the storage of datapoints and graphs and module \extsc{Present Graphs} for graphs generation and presentation. Buffering is a library used to temporarily store incoming data point. ![image][image]	\N	t
399	DeploymentStyleLimitExposure	\N	An architect needs to show that a security tactic of limit exposure will be effectively provided by the executing system. Therefore, she decides to design	\N	t
400	DVDCatalogMultiPlatform	\N	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement  \n>"To support multi-platform (Mac, Windows, Linux)"  \nThis requirement requires a change of	\N	t
401	SilkMobileDevices	\N	When comparing Amazon Silk with Google Chrome in the context of mobile devices	\N	t
402	ThousandParsecReadWriteConnector	\N	Consider the architectural views for the ThousandParsec system. The following diagram depicts a proposal of application-specific types for the architectural components, where the names of the ports are missing. Between the GameServer and Repository component ![image][image]	\N	t
403	OrderPadReliability	\N	Consider the architecture of the Morrison's OrderPad. The connector between the client component, executing in the Pad, and the server component, executing in the OrderPadDatabase	\N	t
404	SocialCalcConflictResolution	\N	Consider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the client Spreadsheet. A \extsc{ConflictResolution} module is used when local commands conflict with remote commands. ![image][image]	\N	t
405	LogicAccessTableModule	\N	When the domain logic is organized using a Table Module pattern	\N	t
406	SilkConnections	\N	When comparing Amazon Silk with Google Chrome	\N	t
407	ThousandParsecModule	\N	Consider the architectural views for the ThousandParsec system. The following diagram depicts a fragment of a proposal for the decomposition view of the system. The ThousandParsec protocol ![image][image]	\N	t
408	OrderPadIterative	\N	Consider the architecture of the Morrison's OrderPad. In the description of the system can be read:  \n>"One of these was using a file-transfer to send data to the mainframe rather than MQ, which wouldn't perform well once many stores were active."  \nThis approach means that	\N	t
409	SocialCalcRemoteCursor	\N	Consider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the client Spreadsheet. It can be read in the case description: *A simple improvement is for each client to broadcast its cursor position to other users, so everyone can see which cells are being worked on.* ![image][image]	\N	t
410	LogicAccessTransactionScriptDomainObjects	\N	When the domain logic is organized using a Transaction Script pattern the domain objects	\N	t
411	SilkPredictor	\N	When comparing Amazon Silk with Google Chrome in the context of the prediction of pages the user is going to access	\N	t
412	ThousandParsecTPConnector	\N	Consider the architectural views for the ThousandParsec system. The following diagram depicts a proposal of application-specific types for the architectural components, where the names of the ports are missing. Between the GameClient and GameServer components ![image][image]	\N	t
413	OrderPadPortability	\N	Consider the architecture of the Morrison's OrderPad. The decision between the use of a Native application or HTML5 on the implementation of the client in the Pad	\N	t
414	SocialCalcServer	\N	Consider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the system. According to this representation ![image][image]	\N	t
415	LogicAccessTransactionScript	\N	When the domain logic is organized using a Transaction Script pattern the most suitable data source patterns are	\N	t
416	SilkCaching	\N	When comparing Amazon Silk with Google Chrome	\N	t
417	ThousandParsecAI	\N	Consider the architectural views for the ThousandParsec system. The following diagram depicts a fragment of a proposal for the decomposition view of the system. The AI players should be described ![image][image]	\N	t
418	OrderPadMainframeConnector	\N	Consider the architecture of the Morrison's OrderPad. The final interaction between the OrderPadDatabase component and Mainframe component is supported by	\N	t
550	ImageHostingPerformance	\N	Consider the following informal view of an Image Hosting System ![image][image]	\N	t
419	SocialCalcParser	\N	Consider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the client Spreadsheet. A \extsc{Parser} module is used when loading a file ![image][image]	\N	t
420	LogicAccessDomainModel	\N	When the domain logic is organized using a Domain Model pattern the most suitable data source patterns are	\N	t
421	ArchitectureInfluenceCycleOne	\N	Consider the following sentence by Melvin Conways, also known as Conway's Law  \n>"organizations which design systems ... are constrained to produce designs which are copies of the communication structures of these organizations"  \n	\N	t
422	AdventureBuilderOne	\N	Consider the following architectural view of the Adventure Builder system ![image][image] According to this view the stakeholders can see that the Adventure Builder system	\N	t
423	RequirementsOne	\N	Frank Buschmann cites the characterization Marquardt does of Performitis:  \n>"Each part of the system is directly influenced by local performance tuning measures. There is no global performance strategy, or it ignores other qualities of the system as testability and maintainability."  \nFrom this problem you can conclude that:	\N	t
424	ArchitectureDefinitionOne	\N	Consider that a software development team uses an agile methodology such as XP (Extreme Programming), where no documentation is produced. Then, the systems developed by that team	\N	t
425	ScenariosTacticsOne	\N	As part of the process of creating an architecture, we talked about a framework for capturing some of the requirements for a system. In this context, **concrete scenarios** are used for	\N	t
426	ModuleComponentOne	\N	Consider the Figure that describes the use of caches in web services. ![image][image] In that Figure, there is a rectangle with the name *Cache* within another rectangle with the name *Request Node*. Taking into account the description made in the text and the goal of that Figure, those rectangles correspond to which type of software elements?	\N	t
427	AvailabilityOne	\N	There are several tactics to satisfy availability requirements, which may be applied depending on the concrete requirement that we want to satisfy. Assuming that you want to deal with faults of type *omission* in your system, which tactic is more adequate?	\N	t
428	ModifiabilityOneOne	\N	Consider that an architect needs to design a system which interacts with two external sources of information, and it has to import some of the information to store it in the system's internal database. The stakeholders inform him that it will be necessary to include new sources of information in the future, besides the two already identified, but they cannot precisely define which they are. This changes will occur after the first version of the system is in production. Additionally, the stakeholders define a short period of time to integrate a new source of information. Given this requirements the architect should	\N	t
429	PerformanceOneOne	\N	Consider the change in the architecture associated with the use of caches in web services shown in the figure ![image][image] That change has the goal and the consequence of, respectively	\N	t
430	NginxScenariosTacticsOne	\N	Consider the following excerpt from Nginx case study  \n>"nginx configuration is kept in a number of plain text files which typically reside in /usr/local/etc/nginx or /etc/nginx. The main configuration file is usually called nginx.conf. To keep it uncluttered, parts of the configuration can be put in separate files which can be automatically included in the main one. However, it should be noted here that nginx does not currently support Apache-style distributed configurations (i.e., .htaccess files). All of the configuration relevant to nginx web server behavior should reside in a centralized set of configuration files."  \nWhen comparing the configuration in Nginx with the configuration in Apache we can say that	\N	t
431	ContinousIntegrationScenariosTacticsOne	\N	In the Continous integration case study can be read about Jenkins  \n>"It takes advantage of the JUnit XML standard for unit test and code coverage reporting to integrate reports from a variety of test tools. Jenkins originated with Sun, but is very widely used and has a robust open-source community associated with it."  \nConsider that a scenario is written from the above sentence	\N	t
432	InfinispanScenariosTacticsOne	\N	In the Infinispan case study can be read  \n>"When persisting for durability, persistence can either be online, where the application thread is blocked until data is safely written to disk, or offline, where data is flushed to disk periodically and asynchronously. In the latter case, the application thread is not blocked on the process of persistence, in exchange for uncertainty as to whether the data was successfully persisted to disk at all."  \nFrom the description we can infer a trade-off between the qualities of	\N	t
433	DesigningArchitectureOne	\N	According to the attribute-driven design process, we should design the software architecture for a system based on a selected list of requirements, which are called the *architecture significant requirements*. These requirements should be sorted according to their importance for the system's stakeholders because	\N	t
434	ModuleViewtypeOneOne	\N	Consider the following description of *Memcached*, which is adapted from its Wiki:  \n>"Memcached is an in-memory key-value store for small chunks of arbitrary data from results of database calls, API calls, or page rendering. It is made up of:  \n-  Client software, which is given a list of available memcached servers.  \n-  A client-based hashing algorithm, which chooses a server based on the "key" input.  \n-  Server software, which stores your values with their keys into an internal hash table.  \n-  Server algorithms, which determine when to throw out old data (if out of memory), or reuse memory.  \n"  \nSuppose that you want to present an architectural view for *Memcached* that represents the above information. Which view is more adequate?	\N	t
435	UsesGeneralizationOne	\N	To achieve a faster time-to-market, software companies are increasingly using a strategy of incremental releases of their software, where each new release has a set of new features. Which architectural style is better to analyse whether the system's software architecture is adequate for the planned incremental releases?	\N	t
436	LayeredAspectsDataModelOne	\N	In a layered architecture composed by four layers, where the topmost layer is the layer number 1 and the bottommost layer is the layer number 4, which of the layers is more modifiable?	\N	t
438	RepositoryClientServerOne	\N	Suppose that you are designing the software architecture for an enterprise application that has requirements about the maximum response time for a certain type of requests. Moreover, assume that those requests arrive at the system periodically, whereas the remaining requests have an unpredictable frequency. Finally, assume that your system will have a single server that will be executing on a predefined machine with a 12-core AMD processor. To show to the stakeholders that your system satisfies the performance requirements you have to use views of which architectural style?	\N	t
439	TiersDynamicreconfigurationPeertopeerPublishsubscribeOne	\N	Typically, Instant Messaging clients have a window to list the contacts of the user, and show in that window the status of each contact (whether it is available, unavailable, busy, etc). Given that the status of a contact may be changed at any time, and that the contact's status is given by the Instant Messaging application of that contact, which architectural style represents best the interaction pattern between these components?	\N	t
440	SOAPipesFiltersOne	\N	Imagine that you want to develop a system that is to be used in email servers, whose goal is to allow changing the emails that are received by the server (for example, to remove potential viruses or URLs linking to phishing sites). The goal is that the server feeds each received email through this system before processing it (e.g., forward it to another server, or store it locally). The system is supposed to be easily modifiable, to support new types of email transformations. Which architectural style is the most adequate to satisfy these requirements?	\N	t
441	AllocationOneOne	\N	The Work-assignment is an architectural style of the allocation viewtype, where	\N	t
442	nginxOne	\N	Web servers implemented in Java, such as the Tomcat web server, typically use a thread-based model for processing requests. That is, they process each request on a different thread within the same JVM process, rather than on a different process. One of the reasons for this is that	\N	t
443	ContinousIntegrationViewsOne	\N	Consider the following architectural view of the Pony-Build system as described in the Continous integration case study ![image][image] According to this view the quality of performance is achieved through	\N	t
444	InfinispanViewsOne	\N	In the Infinispan case study can be read  \n>"Infinispan's core data structures make use of software transactional memory techniques for concurrent access to shared data. This minimizes the need for explicit locks, mutexes and other forms of synchronization, preferring techniques like compare-and-set operations within a loop to achieve correctness when updating shared data structures. Such techniques have been proven to improve CPU utilization in multi-core and SMP systems, and despite the increased code complexity, has paid off in overall performance when under load."  \nThese properties of Infinispan can be represented by	\N	t
445	WebTwoOne	\N	With the evolution of the web application technologies, it is now possible to develop web applications with a user interface similar to the interface of desktop applications. Yet, for this to happen, part of the code that was executing in the web server is now executing in the web browser. How does this change manifests in the software architecture of the system?	\N	t
446	MicroservicesArchitectureOne	\N	Consider the following figure depicting two different architectures for web applications ![image][image]	\N	t
447	AmazonOne	\N	Consider the following excerpt about the Amazon system  \n>"Over time, this grew into hundreds of services and a number of application servers that aggregate the information from the services. The application that renders the Amazon.com Web pages is one such application server, but so are the applications that serve the Web-services interface, the customer service application, the seller interface, and the many third-party Web sites that run on our platform."  \nThe architectural style that better represents these aspects of the Amazon architecture is	\N	t
448	ScalableArchitectureOne	\N	Consider the following excerpt about the Scalable web architecture and distributed systems case study about two different possible implementations of a global cache  \n>"The majority of applications leveraging global caches tend to use the first type, where the cache itself manages eviction and fetching data to prevent a flood of requests for the same data from the clients. However, there are some cases where the second implementation makes more sense. For example, if the cache is being used for very large files, a low cache hit percentage would cause the cache buffer to become overwhelmed with cache misses; in this situation it helps to have a large percentage of the total data set (or hot data set) in the cache."  \n	\N	t
449	GraphiteScenarioTacticsOne	\N	In the Graphite system the component *carbon* provides to *webapp* components an access interface to the *buffers* in order to improve the quality of	\N	t
450	GraphiteViewsOne	\N	In Graphite system the *receiver* and the *writer threads* support asynchronous writing of metrics to optimize disk accesses. The interaction between these two components follow the architectural style	\N	t
451	ContinousIntegrationScenariosTacticsOne	\N	In the Continous integration case study can be read about Jenkins  \n>"It takes advantage of the JUnit XML standard for unit test and code coverage reporting to integrate reports from a variety of test tools. Jenkins originated with Sun, but is very widely used and has a robust open-source community associated with it."  \nConsider that a scenario is written from the above sentence	\N	t
452	InfinispanScenariosTacticsOne	\N	In the Infinispan case study can be read  \n>"When persisting for durability, persistence can either be online, where the application thread is blocked until data is safely written to disk, or offline, where data is flushed to disk periodically and asynchronously. In the latter case, the application thread is not blocked on the process of persistence, in exchange for uncertainty as to whether the data was successfully persisted to disk at all."  \nFrom the description we can infer a trade-off between the qualities of	\N	t
453	WebTwoOne	\N	With the evolution of the web application technologies, it is now possible to develop web applications with a user interface similar to the interface of desktop applications. Yet, for this to happen, part of the code that was executing in the web server is now executing in the web browser. How does this change manifests in the software architecture of the system?	\N	t
454	MicroservicesArchitectureOne	\N	Consider the following figure depicting two different architectures for web applications ![image][image]	\N	t
455	AmazonOne	\N	Consider the following excerpt about the Amazon system  \n>"Over time, this grew into hundreds of services and a number of application servers that aggregate the information from the services. The application that renders the Amazon.com Web pages is one such application server, but so are the applications that serve the Web-services interface, the customer service application, the seller interface, and the many third-party Web sites that run on our platform."  \nThe architectural style that better represents these aspects of the Amazon architecture is	\N	t
456	DesigningArchitectureOne	\N	According to the attribute-driven design process, we should design the software architecture for a system based on a selected list of requirements, which are called the *architecture significant requirements*. These requirements should be sorted according to their importance for the system's stakeholders because	\N	t
457	ModuleViewtypeOneOne	\N	Consider the following description of *Memcached*, which is adapted from its Wiki:  \n>"Memcached is an in-memory key-value store for small chunks of arbitrary data from results of database calls, API calls, or page rendering. It is made up of:  \n-  Client software, which is given a list of available memcached servers.  \n-  A client-based hashing algorithm, which chooses a server based on the "key" input.  \n-  Server software, which stores your values with their keys into an internal hash table.  \n-  Server algorithms, which determine when to throw out old data (if out of memory), or reuse memory.  \n"  \nSuppose that you want to present an architectural view for *Memcached* that represents the above information. Which view is more adequate?	\N	t
458	UsesGeneralizationOne	\N	To achieve a faster time-to-market, software companies are increasingly using a strategy of incremental releases of their software, where each new release has a set of new features. Which architectural style is better to analyse whether the system's software architecture is adequate for the planned incremental releases?	\N	t
459	LayeredAspectsDataModelOne	\N	In a layered architecture composed by four layers, where the topmost layer is the layer number 1 and the bottommost layer is the layer number 4, which of the layers is more modifiable?	\N	t
460	AvailabilityOne	\N	There are several tactics to satisfy availability requirements, which may be applied depending on the concrete requirement that we want to satisfy. Assuming that you want to deal with faults of type *omission* in your system, which tactic is more adequate?	\N	t
461	ModifiabilityOneOne	\N	Consider that an architect needs to design a system which interacts with two external sources of information, and it has to import some of the information to store it in the system's internal database. The stakeholders inform him that it will be necessary to include new sources of information in the future, besides the two already identified, but they cannot precisely define which they are. This changes will occur after the first version of the system is in production. Additionally, the stakeholders define a short period of time to integrate a new source of information. Given this requirements the architect should	\N	t
462	PerformanceOneOne	\N	Consider the change in the architecture associated with the use of caches in web services shown in the figure ![image][image] That change has the goal and the consequence of, respectively	\N	t
463	NginxScenariosTacticsOne	\N	Consider the following excerpt from Nginx case study  \n>"nginx configuration is kept in a number of plain text files which typically reside in /usr/local/etc/nginx or /etc/nginx. The main configuration file is usually called nginx.conf. To keep it uncluttered, parts of the configuration can be put in separate files which can be automatically included in the main one. However, it should be noted here that nginx does not currently support Apache-style distributed configurations (i.e., .htaccess files). All of the configuration relevant to nginx web server behavior should reside in a centralized set of configuration files."  \nWhen comparing the configuration in Nginx with the configuration in Apache we can say that	\N	t
464	ComponentConnectorOne	\N	Suppose that there are certain performance requirements for a system, and that you want to show to the stakeholders of the system that the software architecture that you designed meet those requirements. To do this	\N	t
465	RepositoryClientServerOne	\N	Suppose that you are designing the software architecture for an enterprise application that has requirements about the maximum response time for a certain type of requests. Moreover, assume that those requests arrive at the system periodically, whereas the remaining requests have an unpredictable frequency. Finally, assume that your system will have a single server that will be executing on a predefined machine with a 12-core AMD processor. To show to the stakeholders that your system satisfies the performance requirements you have to use views of which architectural style?	\N	t
466	TiersDynamicreconfigurationPeertopeerPublishsubscribeOne	\N	Typically, Instant Messaging clients have a window to list the contacts of the user, and show in that window the status of each contact (whether it is available, unavailable, busy, etc). Given that the status of a contact may be changed at any time, and that the contact's status is given by the Instant Messaging application of that contact, which architectural style represents best the interaction pattern between these components?	\N	t
467	SOAPipesFiltersOne	\N	Imagine that you want to develop a system that is to be used in email servers, whose goal is to allow changing the emails that are received by the server (for example, to remove potential viruses or URLs linking to phishing sites). The goal is that the server feeds each received email through this system before processing it (e.g., forward it to another server, or store it locally). The system is supposed to be easily modifiable, to support new types of email transformations. Which architectural style is the most adequate to satisfy these requirements?	\N	t
468	AllocationOneOne	\N	The Work-assignment is an architectural style of the allocation viewtype, where	\N	t
469	nginxOne	\N	Web servers implemented in Java, such as the Tomcat web server, typically use a thread-based model for processing requests. That is, they process each request on a different thread within the same JVM process, rather than on a different process. One of the reasons for this is that	\N	t
470	ContinousIntegrationViewsOne	\N	Consider the following architectural view of the Pony-Build system as described in the Continous integration case study ![image][image] According to this view the quality of performance is achieved through	\N	t
854	GraphiteViewsTwo	\N	A high-level component-and-connect view of Graphite system can be designed using only the architectural style(s)	\N	t
471	InfinispanViewsOne	\N	In the Infinispan case study can be read  \n>"Infinispan's core data structures make use of software transactional memory techniques for concurrent access to shared data. This minimizes the need for explicit locks, mutexes and other forms of synchronization, preferring techniques like compare-and-set operations within a loop to achieve correctness when updating shared data structures. Such techniques have been proven to improve CPU utilization in multi-core and SMP systems, and despite the increased code complexity, has paid off in overall performance when under load."  \nThese properties of Infinispan can be represented by	\N	t
472	ScalableArchitectureOne	\N	Consider the following excerpt about the Scalable web architecture and distributed systems case study about two different possible implementations of a global cache  \n>"The majority of applications leveraging global caches tend to use the first type, where the cache itself manages eviction and fetching data to prevent a flood of requests for the same data from the clients. However, there are some cases where the second implementation makes more sense. For example, if the cache is being used for very large files, a low cache hit percentage would cause the cache buffer to become overwhelmed with cache misses; in this situation it helps to have a large percentage of the total data set (or hot data set) in the cache."  \n	\N	t
473	GraphiteScenarioTacticsOne	\N	In the Graphite system the component *carbon* provides to *webapp* components an access interface to the *buffers* in order to improve the quality of	\N	t
474	GraphiteViewsOne	\N	In Graphite system the *receiver* and the *writer threads* support asynchronous writing of metrics to optimize disk accesses. The interaction between these two components follow the architectural style	\N	t
475	ArchitectureInfluenceCycleOne	\N	Consider the following sentence by Melvin Conways, also known as Conway's Law  \n>"organizations which design systems ... are constrained to produce designs which are copies of the communication structures of these organizations"  \n	\N	t
476	AdventureBuilderOne	\N	Consider the following architectural view of the Adventure Builder system ![image][image] According to this view the stakeholders can see that the Adventure Builder system	\N	t
477	RequirementsOne	\N	Frank Buschmann cites the characterization Marquardt does of Performitis:  \n>"Each part of the system is directly influenced by local performance tuning measures. There is no global performance strategy, or it ignores other qualities of the system as testability and maintainability."  \nFrom this problem you can conclude that:	\N	t
478	ArchitectureDefinitionOne	\N	Consider that a software development team uses an agile methodology such as XP (Extreme Programming), where no documentation is produced. Then, the systems developed by that team	\N	t
479	ScenariosTacticsOne	\N	As part of the process of creating an architecture, we talked about a framework for capturing some of the requirements for a system. In this context, **concrete scenarios** are used for	\N	t
480	ModuleComponentOne	\N	Consider the Figure that describes the use of caches in web services. ![image][image] In that Figure, there is a rectangle with the name *Cache* within another rectangle with the name *Request Node*. Taking into account the description made in the text and the goal of that Figure, those rectangles correspond to which type of software elements?	\N	t
481	ArchitectureInfluenceCycleTwo	\N	Designing the software architecture for a complex system	\N	t
482	RequirementsTwo	\N	The architecturally significant requirements are important in the process of creating the software architecture for a system because they are	\N	t
483	ArchitectureDefinitionTwo	\N	The software architecture of a system	\N	t
484	AdventureBuilderTwo	\N	Consider the following architectural view of the Adventure Builder system ![image][image] In this component-and-connector view the interactions the interactions between components follow the architectural style(s)	\N	t
485	ModuleComponentTwo	\N	Which of the following phrases best describe the relationship between modules and components?	\N	t
486	ScenariosTacticsTwo	\N	General scenarios play an important role in the development of a software architecture because	\N	t
487	AvailabilityTwo	\N	There are several tactics to satisfy availability requirements, which may be applied depending on the concrete requirement that we want to satisfy. Assuming that you want to detect faults of type *response* in your system, which tactic is more adequate?	\N	t
488	ModifiabilityTwoOne	\N	Several of the cases studied in this course had scalability requirements. That means that those systems should be designed in such a way that they	\N	t
489	NginxScenariosTacticsTwo	\N	Web servers typically receive requests from different users concurrently (that is, either different users make requests simultaneously or they make them fast enough that it is not possible for the web server to answer one request from one user before receiving another request from another user). To process all the requests, web servers may use different implementation strategies. Assuming that we want to develop a web server to serve only static pages with more or less the same size to a set of clients on the same LAN network as the server, which of the following strategies would be better?	\N	t
490	PerformanceTwoOne	\N	Consider the change in the architecture associated with the use of caches in web services shown in the figure ![image][image] Taking into consideration that this change involves adding a server, which has a larger storage capacity than the request Nodes, that change has the impact of	\N	t
491	DesigningArchitectureTwo	\N	During the different steps on how to create an architecture, the precise specification of architecture quality attributes is initially relevant to	\N	t
492	ContinousIntegrationScenariosTacticsTwo	\N	In the Continous integration case study can be read about Jenkins  \n>"It takes advantage of the JUnit XML standard for unit test and code coverage reporting to integrate reports from a variety of test tools. Jenkins originated with Sun, but is very widely used and has a robust open-source community associated with it."  \nThe quality of Jenkins that is emphasized in the above sentence is	\N	t
525	AdventureBuilderTwo	\N	Consider the following architectural view of the Adventure Builder system ![image][image] In this component-and-connector view the interactions the interactions between components follow the architectural style(s)	\N	t
493	InfinispanScenariosTacticsTwo	\N	In the Infinispan case study can be read  \n>"Infinispan supports several pluggable cache stores-adapters that can be used to persist data to disk or any form of secondary storage. The current default implementation is a simplistic hash bucket and linked list implementation, where each hash bucket is represented by a file on the filesystem. While easy to use and configure, this isn't the best-performing implementation."  \nThe main architectural quality addressed in the above excerpt is	\N	t
494	ModuleViewtypeTwoOne	\N	Suppose that in the development of an enterprise application (which needs to access a database) it was decided to use the Hibernate framework to simplify the development of the data access code. Which architectural view is the most adequate to represent this decision?	\N	t
495	UsesGeneralizationTwo	\N	Suppose that in the process of designing a system's software architecture you come to the conclusion that there are uses relations in both directions in almost all of the system's modules. This means that	\N	t
496	LayeredAspectsDataModelTwo	\N	Suppose that you are implementing a module in a system that has a two layered architecture. Knowing that your module belongs to the upper layer (assuming the usual notation for the layer style), this means that you	\N	t
497	ComponentConnectorTwo	\N	The connectors on component-and-connector view	\N	t
498	RepositoryClientServerTwo	\N	The email system is composed of various types of components playing different roles. For example, to send an email, a user uses a *mail user agent* (MUA), to compose his message and send it. To send the message, the MUA typically connects to a *mail transfer agent* (MTA) that receives the message, analyzes the message's headers to determine the recipients and, after querying the DNS system to determine the MTA responsible for each recipient, it connects to the MTAs responsible for the destination addresses to deliver the message. Each of these MTAs receives the message and stores it locally or forwards it to others MTAs until the message reaches its destination MTA. The recipient user of the message will then use his MUA to see the messages that were sent to him. To do it, the MUA connects to an IMAP or POP server to obtain the user's messages. Those IMAP and POP servers obtain the messages for a user by reading the messages stored by the MTA. Given this simplified description of the operation of the email system, which of the following architectural styles is more appropriate to represent the pattern of interaction between the MTA and the servers IMAP and POP?	\N	t
499	TiersDynamicreconfigurationPeertopeerPublishsubscribeTwo	\N	Consider the following excerpt from the tutorial on the Hadoop MapReduce:  \n>"Hadoop MapReduce is a software framework for easily writing applications which process vast amounts of data (multi-terabyte data-sets) in-parallel on large clusters (thousands of nodes) of commodity hardware in a reliable, fault-tolerant manner. A MapReduce job usually splits the input data-set into independent chunks which are processed by the map tasks in a completely parallel manner. The framework sorts the outputs of the maps, which are then input to the reduce tasks. Typically both the input and the output of the job are stored in a file-system. The framework takes care of scheduling tasks, monitoring them and re-executes the failed tasks."  \nWhich architectural style of the component-and-connector viewtype is more adequate to describe how the MapReduce works, taking into account its main advantages in solving a problem?	\N	t
500	SOAPipesFiltersTwo	\N	Suppose that you are developing the software architecture of a new system for an organization composed of several organizational units, each one with its own information systems, which have been developed independently of each other over the course of several years and depending on the particular needs of each unit. Your system has the goal of integrating the various existing systems, providing in this way not only a unified view of how the organization works, but also allowing the creation of new processes within the organization that involve more than one unit. Which architectural style is better suited to design such a system?	\N	t
501	AllocationTwoOne	\N	In the software architecture of a system, the Deployment view is best suited for	\N	t
502	nginxTwo	\N	In Nginx, given that a *worker* processes various requests during its life, how does it do it?	\N	t
503	GraphiteViewsTwo	\N	A high-level component-and-connect view of Graphite system can be designed using only the architectural style(s)	\N	t
504	ContinousIntegrationViewsTwo	\N	In the Continous integration case study can be read about future features for Pony-Build  \n>"Currently, each continuous integration system reinvents the wheel by providing its own build configuration language, which is manifestly ridiculous; there are fewer than a dozen commonly used build systems, and probably only a few dozen test runners. Nonetheless, each CI system has a new and different way of specifying the build and test commands to be run. In fact, this seems to be one of the reasons why so many basically identical CI systems exist: each language and community implements their own configuration system, tailored to their own build and test systems, and then layers on the same set of features above that system. Therefore, building a domain-specific language (DSL) capable of representing the options used by the few dozen commonly used build and test tool chains would go a long way toward simplifying the CI landscape."  \nSuppose that you are the architect that has to change the architecture to accomodate this new feature. Therefore, as an architect	\N	t
505	InfinispanViewsTwo	\N	In the Infinispan case study can be read  \n>"Infinispan uses its own serialization scheme, where full class definitions are not written to the stream. Instead, magic numbers are used for known types where each known type is represented by a single byte. This greatly improves not just serialization and de-serialization speed qualities, but also produces a much more compact byte stream for transmission across a network. An externalizer is registered for each known data type, registered against a magic number. This externalizer contains the logic to convert object to bytes and vice versa."  \nThese properties of Infinispan can be represented by	\N	t
506	WebTwoTwo	\N	One of the evolutions in the development of web applications was the appearance of *mashups*, which are described in Wikipedia as follows:  \n>"In web development, a mashup is a web page or application that uses and combines data, presentation or functionality from two or more sources to create new services."  \nKnowing that the sources used by *mashups* do not know about the existence of the *mashups* and that they change frequently, forcing the adaptation of the *mashups* to accomodate those changes, what is the best architecture to minimize the effects of those changes?	\N	t
885	FenixOne	\N	In the context of the FenixEdu case study, the business case was to	\N	t
508	AmazonTwo	\N	Consider the following excerpt about the Amazon system  \n>"Mainly, I think service orientation has helped us there. The stored data formats are decoupled from the format in which you communicate data items. If there is no need for sharing schemas of the actual storage layout, you can focus on making sure that the service interfaces can evolve in a way that allows you to handle variations of data formats. You could dictate a rigorous single format, but that would not be realistic if you are in Amazon's platform business. We have to make sure that the platform can be extended by our customers to meet their needs."  \nThe architectural style that better represents these aspects of the Amazon architecture is	\N	t
509	ScalableArchitectureTwo	\N	Consider the following excerpt about the Scalable web architecture and distributed systems case study  \n>"Employing such a strategy maximizes data locality for the requests, which can result in decreased request latency. For example, let's say a bunch of nodes request parts of B: partB1, partB2, etc. We can set up our proxy to recognize the spatial locality of the individual requests, collapsing them into a single request and returning only bigB, greatly minimizing the reads from the data origin."  \nThe quality that is achieved with this tactic is	\N	t
510	GraphiteScenarioTacticsTwo	\N	Which quality, or qualities, of the Graphite system are described by the sentence: *Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL.*	\N	t
511	SOAPipesFiltersTwo	\N	Suppose that you are developing the software architecture of a new system for an organization composed of several organizational units, each one with its own information systems, which have been developed independently of each other over the course of several years and depending on the particular needs of each unit. Your system has the goal of integrating the various existing systems, providing in this way not only a unified view of how the organization works, but also allowing the creation of new processes within the organization that involve more than one unit. Which architectural style is better suited to design such a system?	\N	t
512	AllocationTwoOne	\N	In the software architecture of a system, the Deployment view is best suited for	\N	t
513	nginxTwo	\N	In Nginx, given that a *worker* processes various requests during its life, how does it do it?	\N	t
514	ContinousIntegrationViewsTwo	\N	In the Continous integration case study can be read about future features for Pony-Build  \n>"Currently, each continuous integration system reinvents the wheel by providing its own build configuration language, which is manifestly ridiculous; there are fewer than a dozen commonly used build systems, and probably only a few dozen test runners. Nonetheless, each CI system has a new and different way of specifying the build and test commands to be run. In fact, this seems to be one of the reasons why so many basically identical CI systems exist: each language and community implements their own configuration system, tailored to their own build and test systems, and then layers on the same set of features above that system. Therefore, building a domain-specific language (DSL) capable of representing the options used by the few dozen commonly used build and test tool chains would go a long way toward simplifying the CI landscape."  \nSuppose that you are the architect that has to change the architecture to accomodate this new feature. Therefore, as an architect	\N	t
515	InfinispanViewsTwo	\N	In the Infinispan case study can be read  \n>"Infinispan uses its own serialization scheme, where full class definitions are not written to the stream. Instead, magic numbers are used for known types where each known type is represented by a single byte. This greatly improves not just serialization and de-serialization speed qualities, but also produces a much more compact byte stream for transmission across a network. An externalizer is registered for each known data type, registered against a magic number. This externalizer contains the logic to convert object to bytes and vice versa."  \nThese properties of Infinispan can be represented by	\N	t
516	WebTwoTwo	\N	One of the evolutions in the development of web applications was the appearance of *mashups*, which are described in Wikipedia as follows:  \n>"In web development, a mashup is a web page or application that uses and combines data, presentation or functionality from two or more sources to create new services."  \nKnowing that the sources used by *mashups* do not know about the existence of the *mashups* and that they change frequently, forcing the adaptation of the *mashups* to accomodate those changes, what is the best architecture to minimize the effects of those changes?	\N	t
517	MicroservicesArchitectureTwo	\N	Consider the following figure depicting two different architectures for web applications ![image][image]	\N	t
518	AmazonTwo	\N	Consider the following excerpt about the Amazon system  \n>"Mainly, I think service orientation has helped us there. The stored data formats are decoupled from the format in which you communicate data items. If there is no need for sharing schemas of the actual storage layout, you can focus on making sure that the service interfaces can evolve in a way that allows you to handle variations of data formats. You could dictate a rigorous single format, but that would not be realistic if you are in Amazon's platform business. We have to make sure that the platform can be extended by our customers to meet their needs."  \nThe architectural style that better represents these aspects of the Amazon architecture is	\N	t
519	ScalableArchitectureTwo	\N	Consider the following excerpt about the Scalable web architecture and distributed systems case study  \n>"Employing such a strategy maximizes data locality for the requests, which can result in decreased request latency. For example, let's say a bunch of nodes request parts of B: partB1, partB2, etc. We can set up our proxy to recognize the spatial locality of the individual requests, collapsing them into a single request and returning only bigB, greatly minimizing the reads from the data origin."  \nThe quality that is achieved with this tactic is	\N	t
520	GraphiteScenarioTacticsTwo	\N	Which quality, or qualities, of the Graphite system are described by the sentence: *Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL.*	\N	t
521	GraphiteViewsTwo	\N	A high-level component-and-connect view of Graphite system can be designed using only the architectural style(s)	\N	t
522	ArchitectureInfluenceCycleTwo	\N	Designing the software architecture for a complex system	\N	t
523	RequirementsTwo	\N	The architecturally significant requirements are important in the process of creating the software architecture for a system because they are	\N	t
524	ArchitectureDefinitionTwo	\N	The software architecture of a system	\N	t
528	UsesGeneralizationTwo	\N	Suppose that in the process of designing a system's software architecture you come to the conclusion that there are uses relations in both directions in almost all of the system's modules. This means that	\N	t
529	LayeredAspectsDataModelTwo	\N	Suppose that you are implementing a module in a system that has a two layered architecture. Knowing that your module belongs to the upper layer (assuming the usual notation for the layer style), this means that you	\N	t
530	ComponentConnectorTwo	\N	The connectors on component-and-connector view	\N	t
531	RepositoryClientServerTwo	\N	The email system is composed of various types of components playing different roles. For example, to send an email, a user uses a *mail user agent* (MUA), to compose his message and send it. To send the message, the MUA typically connects to a *mail transfer agent* (MTA) that receives the message, analyzes the message's headers to determine the recipients and, after querying the DNS system to determine the MTA responsible for each recipient, it connects to the MTAs responsible for the destination addresses to deliver the message. Each of these MTAs receives the message and stores it locally or forwards it to others MTAs until the message reaches its destination MTA. The recipient user of the message will then use his MUA to see the messages that were sent to him. To do it, the MUA connects to an IMAP or POP server to obtain the user's messages. Those IMAP and POP servers obtain the messages for a user by reading the messages stored by the MTA. Given this simplified description of the operation of the email system, which of the following architectural styles is more appropriate to represent the pattern of interaction between the MTA and the servers IMAP and POP?	\N	t
532	TiersDynamicreconfigurationPeertopeerPublishsubscribeTwo	\N	Consider the following excerpt from the tutorial on the Hadoop MapReduce:  \n>"Hadoop MapReduce is a software framework for easily writing applications which process vast amounts of data (multi-terabyte data-sets) in-parallel on large clusters (thousands of nodes) of commodity hardware in a reliable, fault-tolerant manner. A MapReduce job usually splits the input data-set into independent chunks which are processed by the map tasks in a completely parallel manner. The framework sorts the outputs of the maps, which are then input to the reduce tasks. Typically both the input and the output of the job are stored in a file-system. The framework takes care of scheduling tasks, monitoring them and re-executes the failed tasks."  \nWhich architectural style of the component-and-connector viewtype is more adequate to describe how the MapReduce works, taking into account its main advantages in solving a problem?	\N	t
533	AvailabilityTwo	\N	There are several tactics to satisfy availability requirements, which may be applied depending on the concrete requirement that we want to satisfy. Assuming that you want to detect faults of type *response* in your system, which tactic is more adequate?	\N	t
534	ModifiabilityTwoOne	\N	Several of the cases studied in this course had scalability requirements. That means that those systems should be designed in such a way that they	\N	t
535	NginxScenariosTacticsTwo	\N	Web servers typically receive requests from different users concurrently (that is, either different users make requests simultaneously or they make them fast enough that it is not possible for the web server to answer one request from one user before receiving another request from another user). To process all the requests, web servers may use different implementation strategies. Assuming that we want to develop a web server to serve only static pages with more or less the same size to a set of clients on the same LAN network as the server, which of the following strategies would be better?	\N	t
536	ModuleViewtypeTwoOne	\N	Suppose that in the development of an enterprise application (which needs to access a database) it was decided to use the Hibernate framework to simplify the development of the data access code. Which architectural view is the most adequate to represent this decision?	\N	t
537	PerformanceTwoOne	\N	Consider the change in the architecture associated with the use of caches in web services shown in the figure ![image][image] Taking into consideration that this change involves adding a server, which has a larger storage capacity than the request Nodes, that change has the impact of	\N	t
538	DesigningArchitectureTwo	\N	During the different steps on how to create an architecture, the precise specification of architecture quality attributes is initially relevant to	\N	t
539	ContinousIntegrationScenariosTacticsTwo	\N	In the Continous integration case study can be read about Jenkins  \n>"It takes advantage of the JUnit XML standard for unit test and code coverage reporting to integrate reports from a variety of test tools. Jenkins originated with Sun, but is very widely used and has a robust open-source community associated with it."  \nThe quality of Jenkins that is emphasized in the above sentence is	\N	t
540	InfinispanScenariosTacticsTwo	\N	In the Infinispan case study can be read  \n>"Infinispan supports several pluggable cache stores-adapters that can be used to persist data to disk or any form of secondary storage. The current default implementation is a simplistic hash bucket and linked list implementation, where each hash bucket is represented by a file on the filesystem. While easy to use and configure, this isn't the best-performing implementation."  \nThe main architectural quality addressed in the above excerpt is	\N	t
541	PragmaticArchitect	\N	According to Frank Buschmann in the article *Introducing the Pragmatic Architect*	\N	t
542	EarlydDecisions	\N	In his article *Who Needs an Architect?* Martin Fowler refers to the following architecture definition  \n>"*architecture is the set of design decisions that must be made early in a project*"  \n	\N	t
543	ImageHostingPerformance	\N	Consider the following informal view of an Image Hosting System ![image][image]	\N	t
544	GeneralScenario	\N	A general scenario for a quality attribute	\N	t
545	OmissionRetry	\N	Considering the availability architectural quality, the tactic of retry	\N	t
546	GeneralScenario	\N	A general scenario for a quality attribute	\N	t
547	OmissionRetry	\N	Considering the availability architectural quality, the tactic of retry	\N	t
548	PragmaticArchitect	\N	According to Frank Buschmann in the article *Introducing the Pragmatic Architect*	\N	t
549	EarlydDecisions	\N	In his article *Who Needs an Architect?* Martin Fowler refers to the following architecture definition  \n>"*architecture is the set of design decisions that must be made early in a project*"  \n	\N	t
886	AvailabilityOne	\N	The stimulus of an availability scenario is	\N	t
551	ArchitecturalInfluenceCycle	\N	Suppose that after designing a successful architecture for a particular client the software house management decides to create a cross-functional internal department to start providing products for this particular segment of the market.	\N	t
552	SharedUnderstanding	\N	In his article *Who Needs an Architect?* Martin Fowler refers to the following architecture definition  \n>"*the expert developers working on that project have a shared understanding of the system design*"  \n	\N	t
553	ImageHostingScalability	\N	Consider the following informal view of an Image Hosting System ![image][image]	\N	t
554	InteroperabilityStimulus	\N	In a scenario for interoperability	\N	t
555	PingEchoHeartbeat	\N	Considering the availability architectural quality and the tactics of ping/echo and heartbeat	\N	t
556	PingEchoHeartbeat	\N	Considering the availability architectural quality and the tactics of ping/echo and heartbeat	\N	t
557	ArchitecturalInfluenceCycle	\N	Suppose that after designing a successful architecture for a particular client the software house management decides to create a cross-functional internal department to start providing products for this particular segment of the market.	\N	t
558	ImageHostingScalability	\N	Consider the following informal view of an Image Hosting System ![image][image]	\N	t
559	SharedUnderstanding	\N	In his article *Who Needs an Architect?* Martin Fowler refers to the following architecture definition  \n>"*the expert developers working on that project have a shared understanding of the system design*"  \n	\N	t
560	InteroperabilityStimulus	\N	In a scenario for interoperability	\N	t
561	Diplomat	\N	Very often, when a software architecture is being designed, conflicting requirements are identified, like between security and availability. The role of the software architect is to	\N	t
562	ASDefinition	\N	The definition of software architecture, on the course book, is  \n>"*The software architecture of a system is the set of structures needed to reason about the system, which comprise software elements, relations among them, and properties of both.*"  \nAccording to this definition	\N	t
563	ImageHostingReads	\N	Consider the following informal view of an Image Hosting System ![image][image]	\N	t
564	RequirementsImpact	\N	The requirements impact on how an architecture is designed	\N	t
565	RestartInRedundancy	\N	Considering the availability architectural quality and the tactics of active redundancy, passive redundancy, and spare	\N	t
566	ImageHostingReads	\N	Consider the following informal view of an Image Hosting System ![image][image]	\N	t
567	RequirementsImpact	\N	The requirements impact on how an architecture is designed	\N	t
568	Diplomat	\N	Very often, when a software architecture is being designed, conflicting requirements are identified, like between security and availability. The role of the software architect is to	\N	t
569	ASDefinition	\N	The definition of software architecture, on the course book, is  \n>"*The software architecture of a system is the set of structures needed to reason about the system, which comprise software elements, relations among them, and properties of both.*"  \nAccording to this definition	\N	t
570	RestartInRedundancy	\N	Considering the availability architectural quality and the tactics of active redundancy, passive redundancy, and spare	\N	t
571	PerformanceOne	\N	Consider a scenario for performance where the arrival of events is stochastic with a distribution where there are peeks of events but the arrival of events over a long period is uniform. The best tactic to apply is	\N	t
572	ModifiabilityOne	\N	The modifiability tactic Use an Intermediary between two modules	\N	t
573	BusinessToDesignOne	\N	The Attribute-Driven Design method is characterized by	\N	t
574	GraphiteOne	\N	Consider the following fragment in the description of the Graphite system:  \n>"The Graphite webapp allows users to request custom graphs with a simple URL-based API. Graphing parameters are specified in the query-string of an HTTP GET request, and a PNG image is returned in response."  \n	\N	t
575	NginxOne	\N	Consider the following fragment in the description of the nginx case study.  \n>"nginx's configuration system was inspired by Igor Sysoev's experiences with Apache. His main insight was that a scalable configuration system is essential for a web server. The main scaling problem was encountered when maintaining large complicated configurations with lots of virtual servers, directories, locations and datasets. In a relatively big web setup it can be a nightmare if not done properly both at the application level and by the system engineer himself."  \n	\N	t
576	NginxOne	\N	Consider the following fragment in the description of the nginx case study.  \n>"nginx's configuration system was inspired by Igor Sysoev's experiences with Apache. His main insight was that a scalable configuration system is essential for a web server. The main scaling problem was encountered when maintaining large complicated configurations with lots of virtual servers, directories, locations and datasets. In a relatively big web setup it can be a nightmare if not done properly both at the application level and by the system engineer himself."  \n	\N	t
577	BusinessToDesignOne	\N	The Attribute-Driven Design method is characterized by	\N	t
578	PerformanceOne	\N	Consider a scenario for performance where the arrival of events is stochastic with a distribution where there are peeks of events but the arrival of events over a long period is uniform. The best tactic to apply is	\N	t
579	GraphiteOne	\N	Consider the following fragment in the description of the Graphite system:  \n>"The Graphite webapp allows users to request custom graphs with a simple URL-based API. Graphing parameters are specified in the query-string of an HTTP GET request, and a PNG image is returned in response."  \n	\N	t
580	ModifiabilityOne	\N	The modifiability tactic Use an Intermediary between two modules	\N	t
581	PerformanceTwo	\N	The two basic contributors for the response time are the processing time and the blocking time. Which tactic for performance may reduce the blocking time	\N	t
582	ModifiabilityTwo	\N	Consider the following scenario: *A system administrator simultaneously launches several instances of the system, each one using a different database, and is able to do it in less than 10 minutes.*	\N	t
887	PerformanceOne	\N	A response measure of a performance scenario is	\N	t
583	BusinessToDesignTwo	\N	Architecturally significant requirements (ASR) are captured in a utility tree where each one of the ASRs are classified in terms of its architectural impact and business value.	\N	t
584	GraphiteTwo	\N	Consider the following fragment in the description of the Graphite system:  \n>"To avoid this kind of catastrophe, I added several features to carbon including configurable limits on how many data points can be queued and rate-limits on how quickly various whisper operations can be performed. These features can protect carbon from spiraling out of control and instead impose less harsh effects like dropping some data points or refusing to accept more data points. However, proper values for those settings are system-specific and require a fair amount of testing to tune. They are useful but they do not fundamentally solve the problem. For that, we'll need more hardware."  \nThe performance tactics referred in the above description are:	\N	t
585	NginxTwo	\N	In the description of the nginx case study we can read:  \n>"nginx is event-based, so it does not follow Apache's style of spawning new processes or threads for each web page request. The end result is that even as load increases, memory and CPU usage remain manageable. nginx can now deliver tens of thousands of concurrent connections on a server with typical hardware."  \nThe tactic nginx follows to achieve tens of thousands of concurrent connections is	\N	t
586	NginxTwo	\N	In the description of the nginx case study we can read:  \n>"nginx is event-based, so it does not follow Apache's style of spawning new processes or threads for each web page request. The end result is that even as load increases, memory and CPU usage remain manageable. nginx can now deliver tens of thousands of concurrent connections on a server with typical hardware."  \nThe tactic nginx follows to achieve tens of thousands of concurrent connections is	\N	t
587	ModifiabilityTwo	\N	Consider the following scenario: *A system administrator simultaneously launches several instances of the system, each one using a different database, and is able to do it in less than 10 minutes.*	\N	t
588	GraphiteTwo	\N	Consider the following fragment in the description of the Graphite system:  \n>"To avoid this kind of catastrophe, I added several features to carbon including configurable limits on how many data points can be queued and rate-limits on how quickly various whisper operations can be performed. These features can protect carbon from spiraling out of control and instead impose less harsh effects like dropping some data points or refusing to accept more data points. However, proper values for those settings are system-specific and require a fair amount of testing to tune. They are useful but they do not fundamentally solve the problem. For that, we'll need more hardware."  \nThe performance tactics referred in the above description are:	\N	t
589	BusinessToDesignTwo	\N	Architecturally significant requirements (ASR) are captured in a utility tree where each one of the ASRs are classified in terms of its architectural impact and business value.	\N	t
590	PerformanceTwo	\N	The two basic contributors for the response time are the processing time and the blocking time. Which tactic for performance may reduce the blocking time	\N	t
591	PerformanceThree	\N	Jeff Atwood wrote an article in its blog about performance of software systems that is entitled, *Hardware is Cheap, Programmers are Expensive*. Which performance tactic(s) is he suggesting	\N	t
592	ModifiabilityThree	\N	Consider the modifiability quality and the cost of change.	\N	t
593	BusinessToDesignThree	\N	It was decided that the Fénix system should be based on open-source software.	\N	t
594	GraphiteThree	\N	Consider the following fragment in the description of the Graphite system:  \n>"Imagine that you have 60,000 metrics that you send to your Graphite server, and each of these metrics has one data point per minute. Remember that each metric has its own whisper file on the filesystem. This means carbon must do one write operation to 60,000 different files each minute. As long as carbon can write to one file each millisecond, it should be able to keep up. This isn't too far fetched, but let's say you have 600,000 metrics updating each minute, or your metrics are updating every second, or perhaps you simply cannot afford fast enough storage. Whatever the case, assume the rate of incoming data points exceeds the rate of write operations that your storage can keep up with. How should this situation be handled?"  \n	\N	t
595	NginxThree	\N	In the description of the nginx case study we can read:  \n>"nginx's modular architecture generally allows developers to extend the set of web server features without modifying the nginx core. nginx modules come in slightly different incarnations, namely core modules, event modules, phase handlers, protocols, variable handlers, filters, upstreams and load balancers. At this time, nginx doesn't support dynamically loaded modules; i.e., modules are compiled along with the core at build stage."  \nThe above sentence corresponds to	\N	t
596	BusinessToDesignThree	\N	It was decided that the Fénix system should be based on open-source software.	\N	t
597	GraphiteThree	\N	Consider the following fragment in the description of the Graphite system:  \n>"Imagine that you have 60,000 metrics that you send to your Graphite server, and each of these metrics has one data point per minute. Remember that each metric has its own whisper file on the filesystem. This means carbon must do one write operation to 60,000 different files each minute. As long as carbon can write to one file each millisecond, it should be able to keep up. This isn't too far fetched, but let's say you have 600,000 metrics updating each minute, or your metrics are updating every second, or perhaps you simply cannot afford fast enough storage. Whatever the case, assume the rate of incoming data points exceeds the rate of write operations that your storage can keep up with. How should this situation be handled?"  \n	\N	t
598	PerformanceThree	\N	Jeff Atwood wrote an article in its blog about performance of software systems that is entitled, *Hardware is Cheap, Programmers are Expensive*. Which performance tactic(s) is he suggesting	\N	t
599	NginxThree	\N	In the description of the nginx case study we can read:  \n>"nginx's modular architecture generally allows developers to extend the set of web server features without modifying the nginx core. nginx modules come in slightly different incarnations, namely core modules, event modules, phase handlers, protocols, variable handlers, filters, upstreams and load balancers. At this time, nginx doesn't support dynamically loaded modules; i.e., modules are compiled along with the core at build stage."  \nThe above sentence corresponds to	\N	t
600	ModifiabilityThree	\N	Consider the modifiability quality and the cost of change.	\N	t
601	ModuleViewtypeOne	\N	Consider the Decomposition architectural style of the Module viewtype	\N	t
888	ModifiabilityExamOne	\N	The layered architectural style applies the modifiability architectural tactic of	\N	t
602	ContinuousIntegrationOne	\N	In the Continuous Integration case study can be read  \n>"The space of architectures for continuous integration systems seems to be dominated by two extremes: master/slave architectures, in which a central server directs and controls remote builds; and reporting architectures, in which a central server aggregates build reports contributed by clients. All of the continuous integration systems of which we are aware have chosen some combination of features from these two architectures."  \nThe tactic that is referred in both architectures is	\N	t
603	InfinispanOne	\N	The Infinispan system can be used as a library, in which case it is embedded into a Java application, or as a server, in which case it is a remote data grid.	\N	t
604	ComponentAndConnectorOne	\N	Consider the Component-and-Connector viewtype	\N	t
605	CCStyleOne	\N	When describing their system people refer to a part of it as containing a database server. Applying the component-and-connector styles learned in the course we can say that this system uses	\N	t
606	CCStyleOne	\N	When describing their system people refer to a part of it as containing a database server. Applying the component-and-connector styles learned in the course we can say that this system uses	\N	t
607	ContinuousIntegrationOne	\N	In the Continuous Integration case study can be read  \n>"The space of architectures for continuous integration systems seems to be dominated by two extremes: master/slave architectures, in which a central server directs and controls remote builds; and reporting architectures, in which a central server aggregates build reports contributed by clients. All of the continuous integration systems of which we are aware have chosen some combination of features from these two architectures."  \nThe tactic that is referred in both architectures is	\N	t
608	ModuleViewtypeOne	\N	Consider the Decomposition architectural style of the Module viewtype	\N	t
609	InfinispanOne	\N	The Infinispan system can be used as a library, in which case it is embedded into a Java application, or as a server, in which case it is a remote data grid.	\N	t
610	ComponentAndConnectorOne	\N	Consider the Component-and-Connector viewtype	\N	t
611	ModuleViewtypeTwo	\N	Consider the Uses architectural style of the Module viewtype	\N	t
612	ContinuousIntegrationTwo	\N	In the Continuous Integration case study can be read  \n>"External resource coordination: Integration tests may depend on non-local resources such as a staging database or a remote web service. The CI system may therefore need to coordinate builds between multiple machines to organize access to these resources."  \nThe referred tactic is	\N	t
613	InfinispanTwo	\N	In the Infinispan case study can be read  \n>"This allows applications to theoretically address an unlimited amount of in-memory storage as nodes are added to the cluster, increasing overall capacity."  \nThe quality that is referred is	\N	t
614	ComponentAndConnectorTwo	\N	Consider the Component-and-Connector viewtype	\N	t
615	CCStyleTwo	\N	Consider the peer-to-peer architectural style	\N	t
616	ComponentAndConnectorTwo	\N	Consider the Component-and-Connector viewtype	\N	t
617	CCStyleTwo	\N	Consider the peer-to-peer architectural style	\N	t
618	ModuleViewtypeTwo	\N	Consider the Uses architectural style of the Module viewtype	\N	t
619	ContinuousIntegrationTwo	\N	In the Continuous Integration case study can be read  \n>"External resource coordination: Integration tests may depend on non-local resources such as a staging database or a remote web service. The CI system may therefore need to coordinate builds between multiple machines to organize access to these resources."  \nThe referred tactic is	\N	t
620	InfinispanTwo	\N	In the Infinispan case study can be read  \n>"This allows applications to theoretically address an unlimited amount of in-memory storage as nodes are added to the cluster, increasing overall capacity."  \nThe quality that is referred is	\N	t
621	ModuleViewtypeThree	\N	Consider the Layered architectural style of the Module viewtype	\N	t
622	ContinuousIntegrationThree	\N	In the Continuous Integration case study can be read  \n>"It takes advantage of the JUnit XML standard for unit test and code coverage reporting to integrate reports from a variety of test tools."  \nThe referred quality is	\N	t
623	InfinispanThree	\N	In the Infinispan case study can be read  \n>"Before putting data on the network, application objects need to be serialized into bytes so that they can be pushed across a network, into the grid, and then again between peers. The bytes then need to be de-serialized back into application objects, when read by the application. In most common configurations, about 20% of the time spent in processing a request is spent in serialization and de-serialization."  \nThe above description can motivate a scenario for	\N	t
624	ComponentAndConnectorThree	\N	Consider the two following views ![image][image]	\N	t
625	CCStyleThree	\N	Consider the shared-data style. Which of the following qualities does it support?	\N	t
626	ComponentAndConnectorThree	\N	Consider the two following views ![image][image]	\N	t
627	InfinispanThree	\N	In the Infinispan case study can be read  \n>"Before putting data on the network, application objects need to be serialized into bytes so that they can be pushed across a network, into the grid, and then again between peers. The bytes then need to be de-serialized back into application objects, when read by the application. In most common configurations, about 20% of the time spent in processing a request is spent in serialization and de-serialization."  \nThe above description can motivate a scenario for	\N	t
628	CCStyleThree	\N	Consider the shared-data style. Which of the following qualities does it support?	\N	t
629	ContinuousIntegrationThree	\N	In the Continuous Integration case study can be read  \n>"It takes advantage of the JUnit XML standard for unit test and code coverage reporting to integrate reports from a variety of test tools."  \nThe referred quality is	\N	t
630	ModuleViewtypeThree	\N	Consider the Layered architectural style of the Module viewtype	\N	t
631	ComponentAndConnectorOne	\N	Consider the Service-Oriented Architecture architectural style	\N	t
632	AllocationOne	\N	Consider the work assignment architectural style of the allocation viewtype.	\N	t
633	InfinispanOne	\N	Consider the Infinispan system when it is configured as a remote data grid. The relation between the Applications and the Grid is	\N	t
634	MicroAndAmazonOne	\N	Consider the following distinction between Monoliths and Microservices made by Matin Fowler ![image][image] If we try to map this figure into a set of views we will need.	\N	t
635	JenkinsOne	\N	Consider the following representation of the Buildbot system. ![image][image] The architecture style between the Buildbot Master and the Clients is:	\N	t
636	MicroAndAmazonOne	\N	Consider the following distinction between Monoliths and Microservices made by Matin Fowler ![image][image] If we try to map this figure into a set of views we will need.	\N	t
637	AllocationOne	\N	Consider the work assignment architectural style of the allocation viewtype.	\N	t
638	InfinispanOne	\N	Consider the Infinispan system when it is configured as a remote data grid. The relation between the Applications and the Grid is	\N	t
639	JenkinsOne	\N	Consider the following representation of the Buildbot system. ![image][image] The architecture style between the Buildbot Master and the Clients is:	\N	t
640	ComponentAndConnectorOne	\N	Consider the Service-Oriented Architecture architectural style	\N	t
641	ComponentAndConnectorThree	\N	Consider the following view of the Adventure Builder system ![image][image] In this view the following architectural styles are used	\N	t
642	InfinispanTwo	\N	In the description of Infinispan system can be read  \n>"Infinispan supports several pluggable cache stores-adapters that can be used to persist data to disk or any form of secondary storage. The current default implementation is a simplistic hash bucket and linked list implementation, where each hash bucket is represented by a file on the filesystem. While easy to use and configure, this isn't the best-performing implementation."  \nThe architectural style(s) that should be used to illustrate the sentence is (are)	\N	t
643	AllocationTwo	\N	Consider the deployment architectural style of the allocation viewtype.	\N	t
644	MicroAndAmazonTwo	\N	Consider the following representation of Amazon's architecture (sorry for the figure's layout: **save trees**) ![image][image] What is the most relevant architecture style that is used in this figure?	\N	t
645	JenkinsTwo	\N	In the Continuous Integration case can be read  \n>"Build notification: The outcomes of builds generally need to be communicated to interested clients, either via pull (Web, RSS, RPC, etc.) or push notification (e-mail, Twitter, etc.) This can include notification of all builds, or only failed builds, or builds that haven't been executed within a certain period."  \nThe architectural style used in push notifications is	\N	t
646	InfinispanTwo	\N	In the description of Infinispan system can be read  \n>"Infinispan supports several pluggable cache stores-adapters that can be used to persist data to disk or any form of secondary storage. The current default implementation is a simplistic hash bucket and linked list implementation, where each hash bucket is represented by a file on the filesystem. While easy to use and configure, this isn't the best-performing implementation."  \nThe architectural style(s) that should be used to illustrate the sentence is (are)	\N	t
647	ComponentAndConnectorThree	\N	Consider the following view of the Adventure Builder system ![image][image] In this view the following architectural styles are used	\N	t
648	AllocationTwo	\N	Consider the deployment architectural style of the allocation viewtype.	\N	t
649	JenkinsTwo	\N	In the Continuous Integration case can be read  \n>"Build notification: The outcomes of builds generally need to be communicated to interested clients, either via pull (Web, RSS, RPC, etc.) or push notification (e-mail, Twitter, etc.) This can include notification of all builds, or only failed builds, or builds that haven't been executed within a certain period."  \nThe architectural style used in push notifications is	\N	t
650	MicroAndAmazonTwo	\N	Consider the following representation of Amazon's architecture (sorry for the figure's layout: **save trees**) ![image][image] What is the most relevant architecture style that is used in this figure?	\N	t
651	ComponentAndConnectorTwo	\N	Consider the following view of the Adventure Builder system ![image][image] In this view the following architectural styles are used	\N	t
652	AllocationThree	\N	Consider the install architectural style of the allocation viewtype.	\N	t
653	InfinispanThree	\N	In the description of Infinispan system can be read  \n>"When dealing with thread pools to process such asynchronous tasks, there is always a context switching overhead. That threads are not cheap resources is also noteworthy. Allocating appropriately sized and configured thread pools is important to any installation making use of any of the asynchronous features of Infinispan."  \nThe architectural style that should be used to illustrate the sentence is	\N	t
654	MicroAndAmazonThree	\N	In the interview Werner Vogels from Amazon gives to Jim Gray, Werner Vogels says that  \n>"The stored data formats are decoupled from the format in which you communicate data items. If there is no need for sharing schemas of the actual storage layout, you can focus on making sure that the service interfaces can evolve in a way that allows you to handle variations of data formats."  \nWhich means that in the software architecture of Amazon's systems	\N	t
655	JenkinsThree	\N	Consider the following representation of the CDash system ![image][image] The architecture style between the Dashboard and the Clients is:	\N	t
656	MicroAndAmazonThree	\N	In the interview Werner Vogels from Amazon gives to Jim Gray, Werner Vogels says that  \n>"The stored data formats are decoupled from the format in which you communicate data items. If there is no need for sharing schemas of the actual storage layout, you can focus on making sure that the service interfaces can evolve in a way that allows you to handle variations of data formats."  \nWhich means that in the software architecture of Amazon's systems	\N	t
981	AvailabilityVotingSecond	\N	The availability quality can be supported by a voting tactic in order to identify faults of	\N	t
657	JenkinsThree	\N	Consider the following representation of the CDash system ![image][image] The architecture style between the Dashboard and the Clients is:	\N	t
658	ComponentAndConnectorTwo	\N	Consider the following view of the Adventure Builder system ![image][image] In this view the following architectural styles are used	\N	t
659	AllocationThree	\N	Consider the install architectural style of the allocation viewtype.	\N	t
660	InfinispanThree	\N	In the description of Infinispan system can be read  \n>"When dealing with thread pools to process such asynchronous tasks, there is always a context switching overhead. That threads are not cheap resources is also noteworthy. Allocating appropriately sized and configured thread pools is important to any installation making use of any of the asynchronous features of Infinispan."  \nThe architectural style that should be used to illustrate the sentence is	\N	t
661	SoftwareArchitectureOne	\N	Consider that a software development team uses an agile methodology such as XP (Extreme Programming), where no documentation is produced. Then, the systems developed by that team	\N	t
662	RequirementsImpact	\N	The requirements impact on how an architecture is designed	\N	t
663	AvailabilityScenarioOne	\N	Consider the following scenario  \n>"If one of the application servers fails to respond when the system is in its normal operation state, the load balancer should redirect requests to another application server."  \n	\N	t
664	AvailabilityVotingEN	\N	The availability quality can be supported by a voting tactic in order to identify faults of	\N	t
665	MWResourceLoaderTacticEEEN	\N	Consider the following fragment of the *MediaWiki* system description:  \n*To optimize the delivery of JavaScript and CSS assets, the ResourceLoader module was developed to optimize delivery of JS and CSS. Started in 2009, it was completed in 2011 and has been a core feature of MediaWiki since version 1.17. ResourceLoader works by loading JS and CSS assets on demand, thus reducing loading and parsing time when features are unused, for example by older browsers. It also minifies the code, groups resources to save requests, and can embed images as data URIs*  \nThe *ResourceLoader* supports a quality	\N	t
666	PerfomanceTacticOne	\N	In which performance tactic it may occur that not all the inputs are processed	\N	t
667	ScalabilityINGLES	\N	Several of the cases studied in this course had scalability requirements. That means that those systems should be designed in such a way that they	\N	t
668	LayersTactics	\N	The main tactic associated with the layered architectural style is:	\N	t
669	HadoopDisponibilidadeDadosINGLES	\N	One of the key requirements for the HDFS system is that the data stored in the system remains available, even in the presence of various types of failures (non simultaneous) in the hardware in which the system executes. To show that the system satisfies this requirement	\N	t
670	HadoopTacticasRecuperacaoFaltasINGLES	\N	In the HDFS system the fault recovery tactics are:	\N	t
671	SecondEEEN	\N	The documentation of the software architecture for a system is often composed of several views, because	\N	t
672	ModuleViewType	\N	The quality that is more relevant to views of the module viewtype is:	\N	t
673	MemcachedModulesINGLES	\N	Consider the following description of *Memcached*, which is adapted from its Wiki:  \n>"Memcached is an in-memory key-value store for small chunks of arbitrary data from results of database calls, API calls, or page rendering. It is made up of:  \n-  Client software, which is given a list of available memcached servers.  \n-  A client-based hashing algorithm, which chooses a server based on the "key" input.  \n-  Server software, which stores your values with their keys into an internal hash table.  \n-  Server algorithms, which determine when to throw out old data (if out of memory), or reuse memory.  \n"  \nSuppose that you want to present an architectural view for *Memcached* that represents the above information. Which view is more adequate?	\N	t
674	AspectsINGLES	\N	Using the Aspects architectural style promotes the modifiability of a system because	\N	t
675	LayeredAspectsDataModelTwo	\N	Suppose that you are implementing a module in a system that has a two layered architecture. Knowing that your module belongs to the upper layer (assuming the usual notation for the layer style), this means that you	\N	t
676	AdventureBuilderThree	\N	Consider the following architectural view of the Adventure Builder system, designed around the Order Processing Center ![image][image] The views **does not** use the architectural style	\N	t
677	AdventureBuilderFive	\N	Consider the following requirement for availability of the Adventure Builder system  \n>"The Consumer Web site sent a purchase order request to the order processing center (OPC). The OPC processed that request but didn't reply to Consumer Web site within five seconds, so the Consumer Web site resends the request to the OPC."  \nIf we represent this requirement as a scenario	\N	t
678	DVDCatalogMeta	\N	Consider the module viewtype views of the DVD Catalog application. The architect knows about a new requirement  \n>"The application should support other kinds of catalogs (CDs, games, books, ...)."  \nThis requirement requires a change of	\N	t
679	AvailabilityINGLES	\N	Suppose that, to satisfy an availability requirement related with the occurrence of faults at the network infrastructure used by your system, you want to use the tactic named *Ping/Echo*. How does the use of that tactic manifests in the architectural views of your system?	\N	t
680	PeerToPeerDynamicReconfiguration	\N	In the description of the Gnutella system can be read:  \n>"The topology of the system changes at runtime as peer components connect and disconnect to the network."  \n	\N	t
681	PipeFilterComposition	\N	The Pipe-and-Filter style allows composition of filters	\N	t
682	SOAINGLES	\N	In the Service Oriented Architecture style it is common to have a specialized component, named *Enterprise Service Bus* (ESB). The goal of using of an ESB in a system is	\N	t
793	TwitterScaleTwo	\N	In the description of the Twitter system we can read:  \n>"On the search timeline: Write. when a tweet comes in and hits the Ingester only one Early Bird machine is hit. Write time path is O(1). A single tweet is ingested in under 5 seconds between the queuing and processing to find the one Early Bird to write it to."  \n	\N	t
683	WhiteBoxTestingINGLES	\N	Consider the following excerpt from the Wikipedia page on *white-box testing*:  \n>"White-box testing is a method of testing software that tests internal structures or workings of an application, as opposed to its functionality. In white-box testing an internal perspective of the system (including the module's code), as well as programming skills, are required and used to design test cases. The tester chooses inputs to exercise paths through the code and determine the appropriate outputs."  \nAssuming that you belong to the team testing a complex system and that you are responsible for performing white box tests on the system, which of the following architectural views of the system would be most useful to you?	\N	t
684	ArqChrome	\N	The Chromium is a web browser that introduced an innovative architecture. In the Chromium description we can read:  \n>"We use separate processes for browser tabs to protect the overall application from bugs and glitches in the rendering engine. We also restrict access from each rendering engine process to others and to the rest of the system. In some ways, this brings to web browsing the benefits that memory protection and access control brought to operating systems. We refer to the main process that runs the UI and manages tab and plugin processes as the "browser process" or "browser." Likewise, the tab-specific processes are called "render processes" or "renderers." The renderers use the WebKit open-source layout engine for interpreting and laying out HTML."  \nWhich architectural style should we use to represent this aspect of Chromium?	\N	t
685	TwitterOne	\N	Consider the following description of the behavior of Twitter ingestion mechanisms  \n>"Write. when a tweet comes in there's an O(n) process to write to Redis clusters, where n is the number of people following you. Painful for Lady Gaga and Barack Obama where they are doing 10s of millions of inserts across the cluster. All the Redis clusters are backing disk, the Flock cluster stores the user timeline to disk, but usually timelines are found in RAM in the Redis cluster."  \n	\N	t
686	TwitterThree	\N	Consider the following description of the behavior of Twitter  \n>"Solution is a write based fanout approach. Do a lot of processing when tweets arrive to figure out where tweets should go. This makes read time access fast and easy. Don't do any computation on reads. With all the work being performed on the write path ingest rates are slower than the read path, on the order of 4000 QPS."  \nTo describe the performance quality of this behavior, and considering that the number of reads is much higher than the number of writes, we need to have a view that includes	\N	t
687	MicroservicesOne	\N	Consider the Microservice architectural style. Which of the following sentences **does not** describe an advantage of microservices?	\N	t
688	MicroAndAmazonThree	\N	In the interview Werner Vogels from Amazon gives to Jim Gray, Werner Vogels says that  \n>"The stored data formats are decoupled from the format in which you communicate data items. If there is no need for sharing schemas of the actual storage layout, you can focus on making sure that the service interfaces can evolve in a way that allows you to handle variations of data formats."  \nWhich means that in the software architecture of Amazon's systems	\N	t
689	BoundedContextOne	\N	Consider the following representation of a system following a microservices architecture, ![image][image] After an invocation through the REST API	\N	t
690	DomainDesignOne	\N	Consider the following figure ![image][image]	\N	t
691	AvailabilityINGLES	\N	Suppose that, to satisfy an availability requirement related with the occurrence of faults at the network infrastructure used by your system, you want to use the tactic named *Ping/Echo*. How does the use of that tactic manifests in the architectural views of your system?	\N	t
692	PeerToPeerDynamicReconfiguration	\N	In the description of the Gnutella system can be read:  \n>"The topology of the system changes at runtime as peer components connect and disconnect to the network."  \n	\N	t
693	PipeFilterComposition	\N	The Pipe-and-Filter style allows composition of filters	\N	t
694	SOAINGLES	\N	In the Service Oriented Architecture style it is common to have a specialized component, named *Enterprise Service Bus* (ESB). The goal of using of an ESB in a system is	\N	t
695	WhiteBoxTestingINGLES	\N	Consider the following excerpt from the Wikipedia page on *white-box testing*:  \n>"White-box testing is a method of testing software that tests internal structures or workings of an application, as opposed to its functionality. In white-box testing an internal perspective of the system (including the module's code), as well as programming skills, are required and used to design test cases. The tester chooses inputs to exercise paths through the code and determine the appropriate outputs."  \nAssuming that you belong to the team testing a complex system and that you are responsible for performing white box tests on the system, which of the following architectural views of the system would be most useful to you?	\N	t
696	ArqChrome	\N	The Chromium is a web browser that introduced an innovative architecture. In the Chromium description we can read:  \n>"We use separate processes for browser tabs to protect the overall application from bugs and glitches in the rendering engine. We also restrict access from each rendering engine process to others and to the rest of the system. In some ways, this brings to web browsing the benefits that memory protection and access control brought to operating systems. We refer to the main process that runs the UI and manages tab and plugin processes as the "browser process" or "browser." Likewise, the tab-specific processes are called "render processes" or "renderers." The renderers use the WebKit open-source layout engine for interpreting and laying out HTML."  \nWhich architectural style should we use to represent this aspect of Chromium?	\N	t
697	SoftwareArchitectureOne	\N	Consider that a software development team uses an agile methodology such as XP (Extreme Programming), where no documentation is produced. Then, the systems developed by that team	\N	t
698	RequirementsImpact	\N	The requirements impact on how an architecture is designed	\N	t
699	AvailabilityScenarioOne	\N	Consider the following scenario  \n>"If one of the application servers fails to respond when the system is in its normal operation state, the load balancer should redirect requests to another application server."  \n	\N	t
700	AvailabilityVotingEN	\N	The availability quality can be supported by a voting tactic in order to identify faults of	\N	t
701	MWResourceLoaderTacticEEEN	\N	Consider the following fragment of the *MediaWiki* system description:  \n*To optimize the delivery of JavaScript and CSS assets, the ResourceLoader module was developed to optimize delivery of JS and CSS. Started in 2009, it was completed in 2011 and has been a core feature of MediaWiki since version 1.17. ResourceLoader works by loading JS and CSS assets on demand, thus reducing loading and parsing time when features are unused, for example by older browsers. It also minifies the code, groups resources to save requests, and can embed images as data URIs*  \nThe *ResourceLoader* supports a quality	\N	t
702	PerfomanceTacticOne	\N	In which performance tactic it may occur that not all the inputs are processed	\N	t
703	ScalabilityINGLES	\N	Several of the cases studied in this course had scalability requirements. That means that those systems should be designed in such a way that they	\N	t
704	LayersTactics	\N	The main tactic associated with the layered architectural style is:	\N	t
705	AdventureBuilderThree	\N	Consider the following architectural view of the Adventure Builder system, designed around the Order Processing Center ![image][image] The views **does not** use the architectural style	\N	t
706	AdventureBuilderFive	\N	Consider the following requirement for availability of the Adventure Builder system  \n>"The Consumer Web site sent a purchase order request to the order processing center (OPC). The OPC processed that request but didn't reply to Consumer Web site within five seconds, so the Consumer Web site resends the request to the OPC."  \nIf we represent this requirement as a scenario	\N	t
707	DVDCatalogMeta	\N	Consider the module viewtype views of the DVD Catalog application. The architect knows about a new requirement  \n>"The application should support other kinds of catalogs (CDs, games, books, ...)."  \nThis requirement requires a change of	\N	t
708	TwitterOne	\N	Consider the following description of the behavior of Twitter ingestion mechanisms  \n>"Write. when a tweet comes in there's an O(n) process to write to Redis clusters, where n is the number of people following you. Painful for Lady Gaga and Barack Obama where they are doing 10s of millions of inserts across the cluster. All the Redis clusters are backing disk, the Flock cluster stores the user timeline to disk, but usually timelines are found in RAM in the Redis cluster."  \n	\N	t
709	TwitterThree	\N	Consider the following description of the behavior of Twitter  \n>"Solution is a write based fanout approach. Do a lot of processing when tweets arrive to figure out where tweets should go. This makes read time access fast and easy. Don't do any computation on reads. With all the work being performed on the write path ingest rates are slower than the read path, on the order of 4000 QPS."  \nTo describe the performance quality of this behavior, and considering that the number of reads is much higher than the number of writes, we need to have a view that includes	\N	t
710	MicroservicesOne	\N	Consider the Microservice architectural style. Which of the following sentences **does not** describe an advantage of microservices?	\N	t
711	MicroAndAmazonThree	\N	In the interview Werner Vogels from Amazon gives to Jim Gray, Werner Vogels says that  \n>"The stored data formats are decoupled from the format in which you communicate data items. If there is no need for sharing schemas of the actual storage layout, you can focus on making sure that the service interfaces can evolve in a way that allows you to handle variations of data formats."  \nWhich means that in the software architecture of Amazon's systems	\N	t
712	BoundedContextOne	\N	Consider the following representation of a system following a microservices architecture, ![image][image] After an invocation through the REST API	\N	t
713	DomainDesignOne	\N	Consider the following figure ![image][image]	\N	t
714	HadoopDisponibilidadeDadosINGLES	\N	One of the key requirements for the HDFS system is that the data stored in the system remains available, even in the presence of various types of failures (non simultaneous) in the hardware in which the system executes. To show that the system satisfies this requirement	\N	t
715	HadoopTacticasRecuperacaoFaltasINGLES	\N	In the HDFS system the fault recovery tactics are:	\N	t
716	SecondEEEN	\N	The documentation of the software architecture for a system is often composed of several views, because	\N	t
717	ModuleViewType	\N	The quality that is more relevant to views of the module viewtype is:	\N	t
718	MemcachedModulesINGLES	\N	Consider the following description of *Memcached*, which is adapted from its Wiki:  \n>"Memcached is an in-memory key-value store for small chunks of arbitrary data from results of database calls, API calls, or page rendering. It is made up of:  \n-  Client software, which is given a list of available memcached servers.  \n-  A client-based hashing algorithm, which chooses a server based on the "key" input.  \n-  Server software, which stores your values with their keys into an internal hash table.  \n-  Server algorithms, which determine when to throw out old data (if out of memory), or reuse memory.  \n"  \nSuppose that you want to present an architectural view for *Memcached* that represents the above information. Which view is more adequate?	\N	t
719	AspectsINGLES	\N	Using the Aspects architectural style promotes the modifiability of a system because	\N	t
720	LayeredAspectsDataModelTwo	\N	Suppose that you are implementing a module in a system that has a two layered architecture. Knowing that your module belongs to the upper layer (assuming the usual notation for the layer style), this means that you	\N	t
721	SoftwareArchitectureTwo	\N	The software architecture of a system	\N	t
722	ConcreteScenarios	\N	As part of the process of creating an architecture, we talked about a framework for capturing some of the requirements for a system. In this context, **concrete scenarios** are used for	\N	t
723	AvailabilityScenarioTwo	\N	Consider the following availability scenario  \n>"If one of the application servers fails to respond to a request when the system is in its normal operation state, the system should notify the operator and continue to operate normally."  \n	\N	t
724	AvailabilityINGLES	\N	Suppose that, to satisfy an availability requirement related with the occurrence of faults at the network infrastructure used by your system, you want to use the tactic named *Ping/Echo*. How does the use of that tactic manifests in the architectural views of your system?	\N	t
725	InfinispanThree	\N	Consider the following description of the *Infinispan* system:  \n>"Before putting data on the network, application objects need to be serialized into bytes so that they can be pushed across a network, into the grid, and then again between peers. The bytes then need to be de-serialized back into application objects, when read by the application. In most common configurations, about 20% of the time spent in processing a request is spent in serialization and de-serialization."  \nThe above description can motivate a scenario for	\N	t
726	PerfomanceTacticTwo	\N	In which performance tactic it can occur that the inputs are not completely processed, even though they always start being processed	\N	t
727	ModifiabilityScenario	\N	Consider the following modifiability scenario  \n>"The effort necessary to successfully port the system to execute in a new browser should not be higher than 5 person/month."  \n	\N	t
728	AspectsTactics	\N	The main tactic associated with the aspects architectural style is:	\N	t
729	HadoopStakeholdersEurosINGLES	\N	In the HDFS system, in the stakeholders perspective, the use of low cost servers to build the clusters is:	\N	t
730	HadoopHeartbeatINGLES	\N	In HDFS, during normal operation DataNodes use the heartbeat tactic	\N	t
731	ArchitecturalViews	\N	A software system is usually described using different architectural views	\N	t
732	FunctionalModule	\N	When designing an architecture requirements can be split into functional, quality attributes, and constraints. Functional requirements have impact on:	\N	t
733	SubcontractorsINGLES	\N	Suppose that you are developing a software architecture for a new large scale system and that you intend to resort extensively to third party subcontractors for the development of various parts of the system. Which architectural styles are most useful to plan the development of the system in this case?	\N	t
734	UsesStyle	\N	To achieve a faster time-to-market, software companies are increasingly using a strategy of incremental releases of their software, where each new release has a set of new features. Which architectural style is better to analyse whether the system's software architecture is adequate for the planned incremental releases?	\N	t
735	nginxModuleTypesINGLES	\N	According to the document that describes nginx:  \n>"nginx's modular architecture generally allows developers to extend the set of web server features without modifying the nginx core. nginx modules come in slightly different incarnations, namely core modules, event modules, phase handlers, protocols, variable handlers, filters, upstreams and load balancers. [...] Event modules provide a particular OS-dependent event notification mechanism like kqueue or epoll. Protocol modules allow nginx to communicate through HTTPS, TLS/SSL, SMTP, POP3 and IMAP."  \nWhich architectural style is more adequate to represent the information presented above?	\N	t
736	AdventureBuilderFour	\N	Consider the following architectural view of the Adventure Builder system, designed around the Order Processing Center ![image][image] The views **does not** allow the reason about the quality of	\N	t
737	AdventureBuilderSix	\N	Consider the following requirement for availability of the Adventure Builder system  \n>"The Consumer Web site is available to the user 24x7. If an instance of OPC application fails, the fault is detected and the system administrator is notified in 30 seconds; the system continues taking order requests; another OPC instance is automatically created; and data remains in consistent state."  \nIn order to support this quality it is necessary to	\N	t
738	DVDCatalogMobile	\N	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement  \n>"To support iPhone/iPad/Android version with sync, which allows offline use of the application in the mobile device and data synchronization to occur when a connection is available"  \nThis requirement requires a change of	\N	t
739	TiposVistaDesempenhoINGLES	\N	To analyse the performance of a system	\N	t
740	PeerToPeerSpace	\N	The Peer-to-Peer architectural style provides high scalability and availability. In the context of a file sharing system	\N	t
741	TresTiersINGLES	\N	Currently, the most popular architecture for an enterprise application is composed of 3 tiers. The three tiers are	\N	t
742	ChromeMultiPlatform	\N	The Chromium is a web browser that introduced an innovative architecture. In the Chromium description we can read:  \n>"Chromium is a large and complex cross-platform product. We try to share as much code as possible between platforms, while implementing the UI and OS integration in the most appropriate way for each. While this gives a better user experience, it adds extra complexity to the code. This document describes the recommended practices for keeping such cross-platform code clean. We use a variety of different file naming suffixes to indicate when a file should be used:  \n-  Windows files use the `_win` suffix.  \n-  Cocoa (Mac UI) files use the `_cocoa` suffix, and lower-level Mac files use the `_mac` suffix.  \n-  Linux files use `_linux` for lower-level files, `_gtk` for GTK-specific files, and `_x` for X Windows (with no GTK) specific files.  \n-  Posix files shared between Mac and Linux use the `_posix` suffix.  \n-  Files for Chrome's ''Views'' UI (on Windows and experimental GTK) layout system use the `_views` suffix.  \nThe separate front-ends of the browser are contained in their own directories:  \n-  Windows Views (and the experimental GTK-views):`chrome/browser/ui/views`  \n-  Linux GTK: `chrome/browser/gtk`  \n-  Mac: `chrome/browser/cocoa`  \n"  \nWhich architectural style should we use to represent this aspect of Chromium?	\N	t
743	SOAInteroperability	\N	The Service-Oriented Architecture style improves interoperability because	\N	t
744	InstallView	\N	Consider a system that will require a significative configuration effort during deployment, because it provides several variations of the same functionalities and it is necessary to choose which functionalities better fit in each case. The most helpful architectural view for this situation is	\N	t
745	TwitterTwo	\N	Consider the following description of the behavior of Twitter  \n>"Solution is a write based fanout approach. Do a lot of processing when tweets arrive to figure out where tweets should go. This makes read time access fast and easy. Don't do any computation on reads. With all the work being performed on the write path ingest rates are slower than the read path, on the order of 4000 QPS."  \nTo describe this behavior we need to	\N	t
746	TwitterFour	\N	Consider the following description of the behavior of Twitter ingestion mechanisms  \n>"Write. when a tweet comes in there's an O(n) process to write to Redis clusters, where n is the number of people following you. Painful for Lady Gaga and Barack Obama where they are doing 10s of millions of inserts across the cluster. All the Redis clusters are backing disk, the Flock cluster stores the user timeline to disk, but usually timelines are found in RAM in the Redis cluster."  \nThe view that represents this behavior should be of the	\N	t
747	MicroservicesTwo	\N	Consider the following definition of Microservice architectural style by Martin Fowler  \n>"The microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies."  \nTo represent an architecture based on Microservices	\N	t
748	WorldWideEN	\N	In world-wide systems like Facebook or Amazon,	\N	t
749	BoundedContextTwo	\N	Consider the following representation of a system following a microservices architecture, ![image][image]	\N	t
750	DomainDesignTwo	\N	Consider the following data model ![image][image]	\N	t
751	ModifiabilityScenario	\N	Consider the following modifiability scenario  \n>"The effort necessary to successfully port the system to execute in a new browser should not be higher than 5 person/month."  \n	\N	t
752	AspectsTactics	\N	The main tactic associated with the aspects architectural style is:	\N	t
753	HadoopStakeholdersEurosINGLES	\N	In the HDFS system, in the stakeholders perspective, the use of low cost servers to build the clusters is:	\N	t
754	HadoopHeartbeatINGLES	\N	In HDFS, during normal operation DataNodes use the heartbeat tactic	\N	t
755	SoftwareArchitectureTwo	\N	The software architecture of a system	\N	t
756	ConcreteScenarios	\N	As part of the process of creating an architecture, we talked about a framework for capturing some of the requirements for a system. In this context, **concrete scenarios** are used for	\N	t
757	AvailabilityScenarioTwo	\N	Consider the following availability scenario  \n>"If one of the application servers fails to respond to a request when the system is in its normal operation state, the system should notify the operator and continue to operate normally."  \n	\N	t
758	AvailabilityINGLES	\N	Suppose that, to satisfy an availability requirement related with the occurrence of faults at the network infrastructure used by your system, you want to use the tactic named *Ping/Echo*. How does the use of that tactic manifests in the architectural views of your system?	\N	t
759	InfinispanThree	\N	Consider the following description of the *Infinispan* system:  \n>"Before putting data on the network, application objects need to be serialized into bytes so that they can be pushed across a network, into the grid, and then again between peers. The bytes then need to be de-serialized back into application objects, when read by the application. In most common configurations, about 20% of the time spent in processing a request is spent in serialization and de-serialization."  \nThe above description can motivate a scenario for	\N	t
760	PerfomanceTacticTwo	\N	In which performance tactic it can occur that the inputs are not completely processed, even though they always start being processed	\N	t
761	TresTiersINGLES	\N	Currently, the most popular architecture for an enterprise application is composed of 3 tiers. The three tiers are	\N	t
762	SOAInteroperability	\N	The Service-Oriented Architecture style improves interoperability because	\N	t
763	InstallView	\N	Consider a system that will require a significative configuration effort during deployment, because it provides several variations of the same functionalities and it is necessary to choose which functionalities better fit in each case. The most helpful architectural view for this situation is	\N	t
764	TwitterTwo	\N	Consider the following description of the behavior of Twitter  \n>"Solution is a write based fanout approach. Do a lot of processing when tweets arrive to figure out where tweets should go. This makes read time access fast and easy. Don't do any computation on reads. With all the work being performed on the write path ingest rates are slower than the read path, on the order of 4000 QPS."  \nTo describe this behavior we need to	\N	t
765	TwitterFour	\N	Consider the following description of the behavior of Twitter ingestion mechanisms  \n>"Write. when a tweet comes in there's an O(n) process to write to Redis clusters, where n is the number of people following you. Painful for Lady Gaga and Barack Obama where they are doing 10s of millions of inserts across the cluster. All the Redis clusters are backing disk, the Flock cluster stores the user timeline to disk, but usually timelines are found in RAM in the Redis cluster."  \nThe view that represents this behavior should be of the	\N	t
766	ArchitecturalViews	\N	A software system is usually described using different architectural views	\N	t
767	FunctionalModule	\N	When designing an architecture requirements can be split into functional, quality attributes, and constraints. Functional requirements have impact on:	\N	t
768	SubcontractorsINGLES	\N	Suppose that you are developing a software architecture for a new large scale system and that you intend to resort extensively to third party subcontractors for the development of various parts of the system. Which architectural styles are most useful to plan the development of the system in this case?	\N	t
769	UsesStyle	\N	To achieve a faster time-to-market, software companies are increasingly using a strategy of incremental releases of their software, where each new release has a set of new features. Which architectural style is better to analyse whether the system's software architecture is adequate for the planned incremental releases?	\N	t
794	Queues	\N	Consider the following figure that presents a Queue where client applications write their requests to be served by a server. ![image][image]	\N	t
795	HadoopCreateFile	\N	In the description of Hadoop we can red.  \n>"The CheckpointNode periodically combines the existing checkpoint and journal to create a new checkpoint and an empty journal. The CheckpointNode usually runs on a different host from the NameNode since it has the same memory requirements as the NameNode."  \n	\N	t
770	nginxModuleTypesINGLES	\N	According to the document that describes nginx:  \n>"nginx's modular architecture generally allows developers to extend the set of web server features without modifying the nginx core. nginx modules come in slightly different incarnations, namely core modules, event modules, phase handlers, protocols, variable handlers, filters, upstreams and load balancers. [...] Event modules provide a particular OS-dependent event notification mechanism like kqueue or epoll. Protocol modules allow nginx to communicate through HTTPS, TLS/SSL, SMTP, POP3 and IMAP."  \nWhich architectural style is more adequate to represent the information presented above?	\N	t
771	AdventureBuilderFour	\N	Consider the following architectural view of the Adventure Builder system, designed around the Order Processing Center ![image][image] The views **does not** allow the reason about the quality of	\N	t
772	AdventureBuilderSix	\N	Consider the following requirement for availability of the Adventure Builder system  \n>"The Consumer Web site is available to the user 24x7. If an instance of OPC application fails, the fault is detected and the system administrator is notified in 30 seconds; the system continues taking order requests; another OPC instance is automatically created; and data remains in consistent state."  \nIn order to support this quality it is necessary to	\N	t
773	DVDCatalogMobile	\N	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement  \n>"To support iPhone/iPad/Android version with sync, which allows offline use of the application in the mobile device and data synchronization to occur when a connection is available"  \nThis requirement requires a change of	\N	t
774	TiposVistaDesempenhoINGLES	\N	To analyse the performance of a system	\N	t
775	PeerToPeerSpace	\N	The Peer-to-Peer architectural style provides high scalability and availability. In the context of a file sharing system	\N	t
776	MicroservicesTwo	\N	Consider the following definition of Microservice architectural style by Martin Fowler  \n>"The microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies."  \nTo represent an architecture based on Microservices	\N	t
777	WorldWideEN	\N	In world-wide systems like Facebook or Amazon,	\N	t
778	BoundedContextTwo	\N	Consider the following representation of a system following a microservices architecture, ![image][image]	\N	t
779	DomainDesignTwo	\N	Consider the following data model ![image][image]	\N	t
780	ChromeMultiPlatform	\N	The Chromium is a web browser that introduced an innovative architecture. In the Chromium description we can read:  \n>"Chromium is a large and complex cross-platform product. We try to share as much code as possible between platforms, while implementing the UI and OS integration in the most appropriate way for each. While this gives a better user experience, it adds extra complexity to the code. This document describes the recommended practices for keeping such cross-platform code clean. We use a variety of different file naming suffixes to indicate when a file should be used:  \n-  Windows files use the `_win` suffix.  \n-  Cocoa (Mac UI) files use the `_cocoa` suffix, and lower-level Mac files use the `_mac` suffix.  \n-  Linux files use `_linux` for lower-level files, `_gtk` for GTK-specific files, and `_x` for X Windows (with no GTK) specific files.  \n-  Posix files shared between Mac and Linux use the `_posix` suffix.  \n-  Files for Chrome's ''Views'' UI (on Windows and experimental GTK) layout system use the `_views` suffix.  \nThe separate front-ends of the browser are contained in their own directories:  \n-  Windows Views (and the experimental GTK-views):`chrome/browser/ui/views`  \n-  Linux GTK: `chrome/browser/gtk`  \n-  Mac: `chrome/browser/cocoa`  \n"  \nWhich architectural style should we use to represent this aspect of Chromium?	\N	t
781	SoftwareArchitecture	\N	The software architecture of a system	\N	t
782	TwitterScaleOne	\N	In the description of the Twitter system we can read:  \n>"Twitter is optimized to be highly available on the read path on the home timeline. Read path is in the 10s of milliseconds."  \nThis is achieved because:	\N	t
783	GeneralScenario	\N	A general scenario for a quality attribute	\N	t
784	ProxyServer	\N	Consider the following figure that presents a Proxy Server, which collapses requests from different users. ![image][image]	\N	t
785	HadoopCluster	\N	Consider the following figure that presents the Hadoop cluster topology. ![image][image]	\N	t
786	HadoopCluster	\N	Consider the following figure that presents the Hadoop cluster topology. ![image][image]	\N	t
787	SoftwareArchitecture	\N	The software architecture of a system	\N	t
788	GeneralScenario	\N	A general scenario for a quality attribute	\N	t
789	TwitterScaleOne	\N	In the description of the Twitter system we can read:  \n>"Twitter is optimized to be highly available on the read path on the home timeline. Read path is in the 10s of milliseconds."  \nThis is achieved because:	\N	t
790	ProxyServer	\N	Consider the following figure that presents a Proxy Server, which collapses requests from different users. ![image][image]	\N	t
791	ArchitecturalTactics	\N	An architectural tactic for a system describes	\N	t
792	EarlyDecisions	\N	In his article, *Who Needs and Architect?*, Martin Fowler cites Ralph Johnson definition:  \n>"Architecture is the set of decisions that must be made early in a project."  \nIn his opinion:	\N	t
852	CommunicationProcesses	\N	The Java web servers, like Tomcat, use threads to process requests. For each request they create (or reuse) a thread to process it. To draw a architectural view that describes this behaviour we should use	\N	t
796	HadoopCreateFile	\N	In the description of Hadoop we can red.  \n>"The CheckpointNode periodically combines the existing checkpoint and journal to create a new checkpoint and an empty journal. The CheckpointNode usually runs on a different host from the NameNode since it has the same memory requirements as the NameNode."  \n	\N	t
797	ArchitecturalTactics	\N	An architectural tactic for a system describes	\N	t
798	TwitterScaleTwo	\N	In the description of the Twitter system we can read:  \n>"On the search timeline: Write. when a tweet comes in and hits the Ingester only one Early Bird machine is hit. Write time path is O(1). A single tweet is ingested in under 5 seconds between the queuing and processing to find the one Early Bird to write it to."  \n	\N	t
799	EarlyDecisions	\N	In his article, *Who Needs and Architect?*, Martin Fowler cites Ralph Johnson definition:  \n>"Architecture is the set of decisions that must be made early in a project."  \nIn his opinion:	\N	t
800	Queues	\N	Consider the following figure that presents a Queue where client applications write their requests to be served by a server. ![image][image]	\N	t
801	OmissionRetry	\N	Considering the availability architectural quality, the tactic of retry	\N	t
802	Scalability	\N	Several of the cases studied in this course have scalability requirements. That means that those systems should be designed in such a way that they	\N	t
803	ModifiabilityOne	\N	In a modifiability scenario the environment can be characterized as design time, compile time, build time, initiation time, and runtime.	\N	t
804	GraphiteScenarioTacticsOne	\N	In the Graphite system the component *carbon* provides to *webapp* components an access interface to the *buffers* in order to improve the quality of	\N	t
805	HadoopCheckpoint	\N	In the HDFS system when the *CheckpointNode* and the *NameNode* are deployed in different nodes, the *CheckpointNode* provides:	\N	t
806	ModifiabilityOne	\N	In a modifiability scenario the environment can be characterized as design time, compile time, build time, initiation time, and runtime.	\N	t
807	GraphiteScenarioTacticsOne	\N	In the Graphite system the component *carbon* provides to *webapp* components an access interface to the *buffers* in order to improve the quality of	\N	t
808	HadoopCheckpoint	\N	In the HDFS system when the *CheckpointNode* and the *NameNode* are deployed in different nodes, the *CheckpointNode* provides:	\N	t
809	OmissionRetry	\N	Considering the availability architectural quality, the tactic of retry	\N	t
810	Scalability	\N	Several of the cases studied in this course have scalability requirements. That means that those systems should be designed in such a way that they	\N	t
811	Availability	\N	There are several tactics to satisfy availability requirements, which may be applied depending on the concrete requirement that we want to satisfy. Assuming that you want to detect faults of type *response* in your system, which tactic is more adequate?	\N	t
812	Performance	\N	Consider a scenario for performance where the arrival of events is stochastic with a distribution where there are peeks of events but the arrival of events over a long period is uniform. The best tactic to apply is	\N	t
813	ModifiabilityTwo	\N	Consider that a module, that contains a complex business logic, needs to invoke a remote entity using a particular communication protocol and it is needs to manage the invocation, like deal with the possible errors, delays and omissions in the invocation, transform the data before sending it, etc. Which tactic should be applied for a scenario where there will be changes in the communication protocol. Note that the business logic comprises a set of functionalities that is independent of the remote invocation technological aspects.	\N	t
814	GraphiteScenarioTacticsTwo	\N	Which quality, or qualities, of the Graphite system are described by the sentence: *Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL*	\N	t
815	HadoopNameNodeReplica	\N	The architecture of the HDFS system only allows the existence of one NameNode. Given the responsibilities of this component and the current architecture of HDFS, what would be the consequences of adding the possibility of having replicas of the NameNode in the system?	\N	t
816	ModifiabilityTwo	\N	Consider that a module, that contains a complex business logic, needs to invoke a remote entity using a particular communication protocol and it is needs to manage the invocation, like deal with the possible errors, delays and omissions in the invocation, transform the data before sending it, etc. Which tactic should be applied for a scenario where there will be changes in the communication protocol. Note that the business logic comprises a set of functionalities that is independent of the remote invocation technological aspects.	\N	t
817	GraphiteScenarioTacticsTwo	\N	Which quality, or qualities, of the Graphite system are described by the sentence: *Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL*	\N	t
818	HadoopNameNodeReplica	\N	The architecture of the HDFS system only allows the existence of one NameNode. Given the responsibilities of this component and the current architecture of HDFS, what would be the consequences of adding the possibility of having replicas of the NameNode in the system?	\N	t
819	Performance	\N	Consider a scenario for performance where the arrival of events is stochastic with a distribution where there are peeks of events but the arrival of events over a long period is uniform. The best tactic to apply is	\N	t
820	Availability	\N	There are several tactics to satisfy availability requirements, which may be applied depending on the concrete requirement that we want to satisfy. Assuming that you want to detect faults of type *response* in your system, which tactic is more adequate?	\N	t
821	DVDCatalogMultiPlatform	\N	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement  \n>"To support multi-platform (Mac, Windows, Linux)"  \nThis requirement requires a change of	\N	t
822	ModuleComponent	\N	Consider the kind of relations between components and modules.	\N	t
823	ModuleViewtypeTwo	\N	Consider the Uses architectural style of the Module viewtype	\N	t
849	PipesFilters	\N	Consider that you intend to develop a system where it is necessary to change the emails received by the server (for instance, to remove potential virus or URLs for phishing sites). The goal is that each email is processed by this system before it is sent to other servers or it is stored locally. Additionally, the system should be easily modified to support new kinds of transformations. Which style is more suitable to satisfy these requirements?	\N	t
824	AdventureBuilderModuleOne	\N	Consider the following modifiability scenario for the Adventure Builder system  \n>"A new business partner (airline, lodging, or activity provider) that uses its own web services interface is added to the system in no more than 10 person-days of effort for the implementation. The business goal is easy integration with new business partners."  \nand the following architectural view ![image][image]	\N	t
825	Aspects	\N	An architect is decomposing a system into a set of responsibilities using a view of the Decomposition style. However, she had already to backtrack several times and try new decompositions because she always end up with some responsibility that cannot fit within a single module.	\N	t
826	ModuleViewtypeTwo	\N	Consider the Uses architectural style of the Module viewtype	\N	t
827	DVDCatalogMultiPlatform	\N	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement  \n>"To support multi-platform (Mac, Windows, Linux)"  \nThis requirement requires a change of	\N	t
828	ModuleComponent	\N	Consider the kind of relations between components and modules.	\N	t
829	Aspects	\N	An architect is decomposing a system into a set of responsibilities using a view of the Decomposition style. However, she had already to backtrack several times and try new decompositions because she always end up with some responsibility that cannot fit within a single module.	\N	t
830	AdventureBuilderModuleOne	\N	Consider the following modifiability scenario for the Adventure Builder system  \n>"A new business partner (airline, lodging, or activity provider) that uses its own web services interface is added to the system in no more than 10 person-days of effort for the implementation. The business goal is easy integration with new business partners."  \nand the following architectural view ![image][image]	\N	t
831	DVDCatalogAspects	\N	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement  \n>"To allow the share of catalogs with family and friends, including some access control."  \nThis requirement requires	\N	t
832	UsesCalls	\N	A function call is not necessarily a uses relation of the Uses architectural style of the Module viewtype because	\N	t
833	ModuleViewtypeThree	\N	Consider the Layered architectural style of the Module viewtype	\N	t
834	DataModelFacebook	\N	In Facebook it is not possible to have the information about more that one bilion users in a single disk. Therefore, a sharding technique is applied, where the persistent information is split between several database servers, and applications are routed to the right servers for queries and updates. To describe this architecture	\N	t
835	AdventureBuilderModuleTwo	\N	Consider the following performance/scalability scenario for the Adventure Builder system  \n>"Up to 500 users click to see the catalog of adventure packages following a random distribution over 1 minute; the system is under normal operating conditions; the maximal latency to serve the first page of content is under 5 seconds; average latency for same is less than 2 seconds. If required, the system should easily support an increase in the number of simultaneous requests while maintaining the same latency per request."  \nand the following architectural view ![image][image]	\N	t
836	ModuleViewtypeThree	\N	Consider the Layered architectural style of the Module viewtype	\N	t
837	DVDCatalogAspects	\N	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement  \n>"To allow the share of catalogs with family and friends, including some access control."  \nThis requirement requires	\N	t
838	UsesCalls	\N	A function call is not necessarily a uses relation of the Uses architectural style of the Module viewtype because	\N	t
839	AdventureBuilderModuleTwo	\N	Consider the following performance/scalability scenario for the Adventure Builder system  \n>"Up to 500 users click to see the catalog of adventure packages following a random distribution over 1 minute; the system is under normal operating conditions; the maximal latency to serve the first page of content is under 5 seconds; average latency for same is less than 2 seconds. If required, the system should easily support an increase in the number of simultaneous requests while maintaining the same latency per request."  \nand the following architectural view ![image][image]	\N	t
840	DataModelFacebook	\N	In Facebook it is not possible to have the information about more that one bilion users in a single disk. Therefore, a sharding technique is applied, where the persistent information is split between several database servers, and applications are routed to the right servers for queries and updates. To describe this architecture	\N	t
841	ComponentConnectorTwo	\N	The connectors on component-and-connector view	\N	t
842	PipesFilters	\N	Consider that you intend to develop a system where it is necessary to change the emails received by the server (for instance, to remove potential virus or URLs for phishing sites). The goal is that each email is processed by this system before it is sent to other servers or it is stored locally. Additionally, the system should be easily modified to support new kinds of transformations. Which style is more suitable to satisfy these requirements?	\N	t
843	Tiers	\N	The Tiers architectural style	\N	t
844	GraphiteViewsOne	\N	In Graphite system the *receiver* and the *writer threads* support asynchronous writing of metrics to optimize disk accesses. The interaction between these two components follow the architectural style	\N	t
845	AdventureBuilderOne	\N	Consider the following view of the Adventure Builder system ![image][image] In this view the following architectural styles are used	\N	t
846	AdventureBuilderOne	\N	Consider the following view of the Adventure Builder system ![image][image] In this view the following architectural styles are used	\N	t
847	Tiers	\N	The Tiers architectural style	\N	t
848	ComponentConnectorTwo	\N	The connectors on component-and-connector view	\N	t
850	GraphiteViewsOne	\N	In Graphite system the *receiver* and the *writer threads* support asynchronous writing of metrics to optimize disk accesses. The interaction between these two components follow the architectural style	\N	t
851	InterfaceDelegation	\N	Consider the concept of interface delegation	\N	t
855	AdventureBuilderTwo	\N	Consider the following view of the Adventure Builder system ![image][image] In this view the following architectural styles are used	\N	t
856	AdventureBuilderTwo	\N	Consider the following view of the Adventure Builder system ![image][image] In this view the following architectural styles are used	\N	t
857	PublishSubscribe	\N	In the Publish-Subscribe architectural style	\N	t
858	GraphiteViewsTwo	\N	A high-level component-and-connect view of Graphite system can be designed using only the architectural style(s)	\N	t
859	InterfaceDelegation	\N	Consider the concept of interface delegation	\N	t
860	CommunicationProcesses	\N	The Java web servers, like Tomcat, use threads to process requests. For each request they create (or reuse) a thread to process it. To draw a architectural view that describes this behaviour we should use	\N	t
861	AvailabilityOne	\N	The stimulus of an availability scenario is	\N	t
862	PerformanceOne	\N	A response measure of a performance scenario is	\N	t
863	ModifiabilityExamOne	\N	The layered architectural style applies the modifiability architectural tactic of	\N	t
864	ModuleViewtypeExamOne	\N	One of the advantages of having views of the module viewtype is that they allow to do an impact analysis to predict the effect of modifying the system. The architectural style of the module viewtype which provides richer information for this impact analysis is	\N	t
865	DecompositionGeneralization	\N	Consider that a chess game should provide an automatic and intelligent chess player, and that to implement that player we will use some of the many chess engines already available in the market. Moreover, the system should allow the user to choose which engine to use for each new game. Given these requirements, which of the architectural styles from the module viewtype are best suited to satisfy them?	\N	t
866	ComponentAndConnectorViewtypeOne	\N	In the component-and-connector viewtype connectors can be complex, which means that they provide a rich set of qualities to the interaction between the components that they connect. These complex connectors can be documented in another view using a set of components interacting through simpler connectors.	\N	t
867	PublishsubscribeOne	\N	Typically, Instant Messaging clients have a window to list the contacts of the user, and show in that window the status of each contact (whether it is available, unavailable, busy, etc). Given that the status of a contact may be changed at any time, and that the contact's status is given by the Instant Messaging application of that contact, which architectural style represents best the interaction pattern between these components?	\N	t
868	ProxyServer	\N	Consider the following figure that presents a Proxy Server that collapses requests from different users. ![image][image]	\N	t
869	GraphiteOne	\N	Consider the following fragment in the description of the Graphite system.  \n>"The Graphite webapp allows users to request custom graphs with a simple URL-based API. Graphing parameters are specified in the query-string of an HTTP GET request, and a PNG image is returned in response."  \nTo describe this scenario it should be designed a view that applies the following architectural style	\N	t
870	DVDOne	\N	Consider the following usability scenario of the Catalog of DVDs case study  \n>"The user intends to have up-to-date info about the movies and the system informs the user that the existing sources have new information about one of his DVDs, which helps to maintain an up-to-date catalog."  \nThe tactic used to fulfill this scenario is	\N	t
871	AdventureBuilderOne	\N	Consider the following view of the Adventure Builder case study that applies the tiers architectural style ![image][image]	\N	t
872	PulseOne	\N	Consider the following view of the Pulse case study ![image][image] This view provides a solution that uses the following tactic	\N	t
873	OrderPadOne	\N	In the description of architecture of the OrderPad case study it can be read that the updates the user does on the OrderPad when it is offline are not lost. This availability quality is achieved through a	\N	t
874	Layered	\N	Consider the Uses architectural style of the Module viewtype	\N	t
875	DynamicReconfiguration	\N	In the description of the Gnutella system can be read:  \n>"The topology of the system changes at runtime as peer components connect and disconnect to the network."  \n	\N	t
876	Deployment	\N	In the software architecture of a system, the Deployment architectural style of the allocation viewtype is best suited for	\N	t
877	WebAppsOne	\N	Consider a web application that was implemented using three layers: presentation, domain logic, and data access. How are these layers mapped into the components if it is a rich interface application.	\N	t
878	FenixOne	\N	In the context of the FenixEdu case study, the business case was to	\N	t
879	AggregateOne	\N	In a microservices architecture, aggregates are used as a unit of processing	\N	t
880	MicroservicesExamOne	\N	Consider the Microservice architectural style. Which of the following sentences **does not** describe an advantage of microservices?	\N	t
881	ComponentAndConnectorViewtypeOne	\N	In the component-and-connector viewtype connectors can be complex, which means that they provide a rich set of qualities to the interaction between the components that they connect. These complex connectors can be documented in another view using a set of components interacting through simpler connectors.	\N	t
882	PublishsubscribeOne	\N	Typically, Instant Messaging clients have a window to list the contacts of the user, and show in that window the status of each contact (whether it is available, unavailable, busy, etc). Given that the status of a contact may be changed at any time, and that the contact's status is given by the Instant Messaging application of that contact, which architectural style represents best the interaction pattern between these components?	\N	t
883	GraphiteOne	\N	Consider the following fragment in the description of the Graphite system.  \n>"The Graphite webapp allows users to request custom graphs with a simple URL-based API. Graphing parameters are specified in the query-string of an HTTP GET request, and a PNG image is returned in response."  \nTo describe this scenario it should be designed a view that applies the following architectural style	\N	t
884	ProxyServer	\N	Consider the following figure that presents a Proxy Server that collapses requests from different users. ![image][image]	\N	t
889	ModuleViewtypeExamOne	\N	One of the advantages of having views of the module viewtype is that they allow to do an impact analysis to predict the effect of modifying the system. The architectural style of the module viewtype which provides richer information for this impact analysis is	\N	t
890	DecompositionGeneralization	\N	Consider that a chess game should provide an automatic and intelligent chess player, and that to implement that player we will use some of the many chess engines already available in the market. Moreover, the system should allow the user to choose which engine to use for each new game. Given these requirements, which of the architectural styles from the module viewtype are best suited to satisfy them?	\N	t
891	AggregateOne	\N	In a microservices architecture, aggregates are used as a unit of processing	\N	t
892	MicroservicesExamOne	\N	Consider the Microservice architectural style. Which of the following sentences **does not** describe an advantage of microservices?	\N	t
893	DVDOne	\N	Consider the following usability scenario of the Catalog of DVDs case study  \n>"The user intends to have up-to-date info about the movies and the system informs the user that the existing sources have new information about one of his DVDs, which helps to maintain an up-to-date catalog."  \nThe tactic used to fulfill this scenario is	\N	t
894	AdventureBuilderOne	\N	Consider the following view of the Adventure Builder case study that applies the tiers architectural style ![image][image]	\N	t
895	PulseOne	\N	Consider the following view of the Pulse case study ![image][image] This view provides a solution that uses the following tactic	\N	t
896	OrderPadOne	\N	In the description of architecture of the OrderPad case study it can be read that the updates the user does on the OrderPad when it is offline are not lost. This availability quality is achieved through a	\N	t
897	Layered	\N	Consider the Uses architectural style of the Module viewtype	\N	t
898	DynamicReconfiguration	\N	In the description of the Gnutella system can be read:  \n>"The topology of the system changes at runtime as peer components connect and disconnect to the network."  \n	\N	t
899	Deployment	\N	In the software architecture of a system, the Deployment architectural style of the allocation viewtype is best suited for	\N	t
900	WebAppsOne	\N	Consider a web application that was implemented using three layers: presentation, domain logic, and data access. How are these layers mapped into the components if it is a rich interface application.	\N	t
901	AvailabilityTwo	\N	An availability tactic to prevent faults is	\N	t
902	PerformanceTwo	\N	A performance tactic to control resource demand is	\N	t
903	ModifiabilityExamTwo	\N	A response measure of a modifiability scenario is	\N	t
904	DVDCatalogMobile	\N	Consider the module viewtype views of the Catalog of DVD application. The architect knows about a new requirement  \n>"To support iPhone/iPad/Android version with sync, which allows offline use of the application in the mobile device and data synchronization to occur when a connection is available"  \nThis requirement requires a change of	\N	t
905	ComponentAndConnectorViewtypeTwo	\N	Considered the following two views of a system that receive a stream of character and produce the same stream where the characters are alternately uppercase and lowercase. ![image][image]	\N	t
906	ModuleViewtypeExamTwo	\N	One of the advantages of having views of the module viewtype is that they allow to do a traceability analysis of requirements, how the functional requirements of the system are supported by module responsibilities. The modifiability tactic that is involved in this mapping is	\N	t
907	PipesFilters	\N	Consider that you intend to develop a system where it is necessary to change the emails received by the server (for instance, to remove potential virus or URLs for phishing sites). The goal is that each email is processed by this system before it is sent to other servers or it is stored locally. Additionally, the system should be easily modified to support new kinds of transformations. Which style is more suitable to satisfy these requirements?	\N	t
908	ScalableArchitectureOne	\N	Consider the following figure that presents a Image Hosting System. ![image][image] By adding another Image File Storage component, which contains a redundant copy of the data and provides read access to the clients, but without guaranteeing a ACID transactional behavior between reads and writes, it improves the quality(ies) of	\N	t
909	GraphiteTwo	\N	Which quality, or qualities, of the Graphite system are described by the sentence: *Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL.*	\N	t
910	WorkAssigment	\N	Consider the Work Assignment architectural style of the allocation viewtype.	\N	t
911	WebAppsTwo	\N	Consider a web application that supports several types of user interface, e.g., web, mobile, etc. If it has to process a high volume of requests, which depend on the type of user interface, and a multi-tier architecture is followed. How many tiers should be used?	\N	t
912	DVDTwo	\N	Consider the following generalization view of the Catalog of DVD case study to fulfill a modifiability scenario ![image][image] From this view the stakeholders can infer	\N	t
913	DataModel	\N	In Facebook it is not possible to have the information about more that one bilion users in a single disk. Therefore, a sharding technique is applied, where the persistent information is split between several database servers, and requests are routed to the right servers for queries and updates. Additionally, due to performance requirements, the information needs to be replicated in several servers. To describe this architecture	\N	t
914	SOA	\N	Suppose that you are developing the software architecture of a new system for an organization composed of several organizational units, each one with its own information systems, which have been developed independently of each other over the course of several years and depending on the particular needs of each unit. Your system has the goal of integrating the various existing systems, providing in this way not only a unified view of how the organization works, but also allowing the creation of new processes within the organization that involve more than one unit. Which architectural style is better suited to design such a system?	\N	t
915	AdventureBuilderTwo	\N	Consider the following view of the Adventure Builder case study ![image][image]	\N	t
916	PulseTwo	\N	Consider the following view of the Pulse case study ![image][image] This view applies the following architectural styles	\N	t
917	OrderPadTwo	\N	Consider the architecture of the Morrison's OrderPad. The connector between the client component, executing in the Pad, and the server component, executing in the OrderPadDatabase	\N	t
918	FenixTwo	\N	When applying Attribute-Driven Design (ADD) to the FenixEdu system the creation of a view where there are redundant web servers, load balancers and database servers	\N	t
919	AggregateTwo	\N	Consider the following decomposition of a domain model into 3 aggregates. If, instead of this decomposition, `Customer` and `Order` were in the same aggregate ![image][image]	\N	t
920	MicroservicesExamTwo	\N	Consider the following definition of Microservice architectural style by Martin Fowler  \n>"The microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies."  \nTo represent an architecture based on Microservices	\N	t
921	AggregateTwo	\N	Consider the following decomposition of a domain model into 3 aggregates. If, instead of this decomposition, `Customer` and `Order` were in the same aggregate ![image][image]	\N	t
922	AvailabilityTwo	\N	An availability tactic to prevent faults is	\N	t
923	PerformanceTwo	\N	A performance tactic to control resource demand is	\N	t
924	MicroservicesExamTwo	\N	Consider the following definition of Microservice architectural style by Martin Fowler  \n>"The microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies."  \nTo represent an architecture based on Microservices	\N	t
925	ModifiabilityExamTwo	\N	A response measure of a modifiability scenario is	\N	t
926	DVDCatalogMobile	\N	Consider the module viewtype views of the Catalog of DVD application. The architect knows about a new requirement  \n>"To support iPhone/iPad/Android version with sync, which allows offline use of the application in the mobile device and data synchronization to occur when a connection is available"  \nThis requirement requires a change of	\N	t
927	GraphiteTwo	\N	Which quality, or qualities, of the Graphite system are described by the sentence: *Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL.*	\N	t
928	WorkAssigment	\N	Consider the Work Assignment architectural style of the allocation viewtype.	\N	t
929	ScalableArchitectureOne	\N	Consider the following figure that presents a Image Hosting System. ![image][image] By adding another Image File Storage component, which contains a redundant copy of the data and provides read access to the clients, but without guaranteeing a ACID transactional behavior between reads and writes, it improves the quality(ies) of	\N	t
930	WebAppsTwo	\N	Consider a web application that supports several types of user interface, e.g., web, mobile, etc. If it has to process a high volume of requests, which depend on the type of user interface, and a multi-tier architecture is followed. How many tiers should be used?	\N	t
931	DVDTwo	\N	Consider the following generalization view of the Catalog of DVD case study to fulfill a modifiability scenario ![image][image] From this view the stakeholders can infer	\N	t
932	DataModel	\N	In Facebook it is not possible to have the information about more that one bilion users in a single disk. Therefore, a sharding technique is applied, where the persistent information is split between several database servers, and requests are routed to the right servers for queries and updates. Additionally, due to performance requirements, the information needs to be replicated in several servers. To describe this architecture	\N	t
933	SOA	\N	Suppose that you are developing the software architecture of a new system for an organization composed of several organizational units, each one with its own information systems, which have been developed independently of each other over the course of several years and depending on the particular needs of each unit. Your system has the goal of integrating the various existing systems, providing in this way not only a unified view of how the organization works, but also allowing the creation of new processes within the organization that involve more than one unit. Which architectural style is better suited to design such a system?	\N	t
934	AdventureBuilderTwo	\N	Consider the following view of the Adventure Builder case study ![image][image]	\N	t
935	FenixTwo	\N	When applying Attribute-Driven Design (ADD) to the FenixEdu system the creation of a view where there are redundant web servers, load balancers and database servers	\N	t
936	PulseTwo	\N	Consider the following view of the Pulse case study ![image][image] This view applies the following architectural styles	\N	t
937	OrderPadTwo	\N	Consider the architecture of the Morrison's OrderPad. The connector between the client component, executing in the Pad, and the server component, executing in the OrderPadDatabase	\N	t
938	ModuleViewtypeExamTwo	\N	One of the advantages of having views of the module viewtype is that they allow to do a traceability analysis of requirements, how the functional requirements of the system are supported by module responsibilities. The modifiability tactic that is involved in this mapping is	\N	t
978	AvailabilityVotingFirst	\N	There are several tactics to satisfy availability requirements, which may be applied depending on the concrete requirement that we want to satisfy. Assuming that you want to detect faults of type *response* in your system, which tactic is more adequate?	\N	t
979	ModifiabilityOne	\N	The modifiability tactic Use an Intermediary between two modules	\N	t
939	PipesFilters	\N	Consider that you intend to develop a system where it is necessary to change the emails received by the server (for instance, to remove potential virus or URLs for phishing sites). The goal is that each email is processed by this system before it is sent to other servers or it is stored locally. Additionally, the system should be easily modified to support new kinds of transformations. Which style is more suitable to satisfy these requirements?	\N	t
940	ComponentAndConnectorViewtypeTwo	\N	Considered the following two views of a system that receive a stream of character and produce the same stream where the characters are alternately uppercase and lowercase. ![image][image]	\N	t
941	QueuesQualities	\N	Consider the following figure that presents a Queue where client applications write their requests to be processed by a server. ![image][image] This solution **does not** provide the following quality:	\N	t
942	ElevatorCommon	\N	In the Architect Elevator article by Gregor Hohpe can be read:  \n>"Finding the appropriate context requires the architect to visit many floors of the organization."  \nThis sentence reflects the fact that an architecture is	\N	t
943	MicroservicesProject	\N	In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:  \n>"The microservice approach to division ..., splitting up into services organized around business capability. Such services take a broad-stack implementation of software for that business area, including user-interface, persistent storage, and any external collaborations. Consequently the teams are cross-functional, including the full range of skills required for the development: user-experience, database, and project management."  \nConsidering the architecture influence cycle, which influence factor it is being considered?	\N	t
944	ScalablePartitioning	\N	Consider the following figure that presents an architectural view of an *Image Hosting Application* which resulted from the enrichment of another architectural view by adding another *Image File Storage* pair, in the figure they are distinguished by 1 and 2. ![image][image] Which quality results from this enrichment, that was not provided by the previous version of the architecture?	\N	t
945	PerformanceSenario	\N	Consider the following scenario for performance  \n>"During the enrollment period the FenixEDU system should be able to completely enroll 5.000 students in less than 30 minutes."  \n	\N	t
946	ElevatorCommon	\N	In the Architect Elevator article by Gregor Hohpe can be read:  \n>"Finding the appropriate context requires the architect to visit many floors of the organization."  \nThis sentence reflects the fact that an architecture is	\N	t
947	PerformanceSenario	\N	Consider the following scenario for performance  \n>"During the enrollment period the FenixEDU system should be able to completely enroll 5.000 students in less than 30 minutes."  \n	\N	t
948	MicroservicesProject	\N	In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:  \n>"The microservice approach to division ..., splitting up into services organized around business capability. Such services take a broad-stack implementation of software for that business area, including user-interface, persistent storage, and any external collaborations. Consequently the teams are cross-functional, including the full range of skills required for the development: user-experience, database, and project management."  \nConsidering the architecture influence cycle, which influence factor it is being considered?	\N	t
949	ScalablePartitioning	\N	Consider the following figure that presents an architectural view of an *Image Hosting Application* which resulted from the enrichment of another architectural view by adding another *Image File Storage* pair, in the figure they are distinguished by 1 and 2. ![image][image] Which quality results from this enrichment, that was not provided by the previous version of the architecture?	\N	t
950	QueuesQualities	\N	Consider the following figure that presents a Queue where client applications write their requests to be processed by a server. ![image][image] This solution **does not** provide the following quality:	\N	t
951	ElevatorInteroperability	\N	In the Architect Elevator article by Gregor Hohpe can be read:  \n>"Once a developer approached our architecture team with an application that had "significant scalability demands". A quick look at the architecture diagram revealed numerous components communicating via XML messages. When I pointed out that this may be the very reason for the performance concerns, I was quickly informed that this was an architecture decision and couldn't be changed. Assuming the architects are smart and well-intentioned, they may have thought about interoperability when they made this decision but may be unaware of the negative impact on run-time performance and development velocity."  \nFrom this sentence we can conclude that	\N	t
952	MicroservicesModularity	\N	In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:  \n>"As well as the fact that services are independently deployable and scalable, each service also provides a firm module boundary, even allowing for different services to be written in different programming languages. They can also be managed by different teams."  \nWhich is not necessarily an advantage of being independently deployable and scalable?	\N	t
953	ReadsAndWrites	\N	Consider the following figure that presents an architectural view of an *Image Hosting Application*. ![image][image]	\N	t
954	QueuesSyncAndAsync	\N	Consider the following figure that presents a Queue where client applications write their requests to be processed by a server (asynchronous) and compare with another architectural design (synchronous) where a thread is associated with each request. ![image][image]	\N	t
955	PerformanceTacticsOne	\N	Which of the following tactics is not related with the management of resources	\N	t
956	QueuesSyncAndAsync	\N	Consider the following figure that presents a Queue where client applications write their requests to be processed by a server (asynchronous) and compare with another architectural design (synchronous) where a thread is associated with each request. ![image][image]	\N	t
980	FenixADD	\N	When applying Attribute-Driven Design (ADD) to the FenixEdu system the creation of a view where there are redundant web servers, load balancers and database servers	\N	t
957	ElevatorInteroperability	\N	In the Architect Elevator article by Gregor Hohpe can be read:  \n>"Once a developer approached our architecture team with an application that had "significant scalability demands". A quick look at the architecture diagram revealed numerous components communicating via XML messages. When I pointed out that this may be the very reason for the performance concerns, I was quickly informed that this was an architecture decision and couldn't be changed. Assuming the architects are smart and well-intentioned, they may have thought about interoperability when they made this decision but may be unaware of the negative impact on run-time performance and development velocity."  \nFrom this sentence we can conclude that	\N	t
958	MicroservicesModularity	\N	In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:  \n>"As well as the fact that services are independently deployable and scalable, each service also provides a firm module boundary, even allowing for different services to be written in different programming languages. They can also be managed by different teams."  \nWhich is not necessarily an advantage of being independently deployable and scalable?	\N	t
959	ReadsAndWrites	\N	Consider the following figure that presents an architectural view of an *Image Hosting Application*. ![image][image]	\N	t
960	PerformanceTacticsOne	\N	Which of the following tactics is not related with the management of resources	\N	t
961	DataStorageAvailability	\N	Consider the following figure that presents an architectural view of an *Image Hosting Application*. ![image][image] The replication between the Image File Storage *n* and Image File Storage *nb*	\N	t
962	MicroservicesConsistency	\N	In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:  \n>"Decentralizing responsibility for data across microservices has implications for managing updates. The common approach to dealing with updates has been to use transactions to guarantee consistency when updating multiple resources. This approach is often used within monoliths."  \nWhat is the impact of decentralizing responsibility for data across microservices?	\N	t
963	ElevatorDevops	\N	In the Architect Elevator article by Gregor Hohpe can be read:  \n>"A lot of large companies have discovered the benefits of cloud computing but see it mainly as an infrastructure topic. I feel that's misguided: being able to get compute resources more quickly and cheaply is useful, but the real business benefit lies in a fully automated tool chain that minimizes the time in which a normal code change can go into production. Not quite coincidentally, this is my favorite definition of DevOps."  \nIn the author's opinion	\N	t
964	QueuesCrash	\N	Consider the following figure that presents a Queue where client applications write their requests to be processed by a server (asynchronous) and compare with another architectural design (synchronous) where a thread is associated with each request. ![image][image] Consider a situation where the server that processes the tasks crashes	\N	t
965	PerformanceTacticsTwo	\N	Which of the following tactics is not related with the control of resource demand	\N	t
966	QueuesCrash	\N	Consider the following figure that presents a Queue where client applications write their requests to be processed by a server (asynchronous) and compare with another architectural design (synchronous) where a thread is associated with each request. ![image][image] Consider a situation where the server that processes the tasks crashes	\N	t
967	DataStorageAvailability	\N	Consider the following figure that presents an architectural view of an *Image Hosting Application*. ![image][image] The replication between the Image File Storage *n* and Image File Storage *nb*	\N	t
968	MicroservicesConsistency	\N	In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:  \n>"Decentralizing responsibility for data across microservices has implications for managing updates. The common approach to dealing with updates has been to use transactions to guarantee consistency when updating multiple resources. This approach is often used within monoliths."  \nWhat is the impact of decentralizing responsibility for data across microservices?	\N	t
969	PerformanceTacticsTwo	\N	Which of the following tactics is not related with the control of resource demand	\N	t
970	ElevatorDevops	\N	In the Architect Elevator article by Gregor Hohpe can be read:  \n>"A lot of large companies have discovered the benefits of cloud computing but see it mainly as an infrastructure topic. I feel that's misguided: being able to get compute resources more quickly and cheaply is useful, but the real business benefit lies in a fully automated tool chain that minimizes the time in which a normal code change can go into production. Not quite coincidentally, this is my favorite definition of DevOps."  \nIn the author's opinion	\N	t
971	AvailabilityVotingFirst	\N	There are several tactics to satisfy availability requirements, which may be applied depending on the concrete requirement that we want to satisfy. Assuming that you want to detect faults of type *response* in your system, which tactic is more adequate?	\N	t
972	ModifiabilityOne	\N	The modifiability tactic Use an Intermediary between two modules	\N	t
973	FenixADD	\N	When applying Attribute-Driven Design (ADD) to the FenixEdu system the creation of a view where there are redundant web servers, load balancers and database servers	\N	t
974	ModuleViewtypeOne	\N	Consider the Decomposition architectural style of the Module viewtype	\N	t
975	GraphiteComposerUIPerformance	\N	The *Composer UI* component of Graphite system, described as - *Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL* - to be effective needs to show to the user the changes she performs in the graph such that she has immediate feedback whenever she clicks on a option. To do so, the architecture needs to include	\N	t
976	ModuleViewtypeOne	\N	Consider the Decomposition architectural style of the Module viewtype	\N	t
977	GraphiteComposerUIPerformance	\N	The *Composer UI* component of Graphite system, described as - *Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL* - to be effective needs to show to the user the changes she performs in the graph such that she has immediate feedback whenever she clicks on a option. To do so, the architecture needs to include	\N	t
982	ModifiabilityTwo	\N	Consider the following scenario: *A system administrator adds more copies of computation of the system, each one using a different database, and is able to do it in less than 10 minutes.*	\N	t
983	LowArchitecturalImpact	\N	Consider an architecturally significant requirement (ASR) that has a low impact on the architecture but a high business value	\N	t
984	Decomposition	\N	The Decomposition architectural style of the Module viewtype	\N	t
985	GraphiteScenarioTacticsOne	\N	In the Graphite system the component *carbon* provides to *webapp* components an access interface to the *buffers* in order to improve the quality of	\N	t
986	GraphiteScenarioTacticsOne	\N	In the Graphite system the component *carbon* provides to *webapp* components an access interface to the *buffers* in order to improve the quality of	\N	t
987	AvailabilityVotingSecond	\N	The availability quality can be supported by a voting tactic in order to identify faults of	\N	t
988	LowArchitecturalImpact	\N	Consider an architecturally significant requirement (ASR) that has a low impact on the architecture but a high business value	\N	t
989	ModifiabilityTwo	\N	Consider the following scenario: *A system administrator adds more copies of computation of the system, each one using a different database, and is able to do it in less than 10 minutes.*	\N	t
990	Decomposition	\N	The Decomposition architectural style of the Module viewtype	\N	t
991	Voting	\N	A voting tactic can be used to	\N	t
992	ModifiabilityThree	\N	Consider the modifiability quality and the cost of change.	\N	t
993	IterativeDesign	\N	Designing an architecture	\N	t
994	ArchitecturalViews	\N	A software system is usually described using different architectural views	\N	t
995	GraphiteReliability	\N	In the Graphite system description can be read:  \n>"We've got 600,000 metrics that update every minute and we're assuming our storage can only keep up with 60,000 write operations per minute. This means we will have approximately 10 minutes worth of data sitting in carbon's queues at any given time. To a user this means that the graphs they request from the Graphite webapp will be missing the most recent 10 minutes of data."  \n	\N	t
996	IterativeDesign	\N	Designing an architecture	\N	t
997	ArchitecturalViews	\N	A software system is usually described using different architectural views	\N	t
998	GraphiteReliability	\N	In the Graphite system description can be read:  \n>"We've got 600,000 metrics that update every minute and we're assuming our storage can only keep up with 60,000 write operations per minute. This means we will have approximately 10 minutes worth of data sitting in carbon's queues at any given time. To a user this means that the graphs they request from the Graphite webapp will be missing the most recent 10 minutes of data."  \n	\N	t
999	Voting	\N	A voting tactic can be used to	\N	t
1000	ModifiabilityThree	\N	Consider the modifiability quality and the cost of change.	\N	t
1001	ModuleStylesOne	\N	Suppose that in the development of an enterprise application (which needs to access a database) it was decided to use the FenixFramework library to simplify the development of the data access code. Which architectural style is the most adequate to represent this decision?	\N	t
1002	AdventureBuilderComponentAndConnectorOne	\N	Consider the following view of the Adventure Builder system ![image][image] In this view the following architectural styles are used	\N	t
1003	AdventureBuilderModuleOne	\N	Consider the following modifiability scenario for the Adventure Builder system  \n>"A new business partner (airline, lodging, or activity provider) that uses its own web services interface is added to the system in no more than 10 person-days of effort for the implementation. The business goal is easy integration with new business partners."  \nand the following architectural view ![image][image]	\N	t
1004	InterfaceDelegation	\N	Consider the concept of interface delegation	\N	t
1005	PipeFilterComposition	\N	The Pipe-and-Filter style allows composition of filters	\N	t
1006	AdventureBuilderComponentAndConnectorOne	\N	Consider the following view of the Adventure Builder system ![image][image] In this view the following architectural styles are used	\N	t
1007	ModuleStylesOne	\N	Suppose that in the development of an enterprise application (which needs to access a database) it was decided to use the FenixFramework library to simplify the development of the data access code. Which architectural style is the most adequate to represent this decision?	\N	t
1008	InterfaceDelegation	\N	Consider the concept of interface delegation	\N	t
1009	PipeFilterComposition	\N	The Pipe-and-Filter style allows composition of filters	\N	t
1010	AdventureBuilderModuleOne	\N	Consider the following modifiability scenario for the Adventure Builder system  \n>"A new business partner (airline, lodging, or activity provider) that uses its own web services interface is added to the system in no more than 10 person-days of effort for the implementation. The business goal is easy integration with new business partners."  \nand the following architectural view ![image][image]	\N	t
1011	PublishSubscribe	\N	In the Publish-Subscribe architectural style	\N	t
1012	AdventureBuilderComponentAndConnectorSecond	\N	Consider the following view of the Adventure Builder system ![image][image] In this view it is possible to reason that	\N	t
1013	AdventureBuilderModuleThree	\N	Consider the following performance/scalability scenario for the Adventure Builder system  \n>"Up to 500 users click to see the catalog of adventure packages following a random distribution over 1 minute; the system is under normal operating conditions; the maximal latency to serve the first page of content is under 5 seconds; average latency for same is less than 2 seconds. If required, the system should easily support an increase in the number of simultaneous requests while maintaining the same latency per request."  \nand the following architectural view ![image][image]	\N	t
1014	ConnectorAttach	\N	A connector may be attached to components of different types because	\N	t
1015	UsesOne	\N	Which architectural style is adequate for planning incremental releases?	\N	t
1016	AdventureBuilderComponentAndConnectorSecond	\N	Consider the following view of the Adventure Builder system ![image][image] In this view it is possible to reason that	\N	t
1017	PublishSubscribe	\N	In the Publish-Subscribe architectural style	\N	t
1018	UsesOne	\N	Which architectural style is adequate for planning incremental releases?	\N	t
1019	AdventureBuilderModuleThree	\N	Consider the following performance/scalability scenario for the Adventure Builder system  \n>"Up to 500 users click to see the catalog of adventure packages following a random distribution over 1 minute; the system is under normal operating conditions; the maximal latency to serve the first page of content is under 5 seconds; average latency for same is less than 2 seconds. If required, the system should easily support an increase in the number of simultaneous requests while maintaining the same latency per request."  \nand the following architectural view ![image][image]	\N	t
1020	ConnectorAttach	\N	A connector may be attached to components of different types because	\N	t
1021	LayeredAspectsDataModelOne	\N	In a layered architecture composed by four layers, where the topmost layer is the layer number 1 and the bottommost layer is the layer number 4, which of the layers is more modifiable?	\N	t
1022	AdventureBuilderComponentAndConnectorThird	\N	Consider the following view of the Adventure Builder system ![image][image] This view **does not** apply the architectural style	\N	t
1023	AdventureBuilderModuleTwo	\N	Consider the following availability scenario for the Adventure Builder system  \n>"The Consumer Web site is available to the user 24x7. If an instance of OPC application fails, the fault is detected and the system administrator is notified in 30 seconds; the system continues taking order requests; another OPC instance is created; and data remains in consistent state."  \nand the following architectural view ![image][image]	\N	t
1024	ComponentViewType	\N	The quality(ies) that is(are) more relevant to views of the component-and-connector viewtype is(are):	\N	t
1025	PeerToPeerSpace	\N	The Peer-to-Peer architectural style provides high scalability and availability. In the context of a file sharing system	\N	t
1026	AdventureBuilderComponentAndConnectorThird	\N	Consider the following view of the Adventure Builder system ![image][image] This view **does not** apply the architectural style	\N	t
1027	LayeredAspectsDataModelOne	\N	In a layered architecture composed by four layers, where the topmost layer is the layer number 1 and the bottommost layer is the layer number 4, which of the layers is more modifiable?	\N	t
1028	AdventureBuilderModuleTwo	\N	Consider the following availability scenario for the Adventure Builder system  \n>"The Consumer Web site is available to the user 24x7. If an instance of OPC application fails, the fault is detected and the system administrator is notified in 30 seconds; the system continues taking order requests; another OPC instance is created; and data remains in consistent state."  \nand the following architectural view ![image][image]	\N	t
1029	PeerToPeerSpace	\N	The Peer-to-Peer architectural style provides high scalability and availability. In the context of a file sharing system	\N	t
1030	ComponentViewType	\N	The quality(ies) that is(are) more relevant to views of the component-and-connector viewtype is(are):	\N	t
1031	Tiers	\N	The Tiers architectural style	\N	t
1032	DVDTopDecomposition	\N	Consider the following decomposition view of the Catalog of DVD case study. ![image][image]	\N	t
1033	GraphitePerformanceScenario	\N	In the context of the *Graphite* case study, consider the following view that represents the internal behavior of the *Carbon* component, where the components `r1,... , rn, w` are threads and `q1, ..., qn` are buffers. This view shows the Graphite's architecture support of ![image][image]	\N	t
1034	OrderPadPortability	\N	Consider the architecture of the Morrison's OrderPad. The decision whether use a Native application or HTML5 for the implementation of the client in the Pad was taken because	\N	t
1035	MicroservicesOne	\N	Consider the architectural solutions for microservices architectures that use the event sourcing technique. This technique has the following advantage	\N	t
1036	GraphitePerformanceScenario	\N	In the context of the *Graphite* case study, consider the following view that represents the internal behavior of the *Carbon* component, where the components `r1,... , rn, w` are threads and `q1, ..., qn` are buffers. This view shows the Graphite's architecture support of ![image][image]	\N	t
1037	MicroservicesOne	\N	Consider the architectural solutions for microservices architectures that use the event sourcing technique. This technique has the following advantage	\N	t
1038	Tiers	\N	The Tiers architectural style	\N	t
1039	DVDTopDecomposition	\N	Consider the following decomposition view of the Catalog of DVD case study. ![image][image]	\N	t
1040	OrderPadPortability	\N	Consider the architecture of the Morrison's OrderPad. The decision whether use a Native application or HTML5 for the implementation of the client in the Pad was taken because	\N	t
1041	CommunicatingProcesses	\N	In the web page of the NGINX HTTP server can be read  \n>"NGINX is a free, open-source, high-performance HTTP server and reverse proxy, as well as an IMAP/POP3 proxy server. (...) Unlike traditional servers, NGINX doesn't rely on threads to handle requests. Instead it uses a much more scalable event-driven (asynchronous) architecture. This architecture uses small, but more importantly, predictable amounts of memory under load."  \nAccording to the above description the most adequate architectural style to represent the performance qualities of NGINX is	\N	t
1042	DVDAutocomplete	\N	Consider the following decomposition views of the Catalog of DVD case study were the *Autocomplete* module is implemented in javascript and executes in a browser. ![image][image]	\N	t
1043	GraphiteAvailabilityScenario	\N	In the context of the *Graphite* case study, consider the following view that represents the internal behavior of the *Carbon* component, where the components `r1,... , rn, w` are threads and `q1, ..., qn` are buffers. The port *read*, which provides an interface to read the data points stored in the queue, can be used, in an enrichment of the view, to illustrate ![image][image]	\N	t
1044	Silk	\N	In the Amazon Silk browser	\N	t
1045	MicroservicesTwo	\N	Suppose that an architect needs to decide whether to follow a modular monolith architecture or a microservices architecture for a new large system. The system to be developed has a complex logic and high volume of requests.	\N	t
1046	GraphiteAvailabilityScenario	\N	In the context of the *Graphite* case study, consider the following view that represents the internal behavior of the *Carbon* component, where the components `r1,... , rn, w` are threads and `q1, ..., qn` are buffers. The port *read*, which provides an interface to read the data points stored in the queue, can be used, in an enrichment of the view, to illustrate ![image][image]	\N	t
1047	Silk	\N	In the Amazon Silk browser	\N	t
1048	MicroservicesTwo	\N	Suppose that an architect needs to decide whether to follow a modular monolith architecture or a microservices architecture for a new large system. The system to be developed has a complex logic and high volume of requests.	\N	t
1049	CommunicatingProcesses	\N	In the web page of the NGINX HTTP server can be read  \n>"NGINX is a free, open-source, high-performance HTTP server and reverse proxy, as well as an IMAP/POP3 proxy server. (...) Unlike traditional servers, NGINX doesn't rely on threads to handle requests. Instead it uses a much more scalable event-driven (asynchronous) architecture. This architecture uses small, but more importantly, predictable amounts of memory under load."  \nAccording to the above description the most adequate architectural style to represent the performance qualities of NGINX is	\N	t
1050	DVDAutocomplete	\N	Consider the following decomposition views of the Catalog of DVD case study were the *Autocomplete* module is implemented in javascript and executes in a browser. ![image][image]	\N	t
1051	AllocationStylesCost	\N	Consider a stakeholder that is particularly concerned about the total cost of the project. When it comes to describing the system using allocation viewtypes is interested in	\N	t
1052	DVDGeneralization	\N	Consider the following generalization view of the Catalog of DVD case study. ![image][image]	\N	t
1053	GraphiteWebapp	\N	In the context of the *Graphite* case study, consider the following application-specific types that are used in a view to represent the internal behavior of the *Webapp* component. ![image][image] This view can show that the architecture fulfills	\N	t
1054	OrderPadIterative	\N	Consider the architecture of the Morrison's OrderPad. In the description of the system can be read:  \n>"The pilot version included some architectural short-cuts that would not work with the full complement of stores. One of these was using a file-transfer to send data to the mainframe rather than MQ, which wouldn't perform well once many stores were active."  \nThis approach means that	\N	t
1055	MicroservicesThree	\N	Consider the architectural solutions for microservices architectures that use the Command Query Responsibility Segregation (CQRS) technique in the context of Event Sourcing. This technique has the following disadvantage	\N	t
1056	OrderPadIterative	\N	Consider the architecture of the Morrison's OrderPad. In the description of the system can be read:  \n>"The pilot version included some architectural short-cuts that would not work with the full complement of stores. One of these was using a file-transfer to send data to the mainframe rather than MQ, which wouldn't perform well once many stores were active."  \nThis approach means that	\N	t
1057	AllocationStylesCost	\N	Consider a stakeholder that is particularly concerned about the total cost of the project. When it comes to describing the system using allocation viewtypes is interested in	\N	t
1058	DVDGeneralization	\N	Consider the following generalization view of the Catalog of DVD case study. ![image][image]	\N	t
1059	GraphiteWebapp	\N	In the context of the *Graphite* case study, consider the following application-specific types that are used in a view to represent the internal behavior of the *Webapp* component. ![image][image] This view can show that the architecture fulfills	\N	t
1060	MicroservicesThree	\N	Consider the architectural solutions for microservices architectures that use the Command Query Responsibility Segregation (CQRS) technique in the context of Event Sourcing. This technique has the following disadvantage	\N	t
1061	AvailabilityOne	\N	Considering the availability architectural quality and the tactics of ping/echo and heartbeat	\N	t
1062	PerformanceOne	\N	To analyse the performance of a system	\N	t
1063	ModifiabilityOne	\N	In a modifiability scenario the environment can be characterized as design time, compile time, build time, initiation time, and runtime.	\N	t
1064	ModuleViewTypeOne	\N	The quality that is more relevant to views of the module viewtype is:	\N	t
1065	ModuleStyleOne	\N	Consider the following description of *Memcached*, which is adapted from its Wiki:  \n>"Memcached is an in-memory key-value store for small chunks of arbitrary data from results of database calls, API calls, or page rendering. It is made up of:  \n-  Client software, which is given a list of available memcached servers.  \n-  A client-based hashing algorithm, which chooses a server based on the "key" input.  \n-  Server software, which stores your values with their keys into an internal hash table.  \n-  Server algorithms, which determine when to throw out old data (if out of memory), or reuse memory.  \n"  \nSuppose that you want to present an architectural view for *Memcached* that represents the above information. Which view is more adequate?	\N	t
1066	ModuleStyleThree	\N	The Generalization architectural style of the module viewtype can be use to support the evolution of a system	\N	t
1087	DVDCatalogOne	\N	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement  \n>"To allow the share of catalogs with family and friends, including some access control."  \nThis requirement requires	\N	t
1067	ComponentAndConnectorViewtypeOne	\N	According to the document that describes the architecture of web services:  \n>"Another critical piece of any distributed system is a load balancer. Load balancers are a principal part of any architecture, as their role is to distribute load across a set of nodes responsible for servicing requests. This allows multiple nodes to transparently service the same function in a system. Their main purpose is to handle a lot of simultaneous connections and route those connections to one of the request nodes, allowing the system to scale to service more requests by just adding nodes."  \nBased on this description, what is the best way to represent the architecture of a system that is using a *load balancer*?	\N	t
1068	ComponentAndConnectorStyleOne	\N	The repository architectural style provides performance because	\N	t
1069	ComponentAndConnectorStyleThree	\N	Typically, Instant Messaging clients have a window to list the contacts of the user, and show in that window the status of each contact (whether it is available, unavailable, busy, etc). Given that the status of a contact may be changed at any time, and that the contact's status is given by the Instant Messaging application of that contact, which architectural style represents best the interaction pattern between these components?	\N	t
1070	AllocationOne	\N	In the software architecture of a system, the Deployment view is best suited for	\N	t
1071	WebApplicationsOne	\N	One of the evolutions in the development of web applications was the appearance of *mashups*, which are described in Wikipedia as follows:  \n>"In web development, a mashup is a web page or application that uses and combines data, presentation or functionality from two or more sources to create new services."  \nKnowing that the sources used by *mashups* do not know about the existence of the *mashups* and that they change frequently, forcing the adaptation of the *mashups* to accommodate those changes, what is the best architecture to minimize the effects of those changes?	\N	t
1072	ScalableArchitectureOne	\N	Consider the following excerpt about the Scalable web architecture and distributed systems case study about two different possible implementations of a global cache  \n>"There are two common forms of global caches (...), when a cached response is not found in the cache, the cache itself becomes responsible for retrieving the missing piece of data from the underlying store. (...) it is the responsibility of request nodes to retrieve any data that is not found in the cache."  \n	\N	t
1073	DVDCatalogOne	\N	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement  \n>"To allow the share of catalogs with family and friends, including some access control."  \nThis requirement requires	\N	t
1074	AdventureBuilderOne	\N	Consider the following architectural view of the Adventure Builder system, designed around the Order Processing Center![image][image]The views **does not** allow the reason about the quality of	\N	t
1075	GraphiteOne	\N	In the Graphite system, in order to improve performance the component *carbon* do not write directly on disk, it uses a buffer instead:	\N	t
1076	ChromeOne	\N	In the description of Chrome case study we can read:  \n *Chrome maintains a single instance of the resource dispatcher, which is shared across all render processes, and runs within the browser kernel process.*  \n The *Resource Dispatcher* contributes to the performance quality because it implements a tactic of	\N	t
1077	SocialCalcOne	\N	In the description of the SocialCalc case study can be read:  \n>"Therefore, on browsers with support for CSS3, we use the box-shadow property to represent multiple peer cursors in the same cell."  \nThis corresponds to the application of	\N	t
1078	OrderPadOne	\N	Consider the architecture of the Morrison's OrderPad. In the description of the system can be read:  \n>"One of these was using a file-transfer to send data to the mainframe rather than MQ, which wouldn't perform well once many stores were active."  \nThis approach means that	\N	t
1079	AggregatesOne	\N	Consider the following decomposition of a domain model into 3 aggregates.![image][image]	\N	t
1080	EventSourcingOne	\N	Command Query Responsibility Segregation (CQRS) technique uses the following architectural styles	\N	t
1081	ModuleViewTypeOne	\N	The quality that is more relevant to views of the module viewtype is:	\N	t
1082	ModuleStyleOne	\N	Consider the following description of *Memcached*, which is adapted from its Wiki:  \n>"Memcached is an in-memory key-value store for small chunks of arbitrary data from results of database calls, API calls, or page rendering. It is made up of:  \n-  Client software, which is given a list of available memcached servers.  \n-  A client-based hashing algorithm, which chooses a server based on the "key" input.  \n-  Server software, which stores your values with their keys into an internal hash table.  \n-  Server algorithms, which determine when to throw out old data (if out of memory), or reuse memory.  \n"  \nSuppose that you want to present an architectural view for *Memcached* that represents the above information. Which view is more adequate?	\N	t
1083	ModuleStyleThree	\N	The Generalization architectural style of the module viewtype can be use to support the evolution of a system	\N	t
1084	ComponentAndConnectorViewtypeOne	\N	According to the document that describes the architecture of web services:  \n>"Another critical piece of any distributed system is a load balancer. Load balancers are a principal part of any architecture, as their role is to distribute load across a set of nodes responsible for servicing requests. This allows multiple nodes to transparently service the same function in a system. Their main purpose is to handle a lot of simultaneous connections and route those connections to one of the request nodes, allowing the system to scale to service more requests by just adding nodes."  \nBased on this description, what is the best way to represent the architecture of a system that is using a *load balancer*?	\N	t
1085	ComponentAndConnectorStyleOne	\N	The repository architectural style provides performance because	\N	t
1086	ScalableArchitectureOne	\N	Consider the following excerpt about the Scalable web architecture and distributed systems case study about two different possible implementations of a global cache  \n>"There are two common forms of global caches (...), when a cached response is not found in the cache, the cache itself becomes responsible for retrieving the missing piece of data from the underlying store. (...) it is the responsibility of request nodes to retrieve any data that is not found in the cache."  \n	\N	t
1088	ComponentAndConnectorStyleThree	\N	Typically, Instant Messaging clients have a window to list the contacts of the user, and show in that window the status of each contact (whether it is available, unavailable, busy, etc). Given that the status of a contact may be changed at any time, and that the contact's status is given by the Instant Messaging application of that contact, which architectural style represents best the interaction pattern between these components?	\N	t
1089	AllocationOne	\N	In the software architecture of a system, the Deployment view is best suited for	\N	t
1090	EventSourcingOne	\N	Command Query Responsibility Segregation (CQRS) technique uses the following architectural styles	\N	t
1091	AdventureBuilderOne	\N	Consider the following architectural view of the Adventure Builder system, designed around the Order Processing Center![image][image]The views **does not** allow the reason about the quality of	\N	t
1092	GraphiteOne	\N	In the Graphite system, in order to improve performance the component *carbon* do not write directly on disk, it uses a buffer instead:	\N	t
1093	WebApplicationsOne	\N	One of the evolutions in the development of web applications was the appearance of *mashups*, which are described in Wikipedia as follows:  \n>"In web development, a mashup is a web page or application that uses and combines data, presentation or functionality from two or more sources to create new services."  \nKnowing that the sources used by *mashups* do not know about the existence of the *mashups* and that they change frequently, forcing the adaptation of the *mashups* to accommodate those changes, what is the best architecture to minimize the effects of those changes?	\N	t
1094	ChromeOne	\N	In the description of Chrome case study we can read:  \n *Chrome maintains a single instance of the resource dispatcher, which is shared across all render processes, and runs within the browser kernel process.*  \n The *Resource Dispatcher* contributes to the performance quality because it implements a tactic of	\N	t
1095	SocialCalcOne	\N	In the description of the SocialCalc case study can be read:  \n>"Therefore, on browsers with support for CSS3, we use the box-shadow property to represent multiple peer cursors in the same cell."  \nThis corresponds to the application of	\N	t
1096	OrderPadOne	\N	Consider the architecture of the Morrison's OrderPad. In the description of the system can be read:  \n>"One of these was using a file-transfer to send data to the mainframe rather than MQ, which wouldn't perform well once many stores were active."  \nThis approach means that	\N	t
1097	AggregatesOne	\N	Consider the following decomposition of a domain model into 3 aggregates.![image][image]	\N	t
1098	AvailabilityOne	\N	Considering the availability architectural quality and the tactics of ping/echo and heartbeat	\N	t
1099	PerformanceOne	\N	To analyse the performance of a system	\N	t
1100	ModifiabilityOne	\N	In a modifiability scenario the environment can be characterized as design time, compile time, build time, initiation time, and runtime.	\N	t
1101	AvailabilityTwo	\N	A voting tactic can be used to	\N	t
1102	PerformanceTwo	\N	Consider a scenario for performance where the arrival of events is stochastic with a distribution where there are peeks of events but the arrival of events over a long period is uniform. The best tactic to apply is	\N	t
1103	ModifiabilityTwo	\N	The main tactic associated with the layered architectural style is:	\N	t
1104	ModuleViewTypeTwo	\N	Consider the kind of relations between components and modules.	\N	t
1105	ModuleStyleTwo	\N	Suppose that you are implementing a module in a system that has a two layered architecture. Knowing that your module belongs to the upper layer (assuming the usual notation for the layer style), this means that you	\N	t
1106	ModuleStyleFour	\N	Using the Aspects architectural style promotes the modifiability of a system because	\N	t
1107	ComponentAndConnectorViewtypeTwo	\N	Consider the concept of interface delegation	\N	t
1108	ComponentAndConnectorStyleTwo	\N	In the Service Oriented Architecture style it is common to have a specialized component, named *Enterprise Service Bus* (ESB). The goal of using of an ESB in a system is	\N	t
1109	ComponentAndConnectorStyleFour	\N	In the description of the Gnutella system can be read:  \n>"The topology of the system changes at runtime as peer components connect and disconnect to the network."  \n	\N	t
1110	AllocationTwo	\N	Consider the install architectural style of the allocation viewtype.	\N	t
1111	WebApplicationsTwo	\N	Web applications went through several evolutions over the last years. One of those evolutions was to make their user interfaces more sophisticated, by leveraging on new technologies available in the browsers, such as, for example, Javascript, to provide a more satisfying user experience. What were the most visible consequences of such an evolution on the typical software architecture of a web application?	\N	t
1112	ScalableArchitectureTwo	\N	Consider the use of a proxy to collapse requests. This corresponds to a tactic of	\N	t
1113	DVDCatalogTwo	\N	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement  \n>"To support multi-platform (Mac, Windows, Linux)"  \nThis requirement requires a change of	\N	t
1114	AdventureBuilderTwo	\N	Consider the following performance/scalability scenario for the Adventure Builder system  \n>"Up to 500 users click to see the catalog of adventure packages following a random distribution over 1 minute; the system is under normal operating conditions; the maximal latency to serve the first page of content is under 5 seconds; average latency for same is less than 2 seconds. If required, the system should easily support an increase in the number of simultaneous requests while maintaining the same latency per request."  \nand the following architectural view![image][image]	\N	t
1115	GraphiteTwo	\N	The *Composer UI* component of Graphite system, described as - *Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL* - to be effective needs to show to the user the changes she performs in the graph such that she has immediate feedback about the result of the changes. To do so, the system needs to implement the tactics of	\N	t
1116	ChromeTwo	\N	In the description of the Chrome case study you can read:  \n *Typing in the Omnibox (URL) bar triggers high-likelihood suggestions, which may similarly kick off a DNS lookup, TCP pre-connect, and even prerender the page in a hidden tab.*  \n This description refers to the qualities of	\N	t
1117	SocialCalcTwo	\N	Consider the architectural views for the SocialCalc system. In the case description can be read:  \n>"The save format is in standard MIME multipart/mixed format, consisting of four text/plain; charset=UTF-8 parts, each part containing newline-delimited text with colon-delimited data fields. The parts are..."  \nFrom the above excerpt can be inferred the need to have	\N	t
1118	OrderPadTwo	\N	Frank Buschmann defines Featuritis as  \n>"Featuritis is the tendency to trade functional coverage for quality - the more functions the earlier they're delivered, the better."  \nIn the OrderPad system the architect regretted not getting performance tests going earlier. The OrderPad system	\N	t
1119	AggregatesTwo	\N	Consider the following decomposition of a domain model into 3 aggregates. If, instead of this decomposition, `Customer` and `Order` were in the same aggregate![image][image]	\N	t
1120	EventSourcingTwo	\N	Consider the architectural solutions for microservices architectures that use the Command Query Responsibility Segregation (CQRS) technique in the context of Event Sourcing. This technique has the following disadvantage	\N	t
1121	ModuleStyleTwo	\N	Suppose that you are implementing a module in a system that has a two layered architecture. Knowing that your module belongs to the upper layer (assuming the usual notation for the layer style), this means that you	\N	t
1122	ModuleStyleFour	\N	Using the Aspects architectural style promotes the modifiability of a system because	\N	t
1123	ComponentAndConnectorViewtypeTwo	\N	Consider the concept of interface delegation	\N	t
1124	ComponentAndConnectorStyleTwo	\N	In the Service Oriented Architecture style it is common to have a specialized component, named *Enterprise Service Bus* (ESB). The goal of using of an ESB in a system is	\N	t
1125	ComponentAndConnectorStyleFour	\N	In the description of the Gnutella system can be read:  \n>"The topology of the system changes at runtime as peer components connect and disconnect to the network."  \n	\N	t
1126	AllocationTwo	\N	Consider the install architectural style of the allocation viewtype.	\N	t
1127	WebApplicationsTwo	\N	Web applications went through several evolutions over the last years. One of those evolutions was to make their user interfaces more sophisticated, by leveraging on new technologies available in the browsers, such as, for example, Javascript, to provide a more satisfying user experience. What were the most visible consequences of such an evolution on the typical software architecture of a web application?	\N	t
1128	AvailabilityTwo	\N	A voting tactic can be used to	\N	t
1129	PerformanceTwo	\N	Consider a scenario for performance where the arrival of events is stochastic with a distribution where there are peeks of events but the arrival of events over a long period is uniform. The best tactic to apply is	\N	t
1130	ModifiabilityTwo	\N	The main tactic associated with the layered architectural style is:	\N	t
1131	AggregatesTwo	\N	Consider the following decomposition of a domain model into 3 aggregates. If, instead of this decomposition, `Customer` and `Order` were in the same aggregate![image][image]	\N	t
1132	EventSourcingTwo	\N	Consider the architectural solutions for microservices architectures that use the Command Query Responsibility Segregation (CQRS) technique in the context of Event Sourcing. This technique has the following disadvantage	\N	t
1133	ModuleViewTypeTwo	\N	Consider the kind of relations between components and modules.	\N	t
1134	ScalableArchitectureTwo	\N	Consider the use of a proxy to collapse requests. This corresponds to a tactic of	\N	t
1135	DVDCatalogTwo	\N	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement  \n>"To support multi-platform (Mac, Windows, Linux)"  \nThis requirement requires a change of	\N	t
1136	AdventureBuilderTwo	\N	Consider the following performance/scalability scenario for the Adventure Builder system  \n>"Up to 500 users click to see the catalog of adventure packages following a random distribution over 1 minute; the system is under normal operating conditions; the maximal latency to serve the first page of content is under 5 seconds; average latency for same is less than 2 seconds. If required, the system should easily support an increase in the number of simultaneous requests while maintaining the same latency per request."  \nand the following architectural view![image][image]	\N	t
1137	GraphiteTwo	\N	The *Composer UI* component of Graphite system, described as - *Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL* - to be effective needs to show to the user the changes she performs in the graph such that she has immediate feedback about the result of the changes. To do so, the system needs to implement the tactics of	\N	t
1138	ChromeTwo	\N	In the description of the Chrome case study you can read:  \n *Typing in the Omnibox (URL) bar triggers high-likelihood suggestions, which may similarly kick off a DNS lookup, TCP pre-connect, and even prerender the page in a hidden tab.*  \n This description refers to the qualities of	\N	t
1139	SocialCalcTwo	\N	Consider the architectural views for the SocialCalc system. In the case description can be read:  \n>"The save format is in standard MIME multipart/mixed format, consisting of four text/plain; charset=UTF-8 parts, each part containing newline-delimited text with colon-delimited data fields. The parts are..."  \nFrom the above excerpt can be inferred the need to have	\N	t
1140	OrderPadTwo	\N	Frank Buschmann defines Featuritis as  \n>"Featuritis is the tendency to trade functional coverage for quality - the more functions the earlier they're delivered, the better."  \nIn the OrderPad system the architect regretted not getting performance tests going earlier. The OrderPad system	\N	t
1141	MicroservicesMonitorability	\N	In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:  \n>"Microservice teams would expect to see (...) for each individual service such as dashboards showing up/down status and a variety of operational and business relevant metrics. Details on circuit breaker status, current throughput and latency are other examples we often encounter in the wild."  \nWhich quality is being referred?	\N	t
1142	NetflixTacticsOne	\N	In the description of the *How Netflix works* can be read:  \n>"The Netflix app or website determines what particular device you are using to watch, and fetches the exact file for that show meant to specially play on your particular device, with a particular video quality based on how fast your internet is at that moment."  \nWhich corresponds to the application of the following tactic	\N	t
1143	LoadBalancer	\N	To which performance tactic can a load balancer be associated?	\N	t
1144	GPComposerUIQuality	\N	Which quality, or qualities, of the Graphite system are described by the sentence: *Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL.*	\N	t
1145	ChromeQualities	\N	Which quality(ies) of Chrome can be inferred from the sentence below?  \n>"By contrast, Chrome works on a multi-process model, which provides process and memory isolation, and a tight security sandbox for each tab. In an increasingly multi-core world, the ability to isolate the processes as well as shield each open tab from other misbehaving pages alone proves that Chrome has a significant performance edge over the competition. In fact, it is important to note that most other browsers have followed suit, or are in the process of migrating to similar architecture."  \n	\N	t
1146	NetflixTacticsOne	\N	In the description of the *How Netflix works* can be read:  \n>"The Netflix app or website determines what particular device you are using to watch, and fetches the exact file for that show meant to specially play on your particular device, with a particular video quality based on how fast your internet is at that moment."  \nWhich corresponds to the application of the following tactic	\N	t
1147	LoadBalancer	\N	To which performance tactic can a load balancer be associated?	\N	t
1148	GPComposerUIQuality	\N	Which quality, or qualities, of the Graphite system are described by the sentence: *Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL.*	\N	t
1149	ChromeQualities	\N	Which quality(ies) of Chrome can be inferred from the sentence below?  \n>"By contrast, Chrome works on a multi-process model, which provides process and memory isolation, and a tight security sandbox for each tab. In an increasingly multi-core world, the ability to isolate the processes as well as shield each open tab from other misbehaving pages alone proves that Chrome has a significant performance edge over the competition. In fact, it is important to note that most other browsers have followed suit, or are in the process of migrating to similar architecture."  \n	\N	t
1150	MicroservicesMonitorability	\N	In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:  \n>"Microservice teams would expect to see (...) for each individual service such as dashboards showing up/down status and a variety of operational and business relevant metrics. Details on circuit breaker status, current throughput and latency are other examples we often encounter in the wild."  \nWhich quality is being referred?	\N	t
1151	LoadBalancer	\N	To which performance tactic can a load balancer be associated?	\N	t
1152	GPComposerUIQuality	\N	Which quality, or qualities, of the Graphite system are described by the sentence: *Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL.*	\N	t
1153	ChromeQualities	\N	Which quality(ies) of Chrome can be inferred from the sentence below?  \n>"By contrast, Chrome works on a multi-process model, which provides process and memory isolation, and a tight security sandbox for each tab. In an increasingly multi-core world, the ability to isolate the processes as well as shield each open tab from other misbehaving pages alone proves that Chrome has a significant performance edge over the competition. In fact, it is important to note that most other browsers have followed suit, or are in the process of migrating to similar architecture."  \n	\N	t
1154	MicroservicesMonitorability	\N	In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:  \n>"Microservice teams would expect to see (...) for each individual service such as dashboards showing up/down status and a variety of operational and business relevant metrics. Details on circuit breaker status, current throughput and latency are other examples we often encounter in the wild."  \nWhich quality is being referred?	\N	t
1155	NetflixTacticsOne	\N	In the description of the *How Netflix works* can be read:  \n>"The Netflix app or website determines what particular device you are using to watch, and fetches the exact file for that show meant to specially play on your particular device, with a particular video quality based on how fast your internet is at that moment."  \nWhich corresponds to the application of the following tactic	\N	t
1156	GPComposerUIQuality	\N	Which quality, or qualities, of the Graphite system are described by the sentence: *Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL.*	\N	t
1157	ChromeQualities	\N	Which quality(ies) of Chrome can be inferred from the sentence below?  \n>"By contrast, Chrome works on a multi-process model, which provides process and memory isolation, and a tight security sandbox for each tab. In an increasingly multi-core world, the ability to isolate the processes as well as shield each open tab from other misbehaving pages alone proves that Chrome has a significant performance edge over the competition. In fact, it is important to note that most other browsers have followed suit, or are in the process of migrating to similar architecture."  \n	\N	t
1158	MicroservicesMonitorability	\N	In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:  \n>"Microservice teams would expect to see (...) for each individual service such as dashboards showing up/down status and a variety of operational and business relevant metrics. Details on circuit breaker status, current throughput and latency are other examples we often encounter in the wild."  \nWhich quality is being referred?	\N	t
1159	NetflixTacticsOne	\N	In the description of the *How Netflix works* can be read:  \n>"The Netflix app or website determines what particular device you are using to watch, and fetches the exact file for that show meant to specially play on your particular device, with a particular video quality based on how fast your internet is at that moment."  \nWhich corresponds to the application of the following tactic	\N	t
1160	LoadBalancer	\N	To which performance tactic can a load balancer be associated?	\N	t
1161	MicroservicesModuleAndComponent	\N	In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:  \n>"As well as the fact that services are independently deployable and scalable, each service also provides a firm module boundary, even allowing for different services to be written in different programming languages. They can also be managed by different teams."  \nFor this description it is relevant to consider the software architecture concept(s) of	\N	t
1212	DataModelTwo	\N	In Facebook it is not possible to have the information about more that one bilion users in a single disk. Therefore, a sharding technique is applied, where the persistent information is split between several database servers, and requests are routed to the right servers for queries and updates. Additionally, due to performance requirements, the information needs to be replicated in several servers. To describe this architecture	\N	t
1162	NetflixTacticsTwo	\N	In the description of the *How Netflix works* can be read:  \n>"What CDNs basically do is, they take the original website and the media content it contains, and copy it across hundreds of servers spread all over the world. So when, say, you log in from Budapest, instead of connecting to the main Netflix server in the United States it will load a ditto copy of it from a CDN server that is the closest to Budapest."  \nWhich corresponds to the application of the following tactic	\N	t
1163	Queues	\N	To which performance tactic can the use of queues be associated?	\N	t
1164	GraphiteScenarioTacticsOne	\N	In the Graphite system the component *carbon* provides to *webapp* components an access interface to the *buffers* in order to improve the quality of	\N	t
1165	ChromeTactics	\N	Which performance tactic is referred in the following description of Chrome?  \n>"The ability of the browser to optimize the order, priority, and latency of each network resource is one of the most critical contributors to the overall user experience. You may not be aware of it, but Chrome's network stack is, quite literally, getting smarter every day, trying to hide or decrease the latency cost of each resource: it learns likely DNS lookups, it remembers the topology of the web, it pre-connects to likely destination targets, and more. From the outside, it presents itself as a simple resource fetching mechanism, but from the inside it is an elaborate and a fascinating case study for how to optimize web performance and deliver the best experience to the user."  \n	\N	t
1166	NetflixTacticsTwo	\N	In the description of the *How Netflix works* can be read:  \n>"What CDNs basically do is, they take the original website and the media content it contains, and copy it across hundreds of servers spread all over the world. So when, say, you log in from Budapest, instead of connecting to the main Netflix server in the United States it will load a ditto copy of it from a CDN server that is the closest to Budapest."  \nWhich corresponds to the application of the following tactic	\N	t
1167	Queues	\N	To which performance tactic can the use of queues be associated?	\N	t
1168	GraphiteScenarioTacticsOne	\N	In the Graphite system the component *carbon* provides to *webapp* components an access interface to the *buffers* in order to improve the quality of	\N	t
1169	ChromeTactics	\N	Which performance tactic is referred in the following description of Chrome?  \n>"The ability of the browser to optimize the order, priority, and latency of each network resource is one of the most critical contributors to the overall user experience. You may not be aware of it, but Chrome's network stack is, quite literally, getting smarter every day, trying to hide or decrease the latency cost of each resource: it learns likely DNS lookups, it remembers the topology of the web, it pre-connects to likely destination targets, and more. From the outside, it presents itself as a simple resource fetching mechanism, but from the inside it is an elaborate and a fascinating case study for how to optimize web performance and deliver the best experience to the user."  \n	\N	t
1170	MicroservicesModuleAndComponent	\N	In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:  \n>"As well as the fact that services are independently deployable and scalable, each service also provides a firm module boundary, even allowing for different services to be written in different programming languages. They can also be managed by different teams."  \nFor this description it is relevant to consider the software architecture concept(s) of	\N	t
1171	Queues	\N	To which performance tactic can the use of queues be associated?	\N	t
1172	GraphiteScenarioTacticsOne	\N	In the Graphite system the component *carbon* provides to *webapp* components an access interface to the *buffers* in order to improve the quality of	\N	t
1173	ChromeTactics	\N	Which performance tactic is referred in the following description of Chrome?  \n>"The ability of the browser to optimize the order, priority, and latency of each network resource is one of the most critical contributors to the overall user experience. You may not be aware of it, but Chrome's network stack is, quite literally, getting smarter every day, trying to hide or decrease the latency cost of each resource: it learns likely DNS lookups, it remembers the topology of the web, it pre-connects to likely destination targets, and more. From the outside, it presents itself as a simple resource fetching mechanism, but from the inside it is an elaborate and a fascinating case study for how to optimize web performance and deliver the best experience to the user."  \n	\N	t
1174	MicroservicesModuleAndComponent	\N	In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:  \n>"As well as the fact that services are independently deployable and scalable, each service also provides a firm module boundary, even allowing for different services to be written in different programming languages. They can also be managed by different teams."  \nFor this description it is relevant to consider the software architecture concept(s) of	\N	t
1175	NetflixTacticsTwo	\N	In the description of the *How Netflix works* can be read:  \n>"What CDNs basically do is, they take the original website and the media content it contains, and copy it across hundreds of servers spread all over the world. So when, say, you log in from Budapest, instead of connecting to the main Netflix server in the United States it will load a ditto copy of it from a CDN server that is the closest to Budapest."  \nWhich corresponds to the application of the following tactic	\N	t
1176	GraphiteScenarioTacticsOne	\N	In the Graphite system the component *carbon* provides to *webapp* components an access interface to the *buffers* in order to improve the quality of	\N	t
1177	ChromeTactics	\N	Which performance tactic is referred in the following description of Chrome?  \n>"The ability of the browser to optimize the order, priority, and latency of each network resource is one of the most critical contributors to the overall user experience. You may not be aware of it, but Chrome's network stack is, quite literally, getting smarter every day, trying to hide or decrease the latency cost of each resource: it learns likely DNS lookups, it remembers the topology of the web, it pre-connects to likely destination targets, and more. From the outside, it presents itself as a simple resource fetching mechanism, but from the inside it is an elaborate and a fascinating case study for how to optimize web performance and deliver the best experience to the user."  \n	\N	t
1178	MicroservicesModuleAndComponent	\N	In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:  \n>"As well as the fact that services are independently deployable and scalable, each service also provides a firm module boundary, even allowing for different services to be written in different programming languages. They can also be managed by different teams."  \nFor this description it is relevant to consider the software architecture concept(s) of	\N	t
1179	NetflixTacticsTwo	\N	In the description of the *How Netflix works* can be read:  \n>"What CDNs basically do is, they take the original website and the media content it contains, and copy it across hundreds of servers spread all over the world. So when, say, you log in from Budapest, instead of connecting to the main Netflix server in the United States it will load a ditto copy of it from a CDN server that is the closest to Budapest."  \nWhich corresponds to the application of the following tactic	\N	t
1180	Queues	\N	To which performance tactic can the use of queues be associated?	\N	t
1181	ModifiabilityResponseMeasure	\N	A response measure of a modifiability scenario is	\N	t
1182	IterativeDesign	\N	Designing an architecture	\N	t
1183	Decomposition	\N	The Decomposition architectural style of the Module viewtype	\N	t
1184	ChromeTabSecurity	\N	In the Chrome system the use of a process per tab results form the application of a tactic of	\N	t
1185	SocialCalcTacticsOne	\N	In the description of the SocialCalc case study can be read:  \n>"As the user scrolls the spreadsheet through our custom-drawn scroll bars, we dynamically update the innerHTML of the pre-drawn \extsc{<td>} elements. This means we don't need to create or destroy any \extsc{<tr>} or \extsc{<td>} elements in many common cases, which greatly speeds up response time."  \nThis corresponds to the application of	\N	t
1186	ChromeTabSecurity	\N	In the Chrome system the use of a process per tab results form the application of a tactic of	\N	t
1187	SocialCalcTacticsOne	\N	In the description of the SocialCalc case study can be read:  \n>"As the user scrolls the spreadsheet through our custom-drawn scroll bars, we dynamically update the innerHTML of the pre-drawn \extsc{<td>} elements. This means we don't need to create or destroy any \extsc{<tr>} or \extsc{<td>} elements in many common cases, which greatly speeds up response time."  \nThis corresponds to the application of	\N	t
1188	ModifiabilityResponseMeasure	\N	A response measure of a modifiability scenario is	\N	t
1189	IterativeDesign	\N	Designing an architecture	\N	t
1190	Decomposition	\N	The Decomposition architectural style of the Module viewtype	\N	t
1191	UsesCalls	\N	A function call is not necessarily a uses relation of the Uses architectural style of the Module viewtype because	\N	t
1192	ChromePredictor	\N	In the description of the Chrome system can be read  \n>"The goal of the predictor is to evaluate the likelihood of its success, and then to trigger the activity if resources are available."  \nThe above sentence refer to	\N	t
1193	AvailabilityVotingFirst	\N	There are several tactics to satisfy availability requirements, which may be applied depending on the concrete requirement that we want to satisfy. Assuming that you want to detect faults of type *response* in your system, which tactic is more adequate?	\N	t
1194	LowArchitecturalImpact	\N	Consider an architecturally significant requirement (ASR) that has a low impact on the architecture but a high business value	\N	t
1195	SocialCalcTacticsTwo	\N	In the description of the SocialCalc case study can be read:  \n>"A simple improvement is for each client to broadcast its cursor position to other users, so everyone can see which cells are being worked on."  \nThis sentence describes a tactic for usability which is	\N	t
1196	AvailabilityVotingFirst	\N	There are several tactics to satisfy availability requirements, which may be applied depending on the concrete requirement that we want to satisfy. Assuming that you want to detect faults of type *response* in your system, which tactic is more adequate?	\N	t
1197	LowArchitecturalImpact	\N	Consider an architecturally significant requirement (ASR) that has a low impact on the architecture but a high business value	\N	t
1198	UsesCalls	\N	A function call is not necessarily a uses relation of the Uses architectural style of the Module viewtype because	\N	t
1199	ChromePredictor	\N	In the description of the Chrome system can be read  \n>"The goal of the predictor is to evaluate the likelihood of its success, and then to trigger the activity if resources are available."  \nThe above sentence refer to	\N	t
1200	SocialCalcTacticsTwo	\N	In the description of the SocialCalc case study can be read:  \n>"A simple improvement is for each client to broadcast its cursor position to other users, so everyone can see which cells are being worked on."  \nThis sentence describes a tactic for usability which is	\N	t
1201	Layered	\N	Consider the Layered architectural style of the Module viewtype	\N	t
1202	DataModelOne	\N	The detail that can be used in a view of the Data Model viewtype can be conceptual, logical or physical.	\N	t
1203	ComponentAndConnectorOne	\N	In the component-and-connector viewtype connectors can be complex, which means that they provide a rich set of qualities to the interaction between the components that they connect. These complex connectors can be documented in another view using a set of components interacting through simpler connectors.	\N	t
1204	PipesFilters	\N	Consider that you intend to develop a system where it is necessary to change the emails received by the server (for instance, to remove potential virus or URLs for phishing sites). The goal is that each email is processed by this system before it is sent to other servers or it is stored locally. Additionally, the system should be easily modified to support new kinds of transformations. Which style is more suitable to satisfy these requirements?	\N	t
1205	SOA	\N	Consider the Service-Oriented Architecture architectural style	\N	t
1206	ComponentAndConnectorOne	\N	In the component-and-connector viewtype connectors can be complex, which means that they provide a rich set of qualities to the interaction between the components that they connect. These complex connectors can be documented in another view using a set of components interacting through simpler connectors.	\N	t
1207	PipesFilters	\N	Consider that you intend to develop a system where it is necessary to change the emails received by the server (for instance, to remove potential virus or URLs for phishing sites). The goal is that each email is processed by this system before it is sent to other servers or it is stored locally. Additionally, the system should be easily modified to support new kinds of transformations. Which style is more suitable to satisfy these requirements?	\N	t
1208	SOA	\N	Consider the Service-Oriented Architecture architectural style	\N	t
1209	Layered	\N	Consider the Layered architectural style of the Module viewtype	\N	t
1210	DataModelOne	\N	The detail that can be used in a view of the Data Model viewtype can be conceptual, logical or physical.	\N	t
1211	Aspects	\N	Using the Aspects architectural style promotes the modifiability of a system because	\N	t
1213	ComponentAndConnectorTwo	\N	Consider the Component-and-Connector viewtype	\N	t
1214	PeerToPeer	\N	Consider the peer-to-peer architectural style	\N	t
1215	Tiers	\N	The Tiers architectural style	\N	t
1219	DataModelTwo	\N	In Facebook it is not possible to have the information about more that one bilion users in a single disk. Therefore, a sharding technique is applied, where the persistent information is split between several database servers, and requests are routed to the right servers for queries and updates. Additionally, due to performance requirements, the information needs to be replicated in several servers. To describe this architecture	\N	t
1220	ComponentAndConnectorTwo	\N	Consider the Component-and-Connector viewtype	\N	t
1221	AllocationStylesCost	\N	Consider a stakeholder that is particularly concerned about the total cost of the project. When it comes to describing the system using allocation viewtypes she is interested in	\N	t
1222	DVDCatalogMeta	\N	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement  \n>"The application should support other kinds of catalogs (CDs, games, books, ...)."  \nThis requirement requires a change of	\N	t
1223	GraphiteClientServer	\N	In Graphite system, in order to generate up-to-date graphs, the *WebApp* component interacts with the *Carbon* component. The interaction between these two components follows the architectural style	\N	t
1224	ChromeCommunicatingProcesses	\N	In Chrome system, to show that it provides availability when the javascript code executing in a tab crashes, and security when the javascript code executing in a tab tries to access the information in another tab, it is necessary to design	\N	t
1225	AggregateAndEventSourcing	\N	How can be guaranteed that the update of an aggregate and the publishing of an event about the update is an atomic action	\N	t
1226	ChromeCommunicatingProcesses	\N	In Chrome system, to show that it provides availability when the javascript code executing in a tab crashes, and security when the javascript code executing in a tab tries to access the information in another tab, it is necessary to design	\N	t
1227	AggregateAndEventSourcing	\N	How can be guaranteed that the update of an aggregate and the publishing of an event about the update is an atomic action	\N	t
1228	AllocationStylesCost	\N	Consider a stakeholder that is particularly concerned about the total cost of the project. When it comes to describing the system using allocation viewtypes she is interested in	\N	t
1229	DVDCatalogMeta	\N	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement  \n>"The application should support other kinds of catalogs (CDs, games, books, ...)."  \nThis requirement requires a change of	\N	t
1230	GraphiteClientServer	\N	In Graphite system, in order to generate up-to-date graphs, the *WebApp* component interacts with the *Carbon* component. The interaction between these two components follows the architectural style	\N	t
1231	WorkAssignment	\N	The Work-assignment is an architectural style of the allocation viewtype, where	\N	t
1232	DVDCatalogMobile	\N	Consider the module viewtype views of the Catalog of DVD application. The architect knows about a new requirement  \n>"To support iPhone, iPad, Android versions with sync, which allows offline use of the application in the mobile device and data synchronization to occur when a connection is available"  \nThis requirement requires a change of	\N	t
1233	GraphiteCommunicationProcesses	\N	In Graphite system the *receiver* and the *writer threads* support asynchronous writing of metrics to optimize disk accesses. The interaction between these two components follow the architectural style	\N	t
1234	ChromeDynamicReconfiguration	\N	In Chrome system, to show that it provides mobility qualities by managing the number of tab, it is necessary to use	\N	t
1235	EventSourcing	\N	Event Sourcing is a technique that use the following architectural style	\N	t
1236	GraphiteCommunicationProcesses	\N	In Graphite system the *receiver* and the *writer threads* support asynchronous writing of metrics to optimize disk accesses. The interaction between these two components follow the architectural style	\N	t
1237	ChromeDynamicReconfiguration	\N	In Chrome system, to show that it provides mobility qualities by managing the number of tab, it is necessary to use	\N	t
1238	EventSourcing	\N	Event Sourcing is a technique that use the following architectural style	\N	t
1239	WorkAssignment	\N	The Work-assignment is an architectural style of the allocation viewtype, where	\N	t
1240	DVDCatalogMobile	\N	Consider the module viewtype views of the Catalog of DVD application. The architect knows about a new requirement  \n>"To support iPhone, iPad, Android versions with sync, which allows offline use of the application in the mobile device and data synchronization to occur when a connection is available"  \nThis requirement requires a change of	\N	t
\.


--
-- Data for Name: quiz_has_question; Type: TABLE DATA; Schema: public; Owner: pedro
--

COPY public.quiz_has_question (quiz_id, question_id) FROM stdin;
1	1
1	2
1	3
1	4
1	5
1	6
1	7
1	8
1	9
1	10
1	11
1	12
1	13
1	14
1	15
1	16
1	17
1	18
1	19
1	20
2	21
2	22
2	23
2	24
2	25
2	26
2	27
2	28
2	29
2	30
2	31
2	32
2	33
2	34
2	35
2	36
2	37
2	38
2	39
2	40
3	41
3	42
3	43
3	44
3	45
3	46
3	47
3	48
3	49
3	50
3	51
3	52
3	53
3	54
3	55
3	56
3	57
3	58
3	59
3	60
4	61
4	62
4	63
4	64
4	65
4	66
4	67
4	68
4	69
4	70
4	71
4	72
4	73
4	74
4	75
4	76
4	77
4	78
4	79
4	80
4	81
4	82
4	83
4	84
4	85
4	86
4	87
4	88
4	89
4	90
5	91
5	92
5	93
5	94
5	95
5	96
5	97
5	98
5	99
5	100
5	101
5	102
5	103
5	104
5	105
5	106
5	107
5	108
5	109
5	110
5	111
5	112
5	113
5	114
5	115
5	116
5	117
5	118
5	119
5	120
6	121
6	122
6	123
6	124
6	125
6	126
6	127
6	128
6	129
6	130
6	131
6	132
6	133
6	134
6	135
6	136
6	137
6	138
6	139
6	140
6	141
6	142
6	143
6	144
6	145
6	146
6	147
6	148
6	149
6	150
7	151
7	152
7	153
7	154
7	155
7	156
7	157
7	158
7	159
7	160
7	161
7	162
7	163
7	164
7	165
7	166
7	167
7	168
7	169
7	170
7	171
7	172
7	173
7	174
7	175
7	176
7	177
7	178
7	179
7	180
8	181
8	182
8	183
8	184
8	185
8	186
8	187
8	188
8	189
8	190
8	191
8	192
8	193
8	194
8	195
8	196
8	197
8	198
8	199
8	200
8	201
8	202
8	203
8	204
8	205
8	206
8	207
8	208
8	209
8	210
9	211
9	212
9	213
9	214
9	215
9	216
9	217
9	218
9	219
9	220
9	221
9	222
9	223
9	224
9	225
9	226
9	227
9	228
9	229
9	230
9	231
9	232
9	233
9	234
9	235
9	236
9	237
9	238
9	239
9	240
10	241
10	242
10	243
10	244
10	245
10	246
10	247
10	248
10	249
10	250
10	251
10	252
10	253
10	254
10	255
10	256
10	257
10	258
10	259
10	260
10	261
10	262
10	263
10	264
10	265
10	266
10	267
10	268
10	269
10	270
11	271
11	272
11	273
11	274
11	275
11	276
11	277
11	278
11	279
11	280
11	281
11	282
11	283
11	284
11	285
11	286
11	287
11	288
11	289
11	290
11	291
11	292
11	293
11	294
11	295
11	296
11	297
11	298
11	299
11	300
12	301
12	302
12	303
12	304
12	305
13	306
13	307
13	308
13	309
13	310
14	311
14	312
14	313
14	314
14	315
15	316
15	317
15	318
15	319
15	320
16	321
16	322
16	323
16	324
16	325
17	326
17	327
17	328
17	329
17	330
18	331
18	332
18	333
18	334
18	335
19	336
19	337
19	338
19	339
19	340
20	341
20	342
20	343
20	344
20	345
21	346
21	347
21	348
21	349
21	350
22	351
22	352
22	353
22	354
22	355
23	356
23	357
23	358
23	359
23	360
24	361
24	362
24	363
24	364
24	365
25	366
25	367
25	368
25	369
25	370
26	371
26	372
26	373
26	374
26	375
27	376
27	377
27	378
27	379
27	380
28	381
28	382
28	383
28	384
28	385
29	386
29	387
29	388
29	389
29	390
30	391
30	392
30	393
30	394
30	395
31	396
31	397
31	398
31	399
31	400
32	401
32	402
32	403
32	404
32	405
33	406
33	407
33	408
33	409
33	410
34	411
34	412
34	413
34	414
34	415
35	416
35	417
35	418
35	419
35	420
36	421
36	422
36	423
36	424
36	425
36	426
36	427
36	428
36	429
36	430
36	431
36	432
36	433
36	434
36	435
36	436
36	437
36	438
36	439
36	440
36	441
36	442
36	443
36	444
36	445
36	446
36	447
36	448
36	449
36	450
37	451
37	452
37	453
37	454
37	455
37	456
37	457
37	458
37	459
37	460
37	461
37	462
37	463
37	464
37	465
37	466
37	467
37	468
37	469
37	470
37	471
37	472
37	473
37	474
37	475
37	476
37	477
37	478
37	479
37	480
38	481
38	482
38	483
38	484
38	485
38	486
38	487
38	488
38	489
38	490
38	491
38	492
38	493
38	494
38	495
38	496
38	497
38	498
38	499
38	500
38	501
38	502
38	503
38	504
38	505
38	506
38	507
38	508
38	509
38	510
39	511
39	512
39	513
39	514
39	515
39	516
39	517
39	518
39	519
39	520
39	521
39	522
39	523
39	524
39	525
39	526
39	527
39	528
39	529
39	530
39	531
39	532
39	533
39	534
39	535
39	536
39	537
39	538
39	539
39	540
40	541
40	542
40	543
40	544
40	545
41	546
41	547
41	548
41	549
41	550
42	551
42	552
42	553
42	554
42	555
43	556
43	557
43	558
43	559
43	560
44	561
44	562
44	563
44	564
44	565
45	566
45	567
45	568
45	569
45	570
46	571
46	572
46	573
46	574
46	575
47	576
47	577
47	578
47	579
47	580
48	581
48	582
48	583
48	584
48	585
49	586
49	587
49	588
49	589
49	590
50	591
50	592
50	593
50	594
50	595
51	596
51	597
51	598
51	599
51	600
52	601
52	602
52	603
52	604
52	605
53	606
53	607
53	608
53	609
53	610
54	611
54	612
54	613
54	614
54	615
55	616
55	617
55	618
55	619
55	620
56	621
56	622
56	623
56	624
56	625
57	626
57	627
57	628
57	629
57	630
58	631
58	632
58	633
58	634
58	635
59	636
59	637
59	638
59	639
59	640
60	641
60	642
60	643
60	644
60	645
61	646
61	647
61	648
61	649
61	650
62	651
62	652
62	653
62	654
62	655
63	656
63	657
63	658
63	659
63	660
64	661
64	662
64	663
64	664
64	665
64	666
64	667
64	668
64	669
64	670
64	671
64	672
64	673
64	674
64	675
64	676
64	677
64	678
64	679
64	680
64	681
64	682
64	683
64	684
64	685
64	686
64	687
64	688
64	689
64	690
65	691
65	692
65	693
65	694
65	695
65	696
65	697
65	698
65	699
65	700
65	701
65	702
65	703
65	704
65	705
65	706
65	707
65	708
65	709
65	710
65	711
65	712
65	713
65	714
65	715
65	716
65	717
65	718
65	719
65	720
66	721
66	722
66	723
66	724
66	725
66	726
66	727
66	728
66	729
66	730
66	731
66	732
66	733
66	734
66	735
66	736
66	737
66	738
66	739
66	740
66	741
66	742
66	743
66	744
66	745
66	746
66	747
66	748
66	749
66	750
67	751
67	752
67	753
67	754
67	755
67	756
67	757
67	758
67	759
67	760
67	761
67	762
67	763
67	764
67	765
67	766
67	767
67	768
67	769
67	770
67	771
67	772
67	773
67	774
67	775
67	776
67	777
67	778
67	779
67	780
68	781
68	782
68	783
68	784
68	785
69	786
69	787
69	788
69	789
69	790
70	791
70	792
70	793
70	794
70	795
71	796
71	797
71	798
71	799
71	800
72	801
72	802
72	803
72	804
72	805
73	806
73	807
73	808
73	809
73	810
74	811
74	812
74	813
74	814
74	815
75	816
75	817
75	818
75	819
75	820
76	821
76	822
76	823
76	824
76	825
77	826
77	827
77	828
77	829
77	830
78	831
78	832
78	833
78	834
78	835
79	836
79	837
79	838
79	839
79	840
80	841
80	842
80	843
80	844
80	845
81	846
81	847
81	848
81	849
81	850
82	851
82	852
82	853
82	854
82	855
83	856
83	857
83	858
83	859
83	860
84	861
84	862
84	863
84	864
84	865
84	866
84	867
84	868
84	869
84	870
84	871
84	872
84	873
84	874
84	875
84	876
84	877
84	878
84	879
84	880
85	881
85	882
85	883
85	884
85	885
85	886
85	887
85	888
85	889
85	890
85	891
85	892
85	893
85	894
85	895
85	896
85	897
85	898
85	899
85	900
86	901
86	902
86	903
86	904
86	905
86	906
86	907
86	908
86	909
86	910
86	911
86	912
86	913
86	914
86	915
86	916
86	917
86	918
86	919
86	920
87	921
87	922
87	923
87	924
87	925
87	926
87	927
87	928
87	929
87	930
87	931
87	932
87	933
87	934
87	935
87	936
87	937
87	938
87	939
87	940
88	941
88	942
88	943
88	944
88	945
89	946
89	947
89	948
89	949
89	950
90	951
90	952
90	953
90	954
90	955
91	956
91	957
91	958
91	959
91	960
92	961
92	962
92	963
92	964
92	965
93	966
93	967
93	968
93	969
93	970
94	971
94	972
94	973
94	974
94	975
95	976
95	977
95	978
95	979
95	980
96	981
96	982
96	983
96	984
96	985
97	986
97	987
97	988
97	989
97	990
98	991
98	992
98	993
98	994
98	995
99	996
99	997
99	998
99	999
99	1000
100	1001
100	1002
100	1003
100	1004
100	1005
101	1006
101	1007
101	1008
101	1009
101	1010
102	1011
102	1012
102	1013
102	1014
102	1015
103	1016
103	1017
103	1018
103	1019
103	1020
104	1021
104	1022
104	1023
104	1024
104	1025
105	1026
105	1027
105	1028
105	1029
105	1030
106	1031
106	1032
106	1033
106	1034
106	1035
107	1036
107	1037
107	1038
107	1039
107	1040
108	1041
108	1042
108	1043
108	1044
108	1045
109	1046
109	1047
109	1048
109	1049
109	1050
110	1051
110	1052
110	1053
110	1054
110	1055
111	1056
111	1057
111	1058
111	1059
111	1060
112	1061
112	1062
112	1063
112	1064
112	1065
112	1066
112	1067
112	1068
112	1069
112	1070
112	1071
112	1072
112	1073
112	1074
112	1075
112	1076
112	1077
112	1078
112	1079
112	1080
113	1081
113	1082
113	1083
113	1084
113	1085
113	1086
113	1087
113	1088
113	1089
113	1090
113	1091
113	1092
113	1093
113	1094
113	1095
113	1096
113	1097
113	1098
113	1099
113	1100
114	1101
114	1102
114	1103
114	1104
114	1105
114	1106
114	1107
114	1108
114	1109
114	1110
114	1111
114	1112
114	1113
114	1114
114	1115
114	1116
114	1117
114	1118
114	1119
114	1120
115	1121
115	1122
115	1123
115	1124
115	1125
115	1126
115	1127
115	1128
115	1129
115	1130
115	1131
115	1132
115	1133
115	1134
115	1135
115	1136
115	1137
115	1138
115	1139
115	1140
116	1141
116	1142
116	1143
116	1144
116	1145
117	1146
117	1147
117	1148
117	1149
117	1150
118	1151
118	1152
118	1153
118	1154
118	1155
119	1156
119	1157
119	1158
119	1159
119	1160
120	1161
120	1162
120	1163
120	1164
120	1165
121	1166
121	1167
121	1168
121	1169
121	1170
122	1171
122	1172
122	1173
122	1174
122	1175
123	1176
123	1177
123	1178
123	1179
123	1180
124	1181
124	1182
124	1183
124	1184
124	1185
125	1186
125	1187
125	1188
125	1189
125	1190
126	1191
126	1192
126	1193
126	1194
126	1195
127	1196
127	1197
127	1198
127	1199
127	1200
128	1201
128	1202
128	1203
128	1204
128	1205
129	1206
129	1207
129	1208
129	1209
129	1210
130	1211
130	1212
130	1213
130	1214
130	1215
131	1216
131	1217
131	1218
131	1219
131	1220
132	1221
132	1222
132	1223
132	1224
132	1225
133	1226
133	1227
133	1228
133	1229
133	1230
134	1231
134	1232
134	1233
134	1234
134	1235
135	1236
135	1237
135	1238
135	1239
135	1240
\.


--
-- Data for Name: quizzes; Type: TABLE DATA; Schema: public; Owner: pedro
--

COPY public.quizzes (id, title, year, type, series, version) FROM stdin;
1	..-data-2010-primeiro-exame-20110113-companion-en	\N	\N	\N	\N
2	..-data-2011-exam1-exame-20120109-companion-en	\N	\N	\N	\N
3	..-data-2011-exam2-exame-20120203-companion-en	\N	\N	\N	\N
4	..-data-2012-exam1-exame-20130109-companion-en	\N	\N	\N	\N
5	..-data-2012-exam2-exame-20130201-companion-en	\N	\N	\N	\N
6	..-data-2013-exam1-exame-20140110-companion-en	\N	\N	\N	\N
7	..-data-2013-exam2-exame-20140130-companion-en	\N	\N	\N	\N
8	..-data-2014-exam-exam20150109-exame-20150109-companion-A	\N	\N	\N	\N
9	..-data-2014-exam-exam20150109-exame-20150109-companion-B	\N	\N	\N	\N
10	..-data-2014-exam-exam20150127-exame-20150127-companion-A	\N	\N	\N	\N
11	..-data-2014-exam-exam20150127-exame-20150127-companion-B	\N	\N	\N	\N
12	..-data-2014-test-1-test-11A-17co╠Бpias	\N	\N	\N	\N
13	..-data-2014-test-1-test-12A-24co╠Бpias	\N	\N	\N	\N
14	..-data-2014-test-1-test-13A-17co╠Бpias	\N	\N	\N	\N
15	..-data-2014-test-1-test-14A-24co╠Бpias	\N	\N	\N	\N
16	..-data-2014-test-2-test-21A-18co╠Бpias	\N	\N	\N	\N
17	..-data-2014-test-2-test-22A-18co╠Бpias	\N	\N	\N	\N
18	..-data-2014-test-2-test-23A-18co╠Бpias	\N	\N	\N	\N
19	..-data-2014-test-2-test-24A-18co╠Бpias	\N	\N	\N	\N
20	..-data-2014-test-3-test-31A-18copias	\N	\N	\N	\N
21	..-data-2014-test-3-test-32A-18copias	\N	\N	\N	\N
22	..-data-2014-test-3-test-33A-18copias	\N	\N	\N	\N
23	..-data-2014-test-3-test-34A-18copias	\N	\N	\N	\N
24	..-data-2014-test-4-test-41A-17copias	\N	\N	\N	\N
25	..-data-2014-test-4-test-42A-16copias	\N	\N	\N	\N
26	..-data-2014-test-4-test-43A-16copias	\N	\N	\N	\N
27	..-data-2014-test-4-test-44A-18copias	\N	\N	\N	\N
28	..-data-2014-test-5-test-51A-17copias	\N	\N	\N	\N
29	..-data-2014-test-5-test-52A-16copias	\N	\N	\N	\N
30	..-data-2014-test-5-test-53A-16copias	\N	\N	\N	\N
31	..-data-2014-test-5-test-54A-18copias	\N	\N	\N	\N
32	..-data-2014-test-6-test-61A-17copias	\N	\N	\N	\N
33	..-data-2014-test-6-test-62A-16copias	\N	\N	\N	\N
34	..-data-2014-test-6-test-63A-16copias	\N	\N	\N	\N
35	..-data-2014-test-6-test-64A-18copias	\N	\N	\N	\N
36	..-data-2015-exams-20160108Exam-exame-20160108-companion-A	\N	\N	\N	\N
37	..-data-2015-exams-20160108Exam-exame-20160108-companion-B	\N	\N	\N	\N
38	..-data-2015-exams-20160126Exam-exame-20160126-companion-A	\N	\N	\N	\N
39	..-data-2015-exams-20160126Exam-exame-20160126-companion-B	\N	\N	\N	\N
40	..-data-2015-test-1-test-11A	\N	\N	\N	\N
41	..-data-2015-test-1-test-11B	\N	\N	\N	\N
42	..-data-2015-test-1-test-12A	\N	\N	\N	\N
43	..-data-2015-test-1-test-12B	\N	\N	\N	\N
44	..-data-2015-test-1-test-13A	\N	\N	\N	\N
45	..-data-2015-test-1-test-13B	\N	\N	\N	\N
46	..-data-2015-test-2-test-21A	\N	\N	\N	\N
47	..-data-2015-test-2-test-21B	\N	\N	\N	\N
48	..-data-2015-test-2-test-22A	\N	\N	\N	\N
49	..-data-2015-test-2-test-22B	\N	\N	\N	\N
50	..-data-2015-test-2-test-23A	\N	\N	\N	\N
51	..-data-2015-test-2-test-23B	\N	\N	\N	\N
52	..-data-2015-test-3-test-31A	\N	\N	\N	\N
53	..-data-2015-test-3-test-31B	\N	\N	\N	\N
54	..-data-2015-test-3-test-32A	\N	\N	\N	\N
55	..-data-2015-test-3-test-32B	\N	\N	\N	\N
56	..-data-2015-test-3-test-33A	\N	\N	\N	\N
57	..-data-2015-test-3-test-33B	\N	\N	\N	\N
58	..-data-2015-test-4-test-41A	\N	\N	\N	\N
59	..-data-2015-test-4-test-41B	\N	\N	\N	\N
60	..-data-2015-test-4-test-42A	\N	\N	\N	\N
61	..-data-2015-test-4-test-42B	\N	\N	\N	\N
62	..-data-2015-test-4-test-43A	\N	\N	\N	\N
63	..-data-2015-test-4-test-43B	\N	\N	\N	\N
64	..-data-2016-20170113Exam-exame-20170113-companion-A	\N	\N	\N	\N
65	..-data-2016-20170113Exam-exame-20170113-companion-B	\N	\N	\N	\N
66	..-data-2016-20170131Exam-exame-20170131-companion-A	\N	\N	\N	\N
67	..-data-2016-20170131Exam-exame-20170131-companion-B	\N	\N	\N	\N
68	..-data-2016-test-1-test-11A	\N	\N	\N	\N
69	..-data-2016-test-1-test-11B	\N	\N	\N	\N
70	..-data-2016-test-1-test-12A	\N	\N	\N	\N
71	..-data-2016-test-1-test-12B	\N	\N	\N	\N
72	..-data-2016-test-2-test-21A	\N	\N	\N	\N
73	..-data-2016-test-2-test-21B	\N	\N	\N	\N
74	..-data-2016-test-2-test-22A	\N	\N	\N	\N
75	..-data-2016-test-2-test-22B	\N	\N	\N	\N
76	..-data-2016-test-3-test-31A	\N	\N	\N	\N
77	..-data-2016-test-3-test-31B	\N	\N	\N	\N
78	..-data-2016-test-3-test-32A	\N	\N	\N	\N
79	..-data-2016-test-3-test-32B	\N	\N	\N	\N
80	..-data-2016-test-4-test-41A	\N	\N	\N	\N
81	..-data-2016-test-4-test-41B	\N	\N	\N	\N
82	..-data-2016-test-4-test-42A	\N	\N	\N	\N
83	..-data-2016-test-4-test-42B	\N	\N	\N	\N
84	..-data-2017-20180112-Exam-exame-20180112-companion-A	\N	\N	\N	\N
85	..-data-2017-20180112-Exam-exame-20180112-companion-B	\N	\N	\N	\N
86	..-data-2017-20180130-Exam-exame-20180130-companion-A	\N	\N	\N	\N
87	..-data-2017-20180130-Exam-exame-20180130-companion-B	\N	\N	\N	\N
88	..-data-2017-test-1-test-11A	\N	\N	\N	\N
89	..-data-2017-test-1-test-11B	\N	\N	\N	\N
90	..-data-2017-test-1-test-12A	\N	\N	\N	\N
91	..-data-2017-test-1-test-12B	\N	\N	\N	\N
92	..-data-2017-test-1-test-13A	\N	\N	\N	\N
93	..-data-2017-test-1-test-13B	\N	\N	\N	\N
94	..-data-2017-test-2-test-21-A	\N	\N	\N	\N
95	..-data-2017-test-2-test-21-B	\N	\N	\N	\N
96	..-data-2017-test-2-test-22-A	\N	\N	\N	\N
97	..-data-2017-test-2-test-22-B	\N	\N	\N	\N
98	..-data-2017-test-2-test-23-A	\N	\N	\N	\N
99	..-data-2017-test-2-test-23-B	\N	\N	\N	\N
100	..-data-2017-test-3-test-31A	\N	\N	\N	\N
101	..-data-2017-test-3-test-31B	\N	\N	\N	\N
102	..-data-2017-test-3-test-32A	\N	\N	\N	\N
103	..-data-2017-test-3-test-32B	\N	\N	\N	\N
104	..-data-2017-test-3-test-33A	\N	\N	\N	\N
105	..-data-2017-test-3-test-33B	\N	\N	\N	\N
106	..-data-2017-test-4-test-41A	\N	\N	\N	\N
107	..-data-2017-test-4-test-41B	\N	\N	\N	\N
108	..-data-2017-test-4-test-42A	\N	\N	\N	\N
109	..-data-2017-test-4-test-42B	\N	\N	\N	\N
110	..-data-2017-test-4-test-43A	\N	\N	\N	\N
111	..-data-2017-test-4-test-43B	\N	\N	\N	\N
112	..-data-2018-20190111-Exam-exame-20190111-companion-A	\N	\N	\N	\N
113	..-data-2018-20190111-Exam-exame-20190111-companion-B	\N	\N	\N	\N
114	..-data-2018-20190129-Exam-exame-20190129-companion-A	\N	\N	\N	\N
115	..-data-2018-20190129-Exam-exame-20190129-companion-B	\N	\N	\N	\N
116	..-data-2018-test-1-test-11-A	\N	\N	\N	\N
117	..-data-2018-test-1-test-11-B	\N	\N	\N	\N
118	..-data-2018-test-1-test-11-C	\N	\N	\N	\N
119	..-data-2018-test-1-test-11-D	\N	\N	\N	\N
120	..-data-2018-test-1-test-12-A	\N	\N	\N	\N
121	..-data-2018-test-1-test-12-B	\N	\N	\N	\N
122	..-data-2018-test-1-test-12-C	\N	\N	\N	\N
123	..-data-2018-test-1-test-12-D	\N	\N	\N	\N
124	..-data-2018-test-2-test-21-A	\N	\N	\N	\N
125	..-data-2018-test-2-test-21-B	\N	\N	\N	\N
126	..-data-2018-test-2-test-22-A	\N	\N	\N	\N
127	..-data-2018-test-2-test-22-B	\N	\N	\N	\N
128	..-data-2018-test-3-test-31-A	\N	\N	\N	\N
129	..-data-2018-test-3-test-31-B	\N	\N	\N	\N
130	..-data-2018-test-3-test-32-A	\N	\N	\N	\N
131	..-data-2018-test-3-test-32-B	\N	\N	\N	\N
132	..-data-2018-test-4-test-41-A	\N	\N	\N	\N
133	..-data-2018-test-4-test-41-B	\N	\N	\N	\N
134	..-data-2018-test-4-test-42-A	\N	\N	\N	\N
135	..-data-2018-test-4-test-42-B	\N	\N	\N	\N
\.


--
-- Data for Name: students; Type: TABLE DATA; Schema: public; Owner: pedro
--

COPY public.students (id, name, type, year) FROM stdin;
\.


--
-- Data for Name: topics; Type: TABLE DATA; Schema: public; Owner: pedro
--

COPY public.topics (id, name) FROM stdin;
\.


--
-- Name: questions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: pedro
--

SELECT pg_catalog.setval('public.questions_id_seq', 1240, true);


--
-- Name: quizzes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: pedro
--

SELECT pg_catalog.setval('public.quizzes_id_seq', 135, true);


--
-- Name: students_id_seq; Type: SEQUENCE SET; Schema: public; Owner: pedro
--

SELECT pg_catalog.setval('public.students_id_seq', 1, false);


--
-- Name: topics_id_seq; Type: SEQUENCE SET; Schema: public; Owner: pedro
--

SELECT pg_catalog.setval('public.topics_id_seq', 1, false);


--
-- Name: answers answers_pkey; Type: CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.answers
 ADD CONSTRAINT answers_pkey PRIMARY KEY (student_id, question_id, quiz_id);


--
-- Name: images images_pkey; Type: CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.images
 ADD CONSTRAINT images_pkey PRIMARY KEY (question_id);


--
-- Name: options options_pkey; Type: CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.options
 ADD CONSTRAINT options_pkey PRIMARY KEY (question_id, option);


--
-- Name: question_has_topic question_has_topic_pkey; Type: CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.question_has_topic
 ADD CONSTRAINT question_has_topic_pkey PRIMARY KEY (topic_id, question_id);


--
-- Name: questions questions_pkey; Type: CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.questions
 ADD CONSTRAINT questions_pkey PRIMARY KEY (id);


--
-- Name: quiz_has_question quiz_has_question_pkey; Type: CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.quiz_has_question
 ADD CONSTRAINT quiz_has_question_pkey PRIMARY KEY (quiz_id, question_id);


--
-- Name: quizzes quizzes_pkey; Type: CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.quizzes
 ADD CONSTRAINT quizzes_pkey PRIMARY KEY (id);


--
-- Name: students students_pkey; Type: CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.students
 ADD CONSTRAINT students_pkey PRIMARY KEY (id);


--
-- Name: topics topics_name_key; Type: CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.topics
 ADD CONSTRAINT topics_name_key UNIQUE (name);


--
-- Name: topics topics_pkey; Type: CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.topics
 ADD CONSTRAINT topics_pkey PRIMARY KEY (id);


--
-- Name: answers answers_question_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.answers
 ADD CONSTRAINT answers_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.questions(id) ON DELETE CASCADE;


--
-- Name: answers answers_quiz_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.answers
 ADD CONSTRAINT answers_quiz_id_fkey FOREIGN KEY (quiz_id) REFERENCES public.quizzes(id) ON DELETE CASCADE;


--
-- Name: answers answers_student_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.answers
 ADD CONSTRAINT answers_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id) ON DELETE CASCADE;


--
-- Name: images images_question_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.images
 ADD CONSTRAINT images_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.questions(id) ON DELETE CASCADE;


--
-- Name: options options_question_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.options
 ADD CONSTRAINT options_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.questions(id) ON DELETE CASCADE;


--
-- Name: question_has_topic question_has_topic_question_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.question_has_topic
 ADD CONSTRAINT question_has_topic_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.questions(id) ON DELETE CASCADE;


--
-- Name: question_has_topic question_has_topic_topic_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.question_has_topic
 ADD CONSTRAINT question_has_topic_topic_id_fkey FOREIGN KEY (topic_id) REFERENCES public.topics(id) ON DELETE CASCADE;


--
-- Name: questions questions_new_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.questions
 ADD CONSTRAINT questions_new_id_fkey FOREIGN KEY (new_id) REFERENCES public.questions(id) ON DELETE CASCADE;


--
-- Name: quiz_has_question quiz_has_question_question_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.quiz_has_question
 ADD CONSTRAINT quiz_has_question_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.questions(id) ON DELETE CASCADE;


--
-- Name: quiz_has_question quiz_has_question_quiz_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.quiz_has_question
 ADD CONSTRAINT quiz_has_question_quiz_id_fkey FOREIGN KEY (quiz_id) REFERENCES public.quizzes(id) ON DELETE CASCADE;


--
-- PostgreSQL database dump complete
--

