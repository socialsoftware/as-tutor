--
-- PostgreSQL database dump
--

-- Dumped from database version 10.7 (Ubuntu 10.7-0ubuntu0.18.04.1)
-- Dumped by pg_dump version 10.7 (Ubuntu 10.7-0ubuntu0.18.04.1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: answers; Type: TABLE; Schema: public; Owner: pedro
--

CREATE TABLE public.answers (
    student_id integer NOT NULL,
    question_id integer NOT NULL,
    answer_date timestamp without time zone NOT NULL,
    quiz_id integer,
    time_taken timestamp without time zone,
    option integer NOT NULL
);


ALTER TABLE public.answers OWNER TO pedro;

--
-- Name: hibernate_sequence; Type: SEQUENCE; Schema: public; Owner: pedro
--

CREATE SEQUENCE public.hibernate_sequence
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.hibernate_sequence OWNER TO pedro;

--
-- Name: images; Type: TABLE; Schema: public; Owner: pedro
--

CREATE TABLE public.images (
    question_id integer NOT NULL,
    url character varying(255),
    width integer
);


ALTER TABLE public.images OWNER TO pedro;

--
-- Name: options; Type: TABLE; Schema: public; Owner: pedro
--

CREATE TABLE public.options (
    question_id integer NOT NULL,
    option integer NOT NULL,
    content text,
    correct boolean DEFAULT false
);


ALTER TABLE public.options OWNER TO pedro;

--
-- Name: question_has_topic; Type: TABLE; Schema: public; Owner: pedro
--

CREATE TABLE public.question_has_topic (
    topic_id integer NOT NULL,
    question_id integer NOT NULL,
    votes integer,
    score integer
);


ALTER TABLE public.question_has_topic OWNER TO pedro;

--
-- Name: questions; Type: TABLE; Schema: public; Owner: pedro
--

CREATE TABLE public.questions (
    id integer NOT NULL,
    name character varying(255),
    new_id integer,
    content text,
    difficulty integer
);


ALTER TABLE public.questions OWNER TO pedro;

--
-- Name: questions_id_seq; Type: SEQUENCE; Schema: public; Owner: pedro
--

CREATE SEQUENCE public.questions_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.questions_id_seq OWNER TO pedro;

--
-- Name: questions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: pedro
--

ALTER SEQUENCE public.questions_id_seq OWNED BY public.questions.id;


--
-- Name: quiz_has_question; Type: TABLE; Schema: public; Owner: pedro
--

CREATE TABLE public.quiz_has_question (
    quiz_id integer NOT NULL,
    question_id integer NOT NULL
);


ALTER TABLE public.quiz_has_question OWNER TO pedro;

--
-- Name: quizzes; Type: TABLE; Schema: public; Owner: pedro
--

CREATE TABLE public.quizzes (
    id integer NOT NULL,
    title character varying(255),
    year integer,
    type character varying(1),
    series integer,
    version character varying(1),
    date date
);


ALTER TABLE public.quizzes OWNER TO pedro;

--
-- Name: quizzes_id_seq; Type: SEQUENCE; Schema: public; Owner: pedro
--

CREATE SEQUENCE public.quizzes_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.quizzes_id_seq OWNER TO pedro;

--
-- Name: quizzes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: pedro
--

ALTER SEQUENCE public.quizzes_id_seq OWNED BY public.quizzes.id;


--
-- Name: students; Type: TABLE; Schema: public; Owner: pedro
--

CREATE TABLE public.students (
    id integer NOT NULL,
    year integer
);


ALTER TABLE public.students OWNER TO pedro;

--
-- Name: students_id_seq; Type: SEQUENCE; Schema: public; Owner: pedro
--

CREATE SEQUENCE public.students_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.students_id_seq OWNER TO pedro;

--
-- Name: students_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: pedro
--

ALTER SEQUENCE public.students_id_seq OWNED BY public.students.id;


--
-- Name: topics; Type: TABLE; Schema: public; Owner: pedro
--

CREATE TABLE public.topics (
    id integer NOT NULL,
    name character varying(255)
);


ALTER TABLE public.topics OWNER TO pedro;

--
-- Name: topics_id_seq; Type: SEQUENCE; Schema: public; Owner: pedro
--

CREATE SEQUENCE public.topics_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.topics_id_seq OWNER TO pedro;

--
-- Name: topics_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: pedro
--

ALTER SEQUENCE public.topics_id_seq OWNED BY public.topics.id;


--
-- Name: questions id; Type: DEFAULT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.questions ALTER COLUMN id SET DEFAULT nextval('public.questions_id_seq'::regclass);


--
-- Name: quizzes id; Type: DEFAULT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.quizzes ALTER COLUMN id SET DEFAULT nextval('public.quizzes_id_seq'::regclass);


--
-- Name: students id; Type: DEFAULT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.students ALTER COLUMN id SET DEFAULT nextval('public.students_id_seq'::regclass);


--
-- Name: topics id; Type: DEFAULT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.topics ALTER COLUMN id SET DEFAULT nextval('public.topics_id_seq'::regclass);


--
-- Data for Name: answers; Type: TABLE DATA; Schema: public; Owner: pedro
--

COPY public.answers (student_id, question_id, answer_date, quiz_id, time_taken, option) FROM stdin;
0	782	2019-05-09 16:29:59.164	\N	2019-05-09 16:29:59.164	0
0	1189	2019-05-09 16:29:59.164	\N	2019-05-09 16:29:59.164	0
0	1362	2019-05-09 16:29:59.164	\N	2019-05-09 16:29:59.164	0
\.


--
-- Data for Name: images; Type: TABLE DATA; Schema: public; Owner: pedro
--

COPY public.images (question_id, url, width) FROM stdin;
231	231.png	100
244	244.png	100
292	292.png	70
298	298.png	120
323	323.png	120
329	329.png	70
697	697.png	100
698	698.png	100
699	699.png	100
700	700.png	120
711	711.png	100
718	718.png	100
721	721.png	120
728	728.png	120
733	733.png	100
737	737.png	100
741	741.png	100
747	747.png	100
753	753.png	100
754	754.png	100
755	755.png	80
756	756.png	80
761	761.png	80
762	762.png	80
763	763.png	80
764	764.png	80
770	770.png	80
772	772.png	80
774	774.png	80
777	777.png	80
780	780.png	100
782	782.png	80
787	787.png	100
788	788.png	80
790	790.png	80
792	792.png	80
797	797.png	80
798	798.png	80
800	800.png	100
802	802.png	80
807	807.png	100
808	808.png	80
810	810.png	80
814	814.png	80
831	831.png	100
834	834.png	100
842	842.png	100
858	858.png	100
864	864.png	80
868	868.png	80
872	872.png	120
895	895.png	140
905	905.png	140
913	913.png	120
933	933.png	80
953	953.png	120
956	956.png	100
957	957.png	100
961	961.png	100
968	968.png	100
971	971.png	100
976	976.png	100
981	981.png	100
984	984.png	100
1042	1042.png	100
1044	1044.png	100
1052	1052.png	100
1053	1053.png	80
1054	1054.png	100
1057	1057.png	80
1059	1059.png	100
1062	1062.png	80
1065	1065.png	100
1068	1068.png	80
1069	1069.png	80
1073	1073.png	80
1075	1075.png	80
1076	1076.png	80
1094	1094.png	120
1107	1107.png	140
1108	1108.png	70
1123	1123.png	120
1130	1130.png	140
1131	1131.png	70
1154	1154.png	120
1167	1167.png	140
1168	1168.png	80
1189	1189.png	120
1196	1196.png	140
1197	1197.png	80
1202	1202.png	120
1203	1203.png	100
1204	1204.png	100
1208	1208.png	120
1212	1212.png	130
1218	1218.png	130
1243	1243.png	120
1247	1247.png	120
1253	1253.png	105
1257	1257.png	105
1263	1263.png	120
1264	1264.png	120
1273	1273.png	140
1274	1274.png	140
1286	1286.png	120
1289	1289.png	100
1290	1290.png	120
1302	1302.png	120
1312	1312.png	100
1313	1313.png	120
1323	1323.png	120
1326	1326.png	120
1330	1330.png	60
1333	1333.png	120
1334	1334.png	120
1337	1337.png	120
1339	1339.png	120
1347	1347.png	120
1349	1349.png	60
1352	1352.png	120
1354	1354.png	120
1358	1358.png	120
1359	1359.png	100
1362	1362.png	100
1367	1367.png	100
1368	1368.png	100
1371	1371.png	100
1372	1372.png	100
1374	1374.png	100
1377	1377.png	100
1379	1379.png	100
1382	1382.png	100
1384	1384.png	100
1385	1385.png	100
1420	1420.png	95
1421	1421.png	95
1424	1424.png	95
1428	1428.png	95
1430	1430.png	95
1431	1431.png	95
1434	1434.png	95
1437	1437.png	95
1440	1440.png	95
1441	1441.png	95
1444	1444.png	95
1446	1446.png	95
1450	1450.png	100
1451	1451.png	120
1454	1454.png	120
1457	1457.png	100
1460	1460.png	120
1461	1461.png	120
1464	1464.png	120
1468	1468.png	120
1470	1470.png	60
1471	1471.png	120
1476	1476.png	60
1477	1477.png	120
\.


--
-- Data for Name: options; Type: TABLE DATA; Schema: public; Owner: pedro
--

COPY public.options (question_id, option, content, correct) FROM stdin;
1	0	It makes no sense to use views of the module viewtype, as\n    they give only a static view of the system	f
1	1	You should use only views of the component-and-connector\n    viewtype, which describe the dynamic aspects of the system	f
1	3	The only views that are relevant to performance\n     requirements are views of the Deployment style}	f
2	0	Influence the software development process and its\n   management, but not the software architecture of the system under\n   development	f
2	2	Are important to determine the feasibility of the system,\n   but once we reach the conclusion that the system can be developed\n   with these restrictions, software architecture no longer depends on\n   these factors	f
2	3	Are not one of the influences of the software architecture\n   in the Architecture Business Cycle	f
3	1	The \\emph{implementation} style, which allows us to know\n    where are the artifacts that implement a certain module	f
3	2	The \\emph{layers} style, which allows us to show that the\n    structure of our system is composed of various modules that may be\n    easily reused in other systems	f
3	3	The \\emph{client-server} and \\emph{deployment} styles,\n    which allow us to isolate the required functionality in a\n    component that executes autonomously and, thus, reusable in other systems	f
4	0	To keep the current architecture of the system and optimize\n    the code to achieve the currently required performance levels	f
4	1	To change the Deployment view, replicating the server\n    component by more machines	f
4	2	To review the system's architecture so that part of the\n    computation that is currently done at the server shifts to the\n    clients	f
5	0	Those three viewtypes complement each other, but they are\n    completely independent, showing different aspects that have no\n    relation among them	f
5	1	The module and component-and-connector viewtypes are\n    independent of one another, but the allocation viewtype depends on\n    the first two	f
5	2	Each viewtype uses different software elements, such as\n    modules or components, so it does not make sense to talk about\n    relationships among these viewtypes	f
6	1	Layer 4	f
6	2	In a layered architecture all layers are equally modifiable	f
6	3	Modifiability is not made easier by a layered architecture	f
7	0	Is useful only if done (even if only partially) before the\n    system's implementation is concluded, given that the architecture\n    is used for restricting the implementation	f
7	1	Is useful only if done (even if only partially) before the \n    system's implementation is concluded, because if the system is\n    already implemented, its implementation uniquely determines the\n    architecture	f
7	2	Is useful only if done (even if only partially) before the \n    system passes all of the acceptance tests by the client, given\n    that no more requirements changes will take place after that time	f
8	0	A subset of the requirements that do not have conflicts\n     among them and that correspond to the most important business\n     goals	f
8	1	A subset of the requirements that have many conflicts\n     among them and for which you need to find tradeoffs  early in the\n     design process	f
8	3	A subset of the requirements that is chosen\n     exclusively by the architect by taking into account their\n     influence on the system's architecture	f
9	1	The \\emph{Shared data} style	f
9	2	The \\emph{Client-Server} style	f
9	3	The \\emph{Publish-subscribe} style	f
10	0	The \\emph{Communicating Processes} style	f
10	1	The \\emph{Pipes-and-filters} style	f
10	2	The \\emph{Peer-to-Peer} style	f
11	0	Given that the change is on execution aspects, the change\n     manifests itself only through the modification of components and\n     connectors on the system	f
11	1	This change in the way of how web applications run\n     does not correspond to any change in its architecture, because at\n     the architectural level we still have the same components	f
11	2	The only architectural change is on the Deployment view,\n     because the components and connectors remain the same, but\n     execute in different places	f
12	1	The \\emph{Uses} style	f
12	2	The \\emph{Layers} style	f
12	3	The \\emph{Peer-to-Peer} style	f
13	0	\\emph{Decomposition} and \\emph{Layers} views	f
13	1	\\emph{Decomposition} and \\emph{Work assignment} views	f
13	3	\\emph{Decomposition} and \\emph{Generalization} views	f
14	0	\\emph{Decomposition} and \\emph{Implementation} views	f
14	2	\\emph{Component-and-connector} views	f
14	3	 None, given that to perform black-box testing you do not\n    need to know the code or the internal structure of the application\n    to be tested	f
15	0	The \\emph{Shared data} style	f
15	1	The \\emph{Repository} style	f
15	3	The \\emph{Client-Server} style	f
16	0	The \\emph{Decompostion} and \\emph{Implementation} styles	f
16	1	The \\emph{Deployment} and \\emph{Uses} styles	f
16	2	The \\emph{Client-Server} and \\emph{Generalization} styles	f
17	0	Views of the Component-and-Connector viewtype	f
17	2	Views of the Allocation viewtype	f
17	3	All of the above	f
18	1	To allow the existence of more than one layer of\n    presentation logic for the same application (to provide for\n    example, an interface to web services)	f
18	2	To expose different interfaces of the domain logic layer\n    so that it allows the implementation of different layers for the\n    presentation logic	f
18	3	To facilitate the use of the data access layer by the\n    presentation logic layer	f
19	0	To implement each of the services that are executed\n    whenever the client makes a request to the server	f
19	1	To improve the server performance by maintaining a cache\n    of the objects most accessed during the processing of a client request	f
19	2	To split the computation required to process each request\n    made by the client in smaller units of work that are parallelizable	f
20	0	To improve the performance of the application server because it\n     maintains a cache of entities that reduces the number of operations\n     made on the database	f
20	1	To avoid loading a lot of data from the database when an\n     entity that has many relationships with other entities is loaded	f
20	3	To map each entity loaded by the server to the identity\n     of that entity in the database, so that the server is able to\n     update the database later, if needed	f
21	0	Stakeholders requirements do not emphasize performance as the most important issue	f
21	1	The Hadoop small development team is highly competent and skilled	f
21	2	Stakeholders do not mind if two simultaneous reads on the same file by two different applications may return different values	f
22	0	There is a conflict between availability and performance qualities	f
22	1	The availability quality is more important, thus performance is addressed afterwards and depends on the tactics used for availability	f
22	2	There is no conflict between availability and performance qualities	f
23	0	Active replication and passive replication	f
23	1	Active replication, passive replication, and spare	f
23	3	Quorum, active replication, and passive replication	f
24	0	Shadow operation	f
24	1	State Resynchronization	f
24	3	All of the above	f
25	0	Authenticate users and authorize users	f
25	2	Authenticate users, authorize users, and limit access	f
25	3	Authenticate users, authorize users, limit access, and maintain integrity	f
26	1	But they could have used the ping tactic instead, because it has the same overhead for the NameNode	f
26	2	But the exceptions tactic could have been used as well	f
26	3	To inform other DataNodes about their availability	f
27	1	That aggregates modules according to the uses relationship	f
27	2	Because it has a well-defined interface and hides the internal behaviour	f
27	3	That provides a set of complete and cohesive services	f
28	0	Because it is a natural extension of the use cases concept	f
28	1	But it requires additional information on the modules internal structure	f
28	3	And contains all the information required to assess effectively the impact	f
29	0	The call's results may not have impact on the correct execution of the caller module	f
29	1	The call's results may not have impact on the correct execution of the callee module	f
29	3	The uses relationship requires calls to return control to the caller module	f
30	0	We should always satisfy in the first place the requirements\n      of more important stakeholders (such as the client)	f
30	2	If one of the stakeholders complains that his requirement\n      is not satisfied, we may explain to him that there were other more\n      important requirements first	f
30	3	When it is not possible to satisfy all of the requirements\n      optimally, we should be aware of their relative importance so that\n      we may find a solution that corresponds to a satisfactory trade-off	f
31	0	The Shared data style	f
31	1	The Pipes-and-filters style	f
31	2	The Peer-to-Peer style	f
32	1	A Client-Server architecture, where the NameNode is the\n      Client and the DataNode is the Server	f
32	2	A Peer-to-Peer architecture	f
32	3	A Communicating Processes architecture	f
33	0	That view will always be incomplete without the NameNode,\n      because the HDFS Client needs to interact with it	f
33	2	The view does not need to include the NameNode, but in\n      that case it will not be possible to reason about the\n      availability of the system	f
33	3	The availability guarantee may be given by the usage of\n      an adequate connector between the HDFS Client and the DataNodes	f
34	0	The Shared Data style	f
34	1	The Communicating Processes style	f
34	2	The Deployment style	f
35	0	The system would respond faster to all of the\n      clients' requests	f
35	1	The performance of the system would not change	f
35	2	The system would respond faster to requests about\n      file locations	f
36	1	To allow the existence of more than one interface to the\n      domain logic layer (to provide, for example, an interface to web\n      services)	f
36	2	To allow the existence of different presentation logic layers	f
36	3	To facilitate the use of the data access layer by the\n      presentation logic layer	f
37	1	That is an acceptable solution if we want to reduce the\n      dependencies among the various components of the system	f
37	2	That is the recommended solution if there is a control\n      flow that involves the choreography of both components	f
37	3	That interaction cannot be represented in this view, but\n      it may in another view of the system's architecture	f
38	0	Work Assignment views	f
38	1	Generalization views	f
38	2	Deployment views	f
39	0	The presentation logic layer, domain logic layer, and\n      data access layer	f
39	1	The traditional web applications, the mashups, and the rich internet applications (RIAs)	f
39	3	The web services layer, the domain logic layer, and the\n      data access layer	f
40	0	The Work Assignment style	f
40	1	The Client-Server style	f
40	2	The Deployment style	f
41	0	Essential to ensure the system scalability	f
41	1	Essential to reduce costs whenever there is a fault in a hardware element	f
41	3	Essential to facilitate the integration with legacy systems	f
42	0	Allows the creation of checkpoints but it is necessary to request all the information from the \\emph{NameNode} whenever a new checkpoint creation begins	f
42	2	Allows the creation of checkpoints using the information that it gradually receives from the \\emph{NameNode}	f
42	3	Allows the creation of checkpoints without requiring any kind of information from the \\emph{NameNode}	f
43	0	Performance and availability qualities	f
43	1	Performance qualities only	f
43	3	Performance and security qualities	f
44	0	Increases the system modifiability whenever it is necessary to change the placement policy	f
44	2	Increases the system modifiability whenever it is necessary to change the the deployment structure	f
44	3	Allow several replicas to be located in different \\emph{DataNodes}	f
45	1	But it would imply an \\emph{overhead} in the \\emph{NameNode}	f
45	2	But an exceptions tactic could be used as well	f
45	3	To notify other \\emph{DataNodes} that they are available	f
46	1	This script is a module that implements a security tactic	f
46	2	This script is a module that implements a modifiability tactic	f
46	3	This script cannot be considered a module because it is only a script	f
47	0	Availability, security, and performance	f
47	1	Availability only	f
47	2	Availability and performance	f
48	0	Only views of the component-and-connector viewtype are needed	f
48	1	All viewtypes may be necessary	f
48	3	Views of the module viewtype are not needed	f
49	1	Means that it is possible to implement the system according to an incremental development process	f
49	2	Means that the modules that are part of the loop should be implemented first	f
49	3	Gives a hint to replace the uses relations by is-a relations	f
50	0	Is that the \\emph{Allowed to Use} relation defines a restriction for the possible \\emph{Uses} relations between modules belonging to different layers	f
50	1	Is that the \\emph{Uses} relation can happen only among modules belonging to the same layer	f
50	2	Is that the \\emph{Allowed to Use} relation does not imply that the correctness of the upper layer depends on the correct implementation of its nearest lower layer	f
51	0	It does not make sense to use an architectural view for\n      this, because this is an implementation detail that does affect\n      the system's qualities	f
51	1	Using a view of the module viewtype that shows the\n      interfaces available for the client to do the write	f
89	2	The Shared-Data style	f
51	3	Using a view of the architectural style Deployment	f
52	1	We just have to show, through component-and-connector\n      views, that the system maintains replicas of the data in\n      different components	f
52	2	We just have to show, through Deployment views,\n      that the \\emph{DataNode} component executes in more than one\n      machine of the cluster	f
52	3	We just have to show, through Decomposition views, that\n      there are modules responsible for the replication of file blocks	f
53	0	The Shared data style	f
53	1	The Pipes-and-filters style	f
53	2	The Peer-to-Peer style	f
54	0	The component-and-connector view must, necessarily, be\n      changed to include the components \\emph{NameNode} and\n      \\emph{DataNode}, with which the web application has to interact\n      to access its data	f
54	2	The application continues to have a three-tiered\n      architecture, where one of the tiers is now the HDFS system	f
54	3	The Deployment view must be changed to include the racks\n      needed to run the HDFS system	f
55	0	The Pipes-and-filters style	f
55	1	The Publish-Subscribe style	f
55	3	The Client Server style	f
56	1	May affect the data access layer because each pattern\n      puts different requirements on the interface of that layer	f
56	2	Does not affect the presentation logic layer because it\n      cannot use it	f
56	3	Does not affect the data access layer because the data\n      access layer does not use the domain logic layer	f
57	0	A machine may execute only one component, but a component\n      may execute in more than one machine	f
57	1	A component may execute in only one machine, but a\n      machine may execute more than one component	f
57	3	All components may execute in all machines	f
58	0	In the Deployment view, because the presentation\n      component is now executing in a different place	f
58	1	In the component-and-connector view, because the\n      connector between the web client and the web server has to change	f
58	2	In the Layer view, because the order of the layers will\n      have to change	f
59	0	A \\emph{web services} architecture	f
59	1	A Client-Server architecture, where the \\emph{mashup}\n      is the client and the various sources are the servers	f
59	3	A Publish-Subscribe architecture, where the various\n      sources publish events with the changes made and the\n      \\emph{mashup} subscribes those events	f
60	0	Only views of the component-and-connector viewtype are needed	f
60	1	Only views of the Deployment style are needed	f
60	2	We may need views of the component-and-connector viewtype\n      and of the Deployment style	f
61	1	The researchers, because they invented the Haskell\n      programming language	f
61	2	The UK government, because it intended that the system\n      could be used to develop the British software industry	f
61	3	The researchers, because they wanted to use the system to\n      validate their research	f
62	1	As components of the system	f
62	2	The compiler and the RTS as components and the boot\n         libraries as a module	f
62	3	The compiler as a component and the other two as modules	f
63	0	Made the type-checking much simpler	f
63	1	Satisfied performance requirements of the system	f
63	3	Satisfied usability requirements of the system	f
64	0	The performance of the compiler, because the RTS is\n      written as very efficient C code	f
64	1	The performance of the compiled programs, because the RTS\n      is written as very efficient C code	f
64	3	The modifiability of the compiled programs, because we\n      may change their behavior by changing only the RTS	f
65	0	To allow the parallel execution of the several\n      compilation phases, thereby improving the compiler performance	f
65	1	To allow the compilation of very large programs, because\n      wach phase may execute incrementally without loading the entire\n      program into memory at once	f
65	2	To facilitate changing the phases used in the compilation\n      process, thereby making the compiler more modifiable	f
66	0	It is a system with a Peer-to-Peer architecture	f
66	1	It is a system with a Client-Server architecture	f
66	2	It allows the development of systems with a Peer-to-Peer architecture	f
67	0	The Tiers style	f
67	2	The Deployment style	f
67	3	The Work Assignment style	f
68	0	Increases the portability of the system for other\n      operating systems	f
68	1	Facilitates the addition of new messaging patterns	f
68	2	Makes the system more scalable	f
69	1	To increase the throughput of the system when it is overloaded	f
69	2	To reduce the amount of memory needed to send a large\n      number of messages	f
69	3	To reduce the CPU usage when the system has just a few\n      messages to send	f
70	0	The Pipe-and-Filter style	f
70	1	The Shared data style	f
70	2	The Communicating Processes style	f
71	0	To have better throughput than Apache	f
71	2	To be more modifiable than Apache	f
71	3	To allow more simultaneous connections than Apache	f
72	0	The code is easier to develop because it is not concurrent	f
72	1	They wanted to have a more efficient use of the\n      computational resources	f
72	3	In an event-driven system each component may function\n      independently of the others	f
73	1	The Uses style	f
73	2	The Layers style	f
73	3	The Aspects style	f
74	0	To make the system more modifiable	f
74	2	To make the system faster	f
74	3	To make the system more fault tolerant	f
75	1	The Communicating Processes style	f
75	2	The Peer-to-Peer style	f
75	3	The Client-Server style	f
76	1	Increases the capacity	f
76	2	Increases the capacity but decreases the availability	f
76	3	Increases both the availability and the capacity	f
77	0	Only in the Deployment view, because only the number of\n      machines storing images was changed	f
77	1	In the Uses view, because each \\emph{Image\n        Write/Retrieval Service} is going to use a different\n      \\emph{Image File Storage}	f
77	2	In the Component-and-Connector view, because components\n      and connectors need to be changed	f
78	0	Increasing the performance of the \\emph{Upload} operation	f
78	2	Increasing the scalability of the system	f
78	3	Increasing the fault tolerance of the system	f
79	0	We now have four layers, where each layer is executed in\n      the corresponding tier, as before	f
79	2	There is no relation between the tiers and the layers, so\n      the layers architecture is not changed	f
79	3	The execution of the previously existing layers is split\n      between the two new tiers, and new intermediate layers may be\n      needed	f
80	1	With a Deployment view, where the \\emph{load balancer} is\n      part of the communication infra-structure used to execute the\n      system	f
80	2	With a Uses view, representing the existing dependencies\n      between the \\emph{load balancer} and the services that it uses	f
80	3	With a Layers view, where the \\emph{load balancer}\n      creates an abstraction layer between who makes the request and\n      who provides the service	f
81	0	The domain logic layer was implemented with the Domain\n      Model pattern	f
81	2	The domain logic layer was implemented with the Service\n      Layer pattern	f
81	3	The domain logic layer was implemented with a rich domain\n      model, on top of which there was a thin service layer	f
82	0	The Decomposition style	f
82	1	The Generalization style	f
82	3	The SOA style	f
83	1	Have low latency	f
83	2	Allow many simultaneous users	f
83	3	May be easily changed to increase their performance	f
84	1	To promote the use of a common communication protocol for\n      all the remaining components of the system	f
84	2	To increase the performance of the interaction between\n      the components of the system	f
84	3	To create a strong coupling between the various services\n      provided by the organization	f
85	0	The Ping/Echo tactic	f
85	2	The Voting tactic	f
85	3	The Removal from Service tactic	f
86	0	The Communicating Processes style	f
86	1	The Client-Server style	f
86	3	The Decomposition style	f
87	0	In the Deployment view	f
87	1	In the Decomposition view	f
87	2	In a view of the component-and-connector type	f
88	0	To create an abstraction layer between the architecture\n      of the system and its functionalities, so that the architecture\n      may be changed later without affecting the functionalities	f
88	2	To allow testing and validating the software architecture\n      in the early development stages	f
88	3	To facilitate the work assignment to the members of the\n      development team that will implement the system's functionalities	f
89	1	The Client-Server style	f
89	3	The Publish-subscribe style	f
90	1	Adds restrictions to the dependency relationships that\n      exist between modules and that are represented using other\n      styles, as with the layers style	f
90	2	Typically gives rise to more modules than what we would\n      have if not using this style	f
90	3	Introduces only a new type of relation among the existing\n      modules of the system, which resulted from other styles of the\n      module viewtype	f
91	0	To process all of the requests to send messages with a\n      single thread, to free the remaining cores for the \n      user threads	f
91	2	To launch a worker thread for each core, to maximize the\n      core usage and to minimize the need for synchronization among\n      threads	f
91	3	To launch a worker thread to process the sending of a\n      new message, to guarantee maximal parallelism in message sending	f
92	0	Only module views	f
92	1	Only component-and-connector views	f
92	3	Module and component-and-connector views	f
93	1	It is less modifiable, because all components depend on\n      the \\emph{broker}	f
93	2	It has less performance, because the\n      \\emph{broker} introduces greater latency in the communication	f
93	3	It is more expensive, because it forces the existence of\n      additional hardware to execute the \\emph{broker}	f
94	1	Views of the Layers style	f
94	2	Views of the Decomposition style	f
94	3	Views of the Uses style	f
95	0	Usability	f
95	2	Performance	f
95	3	Security	f
96	0	The Publish-Subscribe style	f
96	1	The Client-Server style	f
96	3	The Communicating Processes style	f
97	0	The Layers style	f
97	1	The Uses style	f
97	2	The Shared data style	f
98	0	A new \\emph{worker} is created whenever a new connection\n      is established with the server, and that \\emph{worker} processes\n      all of the requests for that connection, being destroyed at the\n      end of the connection	f
98	2	Each \\emph{worker} is responsible for various connections,\n      processing all requests from those connections	f
98	3	Each \\emph{worker} processes requests that it obtains\n      from a \\emph{pool of requests} that is shared among all workers	f
99	1	By executing in parallel each of the phases of the\n      pipeline corresponding to the processing of a request	f
99	2	By executing in parallel the processing of the various requests	f
99	3	By processing completely each request before moving to\n      the next one, in a sequential process	f
100	1	Be able to process each request faster than Apache	f
100	2	Be able to launch more simultaneous threads than Apache	f
100	3	Be able to reduce the amount of memory needed for each connection	f
101	0	The \\emph{Decomposition} style	f
101	1	The \\emph{Client-Server} style	f
101	3	The \\emph{Communicating Processes} style	f
102	1	To allow changing the GC algorithm without affecting the\n      rest of the system	f
102	2	To increase the performance of the programs compiled by\n      the GHC	f
102	3	To make the RTS more portable to other operating systems	f
103	0	It does not manifest, as it corresponds only to an\n      extension to the Haskell language that must be processed by the\n      compiler	f
103	1	In the existence of a compiler component that is\n      responsible for interpreting and applying the rewrite rules\n      during the compilation of a program	f
103	2	In a view of the Generalization style that includes a\n      module defining an abstract interface that all \\emph{rewrite\n        rules} must implement and of which all modules with the \n      \\emph{rewrite rules} are specializations	f
104	0	A diagram of the component-and-connector viewtype	f
104	1	A diagram of the module viewtype	f
104	3	A diagram of the implementation style	f
105	0	A diagram of the component-and-connector viewtype,\n      showing the data flow between the various compiler components	f
105	1	A diagram of the module viewtype, showing a decomposition\n      of the compiler in the various modules that are responsible by\n      each of the compilation process steps	f
105	2	A diagram of the module viewtype, showing which modules\n      use other modules	f
106	0	They are both modules	f
106	2	The \\emph{Request Node} is a component and the\n      \\emph{Cache} is a module	f
106	3	The \\emph{Request Node} is a module and the \\emph{Cache}\n      is a component	f
107	0	Increasing performance and availability	f
107	1	Increasing availability and decreasing performance	f
101	2	The \\emph{Layers} style	t
102	0	To increase the performance of RTS	t
103	3	In a view of the Pipes-and-Filters style, corresponding\n      to the process of compiling an Haskell program, to which is\n      added a new filter whenever a new \\emph{rewrite rule} is\n      defined	t
104	2	A diagram of the deployment style	t
105	3	A layered diagram, where there is a layer responsible for\n      the code generation	t
106	1	They are both components	t
107	2	Increasing performance and decreasing availability	f
108	0	The Shared-Data style	f
108	1	The Client-Server style	f
108	2	The Peer-to-Peer style	f
109	0	The performance decreases	f
109	1	The availability of the system's data decreases	f
109	3	The system is not affected in any way	f
110	0	A view of the Data Model style	f
110	1	A view of the Layers style	f
110	3	A view of the Uses style	f
111	1	To start using the Service Layer pattern in a new layer	f
111	2	To move from an anemic domain model to a rich domain model	f
111	3	To eliminate the service layer	f
112	0	Views of the Module viewtype	f
112	1	Views of the Component-and-Connector viewtype	f
112	2	Views of the Allocation viewtype	f
113	0	The Decomposition and the Work Assignment styles	f
113	1	The Decomposition and the Layers styles	f
113	3	The Decomposition and the SOA styles	f
114	0	It imposes restrictions on which uses relationships may\n      exist between the system's modules	f
114	1	It makes it easier to create generalization relationships\n      between the system's modules	f
114	3	It allows the decomposition of each of the system's\n      modules into finer grained modules	f
115	0	The Decomposition style	f
115	1	The Client-Server style	f
115	2	The Service Oriented Architecture style	f
116	1	The Client-Server style	f
116	2	The Shared-Data style	f
116	3	The Publish-subscribe style	f
117	0	Only in the Deployment view	f
117	2	Only in a component-and-connector view	f
117	3	Both in a component-and-connector and the Deployment\n      views	f
118	0	By using HTTPS in the communication between the browser\n      and the web server	f
118	1	By using robust authentication mechanisms to identify the\n      users of the system with confidence	f
118	2	By encrypting the information in the database with a\n      password that is known only by the web server	f
119	0	The presentation logic layer and how it relates with the\n      underlying layer changed	f
119	1	The connector used to represent the interaction between\n      the browser and the web server changed	f
119	2	The browser is now a component of a different type	f
120	0	A component	f
120	1	A grouping of components	f
120	2	A module	f
121	1	Communicating Processes	f
121	2	Repository	f
121	3	Pipes-and-Filters	f
122	0	Maintain Multiple Copies of Computation	f
122	1	Maintain Multiple Copies of Data	f
122	2	Passive Redundancy	f
123	0	Usability and Performance	f
123	1	Usability	f
123	3	Testability	f
124	0	Performance, availability, and usability	f
124	1	Performance, availability, and testability	f
124	3	Performance and usability	f
125	0	Client-Server e Repository	f
125	1	Repository e Service Oriented Architecture	f
125	2	Client-Server, Repository, Communicating-Processes e Service Oriented Architecture	f
126	1	By using a Retry tactic	f
126	2	Storing the information in the client using cookies	f
126	3	By using a Transactions tactic	f
127	0	May stop accepting reads	f
127	2	May stop accepting reads and writes	f
127	3	May need to add more servers to the cluster	f
128	0	Increase Resource Efficiency	f
128	1	Increase Resources	f
128	2	Prioritize Events	f
129	0	Data Encryption	f
129	1	Intrusion Detection	f
129	2	Limit Access	f
130	0	Introduce Concurrency	f
130	1	Maintain Multiple Copies of Computation	f
130	2	Limit Exposition	f
131	0	Publication-Subscription	f
131	1	Pipes-and-Filters	f
131	3	Client-server	f
132	1	The \\emph{browser} needs to make more requests to the server	f
132	2	It uses machine learning techniques	f
132	3	It does not depend on a proprietary service	f
116	0	The Peer-to-Peer style	t
133	1	It is defined compile-time of \\ch{} code	f
133	2	It is defined during the initialization of each instance of \\ch{}	f
133	3	It can change during the execution of each instance of \\ch{}	f
134	1	Maintain Task Model tactic	f
134	2	Maintain System Model tactic	f
134	3	Support User Initiative tactics	f
135	0	It is necessary to decompress the complete file, even though if only a small part of the information is needed	f
135	2	It is a Python specific solution	f
135	3	Limitations of the concurrent access to files	f
136	0	Increase the modifiability quality, because the new user interface was implemented using the REST interface	f
136	2	Increase the interoperability quality, because external applications can read and send messages to \\gm{}	f
136	3	None of the previous options	f
137	0	A sequence of bytes to allow independence between filters	f
137	2	A sequence of bytes to allow that the order of filters execution is not relevant	f
137	3	An object tree to simplify the processing of each filter	f
138	0	Effectively guarantees the FIFO delivery of messages and the queue runners do not need to synchronize	f
138	1	Guarantees the FIFO delivery of messages but the queue runners need to synchronize	f
138	3	Guarantees the FIFO delivery of messages because in each \\emph{queue} only are stored messages which arrived with a difference of more than one minute	f
139	1	Peer-to-Peer	f
139	2	Dynamic Creation and Destruction	f
139	3	Tiers	f
140	0	Each messages does not need to be accessed concurrently by several processes	f
140	2	Each message is stored as a file in a directory	f
140	3	Al the previous options	f
141	0	Allocate modules to the file system	f
141	1	Differ on the emphasis on production and development phases of the software process	f
141	3	Are applied to the same set of files	f
142	0	Interoperability e Performance	f
142	2	Easy Development and Performance	f
142	3	Modifiability and Performance	f
143	0	Defer Binding	f
143	1	Passive Redundancy	f
143	3	Passive Redundancy and Active Redundancy	f
144	0	It is necessary to use a optimistic concurrency control policy because the transactions cannot be open for a long period	f
144	2	Both, pessimistic and optimistic, concurrency control policies can be used	f
144	3	Transactional management is the complete responsibility of the repository	f
145	1	Hardware, if there is hardware redundancy	f
145	2	Operating Systems, if redundant components execute on top of different operating systems	f
145	3	All the previous options	f
146	1	Resist to the attack	f
146	2	React to the attack	f
146	3	Resist and React to the attack	f
147	0	If there are performance requirements concerning the access to data, then the level of detail should be physical	f
147	1	It should always consider the physical detail level	f
147	2	The logical detail level should only be used when the target of implementation is a relational database	f
148	0	Depend on the types of the publishers components	f
148	1	Only depend on the type of events	f
148	3	It is necessary to support dynamic Defer Binding of components, publishers and subscribers, to the connector to be completely independent	f
149	1	They are dependent on performance tactics	f
149	2	They are dependent on availability tactics	f
149	3	They are not implemented by a usability tactic	f
150	0	All functionalities can be transactional	f
150	1	Only a small set of functionalities are transactional	f
150	2	It is not necessary to have transactional properties because all data is in memory	f
151	0	Performance	f
151	1	Reliability and Performance	f
151	3	Security	f
152	0	Repository and Communicating-Processes	f
152	2	Tiers	f
152	3	Client-Server and Repository	f
153	0	Task Model	f
153	1	System Model	f
153	3	User Model	f
154	0	Only have a server for write requests	f
154	2	Prioritize performance and availability over functionality	f
154	3	Use several levels of cache	f
155	1	Active Redundancy and Increase Resources Efficiency	f
155	2	Active Redundancy and Maintain Multiple Copies of Computation	f
155	3	Passive Redundancy and Maintain Multiple Copies of Computation	f
156	1	By the load balancer	f
156	2	In the repository	f
156	3	In the client	f
157	0	Escalating Restart	f
157	1	Voting	f
157	2	Degradation	f
158	0	Prioritize Events	f
158	1	Increase Resources	f
158	3	Maintain Multiple Copies of Data	f
159	1	Performance, Security and Interoperability	f
159	2	Security, Performance, Usability, Interoperability and Mobility	f
159	3	Security, Performance, Usability and Mobility	f
160	0	Schedule Resources	f
160	1	Increase Resources	f
160	2	Introduce Concurrency	f
161	0	Separates the Renderer process from the other processes	f
161	1	The \\emph{browser} needs to make less requests to the server	f
161	3	Uses prefetching	f
162	1	Communicating-Processes	f
162	2	Service-Oriented Architecture	f
162	3	Client-Server	f
163	0	Uses the Introduce Concurrency tactic	f
163	1	The page is in cache	f
163	2	Uses the Maintain Multiple Copies of Computation tactic	f
164	0	Usability e Modifiability	f
164	2	Availability e Usability	f
164	3	Availability e Performance	f
165	0	The new user interface started using the REST interface	f
165	1	External applications can administrate the GNU Mailman mailing lists	f
165	3	The \\gm{} interface became public	f
166	1	Client-Server	f
166	2	Pipes-and-Filters	f
166	3	Publish-Subscribe	f
167	0	Data Model	f
167	1	Decomposition	f
167	3	Pipes-and-Filters	f
168	0	The quality of Performance	f
168	1	The quality of Availability	f
168	2	The quality of Reliability	f
169	0	Security	f
169	1	Security and Testability	f
169	3	Reliability and Testability	f
170	0	Module	f
170	1	Component-and-Connector	f
170	2	Module and Component-and-Connector	f
171	1	Performance and Interoperability	f
171	2	Easiness of Development and Performance	f
171	3	Interoperability	f
172	1	Aspects	f
172	2	Uses	f
172	3	Data Model	f
173	0	User Model and Undo	f
173	1	User Model	f
173	3	System Model	f
174	0	It is not possible to support SQL searches in the application server	f
174	1	It is always necessary to search in the database before accessing an object	f
174	3	It is necessary that each object has a unique identifier	f
175	0	Exception Handling	f
175	1	Increase Competence Set	f
175	2	Exception Prevention	f
176	0	The Model module uses the Observer module	f
176	1	The Model module uses the Observer module if data is sent in the notification	f
176	2	The Model module uses the Observer module if complex data is sent in the notification	f
177	0	The Uses views are designed first	f
177	2	There isn't any predefined order to design Uses and Layered views	f
177	3	Whenever there is at least one Uses view then a Layered view needs to be designed as well	f
178	0	Can only contain a single architectural style	f
178	1	May contain several architectural styles, but only if the are of the Component-and-Connector and Allocation viewtypes	f
178	2	May contain several architectural styles, but only if they are of the same viewtype	f
179	1	Can be applied before a Decomposition view is designed	f
179	2	Once applied in a view may be necessary to change the Decomposition view	f
179	3	Should be applied in at least a view of the system	f
180	0	It is an advantage for programmers that the transactional behavior is transparently provided	f
180	1	It is not necessary to have transactional behavior in the business logic	f
180	2	The Component-and-Connector architecture needs to have three Tiers	f
405	2	Detect and Recover.	t
181	1	but it reduces performance, anyway, because the buffer components easily overflow	f
181	2	and it improves reliability because it also provides an interface that the webapp components can use to access the most recent data	f
181	3	and it improves security because the buffer is protected agains attacks	f
182	1	security	f
182	2	modifiability	f
182	3	usability	f
183	0	Decomposition	f
183	1	Generalization	f
183	3	Uses	f
184	0	Because performance is not relevant	f
184	1	To statically store all the information	f
184	3	Because there are no requirements for availability	f
185	0	May result in a writer receiving an exception when the information when is not available yet	f
185	1	Requires that a timestamp is associated with every write	f
185	2	Results in that the writer requests have priority over all the other all other request	f
186	0	Read servers respond to all requests	f
186	1	Read servers synchronize with the master server	f
186	2	Write server had processed all pending writes	f
187	0	Performance	f
187	2	Availability	f
187	3	Usability	f
188	0	Performance	f
188	1	Usability	f
188	2	Availability	f
189	1	Performance, Security and Interoperability	f
189	2	Security, Performance, Usability, Interoperability and Mobility	f
189	3	Security, Performance, Usability and Mobility	f
190	0	Performance and Security	f
190	1	Performance	f
190	2	Security	f
191	0	Performance	f
191	2	Availability	f
191	3	Security and Availabilty	f
192	0	Performance and Usability	f
192	1	Security and Usability	f
192	3	Performance and Availability	f
193	1	Only one of them uses machine learning techniques	f
193	2	Only one of them does prefetch	f
193	3	Only one of them uses a proprietary service	f
194	0	Availability	f
194	2	Security and Availability	f
194	3	Usability	f
195	1	Aspects	f
195	2	Decomposition	f
195	3	Data Model	f
196	1	Active replication	f
196	2	Increase resources	f
196	3	Increase resource efficiency	f
197	0	Improve the modifiability quality, because the new REST interface hides the messages' structure	f
197	1	Improve the interoperability quality, because external applications can use the administrative functionalities	f
197	2	Improve the interoperability quality, because external applications can read and send messages to \\gm{}	f
198	0	Security	f
198	2	Availability	f
198	3	Usability	f
199	0	Each messages does not need to be accessed concurrently by several processes	f
199	2	It is not efficient to store the messages in a relational database	f
199	3	Al the previous options	f
200	1	Peer-to-Peer	f
200	2	Dynamic Creation and Destruction	f
200	3	Tiers	f
201	0	Is a high-level view of the system with the purpose of\n    understanding what are the system's goals and features	f
201	2	Is a set of guidelines that the developing team should\n    follow in the development of the system	f
201	3	Is a set of diagrams that show the runtime elements of the\n    system and their relationships	f
202	0	We need one view for each system stakeholder	f
202	1	A single view would be too simplistic	f
202	3	All of the above	f
203	1	Is always an architectural decision because it applies to\n  the entire program	f
203	2	May be an architectural decision, depending on the\n  requirements for the system	f
203	3	May be an architectural decision, depending on the\n  architect's experience	f
204	1	Use a classic 3-layer architecture with the following\n  layers, from top to bottom: Presentation, Domain Logic, and Data\n  Access	f
204	2	Use a layered architecture, where the bottommost layer\n  provides an interface for creating a graphical interface	f
204	3	Use two deployment views, each one allocating different\n  components to different machines with different operating systems	f
205	0	We must use a Uses style	f
205	2	We must identify a module for writing the scores in a\n  Decomposition style	f
201	1	Is composed of things such as code units, runtime elements,\n    hardware, and people, together with the relationships among them	t
202	2	The views describe different aspects of the system	t
203	0	Is never an architectural decision because it is too low-level	t
204	0	Create a decomposition where there is a module corresponding\n  to the Windows OS and another one for the Mac OS X, each one\n  encapsulating the behavior of the corresponding OS	t
205	1	We must use a layered architecture with a ``Data Access''\n  layer	t
205	3	We may assign the responsibility of writing the scores to\n  another module that already has other responsibilities	f
206	0	The Decomposition style	f
206	1	The Deployment style	f
206	3	The Work-assignment style	f
207	0	A module may contain code from different components	f
207	1	A component may execute code from different modules	f
207	2	A module may execute code from different components	f
208	0	Requires a more skilled team, because it is harder to develop	f
208	2	Is better for more complex domains, because it becomes\n  easier to maintain	f
208	3	None of the above	f
209	1	The Domain Model pattern to reduce the interface of the\n  Domain Logic layer to a controlled set	f
209	2	The Data Access layer to be able to access the data that it\n  needs in each service	f
209	3	None of de above	f
210	1	To increase the performance of the application, because it\n  caches previously loaded values in memory, thereby reducing the\n  number of round-trips to the database	f
210	2	To avoid loading many data from the database when a given\n  entity that has many relationships with other entities is loaded	f
210	3	None of the above	f
211	1	Depends more on the architect's experience than on anything\n    else.	f
211	2	Should not depend on the skills of the developing team.	f
211	3	Is driven by a trade-off among the stakeholders needs.	f
212	0	May be responsible for the Featuritis problems of architectures.	f
212	1	May be responsible for the Performitis problems of architectures.	f
212	2	Is focused on creating common generalizations of several systems.	f
213	0	Suffered from featuritis, because the architect decided to delay the difficult parts for latter in the development.	f
213	1	Did not suffer from featuritis.	f
213	3	Suffered from featuritis, but it had no impact on the final development.	f
214	0	Is a high-level view of the system with the purpose of\n  understanding what are the system's goals and features.	f
214	1	Is composed of things such as code units, runtime elements,\n  hardware, and people, together with the relationships among them.	f
214	3	Is a set of diagrams that show the runtime elements of the\n  system and their relationships.	f
215	0	A module may contain code from different components.	f
215	1	A component may execute code from different modules.	f
215	2	A module may execute code from different components.	f
216	1	The traffic monitoring system is the environment.	f
216	2	The Google Map is the artefact.	f
216	3	The location information is correctly included with a probability of 99.99\\% is the response measure.	f
217	0	A Condition Monitoring tactic for the Availability quality.	f
217	2	A Verify Message Integrity tactic to React to Attacks for the Security quality.	f
217	3	An Exception Prevention tactic to Prevent Faults for the Availability quality.	f
218	0	The source of stimulus for scenarios of the Availability quality.	f
218	1	The stimulus for scenarios of the Availability quality.	f
218	2	The stimulus for scenarios of the Security quality.	f
219	0	Manage sampling rate tactic.	f
219	1	Increase resource efficiency tactic.	f
219	2	Introduce concurrency tactic.	f
220	0	The source of stimulus is the ruleset.	f
220	1	The ruleset designer is the stimulus.	f
220	2	The environment is design time.	f
221	0	Schedule resources.	f
221	1	Condition monitoring.	f
221	3	Increase resource efficiency.	f
222	1	How the components manage the communication between the\n  remaining elements in the system.	f
222	2	The stakeholders that drive the development of the system.	f
222	3	The tactics that satisfy the most important requirements for\n  the system.	f
223	1	The Decomposition and Uses styles.	f
223	2	The Layered style.	f
223	3	The Generalization and Decomposition styles.	f
224	1	The Deployment style.	f
224	2	The Uses style.	f
224	3	The Work-assignment style.	f
225	0	Create a decomposition where there is a module corresponding\n  to the Windows OS and another one for the Mac OS X, each one\n  responsible for containing the OS-specific code.	f
225	2	Use an aspect-oriented architecture, where an aspect is used to generate a graphical interface.	f
206	2	The Uses style	t
225	3	Use two deployment views, each one allocating different\n  components to different machines with different operating systems.	f
226	0	It corresponds to a particular case of a specialization in a generalization view.	f
226	2	It represents a relation between a component's port and a port of one of its internal components.	f
226	3	It represent a relation between a component's port and a connector's role.	f
227	0	We have to use a Repository component-and-connector style.	f
227	2	We must identify a module for writing the scores in a\n  Decomposition style.	f
227	3	We may assign the responsibility of writing the scores to\n  another module that already has other responsibilities.	f
228	0	Client-server in both cases.	f
228	1	Client-server in the first case and Peer-to-peer in the second.	f
228	3	Peer-to-peer in the first case and Client-Server in the second.	f
229	1	Pipe-and-Filter.	f
229	2	Client-Server.	f
229	3	Publish-Subscribe.	f
230	0	Work assignment view.	f
230	2	Implementation view.	f
230	3	Deployment view.	f
231	1	The Requirements function is not part of the RulesSet module.	f
231	2	The Requirements function is part of the Objects module.	f
231	3	The Requirements function is part of the Dynamic Design module.	f
232	0	A component-and-connector view using a shared-data style.	f
232	1	A data model view.	f
232	2	A service-oriented architecture view.	f
233	0	Peer-to-peer style.	f
233	1	Pipe-and-Filter style.	f
233	3	Publish-subscribe style.	f
234	0	The team did not know the FenixFramework.	f
234	1	The domain only needs CRUD (Create, Read, Update, and Delete) operations.	f
234	3	Most of the information is stored in the client.	f
235	0	It is necessary to design two deployment views, one for each deployment option.	f
235	1	It is necessary to design a single deployment view that contains all the variation, because only the hardware capabilities change.	f
235	2	Two different component-and-connector views are necessary to represent the same runtime behavior of the system.	f
236	1	Undo tactic for usability, because the server can undo the snapshot.	f
236	2	Increase resource efficiency tactic for performance, because it reduces the need of upfront calculus/computation on new clients.	f
236	3	Multiple copies of data tactic for performance, clients do not have to execute the commands.	f
237	0	The server propagates them to all the clients.	f
237	2	The server only propagates local commands to the clients and keeps cursor movements in a log and the snapshots in a repository.	f
237	3	The server propagates the snapshots and the cursor movements to the clients and store the local commands for the initialization of new clients.	f
238	0	Testability.	f
238	1	Modifiability.	f
238	2	Testability and Modifiability.	f
239	0	The Transaction Script pattern to help demarcate the\n  business transactions.	f
239	1	The Domain Model pattern to reduce the interface of the\n  Domain Logic layer to a controlled set.	f
239	2	The Data Access layer to be able to access the data that it\n  needs in each service.	f
240	0	The Transaction Script pattern.	f
240	1	The Table Module pattern.	f
240	2	The Domain Model pattern.	f
241	0	The Transaction Script pattern to help demarcate the\n  business transactions.	f
241	1	The Domain Model pattern to reduce the interface of the\n  Domain Logic layer to a controlled set.	f
241	3	The Table Module pattern to hide the details of the table\n  structure for the Presentation layer.	f
242	0	The Transaction Script pattern.	f
242	2	The Domain Model pattern.	f
242	3	The Service Layer pattern.	f
243	0	Work assignment view.	f
243	1	Install view.	f
243	3	Deployment view.	f
244	0	The Requirements function is part of the Design module.	f
244	2	The Requirements function is part of the Objects module.	f
244	3	The Requirements function is part of the Dynamic Design module.	f
245	1	An Encrypt Data tactic for the Security quality.	f
245	2	A Verify Message Integrity tactic to React to Attacks for the Security quality.	f
245	3	An Exception Prevention tactic to Prevent Faults for the Availability quality.	f
246	1	The stimulus for scenarios of the Availability quality.	f
246	2	The stimulus for scenarios of the Security quality.	f
246	3	The source of stimulus for scenarios of the Security quality.	f
247	0	Manage sampling rate tactic.	f
247	1	Increase resource efficiency tactic.	f
247	2	Introduce concurrency tactic.	f
248	0	The source of stimulus is the ruleset.	f
248	1	The ruleset designer is the stimulus.	f
248	3	The response is defer binding.	f
249	1	Condition monitoring.	f
249	2	Reduce overhead.	f
249	3	Increase resource efficiency.	f
250	0	Create a decomposition where there is a module corresponding\n  to the Windows OS and another one for the Mac OS X, each one\n  responsible for containing the OS-specific code.	f
250	1	Use a classic 3-layer architecture with the following\n  layers, from top to bottom: Presentation, Domain Logic, and Data\n  Access.	f
250	2	Use an aspect-oriented architecture, where an aspect is used to generate a graphical interface.	f
251	0	It corresponds to a particular case of a specialization in a generalization view.	f
251	1	It represents a relation between a connector's role and a port of one of its internal components.	f
251	3	It represent a relation between a component's port and a connector's role.	f
252	1	It is not necessary to use a ``Data Access'' layer because the information is simple.	f
252	2	We must identify a module for writing the scores in a\n  Decomposition style.	f
252	3	We may assign the responsibility of writing the scores to\n  another module that already has other responsibilities.	f
253	0	Client-server in both cases.	f
253	1	Client-server in the first case and Peer-to-peer in the second.	f
253	2	Peer-to-peer in both cases.	f
254	0	Depends mostly on the system's functional requirements.	f
254	2	Should not depend on the skills of the developing team.	f
254	3	Is driven by a trade-off among the stakeholders needs.	f
255	0	May be responsible for the Featuritis problems of architectures.	f
255	1	May be responsible for the Performitis problems of architectures.	f
255	3	Is focused on the details of the architecture.	f
256	1	A component may execute code from different modules.	f
256	2	A module may execute code from different components.	f
256	3	A component may contain code from different modules.	f
257	0	The current location is the source of the stimulus.	f
257	1	The traffic monitoring system is the environment.	f
257	3	The location information is correctly included with a probability of 99.99\\% is the response measure.	f
258	0	Peer-to-Peer.	f
258	1	Pipe-and-Filter.	f
258	2	Client-Server.	f
259	0	A component-and-connector view using a shared-data style.	f
259	1	A data model view.	f
259	3	A data model view and a component-and-connector view using a shared-data style.	f
260	0	Peer-to-peer style.	f
260	1	Pipe-and-Filter style.	f
260	2	Shared-data style.	f
261	0	The team did not know the FenixFramework.	f
261	1	The domain only needs CRUD (Create, Read, Update, and Delete) operations.	f
261	3	Most of the information is stored in the client.	f
262	0	It is necessary to design two deployment views, one for each deployment option.	f
262	2	Two different component-and-connector views are necessary to represent the same runtime behavior of the system.	f
262	3	The deployment options have a large impact on the work assignment view.	f
263	0	Passive redundancy for availability, because it is possible to recover from the commands log.	f
263	1	Undo tactic for usability, because the server can undo the snapshot.	f
263	3	Multiple copies of data tactic for performance, clients do not have to execute the commands.	f
264	0	The server propagates them to all the clients.	f
264	2	The server only propagates local commands to the clients and keeps cursor movements in a log and the snapshots in a repository.	f
264	3	The server propagates the snapshots and the cursor movements to the clients and store the local commands for the initialization of new clients.	f
265	1	Modifiability.	f
265	2	Testability and Modifiability.	f
265	3	Performance.	f
266	1	Did not suffer from featuritis.	f
266	2	Suffered from some level of featuritis, but it allowed to have a pilot from which the team learned.	f
266	3	Suffered from featuritis, but it had no impact on the final development.	f
267	0	Is a high-level view of the system with the purpose of\n  understanding what are the system's goals and features.	f
267	1	Is composed of things such as code units, runtime elements,\n  hardware, and people, together with the relationships among them.	f
267	2	Is a set of guidelines that the developing team should\n  follow in the development of the system.	f
268	0	The most important requirements (both functional and\n  qualities) that the system must achieve.	f
268	1	How the components manage the communication between the\n  remaining elements in the system.	f
268	3	The tactics that satisfy the most important requirements for\n  the system.	f
269	1	The Decomposition and Uses styles.	f
269	2	The Layered style.	f
269	3	The Generalization and Decomposition styles.	f
270	0	The Decomposition style.	f
270	1	The Deployment style.	f
270	2	The Uses style.	f
271	1	To analyse the system's functional requirements to see what\n  is the system supposed to do	f
271	2	To analyse the implemented set of features to see what is it\n  that the system actually does	f
271	3	To talk with the people that developed the system to know\n  what they did and why they did it	f
272	1	The main goal of an architect is to identify the quality attributes of system	f
272	2	Architecture is the design that gets harder to change as development progresses	f
272	3	The main goal of an architect is to design a detailed structure of the system that supports most of the requirements	f
273	0	It is not a good idea to consider performance when designing the architecture of the system	f
273	1	The performance of a system only depends on the global performance strategies	f
273	3	None of the above	f
274	0	Represent different architectural qualities and they may not be all represented in a single view	f
274	1	Have a view for each stakeholder	f
274	3	Have a view for each group of interconnected components, and very often a system has several groups of interconnected components	f
275	0	A module	f
275	1	A component	f
275	2	Both, a module and a component	f
276	0	Describing what are the qualities that the system should possess	f
276	1	Describing a set of steps that a user of the system must\n  perform to accomplish some task	f
276	2	Describing a use case for the system that makes clear what\n  should be the system's responses to each of the user's inputs	f
277	0	Ping-and-echo requires the availability monitor to know the addresses of the components it is monitoring	f
277	2	In Ping-and-echo the availability monitor should always send the same request	f
277	3	In Heartbeat, the monitored components can change the message rate	f
278	0	It is not possible to achieve this requirement. A non-architectural solution is to be careful when hiring system administrators	f
278	1	It is necessary to use the authenticate authors tactic to authenticate system administrators before they access to the database	f
278	2	It is necessary to use the encrypt data tactic to encrypt the information with a password that is in a configuration file	f
279	1	Maintain user model	f
279	2	Maintain system model	f
279	3	Aggregate	f
280	0	A scenario for performance associated with a multiple copies of computation tactic	f
280	1	A scenario for usability associated with a support system initiative tactic	f
280	2	A scenario for performance associated with a limit event response tactic	f
281	0	Multiple copies of computation	f
281	2	Increase resource efficiency	f
281	3	All of the above	f
282	0	We should always satisfy in the first place the requirements\n    of the more important stakeholders (such as the client)	f
282	1	If no order was established among them, we would not know\n    from where should we start the design process	f
282	3	When it is not possible to satisfy all of the requirements\n    optimally, we should be aware of their relative importance so that\n    we may find a solution that corresponds to a satisfactory trade-off	f
283	1	Data model view	f
283	2	Generalization view	f
283	3	Layered view	f
284	0	Peer-to-Peer to represent the communication between the components	f
284	2	Generalisation to represent an abstraction common to all interfaces and keep API-specific details in child modules	f
405	3	Resist and React.	f
284	3	Layers to create a virtual machine that hides the internals of the application from its users interface code to allow the support of different user interfaces	f
285	1	Install because most of the modules need to be assigned to the same executable file	f
285	2	Development because it is not possible to do incremental development	f
285	3	Availability because if a module fails the failure easily propagates to all the other modules	f
286	1	A Allocation viewtype view	f
286	2	A Communicating processes view	f
286	3	A Install view	f
287	0	It is enough to show the load-balancer between the web clients machines and the servers machines using a deployment view	f
287	1	It is necessary to change the connector between the web clients and the web servers, in the component-and-connector view, to show the semantics that is provided by the load-balancer	f
287	2	It is necessary to create a uses view to show how clients require the correct functioning of servers	f
288	0	They have many different use cases, corresponding to many\n    distinct user interfaces	f
288	2	They need to be able to process concurrent requests from\n    the users	f
288	3	They have a very complex domain logic that requires much\n    processing power for answering each request	f
289	0	The Shared Data style	f
289	2	The Publish-subscribe style	f
289	3	The Client-Server style	f
290	1	Planning incremental releases of the system	f
290	2	Estimating the effort needed to implement the system	f
290	3	Analysing the system's portability and reusability	f
291	1	An aspects architectural style	f
291	2	A data model architectural style	f
291	3	A shared-data architectural style	f
292	1	Subscribes to the same kind of events that the \\textsc{inputSub} port	f
292	2	Subscribes to cursor position events	f
292	3	It is unnecessary in the diagram because the \\textsc{:TableEditor} can use port \\textsc{sub2} through the \\textsc{:Sheet} component	f
293	0	The communicating processes architectural style	f
293	1	The client-server architectural style	f
293	3	All of the above	f
294	0	Ignore faulty behaviour tactic	f
294	1	Ping-and-echo tactic	f
294	3	Retry tactic	f
295	0	Performance, because it describes what is the response to REST API calls	f
295	1	Modifiability, because the jsdom code can not be reused by several threads	f
295	2	Security, because it describes a "queue overflow" attack	f
296	0	Reduce overhead tactic	f
296	1	Increase resource efficiency tactic	f
296	2	Increase resources tactic	f
297	0	Overall costs, because of deployment	f
297	2	Testability, because of the logic complexity	f
297	3	Performance, because there is not a significative improvement by using more CPUs	f
298	0	A publish-subscribe style	f
298	1	A peer-to-peer style	f
298	2	A client-server style	f
299	1	Is typically used with more complex data access code	f
299	2	Requires that we write more code when we have only a\n  couple of simple use cases	f
299	3	All of the above	f
300	0	The Service Layer pattern	f
300	1	The Active Record pattern	f
300	2	The Transaction Script pattern	f
301	0	Ignore faulty behaviour tactic	f
301	2	Active redundancy tactic	f
301	3	Retry tactic	f
302	0	Requires a more skilled team, because the object-oriented\n  paradigm is more complex than the procedural paradigm	f
302	1	Is typically used with more complex data access code	f
302	3	All of the above	f
303	1	The Active Record pattern	f
303	2	The Transaction Script pattern	f
303	3	The Data Mapper pattern	f
304	1	Describing a set of steps that a user of the system must\n  perform to accomplish some task	f
304	2	Describing a use case for the system that makes clear what\n  should be the system's responses to each of the user's inputs	f
304	3	Describing the system's features by way of different\n  usage scenarios for it, in which users play the role of actors	f
305	0	Ping-and-echo requires the availability monitor to know the addresses of the components it is monitoring	f
305	2	In Ping-and-echo the availability monitor should always send the same request	f
305	3	In Heartbeat, the monitored components can change the message rate	f
286	0	A Module viewtype view	t
301	1	Ping-and-echo tactic	t
302	2	Requires that we write more code when we have only a\n  couple of simple use cases	t
303	0	The Service Layer pattern	t
304	0	Describing what are the qualities that the system should possess	t
305	1	Heartbeat requires the availability monitor to confirm the reception of the signal	t
306	0	It is not possible to achieve this requirement. A non-architectural solution is to be careful when hiring system administrators	f
306	1	It is necessary to use the authenticate authors tactic to authenticate system administrators before they access to the database	f
306	3	It is necessary to use the encrypt data tactic to encrypt the information on the client web browser, before it is send to the web server	f
307	0	Maintain task model	f
307	1	Maintain user model	f
307	2	Maintain system model	f
308	0	A scenario for performance associated with a multiple copies of computation tactic	f
308	2	A scenario for performance associated with a limit event response tactic	f
308	3	A scenario for usability associated with a support user initiative tactic	f
309	1	Active redundancy	f
309	2	Increase resource efficiency	f
309	3	All of the above	f
310	1	Data model view	f
310	2	Generalization view	f
310	3	Layered view	f
311	0	To analyse the source code of the system to see how it is built	f
311	1	To analyse the system's functional requirements to see what\n  is the system supposed to do	f
311	3	To talk with the people that developed the system to know\n  what they did and why they did it	f
312	1	The main goal of an architect is to identify the quality attributes of system	f
312	2	Architecture is the design that gets harder to change as development progresses	f
312	3	The main goal of an architect is to design a detailed structure of the system that supports most of the requirements	f
313	0	It is not a good idea to consider performance when designing the architecture of the system	f
313	1	The performance of a system only depends on the global performance strategies	f
313	2	Testability and maintainability always conflict with performance	f
314	0	Represent different architectural qualities and they may not be all represented in a single view	f
314	1	Have a view for each stakeholder	f
314	3	Have a view for each group of interconnected components, and very often a system has several groups of interconnected components	f
315	0	We should always satisfy in the first place the requirements\n    of the more important stakeholders (such as the client)	f
315	1	If no order was established among them, we would not know\n    from where should we start the design process	f
315	2	If one of the stakeholders complains that her requirement\n    is not satisfied, we may explain to her that there were other more\n    important requirements first	f
316	0	A module	f
316	2	Both, a module and a component	f
316	3	An allocation element	f
317	0	Peer-to-Peer to represent the communication between the components	f
317	1	Client-Server to represent the request the application makes to the different new sources	f
317	2	Generalisation to represent an abstraction common to all interfaces and keep API-specific details in child modules	f
318	0	Performance because there is an overhead of communication between the modules.	f
318	1	Install because most of the modules need to be assigned to the same executable file	f
318	2	Development because it is not possible to do incremental development	f
319	0	Performance, because it describes what is the response to REST API calls	f
319	1	Modifiability, because the jsdom code can not be reused by several threads	f
319	3	Interoperability, because the REST API allow the exchange of information with external applications	f
320	0	Reduce overhead tactic	f
320	1	Increase resource efficiency tactic	f
320	3	Testability tactic	f
321	0	Overall costs, because of deployment	f
321	2	Testability, because of the logic complexity	f
321	3	Performance, because there is not a significative improvement by using more CPUs	f
322	0	A Module viewtype view	f
322	1	A Allocation viewtype view	f
322	3	A Install view	f
323	1	A peer-to-peer style	f
323	2	A client-server style	f
323	3	A communication processes style	f
324	1	It is necessary to change the connector between the web clients and the web servers, in the component-and-connector view, to show the semantics that is provided by the load-balancer	f
324	2	It is necessary to create a uses view to show how clients require the correct functioning of servers	f
324	3	It is necessary to change the component-and-connector view to show the communicating processes	f
307	3	Aggregate	t
325	0	They have many different use cases, corresponding to many\n    distinct user interfaces	f
325	2	They need to be able to process concurrent requests from\n    the users	f
325	3	They have a very complex domain logic that requires much\n    processing power for answering each request	f
326	0	The Shared Data style	f
326	1	The Pipes-and-filters style	f
326	3	The Client-Server style	f
327	0	Analysing the performance of the system	f
327	1	Planning incremental releases of the system	f
327	2	Estimating the effort needed to implement the system	f
328	0	A generalisation architectural style	f
328	2	A data model architectural style	f
328	3	A shared-data architectural style	f
329	1	Subscribes to the same kind of events that the \\textsc{inputSub} port	f
329	2	Subscribes to cursor position events	f
329	3	It is unnecessary in the diagram because the \\textsc{:TableEditor} can use port \\textsc{sub2} through the \\textsc{:Sheet} component	f
330	1	The client-server architectural style	f
330	2	The deployment architectural style	f
330	3	All of the above	f
331	1	Featuritis requires the performance quality because the end user needs to execute the features.	f
331	2	Featuritis may be a result of a requirement of the business context.	f
331	3	Featuritis requires the modifiability quality to allow a the system to be easily modified to support new features.	f
332	0	Such misunderstanding and mistrust occurs because the stakeholders have their own agendas	f
332	1	The cycle Frank Buschmann refers to is the Architectural Influence Cycle.	f
332	2	The cycle Frank Buschmann refers to allows the clarification of requirements.	f
333	0	Frank Buschmann is referring to some possible consequences of the modifiability quality.	f
333	1	Frank Buschmann are considering performance and security as the most important qualities.	f
333	3	Frank Buschmann is not considering modifiability as an important quality	f
334	0	A flexible architecture occurs when it is not possible to identify all the requirements.	f
334	1	A solution to this problem is to prioritize the system qualities.	f
334	3	A solution to this problem is to reduce the level of flexibility of a system.	f
335	0	Performance is a quality that you have to address at the end of the development process.	f
335	1	There is no system which can have good performance and be easily maintainable.	f
335	2	We have to distinguish architectural performance from opportunistic performance.	f
336	1	Modifiability, flexibility, should be the first quality to be addressed because it allows the delay of architectural decisions.	f
336	2	The lack of functionality results in a system without business value, therefore a rich set of features should be implemented first.	f
336	3	A solution for any quality in isolation may lead to a biased architecture.	f
337	0	Is a functional prototype, which tests the functionalities required by the business stakeholders.	f
337	2	Is a baseline architecture that allows to experiment with the most significant architectural requirements.	f
337	3	Is an object-oriented framework, which integrates functional and non-functional requirements of the system.	f
338	0	Project and Technical Contexts.	f
338	1	Project and Professional Contexts.	f
338	2	Business and Project Contexts.	f
339	0	The book definition does not consider relevant the externally visible properties.	f
339	1	The book definition also considers that the properties are externally visible because they are used for reasoning by the stakeholders.	f
339	2	The book definition also considers that the properties are externally visible because by definition an architectural property is externally visible.	f
340	0	A component.	f
340	1	A module.	f
340	2	Both, a component and a module, depending on the perspective.	f
341	0	A component.	f
341	1	A module.	f
341	3	An external element.	f
342	1	A component-and-connector view.	f
342	2	An allocation view.	f
342	3	They are not represented by a view.	f
343	1	Usability.	f
343	2	Security.	f
343	3	Availability.	f
344	1	Availability and Performance.	f
344	2	Testability.	f
344	3	Availability.	f
345	0	This is right because if you don't the project fails.	f
342	0	A module view.	t
345	2	This is right but you cannot be completely sure whether the decisions are the right ones.	f
345	3	This is wrong because it is against agile way of thinking the software development process.	f
346	0	This shared understanding is what distinguishes architecture from design.	f
346	2	This shared understanding does not allow to define the architecture trade-offs because some of the stakeholders have their own goals.	f
346	3	This shared understanding does not allow to have a global perspective of the system, because stakeholders have different interests.	f
347	0	Are unable to understand the technology capabilities.	f
347	2	Are unable to distinguish architecture from design.	f
347	3	Are focused on the business context of the architecture.	f
348	0	Is unable to define a domain model of the system.	f
348	1	Is focused on the technology context of the architecture.	f
348	3	Is focused on the details of the architecture.	f
349	1	Understand the architecturally significant requirements.	f
349	2	The system design.	f
349	3	Documenting and communicating the architecture.	f
350	0	Tries to guarantee that the final system will have the qualities required by stakeholders.	f
350	2	Does not allow developers to define some of the design of the system	f
350	3	It requires automatic generation of code from the architecture.	f
351	0	Featuritis may result from a requirement of the technical context.	f
351	1	Featuritis requires the performance quality because the end user needs to execute the features.	f
351	3	Featuritis requires the modifiability quality to allow a the system to be easily modified to support new features.	f
352	0	Performance is a quality that you have to address at the end of the development process.	f
352	2	We have to distinguish architectural performance from opportunistic performance.	f
352	3	The system performance quality has impact on the performance of the execution of tests.	f
353	0	The book definition does not consider relevant the externally visible properties.	f
353	1	The book definition also considers that the properties are externally visible because they are used for reasoning by the stakeholders.	f
353	3	The book definition is not correct, as pointed out in the errata.	f
354	0	This shared understanding is what distinguishes architecture from design.	f
354	2	This shared understanding does not allow to define the architecture trade-offs because some of the stakeholders have their own goals.	f
354	3	This shared understanding does not allow to have a global perspective of the system, because stakeholders have different interests.	f
355	1	Understand the architecturally significant requirements.	f
355	2	The system design.	f
355	3	Documenting and communicating the architecture.	f
356	1	This shared understanding is necessary to define precise requirements.	f
356	2	This shared understanding does not allow to define the architecture trade-offs because some of the stakeholders have their own goals.	f
356	3	This shared understanding does not allow to have a global perspective of the system, because stakeholders have different interests.	f
357	1	Understand the architecturally significant requirements.	f
357	2	The system design.	f
357	3	Documenting and communicating the architecture.	f
358	0	Performance is a quality that you have to address at the end of the development process.	f
358	1	There is no system which can have good performance and be easily maintainable.	f
358	3	The system performance quality has impact on the performance of the execution of tests.	f
359	0	The book definition does not consider relevant the externally visible properties.	f
359	1	The book definition also considers that the properties are externally visible because they are used for reasoning by the stakeholders.	f
359	3	The book definition is not correct, as pointed out in the errata.	f
360	0	Featuritis may result from a requirement of the technical context.	f
360	1	Featuritis requires the performance quality because the end user needs to execute the features.	f
360	2	Featuritis may be a result of a requirement of the business context.	f
361	0	Frank Buschmann is referring to some possible consequences of the modifiability quality.	f
361	2	Frank Buschmann is referring that the consequences of a flexible system is poor performance and bad security.	f
361	3	Frank Buschmann is not considering modifiability as an important quality	f
362	0	Performance should be the last quality to be addressed because it is a local property of an architecture.	f
362	1	Modifiability, flexibility, should be the first quality to be addressed because it allows the delay of architectural decisions.	f
362	3	A solution for any quality in isolation may lead to a biased architecture.	f
363	1	A module.	f
363	2	Both, a component and a module, depending on the perspective.	f
363	3	An external element.	f
364	1	This is wrong because you can easily change these decisions during the project lifetime.	f
364	2	This is right but you cannot be completely sure whether the decisions are the right ones.	f
364	3	This is wrong because it is against agile way of thinking the software development process.	f
365	0	Is unable to define a domain model of the system.	f
365	2	Is focused on creating common generalizations of several systems.	f
365	3	Is focused on the details of the architecture.	f
366	1	A module.	f
366	2	Both, a component and a module, depending on the perspective.	f
366	3	An external element.	f
367	0	This is right because if you don't the project fails.	f
367	1	This is wrong because you can easily change these decisions during the project lifetime.	f
367	2	This is right but you cannot be completely sure whether the decisions are the right ones.	f
368	0	Is unable to define a domain model of the system.	f
368	1	Is focused on the technology context of the architecture.	f
368	3	Is focused on the details of the architecture.	f
369	0	Performance should be the last quality to be addressed because it is a local property of an architecture.	f
369	1	Modifiability, flexibility, should be the first quality to be addressed because it allows the delay of architectural decisions.	f
369	3	A solution for any quality in isolation may lead to a biased architecture.	f
370	0	Frank Buschmann is referring to some possible consequences of the modifiability quality.	f
370	1	Frank Buschmann are considering performance and security as the most important qualities.	f
370	2	Frank Buschmann is referring that the consequences of a flexible system is poor performance and bad security.	f
371	0	Such misunderstanding and mistrust occurs because the stakeholders have their own agendas	f
371	1	The cycle Frank Buschmann refers to is the Architectural Influence Cycle.	f
371	3	To break such misunderstanding and mistrust the architecture has to make explicit the stakeholders needs.	f
372	0	Is a functional prototype, which tests the functionalities required by the business stakeholders.	f
372	2	Is a baseline architecture that allows to experiment with the most significant architectural requirements.	f
372	3	Is an object-oriented framework, which integrates functional and non-functional requirements of the system.	f
373	0	A component.	f
373	1	A module.	f
373	3	An external element.	f
374	0	Modifiability.	f
374	2	Security.	f
374	3	Availability.	f
375	1	Are focused on the project context of the architecture.	f
375	2	Are unable to distinguish architecture from design.	f
375	3	Are focused on the business context of the architecture.	f
376	1	Are focused on the project context of the architecture.	f
376	2	Are unable to distinguish architecture from design.	f
376	3	Are focused on the business context of the architecture.	f
377	1	A module.	f
377	2	Both, a component and a module, depending on the perspective.	f
377	3	An external element.	f
378	0	Such misunderstanding and mistrust occurs because the stakeholders have their own agendas	f
378	1	The cycle Frank Buschmann refers to is the Architectural Influence Cycle.	f
378	3	To break such misunderstanding and mistrust the architecture has to make explicit the stakeholders needs.	f
379	0	Modifiability.	f
379	1	Usability.	f
379	3	Availability.	f
380	0	Is a functional prototype, which tests the functionalities required by the business stakeholders.	f
380	1	Is an architecture that demonstrates that the system will support the qualities raised by the stakeholders.	f
380	2	Is a baseline architecture that allows to experiment with the most significant architectural requirements.	f
381	0	A flexible architecture occurs when it is not possible to identify all the requirements.	f
381	2	Performance uncertainty about the system should be dealt with more flexibility.	f
381	3	A solution to this problem is to reduce the level of flexibility of a system.	f
382	0	Project and Technical Contexts.	f
382	1	Project and Professional Contexts.	f
382	3	Professional and Technical Contexts.	f
383	1	A component-and-connector view.	f
383	2	An allocation view.	f
383	3	They are not represented by a view.	f
384	1	Availability and Performance.	f
384	2	Testability.	f
384	3	Availability.	f
385	0	Tries to guarantee that the final system will have the qualities required by stakeholders.	f
385	2	Does not allow developers to define some of the design of the system	f
385	3	It requires automatic generation of code from the architecture.	f
386	1	Tries to guarantee that the final system will have the qualities aimed by the architecture.	f
386	2	Does not allow developers to define some of the design of the system	f
386	3	It requires automatic generation of code from the architecture.	f
387	0	Modifiability.	f
387	1	Availability and Performance.	f
387	2	Testability.	f
388	0	Project and Technical Contexts.	f
388	1	Project and Professional Contexts.	f
388	3	Professional and Technical Contexts.	f
389	0	A module view.	f
389	1	A component-and-connector view.	f
389	3	They are not represented by a view.	f
390	0	A flexible architecture occurs when it is not possible to identify all the requirements.	f
390	1	A solution to this problem is to prioritize the system qualities.	f
390	2	Performance uncertainty about the system should be dealt with more flexibility.	f
391	0	Performance.	f
391	1	Availability.	f
391	3	Fault-tolerance	f
392	0	The stimulus is a system input.	f
392	2	The artefact can be outside the system.	f
392	3	The stimulus and the response should be always present.	f
393	0	Is a mediator, an application of the mediator pattern, between the input stimulus and the output response.	f
393	1	May be associated to other tactics to deal with a single stimulus.	f
393	3	Is a system decomposition.	f
394	0	Performance.	f
394	2	Interoperability.	f
394	3	Testability.	f
395	1	Implements a tactic to prevent faults.	f
395	2	Can be used as the source of a stimulus in a scenario.	f
395	3	Can be used in a non-concurrent system.	f
396	1	Prevent a fault in software.	f
396	2	Prevent a fault in a process.	f
396	3	Detect a fault.	f
397	0	This situation corresponds to the use of the degradation availability tactic.	f
397	1	This situation corresponds to the use of the removal from service availability tactic.	f
397	2	This situation corresponds to the use of the limit access security tactic.	f
398	0	Ignore faulty behavior.	f
398	1	Transactions.	f
398	3	Exception prevention.	f
399	1	Is a maintain user model design tactic.	f
399	2	Is a design tactic for a scenario where the source of stimulus are technical users.	f
399	3	Is a design tactic for a scenario where the source of stimulus is the graph owner user.	f
400	0	The quality addressed is availability.	f
400	1	The quality addressed is performance.	f
400	2	The quality addressed is availability and a voting design tactic is required to solve the problem.	f
401	0	The quality addressed is availability.	f
401	1	The quality addressed is modifiability.	f
401	3	The quality addressed is modifiability and an increase cohesion design tactic is required to solve the problem.	f
402	1	A Maintain Multiple Copies of Computation design tactic in the WebApp such that reads do not compete with writes.	f
402	2	A Maintain Multiple Copies of Data design tactic in Carbon.	f
402	3	A Maintain Multiple Copies of Data design tactic in the WebApp such that reads do not compete with writes.	f
403	0	Detect intrusion.	f
403	1	Limit access.	f
403	2	Limit exposure.	f
404	0	Detect intrusion.	f
404	2	Verify message integrity.	f
404	3	Detect message delay.	f
405	0	Detect and Resist.	f
405	1	Detect and React.	f
401	2	The quality addressed is availability and an active redundancy design tactic is required to solve the problem.	t
402	0	A Maintain Multiple Copies of Computation design tactic in Carbon.	t
403	3	Separate entities.	t
404	1	Detect service denial.	t
406	1	Limit exposure, locate the database system in the intranet.	f
406	2	Separate entities, to allow the use of more strict tactics on the sensitive data.	f
406	3	Change default settings, because default passwords are sensitive.	f
407	0	Limit access.	f
407	1	Increase resources.	f
407	3	Maintain multiple copies of data.	f
408	0	Increase resources.	f
408	1	Introduce concurrency.	f
408	2	Reduce overhead.	f
409	0	Maintain multiple copies of data tactic.	f
409	1	Introduce concurrence tactic.	f
409	3	Schedule resources tactic.	f
410	0	Maintain user model tactic.	f
410	1	Introduce concurrence tactic.	f
410	2	Increase resource efficiency tactic.	f
411	1	Availability.	f
411	2	Reliability.	f
411	3	Fault-tolerance	f
412	1	The response can be omitted.	f
412	2	The artefact can be outside the system.	f
412	3	The stimulus and the response should be always present.	f
413	0	Is a mediator, an application of the mediator pattern, between the input stimulus and the output response.	f
413	1	May be associated to other tactics to deal with a single stimulus.	f
413	3	Is a system decomposition.	f
414	0	Performance.	f
414	1	Availability.	f
414	3	Testability.	f
415	0	Implements a tactic to recover from faults.	f
415	1	Implements a tactic to prevent faults.	f
415	2	Can be used as the source of a stimulus in a scenario.	f
416	0	Prevent a fault in hardware.	f
416	1	Prevent a fault in software.	f
416	2	Prevent a fault in a process.	f
417	0	This situation corresponds to the use of the degradation availability tactic.	f
417	2	This situation corresponds to the use of the limit access security tactic.	f
417	3	This situation corresponds to the use of the limit exposure security tactic.	f
418	0	Ignore faulty behavior.	f
418	1	Transactions.	f
418	2	Rollback.	f
419	1	Is a maintain user model design tactic.	f
419	2	Is a design tactic for a scenario where the source of stimulus are technical users.	f
419	3	Is a design tactic for a scenario where the source of stimulus is the graph owner user.	f
420	0	The quality addressed is availability.	f
420	1	The quality addressed is performance.	f
420	2	The quality addressed is availability and a voting design tactic is required to solve the problem.	f
421	0	The quality addressed is availability.	f
421	2	The quality addressed is availability and an active redundancy design tactic is required to solve the problem.	f
421	3	The quality addressed is modifiability and an increase cohesion design tactic is required to solve the problem.	f
422	0	A Maintain Multiple Copies of Computation design tactic in Carbon.	f
422	1	A Maintain Multiple Copies of Computation design tactic in the WebApp such that reads do not compete with writes.	f
422	3	A Maintain Multiple Copies of Data design tactic in the WebApp such that reads do not compete with writes.	f
423	1	Limit access.	f
423	2	Limit exposure.	f
423	3	Separate entities.	f
424	0	Detect intrusion.	f
424	2	Verify message integrity.	f
424	3	Detect message delay.	f
425	1	Detect and React.	f
425	2	Detect and Recover.	f
425	3	Resist and React.	f
426	1	Limit exposure, locate the database system in the intranet.	f
426	2	Separate entities, to allow the use of more strict tactics on the sensitive data.	f
426	3	Change default settings, because default passwords are sensitive.	f
427	0	Limit access.	f
427	1	Increase resources.	f
427	2	Increase resource efficiency.	f
428	0	Increase resources.	f
428	2	Reduce overhead.	f
428	3	Manage sample rate.	f
429	0	Maintain multiple copies of data tactic.	f
429	2	Increase resource efficiency tactic.	f
429	3	Schedule resources tactic.	f
430	1	Introduce concurrence tactic.	f
430	2	Increase resource efficiency tactic.	f
430	3	Maintain task model tactic.	f
431	0	The stimulus is a system input.	f
431	2	The artefact can be outside the system.	f
431	3	The stimulus and the response should be always present.	f
432	0	Is a mediator, an application of the mediator pattern, between the input stimulus and the output response.	f
432	1	May be associated to other tactics to deal with a single stimulus.	f
432	3	Is a system decomposition.	f
433	1	Availability.	f
433	2	Interoperability.	f
433	3	Testability.	f
434	1	Increase resources.	f
434	2	Increase resource efficiency.	f
434	3	Maintain multiple copies of data.	f
435	0	Prevent a fault in hardware.	f
435	2	Prevent a fault in a process.	f
435	3	Detect a fault.	f
436	0	This situation corresponds to the use of the degradation availability tactic.	f
436	1	This situation corresponds to the use of the removal from service availability tactic.	f
436	3	This situation corresponds to the use of the limit exposure security tactic.	f
437	0	Ignore faulty behavior.	f
437	1	Transactions.	f
437	2	Rollback.	f
438	0	The quality addressed is availability.	f
438	2	The quality addressed is availability and a voting design tactic is required to solve the problem.	f
438	3	The quality addressed is performance and a maintain multiple copies of data design tactic is required to solve the problem.	f
439	1	The quality addressed is modifiability.	f
439	2	The quality addressed is availability and an active redundancy design tactic is required to solve the problem.	f
439	3	The quality addressed is modifiability and an increase cohesion design tactic is required to solve the problem.	f
440	1	A Maintain Multiple Copies of Computation design tactic in the WebApp such that reads do not compete with writes.	f
440	2	A Maintain Multiple Copies of Data design tactic in Carbon.	f
440	3	A Maintain Multiple Copies of Data design tactic in the WebApp such that reads do not compete with writes.	f
441	0	Performance.	f
441	1	Availability.	f
441	3	Fault-tolerance	f
442	1	Limit access.	f
442	2	Limit exposure.	f
442	3	Separate entities.	f
443	0	Is an aggregate design tactic.	f
443	1	Is a maintain user model design tactic.	f
443	2	Is a design tactic for a scenario where the source of stimulus are technical users.	f
444	0	Implements a tactic to recover from faults.	f
444	1	Implements a tactic to prevent faults.	f
444	3	Can be used in a non-concurrent system.	f
445	0	Detect intrusion.	f
445	1	Detect service denial.	f
445	2	Verify message integrity.	f
446	0	Detect and Resist.	f
446	2	Detect and Recover.	f
446	3	Resist and React.	f
447	0	Limit access, to restrict the access to the database system.	f
447	1	Limit exposure, locate the database system in the intranet.	f
447	2	Separate entities, to allow the use of more strict tactics on the sensitive data.	f
448	0	Increase resources.	f
448	1	Introduce concurrency.	f
448	2	Reduce overhead.	f
449	0	Maintain multiple copies of data tactic.	f
449	1	Introduce concurrence tactic.	f
449	3	Schedule resources tactic.	f
450	0	Maintain user model tactic.	f
450	1	Introduce concurrence tactic.	f
450	3	Maintain task model tactic.	f
451	1	Availability.	f
451	2	Reliability.	f
451	3	Fault-tolerance	f
452	0	The stimulus is a system input.	f
452	1	The response can be omitted.	f
452	2	The artefact can be outside the system.	f
453	0	Is a mediator, an application of the mediator pattern, between the input stimulus and the output response.	f
453	1	May be associated to other tactics to deal with a single stimulus.	f
453	3	Is a system decomposition.	f
454	0	Performance.	f
454	1	Availability.	f
454	3	Testability.	f
455	0	Implements a tactic to recover from faults.	f
455	1	Implements a tactic to prevent faults.	f
455	2	Can be used as the source of a stimulus in a scenario.	f
456	1	Prevent a fault in software.	f
456	2	Prevent a fault in a process.	f
456	3	Detect a fault.	f
457	0	This situation corresponds to the use of the degradation availability tactic.	f
457	2	This situation corresponds to the use of the limit access security tactic.	f
457	3	This situation corresponds to the use of the limit exposure security tactic.	f
458	0	Ignore faulty behavior.	f
458	1	Transactions.	f
458	2	Rollback.	f
459	0	Is an aggregate design tactic.	f
459	1	Is a maintain user model design tactic.	f
459	2	Is a design tactic for a scenario where the source of stimulus are technical users.	f
460	0	The quality addressed is availability.	f
460	1	The quality addressed is performance.	f
460	2	The quality addressed is availability and a voting design tactic is required to solve the problem.	f
461	0	The quality addressed is availability.	f
461	1	The quality addressed is modifiability.	f
461	3	The quality addressed is modifiability and an increase cohesion design tactic is required to solve the problem.	f
462	1	A Maintain Multiple Copies of Computation design tactic in the WebApp such that reads do not compete with writes.	f
462	2	A Maintain Multiple Copies of Data design tactic in Carbon.	f
462	3	A Maintain Multiple Copies of Data design tactic in the WebApp such that reads do not compete with writes.	f
463	1	Limit access.	f
463	2	Limit exposure.	f
463	3	Separate entities.	f
464	1	Detect service denial.	f
464	2	Verify message integrity.	f
464	3	Detect message delay.	f
465	0	Detect and Resist.	f
465	2	Detect and Recover.	f
465	3	Resist and React.	f
466	0	Limit access, to restrict the access to the database system.	f
466	2	Separate entities, to allow the use of more strict tactics on the sensitive data.	f
466	3	Change default settings, because default passwords are sensitive.	f
467	0	Limit access.	f
467	2	Increase resource efficiency.	f
467	3	Maintain multiple copies of data.	f
468	0	Increase resources.	f
468	1	Introduce concurrency.	f
468	3	Manage sample rate.	f
469	1	Introduce concurrence tactic.	f
469	2	Increase resource efficiency tactic.	f
469	3	Schedule resources tactic.	f
470	0	Maintain user model tactic.	f
470	2	Increase resource efficiency tactic.	f
470	3	Maintain task model tactic.	f
471	0	Performance.	f
471	1	Availability.	f
471	3	Fault-tolerance	f
472	0	Is a mediator, an application of the mediator pattern, between the input stimulus and the output response.	f
472	2	Is an architectural pattern.	f
472	3	Is a system decomposition.	f
473	0	Performance.	f
473	1	Availability.	f
473	3	Testability.	f
474	0	Implements a tactic to recover from faults.	f
474	2	Can be used as the source of a stimulus in a scenario.	f
474	3	Can be used in a non-concurrent system.	f
475	1	This situation corresponds to the use of the removal from service availability tactic.	f
475	2	This situation corresponds to the use of the limit access security tactic.	f
475	3	This situation corresponds to the use of the limit exposure security tactic.	f
476	1	Transactions.	f
476	2	Rollback.	f
476	3	Exception prevention.	f
477	0	Is an aggregate design tactic.	f
477	1	Is a maintain user model design tactic.	f
477	2	Is a design tactic for a scenario where the source of stimulus are technical users.	f
478	0	The quality addressed is availability.	f
478	1	The quality addressed is performance.	f
478	3	The quality addressed is performance and a maintain multiple copies of data design tactic is required to solve the problem.	f
479	1	The quality addressed is modifiability.	f
479	2	The quality addressed is availability and an active redundancy design tactic is required to solve the problem.	f
479	3	The quality addressed is modifiability and an increase cohesion design tactic is required to solve the problem.	f
480	0	A Maintain Multiple Copies of Computation design tactic in Carbon.	f
505	2	Detect and Recover.	f
480	1	A Maintain Multiple Copies of Computation design tactic in the WebApp such that reads do not compete with writes.	f
480	2	A Maintain Multiple Copies of Data design tactic in Carbon.	f
481	0	Detect intrusion.	f
481	1	Limit access.	f
481	3	Separate entities.	f
482	1	Detect service denial.	f
482	2	Verify message integrity.	f
482	3	Detect message delay.	f
483	0	Detect and Resist.	f
483	1	Detect and React.	f
483	2	Detect and Recover.	f
484	0	Limit access, to restrict the access to the database system.	f
484	2	Separate entities, to allow the use of more strict tactics on the sensitive data.	f
484	3	Change default settings, because default passwords are sensitive.	f
485	0	Limit access.	f
485	1	Increase resources.	f
485	3	Maintain multiple copies of data.	f
486	1	Introduce concurrency.	f
486	2	Reduce overhead.	f
486	3	Manage sample rate.	f
487	0	Prevent a fault in hardware.	f
487	1	Prevent a fault in software.	f
487	3	Detect a fault.	f
488	0	The stimulus is a system input.	f
488	1	The response can be omitted.	f
488	2	The artefact can be outside the system.	f
489	0	Maintain multiple copies of data tactic.	f
489	1	Introduce concurrence tactic.	f
489	3	Schedule resources tactic.	f
490	0	Maintain user model tactic.	f
490	1	Introduce concurrence tactic.	f
490	2	Increase resource efficiency tactic.	f
491	1	Availability.	f
491	2	Reliability.	f
491	3	Fault-tolerance	f
492	1	The response can be omitted.	f
492	2	The artefact can be outside the system.	f
492	3	The stimulus and the response should be always present.	f
493	0	Is a mediator, an application of the mediator pattern, between the input stimulus and the output response.	f
493	1	May be associated to other tactics to deal with a single stimulus.	f
493	3	Is a system decomposition.	f
494	0	Performance.	f
494	1	Availability.	f
494	3	Testability.	f
495	0	Implements a tactic to recover from faults.	f
495	1	Implements a tactic to prevent faults.	f
495	2	Can be used as the source of a stimulus in a scenario.	f
496	0	Prevent a fault in hardware.	f
496	1	Prevent a fault in software.	f
496	2	Prevent a fault in a process.	f
497	0	This situation corresponds to the use of the degradation availability tactic.	f
497	2	This situation corresponds to the use of the limit access security tactic.	f
497	3	This situation corresponds to the use of the limit exposure security tactic.	f
498	0	Ignore faulty behavior.	f
498	1	Transactions.	f
498	2	Rollback.	f
499	1	Is a maintain user model design tactic.	f
499	2	Is a design tactic for a scenario where the source of stimulus are technical users.	f
499	3	Is a design tactic for a scenario where the source of stimulus is the graph owner user.	f
500	0	The quality addressed is availability.	f
500	1	The quality addressed is performance.	f
500	2	The quality addressed is availability and a voting design tactic is required to solve the problem.	f
501	0	The quality addressed is availability.	f
501	2	The quality addressed is availability and an active redundancy design tactic is required to solve the problem.	f
501	3	The quality addressed is modifiability and an increase cohesion design tactic is required to solve the problem.	f
502	0	A Maintain Multiple Copies of Computation design tactic in Carbon.	f
502	1	A Maintain Multiple Copies of Computation design tactic in the WebApp such that reads do not compete with writes.	f
502	3	A Maintain Multiple Copies of Data design tactic in the WebApp such that reads do not compete with writes.	f
503	1	Limit access.	f
503	2	Limit exposure.	f
503	3	Separate entities.	f
504	0	Detect intrusion.	f
504	2	Verify message integrity.	f
504	3	Detect message delay.	f
505	1	Detect and React.	f
491	0	Performance.	t
501	1	The quality addressed is modifiability.	t
502	2	A Maintain Multiple Copies of Data design tactic in Carbon.	t
503	0	Detect intrusion.	t
504	1	Detect service denial.	t
505	0	Detect and Resist.	t
505	3	Resist and React.	f
506	1	Limit exposure, locate the database system in the intranet.	f
506	2	Separate entities, to allow the use of more strict tactics on the sensitive data.	f
506	3	Change default settings, because default passwords are sensitive.	f
507	0	Limit access.	f
507	1	Increase resources.	f
507	2	Increase resource efficiency.	f
508	0	Increase resources.	f
508	2	Reduce overhead.	f
508	3	Manage sample rate.	f
509	0	Maintain multiple copies of data tactic.	f
509	2	Increase resource efficiency tactic.	f
509	3	Schedule resources tactic.	f
510	1	Introduce concurrence tactic.	f
510	2	Increase resource efficiency tactic.	f
510	3	Maintain task model tactic.	f
511	0	Performance.	f
511	2	Reliability.	f
511	3	Fault-tolerance	f
512	0	The stimulus is a system input.	f
512	1	The response can be omitted.	f
512	3	The stimulus and the response should be always present.	f
513	1	May be associated to other tactics to deal with a single stimulus.	f
513	2	Is an architectural pattern.	f
513	3	Is a system decomposition.	f
514	1	Implements a tactic to prevent faults.	f
514	2	Can be used as the source of a stimulus in a scenario.	f
514	3	Can be used in a non-concurrent system.	f
515	0	Prevent a fault in hardware.	f
515	2	Prevent a fault in a process.	f
515	3	Detect a fault.	f
516	0	This situation corresponds to the use of the degradation availability tactic.	f
516	1	This situation corresponds to the use of the removal from service availability tactic.	f
516	3	This situation corresponds to the use of the limit exposure security tactic.	f
517	0	Limit access, to restrict the access to the database system.	f
517	1	Limit exposure, locate the database system in the intranet.	f
517	2	Separate entities, to allow the use of more strict tactics on the sensitive data.	f
518	0	Maintain user model tactic.	f
518	2	Increase resource efficiency tactic.	f
518	3	Maintain task model tactic.	f
519	1	Transactions.	f
519	2	Rollback.	f
519	3	Exception prevention.	f
520	1	Is a maintain user model design tactic.	f
520	2	Is a design tactic for a scenario where the source of stimulus are technical users.	f
520	3	Is a design tactic for a scenario where the source of stimulus is the graph owner user.	f
521	0	The quality addressed is availability.	f
521	1	The quality addressed is performance.	f
521	3	The quality addressed is performance and a maintain multiple copies of data design tactic is required to solve the problem.	f
522	1	The quality addressed is modifiability.	f
522	2	The quality addressed is availability and an active redundancy design tactic is required to solve the problem.	f
522	3	The quality addressed is modifiability and an increase cohesion design tactic is required to solve the problem.	f
523	0	A Maintain Multiple Copies of Computation design tactic in Carbon.	f
523	1	A Maintain Multiple Copies of Computation design tactic in the WebApp such that reads do not compete with writes.	f
523	2	A Maintain Multiple Copies of Data design tactic in Carbon.	f
524	0	Detect intrusion.	f
524	1	Limit access.	f
524	3	Separate entities.	f
525	0	Detect intrusion.	f
525	1	Detect service denial.	f
525	2	Verify message integrity.	f
526	0	Detect and Resist.	f
526	2	Detect and Recover.	f
526	3	Resist and React.	f
527	0	Performance.	f
527	1	Availability.	f
527	2	Interoperability.	f
528	0	Limit access.	f
528	1	Increase resources.	f
528	2	Increase resource efficiency.	f
529	0	Increase resources.	f
529	1	Introduce concurrency.	f
529	3	Manage sample rate.	f
530	0	Maintain multiple copies of data tactic.	f
530	1	Introduce concurrence tactic.	f
530	3	Schedule resources tactic.	f
531	1	Availability.	f
531	2	Reliability.	f
531	3	Fault-tolerance	f
532	0	The stimulus is a system input.	f
532	1	The response can be omitted.	f
532	2	The artefact can be outside the system.	f
533	0	Is a mediator, an application of the mediator pattern, between the input stimulus and the output response.	f
533	1	May be associated to other tactics to deal with a single stimulus.	f
533	3	Is a system decomposition.	f
534	0	Performance.	f
534	1	Availability.	f
534	3	Testability.	f
535	0	Implements a tactic to recover from faults.	f
535	1	Implements a tactic to prevent faults.	f
535	2	Can be used as the source of a stimulus in a scenario.	f
536	1	Prevent a fault in software.	f
536	2	Prevent a fault in a process.	f
536	3	Detect a fault.	f
537	0	This situation corresponds to the use of the degradation availability tactic.	f
537	2	This situation corresponds to the use of the limit access security tactic.	f
537	3	This situation corresponds to the use of the limit exposure security tactic.	f
538	0	Ignore faulty behavior.	f
538	1	Transactions.	f
538	2	Rollback.	f
539	0	Is an aggregate design tactic.	f
539	1	Is a maintain user model design tactic.	f
539	2	Is a design tactic for a scenario where the source of stimulus are technical users.	f
540	0	The quality addressed is availability.	f
540	1	The quality addressed is performance.	f
540	2	The quality addressed is availability and a voting design tactic is required to solve the problem.	f
541	0	The quality addressed is availability.	f
541	1	The quality addressed is modifiability.	f
541	3	The quality addressed is modifiability and an increase cohesion design tactic is required to solve the problem.	f
542	1	A Maintain Multiple Copies of Computation design tactic in the WebApp such that reads do not compete with writes.	f
542	2	A Maintain Multiple Copies of Data design tactic in Carbon.	f
542	3	A Maintain Multiple Copies of Data design tactic in the WebApp such that reads do not compete with writes.	f
543	1	Limit access.	f
543	2	Limit exposure.	f
543	3	Separate entities.	f
544	1	Detect service denial.	f
544	2	Verify message integrity.	f
544	3	Detect message delay.	f
545	0	Detect and Resist.	f
545	2	Detect and Recover.	f
545	3	Resist and React.	f
546	0	Limit access, to restrict the access to the database system.	f
546	2	Separate entities, to allow the use of more strict tactics on the sensitive data.	f
546	3	Change default settings, because default passwords are sensitive.	f
547	0	Limit access.	f
547	2	Increase resource efficiency.	f
547	3	Maintain multiple copies of data.	f
548	0	Increase resources.	f
548	1	Introduce concurrency.	f
548	3	Manage sample rate.	f
549	1	Introduce concurrence tactic.	f
549	2	Increase resource efficiency tactic.	f
549	3	Schedule resources tactic.	f
550	0	Maintain user model tactic.	f
550	2	Increase resource efficiency tactic.	f
550	3	Maintain task model tactic.	f
551	0	Performance.	f
551	1	Availability.	f
551	3	Fault-tolerance	f
552	0	The stimulus is a system input.	f
552	2	The artefact can be outside the system.	f
552	3	The stimulus and the response should be always present.	f
553	0	Performance.	f
553	1	Availability.	f
553	3	Testability.	f
554	0	Implements a tactic to recover from faults.	f
554	2	Can be used as the source of a stimulus in a scenario.	f
554	3	Can be used in a non-concurrent system.	f
555	1	Prevent a fault in software.	f
555	2	Prevent a fault in a process.	f
555	3	Detect a fault.	f
556	1	Introduce concurrence tactic.	f
556	2	Increase resource efficiency tactic.	f
556	3	Schedule resources tactic.	f
557	0	Ignore faulty behavior.	f
557	1	Transactions.	f
557	2	Rollback.	f
558	0	Is an aggregate design tactic.	f
558	1	Is a maintain user model design tactic.	f
558	3	Is a design tactic for a scenario where the source of stimulus is the graph owner user.	f
559	1	The quality addressed is performance.	f
559	2	The quality addressed is availability and a voting design tactic is required to solve the problem.	f
559	3	The quality addressed is performance and a maintain multiple copies of data design tactic is required to solve the problem.	f
560	0	A Maintain Multiple Copies of Computation design tactic in Carbon.	f
560	1	A Maintain Multiple Copies of Computation design tactic in the WebApp such that reads do not compete with writes.	f
560	2	A Maintain Multiple Copies of Data design tactic in Carbon.	f
561	0	Detect intrusion.	f
561	1	Limit access.	f
561	3	Separate entities.	f
562	1	Detect service denial.	f
562	2	Verify message integrity.	f
562	3	Detect message delay.	f
563	0	Detect and Resist.	f
563	1	Detect and React.	f
563	2	Detect and Recover.	f
564	0	Limit access, to restrict the access to the database system.	f
564	2	Separate entities, to allow the use of more strict tactics on the sensitive data.	f
564	3	Change default settings, because default passwords are sensitive.	f
565	0	Limit access.	f
565	1	Increase resources.	f
565	3	Maintain multiple copies of data.	f
566	1	Introduce concurrency.	f
566	2	Reduce overhead.	f
566	3	Manage sample rate.	f
567	0	The quality addressed is availability.	f
567	1	The quality addressed is modifiability.	f
567	3	The quality addressed is modifiability and an increase cohesion design tactic is required to solve the problem.	f
568	0	Is a mediator, an application of the mediator pattern, between the input stimulus and the output response.	f
568	1	May be associated to other tactics to deal with a single stimulus.	f
568	2	Is an architectural pattern.	f
569	0	This situation corresponds to the use of the degradation availability tactic.	f
569	1	This situation corresponds to the use of the removal from service availability tactic.	f
569	3	This situation corresponds to the use of the limit exposure security tactic.	f
570	0	Maintain user model tactic.	f
570	1	Introduce concurrence tactic.	f
570	2	Increase resource efficiency tactic.	f
571	1	Do in-house development.	f
571	2	Integrate the development of the software system with the organization's business goals.	f
571	3	Reimplement all the information systems of the organization	f
572	1	Availability scenario.	f
572	2	Modifiability scenario.	f
572	3	Usability scenario.	f
573	0	Business scenario.	f
573	1	Availability scenario.	f
573	3	Usability scenario.	f
574	0	Only contains business qualities.	f
574	1	Cannot be defined for the security quality.	f
574	3	Contains the business value and the architectural impact of architecturally significant requirements.	f
575	0	Is driven by functional requirements.	f
575	1	Is done in a single step, after all the tactics were identified.	f
575	2	Is a top-down process where a initial decomposition is chosen and it is successively decomposed without changing the initial decisions.	f
576	0	This ASR can easily be supported by the architecture because it has little effect in the architecture.	f
576	1	This ASR requires a specific architectural design because it profoundly affects the architecture.	f
576	2	The cost of meeting the ASR after development starts is too high.	f
577	0	This ASR can easily be supported by the architecture.	f
577	2	The architect have to decide on the cost/benefit of designing an architecture that supports this ASR.	f
577	3	The architect should support this ASR after designing an architecture that supports all the ASRs with high business value.	f
578	0	Results from a utility tree for performance.	f
578	1	Results from a single availability scenario.	f
578	2	Results from the application of a single ADD iteration.	f
579	1	Support user initiative tactic.	f
579	2	Maintain multiple copies of data tactic.	f
579	3	Conflict detection tactic.	f
580	0	Testability.	f
580	1	Reliability.	f
580	2	Availability.	f
581	0	Performance.	f
581	2	Availability.	f
581	3	Usability.	f
582	0	Performance.	f
582	1	Modifiability.	f
582	3	Usability.	f
583	1	Interoperability.	f
583	2	Availability.	f
583	3	Usability.	f
584	0	Interoperability.	f
584	2	Availability.	f
584	3	Usability.	f
585	1	Persistence.	f
585	2	Retry.	f
585	3	Passive redundancy.	f
586	1	Limit access.	f
586	2	Support user initiative.	f
586	3	Support system initiative.	f
587	0	Is applied only once at the beginning of the architectural design process.	f
587	1	Is applied at the begin of the architectural design process but may be necessary to redo it later.	f
587	2	Is mostly driven by the security attribute quality.	f
588	0	Results in a similar decomposition as if the criteria was not applied but some modules are identified to be outsourced.	f
588	2	Allows to increase the overall calendar development time of the project because there is a communication overhead with external teams.	f
588	3	Allows to identify modules for which the development team does not have the required implementation competences.	f
589	0	Incorporate in the organization's core business the goals of a software house.	f
589	2	Integrate the development of the software system with the organization's business goals.	f
589	3	Reimplement all the information systems of the organization	f
590	0	Is driven by functional requirements.	f
590	1	Is done in a single step, after all the tactics were identified.	f
590	3	Is an iterative process where architectural designs are proposed as hypothesis and tested.	f
591	1	Reliability.	f
591	2	Availability.	f
591	3	Usability.	f
592	1	Performance.	f
592	2	Availability.	f
592	3	Usability.	f
593	0	Results in a similar decomposition as if the criteria was not applied but some modules are identified to be outsourced.	f
593	2	Allows to increase the overall calendar development time of the project because there is a communication overhead with external teams.	f
593	3	Allows to identify modules for which the development team does not have the required implementation competences.	f
594	1	Reliability.	f
594	2	Availability.	f
594	3	Usability.	f
595	0	Interoperability.	f
595	1	Performance.	f
595	2	Availability.	f
596	0	Incorporate in the organization's core business the goals of a software house.	f
596	1	Do in-house development.	f
596	3	Reimplement all the information systems of the organization	f
597	0	Results in a similar decomposition as if the criteria was not applied but some modules are identified to be outsourced.	f
597	1	Results in a decomposition where each module may be implemented by a single developer.	f
597	3	Allows to identify modules for which the development team does not have the required implementation competences.	f
598	0	Is driven by functional requirements.	f
598	1	Is done in a single step, after all the tactics were identified.	f
598	2	Is a top-down process where a initial decomposition is chosen and it is successively decomposed without changing the initial decisions.	f
599	0	Business scenario.	f
599	1	Availability scenario.	f
599	3	Usability scenario.	f
600	0	This ASR can easily be supported by the architecture because it has little effect in the architecture.	f
600	2	The cost of meeting the ASR after development starts is too high.	f
600	3	Any ASR that has a high business value cannot have a low architecture impact because it needs to be supported by the architecture.	f
601	0	Performance.	f
601	1	Modifiability.	f
601	3	Usability.	f
602	0	Change default settings.	f
602	2	Support user initiative.	f
602	3	Support system initiative.	f
783	2	Contain the business logic.	f
601	2	Availability.	t
602	1	Limit access.	t
603	1	Results in a decomposition where each module may be implemented by a single developer.	f
603	2	Allows to increase the overall calendar development time of the project because there is a communication overhead with external teams.	f
603	3	Allows to identify modules for which the development team does not have the required implementation competences.	f
604	1	Modifiability.	f
604	2	Availability.	f
604	3	Usability.	f
605	1	Limit access.	f
605	2	Support user initiative.	f
605	3	Support system initiative.	f
606	0	Results in a similar decomposition as if the criteria was not applied but some modules are identified to be outsourced.	f
606	1	Results in a decomposition where each module may be implemented by a single developer.	f
606	3	Allows to identify modules for which the development team does not have the required implementation competences.	f
607	0	This ASR can easily be supported by the architecture because it has little effect in the architecture.	f
607	1	This ASR requires a specific architectural design because it profoundly affects the architecture.	f
607	3	Any ASR that has a high business value cannot have a low architecture impact because it needs to be supported by the architecture.	f
608	0	Business scenario.	f
608	1	Availability scenario.	f
608	2	Modifiability scenario.	f
609	0	Only contains business qualities.	f
609	2	Contains the architectural tactics associated with architecturally significant requirements.	f
609	3	Contains the business value and the architectural impact of architecturally significant requirements.	f
610	0	This ASR can easily be supported by the architecture.	f
610	1	This ASR should be supported by the architecture because of its high impact.	f
610	3	The architect should support this ASR after designing an architecture that supports all the ASRs with high business value.	f
611	1	Reliability.	f
611	2	Availability.	f
611	3	Usability.	f
612	1	Interoperability.	f
612	2	Availability.	f
612	3	Usability.	f
613	0	Is applied only once at the beginning of the architectural design process.	f
613	2	Is mostly driven by the security attribute quality.	f
613	3	Follows a bottom-up decomposition process of the system.	f
614	1	Is applied at the begin of the architectural design process but may be necessary to redo it later.	f
614	2	Is mostly driven by the security attribute quality.	f
614	3	Follows a bottom-up decomposition process of the system.	f
615	0	Performance.	f
615	1	Reliability.	f
615	2	Availability.	f
616	0	Only contains business qualities.	f
616	1	Cannot be defined for the security quality.	f
616	3	Contains the business value and the architectural impact of architecturally significant requirements.	f
617	0	Performance.	f
617	1	Interoperability.	f
617	3	Usability.	f
618	0	This ASR can easily be supported by the architecture.	f
618	1	This ASR should be supported by the architecture because of its high impact.	f
618	2	The architect have to decide on the cost/benefit of designing an architecture that supports this ASR.	f
619	0	Business scenario.	f
619	1	Availability scenario.	f
619	3	Usability scenario.	f
620	0	Results from a utility tree for performance.	f
620	2	Results from the application of a single ADD iteration.	f
620	3	Results from the application of several ADD iterations.	f
621	0	Maintain system model tactic.	f
621	1	Support user initiative tactic.	f
621	3	Conflict detection tactic.	f
622	0	Rollback.	f
622	2	Retry.	f
622	3	Passive redundancy.	f
623	1	Is applied at the begin of the architectural design process but may be necessary to redo it later.	f
623	2	Is mostly driven by the security attribute quality.	f
623	3	Follows a bottom-up decomposition process of the system.	f
624	1	Support user initiative tactic.	f
624	2	Maintain multiple copies of data tactic.	f
624	3	Conflict detection tactic.	f
625	1	Is applied at the begin of the architectural design process but may be necessary to redo it later.	f
625	2	Is mostly driven by the security attribute quality.	f
625	3	Follows a bottom-up decomposition process of the system.	f
626	0	Rollback.	f
626	1	Persistence.	f
626	3	Passive redundancy.	f
627	0	Results from a utility tree for performance.	f
627	1	Results from a single availability scenario.	f
627	3	Results from the application of several ADD iterations.	f
628	0	Business scenario.	f
628	1	Availability scenario.	f
628	2	Modifiability scenario.	f
629	0	Allows the analysis of the impact of changes because if a module uses another it will necessarily have to change whenever the used module changes.	f
629	2	Allows incremental development because the possible increments of functionally can be inferred from use dependencies.	f
629	3	Improves testability because it informs the tester about which modules involved in circular use dependencies.	f
630	0	The correctness of the caller module may not depend on the correct implementation of the invoked function in the called module.	f
630	1	The invoked function may not have any input parameter.	f
630	3	The invoked function may not have both any input parameter nor any output parameter.	f
631	1	Applying the decomposition style to some of the modules in the loop chain.	f
631	2	Identifying which of the \\emph{uses} dependencies are actually generalization dependencies.	f
631	3	Decomposing a \\emph{uses} relation into different interfaces.	f
632	1	Because the \\emph{is-a} relation does not allow reuse of implementation.	f
632	2	By adding, removing, or changing children.	f
632	3	By changing a parent, which will automatically change all the children that inherit from it.	f
633	0	This means that the modules inside a layer cannot be loosely coupled.	f
633	2	This means that each module cannot use other modules inside the same layer.	f
633	3	This means that the modules inside a layer are likely to be ported to a new application together.	f
634	0	She should try to use a view of the Aspects style, assign this responsibility to a module such that the other modules can crosscut this responsibility.	f
634	1	She should try to use a view of the Aspects style, assign this responsibility to a module and bind it to the modules affected by it.	f
634	3	This means that in this software system it is not possible to modularize each responsibility in a cohesive module.	f
635	0	It is necessary design a CRUD matrix to show the dependencies between the persistent information.	f
635	1	It is enough to design a view of the Data Model architectural style at the conceptual level because Facebook information has a very simple structure.	f
635	2	It is not necessary to have any view of the Data Model architectural style because Facebook information has a very simple structure.	f
636	0	Relates a view of the Uses style with a view of the Data Model style.	f
636	2	Allows to avoid redundancy and inconsistency.	f
636	3	Describes the structure of the data used by the system.	f
637	1	Limit access.	f
637	2	Authorize actors.	f
637	3	Separate entities.	f
638	1	Exception detection.	f
638	2	Detect intrusion.	f
638	3	Condition monitoring.	f
639	0	Schedule resources.	f
639	1	Maintain multiple copies of data.	f
639	3	Reduce overhead.	f
640	1	Multiple copies of computation tactic.	f
640	2	Passive redundancy tactic.	f
640	3	Multiple copies of computation and Active redundancy tactics.	f
641	0	A module interface has to be attached to a single component port.	f
641	1	A module interface can be replicated but component ports cannot.	f
641	2	A module interface cannot be replicated but component ports can.	f
642	0	The type of a connector does not depend on the type of its roles.	f
642	1	The type of a component does not depend on the type of its ports.	f
642	3	The attachment between components and connectors only depends on their ports and roles types.	f
643	0	A module contains the code that executes in a single component and a component executes the code of a single module.	f
643	1	A module contains the code that can execute in several components and a component executes the code of a single module.	f
643	2	A module contains the code that executes in a single component and a component can execute the code of several modules.	f
644	0	She encapsulates the connector qualities inside a higher level component.	f
644	2	She does not want to clutter the view with details and trusts the development team to implement the connector according to the required quality level.	f
644	3	The required quality associated with the connector is supported by existing and well-know technology.	f
645	0	It is possible to integrate a new data accessor without changing the other data accessors.	f
645	1	It is possible to change the repository schema without changing the data accessors.	f
645	2	The integration of a new data accessor only implies changes in the data accessors that access the same type of data.	f
646	0	It implements a maintain multiple copies of computation tactic.	f
646	1	It supports the concurrent access of data accessors.	f
646	2	It supports the access to persistent information.	f
647	0	It allows an undefined number of clients.	f
647	1	It is possible to have redundant servers.	f
647	3	Servers can send a heartbeat to clients.	f
648	0	She can define a variant of this style with asynchronous communication by allowing the client to register callbacks that the server calls at specific times.	f
648	1	She has to use another architectural style to describe asynchronous communication.	f
648	3	She can define a variant of this style with asynchronous communication by allowing the server to have the initiative to initiate the interaction.	f
649	1	Applying the decomposition style to some of the modules in the loop chain.	f
649	2	Identifying which of the \\emph{uses} dependencies are actually generalization dependencies.	f
649	3	Decomposing a \\emph{uses} relation into different interfaces.	f
650	0	She should try to use a view of the Aspects style, assign this responsibility to a module such that the other modules can crosscut this responsibility.	f
650	1	She should try to use a view of the Aspects style, assign this responsibility to a module and bind it to the modules affected by it.	f
650	2	She should define finer-grained modules where she splits the unassigned responsibility.	f
651	0	Limit exposure.	f
651	1	Limit access.	f
651	3	Separate entities.	f
652	0	The type of a connector does not depend on the type of its roles.	f
652	1	The type of a component does not depend on the type of its ports.	f
652	3	The attachment between components and connectors only depends on their ports and roles types.	f
653	0	It implements a maintain multiple copies of computation tactic.	f
653	1	It supports the concurrent access of data accessors.	f
653	2	It supports the access to persistent information.	f
654	0	Applying the generalization style to identify child modules of a module in the loop chain.	f
654	1	Applying the decomposition style to some of the modules in the loop chain.	f
654	3	Decomposing a \\emph{uses} relation into different interfaces.	f
655	0	She should try to use a view of the Aspects style, assign this responsibility to a module such that the other modules can crosscut this responsibility.	f
655	2	She should define finer-grained modules where she splits the unassigned responsibility.	f
655	3	This means that in this software system it is not possible to modularize each responsibility in a cohesive module.	f
656	0	Limit exposure.	f
656	1	Limit access.	f
656	3	Separate entities.	f
657	0	The type of a connector does not depend on the type of its roles.	f
657	2	The attachment is a runtime relation which dynamically manages type compliance.	f
657	3	The attachment between components and connectors only depends on their ports and roles types.	f
658	1	It supports the concurrent access of data accessors.	f
658	2	It supports the access to persistent information.	f
658	3	It implements a maintain multiple copies of data tactic.	f
659	1	Because the \\emph{is-a} relation does not allow reuse of implementation.	f
659	2	By adding, removing, or changing children.	f
659	3	By changing a parent, which will automatically change all the children that inherit from it.	f
660	1	It is enough to design a view of the Data Model architectural style at the conceptual level because Facebook information has a very simple structure.	f
660	2	It is not necessary to have any view of the Data Model architectural style because Facebook information has a very simple structure.	f
660	3	It is necessary to design a view of the Data Model architectural style at the physical level to deal with performance issues of the access to data.	f
661	0	Schedule resources.	f
661	1	Maintain multiple copies of data.	f
661	3	Reduce overhead.	f
662	0	She encapsulates the connector qualities inside a higher level component.	f
662	1	She delays the complete specification of the connector for development time to have human resources to prototype and measure different implementations.	f
662	3	The required quality associated with the connector is supported by existing and well-know technology.	f
663	0	She can define a variant of this style with asynchronous communication by allowing the client to register callbacks that the server calls at specific times.	f
663	1	She has to use another architectural style to describe asynchronous communication.	f
663	2	She can use the request/reply connector but the server should not return results to the client.	f
664	0	She encapsulates the connector qualities inside a higher level component.	f
664	2	She does not want to clutter the view with details and trusts the development team to implement the connector according to the required quality level.	f
664	3	The required quality associated with the connector is supported by existing and well-know technology.	f
665	0	She can define a variant of this style with asynchronous communication by allowing the client to register callbacks that the server calls at specific times.	f
665	1	She has to use another architectural style to describe asynchronous communication.	f
665	3	She can define a variant of this style with asynchronous communication by allowing the server to have the initiative to initiate the interaction.	f
666	1	Because the \\emph{is-a} relation does not allow reuse of implementation.	f
666	2	By adding, removing, or changing children.	f
666	3	By changing a parent, which will automatically change all the children that inherit from it.	f
667	1	Maintain multiple copies of data.	f
667	2	Increase resource efficiency.	f
667	3	Reduce overhead.	f
668	0	It is necessary design a CRUD matrix to show the dependencies between the persistent information.	f
668	2	It is not necessary to have any view of the Data Model architectural style because Facebook information has a very simple structure.	f
668	3	It is necessary to design a view of the Data Model architectural style at the physical level to deal with performance issues of the access to data.	f
669	1	Improves testability because if a module uses another then it is only possible to test them together.	f
669	2	Allows incremental development because the possible increments of functionally can be inferred from use dependencies.	f
669	3	Improves testability because it informs the tester about which modules involved in circular use dependencies.	f
670	0	Relates a view of the Uses style with a view of the Data Model style.	f
670	1	Is an extension of a view of the Data Model style.	f
670	2	Allows to avoid redundancy and inconsistency.	f
671	0	Multiple copies of computation and Passive redundancy tactics.	f
671	1	Multiple copies of computation tactic.	f
671	3	Multiple copies of computation and Active redundancy tactics.	f
672	0	A module interface has to be attached to a single component port.	f
672	1	A module interface can be replicated but component ports cannot.	f
672	3	A module interface may be attached to several component ports.	f
673	0	It allows an undefined number of clients.	f
673	1	It is possible to have redundant servers.	f
673	2	Servers can also be clients.	f
674	0	Multiple copies of computation and Passive redundancy tactics.	f
674	1	Multiple copies of computation tactic.	f
674	3	Multiple copies of computation and Active redundancy tactics.	f
675	0	A module interface has to be attached to a single component port.	f
675	2	A module interface cannot be replicated but component ports can.	f
675	3	A module interface may be attached to several component ports.	f
676	0	Relates a view of the Uses style with a view of the Data Model style.	f
676	1	Is an extension of a view of the Data Model style.	f
676	3	Describes the structure of the data used by the system.	f
677	0	It allows an undefined number of clients.	f
677	2	Servers can also be clients.	f
677	3	Servers can send a heartbeat to clients.	f
678	1	Improves testability because if a module uses another then it is only possible to test them together.	f
678	2	Allows incremental development because the possible increments of functionally can be inferred from use dependencies.	f
678	3	Improves testability because it informs the tester about which modules involved in circular use dependencies.	f
679	1	A module contains the code that can execute in several components and a component executes the code of a single module.	f
679	2	A module contains the code that executes in a single component and a component can execute the code of several modules.	f
679	3	A module contains the code that can execute in several components and a component can execute the code of several modules.	f
680	1	Exception detection.	f
680	2	Detect intrusion.	f
680	3	Condition monitoring.	f
681	0	It is possible to integrate a new data accessor without changing the other data accessors.	f
681	1	It is possible to change the repository schema without changing the data accessors.	f
681	3	The communication between data accessors does not occur through the repository.	f
682	0	The correctness of the caller module may not depend on the correct implementation of the invoked function in the called module.	f
682	1	The invoked function may not have any input parameter.	f
682	3	The invoked function may not have both any input parameter nor any output parameter.	f
683	0	This means that the modules inside a layer cannot be loosely coupled.	f
683	1	This means that this architectural style emphasizes the quality of performance.	f
683	2	This means that each module cannot use other modules inside the same layer.	f
684	0	This means that the modules inside a layer cannot be loosely coupled.	f
684	2	This means that each module cannot use other modules inside the same layer.	f
684	3	This means that the modules inside a layer are likely to be ported to a new application together.	f
685	0	It is possible to integrate a new data accessor without changing the other data accessors.	f
685	1	It is possible to change the repository schema without changing the data accessors.	f
685	3	The communication between data accessors does not occur through the repository.	f
686	1	A module contains the code that can execute in several components and a component executes the code of a single module.	f
686	2	A module contains the code that executes in a single component and a component can execute the code of several modules.	f
686	3	A module contains the code that can execute in several components and a component can execute the code of several modules.	f
687	1	Exception detection.	f
687	2	Detect intrusion.	f
687	3	Condition monitoring.	f
688	0	The correctness of the caller module may not depend on the correct implementation of the invoked function in the called module.	f
688	2	The invoked function may not have any output parameter.	f
688	3	The invoked function may not have both any input parameter nor any output parameter.	f
689	1	The peer initiating the request for a file needs to know where the file is located.	f
689	2	If a peer providing a file crashes it is necessary to restart to download the file from the begin.	f
689	3	The price for high scalability and availability is the need to have several replicas of the files to be shared.	f
690	0	When a peer connects to the network it establishes connections with all other peers in the network.	f
690	1	The behavior described in the sentence can be represented in a view where the dynamic reconfiguration architectural style is used.	f
690	2	When a peer receives a connection it sends all its files to the peer connecting it.	f
691	0	It applies layers to tiers.	f
691	1	Restrict the communication between components because, for instance, a group of components should be located in the same hardware.	f
691	3	Defines tiers as components.	f
692	0	A component can subscribe to events.	f
692	1	All the published events are received by their subscribing components.	f
692	3	The set of events types are predefined at initialization time.	f
693	0	It enforces the use of a single implementation language among all applications.	f
693	1	The orchestration is in charge of improving the transparent location of service providers.	f
693	2	The enterprise service bus coordinates the execution of several services.	f
694	1	It decouples the coordination of the interaction among applications from the applications themselves.	f
694	2	It improves transparency of location of service providers.	f
694	3	It encapsulates applications through well-defined interfaces, decouples the coordination of the interaction among applications from the applications themselves, and improves transparency of location of service providers.	f
695	0	Is a Client-Server style because consumers are clients and providers are servers.	f
695	2	Can use a Service Registry to improve transparency of location of service providers.	f
695	3	Is a Publish-subscriber style because consumers use an enterprise service bus.	f
696	0	But when the filters are executed sequentially the composition power is reduced.	f
696	1	Which improves modifiability, because filters are decoupled through pipes.	f
696	2	But the size of buffers may reduce the composition power.	f
697	0	Memcached can be considered a sub-module of the Store Graphs module.	f
697	1	Memcached can be considered a sub-module of the Present Graphs module.	f
697	2	Memcached can be considered a direct sub-module of the top Graphite module.	f
698	0	Buffering can be considered a sub-module of the Store Graphs module.	f
698	1	Buffering can be considered a sub-module of the Present Graphs module.	f
698	2	Buffering can be considered a direct sub-module of the top Graphite module.	f
699	0	In the view there are multiple instances of the \\texttt{Queue} component.	f
699	1	In the view there are multiple instances of the \\texttt{Writer} component.	f
699	3	In the view the \\texttt{produce} port of a \\texttt{Receiver} component is attached to the \\texttt{consume} port of a \\texttt{Writer} component.	f
700	1	There is a interface delegation relation between the \\texttt{read} port of \\texttt{Queue} and the \\texttt{query} port of \\texttt{Carbon}.	f
700	2	There is a connector between the \\texttt{producer} port of a \\texttt{Queue} component and the \\texttt{client} port of its \\texttt{Carbon} component.	f
700	3	The \\texttt{client} ports of \\texttt{Carbon} and \\texttt{WebApp} are connected to a \\texttt{Client} component through the same connector instance.	f
701	1	A work assignment view.	f
701	2	A deployment and a work assignment view.	f
701	3	A install view.	f
702	1	Implementation style.	f
702	2	Install style.	f
702	3	Work assignment style.	f
703	0	Deployment style.	f
703	2	Install style.	f
703	3	Work assignment style.	f
704	0	A work assignment view.	f
704	2	An install view.	f
704	3	An implementation view.	f
705	0	The layered view to support a new specific layer for the customization of the catalog.	f
705	2	The data model view in order to define entities for each kind of catalog.	f
705	3	The data model view in order to define generic entities that can be customized for different kinds of catalogs.	f
706	0	A change to the uses view to represent that friends can use each other catalog.	f
706	1	A change of the layered view to support different presentations, one for each friend.	f
706	3	A new aspect view to include the responsibilities associated with the access control.	f
707	1	The uses view to represent how the mobile device uses the Catalog application.	f
707	2	The layered view to include a layer for each type of device.	f
707	3	The domain layer of the layered view to represent the types of devices.	f
708	0	The layered view to deal with the aspects of portability.	f
708	2	The uses view to show the uses relationships between the different platforms.	f
708	3	The data model view to represent each one of the platforms.	f
709	0	The file transfers follows the same path of nodes used to identify where the file was located.	f
709	1	The peer initiating the request for a file needs to know where the file is located.	f
709	3	The price for high scalability and availability is the need to have several replicas of the files to be shared.	f
710	0	Is a Client-Server style because consumers are clients and providers are servers.	f
710	2	Can use a Service Registry to improve transparency of location of service providers.	f
710	3	Is a Publish-subscriber style because consumers use an enterprise service bus.	f
711	0	In the view there are multiple instances of the \\texttt{Queue} component.	f
711	1	In the view there are multiple instances of the \\texttt{Writer} component.	f
711	3	In the view the \\texttt{produce} port of a \\texttt{Receiver} component is attached to the \\texttt{consume} port of a \\texttt{Writer} component.	f
712	0	A deployment view.	f
712	2	A deployment and a work assignment view.	f
712	3	A install view.	f
713	1	The layered view to accommodate a new layer for which kind of catalog, which other layers may use.	f
878	1	Limit event response.	f
701	0	A deployment view.	t
702	0	Deployment style.	t
703	1	Implementation style.	t
704	1	A deployment view.	t
705	1	The layered view to accommodate a new layer for which kind of catalog, which other layers may use.	t
706	2	A change of the decomposition view to include the responsibilities associated with the access control.	t
707	0	The decomposition view to include a module for the synchronization responsibilities.	t
713	2	The data model view in order to define entities for each kind of catalog.	f
713	3	The data model view in order to define generic entities that can be customized for different kinds of catalogs.	f
714	1	A work assignment view.	f
714	2	A deployment and a work assignment view.	f
714	3	A install view.	f
715	1	The peer initiating the request for a file needs to know where the file is located.	f
715	2	If a peer providing a file crashes it is necessary to restart to download the file from the begin.	f
715	3	The price for high scalability and availability is the need to have several replicas of the files to be shared.	f
716	0	The layered view to support a new specific layer for the customization of the catalog.	f
716	1	The layered view to accommodate a new layer for which kind of catalog, which other layers may use.	f
716	3	The data model view in order to define generic entities that can be customized for different kinds of catalogs.	f
717	0	Is a Client-Server style because consumers are clients and providers are servers.	f
717	1	Is a Peer-to-Peer style because consumers and providers are peers.	f
717	3	Is a Publish-subscriber style because consumers use an enterprise service bus.	f
718	0	In the view there are multiple instances of the \\texttt{Queue} component.	f
718	1	In the view there are multiple instances of the \\texttt{Writer} component.	f
718	2	In the view \\texttt{Receiver} component's \\texttt{client} port is not associated with an external port.	f
719	0	When a peer connects to the network it establishes connections with all other peers in the network.	f
719	2	When a peer receives a connection it sends all its files to the peer connecting it.	f
719	3	The behavior described in the sentence can be represented in a view where the tier architectural style is used.	f
720	0	It encapsulates applications through well-defined interfaces.	f
720	1	It decouples the coordination of the interaction among applications from the applications themselves.	f
720	3	It encapsulates applications through well-defined interfaces, decouples the coordination of the interaction among applications from the applications themselves, and improves transparency of location of service providers.	f
721	1	There is a interface delegation relation between the \\texttt{read} port of \\texttt{Queue} and the \\texttt{query} port of \\texttt{Carbon}.	f
721	2	There is a connector between the \\texttt{producer} port of a \\texttt{Queue} component and the \\texttt{client} port of its \\texttt{Carbon} component.	f
721	3	The \\texttt{client} ports of \\texttt{Carbon} and \\texttt{WebApp} are connected to a \\texttt{Client} component through the same connector instance.	f
722	1	Implementation style.	f
722	2	Install style.	f
722	3	Work assignment style.	f
723	0	A change to the uses view to represent that friends can use each other catalog.	f
723	2	A change of the decomposition view to include the responsibilities associated with the access control.	f
723	3	A new aspect view to include the responsibilities associated with the access control.	f
724	1	Implementation style.	f
724	2	Install style.	f
724	3	Work assignment style.	f
725	0	A change to the uses view to represent that friends can use each other catalog.	f
725	1	A change of the layered view to support different presentations, one for each friend.	f
725	2	A change of the decomposition view to include the responsibilities associated with the access control.	f
726	0	When a peer connects to the network it establishes connections with all other peers in the network.	f
726	1	The behavior described in the sentence can be represented in a view where the dynamic reconfiguration architectural style is used.	f
726	3	The behavior described in the sentence can be represented in a view where the tier architectural style is used.	f
727	0	It encapsulates applications through well-defined interfaces.	f
727	1	It decouples the coordination of the interaction among applications from the applications themselves.	f
727	3	It encapsulates applications through well-defined interfaces, decouples the coordination of the interaction among applications from the applications themselves, and improves transparency of location of service providers.	f
728	0	There is a message passing connector between the \\texttt{read} port of \\texttt{Queue} and the \\texttt{data points access} port of \\texttt{WebApp}.	f
728	1	There is a interface delegation relation between the \\texttt{read} port of \\texttt{Queue} and the \\texttt{query} port of \\texttt{Carbon}.	f
728	2	There is a connector between the \\texttt{producer} port of a \\texttt{Queue} component and the \\texttt{client} port of its \\texttt{Carbon} component.	f
729	0	It applies layers to tiers.	f
729	1	Restrict the communication between components because, for instance, a group of components should be located in the same hardware.	f
729	3	Defines tiers as components.	f
730	0	It enforces the use of a single implementation language among all applications.	f
730	2	The enterprise service bus coordinates the execution of several services.	f
730	3	It decouples applications developed for different organizations.	f
731	0	Deployment style.	f
731	1	Implementation style.	f
731	3	Work assignment style.	f
732	0	The decomposition view to include a module for the synchronization responsibilities.	f
732	2	The layered view to include a layer for each type of device.	f
732	3	The domain layer of the layered view to represent the types of devices.	f
733	1	Memcached can be considered a sub-module of the Present Graphs module.	f
733	2	Memcached can be considered a direct sub-module of the top Graphite module.	f
733	3	Memcached is not a module.	f
734	1	The uses view to represent how the mobile device uses the Catalog application.	f
734	2	The layered view to include a layer for each type of device.	f
734	3	The domain layer of the layered view to represent the types of devices.	f
735	1	The orchestration is in charge of improving the transparent location of service providers.	f
735	2	The enterprise service bus coordinates the execution of several services.	f
735	3	It decouples applications developed for different organizations.	f
736	0	Deployment style.	f
736	1	Implementation style.	f
736	3	Work assignment style.	f
737	0	Memcached can be considered a sub-module of the Store Graphs module.	f
737	1	Memcached can be considered a sub-module of the Present Graphs module.	f
737	3	Memcached is not a module.	f
738	0	It applies layers to tiers.	f
738	1	Restrict the communication between components because, for instance, a group of components should be located in the same hardware.	f
738	2	Is an extension of the Client-Server architectural style.	f
739	0	A component can subscribe to events.	f
739	2	The events should be delivered by the same order they are sent.	f
739	3	The set of events types are predefined at initialization time.	f
740	0	But when the filters are executed sequentially the composition power is reduced.	f
740	1	Which improves modifiability, because filters are decoupled through pipes.	f
740	3	And filters do not have to agree on the data formats.	f
741	1	Buffering can be considered a sub-module of the Present Graphs module.	f
741	2	Buffering can be considered a direct sub-module of the top Graphite module.	f
741	3	Buffering is not a module.	f
742	1	A deployment view.	f
742	2	An install view.	f
742	3	An implementation view.	f
743	0	The layered view to deal with the aspects of portability.	f
743	2	The uses view to show the uses relationships between the different platforms.	f
743	3	The data model view to represent each one of the platforms.	f
744	1	A deployment view.	f
744	2	An install view.	f
744	3	An implementation view.	f
745	0	The layered view to deal with the aspects of portability.	f
745	1	The uses view to show the coupling between the different platforms.	f
745	2	The uses view to show the uses relationships between the different platforms.	f
746	0	A component can subscribe to events.	f
746	1	All the published events are received by their subscribing components.	f
746	3	The set of events types are predefined at initialization time.	f
747	0	Buffering can be considered a sub-module of the Store Graphs module.	f
747	1	Buffering can be considered a sub-module of the Present Graphs module.	f
747	3	Buffering is not a module.	f
748	0	But when the filters are executed sequentially the composition power is reduced.	f
748	1	Which improves modifiability, because filters are decoupled through pipes.	f
748	2	But the size of buffers may reduce the composition power.	f
749	0	Amazon Silk is more convenient for mobile devices because it does most of the computation in the cloud.	f
749	1	Google Chrome is more convenient for mobile devices because it has an optimized network stack that runs in any kind device.	f
749	3	Google Chrome is more convenient for mobile devices because content delivery is optimized.	f
750	0	Amazon Silk predicts accesses based on the information gathered for all Silk users.	f
750	2	Amazon Silk predictions are constrained by the amount of information it can store about each user access.	f
750	3	Google Chrome predictions do not require storage in the client-side.	f
751	0	Amazon Silk explicitly caches pages on the browser to optimize accesses.	f
751	1	Google Chrome predictor takes into consideration the amount of available cache.	f
751	3	Google Chrome cache is shared among the different users of a desktop machine.	f
752	0	In Amazon Silk a request for a web page corresponds to a peer-to-peer interaction between all the web components containing the resources.	f
752	2	In Amazon Silk a request for a web page corresponds to requesting a service from the amazon cloud.	f
752	3	In Google Chrome a request for a web page aggregates the page on the background before it is sent to the client.	f
753	1	As a submodule of the RulesSet module.	f
753	2	As a module but not included in the RulesSet subtree.	f
753	3	As a specialization of the Design module.	f
754	1	Should be described as a submodule of but not included in the RulesSet subtree.	f
754	2	Should be described as a submodule of the Design module.	f
754	3	Should not be described as a module because it is a component.	f
755	0	There is a ThousandParsec connector.	f
755	1	There is a Request/Reply connector.	f
755	2	There is a ThousandParsec connector which can be decomposed into a set of components and Request/Reply connectors.	f
756	0	There is a ThousandParsec connector.	f
756	1	There is a Read/Write connector which encapsulates a redundant Repository.	f
756	3	There is a Read/Write connector which guarantees that only the turns of the last two players may be lost.	f
757	1	Was taken because Native applications provide better modifiability qualities.	f
757	2	Was taken because HTML5 provides better usability qualities.	f
757	3	Was taken because Native application provide better support for working offline.	f
758	0	Supports asynchronous communication to deal with disconnected mode.	f
758	1	Implements an event bus that allows the server to inform the client about new order recommendations.	f
758	2	May loose some of the changes done on the client component.	f
759	0	Two distinct unidirectional connectors.	f
759	1	A single bidirectional connector.	f
759	3	A single unidirectional connector.	f
760	1	An iterative development was followed, which allowed more time to develop a connector with good performance in the latter stages of the project.	f
760	2	Performance was traded for the modifiability quality.	f
760	3	An incremental development was followed, which allowed to have the system in production without being necessary to export all the information to the mainframe.	f
761	0	The \\textsc{: TableEditor} broadcasts the cursor position through the \\textsc{: Sheet}.	f
761	1	An interface delegation is missing in the picture to represent the \\textsc{: TableEditor} broadcasting the cursor position through the \\textsc{Pub} port.	f
761	2	The \\textsc{: Sheet} broadcasts the cursor position through the \\textsc{Pub} port.	f
762	0	The server implements the \\textsc{: Repository} component and the \\textsc{: Broadcast} connector.	f
762	2	The server implements the \\textsc{: Broadcast} connector.	f
762	3	The server implements the \\textsc{SpreadSheet} components	f
763	0	The \\textsc{Parser} module is part of the code executed by the \\textsc{: TableEditor} component.	f
763	1	The \\textsc{Parser} module is part of the code executed by the \\textsc{: Sheet} component.	f
763	3	The code of the \\textsc{Parser} module is executed by both, the \\textsc{: Sheet} and the repository components (the latter is not visible in the view).	f
764	1	The \\textsc{ConflictResolution} module is part of the code executed by the \\textsc{: Sheet} component.	f
764	2	The code of the \\textsc{ConflictResolution} module is executed by a broadcast connector that implements an eventbus between the \\textsc{SpreadSheet} components.	f
764	3	The code of the \\textsc{ConflictResolution} module is executed in a server component because it needs to be centralized.	f
765	0	Table Data Gateway and Row Data Gateway.	f
765	1	Row Data Gateway and Active Record.	f
765	3	Active Record and Data Mapper.	f
766	0	Table Data Gateway and Row Data Gateway.	f
766	1	Row Data Gateway and Active Record.	f
766	2	Row Data Gateway and Data Mapper.	f
767	0	Are responsible for loading the objects they refer to.	f
878	2	Prioritize events.	f
767	1	Are responsible for the management of transactions, begin and end of transactions.	f
767	3	May not even exist, only record sets are used.	f
768	0	An object oriented style is followed.	f
768	1	The business logic is organized around record sets.	f
768	2	Row Data Gateway is the most suitable data source pattern.	f
769	1	Google Chrome is more convenient for mobile devices because it has an optimized network stack that runs in any kind device.	f
769	2	Amazon Silk is more convenient for mobile devices because it customizes the number of threads that run in the device.	f
769	3	Google Chrome is more convenient for mobile devices because content delivery is optimized.	f
770	1	There is a Read/Write connector which encapsulates a redundant Repository.	f
770	2	There is a Read/Write connector which guarantees that players turns are not lost.	f
770	3	There is a Read/Write connector which guarantees that only the turns of the last two players may be lost.	f
771	0	Supports asynchronous communication to deal with disconnected mode.	f
771	1	Implements an event bus that allows the server to inform the client about new order recommendations.	f
771	3	Has reduced reliability qualities.	f
772	0	The \\textsc{ConflictResolution} module is part of the code executed by the \\textsc{: TableEditor} component.	f
772	1	The \\textsc{ConflictResolution} module is part of the code executed by the \\textsc{: Sheet} component.	f
772	3	The code of the \\textsc{ConflictResolution} module is executed in a server component because it needs to be centralized.	f
773	0	An object oriented style is followed.	f
773	1	The business logic is organized around record sets.	f
773	2	Row Data Gateway is the most suitable data source pattern.	f
774	0	The \\textsc{ConflictResolution} module is part of the code executed by the \\textsc{: TableEditor} component.	f
774	2	The code of the \\textsc{ConflictResolution} module is executed by a broadcast connector that implements an eventbus between the \\textsc{SpreadSheet} components.	f
774	3	The code of the \\textsc{ConflictResolution} module is executed in a server component because it needs to be centralized.	f
775	0	An object oriented style is followed.	f
775	1	The business logic is organized around record sets.	f
775	3	A Service Layer should be used to provide an interface for the presentation layer.	f
776	1	Google Chrome is more convenient for mobile devices because it has an optimized network stack that runs in any kind device.	f
776	2	Amazon Silk is more convenient for mobile devices because it customizes the number of threads that run in the device.	f
776	3	Google Chrome is more convenient for mobile devices because content delivery is optimized.	f
777	1	There is a Read/Write connector which encapsulates a redundant Repository.	f
777	2	There is a Read/Write connector which guarantees that players turns are not lost.	f
777	3	There is a Read/Write connector which guarantees that only the turns of the last two players may be lost.	f
778	0	Supports asynchronous communication to deal with disconnected mode.	f
778	2	May loose some of the changes done on the client component.	f
778	3	Has reduced reliability qualities.	f
779	1	In Google Chrome a request for a web page is accomplished by a single access to the internet.	f
779	2	In Amazon Silk a request for a web page corresponds to requesting a service from the amazon cloud.	f
779	3	In Google Chrome a request for a web page aggregates the page on the background before it is sent to the client.	f
780	0	Should be described as a submodule of the RulesSet module.	f
780	1	Should be described as a submodule of but not included in the RulesSet subtree.	f
780	2	Should be described as a submodule of the Design module.	f
781	0	Performance was traded for easy of development.	f
781	1	An iterative development was followed, which allowed more time to develop a connector with good performance in the latter stages of the project.	f
781	3	An incremental development was followed, which allowed to have the system in production without being necessary to export all the information to the mainframe.	f
782	0	The \\textsc{: TableEditor} broadcasts the cursor position through the \\textsc{: Sheet}.	f
782	1	An interface delegation is missing in the picture to represent the \\textsc{: TableEditor} broadcasting the cursor position through the \\textsc{Pub} port.	f
782	3	The \\textsc{: TableEditor} broadcasts the cursor position through its \\textsc{: StatusCallback} port.	f
783	0	Are responsible for loading the objects they refer to.	f
783	1	Are responsible for the management of transactions, begin and end of transactions.	f
784	0	Are responsible for loading the objects they refer to.	f
784	1	Are responsible for the management of transactions, begin and end of transactions.	f
784	3	May not even exist, only record sets are used.	f
785	0	Performance was traded for easy of development.	f
785	2	Performance was traded for the modifiability quality.	f
785	3	An incremental development was followed, which allowed to have the system in production without being necessary to export all the information to the mainframe.	f
786	0	In Amazon Silk a request for a web page corresponds to a peer-to-peer interaction between all the web components containing the resources.	f
786	1	In Google Chrome a request for a web page is accomplished by a single access to the internet.	f
786	3	In Google Chrome a request for a web page aggregates the page on the background before it is sent to the client.	f
787	0	Should be described as a submodule of the RulesSet module.	f
787	2	Should be described as a submodule of the Design module.	f
787	3	Should not be described as a module because it is a component.	f
788	1	An interface delegation is missing in the picture to represent the \\textsc{: TableEditor} broadcasting the cursor position through the \\textsc{Pub} port.	f
788	2	The \\textsc{: Sheet} broadcasts the cursor position through the \\textsc{Pub} port.	f
788	3	The \\textsc{: TableEditor} broadcasts the cursor position through its \\textsc{: StatusCallback} port.	f
789	1	Google Chrome uses a usability maintain system model tactic.	f
789	2	Amazon Silk predictions are constrained by the amount of information it can store about each user access.	f
789	3	Google Chrome predictions do not require storage in the client-side.	f
790	1	There is a Request/Reply connector.	f
790	2	There is a ThousandParsec connector which can be decomposed into a set of components and Request/Reply connectors.	f
790	3	There is an EventBus connector.	f
791	0	Was taken because HTML5 provides better portability qualities.	f
791	1	Was taken because Native applications provide better modifiability qualities.	f
791	3	Was taken because Native application provide better support for working offline.	f
792	0	The server implements the \\textsc{: Repository} component and the \\textsc{: Broadcast} connector.	f
792	1	The server implements the \\textsc{: Repository} component.	f
792	3	The server implements the \\textsc{SpreadSheet} components	f
793	0	Table Data Gateway and Row Data Gateway.	f
793	1	Row Data Gateway and Active Record.	f
793	2	Row Data Gateway and Data Mapper.	f
794	0	Table Data Gateway and Row Data Gateway.	f
794	2	Row Data Gateway and Data Mapper.	f
794	3	Active Record and Data Mapper.	f
795	0	Was taken because HTML5 provides better portability qualities.	f
795	1	Was taken because Native applications provide better modifiability qualities.	f
795	3	Was taken because Native application provide better support for working offline.	f
796	1	Google Chrome uses a usability maintain system model tactic.	f
796	2	Amazon Silk predictions are constrained by the amount of information it can store about each user access.	f
796	3	Google Chrome predictions do not require storage in the client-side.	f
797	1	The server implements the \\textsc{: Repository} component.	f
797	2	The server implements the \\textsc{: Broadcast} connector.	f
797	3	The server implements the \\textsc{SpreadSheet} components	f
798	0	There is a ThousandParsec connector.	f
798	2	There is a ThousandParsec connector which can be decomposed into a set of components and Request/Reply connectors.	f
798	3	There is an EventBus connector.	f
799	1	Google Chrome predictor takes into consideration the amount of available cache.	f
799	2	Amazon Silk cache is not shared between different users of the service to support confidentiality.	f
799	3	Google Chrome cache is shared among the different users of a desktop machine.	f
800	0	As a specialization of the RulesSet module.	f
800	1	As a submodule of the RulesSet module.	f
800	2	As a module but not included in the RulesSet subtree.	f
801	0	Two distinct unidirectional connectors.	f
801	1	A single bidirectional connector.	f
801	3	A single unidirectional connector.	f
802	0	The \\textsc{Parser} module is part of the code executed by the \\textsc{: TableEditor} component.	f
878	3	Maintain multiple copies of computation.	f
801	2	Three distinct unidirectional connectors.	t
802	1	The \\textsc{Parser} module is part of the code executed by the \\textsc{: Sheet} component.	f
802	3	The code of the \\textsc{Parser} module is executed by both, the \\textsc{: Sheet} and the repository components (the latter is not visible in the view).	f
803	0	Table Data Gateway and Row Data Gateway.	f
803	1	Row Data Gateway and Active Record.	f
803	2	Row Data Gateway and Data Mapper.	f
804	0	Two distinct unidirectional connectors.	f
804	1	A single bidirectional connector.	f
804	3	A single unidirectional connector.	f
805	0	Table Data Gateway and Row Data Gateway.	f
805	2	Row Data Gateway and Data Mapper.	f
805	3	Active Record and Data Mapper.	f
806	0	Amazon Silk explicitly caches pages on the browser to optimize accesses.	f
806	1	Google Chrome predictor takes into consideration the amount of available cache.	f
806	3	Google Chrome cache is shared among the different users of a desktop machine.	f
807	0	As a specialization of the RulesSet module.	f
807	2	As a module but not included in the RulesSet subtree.	f
807	3	As a specialization of the Design module.	f
808	1	The \\textsc{Parser} module is part of the code executed by the \\textsc{: Sheet} component.	f
808	2	The code of the \\textsc{Parser} module is executed by a repository component, which is not represented in the view.	f
808	3	The code of the \\textsc{Parser} module is executed by both, the \\textsc{: Sheet} and the repository components (the latter is not visible in the view).	f
809	1	This law can be seen as an example of the architecture influence cycle	f
809	2	This law states that architectures impact on the structure of the organization	f
809	3	This law does not apply to the design of architectures	f
810	1	Becomes unavailable for clients if there is a fault in the hardware of database server (srv-db)	f
810	2	Becomes unavailable for clients if there is a fault in the hardware of service server (srv-opc)	f
810	3	Becomes unavailable for banks if there is a fault in the hardware of service server (srv-opc)	f
811	1	There is no system which can have good performance and be easily maintainable	f
811	2	We have to distinguish architectural performance from opportunistic performance	f
811	3	The system performance quality has impact on the performance of the execution of tests	f
812	1	Do not have a software architecture, because in agile\n          methodologies there is no architectural design phase	f
812	2	Do not have a software architecture, because the practice of\n          refactoring allows changing every part of the system easily	f
812	3	May have a software architecture, but that architecture is\n          not known because it was neither designed nor documented	f
813	1	Describing a set of steps that a user of the system must\n      perform to accomplish some task	f
813	2	Describing a use case for the system that makes clear what\n    should be the system's responses to each of the user's inputs	f
813	3	Describing the system's features by way of different\n    usage scenarios for it, in which users play the role of actors	f
814	1	They are both components	f
814	2	The \\emph{Request Node} is a component and the\n      \\emph{Cache} is a module	f
814	3	The \\emph{Request Node} is a module and the \\emph{Cache}\n      is a component	f
815	1	Active redundancy	f
815	2	Ignore faulty behaviour	f
815	3	Ping/Echo	f
816	1	Results in the creation of a third module that does not have to change when any of the original modules are changed.	f
816	2	Increases the cohesion between the two modules.	f
816	3	Cannot be used together with the Reduce Overhead performance tactic.	f
817	1	Limit event response.	f
817	2	Prioritize events.	f
817	3	Bound execution time.	f
818	1	Performance was the main concern of the design of the configuration strategy in Nginx	f
818	2	Apache emphasizes the usability quality for system administrators by allowing to split the configuration by different files	f
818	3	Nginx emphasizes the usability quality for system administrators by reducing the number or errors	f
819	1	The response is JUnit XML standard	f
819	2	The source of the stimulus is Sun	f
819	3	The measure of the response is a robust open-source community associated with it	f
820	1	Availability and Modifiability	f
820	2	Performance and Reliability	f
820	3	Reliability and Security	f
821	1	If no order was established among them, we would not know\n      from where should we start the design process	f
821	2	If one of the stakeholders complains that his requirement\n      is not satisfied, we may explain to him that there were other more\n      important requirements first	f
821	3	When it is not possible to satisfy all of the requirements\n      optimally, we should be aware of their relative importance so that\n      we may find a solution that corresponds to a satisfactory trade-off	f
822	1	Project managers are not interested in views that use this style because it lacks the necessary level of detail.	f
822	2	Incremental development is a criteria that drives the design of views of this type.	f
822	3	There should be at least one view of the system using this architectural style.	f
823	1	The Deployment style	f
823	2	The Uses style	f
823	3	The Work-assignment style	f
824	1	Layer 4	f
824	2	In a layered architecture all layers are equally modifiable	f
824	3	Modifiability is not made easier by a layered architecture	f
825	1	You should use only views of the component-and-connector\n        viewtype, which describe the dynamic aspects of the system	f
825	2	You may need to use views of the three viewtypes	f
825	3	The only views that are relevant to performance\n        requirements are views of the Deployment style	f
826	1	The Client-Server style	f
826	2	The Deployment style	f
826	3	The Communicating Processes style	f
827	1	The Pipes-and-filters style	f
827	2	The Publish-subscribe style	f
827	3	The Client-Server style	f
828	1	The Pipes-and-filters style	f
828	2	The Client-Server style	f
828	3	The Publish-subscribe style	f
829	1	It is useful for the project managers.	f
829	2	It does not consider the software that is outsourced.	f
829	3	It allows to estimate the cost of hardware.	f
830	1	Using threads ensures that the processing of each request is\n      isolated from the remaining requests	f
830	2	With this approach they may use all of the available cores\n      in multiprocessor machines	f
830	3	They are used for implementing enterprise applications that\n      typically have complex domain logic and, by using threads, it is\n      easier to reuse code from one request to another	f
831	1	A schedule resources tactic	f
831	2	A multiple copies of computation tactic	f
831	3	A manage sampling rate tactic	f
832	1	A client-server view with non-blocking connectors for the interaction between threads and core data structures	f
832	2	A communicating-processes view with non-blocking connectors for the interaction between threads and core data structures	f
832	3	A deployment view which allocate threads to the multi-cores	f
833	1	In the component-and-connector view, because the\n      connector between the web client and the web server has to change	f
833	2	In the Layer view, because the order of the layers will\n      have to change	f
833	3	In the mapping between layers of the system and the\n      components where they execute	f
834	1	The most relevant architectural style in the right part of the figure is shared-data	f
834	2	The system represented in the left part of the figure tends to be non-transactional	f
834	3	The system represented in the right part of the figure tends to have good modifiability	f
835	1	Client-server to express how multiple clients can access the applications	f
835	2	Tiers to express that different applications define their own contexts	f
835	3	Decomposition to express the different responsibilities assigned to each application	f
836	1	The solution where the cache is responsible for the eviction has better availability	f
836	2	The solution where the application is responsible for the eviction has better modifiability	f
836	3	The solution where the cache is responsible for the eviction has better performance	f
837	1	Interoperability	f
837	2	Reliability	f
837	3	Security	f
838	1	Communicating Processes	f
838	2	Repository	f
838	3	Pipes-and-Filters	f
839	0	The stimulus is to integrate reports from a variety of test tools	f
839	2	The source of the stimulus is Sun	f
839	3	The measure of the response is a robust open-source community associated with it	f
840	0	Modifiability and Performance	f
840	2	Performance and Reliability	f
840	3	Reliability and Security	f
879	2	The system design	f
841	0	In the Deployment view, because the presentation\n      component is now executing in a different place	f
841	2	In the Layer view, because the order of the layers will\n      have to change	f
841	3	In the mapping between layers of the system and the\n      components where they execute	f
842	0	The left part of the figure represents a three-layered architecture	f
842	2	The system represented in the left part of the figure tends to be non-transactional	f
842	3	The system represented in the right part of the figure tends to have good modifiability	f
843	0	Service-oriented architecture to express how clients can access the services	f
843	2	Tiers to express that different applications define their own contexts	f
843	3	Decomposition to express the different responsibilities assigned to each application	f
844	0	We should always satisfy in the first place the requirements\n      of more important stakeholders (such as the client)	f
844	2	If one of the stakeholders complains that his requirement\n      is not satisfied, we may explain to him that there were other more\n      important requirements first	f
844	3	When it is not possible to satisfy all of the requirements\n      optimally, we should be aware of their relative importance so that\n      we may find a solution that corresponds to a satisfactory trade-off	f
845	0	Its main goal is to establish the reusability qualities of the architecture.	f
845	2	Incremental development is a criteria that drives the design of views of this type.	f
845	3	There should be at least one view of the system using this architectural style.	f
846	0	The Decomposition style	f
846	2	The Uses style	f
846	3	The Work-assignment style	f
847	0	Layer 1	f
847	2	In a layered architecture all layers are equally modifiable	f
847	3	Modifiability is not made easier by a layered architecture	f
848	0	Retry	f
848	2	Ignore faulty behaviour	f
848	3	Ping/Echo	f
849	0	Has as main goal the reduction of the modules' size.	f
849	2	Increases the cohesion between the two modules.	f
849	3	Cannot be used together with the Reduce Overhead performance tactic.	f
850	0	Manage sampling rate.	f
850	2	Prioritize events.	f
850	3	Bound execution time.	f
851	0	Due to its configuration strategy Apache has better performance	f
851	2	Apache emphasizes the usability quality for system administrators by allowing to split the configuration by different files	f
851	3	Nginx emphasizes the usability quality for system administrators by reducing the number or errors	f
852	0	It makes no sense to use views of the module viewtype, as\n        they give only a static view of the system	f
852	2	You may need to use views of the three viewtypes	f
852	3	The only views that are relevant to performance\n        requirements are views of the Deployment style	f
853	0	The Work Assignment style	f
853	2	The Deployment style	f
853	3	The Communicating Processes style	f
854	0	The Shared Data style	f
854	2	The Publish-subscribe style	f
854	3	The Client-Server style	f
855	0	The Peer-to-Peer style	f
855	2	The Client-Server style	f
855	3	The Publish-subscribe style	f
856	0	It assigns components and connectors to people and teams.	f
856	2	It does not consider the software that is outsourced.	f
856	3	It allows to estimate the cost of hardware.	f
857	0	Launching a new process for processing each request is too expensive	f
857	2	With this approach they may use all of the available cores\n      in multiprocessor machines	f
857	3	They are used for implementing enterprise applications that\n      typically have complex domain logic and, by using threads, it is\n      easier to reuse code from one request to another	f
858	0	An increase resource efficiency tactic	f
858	2	A multiple copies of computation tactic	f
858	3	A manage sampling rate tactic	f
859	0	A decomposition view which represent the module for compare-and-set	f
859	2	A communicating-processes view with non-blocking connectors for the interaction between threads and core data structures	f
859	3	A deployment view which allocate threads to the multi-cores	f
860	0	The solution where the application is responsible for the eviction has better availability	f
879	1	Understand the architecturally significant requirements	f
860	2	The solution where the application is responsible for the eviction has better modifiability	f
860	3	The solution where the cache is responsible for the eviction has better performance	f
861	0	Performance	f
861	2	Reliability	f
861	3	Security	f
862	0	Client-server	f
862	2	Repository	f
862	3	Pipes-and-Filters	f
863	0	This law highlights the impact of the business on the architecture	f
863	2	This law states that architectures impact on the structure of the organization	f
863	3	This law does not apply to the design of architectures	f
864	0	Becomes unavailable for clients if there is a fault in the hardware of web server (srv-web)	f
864	2	Becomes unavailable for clients if there is a fault in the hardware of service server (srv-opc)	f
864	3	Becomes unavailable for banks if there is a fault in the hardware of service server (srv-opc)	f
865	0	Performance is a quality that you have to address at the end of the development process	f
865	2	We have to distinguish architectural performance from opportunistic performance	f
865	3	The system performance quality has impact on the performance of the execution of tests	f
866	0	Typically have a software architecture that results\n          from the common knowledge about the system that is shared among\n          the team members	f
866	2	Do not have a software architecture, because the practice of\n          refactoring allows changing every part of the system easily	f
866	3	May have a software architecture, but that architecture is\n          not known because it was neither designed nor documented	f
867	0	Describing what are the qualities that the system should possess	f
867	2	Describing a use case for the system that makes clear what\n    should be the system's responses to each of the user's inputs	f
867	3	Describing the system's features by way of different\n    usage scenarios for it, in which users play the role of actors	f
868	0	They are both modules	f
868	2	The \\emph{Request Node} is a component and the\n      \\emph{Cache} is a module	f
868	3	The \\emph{Request Node} is a module and the \\emph{Cache}\n      is a component	f
869	1	Is useful only if done (even if only partially) before the\n        system's implementation is concluded, because if the system is\n        already implemented, its implementation uniquely determines the\n        architecture	f
869	2	Is useful only if done (even if only partially) before the\n        system passes all of the acceptance tests by the client, given\n        that no more requirements changes will take place after that time	f
869	3	Is useful even if the implementation is concluded and the\n        system has entered the maintenance phase	f
870	1	The components that manage the communication between the\n      remaining elements in the system	f
870	2	The stakeholders that drive the development of the system	f
870	3	The tactics that satisfy the most important requirements for\n      the system	f
871	1	Depends more on the architect's experience than on anything else	f
871	2	Should not depend on the skills of the developing team	f
871	3	None of the above	f
872	1	Communicating processes and shared-data	f
872	2	Communicating processes, shared-data and service-oriented architecture	f
872	3	Communicating processes, shared-data, service-oriented architecture, and peer-to-peer	f
873	1	A component may execute code from different modules	f
873	2	A module may execute code from different components	f
873	3	A component may contain code from different modules	f
874	1	They allow us to build a more robust architecture that satisfies less specific\n        requirements, which address a wider range of situations that may happen in\n        the system	f
874	2	They identify the most important requirements that the system should satisfy	f
874	3	They guide us in the requirement elicitation process with the system's stakeholders	f
875	1	Heartbeat	f
875	2	Voting	f
875	3	Removal from Service	f
876	1	This is a modifiability scenario which has a defer binding tactic.	f
876	2	This is not a modifiability scenario because the source of the stimulus cannot be a system administrator.	f
876	3	This is a modifiability scenario and its environment design time.	f
877	1	Spawn a new thread for processing each request	f
877	2	Put the requests into a queue and schedule their processing	f
877	3	Buy a server with high processing power	f
879	3	Documenting and communicating the architecture	f
880	1	Availability	f
880	2	Testability	f
880	3	Interoperability	f
881	1	Modifiability	f
881	2	Usability	f
881	3	Security	f
882	1	The project manager uses this view to get advice on the incremental development of the system.	f
882	2	The uses relation should be applied to the coarse-grained modules, because it allows to identify circular dependences.	f
882	3	There isn't any relation with the layered architectural style because the allowed-to-use relation is more generic.	f
883	1	It is not possible to install the system in more than one machine	f
883	2	It is not possible to develop and to test the system incrementally	f
883	3	It is very hard to explain what the system does, because we need to understand\n        all the execution fluxes	f
884	1	Can use the operations defined in the lower layer, but not the ones defined in\n         the upper layer	f
884	2	Can use the operations defined in the upper layer, but not the ones defined in\n         the lower layer	f
884	3	Should use some operation defined in the lower layer	f
885	1	May, on another view of the system, be represented by a set of components\n        and connectors	f
885	2	Represent the dependency relations that exist among the various components	f
885	3	Represent the control flow during a execution of the system	f
886	1	The Client-Server style	f
886	2	The Shared-Data style	f
886	3	The Publish-subscribe style	f
887	1	The Pipes-and-filters style	f
887	2	The Peer-to-Peer style	f
887	3	The Communicating Processes style	f
888	1	The Client-Server style	f
888	2	The Service Oriented Architecture style	f
888	3	The Communicating Processes style	f
889	1	It cannot assign software elements to virtual servers because they are not hardware.	f
889	2	For each set of software elements there is a single possible assignment to hardwre.	f
889	3	It is useful for system administrators.	f
890	1	By executing in parallel each of the phases of the\n      pipeline corresponding to the processing of a request	f
890	2	By executing in parallel the processing of the various requests	f
890	3	By processing completely each request before moving to\n      the next one, in a sequential process	f
891	1	Communicating-Processes	f
891	2	Tiers	f
891	3	Client-Server and Shared-data	f
892	1	You need to design a client-server view representing the interaction between the DSL and the servers that execute its commands	f
892	2	You need to design an implementation view to allow system administrators configure the builds	f
892	3	You do not need to change the views because the DSL does not have any architectural impact	f
893	1	A client-server view which represent the byte stream for transmission across a network	f
893	2	A connector that has the serialization and de-serialization speed qualities	f
893	3	A decomposition view which contains the serialization/de-serilization modules	f
894	1	A Client-Server architecture, where the \\emph{mashup}\n      is the client and the various sources are the servers	f
894	2	A layered architecture, where the access to the various\n      sources is the responsibility of the bottommost layer	f
894	3	A Publish-Subscribe architecture, where the various\n      sources publish events with the changes made and the\n      \\emph{mashup} subscribes those events	f
895	1	The main quality of the system in the left part of the figure is scalability	f
895	2	The main quality of the system in the right part of the figure is ease of development	f
895	3	The main quality of the system in the left part of the figure is to promote cross-functional teams	f
896	1	Decomposition to express the services interfaces	f
896	2	Aspects to express the evolution of service interfaces	f
896	3	Publish-subscribe to express how data is shared between services	f
897	1	Performance because it allows the processing of more requests per unit of time	f
897	2	Availability because even if PartB1 is not available partB2 can be provided	f
897	3	Reliability because a single correct read is used to responde to several requests	f
898	1	Usability	f
898	2	Performance	f
898	3	Testability	f
899	0	The Decomposition style	f
899	1	The Client-Server style	f
899	3	The Communicating Processes style	f
900	0	It assigns modules to the hardware.	f
900	1	It cannot assign software elements to virtual servers because they are not hardware.	f
900	3	It is useful for system administrators.	f
901	0	By interleaving the various processing phases of each\n      request in a sequential process	f
901	1	By executing in parallel each of the phases of the\n      pipeline corresponding to the processing of a request	f
901	3	By processing completely each request before moving to\n      the next one, in a sequential process	f
902	0	You need to change the decomposition view to represent modules with the responsibilities associated with the DSL	f
902	1	You need to design a client-server view representing the interaction between the DSL and the servers that execute its commands	f
902	3	You do not need to change the views because the DSL does not have any architectural impact	f
903	0	A uses view which represent modules for the externalizers	f
903	1	A client-server view which represent the byte stream for transmission across a network	f
903	3	A decomposition view which contains the serialization/de-serilization modules	f
904	0	A \\emph{web services} architecture	f
904	1	A Client-Server architecture, where the \\emph{mashup}\n      is the client and the various sources are the servers	f
904	3	A Publish-Subscribe architecture, where the various\n      sources publish events with the changes made and the\n      \\emph{mashup} subscribes those events	f
905	0	The main quality of the system in the right part of the figure is scalability	f
905	1	The main quality of the system in the left part of the figure is scalability	f
905	3	The main quality of the system in the left part of the figure is to promote cross-functional teams	f
906	0	Data model to express the stored data formats	f
906	1	Decomposition to express the services interfaces	f
906	3	Publish-subscribe to express how data is shared between services	f
907	0	Performance because all requests will be processed faster	f
907	1	Performance because it allows the processing of more requests per unit of time	f
907	3	Reliability because a single correct read is used to responde to several requests	f
908	0	Usability and Performance	f
908	1	Usability	f
908	3	Testability	f
909	0	Shared-data and Communicating-Processes	f
909	1	Communicating-Processes	f
909	3	Client-Server and Shared-data	f
910	0	Is useful only if done (even if only partially) before the\n         system's implementation is concluded, given that the architecture\n        is used for restricting the implementation	f
910	1	Is useful only if done (even if only partially) before the\n        system's implementation is concluded, because if the system is\n        already implemented, its implementation uniquely determines the\n        architecture	f
910	3	Is useful even if the implementation is concluded and the\n        system has entered the maintenance phase	f
911	0	The most important requirements (both functional and\n      qualities) that the system must achieve	f
911	1	The components that manage the communication between the\n      remaining elements in the system	f
911	3	The tactics that satisfy the most important requirements for\n      the system	f
912	0	Depends mostly on the system's functional requirements	f
912	1	Depends more on the architect's experience than on anything else	f
912	3	None of the above	f
913	0	Communicating processes	f
913	1	Communicating processes and shared-data	f
913	3	Communicating processes, shared-data, service-oriented architecture, and peer-to-peer	f
914	0	A module may contain code from different components	f
914	1	A component may execute code from different modules	f
914	3	A component may contain code from different modules	f
915	0	They describe general requirements that all systems should try to satisfy	f
915	1	They allow us to build a more robust architecture that satisfies less specific\n        requirements, which address a wider range of situations that may happen in\n        the system	f
915	3	They guide us in the requirement elicitation process with the system's stakeholders	f
916	0	There is a high level of communication between the several modules, and this\n        will cause the system to have a low performance	f
916	1	It is not possible to install the system in more than one machine	f
916	3	It is very hard to explain what the system does, because we need to understand\n        all the execution fluxes	f
917	0	Can use the operations defined in any of the system's modules	f
938	1	Increase resources.	f
901	2	By executing in parallel the processing of the various requests	t
917	1	Can use the operations defined in the lower layer, but not the ones defined in\n         the upper layer	f
917	3	Should use some operation defined in the lower layer	f
918	0	Represent the network infrastructure that allows components to communicate\n        with each other	f
918	1	May, on another view of the system, be represented by a set of components\n        and connectors	f
918	3	Represent the control flow during a execution of the system	f
919	0	The Peer-to-Peer style	f
919	1	The Client-Server style	f
919	3	The Publish-subscribe style	f
920	0	The Shared data style	f
920	1	The Pipes-and-filters style	f
920	3	The Communicating Processes style	f
921	0	Ping/Echo	f
921	1	Heartbeat	f
921	3	Removal from Service	f
922	0	This is a performance scenario because the stimulus is an input, \\emph{launches several instances of the system}.	f
922	1	This is a modifiability scenario which has a defer binding tactic.	f
922	3	This is a modifiability scenario and its environment design time.	f
923	0	Launch a new process for processing each request	f
923	1	Spawn a new thread for processing each request	f
923	3	Buy a server with high processing power	f
924	0	Cycles in the uses relation between modules are a good sign, because it indicates that several modules should be tested together.	f
924	1	The project manager uses this view to get advice on the incremental development of the system.	f
924	3	There isn't any relation with the layered architectural style because the allowed-to-use relation is more generic.	f
925	0	Manage sampling rate.	f
925	1	Limit event response.	f
925	3	Maintain multiple copies of computation.	f
926	0	Make a business case for the system	f
926	1	Understand the architecturally significant requirements	f
926	3	Documenting and communicating the architecture	f
927	0	Modifiability	f
927	1	Availability	f
927	3	Interoperability	f
928	0	Performance	f
928	1	Modifiability	f
928	3	Security	f
929	1	This is a case of an architectural influence cycle where the feedback cycle resulted in changes on the project.	f
929	2	This is a case of an architectural influence cycle where the feedback cycle resulted in changes on the business and project.	f
929	3	This is a case of an architectural influence cycle without feedback.	f
930	1	The request to adapt an interface is the stimulus.	f
930	2	The design of a reusable interface is the stimulus.	f
930	3	The data input to the system is the stimulus.	f
931	1	This shared understanding includes the architecturally significant requirements.	f
931	2	The system algorithms should be part of the shared understanding.	f
931	3	The shared understanding describes the system from a high-level perspective.	f
932	1	A module.	f
932	2	Both, a component and a module, depending on the perspective.	f
932	3	An external element.	f
933	1	Service-oriented architecture, and Shared-data.	f
933	2	Service-oriented architecture, Shared-data, and Peer-to-peer.	f
933	3	Service-oriented architecture, Shared-data, Peer-to-peer, and Client-server.	f
934	1	Enumerates, for each kind of quality attribute, all the possible types of source of stimulus, stimulus, etc.	f
934	2	Can omit some of the elements like, for instance, the environment, if they are not relevant for the general scenario.	f
934	3	Is a very reusable scenario that can be used in many different concrete situations.	f
935	1	Is useful to support scenarios where the stimulus is an omission.	f
935	2	Guarantees that the system will not become unavailable.	f
935	3	Reduces the availability scenario response time because the request occurs twice.	f
936	1	Results in the creation of a third module that does not have to change when any of the original modules are changed.	f
936	2	Increases the cohesion between the two modules.	f
936	3	Cannot be used together with the Reduce Overhead performance tactic.	f
937	1	A availability scenario because it allows the introduction of load balancers.	f
937	2	A modifiability scenario where defer binding occurs at compile time.	f
937	3	A usability scenario because developers can extend the system without having to modify the nginx core.	f
938	2	Increase resource efficiency and Increase resources.	f
938	3	Increase resources and Maintain multiple copies of computation.	f
939	1	Is done in a single step, after all the tactics were identified.	f
939	2	Is a top-down process where a initial decomposition is chosen and it is successively decomposed without changing the initial decisions.	f
939	3	Is an iterative process where architectural designs are proposed as hypothesis and tested.	f
940	1	Availability	f
940	2	Testability	f
940	3	Interoperability	f
941	1	Availability.	f
941	2	Performance.	f
941	3	Scalability.	f
942	1	Usability.	f
942	2	Security.	f
942	3	Availability.	f
943	1	The invoked function may not have any input parameter.	f
943	2	The invoked function may not have any output parameter.	f
943	3	The invoked function may not have both any input parameter nor any output parameter.	f
944	1	Layer 4	f
944	2	In a layered architecture all layers are equally modifiable	f
944	3	Modifiability is not made easier by a layered architecture	f
945	1	She delays the complete specification of the connector for development time to have human resources to prototype and measure different implementations.	f
945	2	She does not want to clutter the view with details and trusts the development team to implement the connector according to the required quality level.	f
945	3	The required quality associated with the connector is supported by existing and well-know technology.	f
946	1	It is possible to have redundant servers.	f
946	2	Servers can also be clients.	f
946	3	Servers can send a heartbeat to clients.	f
947	1	Any peer can access any other peer.	f
947	2	Peers are only used to share files.	f
947	3	The interaction between peers is symmetric.	f
948	1	Which improves modifiability, because filters are decoupled through pipes.	f
948	2	But the size of buffers may reduce the composition power.	f
948	3	And filters do not have to agree on the data formats.	f
949	1	Implementation style.	f
949	2	Install style.	f
949	3	Work assignment style.	f
950	1	By executing in parallel each of the phases of the\n      pipeline corresponding to the processing of a request	f
950	2	By executing in parallel the processing of the various requests	f
950	3	By processing completely each request before moving to\n      the next one, in a sequential process	f
951	1	Client-server.	f
951	2	Shared-date.	f
951	3	Generalization.	f
952	1	Peer-to-peer.	f
952	2	Master-slave.	f
952	3	Pipe-and-filter.	f
953	1	There is a interface delegation relation between the \\texttt{read} port of \\texttt{Queue} and the \\texttt{query} port of \\texttt{Carbon}.	f
953	2	There is a connector between the \\texttt{producer} port of a \\texttt{Queue} component and the \\texttt{client} port of its \\texttt{Carbon} component.	f
953	3	The \\texttt{client} ports of \\texttt{Carbon} and \\texttt{WebApp} are connected to a \\texttt{Client} component through the same connector instance.	f
954	1	In the component-and-connector view, because the\n      connector between the web client and the web server has to change	f
954	2	In the Layer view, because the order of the layers will\n      have to change	f
954	3	In the mapping between layers of the system and the\n      components where they execute	f
955	1	The sharing of data is done using a service-oriented architecture.	f
955	2	Modifiability is not a concern of their architecture.	f
955	3	The decouple of data formats does not support scalability because of the transactional properties.	f
956	1	A view of the component-and-connector viewtype.	f
956	2	A view of the component-and-connector viewtype and a deployment view.	f
956	3	A decomposition view, a view of the component-and-connector viewtype and a deployment view.	f
957	1	This view highlights the performance of the \\texttt{download} operations.	f
957	2	This view highlights the performance of \\texttt{upload} operations.	f
957	3	This view highlights the scalability of \\texttt{upload} and \\texttt{dowload} operations.	f
958	1	The quality addressed is performance.	f
958	2	The quality addressed is availability and a voting design tactic is required to solve the problem.	f
958	3	The quality addressed is performance and a maintain multiple copies of data design tactic is required to solve the problem.	f
959	0	The business aspects of the system are for business architects, not the software architects.	f
959	2	The modeling of a system is not part of the software architect duties.	f
959	3	The level of abstraction of the system an architect works may vary.	f
960	0	Martin Fowler disagrees with this definition because we should delay the design decisions and focus on features first.	f
960	1	Martin Fowler complains about this definition because the early decisions are not necessarily the right ones.	f
960	3	Martin Fowler disagrees with this definition because to design an architecture it is not necessary to make any decision.	f
961	1	This view highlights the performance of the \\texttt{Image File Storage}.	f
961	2	This view highlights the different performance levels for \\texttt{upload} and \\texttt{dowload} operations.	f
961	3	This view highlights the scalability of \\texttt{upload} and \\texttt{dowload} operations.	f
962	1	Enumerates, for each kind of quality attribute, all the possible types of source of stimulus, stimulus, etc.	f
962	2	Can omit some of the elements like, for instance, the environment, if they are not relevant for the general scenario.	f
962	3	Is a very reusable scenario that can be used in many different concrete situations.	f
963	0	Can be applied to any kind of availability scenario.	f
963	2	Guarantees that the system will not become unavailable.	f
963	3	Reduces the availability scenario response time because the request occurs twice.	f
964	1	Enumerates, for each kind of quality attribute, all the possible types of source of stimulus, stimulus, etc.	f
964	2	Can omit some of the elements like, for instance, the environment, if they are not relevant for the general scenario.	f
964	3	Is a very reusable scenario that can be used in many different concrete situations.	f
965	0	Can be applied to any kind of availability scenario.	f
965	1	Is useful to support scenarios where the stimulus is an omission.	f
965	2	Guarantees that the system will not become unavailable.	f
966	0	The business aspects of the system are for business architects, not the software architects.	f
966	1	Dealing with the technological aspects of the system should be delayed to the implementation stage of development.	f
966	3	The level of abstraction of the system an architect works may vary.	f
967	0	Martin Fowler disagrees with this definition because we should delay the design decisions and focus on features first.	f
967	1	Martin Fowler complains about this definition because the early decisions are not necessarily the right ones.	f
967	3	Martin Fowler disagrees with this definition because to design an architecture it is not necessary to make any decision.	f
968	0	This view highlights the availability of the system.	f
968	1	This view highlights the performance of the \\texttt{Image File Storage}.	f
968	2	This view highlights the different performance levels for \\texttt{upload} and \\texttt{dowload} operations.	f
969	0	This is a case of an architectural influence cycle where the feedback cycle resulted in changes on the business.	f
969	1	This is a case of an architectural influence cycle where the feedback cycle resulted in changes on the project.	f
969	3	This is a case of an architectural influence cycle without feedback.	f
970	0	This shared understanding can be represented by a set of architectural views.	f
970	2	The system algorithms should be part of the shared understanding.	f
970	3	The shared understanding describes the system from a high-level perspective.	f
971	0	This view highlights the security of the system.	f
971	1	This view highlights the scalability of \\texttt{upload} and \\texttt{dowload} operations.	f
971	3	This view highlights the scalability of \\texttt{upload} and \\texttt{dowload} operations, and of storage.	f
972	0	The exchange of information is the stimulus.	f
972	2	The design of a reusable interface is the stimulus.	f
972	3	The data input to the system is the stimulus.	f
973	1	These tactics are used to prevent the occurence of a fault.	f
973	2	Heartbeat is more scalable than ping/echo because the monitor does not need to know in advance the addresses of the components.	f
973	3	In ping/echo the components have the initiative to start the interaction.	f
974	1	These tactics are used to prevent the occurence of a fault.	f
974	2	Heartbeat is more scalable than ping/echo because the monitor does not need to know in advance the addresses of the components.	f
974	3	In ping/echo the components have the initiative to start the interaction.	f
1075	0	Peer-to-peer.	t
975	1	This is a case of an architectural influence cycle where the feedback cycle resulted in changes on the project.	f
975	2	This is a case of an architectural influence cycle where the feedback cycle resulted in changes on the business and project.	f
975	3	This is a case of an architectural influence cycle without feedback.	f
976	0	This view highlights the security of the system.	f
976	1	This view highlights the scalability of \\texttt{upload} and \\texttt{dowload} operations.	f
976	3	This view highlights the scalability of \\texttt{upload} and \\texttt{dowload} operations, and of storage.	f
977	0	This shared understanding can be represented by a set of architectural views.	f
977	1	This shared understanding includes the architecturally significant requirements.	f
977	3	The shared understanding describes the system from a high-level perspective.	f
978	0	The exchange of information is the stimulus.	f
978	1	The request to adapt an interface is the stimulus.	f
978	2	The design of a reusable interface is the stimulus.	f
979	0	Design an architectural solution together with the stakeholders to be sure that everybody agrees on the resolution of conflits.	f
979	2	Facilitate the communication among the stakeholders such that they can decide on what are the architecturally significant requirements.	f
979	3	Design an architecture that supports all the conflicting requirements and present it to the stakeholders.	f
980	0	The set of structures is needed to support different levels of performance for the system.	f
980	1	To reason about a system is to verify whether the architecturally significant requirements are considered by the architecture.	f
980	3	There isn't any relation between the properties of the software elements and the ability to reason about the system.	f
981	1	This view highlights the performance of the \\texttt{download} operations.	f
981	2	This view highlights the performance of \\texttt{upload} operations.	f
981	3	This view highlights the scalability of \\texttt{upload} and \\texttt{dowload} operations.	f
982	1	The functional requirements have a large impact on the definition of views of the component-and-connector viewtype because each component executes a functionality.	f
982	2	The functional requirements have a large impact on the definition of views of the module viewtype because they are used to define the high cohesion and low coupling of modules.	f
982	3	The functional requirements can be considered as constraints on the software architecture design.	f
983	0	Active redundancy can be used together with a voting tactic to detect and recover from faults.	f
983	2	Spare guarantees immediate recover.	f
983	3	Passive redundancy does not work with non-deterministic behavior of request's execution.	f
984	1	This view highlights the performance of the \\texttt{download} operations.	f
984	2	This view highlights the performance of \\texttt{upload} operations.	f
984	3	This view highlights the scalability of \\texttt{upload} and \\texttt{dowload} operations.	f
985	0	However, functional requirements do not have any impact on the architecture because the systemic qualities of an architecture are non-functional.	f
985	1	The functional requirements have a large impact on the definition of views of the component-and-connector viewtype because each component executes a functionality.	f
985	2	The functional requirements have a large impact on the definition of views of the module viewtype because they are used to define the high cohesion and low coupling of modules.	f
986	0	Design an architectural solution together with the stakeholders to be sure that everybody agrees on the resolution of conflits.	f
986	1	Solve the conflicts between requirements by deciding on the best trad-offs the system should support.	f
986	3	Design an architecture that supports all the conflicting requirements and present it to the stakeholders.	f
987	0	The set of structures is needed to support different levels of performance for the system.	f
987	1	To reason about a system is to verify whether the architecturally significant requirements are considered by the architecture.	f
987	3	There isn't any relation between the properties of the software elements and the ability to reason about the system.	f
988	0	Active redundancy can be used together with a voting tactic to detect and recover from faults.	f
988	1	These tactics are used to prevent the occurence of a fault.	f
988	2	Spare guarantees immediate recover.	f
989	0	Manage sampling rate.	f
989	1	Limit event response.	f
989	3	Bound execution time.	f
990	0	Has as main goal the reduction of the modules' size.	f
990	2	Increases the cohesion between the two modules.	f
990	3	Cannot be used together with the Reduce Overhead performance tactic.	f
991	0	In each iteration one or more architecturally significant requirements are used to decompose a software element of the system design.	f
991	1	The architect cannot backtrack the decomposition decisions she made.	f
991	3	Contraints cannot be used as requirements for the decomposition process.	f
992	0	It describes a performance scenario where the stimulus is the request of a custom graph.	f
992	2	It describes a usability scenario where the source of stimulus is a non-technical user.	f
992	3	A support user initiative tactic based on the definition of a language is used to achieve this scenario.	f
993	1	It describes a scalability scenario because it is possible to increment the size of the configuration at a linear cost.	f
993	2	It describes a usability scenario where the stimulus is reduce the number of errors when configuring the system.	f
993	3	It describes a modifiability scenario because of the cost associated with maintaining the configuration.	f
994	1	It describes a scalability scenario because it is possible to increment the size of the configuration at a linear cost.	f
994	2	It describes a usability scenario where the stimulus is reduce the number of errors when configuring the system.	f
994	3	It describes a modifiability scenario because of the cost associated with maintaining the configuration.	f
995	1	The architect cannot backtrack the decomposition decisions she made.	f
995	2	During the design process the number of architecturally significant requirements cannot change.	f
995	3	Contraints cannot be used as requirements for the decomposition process.	f
996	0	Manage sampling rate.	f
996	1	Limit event response.	f
996	3	Bound execution time.	f
997	0	It describes a performance scenario where the stimulus is the request of a custom graph.	f
997	1	The scenario is supported by a manage sampling rate tactic because several requests to the same graph return the same result.	f
997	3	A support user initiative tactic based on the definition of a language is used to achieve this scenario.	f
998	0	Has as main goal the reduction of the modules' size.	f
998	1	Results in the creation of a third module that does not have to change when any of the original modules are changed.	f
998	2	Increases the cohesion between the two modules.	f
999	0	Manage sampling rate.	f
999	2	Prioritize events.	f
999	3	Maintain multiple copies of computation.	f
1000	0	This is a performance scenario because the stimulus is an input, \\emph{launches several instances of the system}.	f
1000	1	This is a modifiability scenario which has a defer binding tactic.	f
1000	3	This is a modifiability scenario and its environment design time.	f
1001	1	A scenario for a power outage should have a low business value because the fault is temporary.	f
1001	2	A scenario for a 24 hours x 7 days availability of the system should appear as a leaf of the utility tree.	f
1001	3	The utility tree covers all the significant qualities the system has to address.	f
1002	1	Bound execution times, and increase resources.	f
1002	2	Manage sampling rate, bound queue sizes, and increase resources.	f
1002	3	Bound queue sizes, and increase resources.	f
1003	0	Introduce concurrency.	f
1003	2	Schedule resources.	f
1003	3	Maintain multiple copies of computation.	f
1004	1	Increase resources.	f
1004	2	Schedule resources.	f
1004	3	Maintain multiple copies of computation.	f
1005	0	This is a performance scenario because the stimulus is an input, \\emph{launches several instances of the system}.	f
1005	1	This is a modifiability scenario which has a defer binding tactic.	f
1005	2	This is not a modifiability scenario because the source of the stimulus cannot be a system administrator.	f
1006	0	Bound execution times, bound queue sizes, and increase resources.	f
1006	1	Bound execution times, and increase resources.	f
1006	3	Bound queue sizes, and increase resources.	f
1007	0	Only the scenarios that have high architectural impact and high business value should appear in the tree.	f
1007	1	A scenario for a power outage should have a low business value because the fault is temporary.	f
1007	3	The utility tree covers all the significant qualities the system has to address.	f
1008	0	Manage sampling rate.	f
1008	1	Limit event response.	f
1008	2	Prioritize events.	f
1001	0	Only the scenarios that have high architectural impact and high business value should appear in the tree.	t
1002	0	Bound execution times, bound queue sizes, and increase resources.	t
1003	1	Increase resources.	t
1004	0	Introduce concurrency.	t
1005	3	This is a modifiability scenario and its environment design time.	t
1006	2	Manage sampling rate, bound queue sizes, and increase resources.	t
1007	2	A scenario for a 24 hours x 7 days availability of the system should appear as a leaf of the utility tree.	t
1009	0	Increase resource efficiency.	f
1009	1	Increase resources.	f
1009	3	Increase resources and Maintain multiple copies of computation.	f
1010	0	A low cost of change may imply a high cost of development.	f
1010	2	There is no relation between the cost of change and the cost of development.	f
1010	3	A high cost of change occurs if it is necessary to defer the binding of what needs to be changed.	f
1011	0	This decision does not have any impact on the architecture.	f
1011	1	This decision corresponds to a constraint requirement.	f
1011	3	This decision is not a consequence of the Fénix business case.	f
1012	0	It describes a reliability scenario because the data points for each metric will be split between a buffer and disk.	f
1012	2	The tactic used to solve the problem is based in the fact that data points are appended to the end of the metric file.	f
1012	3	The tactic used to solve the problem is not manage sampling rate because there isn't any loss of data points.	f
1013	1	A availability scenario because it allows the introduction of load balancers.	f
1013	2	A modifiability scenario where defer binding occurs at compile time.	f
1013	3	A usability scenario because developers can extend the system without having to modify the nginx core.	f
1014	1	This decision corresponds to a constraint requirement.	f
1014	2	This decision needs to be made concrete by an interoperability scenario.	f
1014	3	This decision is not a consequence of the Fénix business case.	f
1015	1	It describes a performance scenario for the execution of reads.	f
1015	2	The tactic used to solve the problem is based in the fact that data points are appended to the end of the metric file.	f
1015	3	The tactic used to solve the problem is not manage sampling rate because there isn't any loss of data points.	f
1016	0	Increase resource efficiency.	f
1016	1	Increase resources.	f
1016	3	Increase resources and Maintain multiple copies of computation.	f
1017	0	A security scenario because it allows the introduction of filters to encrypt the messages.	f
1017	1	A availability scenario because it allows the introduction of load balancers.	f
1017	3	A usability scenario because developers can extend the system without having to modify the nginx core.	f
1018	0	A low cost of change may imply a high cost of development.	f
1018	1	A low cost of change implies a low cost of development, because changing the code is part of development.	f
1018	2	There is no relation between the cost of change and the cost of development.	f
1019	0	Its main goal is to establish the reusability qualities of the architecture.	f
1019	2	Incremental development is a criteria that drives the design of views of this type.	f
1019	3	There should be at least one view of the system using this architectural style.	f
1020	0	Passive redundancy.	f
1020	1	Active redundancy.	f
1020	3	Maintain multiples copies of computation.	f
1021	1	The server approach can scale independently of the number of applications.	f
1021	2	The server approach implements a local cache.	f
1021	3	The library approach does not build a cluster.	f
1022	1	A connector cannot be decomposed into a set of components and connectors.	f
1022	2	A connector embodies a communication protocol.	f
1022	3	A component can only have a single type of port.	f
1023	0	A client-server style.	f
1023	2	Both, client-server and shared-data styles.	f
1023	3	A blackboard style.	f
1024	1	A shared-data style.	f
1024	2	Both, client-server and shared-data styles.	f
1024	3	A blackboard style.	f
1025	0	Passive redundancy.	f
1025	1	Active redundancy.	f
1025	2	Voting.	f
1026	0	Its main goal is to establish the reusability qualities of the architecture.	f
1026	1	Project managers are not interested in views that use this style because it lacks the necessary level of detail.	f
1026	3	There should be at least one view of the system using this architectural style.	f
1027	0	The library approach allows non-java applications.	f
1027	1	The server approach can scale independently of the number of applications.	f
1027	3	The library approach does not build a cluster.	f
1028	0	A component cannot be decomposed into a set of components and connectors.	f
1028	1	A connector cannot be decomposed into a set of components and connectors.	f
1028	2	A connector embodies a communication protocol.	f
1029	0	Cycles in the uses relation between modules are a good sign, because it indicates that several modules should be tested together.	f
1029	1	The project manager uses this view to get advice on the incremental development of the system.	f
1029	3	There isn't any relation with the layered architectural style because the allowed-to-use relation is more generic.	f
1030	0	Schedule resources.	f
1030	2	Tailor interface.	f
1030	3	Increase resources.	f
1031	0	Modifiability.	f
1031	1	Availability.	f
1031	3	Scalability.	f
1032	0	A component is an instance and a view can have several instances of the same component type.	f
1032	2	Only components can be associated with application-specific types.	f
1032	3	A component-and-connector view can only use a single architectural style.	f
1033	1	Any peer can access any other peer.	f
1033	2	Peers are only used to share files.	f
1033	3	The interaction between peers is symmetric.	f
1034	1	A component type is made of a single architectural style.	f
1034	2	Only components can be associated with application-specific types.	f
1034	3	A component-and-connector view can only use a single architectural style.	f
1035	1	Any peer can access any other peer.	f
1035	2	Peers are only used to share files.	f
1035	3	The interaction between peers is symmetric.	f
1036	0	Cycles in the uses relation between modules are a good sign, because it indicates that several modules should be tested together.	f
1036	1	The project manager uses this view to get advice on the incremental development of the system.	f
1036	3	There isn't any relation with the layered architectural style because the allowed-to-use relation is more generic.	f
1037	0	Schedule resources.	f
1037	1	Introduce concurrency.	f
1037	3	Increase resources.	f
1038	0	Modifiability.	f
1038	1	Availability.	f
1038	2	Performance.	f
1039	0	The modules inside a layer cannot use other modules in the same layer.	f
1039	2	Each layer defines a virtual machine because it provides a set of cohesive functionalities to the upper layer.	f
1039	3	It is possible to have a circular allowed-to-use relationship between several layers.	f
1040	0	Interoperability.	f
1040	1	Usability.	f
1040	3	Modifiability.	f
1041	1	Availability.	f
1041	2	Modifiability.	f
1041	3	Reliability.	f
1042	1	The Merge component executes the modules merge and stdio.	f
1042	2	The module main is executed in the Merge component.	f
1042	3	The Pipe connectors do not execute any module.	f
1043	0	Modifiability, because the Data Accessors do not depend on the data model.	f
1043	2	Scalability of write requests, because a transactional system will synchronize the writes among the several repositories.	f
1043	3	Confidentially of data, because it can be replicated in several repositories.	f
1044	1	The Merge component executes the modules merge and stdio.	f
1044	2	The module main is executed in the Merge component.	f
1044	3	The Pipe connectors do not execute any module.	f
1045	0	Performance.	f
1045	1	Availability.	f
1045	2	Modifiability.	f
1046	0	Modifiability, because the Data Accessors do not depend on the data model.	f
1046	1	Scalability of read requests, because it is easy add more repositories to where reads are distributed, though there may be some level of inconsistency.	f
1046	3	Confidentially of data, because it can be replicated in several repositories.	f
1047	0	Interoperability.	f
1047	1	Usability.	f
1047	3	Modifiability.	f
1048	0	The modules inside a layer cannot use other modules in the same layer.	f
1048	1	A layer cannot call the layer above.	f
1048	2	Each layer defines a virtual machine because it provides a set of cohesive functionalities to the upper layer.	f
1049	0	The main quality this style addresses is interoperability.	f
1049	1	It cannot be applied when the system includes legacy systems.	f
1049	3	The typical communication pattern is point-to-point.	f
1050	0	It assigns components and connectors to people and teams.	f
1050	2	It does not consider the software that is outsourced.	f
1050	3	It allows to estimate the cost of hardware.	f
1051	0	Client-server.	f
1051	1	Peer-to-peer.	f
1051	3	Pipe-and-filter.	f
1052	0	A decomposition view.	f
1052	2	A view of the component-and-connector viewtype and a deployment view.	f
1052	3	A decomposition view, a view of the component-and-connector viewtype and a deployment view.	f
1053	1	Shared-data where the Buildbot is the data accessor.	f
1053	2	Client-server where the Buildbot is the client.	f
1053	3	Client-server where the Buildbot is the server.	f
1054	1	A view of the component-and-connector viewtype.	f
1054	2	A view of the component-and-connector viewtype and a deployment view.	f
1054	3	A decomposition view, a view of the component-and-connector viewtype and a deployment view.	f
1055	1	It is useful for the project managers.	f
1055	2	It does not consider the software that is outsourced.	f
1055	3	It allows to estimate the cost of hardware.	f
1056	0	Client-server.	f
1056	1	Peer-to-peer.	f
1056	3	Pipe-and-filter.	f
1057	0	Peer-to-peer.	f
1057	1	Shared-data where the Buildbot is the data accessor.	f
1057	3	Client-server where the Buildbot is the server.	f
1058	0	The main quality this style addresses is interoperability.	f
1058	1	It cannot be applied when the system includes legacy systems.	f
1058	2	Its enterprise service bus cannot support asynchronous communication between the components.	f
1059	0	Tiers.	f
1059	2	Tiers, Shared-data, and Service-oriented architecture.	f
1059	3	Tiers, Shared-data, Service-oriented architecture, and Client-server.	f
1060	0	Decomposition.	f
1060	1	Generalization.	f
1060	3	Peer-to-peer.	f
1061	1	It cannot assign software elements to virtual servers because they are not hardware.	f
1061	2	For each set of software elements there is a single possible assignment to hardwre.	f
1061	3	It is useful for system administrators.	f
1062	1	Tiers to represent scalability.	f
1062	2	Service-oriented architecture to represent interoperability.	f
1062	3	Shared-data to represent modifiability.	f
1063	0	Publish-subscribe.	f
1063	2	Shared-date.	f
1063	3	Generalization.	f
1064	1	Generalization.	f
1064	2	Decomposition and Generalization.	f
1064	3	Peer-to-peer.	f
1065	0	Tiers.	f
1065	1	Tiers, and Shared-data.	f
1065	2	Tiers, Shared-data, and Service-oriented architecture.	f
1066	0	It assigns modules to the hardware.	f
1066	1	It cannot assign software elements to virtual servers because they are not hardware.	f
1066	3	It is useful for system administrators.	f
1067	0	Publish-subscribe.	f
1067	1	Client-server.	f
1067	3	Generalization.	f
1068	0	Client-server to represent performance.	f
1068	1	Tiers to represent scalability.	f
1068	2	Service-oriented architecture to represent interoperability.	f
1069	0	Service-oriented architecture, and Client-server.	f
1069	1	Service-oriented architecture, and Shared-data.	f
1069	3	Service-oriented architecture, Shared-data, Peer-to-peer, and Client-server.	f
1070	0	The development team is the main stakeholder interesting in these views.	f
1070	2	It is completely independent of the deployment architectural style.	f
1070	3	It helps on the configuration of systems.	f
1071	0	Client-server.	f
1071	1	Communicating processes.	f
1071	3	Shared-data.	f
1072	0	The data-shared architectural style is not applied because data is encapsulated inside services.	f
1072	2	Modifiability is not a concern of their architecture.	f
1072	3	The decouple of data formats does not support scalability because of the transactional properties.	f
1073	1	Shared-data where the Dashboard is the repository.	f
1073	2	Client-server where the Dashboard is the client.	f
1073	3	Client-server where the Dashboard is the server.	f
1074	1	The sharing of data is done using a service-oriented architecture.	f
1074	2	Modifiability is not a concern of their architecture.	f
1074	3	The decouple of data formats does not support scalability because of the transactional properties.	f
1075	1	Shared-data where the Dashboard is the repository.	f
1075	2	Client-server where the Dashboard is the client.	f
1075	3	Client-server where the Dashboard is the server.	f
1076	0	Service-oriented architecture, and Client-server.	f
1076	1	Service-oriented architecture, and Shared-data.	f
1076	3	Service-oriented architecture, Shared-data, Peer-to-peer, and Client-server.	f
1077	0	The development team is the main stakeholder interesting in these views.	f
1077	1	It assigns modules to files.	f
1077	3	It helps on the configuration of systems.	f
1078	0	Client-server.	f
1078	1	Communicating processes.	f
1078	2	Peer-to-peer.	f
1079	0	Typically have a software architecture that results\n    from the common knowledge about the system that is shared among\n    the team members	f
1079	2	Do not have a software architecture, because the practice of\n    refactoring allows changing every part of the system easily	f
1079	3	May have a software architecture, but that architecture is\n    not known because it was neither designed nor documented	f
1080	0	However, functional requirements do not have any impact on the architecture because the systemic qualities of an architecture are non-functional	f
1080	1	The functional requirements have a large impact on the definition of views of the component-and-connector viewtype because each component executes a functionality	f
1080	3	The functional requirements can be considered as constraints on the software architecture design	f
1081	1	The artefact is the load balancer	f
1081	2	The response is not correctly stated	f
1081	3	The quality it addresses is interoperability	f
1082	1	Hardware, if there is hardware redundancy	f
1082	2	Operating Systems, if redundant components execute on top of different operating systems	f
1082	3	All the previous options	f
1083	0	Performance	f
1083	2	Availability	f
1083	3	Modifiability	f
1084	0	Manage sampling rate	f
1084	1	Limit event response	f
1084	3	Bound execution times	f
1085	0	Have high throughput	f
1085	1	Have low latency	f
1085	2	Allow many simultaneous users	f
1086	0	Split module	f
1086	2	Restrict dependencies	f
1086	3	Defer binding	f
1087	1	We just have to show, through component-and-connector\n      views, that the system maintains replicas of the data in\n      different components	f
1087	2	We just have to show, through Deployment views,\n      that the \\emph{DataNode} component executes in more than one\n      machine of the cluster	f
1087	3	We just have to show, through Decomposition views, that\n      there are modules responsible for the replication of file blocks	f
1088	1	Active replication, passive replication, and spare	f
1088	2	Passive replication and spare	f
1088	3	Quorum, active replication, and passive replication	f
1089	0	Different stakeholders are interested in different views of the system	f
1089	1	A single view would be too simplistic	f
1089	3	All of the above	f
1090	1	Usability	f
1090	2	Security	f
1090	3	Availability	f
1091	0	A view of the Data Model style	f
1091	1	A view of the Layers style	f
1091	2	A view of the Decomposition style	f
1092	0	It imposes restrictions on which uses relationships may\n      exist between the system's modules	f
1092	1	It makes it easier to create generalization relationships\n      between the system's modules	f
1092	3	It allows the decomposition of each of the system's\n      modules into finer grained modules	f
1093	0	Can use the operations defined in any of the system's modules	f
1093	1	Can use the operations defined in the lower layer, but not the ones defined in\n         the upper layer	f
1093	2	Can use the operations defined in the upper layer, but not the ones defined in\n         the lower layer	f
1094	0	Per-to-peer	f
1094	2	Communicating processes	f
1094	3	Publish-subscribe	f
1095	0	The stimulus is an omission and the tactic is retry	f
1095	1	The stimulus is a crash and the tactic is retry	f
1095	2	The stimulus is an incorrect timing and the tactic is ignore faulty behaviour	f
1096	0	The layered view to support a new specific layer for the customization of the catalog	f
1096	1	The layered view to accommodate a new layer for each kind of catalog, which other layers may use	f
1096	2	The data model view in order to define entities for each kind of catalog	f
1097	0	Only in the Deployment view	f
1097	1	Only in the Decomposition view	f
1097	3	Both in a component-and-connector and the Deployment\n      views	f
1098	0	When a peer connects to the network it establishes connections with all other peers in the network	f
1098	1	The behavior described in the sentence can be represented in a view where the dynamic reconfiguration architectural style is used	f
1098	3	The behavior described in the sentence can be represented in a view where the tier architectural style is used	f
1099	0	But when the filters are executed sequentially the composition power is reduced	f
1099	2	But the size of buffers may reduce the composition power	f
1099	3	And filters do not have to agree on the data formats	f
1100	0	To facilitate the interaction among heterogeneous\n      components that use distinct communication protocols	f
1100	1	To promote the use of a common communication protocol for\n      all the remaining components of the system	f
1100	3	To create a strong coupling between the various services\n      provided by the organization	f
1101	1	Generalization views	f
1101	2	Deployment views	f
1101	3	Implementation views	f
1102	1	Client-Server	f
1102	2	Peer-to-Peer	f
1102	3	Uses	f
1103	0	The quality being addressed is performance and the tactic multiple copies of data	f
1103	2	The quality being addressed is performance and the tactics multiple copies of data and multiple copies of computation	f
1103	3	The quality being addressed is availability and the tactic passive redundancy	f
1104	0	Tiers style	f
1104	1	Client-server style	f
1104	3	Pipe-and-filter style	f
1105	0	Each service can be developed and deployed independently	f
1105	1	Easier to scale development	f
1105	2	Eliminates any long-term commitment to a technology stack	f
1106	0	The shared-data architectural style is not applied because data is encapsulated inside services	f
1106	2	Modifiability is not a concern of their architecture	f
1106	3	The decouple of data formats does not support scalability because of the transactional properties	f
1107	1	a two-phase commit protocol takes place between the involved applications	f
1107	2	a ACID transaction occurs in each of the involved applications, but we can not infer which transaction occurs first	f
1107	3	an ACID transaction occurs in the invoked application and ACID transactions in the other involved applications will eventually occur later	f
1108	1	This is the solution followed by Twitter client applications	f
1108	2	It describes the typical behavior of a microservices system	f
1108	3	To support high scalability the request of \\texttt{User 1} needs to be decomposed into a request to only one of the aggregate instances and the processing in the other aggregate occurs in the background	f
1109	1	Only in the Decomposition view	f
1109	2	Only in a component-and-connector view	f
1109	3	Both in a component-and-connector and the Deployment\n      views	f
1110	0	When a peer connects to the network it establishes connections with all other peers in the network	f
1110	1	The behavior described in the sentence can be represented in a view where the dynamic reconfiguration architectural style is used	f
1110	2	When a peer receives a connection it sends all its files to the peer connecting it	f
1111	0	But when the filters are executed sequentially the composition power is reduced	f
1111	1	Which improves modifiability, because filters are decoupled through pipes	f
1111	3	And filters do not have to agree on the data formats	f
1112	0	To facilitate the interaction among heterogeneous\n      components that use distinct communication protocols	f
1112	1	To promote the use of a common communication protocol for\n      all the remaining components of the system	f
1112	3	To create a strong coupling between the various services\n      provided by the organization	f
1113	0	Work Assignment views	f
1113	1	Generalization views	f
1113	2	Deployment views	f
1114	1	Client-Server	f
1114	2	Peer-to-Peer	f
1114	3	Uses	f
1115	0	Typically have a software architecture that results\n    from the common knowledge about the system that is shared among\n    the team members	f
1135	3	Availability	f
1136	0	A view of the Data Model style	f
1101	0	Work Assignment views	t
1102	0	Communicating Processes	t
1103	1	The quality being addressed is performance and the tactic multiple copies of computation	t
1104	2	Shared-data style	t
1105	3	Testing is easier	t
1106	1	The sharing of data is done using a service-oriented architecture	t
1107	0	an ACID transaction occurs in all the involved applications	t
1115	2	Do not have a software architecture, because the practice of\n    refactoring allows changing every part of the system easily	f
1115	3	May have a software architecture, but that architecture is\n    not known because it was neither designed nor documented	f
1116	0	However, functional requirements do not have any impact on the architecture because the systemic qualities of an architecture are non-functional	f
1116	1	The functional requirements have a large impact on the definition of views of the component-and-connector viewtype because each component executes a functionality	f
1116	2	The functional requirements have a large impact on the definition of views of the module viewtype because they are used to define the high cohesion and low coupling of modules	f
1117	0	The stimulus is incorrect response	f
1117	1	The artefact is the load balancer	f
1117	2	The response is not correctly stated	f
1118	0	Programming, if the components execute modules developed by different teams	f
1118	1	Hardware, if there is hardware redundancy	f
1118	2	Operating Systems, if redundant components execute on top of different operating systems	f
1119	0	Performance	f
1119	1	Usability	f
1119	3	Modifiability	f
1120	1	Limit event response	f
1120	2	Reduce overhead	f
1120	3	Bound execution times	f
1121	1	Have low latency	f
1121	2	Allow many simultaneous users	f
1121	3	May be easily changed to increase their performance	f
1122	1	Encapsulate	f
1122	2	Restrict dependencies	f
1122	3	Defer binding	f
1123	0	Per-to-peer	f
1123	2	Communicating processes	f
1123	3	Publish-subscribe	f
1124	0	The stimulus is an omission and the tactic is retry	f
1124	2	The stimulus is an incorrect timing and the tactic is ignore faulty behaviour	f
1124	3	The stimulus is incorrect response and the tactic is voting	f
1125	0	The layered view to support a new specific layer for the customization of the catalog	f
1125	2	The data model view in order to define entities for each kind of catalog	f
1125	3	The data model view in order to define generic entities that can be customized for different kinds of catalogs	f
1126	0	The quality being addressed is performance and the tactic multiple copies of data	f
1126	1	The quality being addressed is performance and the tactic multiple copies of computation	f
1126	3	The quality being addressed is availability and the tactic passive redundancy	f
1127	1	Client-server style	f
1127	2	Shared-data style	f
1127	3	Pipe-and-filter style	f
1128	0	Each service can be developed and deployed independently	f
1128	2	Eliminates any long-term commitment to a technology stack	f
1128	3	Testing is easier	f
1129	1	The sharing of data is done using a service-oriented architecture	f
1129	2	Modifiability is not a concern of their architecture	f
1129	3	The decouple of data formats does not support scalability because of the transactional properties	f
1130	0	an ACID transaction occurs in all the involved applications	f
1130	1	a two-phase commit protocol takes place between the involved applications	f
1130	2	a ACID transaction occurs in each of the involved applications, but we can not infer which transaction occurs first	f
1131	0	The access to two different aggregate instances in the context of the same request does not hinder scalability	f
1131	1	This is the solution followed by Twitter client applications	f
1131	3	To support high scalability the request of \\texttt{User 1} needs to be decomposed into a request to only one of the aggregate instances and the processing in the other aggregate occurs in the background	f
1132	0	We must use various different views, both of the\n      component-and-connector and the allocation viewtypes	f
1132	1	We just have to show, through component-and-connector\n      views, that the system maintains replicas of the data in\n      different components	f
1132	3	We just have to show, through Decomposition views, that\n      there are modules responsible for the replication of file blocks	f
1133	0	Active replication and passive replication	f
1133	1	Active replication, passive replication, and spare	f
1133	2	Passive replication and spare	f
1134	1	A single view would be too simplistic	f
1134	2	The views describe different aspects of the system	f
1134	3	All of the above	f
1135	0	Modifiability	f
1135	2	Security	f
1136	1	A view of the Layers style	f
1136	2	A view of the Decomposition style	f
1137	0	It imposes restrictions on which uses relationships may\n      exist between the system's modules	f
1137	1	It makes it easier to create generalization relationships\n      between the system's modules	f
1137	2	It separates in new modules responsibilities that were\n      spread over various of the system's modules	f
1138	0	Can use the operations defined in any of the system's modules	f
1138	1	Can use the operations defined in the lower layer, but not the ones defined in\n         the upper layer	f
1138	2	Can use the operations defined in the upper layer, but not the ones defined in\n         the lower layer	f
1139	0	Is a high-level view of the system with the purpose of\n  understanding what are the system's goals and features	f
1139	1	Is composed of things such as code units, runtime elements,\n  hardware, and people, together with the relationships among them	f
1139	3	Is a set of diagrams that show the runtime elements of the\n  system and their relationships	f
1140	0	Describing what are the qualities that the system should possess	f
1140	2	Describing a use case for the system that makes clear what\n  should be the system's responses to each of the user's inputs	f
1140	3	Describing the system's features by way of different\n  usage scenarios for it, in which users play the role of actors	f
1141	0	The scenario is not correct	f
1141	1	The scenario is correct but it does not describe whether the request the servers fails to respond to succeeds or fails	f
1141	3	The scenario is not completely correct because it contains two responses	f
1142	0	Only in the Deployment view	f
1142	2	Only in a component-and-connector view	f
1142	3	Both in a component-and-connector and the Deployment\n      views	f
1143	1	Availability	f
1143	2	Modifiability	f
1143	3	Reliability	f
1144	1	Limit event response	f
1144	2	Reduce overhead	f
1144	3	Bound execution times	f
1145	0	The stimulus is to port the system to a new browser	f
1145	1	The environment is build time	f
1145	2	The response is 5 person/month	f
1146	0	Split module	f
1146	1	Increase semantic coherence	f
1146	3	Defer binding	f
1147	1	Essential to reduce costs whenever there is a fault in a hardware element	f
1147	2	Essential to ensure the system portability	f
1147	3	Essential to facilitate the integration with legacy systems	f
1148	0	Because this tactic simplifies the addition and removal of DataNodes	f
1148	1	But they could have used the ping tactic instead without adding any overhead to the NameNode	f
1148	2	But the exceptions tactic could have been used as well	f
1149	0	Each view contains a single architectural style	f
1149	1	Views need to contain more than one architectural style	f
1149	3	None of the above	f
1150	1	A component-and-connector view	f
1150	2	An allocation view	f
1150	3	They are not represented by a view	f
1151	0	The Decomposition and the Work Assignment styles	f
1151	1	The Decomposition and the Layers styles	f
1151	2	The Decomposition and the Uses styles	f
1152	0	The Decomposition style	f
1152	2	The Uses style	f
1152	3	The Work-assignment style	f
1153	0	The Generalization style	f
1153	1	The Uses style	f
1153	3	The Aspects style	f
1154	1	Modifiability	f
1154	2	Performance	f
1154	3	Security	f
1155	0	Use a passive redundancy tactic in the OPC (Order Processing Center)	f
1155	1	Use a passive redundancy tactic in the Consumer Web site	f
1155	3	Use an active redundancy tactic in the Consumer Web site	f
1156	0	The decomposition view to include a module for the synchronization responsibilities	f
1156	1	The uses view to represent how the mobile device uses the Catalog application	f
1156	2	The layered view to include a layer for each type of device	f
1157	0	Only views of the component-and-connector viewtype are needed	f
1157	1	All viewtypes may be necessary	f
1157	3	Views of the module viewtype are not needed	f
1158	0	The file transfers follows the same path of nodes used to identify where the file was located	f
1158	1	The peer initiating the request for a file needs to know where the file is located	f
1158	2	If a peer providing a file crashes it is necessary to restart downloading the file from the begin	f
1159	0	The presentation logic layer, domain logic layer, and\n      data access layer	f
1159	1	The traditional web applications, the mashups, and the rich internet applications (RIAs)	f
1159	3	The web services layer, the domain logic layer, and the\n      data access layer	f
1160	0	Implementation	f
1160	2	Decomposition	f
1160	3	None, because this description does not describe any architectural aspect of the system	f
1161	0	It enforces the use of a single implementation language among all applications	f
1161	1	The orchestration is in charge of improving the transparent location of service providers	f
1161	3	It decouples applications developed for different organizations	f
1162	0	Work assignment view	f
1162	2	Implementation view	f
1162	3	Deployment view	f
1163	1	Write two scenarios on performance	f
1163	2	Write a scenario on performance and a scenario on interoperability	f
1163	3	Write a single scenario on interoperability	f
1164	1	Component-and-connector viewtype	f
1164	2	Install architectural style of the allocation viewtype	f
1164	3	It is not necessary to represent this behavior because it does not describe any qualities	f
1165	0	We do not need a view of the module viewtype because it is about the runtime properties of the system	f
1165	1	We do not need a view of the allocation viewtype because deployment is automated	f
1165	2	The component-and-connector view should emphasize the performance qualities of systems following the microservices architecture	f
1166	0	All functionalities can be transactional	f
1166	1	Only a small set of functionalities are transactional	f
1166	3	Only the isolation property of transactions is supported	f
1167	1	When two events are published to the distributed log they are delivered to the different subscribing applications in the same order	f
1167	2	The distributed log guarantees that events will be delivered only once	f
1167	3	The distributed log may not deliver some of the events that are published to their subscribers	f
1168	0	It allows high scalability because the data model has only four entities	f
1168	1	It allows high scalability because it is possible the implement transactions associated to each one of the aggregates	f
1168	2	It allows high scalability because the only synchronized access is to the \\texttt{ProductId}, so it requires a single contention point	f
1169	1	The environment is build time	f
1169	2	The response is 5 person/month	f
1169	3	To implement the above scenario it is necessary to apply a runtime defer binding tactic	f
1170	1	Increase semantic coherence	f
1170	2	Restrict dependencies	f
1170	3	Defer binding	f
1171	0	Essential to ensure the system scalability	f
1171	1	Essential to reduce costs whenever there is a fault in a hardware element	f
1171	3	Essential to facilitate the integration with legacy systems	f
1172	0	Because this tactic simplifies the addition and removal of DataNodes	f
1172	1	But they could have used the ping tactic instead without adding any overhead to the NameNode	f
1172	3	To inform other DataNodes about their availability	f
1173	0	Is a high-level view of the system with the purpose of\n  understanding what are the system's goals and features	f
1173	1	Is composed of things such as code units, runtime elements,\n  hardware, and people, together with the relationships among them	f
1173	2	Is a set of guidelines that the developing team should\n  follow in the development of the system	f
1174	0	Describing what are the qualities that the system should possess	f
1174	1	Describing a set of steps that a user of the system must\n  perform to accomplish some task	f
1174	2	Describing a use case for the system that makes clear what\n  should be the system's responses to each of the user's inputs	f
1175	0	The scenario is not correct	f
1175	2	The scenario is correct but it is not clear what is the artefact	f
1175	3	The scenario is not completely correct because it contains two responses	f
1176	0	Only in the Deployment view	f
1176	1	Only in the Decomposition view	f
1176	2	Only in a component-and-connector view	f
1177	1	Availability	f
1177	2	Modifiability	f
1177	3	Reliability	f
1178	0	Manage sampling rate	f
1178	1	Limit event response	f
1178	2	Reduce overhead	f
1179	0	The presentation logic layer, domain logic layer, and\n      data access layer	f
1179	2	The web browser, o web server, and the data base	f
1179	3	The web services layer, the domain logic layer, and the\n      data access layer	f
1180	0	It enforces the use of a single implementation language among all applications	f
1180	1	The orchestration is in charge of improving the transparent location of service providers	f
1180	3	It decouples applications developed for different organizations	f
1181	1	Install view	f
1181	2	Implementation view	f
1181	3	Deployment view	f
1182	0	Write a single scenario on performance	f
1182	2	Write a scenario on performance and a scenario on interoperability	f
1182	3	Write a single scenario on interoperability	f
1183	1	Component-and-connector viewtype	f
1183	2	Install architectural style of the allocation viewtype	f
1183	3	It is not necessary to represent this behavior because it does not describe any qualities	f
1184	1	Views need to contain more than one architectural style	f
1184	2	A view may not contain any architectural style	f
1184	3	None of the above	f
1185	0	A module view	f
1185	1	A component-and-connector view	f
1185	2	An allocation view	f
1186	0	The Decomposition and the Work Assignment styles	f
1186	2	The Decomposition and the Uses styles	f
1186	3	The Decomposition and the SOA styles	f
1187	0	The Decomposition style	f
1187	2	The Uses style	f
1187	3	The Work-assignment style	f
1188	1	The Uses style	f
1188	2	The Layers style	f
1188	3	The Aspects style	f
1189	1	Modifiability	f
1189	2	Performance	f
1189	3	Security	f
1190	1	Use a passive redundancy tactic in the Consumer Web site	f
1190	2	Use an active redundancy tactic in the OPC (Order Processing Center) 	f
1190	3	Use an active redundancy tactic in the Consumer Web site	f
1191	0	The decomposition view to include a module for the synchronization responsibilities	f
1191	1	The uses view to represent how the mobile device uses the Catalog application	f
1191	3	The domain layer of the layered style to represent the types of devices	f
1192	0	Only views of the component-and-connector viewtype are needed	f
1192	1	All viewtypes may be necessary	f
1192	3	Views of the module viewtype are not needed	f
1193	0	The file transfers follows the same path of nodes used to identify where the file was located	f
1193	1	The peer initiating the request for a file needs to know where the file is located	f
1193	2	If a peer providing a file crashes it is necessary to restart downloading the file from the begin	f
1194	0	We do not need a view of the module viewtype because it is about the runtime properties of the system	f
1194	1	We do not need a view of the allocation viewtype because deployment is automated	f
1194	2	The component-and-connector view should emphasize the performance qualities of systems following the microservices architecture	f
1195	0	All functionalities can be transactional	f
1195	2	It is not necessary to have transactional properties because all data is in memory	f
1195	3	Only the isolation property of transactions is supported	f
1196	0	When an event is published to the distributed log, the order of delivery to the different subscribing applications is predefined	f
1196	1	When two events are published to the distributed log they are delivered to the different subscribing applications in the same order	f
1196	2	The distributed log guarantees that events will be delivered only once	f
1197	1	It allows high scalability because it is possible the implement transactions associated to each one of the aggregates	f
1197	2	It allows high scalability because the only synchronized access is to the \\texttt{ProductId}, so it requires a single contention point	f
1197	3	It does not allow high scalability	f
1198	0	Implementation	f
1198	1	Work assignment	f
1198	2	Decomposition	f
1199	0	Depends mostly on the system's functional requirements	f
1199	2	Should not depend on the skills of the developing team	f
1199	3	None of the above	f
1291	1	Ping-and-echo tactic	f
1200	0	The writing of a tweet is a synchronous process where different users have a consistent view of the sequence of tweets	f
1200	1	A tweet is written in each one of the Twitter's servers	f
1200	3	The tweet content is written in the home timeline of each one of the writer's followers	f
1201	1	Enumerates, for each kind of quality attribute, all the possible types of source of stimulus, stimulus, response, etc	f
1201	2	Can omit some of the elements like, for instance, the environment, if they are not relevant for the general scenario	f
1201	3	Is a very reusable scenario that can be effectively used in many different concrete situations	f
1202	1	This solution allows an "infinite"\\ increase of the number clients by allowing the inclusion of more Request Nodes	f
1202	2	This solution continues to provide service even if a crash occurs in the Data server	f
1202	3	This solution optimizes the performance in terms of the throughput of processed requests	f
1203	0	When a new block is created, the first replica is written in the node where the writer is located, to improve availability	f
1203	2	When a new block is created, the third replica is stored in the same rack than the second replica to improve the performance of reads	f
1203	3	When a read occurs, the client, if it is located in the cluster, receives a list of the DataNodes where the replicas are, ordered by its closeness to the client, to improve performance of reads	f
1204	1	When a new block is created, the second replica is not stored in the same rack than the first replica to increase the availability when a Data Node fails	f
1204	2	When a new block is created, the third replica is stored in the same rack than the second replica to improve the performance of reads	f
1204	3	When a read occurs, the client, if it is located in the cluster, receives a list of the DataNodes where the replicas are, ordered by its closeness to the client, to improve performance of reads	f
1205	0	Depends mostly on the system's functional requirements	f
1205	1	Depends more on the architect's experience than on anything else	f
1205	2	Should not depend on the skills of the developing team	f
1206	0	Describes a concrete quality that a particular system has to implement	f
1206	1	Enumerates, for each kind of quality attribute, all the possible types of source of stimulus, stimulus, response, etc	f
1206	3	Is a very reusable scenario that can be effectively used in many different concrete situations	f
1207	0	The writing of a tweet is a synchronous process where different users have a consistent view of the sequence of tweets	f
1207	1	A tweet is written in each one of the Twitter's servers	f
1207	3	The tweet content is written in the home timeline of each one of the writer's followers	f
1208	0	This solution optimizes the performance in terms of the latency of each request	f
1208	1	This solution allows an "infinite"\\ increase of the number clients by allowing the inclusion of more Request Nodes	f
1208	2	This solution continues to provide service even if a crash occurs in the Data server	f
1209	0	A non-functional requirement a system has to achieve	f
1209	1	How to control the response to one or more stimulus	f
1209	3	A decomposition of the system that fulfills an architectural quality	f
1210	0	This is right because if you don't the project fails	f
1210	2	This is right but you cannot be completely sure whether the decisions are the right ones	f
1210	3	This is wrong because it is against the agile way of thinking the software development process	f
1211	0	The search timeline is the most important business use case for Twitter	f
1211	1	The ingestion process includes tokenizing of the tweet to include in an index	f
1211	3	The write in the Early Bird server is synchronous, only when it finishes does the user receives the feedback of a successful post	f
1212	0	This solution assures a consistency view to the clients of the data that is written	f
1212	2	In this solution the tasks in the queue need to be sequentially processed, only when a task is finished can another start to be processed	f
1212	3	This solution allows the dimensioning of the number of activities (threads or processes) that run in the server, taking into consideration the server's hardware capacity, in order to have a efficient usage of the server's CPU	f
1213	1	The advantage of running the CheckpointNode in a different host is to not degrade the availability of the NameNode during checkpoint construction	f
1213	2	The periodic rebuild of the checkpoint improves the performance of the NameNode during normal operation	f
1213	3	The periodic rebuild of the checkpoint improves the performance of the NameNode during its initialization	f
1214	1	The advantage of running the CheckpointNode in a different host is to not degrade the availability of the NameNode during checkpoint construction	f
1201	0	Describes a concrete quality that a particular system has to implement	t
1205	3	None of the above	t
1214	2	The periodic rebuild of the checkpoint improves the performance of the NameNode during normal operation	f
1214	3	The periodic rebuild of the checkpoint improves the performance of the NameNode during its initialization	f
1215	1	How to control the response to one or more stimulus	f
1215	2	What should be the system response in the occurrence of a stimulus	f
1215	3	A decomposition of the system that fulfills an architectural quality	f
1216	0	The search timeline is the most important business use case for Twitter	f
1216	1	The ingestion process includes tokenizing of the tweet to include in an index	f
1216	3	The write in the Early Bird server is synchronous, only when it finishes does the user receives the feedback of a successful post	f
1217	0	This is right because if you don't the project fails	f
1217	1	This is wrong because you can easily change these decisions during the project lifetime	f
1217	3	This is wrong because it is against the agile way of thinking the software development process	f
1218	0	This solution assures a consistency view to the clients of the data that is written	f
1218	1	In this solution the clients invocations have to be synchronous	f
1218	2	In this solution the tasks in the queue need to be sequentially processed, only when a task is finished can another start to be processed	f
1219	0	Can be applied to any kind stimulus in availability scenarios	f
1219	2	Can guarantee that the system will not become unavailable	f
1219	3	When applied it increases the latency of the availability scenario's response time	f
1220	0	Have high throughput	f
1220	1	Have low latency	f
1220	3	May be easily changed to increase their storage capacity	f
1221	1	When the environment is build time it means that it is necessary to codify a new module that is added by rebuilding the system	f
1221	2	When the environment is initiation time it means that it is necessary to restart the system for the change to effect	f
1221	3	When the environment is runtime the cost of doing the change is higher than in the other environments	f
1222	1	Interoperability	f
1222	2	Availability (Reliability)	f
1222	3	Security	f
1223	0	Performance and availability qualities	f
1223	2	Availability qualities only	f
1223	3	Performance and security qualities	f
1224	1	When the environment is build time it means that it is necessary to codify a new module that is added by rebuilding the system	f
1224	2	When the environment is initiation time it means that it is necessary to restart the system for the change to effect	f
1224	3	When the environment is runtime the cost of doing the change is higher than in the other environments	f
1225	0	Performance	f
1225	1	Interoperability	f
1225	2	Availability (Reliability)	f
1226	0	Performance and availability qualities	f
1226	1	Performance qualities only	f
1226	3	Performance and security qualities	f
1227	0	Can be applied to any kind stimulus in availability scenarios	f
1227	1	Is useful to support scenarios where the stimulus is an omission	f
1227	3	When applied it increases the latency of the availability scenario's response time	f
1228	0	Have high throughput	f
1228	1	Have low latency	f
1228	2	Allow many simultaneous users	f
1229	0	The Ping/Echo tactic	f
1229	1	The Heartbeat tactic	f
1229	3	The Removal from Service tactic	f
1230	0	Manage sampling rate	f
1230	2	Prioritize events	f
1230	3	Bound execution time	f
1231	0	Encapsulate the module such that the clients of the module should not be aware of the remote invocations	f
1231	1	Use an intermediary that contains all the code associated with the remote invocation separating it from the modules' business logic	f
1231	3	Increase the semantic coherence between the business logic code and the remote invocation code	f
1232	0	Usability and Performance	f
1232	2	Performance	f
1232	3	Testability	f
1233	1	The performance of the system would not change	f
1233	2	The system would respond faster to requests about\n      file locations	f
1233	3	The system would respond faster to requests made by\n      DataNodes to update the metadata	f
1234	1	Use an intermediary that contains all the code associated with the remote invocation separating it from the modules' business logic	f
1222	0	Performance	t
1234	2	Refactor the common parts between the business logic and the remote invocation	f
1234	3	Increase the semantic coherence between the business logic code and the remote invocation code	f
1235	1	Usability	f
1235	2	Performance	f
1235	3	Testability	f
1236	0	The system would respond faster to all the\n      clients' requests	f
1236	1	The performance of the system would not change	f
1236	3	The system would respond faster to requests made by\n      DataNodes to update the metadata	f
1237	0	Manage sampling rate	f
1237	1	Limit event response	f
1237	3	Bound execution time	f
1238	0	The Ping/Echo tactic	f
1238	1	The Heartbeat tactic	f
1238	2	The Voting tactic	f
1239	0	Cycles in the uses relation between modules are a good sign, because it indicates that several modules should be tested together	f
1239	2	The uses relation should be applied to the coarse-grained modules, because it allows to identify circular dependences	f
1239	3	There isn't any relation with the layered architectural style because the allowed-to-use relation is more generic	f
1240	0	The layered view to deal with the aspects of portability	f
1240	1	The uses view to show the coupling between the different platforms	f
1240	3	The data model view to represent each one of the platforms	f
1241	1	A module contains the code that can execute in several components and a component executes the code of a single module	f
1241	2	A module contains the code that executes in a single component and a component can execute the code of several modules	f
1241	3	A module contains the code that can execute in several components and a component can execute the code of several modules	f
1242	1	She should define finer-grained modules where she splits the unassigned responsibility	f
1242	2	She should try to use a view of the Aspects style, assign this responsibility to a single module and define where it crosscuts the other modules	f
1242	3	She should try to use a view of the Layered style and assign this responsibility to a module in the bottom layer that can be used by all the other modules	f
1243	0	The view does not address the scenario	f
1243	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement	f
1243	3	The view addresses the scenario because the \\texttt{Consumer Website} module does not use the interfaces a new business partner has to implement	f
1244	1	The uses view to show the coupling between the different platforms	f
1244	2	The uses view to show the uses relationships between the different platforms	f
1244	3	The data model view to represent each one of the platforms	f
1245	0	A module contains the code that executes in a single component and a component executes the code of a single module	f
1245	1	A module contains the code that can execute in several components and a component executes the code of a single module	f
1245	2	A module contains the code that executes in a single component and a component can execute the code of several modules	f
1246	0	Cycles in the uses relation between modules are a good sign, because it indicates that several modules should be tested together	f
1246	1	The project manager uses this view to get advice on the incremental development of the system	f
1246	3	There isn't any relation with the layered architectural style because the allowed-to-use relation is more generic	f
1247	0	The view does not address the scenario	f
1247	1	The view addresses the scenario because it separates the \\texttt{Consumer Website} module from the \\texttt{OpcApp} module	f
1247	3	The view addresses the scenario because the \\texttt{Consumer Website} module does not use the interfaces a new business partner has to implement	f
1248	0	This means that in this software system it is not possible to modularize each responsibility in a cohesive module	f
1248	1	She should define finer-grained modules where she splits the unassigned responsibility	f
1248	2	She should try to use a view of the Aspects style, assign this responsibility to a single module and define where it crosscuts the other modules	f
1249	0	A change to the uses view to represent that friends can use each other catalog	f
1249	1	A change of the layered view to support different presentations, one for each friend	f
1249	3	A new aspect view that includes a module with the responsibilities associated with the access control and that crosscuts some of the other modules	f
1250	0	The correctness of the caller module may not depend on the correct implementation of the invoked function in the called module	f
1250	2	The invoked function may not have any output parameter	f
1250	3	The invoked function may not have both any input parameter nor any output parameter	f
1251	0	The modules inside a layer cannot use other modules in the same layer	f
1251	1	A layer cannot call the layer above	f
1251	3	It is possible to have a circular allowed-to-use relationship between several layers	f
1252	0	It is not necessary to have any view of the Data Model architectural style because Facebook information has a very simple structure	f
1252	2	It is enough to design a view of the Data Model architectural style at the logical level because the information will be stored in a relational database	f
1252	3	It is necessary to design a view of the Data Model architectural style at the physical level to deal with performance and consistency issues of the access to data	f
1253	1	The view addresses the scenario because it separates the \\texttt{Consumer Website} module from the \\texttt{OpcApp} module to allow the execution of the \\texttt{Consumer Website} module in a component that can have multiple copies of computation	f
1253	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement	f
1253	3	The view addresses the scenario because the \\texttt{Consumer Website} module uses the \\texttt{gwt} and \\texttt{waf} modules	f
1254	1	A layer cannot call the layer above	f
1254	2	Each layer defines a virtual machine because it provides a set of cohesive functionalities to the upper layer	f
1254	3	It is possible to have a circular allowed-to-use relationship between several layers	f
1255	1	A change of the layered view to support different presentations, one for each friend	f
1255	2	A change of the decomposition view to include a set of new modules with the responsibilities associated with the access control	f
1255	3	A new aspect view that includes a module with the responsibilities associated with the access control and that crosscuts some of the other modules	f
1256	0	The correctness of the caller module may not depend on the correct implementation of the invoked function in the called module	f
1256	1	The invoked function may not have any input parameter	f
1256	3	The invoked function may not have both any input parameter nor any output parameter	f
1257	0	The view does not address the scenario	f
1257	1	The view addresses the scenario because it separates the \\texttt{Consumer Website} module from the \\texttt{OpcApp} module to allow the execution of the \\texttt{Consumer Website} module in a component that can have multiple copies of computation	f
1257	3	The view addresses the scenario because the \\texttt{Consumer Website} module uses the \\texttt{gwt} and \\texttt{waf} modules	f
1258	0	It is not necessary to have any view of the Data Model architectural style because Facebook information has a very simple structure	f
1258	1	It is enough to design a view of the Data Model architectural style at the conceptual level because Facebook information has a very simple structure	f
1258	2	It is enough to design a view of the Data Model architectural style at the logical level because the information will be stored in a relational database	f
1259	0	Represent the hardware infrastructure that allows components to communicate\n        with each other	f
1259	2	Represent the dependency relations that exist among the various components	f
1259	3	Represent the control flow during an execution of the system	f
1260	0	Peer-to-Peer	f
1260	1	Pipe-and-Filter	f
1260	3	Publish-Subscribe	f
1261	1	Restricts the communication between components because, for instance, a group of components should be located in the same hardware	f
1261	2	Is an extension of the Client-Server architectural style	f
1261	3	Defines tiers as components	f
1262	1	Communicating Processes	f
1262	2	Repository	f
1262	3	Pipes-and-Filters	f
1263	0	Service-oriented architecture, and Client-server	f
1263	2	Service-oriented architecture, Shared-data, and Peer-to-peer	f
1263	3	Service-oriented architecture, Shared-data, Peer-to-peer, and Client-server	f
1264	1	Service-oriented architecture, and Shared-data	f
1264	2	Service-oriented architecture, Shared-data, and Peer-to-peer	f
1264	3	Service-oriented architecture, Shared-data, Peer-to-peer, and Client-server	f
1265	0	Applies layers to tiers	f
1265	1	Restricts the communication between components because, for instance, a group of components should be located in the same hardware	f
1265	2	Is an extension of the Client-Server architectural style	f
1266	0	Represent the hardware infrastructure that allows components to communicate\n        with each other	f
1266	1	May, on another view of the system, be represented by a set of components\n        and connectors	f
1260	2	Client-Server	t
1266	3	Represent the control flow during an execution of the system	f
1267	0	Peer-to-Peer	f
1267	1	Pipe-and-Filter	f
1267	3	Publish-Subscribe	f
1268	0	Client-server	f
1268	1	Communicating Processes	f
1268	2	Repository	f
1269	0	It corresponds to a particular case of a specialization in a generalization view	f
1269	1	It represents a relation between a connector's role and a port of one of its internal components	f
1269	3	It represent a relation between a component's port and a connector's role	f
1270	0	A Module viewtype view	f
1270	2	A Communicating processes view	f
1270	3	A Install view	f
1271	0	A component can subscribe to events	f
1271	1	It is always guaranteed that all the published events are received by their subscribing components	f
1271	3	The set of events types are predefined at initialization time	f
1272	0	Shared-data and Communicating-Processes	f
1272	2	Tiers	f
1272	3	Client-Server and Shared-data	f
1273	1	Tiers, and Shared-data	f
1273	2	Tiers, Shared-data, and Service-oriented architecture	f
1273	3	Tiers, Shared-data, Service-oriented architecture, and Client-server	f
1274	1	Tiers, and Shared-data	f
1274	2	Tiers, Shared-data, and Service-oriented architecture	f
1274	3	Tiers, Shared-data, Service-oriented architecture, and Client-server	f
1275	1	It is always guaranteed that all the published events are received by their subscribing components	f
1275	2	The events should be delivered by the same order they are sent	f
1275	3	The set of events types are predefined at initialization time	f
1276	0	Shared-data and Communicating-Processes	f
1276	1	Communicating-Processes	f
1276	3	Client-Server and Shared-data	f
1277	0	It corresponds to a particular case of a specialization in a generalization view	f
1277	1	It represents a relation between a connector's role and a port of one of its internal components	f
1277	3	It represent a relation between a component's port and a connector's role	f
1278	0	A Module viewtype view	f
1278	1	A Allocation viewtype view	f
1278	2	A Communicating processes view	f
1279	0	A failure.	f
1279	2	A fault.	f
1279	3	An input.	f
1280	0	Stochastic event.	f
1280	1	Overload.	f
1280	3	Throughput.	f
1281	1	Use an intermediary.	f
1281	2	Restrict dependencies.	f
1281	3	Refactor.	f
1282	1	Uses style.	f
1282	2	Generalization style.	f
1282	3	Layered style.	f
1283	0	The Decomposition style.	f
1283	2	The Layered style.	f
1283	3	The Generalization and Decomposition styles.	f
1284	0	Whenever complex connectors are used in architectural views it is necessary to also document their decomposition.	f
1284	1	It is preferable to only design views that do not use complex connectors to increase understandability.	f
1284	3	Whenever possible it should be avoided to use complex connectors because developers have difficult to know how to implement them.	f
1285	0	The Shared Data style.	f
1285	1	The Pipes-and-filters style.	f
1285	2	The Publish-subscribe style.	f
1286	0	This solution optimizes the performance in terms of the latency of each request.	f
1286	2	This solution continues to provide service even if a crash occurs in the Data server.	f
1286	3	This solution optimizes the performance in terms of the throughput of processed requests.	f
1287	1	Aspects.	f
1287	2	Layered.	f
1287	3	Data model.	f
1288	1	Maintain user model.	f
1288	2	Maintain task model.	f
1288	3	Maintain system model.	f
1289	0	This view shows that if is possible to scale differently the \\texttt{web tier} from the \\texttt{EJB tier}.	f
1289	1	This view shows that the \\texttt{Adventure Builder Catalog DB} and the \\texttt{OPC} components should be deployed in the same hardware.	f
1289	3	This view \\textbf{does not} show that the access to the \\texttt{web tier} has some security qualities.	f
1290	1	Maintain multiple copies of data.	f
1290	2	Maintain multiple copies of computation.	f
1290	3	Introduce concurrency.	f
1291	0	Ignore faulty behaviour tactic	f
1291	2	Active redundancy tactic	f
1292	0	Cycles in the uses relation between modules are a good sign, because it indicates that several modules should be tested together.	f
1292	1	The project manager uses this view to get advice on the incremental development of the system.	f
1292	3	There isn't any relation with the layered architectural style because the allowed-to-use relation is more generic.	f
1293	0	When a peer connects to the network it establishes connections with all other peers in the network.	f
1293	1	The behavior described in the sentence can be represented in a view where the dynamic reconfiguration architectural style is used.	f
1293	2	When a peer receives a connection it sends all its files to the peer connecting it.	f
1294	0	Analysing the performance of the system.	f
1294	2	Estimating the effort needed to implement the system.	f
1294	3	Analysing the system's portability and reusability.	f
1295	0	All layers are mapped to the application server component.	f
1295	1	The presentation and domain logic layers are mapped to the application server component and the data access layer to the repository component.	f
1295	2	The presentation layer is mapped to the browser component and the other two layers are mapped to the application server component.	f
1296	0	Incorporate in the organization's core business the goals of a software house.	f
1296	1	Do in-house development.	f
1296	2	Integrate the development of the software system with the organization's business goals.	f
1297	0	An aggregate can contain a large number of instances.	f
1297	1	An aggregate is usually loaded in its entirety from the database.	f
1297	3	An aggregate is cluster of domain classes.	f
1298	0	Each service can be developed and deployed independently	f
1298	1	Easier to scale development	f
1298	3	Testing is easier	f
1299	1	It is preferable to only design views that do not use complex connectors to increase understandability.	f
1299	2	If there is some technology available that implements the complex connectors it is not necessary to document their decomposition.	f
1299	3	Whenever possible it should be avoided to use complex connectors because developers have difficult to know how to implement them.	f
1300	0	The Shared Data style.	f
1300	1	The Pipes-and-filters style.	f
1300	2	The Publish-subscribe style.	f
1301	0	Decomposition.	f
1301	1	Aspects.	f
1301	3	Data model.	f
1302	0	This solution optimizes the performance in terms of the latency of each request.	f
1302	1	This solution allows an "infinite"\\ increase of the number clients by allowing the inclusion of more Request Nodes.	f
1302	3	This solution optimizes the performance in terms of the throughput of processed requests.	f
1303	0	Incorporate in the organization's core business the goals of a software house.	f
1303	1	Do in-house development.	f
1303	2	Integrate the development of the software system with the organization's business goals.	f
1304	1	An error.	f
1304	2	A fault.	f
1304	3	An input.	f
1305	0	Stochastic event.	f
1305	2	Change level of service.	f
1305	3	Throughput.	f
1306	0	Split module.	f
1306	1	Use an intermediary.	f
1306	2	Restrict dependencies.	f
1307	0	Decomposition style.	f
1307	1	Uses style.	f
1307	2	Generalization style.	f
1308	0	The Decomposition style.	f
1308	1	The Decomposition and Uses styles.	f
1308	2	The Layered style.	f
1309	0	An aggregate can contain a large number of instances.	f
1309	1	An aggregate is usually loaded in its entirety from the database.	f
1309	3	An aggregate is cluster of domain classes.	f
1310	1	Easier to scale development	f
1310	2	Eliminates any long-term commitment to a technology stack	f
1310	3	Testing is easier	f
1311	1	Maintain user model.	f
1311	2	Maintain task model.	f
1311	3	Maintain system model.	f
1312	1	This view shows that the \\texttt{Adventure Builder Catalog DB} and the \\texttt{OPC} components should be deployed in the same hardware.	f
1291	3	Retry tactic	t
1301	2	Layered.	t
1302	2	This solution continues to provide service even if a crash occurs in the Data server.	t
1303	3	Reimplement all the information systems of the organization	t
1304	0	A failure.	t
1305	1	Overload.	t
1306	3	Refactor.	t
1307	3	Layered style.	t
1308	3	The Generalization and Decomposition styles.	t
1309	2	An aggregate has runtime references to other aggregates.	t
1310	0	Each service can be developed and deployed independently	t
1311	0	Aggregate.	t
1312	0	This view shows that if is possible to scale differently the \\texttt{web tier} from the \\texttt{EJB tier}.	t
1333	2	This view shows that bank debits are done asynchronously.	t
1312	2	This view \\textbf{does not} show that the \\texttt{Adventure Builder Catalog DB} and the \\texttt{OPC} components can execute behind a firewall.	f
1312	3	This view \\textbf{does not} show that the access to the \\texttt{web tier} has some security qualities.	f
1313	0	Pipe-and-filter.	f
1313	2	Maintain multiple copies of computation.	f
1313	3	Introduce concurrency.	f
1314	0	Ignore faulty behaviour tactic	f
1314	2	Active redundancy tactic	f
1314	3	Retry tactic	f
1315	0	Cycles in the uses relation between modules are a good sign, because it indicates that several modules should be tested together.	f
1315	2	The uses relation should be applied to the coarse-grained modules, because it allows to identify circular dependences.	f
1315	3	There isn't any relation with the layered architectural style because the allowed-to-use relation is more generic.	f
1316	0	When a peer connects to the network it establishes connections with all other peers in the network.	f
1316	1	The behavior described in the sentence can be represented in a view where the dynamic reconfiguration architectural style is used.	f
1316	3	The behavior described in the sentence can be represented in a view where the tier architectural style is used.	f
1317	1	Planning incremental releases of the system.	f
1317	2	Estimating the effort needed to implement the system.	f
1317	3	Analysing the system's portability and reusability.	f
1318	0	All layers are mapped to the application server component.	f
1318	2	The presentation layer is mapped to the browser component and the other two layers are mapped to the application server component.	f
1318	3	All layers are mapped to the browser component where the data access layer will contains, besides a module to access a local repository, modules to access external services.	f
1319	0	Increase competence set.	f
1319	1	Shadow.	f
1319	3	Ignore faulty behavior.	f
1320	0	Increase resources.	f
1320	2	Bound queue sizes.	f
1320	3	Introduce concurrency.	f
1321	0	When the modification should occur.	f
1321	1	The features that will be implemented.	f
1321	3	Defer binding.	f
1322	0	The decomposition view to include a module for the synchronization responsibilities	f
1322	2	The layered view to include a layer for each type of device	f
1322	3	The domain layer of the layered style to represent the types of devices	f
1323	1	The \\emph{main} module is used in the implementation of all components.	f
1323	2	The connectors only use the \\emph{stdio} module for their implementation.	f
1323	3	The \\emph{Split} component uses the \\emph{to\\_lower} module for its implementation	f
1324	1	Abstract common services.	f
1324	2	Restrict dependencies.	f
1324	3	Encapsulation.	f
1325	0	Peer-to-Peer.	f
1325	1	Pipe-and-Filter.	f
1325	2	Client-Server.	f
1326	0	Performance.	f
1326	1	Availability for incorrect responses from the Image File Storage component.	f
1326	3	Performance and Availability for incorrect responses from the Image File Storage component.	f
1327	1	Usability.	f
1327	2	Performance.	f
1327	3	Modifiability.	f
1328	0	It assigns components and connectors to people and teams.	f
1328	1	It is useful for the project managers.	f
1328	2	It does not consider the software that is outsourced.	f
1329	0	One.	f
1329	1	Two.	f
1329	3	Four.	f
1330	1	That the integration of a new source will not have any impact on the other modules of the Catalog of DVDs.	f
1330	2	That the impact of integrating a new source is controlled by the interface of \\emph{Import DVD Info} Module.	f
1330	3	That the modification can occur at runtime.	f
1331	0	It is not necessary to have any view of the Data Model architectural style because Facebook information has a very simple structure.	f
1331	1	It is enough to design a view of the Data Model architectural style at the conceptual level because Facebook information has a very simple structure.	f
1331	2	It is enough to design a view of the Data Model architectural style at the logical level because the information will be stored in a relational database.	f
1332	0	The Decomposition style.	f
1332	2	The Service Oriented Architecture style.	f
1332	3	The Communicating Processes style.	f
1333	0	This view shows that the processing of orders is done synchronously.	f
1333	1	This view shows that the processing of tracking requests is done synchronously.	f
1333	3	This view shows that the responses from the providers are processed synchronously.	f
1334	1	Shared-data and publish-subscribe.	f
1334	2	Pipe-and-filter and publish-subscribe.	f
1334	3	Pipe-and-filter and shared-data.	f
1335	0	Guarantees that the redundant data in the client and the server is always synchronized.	f
1335	1	Implements an event bus that allows the server to inform the client about new order recommendations.	f
1335	3	It completely hides the server faults from the Pad user.	f
1336	0	Results from a utility tree for performance.	f
1336	1	Results from a single availability scenario.	f
1336	2	Results from the application of a single ADD iteration.	f
1337	0	It would reduce the scalability for updates of different orders for the same customer.	f
1337	1	Two users would conflict if they attempt to edit different orders for the same customer.	f
1337	3	All the above.	f
1338	0	We do not need a view of the module viewtype because it is about the runtime properties of the system.	f
1338	1	We do not need a view of the allocation viewtype because deployment is automated.	f
1338	2	The component-and-connector view should emphasize the performance qualities of systems following the microservices architecture.	f
1339	1	Two users would conflict if they attempt to edit different orders for the same customer.	f
1339	2	As the number of orders grows it will be increasingly expensive to load the aggregate.	f
1339	3	All the above.	f
1340	1	Shadow.	f
1340	2	Voting.	f
1340	3	Ignore faulty behavior.	f
1341	0	Increase resources.	f
1341	1	Reduce overhead.	f
1341	3	Introduce concurrency.	f
1342	0	We do not need a view of the module viewtype because it is about the runtime properties of the system.	f
1342	1	We do not need a view of the allocation viewtype because deployment is automated.	f
1342	3	It is necessary to use views of the three viewtypes.	f
1343	0	When the modification should occur.	f
1343	1	The features that will be implemented.	f
1343	2	The new defects introduced.	f
1344	0	The decomposition view to include a module for the synchronization responsibilities	f
1344	1	The uses view to represent how the mobile device uses the Catalog application	f
1344	2	The layered view to include a layer for each type of device	f
1345	0	Usability and Performance.	f
1345	2	Performance.	f
1345	3	Modifiability.	f
1346	0	It assigns components and connectors to people and teams.	f
1346	1	It is useful for the project managers.	f
1346	2	It does not consider the software that is outsourced.	f
1347	1	Availability for incorrect responses from the Image File Storage component.	f
1347	2	Performance and Availability for crashes of the Image File Storage component.	f
1347	3	Performance and Availability for incorrect responses from the Image File Storage component.	f
1348	0	One.	f
1348	1	Two.	f
1348	2	Three.	f
1349	0	The cost of the modification.	f
1349	2	That the impact of integrating a new source is controlled by the interface of \\emph{Import DVD Info} Module.	f
1349	3	That the modification can occur at runtime.	f
1350	0	It is not necessary to have any view of the Data Model architectural style because Facebook information has a very simple structure.	f
1350	1	It is enough to design a view of the Data Model architectural style at the conceptual level because Facebook information has a very simple structure.	f
1350	3	It is necessary to design a view of the Data Model architectural style at the physical level to deal with performance and consistency issues of the access to data.	f
1351	1	The Client-Server style.	f
1351	2	The Service Oriented Architecture style.	f
1351	3	The Communicating Processes style.	f
1352	0	This view shows that the processing of orders is done synchronously.	f
1352	2	This view shows that bank debits are done asynchronously.	f
1352	3	This view shows that the responses from the providers are processed synchronously.	f
1353	1	Results from a single availability scenario.	f
1353	2	Results from the application of a single ADD iteration.	f
1353	3	Results from the application of several ADD iterations.	f
1354	1	Shared-data and publish-subscribe.	f
1354	2	Pipe-and-filter and publish-subscribe.	f
1354	3	Pipe-and-filter and shared-data.	f
1355	0	Guarantees that the redundant data in the client and the server is always synchronized.	f
1355	1	Implements an event bus that allows the server to inform the client about new order recommendations.	f
1355	2	Do not loose the changes done on the client component if the server is not available.	f
1356	0	Split module.	f
1356	2	Restrict dependencies.	f
1356	3	Encapsulation.	f
1357	0	Peer-to-Peer.	f
1357	2	Client-Server.	f
1357	3	Publish-Subscribe.	f
1358	1	The \\emph{main} module is used in the implementation of all components.	f
1358	2	The connectors only use the \\emph{stdio} module for their implementation.	f
1358	3	The \\emph{Split} component uses the \\emph{to\\_lower} module for its implementation	f
1359	0	Availability whenever the server running the tasks crashes, the tasks are restarted and eventually finished	f
1359	2	Performance of the services being executed by the clients, they can execute other actions while waiting for the response	f
1359	3	Simple programming model, the clients only need to concern about the business logic of the application, the remote services are transparent	f
1360	0	The result of decisions that are made at the "upper floors" of the organization	f
1360	1	The sole decision of an architect	f
1360	3	A set of software elements and their relations	f
1361	1	Technical	f
1361	2	Project	f
1361	3	Professional	f
1362	1	Scalability of the Image File Storage in terms of the storage capacity	f
1362	2	Availability of the Image File Storage, whenever the Image File Storage component crashes	f
1362	3	Performance of the Image Write Service	f
1363	0	The source of stimulus is the FenixEDU system	f
1363	2	The environment is overloaded	f
1363	3	The measure of the response is throughput	f
1364	1	The sole decision of an architect	f
1364	2	A common understanding to be achieve among all the system stakeholders	f
1364	3	A set of software elements and their relations	f
1365	0	The source of stimulus is the FenixEDU system	f
1365	1	The stimulus is periodic	f
1365	2	The environment is overloaded	f
1366	0	Commercial	f
1366	1	Technical	f
1366	3	Professional	f
1367	0	Availability of the Image Write Service, whenever one of the Image Write Service components crashes	f
1367	1	Scalability of the Image File Storage in terms of the storage capacity	f
1367	3	Performance of the Image Write Service	f
1368	0	Availability whenever the server running the tasks crashes, the tasks are restarted and eventually finished	f
1368	1	Performance of the tasks execution, scheduling of tasks can be optimized for the particular context of the system	f
1368	2	Performance of the services being executed by the clients, they can execute other actions while waiting for the response	f
1369	0	Interoperability is a quality that as lower priority than performance	f
1369	1	Scalability should be the quality to be achieved first by any architecture	f
1369	3	None of the above	f
1370	0	Performance	f
1370	2	Modifiability	f
1370	3	Time to market	f
1371	0	The number of Image Write Service components should be the same of the number Image Retrieval Service components	f
1371	1	The hardware where of Image Write Service components execute should have the same capabilities of the hardware where Image Retrieval Service components run	f
1371	3	The separation of write and retrieval services allows them do scale independently	f
1372	0	The synchronous solution requires less memory than asynchronous solution	f
1372	2	In the synchronous solution a task can be associated, during its execution, with different execution entities, e.g. thread	f
1372	3	In the asynchronous solution a task is always associated, during its execution, with the same execution entity, e.g. thread	f
1373	1	Limit event response	f
1373	2	Maintain multiple copies of data	f
1373	3	Schedule resources	f
1374	1	The asynchronous solution can support a larger number of simultaneous requests	f
1374	2	In the synchronous solution a task can be associated, during its execution, with different execution entities, e.g. thread	f
1452	1	Native applications provide better modifiability qualities.	t
1374	3	In the asynchronous solution a task is always associated, during its execution, with the same execution entity, e.g. thread	f
1375	1	Scalability should be the quality to be achieved first by any architecture	f
1375	2	That the use of XML technology for interoperability is not a correct decision	f
1375	3	None of the above	f
1376	0	Performance	f
1376	1	Availability	f
1376	3	Time to market	f
1377	0	The number of Image Write Service components should be the same of the number Image Retrieval Service components	f
1377	1	The hardware where of Image Write Service components execute should have the same capabilities of the hardware where Image Retrieval Service components run	f
1377	3	The separation of write and retrieval services allows them do scale independently	f
1378	0	Introduce concurrency	f
1378	1	Limit event response	f
1378	2	Maintain multiple copies of data	f
1379	0	Provides the quality of availability	f
1379	2	Provides the quality of modifiability	f
1379	3	Does not provide any additional quality	f
1380	0	The need to use a two-phase commit protocol	f
1380	1	The need to have a tight integration of the development teams	f
1380	3	The need to deploy all the microservices simultaneously	f
1381	1	Reduction of cost is the most important impact of cloud computing in an architecture	f
1381	2	Cloud computing has impact on the business but it is not an architectural aspect	f
1381	3	Using cloud computing we cannot delay some architectural decisions	f
1382	1	In the asynchronous solution the tasks that are being executed are lost and they have to be resubmitted by the client	f
1382	2	In the asynchronous solution it is possible to provide an implement where the tasks being executed are finished without requiring the client to resubmitted them	f
1382	3	In the synchronous solution the tasks being executed are finished without requiring the client to resubmitted them	f
1383	0	Manage sampling rate	f
1383	2	Maintain multiple copies of computation	f
1383	3	Increase resource efficiency	f
1384	1	In the asynchronous solution the tasks that are being executed are lost and they have to be resubmitted by the client	f
1384	2	In the asynchronous solution it is possible to provide an implement where the tasks being executed are finished without requiring the client to resubmitted them	f
1384	3	In the synchronous solution the tasks being executed are finished without requiring the client to resubmitted them	f
1385	0	Provides the quality of availability	f
1385	1	Provides the quality of performance	f
1385	2	Provides the quality of modifiability	f
1386	0	The need to use a two-phase commit protocol	f
1386	1	The need to have a tight integration of the development teams	f
1386	3	The need to deploy all the microservices simultaneously	f
1387	0	Manage sampling rate	f
1387	1	Bound execution times	f
1387	3	Increase resource efficiency	f
1388	0	Time to market is the most important impact of cloud computing in an architecture	f
1388	1	Reduction of cost is the most important impact of cloud computing in an architecture	f
1388	2	Cloud computing has impact on the business but it is not an architectural aspect	f
1389	0	Ping/Echo.	f
1389	1	Retry.	f
1389	3	Passive Redundancy.	f
1390	0	Has as main goal the reduction of the modules' size.	f
1390	2	Increases the cohesion between the two modules.	f
1390	3	May conflict with the Reduce Overhead performance tactic.	f
1391	0	Results from a utility tree for performance.	f
1391	1	Results from a single availability scenario.	f
1391	3	Results from the application of several ADD iterations.	f
1392	0	Its main goal is to establish the reusability qualities of the architecture.	f
1392	2	Views of this type are mostly useful to guide the testing of the system.	f
1392	3	There should be at least one view of the system using this architectural style.	f
1393	1	System Model tactics.	f
1393	2	performance tactics.	f
1393	3	User Model tactics.	f
1394	1	Project managers are not interested in views that use this style because it lacks the necessary level of detail.	f
1394	2	Views of this type are mostly useful to guide the testing of the system.	f
1394	3	There should be at least one view of the system using this architectural style.	f
1395	1	System Model tactics.	f
1395	2	performance tactics.	f
1395	3	User Model tactics.	f
1396	0	Ping/Echo.	f
1396	1	Retry.	f
1396	3	Passive Redundancy.	f
1397	0	Has as main goal the reduction of the modules' size.	f
1397	1	Results in the creation of a third module that makes the original modules independent.	f
1397	3	May conflict with the Reduce Overhead performance tactic.	f
1398	0	Results from a utility tree for performance.	f
1398	1	Results from a single availability scenario.	f
1398	2	Results from the application of a single ADD iteration.	f
1399	0	Programming, if the components execute modules developed by different teams.	f
1399	2	Operating Systems, if redundant components execute on top of different operating systems..	f
1399	3	All the previous options.	f
1400	0	This is a performance scenario and the measure of the response is 10 minutes latency.	f
1400	1	This is a modifiability scenario which has a defer binding tactic.	f
1400	3	This is a modifiability scenario and its environment design time.	f
1401	1	This ASR requires a specific architectural design because it profoundly affects the architecture.	f
1401	2	The cost of meeting the ASR after development starts is too high.	f
1401	3	Any ASR that has a high business value cannot have a low architecture impact because it needs to be supported by the architecture.	f
1402	1	Is applied at the begin of the architectural design process but may be necessary to redo it later.	f
1402	2	Is mostly driven by the security attribute quality.	f
1402	3	Follows a bottom-up decomposition process of the system.	f
1403	0	Performance.	f
1403	2	Availability.	f
1403	3	Security.	f
1404	1	Interoperability.	f
1404	2	Availability.	f
1404	3	Security.	f
1405	0	Programming, if the components execute modules developed by different teams.	f
1405	1	Hardware, if there is hardware redundancy.	f
1405	2	Operating Systems, if redundant components execute on top of different operating systems..	f
1406	0	This ASR can easily be supported by the architecture because it has little effect in the architecture.	f
1406	1	This ASR requires a specific architectural design because it profoundly affects the architecture.	f
1406	3	Any ASR that has a high business value cannot have a low architecture impact because it needs to be supported by the architecture.	f
1407	0	This is a performance scenario and the measure of the response is 10 minutes latency.	f
1407	1	This is a modifiability scenario which has a defer binding tactic.	f
1407	3	This is a modifiability scenario and its environment design time.	f
1408	0	Is applied only once at the beginning of the architectural design process.	f
1408	1	Is applied at the begin of the architectural design process but may be necessary to redo it later.	f
1408	2	Is mostly driven by the security attribute quality.	f
1409	0	Prevent a fault in hardware.	f
1409	1	Prevent a fault in software.	f
1409	3	Detect a fault.	f
1410	0	A low cost of change may imply a high cost of development.	f
1410	2	There is no relation between the cost of change and the cost of development.	f
1410	3	The cost of change is higher if it occurs at runtime.	f
1411	0	Is driven by functional requirements.	f
1411	1	Is done in a single step, after all the tactics were identified.	f
1411	3	Is an iterative process where architectural designs are proposed as hypothesis and tested.	f
1412	0	Each view contains a single architectural style.	f
1412	2	A view may not contain any architectural style.	f
1412	3	None of the above.	f
1413	1	The quality addressed is performance and a limit event response is required to solve the problem.	f
1413	2	The quality addressed is availability and a voting design tactic is required to solve the problem.	f
1413	3	The quality addressed is performance and a maintain multiple copies of data design tactic is required to solve the problem.	f
1414	1	Is done in a single step, after all the tactics were identified.	f
1414	2	Is a top-down process where a initial decomposition is chosen and it is successively decomposed without changing the initial decisions.	f
130	3	Active Redundancy	t
1401	0	This ASR can easily be supported by the architecture because it has little effect in the architecture.	t
1402	0	Is applied only once at the beginning of the architectural design process.	t
1403	1	Interoperability.	t
1404	0	Performance.	t
1405	3	All the previous options.	t
1408	3	Follows a bottom-up decomposition process of the system.	t
1414	3	Is an iterative process where architectural designs are proposed as hypothesis and tested.	f
1415	1	Views need to contain more than one architectural style.	f
1415	2	A view may not contain any architectural style.	f
1415	3	None of the above.	f
1416	0	The quality addressed is availability and transactions tactic is required to solve the problem.	f
1416	1	The quality addressed is performance and a limit event response is required to solve the problem.	f
1416	3	The quality addressed is performance and a maintain multiple copies of data design tactic is required to solve the problem.	f
1417	0	Prevent a fault in hardware.	f
1417	1	Prevent a fault in software.	f
1417	3	Detect a fault.	f
1418	0	A low cost of change may imply a high cost of development.	f
1418	1	A low cost of change implies a low cost of development, because changing the code is part of development.	f
1418	2	There is no relation between the cost of change and the cost of development.	f
1419	0	The Aspects style.	f
1419	2	The Decomposition style.	f
1419	3	The Shared-data style.	f
1420	0	Service-oriented architecture, and Client-server.	f
1420	1	Service-oriented architecture, and Shared-data.	f
1420	3	Service-oriented architecture, Shared-data, Client-server and Peer-to-peer.	f
1421	1	The view addresses the scenario because it separates the \\texttt{Consumer Website} module from the \\texttt{OpcApp} module.	f
1421	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement.	f
1421	3	The view addresses the scenario because the \\texttt{Consumer Website} module does not use the interfaces a new business partner has to implement.	f
1422	1	It represents a relation between a connector's role and a port of one of its internal components.	f
1422	2	It represents a relation between a component's port and a port of one of its internal components.	f
1422	3	It represents a relation between a component's port and a connector's role.	f
1423	0	But when the filters are executed sequentially the composition power is reduced.	f
1423	2	But the size of buffers may reduce the composition power.	f
1423	3	And filters do not have to agree on the data formats.	f
1424	1	Service-oriented architecture, and Shared-data.	f
1424	2	Service-oriented architecture, Shared-data, and Client-server.	f
1424	3	Service-oriented architecture, Shared-data, Client-server and Peer-to-peer.	f
1425	0	The Aspects style.	f
1425	1	The Generalisation style.	f
1425	2	The Decomposition style.	f
1426	0	It corresponds to a particular case of a specialization in a generalization view.	f
1426	1	It represents a relation between a connector's role and a port of one of its internal components.	f
1426	3	It represents a relation between a component's port and a connector's role.	f
1427	0	But when the filters are executed sequentially the composition power is reduced.	f
1427	1	Which improves modifiability, because filters are decoupled through pipes.	f
1427	3	And filters do not have to agree on the data formats.	f
1428	0	The view does not address the scenario	f
1428	1	The view addresses the scenario because it separates the \\texttt{Consumer Website} module from the \\texttt{OpcApp} module.	f
1428	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement.	f
1429	0	A component can subscribe to events.	f
1429	1	All the published events are received by their subscribing components.	f
1429	3	The set of events types are predefined at initialization time.	f
1430	0	If the OPC crashes the Consumer Website can continue to provide service in degraded mode.	f
1430	2	If the Adventure Catalog BD crashes the Consumer Website can continue to present the Adventure Builder offers.	f
1430	3	If a Bank component is not available the OPC cannot continue to provide service.	f
1431	0	The view does not address the scenario.	f
1431	1	The view addresses the scenario because it separates the \\texttt{Consumer Website} module from the \\texttt{OpcApp} module to allow the execution of the \\texttt{Consumer Website} module in a component that can have multiple copies of computation.	f
1431	3	The view addresses the scenario because the \\texttt{Consumer Website} module uses the \\texttt{gwt} and \\texttt{waf} modules.	f
1432	0	The type of a connector does not depend on the type of its roles.	f
1452	2	HTML5 provides better usability qualities.	f
1432	2	The attachment is a runtime relation which dynamically manages type compliance.	f
1432	3	The attachment between components and connectors only depends on their ports and roles types.	f
1433	1	The Generalisation style.	f
1433	2	The Uses style.	f
1433	3	The Aspects style.	f
1434	1	If the OPC crashes the Consumer Website can continue to provide service in normal mode.	f
1434	2	If the Adventure Catalog BD crashes the Consumer Website can continue to present the Adventure Builder offers.	f
1434	3	If a Bank component is not available the OPC cannot continue to provide service.	f
1435	1	All the published events are received by their subscribing components.	f
1435	2	The events should be received by the same order they are sent.	f
1435	3	The set of events types are predefined at initialization time.	f
1436	0	The Decomposition style.	f
1436	1	The Generalisation style.	f
1436	3	The Aspects style.	f
1437	0	The view does not address the scenario.	f
1437	1	The view addresses the scenario because it separates the \\texttt{Consumer Website} module from the \\texttt{OpcApp} module to allow the execution of the \\texttt{Consumer Website} module in a component that can have multiple copies of computation.	f
1437	3	The view addresses the scenario because the \\texttt{Consumer Website} module uses the \\texttt{gwt} and \\texttt{waf} modules.	f
1438	0	The type of a connector does not depend on the type of its roles.	f
1438	1	Components of different types may have ports of the same type.	f
1438	2	The attachment is a runtime relation which dynamically manages type compliance.	f
1439	0	Layer 1.	f
1439	2	In a layered architecture all layers are equally modifiable.	f
1439	3	Modifiability is not made easier by a layered architecture.	f
1440	0	Client-server.	f
1440	1	Publish-subscribe.	f
1440	3	Peer-to-peer.	f
1441	1	The view addresses the scenario because the uses relation between the \\texttt{Consumer Website} module and the \\texttt{OpcApp} module has the require properties.	f
1441	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement.	f
1441	3	The view addresses the scenario because the \\texttt{Consumer Website} module uses the \\texttt{gwt} and \\texttt{waf} modules.	f
1442	1	Availability and Performance.	f
1442	2	Testability and Modifiability.	f
1442	3	Maintainability and Availability.	f
1443	0	The file transfer has to follow the same path of nodes used to identify where the file was located.	f
1443	2	If a peer providing a file crashes the file will not be downloaded.	f
1443	3	The price for high scalability and availability is the need to have several replicas of the files to be shared.	f
1444	1	Publish-subscribe.	f
1444	2	Shared-data.	f
1444	3	Peer-to-peer.	f
1445	0	Layer 1.	f
1445	1	Layer 4.	f
1445	2	In a layered architecture all layers are equally modifiable.	f
1446	0	The view does not address the scenario	f
1446	1	The view addresses the scenario because the uses relation between the \\texttt{Consumer Website} module and the \\texttt{OpcApp} module has the require properties.	f
1446	3	The view addresses the scenario because the \\texttt{Consumer Website} module uses the \\texttt{gwt} and \\texttt{waf} modules.	f
1447	0	The file transfer has to follow the same path of nodes used to identify where the file was located.	f
1447	1	The peer initiating the request for a file needs to know where the file is located.	f
1447	3	The price for high scalability and availability is the need to have several replicas of the files to be shared.	f
1448	0	Modifiability.	f
1448	1	Availability and Performance.	f
1448	2	Testability and Modifiability.	f
1449	0	Applies layers to tiers.	f
1449	1	Restricts the communication between components because, for instance, a group of components should be located in the same hardware.	f
1449	3	Defines tiers as components.	f
1450	0	The decomposition was driven by a defer binding tactic.	f
1450	2	The decomposition was driven by a split module tactic.	f
1450	3	The decomposition was driven by a quality that is supported by an encapsulate tactic.	f
1451	0	A performance scenario associated with the throughput of writing data points to disk.	f
1451	1	A performance scenario associated with the latency of writing data points to disk.	f
1451	3	A usability scenario.	f
1452	0	HTML5 provides better portability qualities.	f
1439	1	Layer 4.	t
1452	3	Native applications provide better support for working offline.	f
1453	1	Simplifies the query operations in  the event store.	f
1453	2	Allows the querying of a past state.	f
1453	3	Provides a programming model developers are familiar with.	f
1454	1	A performance scenario associated with the latency of writing data points to disk.	f
1454	2	An availability scenario associated with a fault in the \\emph{Carbon} component.	f
1454	3	A usability scenario.	f
1455	1	Simplifies the query operations in  the event store.	f
1455	2	Allows the querying of a past state.	f
1455	3	Provides a programming model developers are familiar with.	f
1456	0	Applies layers to tiers.	f
1456	1	Restricts the communication between components because, for instance, a group of components should be located in the same hardware.	f
1456	3	Defines tiers as components.	f
1457	0	The decomposition was driven by a defer binding tactic.	f
1457	1	The decomposition was driven by a quality that is supported by a restrict dependencies tactic.	f
1457	3	The decomposition was driven by a quality that is supported by an encapsulate tactic.	f
1458	0	HTML5 provides better portability qualities.	f
1458	1	Native applications provide better modifiability qualities.	f
1458	2	HTML5 provides better usability qualities.	f
1459	0	Dynamic Reconfiguration.	f
1459	2	Communicating Processes.	f
1459	3	Install.	f
1460	0	The view illustrates the achievement of a security scenario.	f
1460	1	The view illustrates the achievement of a performance scenario.	f
1460	3	The view results from the implementation of a support system initiative tactic.	f
1461	1	A usability scenario of the \\emph{Graphite} system.	f
1461	2	A performance scenario of the \\emph{Graphite} system.	f
1461	3	An availability scenario of the \\emph{Graphite} system.	f
1462	1	Web pages are explicitly cached on the browser to optimize accesses.	f
1462	2	A request for a web page corresponds to requesting a service from the amazon cloud.	f
1462	3	It is possible to customize the number of threads that run in the mobile device.	f
1463	0	She should decide to use a microservices architecture to improve the scalability of the system.	f
1463	2	She should try to split the system in parts in order to isolate the complex business logic and use the two architectural approaches accordingly.	f
1463	3	She should give up because it is not possible to have the two approaches in a singe architecture.	f
1464	1	A usability scenario of the \\emph{Graphite} system.	f
1464	2	A performance scenario of the \\emph{Graphite} system.	f
1464	3	An availability scenario of the \\emph{Graphite} system.	f
1465	0	A request for a web page corresponds to a peer-to-peer interaction between all the web components containing the resources.	f
1465	1	Web pages are explicitly cached on the browser to optimize accesses.	f
1465	2	A request for a web page corresponds to requesting a service from the amazon cloud.	f
1466	0	She should decide to use a microservices architecture to improve the scalability of the system.	f
1466	1	She should decide to use a modular monolith architecture to reduce the cost of development, because developers will not need to define intermediate states for the transactional execution of the business logic.	f
1466	3	She should give up because it is not possible to have the two approaches in a singe architecture.	f
1467	0	Dynamic Reconfiguration.	f
1467	1	Tiers.	f
1467	3	Install.	f
1468	0	The view illustrates the achievement of a security scenario.	f
1468	1	The view illustrates the achievement of a performance scenario.	f
1468	2	The view results from the implementation of a support user initiative tactic.	f
1469	0	A deployment view.	f
1469	1	A work assignment view.	f
1469	3	A install view.	f
1470	0	This generalization was driven by a split module tactic.	f
1470	2	This view fulfills a modifiability scenario, which states about the cost of adding a new source of information to the system.	f
1470	3	This view fulfills a modifiability scenario, which states that it should be easy to support the system in new software platforms, e.g. \\emph{Windows} or \\emph{OS X} .	f
1471	0	A modifiability scenario the \\emph{Graphite} system.	f
1471	1	A usability scenario of the \\emph{Graphite} system.	f
1471	3	At least two performance scenarios of the \\emph{Graphite} system.	f
1472	0	Performance was traded for easy of development to reduce the overall development costs.	f
1472	2	Performance was traded for the availability quality.	f
1472	3	An incremental development was followed, which allowed to have the system in production without being necessary to export all the information to the mainframe.	f
1473	1	Does not support independent scalability according to the type of operation.	f
1473	2	Reads may not be consistent with the most recent write.	f
1473	3	Querying the event sourcing becomes more complex.	f
1474	1	An iterative development was followed, which allowed more time to develop a connector with good performance in the latter stages of the project.	f
1474	2	Performance was traded for the availability quality.	f
1474	3	An incremental development was followed, which allowed to have the system in production without being necessary to export all the information to the mainframe.	f
1475	1	A work assignment view.	f
1475	2	A deployment and a work assignment view.	f
1475	3	A install view.	f
1476	0	This generalization was driven by a split module tactic.	f
1476	1	This view fulfills an availability scenario, which defines the expected behavior whenever an external source is not available.	f
1476	3	This view fulfills a modifiability scenario, which states that it should be easy to support the system in new software platforms, e.g. \\emph{Windows} or \\emph{OS X} .	f
1477	0	A modifiability scenario the \\emph{Graphite} system.	f
1477	1	A usability scenario of the \\emph{Graphite} system.	f
1477	3	At least two performance scenarios of the \\emph{Graphite} system.	f
1478	0	Does not allow optimizations according to the type of query.	f
1478	1	Does not support independent scalability according to the type of operation.	f
1478	2	Reads may not be consistent with the most recent write.	f
1	2	You may need to use views of the three viewtypes	t
2	1	Should be captured in scenarios, as the requirements for\n   quality attributes, and be taken into account in the design of the\n   software architecture	t
3	0	The \\emph{decomposition} and \\emph{uses} styles, which\n    allow us to show how dependent a certain module is of other parts\n    of the system	t
4	3	To replace the machine used to run the server component by\n    a more powerful machine that meets the new performance\n    requirements, keeping only a server component running	t
5	3	Even though each viewtype addresses different aspects of a\n    system, there are relationships among all of them	t
6	0	Layer 1	t
7	3	Is useful even if the implementation is concluded and the\n    system has entered the maintenance phase	t
8	2	A subset of the requirements that correspond to the \n     most important business goals, regardless of whether they have\n     conflicts among them or not	t
9	0	The \\emph{Peer-to-Peer} style	t
10	3	The \\emph{Shared data} style	t
11	3	This change manifests itself on the relationship between\n     the system's modules and components	t
12	0	The \\emph{Communicating Processes} style	t
13	2	\\emph{Decomposition} and \\emph{Implementation} views	t
14	1	\\emph{Decomposition} and \\emph{Uses} views	t
15	2	The \\emph{Layers} style	t
16	3	the \\emph{Deployment} and \\emph{Layers} styles	t
17	1	Views of the Module viewtype	t
18	0	To control and to reduce the interface exposed by the\n    domain logic layer, thereby increasing the modifiability of that\n    layer	t
19	3	To keep a record of changes made to the data during\n     a business transaction and to coordinate the writing of these\n     changes to the database	t
20	2	To prevent data inconsistencies when there are\n     multiple accesses within the same business operation to the same\n     entity	t
21	3	The Hadoop system implementation uses complex distributed algorithms for scalability	t
22	3	Availability and performance qualities are ensured at deployment time only	t
23	2	Passive replication and spare	t
24	2	Checkpoint/Rollback	t
25	1	Authenticate users, authorize users, and limit exposure	t
26	0	Because this tactic does not overload the NameNode	t
27	0	Because it has a well-defined interface	t
28	2	But it needs to be complemented, for each uses relationship, with the level of coupling	t
29	2	The call may not transfer data between the modules	t
30	1	If no order was established among them, we would not know\n      from where should we start the design process	t
31	3	The Client-Server style	t
32	0	A Client-Server architecture, where the DataNode is the\n      Client and the NameNode is the Server	t
33	1	That view will always be incomplete without the NameNode,\n      because the DataNode needs to interact with it	t
34	3	The Peer-to-Peer style	t
35	3	The system would respond faster to requests made by\n      DataNodes to update the metadata	t
36	0	To control and to reduce the interface exposed by the\n      domain logic layer, thereby increasing the modifiability of that\n      layer	t
37	0	That should not be allowed because all interactions among\n      components must be made through the Repository	t
38	3	Implementation views	t
39	2	The web browser, o web server, and the data base	t
40	3	The Communicating Processes style	t
41	2	Essential to ensure the system portability	t
42	1	Does not allow the creation of checkpoints	t
43	2	Availability qualities only	t
44	1	Allows \\emph{DataNodes} to decide which replicas they have	t
45	0	Because this tactic does not overload the \\emph{NameNode}	t
46	0	This script is part of the system deployment module	t
47	3	Availability and security	t
48	2	Only views of the component-and-connector viewtype and allocation viewtype are needed	t
49	0	Means that it may be difficult to design incremental testing	t
50	3	Is that the \\emph{Allowed to Use} relation is a \\emph{Uses} relation between layers	t
51	2	Using a view of the component-and-connector viewtype	t
52	0	We must use various different views, both of the\n      component-and-connector and the allocation viewtypes	t
53	3	The Communicating Processes style	t
54	1	The layered view of the web application will have to\n      include a new layer corresponding to the Hadoop MapReduce\n      framework	t
55	2	The Peer-to-Peer style	t
56	0	Affects only the domain logic layer	t
57	2	Each component executes in only one machine and each\n      machine executes only one component	t
58	3	In the mapping between layers of the system and the\n      components where they execute	t
59	2	A layered architecture, where the access to the various\n      sources is the responsibility of the bottommost layer	t
60	3	We always need views of the component-and-connector viewtype\n      and of the Deployment style	t
61	0	The UK government, because it funded the project	t
62	0	As modules of the system	t
63	2	Made the desugaring simpler	t
64	2	The portability, because the RTS creates an abstraction\n      layer that hides some of the details of the operating system	t
65	3	All other options	t
66	3	It allows the development of systems with Peer-to-Peer,\n      Client-Server, or Publish-Subscribe architectures	t
67	1	The Communicating Processes style	t
68	3	Facilitates the reuse of the messaging patterns	t
69	0	To reduce the latency of sending a message when the\n      system is overloaded	t
70	3	The Client-Server style	t
71	1	To have a lower latency in the processing of a request\n      than Apache	t
72	2	Event-driven programs are easier to change	t
73	0	The Generalization style	t
74	1	To make the system more portable to different operating systems	t
75	0	The Shared-data style	t
76	0	Increases the availability	t
77	3	In the Decomposition view, because we need more modules\n      to represent the split of images by different elements of the\n      architecture	t
78	1	Increasing the performance of the \\emph{Retrieval} operation	t
79	1	Each one of the two middle tiers executes the previously\n      existing three layers, and no change is needed on the layers\n      view	t
80	0	With a component-and-connector view, where the \n      \\emph{load balancer} is a component of the system	t
81	1	The domain logic layer was implemented with the\n      Transaction Script pattern	t
82	2	The Uses style	t
83	0	Have high throughput	t
84	0	To facilitate the interaction among heterogeneous\n      components that use distinct communication protocols	t
85	1	The Heartbeat tactic	t
86	2	Any style of the component-and-connector viewtype	t
87	3	In the Aspects view	t
88	1	To create an artifact that may be used to explain the\n      system's software architecture to the various stakeholders	t
89	0	The Peer-to-Peer style	t
90	0	Does not change the existing modules of the system,\n      because they are determined by the system's Decomposition, which\n      is not changed	t
91	1	To launch a worker thread for each user\n        thread to guarantee that each user thread may send messages\n        independently of what the others are doing	t
92	2	Only allocation views	t
93	0	It is less robust, because a fault in the \\emph{broker}\n      causes a failure in the system	t
94	0	Views of the Generalization style	t
95	1	Modifiability	t
96	2	The Peer-to-Peer style	t
97	3	The Communicating Processes style	t
98	1	There is a \\emph{pool} of \\emph{workers} that are reused\n      between connections, but each \\emph{worker} processes only\n      requests of a connection at a time	t
99	0	By interleaving the various processing phases of each\n      request in a sequential process	t
100	0	Have a throughput higher than Apache	t
107	3	Increasing scalability and availability	t
108	3	The Communicating Processes style	t
109	2	The availability of the system's services decreases	t
110	2	A view of the Decomposition style	t
111	0	To start using the Transaction Script pattern in the\n      domain logic layer	t
112	3	Views of the Component-and-Connector and Allocation viewtypes	t
113	2	The Decomposition and the Uses styles	t
114	2	It separates in new modules responsibilities that were\n      spread over various of the system's modules	t
115	3	The Communicating Processes style	t
117	1	Only in the Decomposition view	t
118	3	None of the other options solves the problem	t
119	3	That evolution did not have any consequences on the\n      software architecture of a web application	t
120	3	A layer	t
121	0	Client-server	t
122	3	Active Redundancy	t
123	2	Performance	t
124	2	Reliability, performance, and usability	t
125	3	Client-Server, Repository e Communicating-Processes	t
126	0	By using a Timestamp tactic	t
127	1	May stop accepting writes	t
128	3	Maintain Multiple Copies of Data	t
129	3	Authorize Actors	t
131	2	Dynamic Creation and Destruction	t
132	0	It can take advantage of concurrency	t
133	0	It is always the same for all instances of \\ch{}	t
134	0	Maintain User Model tactic	t
135	1	Pickle algorithm is not efficient	t
136	1	Increase the modifiability quality, because external applications stopped using the administrative functionalities	t
137	1	An object tree to allow the simultaneous execution of several filters	t
138	2	Does not guarantee the FIFO delivery of messages, some messages may be delivery by a different order	t
139	0	Client-Server	t
140	1	Pickle can efficiently write and read messages	t
141	2	Are applied to completely distinct sets of files	t
142	1	Performance and Availability	t
143	2	Active Redundancy	t
144	1	It is necessary to use a pessimistic concurrency control policy to avoid frequent conflicts in the transactions	t
145	0	Programming, if the components execute modules developed by different teams	t
146	0	Detect and Recover from the attack	t
147	3	Only the conceptual level is required, the other two levels of detail are optional	t
148	2	Are completely independent	t
149	0	They only concern the web designers	t
150	3	Only the isolation property of transactions is supported	t
151	2	Reliability	t
152	1	Communicating-Processes	t
153	2	Performance	t
154	1	Store all the information statically	t
155	0	Passive Redundancy and Increase Resources Efficiency	t
156	0	In the server	t
157	3	Exception Handling	t
158	2	Increase Resources Efficiency	t
159	0	Security and Mobility	t
160	3	Maintain Multiple Copies of Computation	t
161	2	Applies machine learning techniques	t
162	0	Repository	t
163	3	Uses the Maintain Multiple Copies of Data tactic	t
164	1	Performance e Usability	t
165	2	External applications can read and send messages to \\gm{}	t
166	0	Communicating-Processes	t
167	2	Aspects	t
168	3	The FIFO delivery of messages	t
169	2	Reliability and Modifiability	t
170	3	Module, but only for the Decomposition architectural style	t
171	0	Modifiability and Interoperability	t
172	0	Decomposition	t
173	2	User Model and System Model	t
174	2	All accesses to objects should occur through their inter-references	t
175	3	Exception Detection	t
176	3	In what concerns the notification, the Model module does not use the Observer module	t
177	1	The Layered view are designed first	t
178	3	May contain several architectural styles, if that is the best way to convey the information to a group of stakeholders	t
179	0	Can only be applied after the Decomposition view is finished	t
180	3	The Module architecture needs to have three Layers	t
181	0	but this reduces reliability because de webapp components do not access the most recent date	t
182	0	performance	t
183	2	Data Model	t
184	2	To have a low cost solution and with reduced complexity	t
185	3	Results in that the writer cannot do many simultaneous writes	t
186	3	After 30 seconds	t
187	1	Testability	t
188	3	Modifiabilit	t
189	0	Security and Mobility	t
190	3	Mobility and Performance	t
191	1	Performance and Availability	t
192	2	Performance and Security	t
193	0	Only one of them take advantage of concurrency	t
194	1	Performance and Availability	t
195	0	Uses	t
196	0	Introduce concurrency	t
197	3	None of the previous options	t
198	1	Performance	t
199	1	The message data structure is easily implemented in a file	t
200	0	Client-Server	t
207	3	A component may contain code from different modules	t
208	1	Allows independent development with little communication\n  between the team members	t
209	0	The Transaction Script pattern to help demarcate the\n  business transactions	t
210	0	To prevent that data becomes incoherent when there are\n  multiple accesses within the same business operation to the same\n  entity	t
211	0	Depends mostly on the system's functional requirements.	t
212	3	Is focused on the details of the architecture.	t
213	2	Suffered from some level of featuritis, but it allowed to have a pilot from which the team learned.	t
214	2	Is a set of guidelines that the developing team should\n  follow in the development of the system.	t
215	3	A component may contain code from different modules.	t
216	0	The current location is the source of the stimulus.	t
217	1	An Encrypt Data tactic for the Security quality.	t
218	3	The source of stimulus for scenarios of the Security quality.	t
219	3	Schedule resources tactic.	t
220	3	The response is defer binding.	t
221	2	Reduce overhead.	t
222	0	The most important requirements (both functional and\n  qualities) that the system must achieve.	t
223	0	The Decomposition style.	t
224	0	The Decomposition style.	t
225	1	Use a classic 3-layer architecture with the following\n  layers, from top to bottom: Presentation, Domain Logic, and Data\n  Access.	t
226	1	It represents a relation between a connector's role and a port of one of its internal components.	t
227	1	It is not necessary to use a ``Data Access'' layer because the information is simple.	t
228	2	Peer-to-peer in both cases.	t
229	0	Peer-to-Peer.	t
230	1	Install view.	t
231	0	The Requirements function is part of the Design module.	t
509	1	Introduce concurrence tactic.	t
232	3	A data model view and a component-and-connector view using a shared-data style.	t
233	2	Shared-data style.	t
234	2	A domain layer is absent from the architecture.	t
235	3	The deployment options have a large impact on the work assignment view.	t
236	0	Passive redundancy for availability, because it is possible to recover from the commands log.	t
237	1	The server propagates local commands and cursor movements to the clients, and keeps the snapshots for the initialization of new clients.	t
238	3	Performance.	t
239	3	The Table Module pattern to hide the details of the table\n  structure for the Presentation layer.	t
240	3	The Service Layer pattern.	t
241	2	The Data Access layer to be able to access the data that it\n  needs in each service.	t
242	1	The Table Module pattern.	t
243	2	Implementation view.	t
244	1	The Requirements function is not part of the RulesSet module.	t
245	0	A Condition Monitoring tactic for the Availability quality.	t
246	0	The source of stimulus for scenarios of the Availability quality.	t
247	3	Schedule resources tactic.	t
248	2	The environment is design time.	t
249	0	Schedule resources.	t
250	3	Use two deployment views, each one allocating different\n  components to different machines with different operating systems.	t
251	2	It represents a relation between a component's port and a port of one of its internal components.	t
252	0	We have to use a Repository component-and-connector style.	t
253	3	Peer-to-peer in the first case and Client-Server in the second.	t
254	1	Depends more on the architect's experience than on anything\n    else.	t
255	2	Is focused on creating common generalizations of several systems.	t
256	0	A module may contain code from different components.	t
257	2	The Google Map is the artefact.	t
258	3	Publish-Subscribe.	t
259	2	A service-oriented architecture view.	t
260	3	Publish-subscribe style.	t
261	2	A domain layer is absent from the architecture.	t
262	1	It is necessary to design a single deployment view that contains all the variation, because only the hardware capabilities change.	t
263	2	Increase resource efficiency tactic for performance, because it reduces the need of upfront calculus/computation on new clients.	t
264	1	The server propagates local commands and cursor movements to the clients, and keeps the snapshots for the initialization of new clients.	t
265	0	Testability.	t
266	0	Suffered from featuritis, because the architect decided to delay the difficult parts for latter in the development.	t
267	3	Is a set of diagrams that show the runtime elements of the\n  system and their relationships.	t
268	2	The stakeholders that drive the development of the system.	t
269	0	The Decomposition style.	t
270	3	The Work-assignment style.	t
271	0	To analyse the source code of the system to see how it is built	t
272	0	The architecture of a system cannot change	t
273	2	Testability and maintainability always conflict with performance	t
274	2	Have at least a view for each viewtype	t
275	3	An allocation element	t
276	3	Describing the system's features by way of different\n  usage scenarios for it, in which users play the role of actors	t
277	1	Heartbeat requires the availability monitor to confirm the reception of the signal	t
278	3	It is necessary to use the encrypt data tactic to encrypt the information on the client web browser, before it is send to the web server	t
279	0	Maintain task model	t
280	3	A scenario for usability associated with a support user initiative tactic	t
281	1	Active redundancy	t
282	2	If one of the stakeholders complains that her requirement\n    is not satisfied, we may explain to her that there were other more\n    important requirements first	t
283	0	Decomposition view	t
284	1	Client-Server to represent the request the application makes to the different new sources	t
285	0	Performance because there is an overhead of communication between the modules.	t
287	3	It is necessary to change the component-and-connector view to show the communicating processes	t
288	1	They have to process very large amounts of data in each request	t
289	1	The Pipes-and-filters style	t
290	0	Analysing the performance of the system	t
291	0	A generalisation architectural style	t
292	0	Subscribes to the same kind of events that the \\textsc{sub2} port	t
293	2	The deployment architectural style	t
294	2	Active redundancy tactic	t
295	3	Interoperability, because the REST API allow the exchange of information with external applications	t
296	3	Testability tactic	t
297	1	Availability, because of the interprocess communication	t
298	3	A communication processes style	t
299	0	Requires a more skilled team, because the object-oriented\n  paradigm is more complex than the procedural paradigm	t
300	3	The Data Mapper pattern	t
306	2	It is necessary to use the encrypt data tactic to encrypt the information with a password that is in a configuration file	t
308	1	A scenario for usability associated with a support system initiative tactic	t
309	0	Multiple copies of computation	t
310	0	Decomposition view	t
311	2	To analyse the implemented set of features to see what is it\n  that the system actually does	t
312	0	The architecture of a system cannot change	t
313	3	None of the above	t
314	2	Have at least a view for each viewtype	t
315	3	When it is not possible to satisfy all of the requirements\n    optimally, we should be aware of their relative importance so that\n    we may find a solution that corresponds to a satisfactory trade-off	t
316	1	A component	t
507	3	Maintain multiple copies of data.	t
317	3	Layers to create a virtual machine that hides the internals of the application from its users interface code to allow the support of different user interfaces	t
318	3	Availability because if a module fails the failure easily propagates to all the other modules	t
319	2	Security, because it describes a "queue overflow" attack	t
320	2	Increase resources tactic	t
321	1	Availability, because of the interprocess communication	t
322	2	A Communicating processes view	t
323	0	A publish-subscribe style	t
324	0	It is enough to show the load-balancer between the web clients machines and the servers machines using a deployment view	t
325	1	They have to process very large amounts of data in each request	t
326	2	The Publish-subscribe style	t
327	3	Analysing the system's portability and reusability	t
328	1	An aspects architectural style	t
329	0	Subscribes to the same kind of events that the \\textsc{sub2} port	t
330	0	The communicating processes architectural style	t
331	0	Featuritis may result from a requirement of the technical context.	t
332	3	To break such misunderstanding and mistrust the architecture has to make explicit the stakeholders needs.	t
333	2	Frank Buschmann is referring that the consequences of a flexible system is poor performance and bad security.	t
334	2	Performance uncertainty about the system should be dealt with more flexibility.	t
335	3	The system performance quality has impact on the performance of the execution of tests.	t
336	0	Performance should be the last quality to be addressed because it is a local property of an architecture.	t
337	1	Is an architecture that demonstrates that the system will support the qualities raised by the stakeholders.	t
338	3	Professional and Technical Contexts.	t
339	3	The book definition is not correct, as pointed out in the errata.	t
340	3	An external element.	t
341	2	Both, a component and a module, depending on the perspective.	t
343	0	Modifiability.	t
344	0	Modifiability.	t
345	1	This is wrong because you can easily change these decisions during the project lifetime.	t
346	1	This shared understanding is necessary to define precise requirements.	t
347	1	Are focused on the project context of the architecture.	t
348	2	Is focused on creating common generalizations of several systems.	t
349	0	Make a business case for the system.	t
350	1	Tries to guarantee that the final system will have the qualities aimed by the architecture.	t
351	2	Featuritis may be a result of a requirement of the business context.	t
352	1	There is no system which can have good performance and be easily maintainable.	t
353	2	The book definition also considers that the properties are externally visible because by definition an architectural property is externally visible.	t
354	1	This shared understanding is necessary to define precise requirements.	t
355	0	Make a business case for the system.	t
356	0	This shared understanding is what distinguishes architecture from design.	t
357	0	Make a business case for the system.	t
358	2	We have to distinguish architectural performance from opportunistic performance.	t
359	2	The book definition also considers that the properties are externally visible because by definition an architectural property is externally visible.	t
360	3	Featuritis requires the modifiability quality to allow a the system to be easily modified to support new features.	t
361	1	Frank Buschmann are considering performance and security as the most important qualities.	t
362	2	The lack of functionality results in a system without business value, therefore a rich set of features should be implemented first.	t
363	0	A component.	t
364	0	This is right because if you don't the project fails.	t
365	1	Is focused on the technology context of the architecture.	t
366	0	A component.	t
367	3	This is wrong because it is against agile way of thinking the software development process.	t
368	2	Is focused on creating common generalizations of several systems.	t
369	2	The lack of functionality results in a system without business value, therefore a rich set of features should be implemented first.	t
370	3	Frank Buschmann is not considering modifiability as an important quality	t
371	2	The cycle Frank Buschmann refers to allows the clarification of requirements.	t
372	1	Is an architecture that demonstrates that the system will support the qualities raised by the stakeholders.	t
373	2	Both, a component and a module, depending on the perspective.	t
374	1	Usability.	t
375	0	Are unable to understand the technology capabilities.	t
376	0	Are unable to understand the technology capabilities.	t
377	0	A component.	t
378	2	The cycle Frank Buschmann refers to allows the clarification of requirements.	t
379	2	Security.	t
380	3	Is an object-oriented framework, which integrates functional and non-functional requirements of the system.	t
381	1	A solution to this problem is to prioritize the system qualities.	t
382	2	Business and Project Contexts.	t
383	0	A module view.	t
384	0	Modifiability.	t
385	1	Tries to guarantee that the final system will have the qualities aimed by the architecture.	t
386	0	Tries to guarantee that the final system will have the qualities required by stakeholders.	t
387	3	Availability.	t
388	2	Business and Project Contexts.	t
389	2	An allocation view.	t
390	3	A solution to this problem is to reduce the level of flexibility of a system.	t
391	2	Reliability.	t
392	1	The response can be omitted.	t
393	2	Is an architectural pattern.	t
394	1	Availability.	t
395	0	Implements a tactic to recover from faults.	t
396	0	Prevent a fault in hardware.	t
508	1	Introduce concurrency.	t
397	3	This situation corresponds to the use of the limit exposure security tactic.	t
398	2	Rollback.	t
399	0	Is an aggregate design tactic.	t
400	3	The quality addressed is performance and a maintain multiple copies of data design tactic is required to solve the problem.	t
406	0	Limit access, to restrict the access to the database system.	t
407	2	Increase resource efficiency.	t
408	3	Manage sample rate.	t
409	2	Increase resource efficiency tactic.	t
410	3	Maintain task model tactic.	t
411	0	Performance.	t
412	0	The stimulus is a system input.	t
413	2	Is an architectural pattern.	t
414	2	Interoperability.	t
415	3	Can be used in a non-concurrent system.	t
416	3	Detect a fault.	t
417	1	This situation corresponds to the use of the removal from service availability tactic.	t
418	3	Exception prevention.	t
419	0	Is an aggregate design tactic.	t
420	3	The quality addressed is performance and a maintain multiple copies of data design tactic is required to solve the problem.	t
421	1	The quality addressed is modifiability.	t
422	2	A Maintain Multiple Copies of Data design tactic in Carbon.	t
423	0	Detect intrusion.	t
424	1	Detect service denial.	t
425	0	Detect and Resist.	t
426	0	Limit access, to restrict the access to the database system.	t
427	3	Maintain multiple copies of data.	t
428	1	Introduce concurrency.	t
429	1	Introduce concurrence tactic.	t
430	0	Maintain user model tactic.	t
431	1	The response can be omitted.	t
432	2	Is an architectural pattern.	t
433	0	Performance.	t
434	0	Limit access.	t
435	1	Prevent a fault in software.	t
436	2	This situation corresponds to the use of the limit access security tactic.	t
437	3	Exception prevention.	t
438	1	The quality addressed is performance.	t
439	0	The quality addressed is availability.	t
440	0	A Maintain Multiple Copies of Computation design tactic in Carbon.	t
441	2	Reliability.	t
442	0	Detect intrusion.	t
443	3	Is a design tactic for a scenario where the source of stimulus is the graph owner user.	t
444	2	Can be used as the source of a stimulus in a scenario.	t
445	3	Detect message delay.	t
446	1	Detect and React.	t
447	3	Change default settings, because default passwords are sensitive.	t
448	3	Manage sample rate.	t
449	2	Increase resource efficiency tactic.	t
450	2	Increase resource efficiency tactic.	t
451	0	Performance.	t
452	3	The stimulus and the response should be always present.	t
453	2	Is an architectural pattern.	t
454	2	Interoperability.	t
455	3	Can be used in a non-concurrent system.	t
456	0	Prevent a fault in hardware.	t
457	1	This situation corresponds to the use of the removal from service availability tactic.	t
458	3	Exception prevention.	t
459	3	Is a design tactic for a scenario where the source of stimulus is the graph owner user.	t
460	3	The quality addressed is performance and a maintain multiple copies of data design tactic is required to solve the problem.	t
461	2	The quality addressed is availability and an active redundancy design tactic is required to solve the problem.	t
462	0	A Maintain Multiple Copies of Computation design tactic in Carbon.	t
463	0	Detect intrusion.	t
464	0	Detect intrusion.	t
465	1	Detect and React.	t
466	1	Limit exposure, locate the database system in the intranet.	t
467	1	Increase resources.	t
468	2	Reduce overhead.	t
469	0	Maintain multiple copies of data tactic.	t
470	1	Introduce concurrence tactic.	t
471	2	Reliability.	t
472	1	May be associated to other tactics to deal with a single stimulus.	t
473	2	Interoperability.	t
474	1	Implements a tactic to prevent faults.	t
475	0	This situation corresponds to the use of the degradation availability tactic.	t
476	0	Ignore faulty behavior.	t
477	3	Is a design tactic for a scenario where the source of stimulus is the graph owner user.	t
478	2	The quality addressed is availability and a voting design tactic is required to solve the problem.	t
479	0	The quality addressed is availability.	t
480	3	A Maintain Multiple Copies of Data design tactic in the WebApp such that reads do not compete with writes.	t
481	2	Limit exposure.	t
482	0	Detect intrusion.	t
483	3	Resist and React.	t
484	1	Limit exposure, locate the database system in the intranet.	t
485	2	Increase resource efficiency.	t
486	0	Increase resources.	t
487	2	Prevent a fault in a process.	t
488	3	The stimulus and the response should be always present.	t
489	2	Increase resource efficiency tactic.	t
490	3	Maintain task model tactic.	t
492	0	The stimulus is a system input.	t
493	2	Is an architectural pattern.	t
494	2	Interoperability.	t
495	3	Can be used in a non-concurrent system.	t
496	3	Detect a fault.	t
497	1	This situation corresponds to the use of the removal from service availability tactic.	t
498	3	Exception prevention.	t
499	0	Is an aggregate design tactic.	t
500	3	The quality addressed is performance and a maintain multiple copies of data design tactic is required to solve the problem.	t
506	0	Limit access, to restrict the access to the database system.	t
510	0	Maintain user model tactic.	t
511	1	Availability.	t
512	2	The artefact can be outside the system.	t
513	0	Is a mediator, an application of the mediator pattern, between the input stimulus and the output response.	t
514	0	Implements a tactic to recover from faults.	t
515	1	Prevent a fault in software.	t
516	2	This situation corresponds to the use of the limit access security tactic.	t
517	3	Change default settings, because default passwords are sensitive.	t
518	1	Introduce concurrence tactic.	t
519	0	Ignore faulty behavior.	t
520	0	Is an aggregate design tactic.	t
521	2	The quality addressed is availability and a voting design tactic is required to solve the problem.	t
522	0	The quality addressed is availability.	t
523	3	A Maintain Multiple Copies of Data design tactic in the WebApp such that reads do not compete with writes.	t
524	2	Limit exposure.	t
525	3	Detect message delay.	t
526	1	Detect and React.	t
527	3	Testability.	t
528	3	Maintain multiple copies of data.	t
529	2	Reduce overhead.	t
530	2	Increase resource efficiency tactic.	t
531	0	Performance.	t
532	3	The stimulus and the response should be always present.	t
533	2	Is an architectural pattern.	t
534	2	Interoperability.	t
535	3	Can be used in a non-concurrent system.	t
536	0	Prevent a fault in hardware.	t
537	1	This situation corresponds to the use of the removal from service availability tactic.	t
538	3	Exception prevention.	t
539	3	Is a design tactic for a scenario where the source of stimulus is the graph owner user.	t
540	3	The quality addressed is performance and a maintain multiple copies of data design tactic is required to solve the problem.	t
541	2	The quality addressed is availability and an active redundancy design tactic is required to solve the problem.	t
542	0	A Maintain Multiple Copies of Computation design tactic in Carbon.	t
543	0	Detect intrusion.	t
544	0	Detect intrusion.	t
545	1	Detect and React.	t
546	1	Limit exposure, locate the database system in the intranet.	t
547	1	Increase resources.	t
548	2	Reduce overhead.	t
549	0	Maintain multiple copies of data tactic.	t
550	1	Introduce concurrence tactic.	t
551	2	Reliability.	t
552	1	The response can be omitted.	t
553	2	Interoperability.	t
554	1	Implements a tactic to prevent faults.	t
555	0	Prevent a fault in hardware.	t
556	0	Maintain multiple copies of data tactic.	t
557	3	Exception prevention.	t
558	2	Is a design tactic for a scenario where the source of stimulus are technical users.	t
559	0	The quality addressed is availability.	t
560	3	A Maintain Multiple Copies of Data design tactic in the WebApp such that reads do not compete with writes.	t
561	2	Limit exposure.	t
562	0	Detect intrusion.	t
563	3	Resist and React.	t
564	1	Limit exposure, locate the database system in the intranet.	t
565	2	Increase resource efficiency.	t
566	0	Increase resources.	t
567	2	The quality addressed is availability and an active redundancy design tactic is required to solve the problem.	t
568	3	Is a system decomposition.	t
569	2	This situation corresponds to the use of the limit access security tactic.	t
570	3	Maintain task model tactic.	t
571	0	Incorporate in the organization's core business the goals of a software house.	t
572	0	Business scenario.	t
573	2	Modifiability scenario.	t
574	2	Contains the architectural tactics associated with architecturally significant requirements.	t
575	3	Is an iterative process where architectural designs are proposed as hypothesis and tested.	t
576	3	Any ASR that has a high business value cannot have a low architecture impact because it needs to be supported by the architecture.	t
577	1	This ASR should be supported by the architecture because of its high impact.	t
578	3	Results from the application of several ADD iterations.	t
579	0	Maintain system model tactic.	t
580	3	Usability.	t
581	1	Reliability.	t
582	2	Availability.	t
583	0	Performance.	t
584	1	Performance.	t
585	0	Rollback.	t
586	0	Change default settings.	t
587	3	Follows a bottom-up decomposition process of the system.	t
588	1	Results in a decomposition where each module may be implemented by a single developer.	t
589	1	Do in-house development.	t
590	2	Is a top-down process where a initial decomposition is chosen and it is successively decomposed without changing the initial decisions.	t
591	0	Testability.	t
592	0	Interoperability.	t
593	1	Results in a decomposition where each module may be implemented by a single developer.	t
594	0	Testability.	t
595	3	Usability.	t
596	2	Integrate the development of the software system with the organization's business goals.	t
597	2	Allows to increase the overall calendar development time of the project because there is a communication overhead with external teams.	t
598	3	Is an iterative process where architectural designs are proposed as hypothesis and tested.	t
599	2	Modifiability scenario.	t
600	1	This ASR requires a specific architectural design because it profoundly affects the architecture.	t
603	0	Results in a similar decomposition as if the criteria was not applied but some modules are identified to be outsourced.	t
604	0	Performance.	t
605	0	Change default settings.	t
606	2	Allows to increase the overall calendar development time of the project because there is a communication overhead with external teams.	t
607	2	The cost of meeting the ASR after development starts is too high.	t
608	3	Usability scenario.	t
609	1	Cannot be defined for the security quality.	t
610	2	The architect have to decide on the cost/benefit of designing an architecture that supports this ASR.	t
611	0	Performance.	t
612	0	Performance.	t
613	1	Is applied at the begin of the architectural design process but may be necessary to redo it later.	t
614	0	Is applied only once at the beginning of the architectural design process.	t
615	3	Usability.	t
616	2	Contains the architectural tactics associated with architecturally significant requirements.	t
617	2	Availability.	t
618	3	The architect should support this ASR after designing an architecture that supports all the ASRs with high business value.	t
619	2	Modifiability scenario.	t
620	1	Results from a single availability scenario.	t
621	2	Maintain multiple copies of data tactic.	t
622	1	Persistence.	t
623	0	Is applied only once at the beginning of the architectural design process.	t
624	0	Maintain system model tactic.	t
625	0	Is applied only once at the beginning of the architectural design process.	t
626	2	Retry.	t
627	2	Results from the application of a single ADD iteration.	t
628	3	Usability scenario.	t
629	1	Improves testability because if a module uses another then it is only possible to test them together.	t
630	2	The invoked function may not have any output parameter.	t
631	0	Applying the generalization style to identify child modules of a module in the loop chain.	t
632	0	By changing the commonalities that are in the children.	t
633	1	This means that this architectural style emphasizes the quality of performance.	t
634	2	She should define finer-grained modules where she splits the unassigned responsibility.	t
635	3	It is necessary to design a view of the Data Model architectural style at the physical level to deal with performance issues of the access to data.	t
636	1	Is an extension of a view of the Data Model style.	t
637	0	Limit exposure.	t
638	0	Sanity checking.	t
639	2	Increase resource efficiency.	t
640	0	Multiple copies of computation and Passive redundancy tactics.	t
641	3	A module interface may be attached to several component ports.	t
642	2	The attachment is a runtime relation which dynamically manages type compliance.	t
643	3	A module contains the code that can execute in several components and a component can execute the code of several modules.	t
644	1	She delays the complete specification of the connector for development time to have human resources to prototype and measure different implementations.	t
645	3	The communication between data accessors does not occur through the repository.	t
646	3	It implements a maintain multiple copies of data tactic.	t
647	2	Servers can also be clients.	t
648	2	She can use the request/reply connector but the server should not return results to the client.	t
649	0	Applying the generalization style to identify child modules of a module in the loop chain.	t
650	3	This means that in this software system it is not possible to modularize each responsibility in a cohesive module.	t
651	2	Authorize actors.	t
652	2	The attachment is a runtime relation which dynamically manages type compliance.	t
653	3	It implements a maintain multiple copies of data tactic.	t
654	2	Identifying which of the \\emph{uses} dependencies are actually generalization dependencies.	t
655	1	She should try to use a view of the Aspects style, assign this responsibility to a module and bind it to the modules affected by it.	t
656	2	Authorize actors.	t
657	1	The type of a component does not depend on the type of its ports.	t
658	0	It implements a maintain multiple copies of computation tactic.	t
659	0	By changing the commonalities that are in the children.	t
660	0	It is necessary design a CRUD matrix to show the dependencies between the persistent information.	t
661	2	Increase resource efficiency.	t
662	2	She does not want to clutter the view with details and trusts the development team to implement the connector according to the required quality level.	t
663	3	She can define a variant of this style with asynchronous communication by allowing the server to have the initiative to initiate the interaction.	t
664	1	She delays the complete specification of the connector for development time to have human resources to prototype and measure different implementations.	t
665	2	She can use the request/reply connector but the server should not return results to the client.	t
666	0	By changing the commonalities that are in the children.	t
667	0	Schedule resources.	t
668	1	It is enough to design a view of the Data Model architectural style at the conceptual level because Facebook information has a very simple structure.	t
669	0	Allows the analysis of the impact of changes because if a module uses another it will necessarily have to change whenever the used module changes.	t
670	3	Describes the structure of the data used by the system.	t
671	2	Passive redundancy tactic.	t
672	2	A module interface cannot be replicated but component ports can.	t
673	3	Servers can send a heartbeat to clients.	t
674	2	Passive redundancy tactic.	t
675	1	A module interface can be replicated but component ports cannot.	t
676	2	Allows to avoid redundancy and inconsistency.	t
677	1	It is possible to have redundant servers.	t
678	0	Allows the analysis of the impact of changes because if a module uses another it will necessarily have to change whenever the used module changes.	t
679	0	A module contains the code that executes in a single component and a component executes the code of a single module.	t
680	0	Sanity checking.	t
681	2	The integration of a new data accessor only implies changes in the data accessors that access the same type of data.	t
682	2	The invoked function may not have any output parameter.	t
683	3	This means that the modules inside a layer are likely to be ported to a new application together.	t
684	1	This means that this architectural style emphasizes the quality of performance.	t
685	2	The integration of a new data accessor only implies changes in the data accessors that access the same type of data.	t
686	0	A module contains the code that executes in a single component and a component executes the code of a single module.	t
687	0	Sanity checking.	t
688	1	The invoked function may not have any input parameter.	t
689	0	The file transfers follows the same path of nodes used to identify where the file was located.	t
690	3	The behavior described in the sentence can be represented in a view where the tier architectural style is used.	t
691	2	Is an extension of the Client-Server architectural style.	t
692	2	The events should be delivered by the same order they are sent.	t
693	3	It decouples applications developed for different organizations.	t
694	0	It encapsulates applications through well-defined interfaces.	t
695	1	Is a Peer-to-Peer style because consumers and providers are peers.	t
696	3	And filters do not have to agree on the data formats.	t
697	3	Memcached is not a module.	t
698	3	Buffering is not a module.	t
699	2	In the view \\texttt{Receiver} component's \\texttt{client} port is not associated with an external port.	t
700	0	There is a message passing connector between the \\texttt{read} port of \\texttt{Queue} and the \\texttt{data points access} port of \\texttt{WebApp}.	t
708	1	The uses view to show the coupling between the different platforms.	t
709	2	If a peer providing a file crashes it is necessary to restart to download the file from the begin.	t
710	1	Is a Peer-to-Peer style because consumers and providers are peers.	t
711	2	In the view \\texttt{Receiver} component's \\texttt{client} port is not associated with an external port.	t
712	1	A work assignment view.	t
713	0	The layered view to support a new specific layer for the customization of the catalog.	t
714	0	A deployment view.	t
715	0	The file transfers follows the same path of nodes used to identify where the file was located.	t
716	2	The data model view in order to define entities for each kind of catalog.	t
717	2	Can use a Service Registry to improve transparency of location of service providers.	t
718	3	In the view the \\texttt{produce} port of a \\texttt{Receiver} component is attached to the \\texttt{consume} port of a \\texttt{Writer} component.	t
719	1	The behavior described in the sentence can be represented in a view where the dynamic reconfiguration architectural style is used.	t
720	2	It improves transparency of location of service providers.	t
721	0	There is a message passing connector between the \\texttt{read} port of \\texttt{Queue} and the \\texttt{data points access} port of \\texttt{WebApp}.	t
722	0	Deployment style.	t
723	1	A change of the layered view to support different presentations, one for each friend.	t
724	0	Deployment style.	t
725	3	A new aspect view to include the responsibilities associated with the access control.	t
726	2	When a peer receives a connection it sends all its files to the peer connecting it.	t
727	2	It improves transparency of location of service providers.	t
728	3	The \\texttt{client} ports of \\texttt{Carbon} and \\texttt{WebApp} are connected to a \\texttt{Client} component through the same connector instance.	t
729	2	Is an extension of the Client-Server architectural style.	t
730	1	The orchestration is in charge of improving the transparent location of service providers.	t
731	2	Install style.	t
732	1	The uses view to represent how the mobile device uses the Catalog application.	t
733	0	Memcached can be considered a sub-module of the Store Graphs module.	t
734	0	The decomposition view to include a module for the synchronization responsibilities.	t
735	0	It enforces the use of a single implementation language among all applications.	t
736	2	Install style.	t
737	2	Memcached can be considered a direct sub-module of the top Graphite module.	t
738	3	Defines tiers as components.	t
739	1	All the published events are received by their subscribing components.	t
740	2	But the size of buffers may reduce the composition power.	t
741	0	Buffering can be considered a sub-module of the Store Graphs module.	t
742	0	A work assignment view.	t
743	1	The uses view to show the coupling between the different platforms.	t
744	0	A work assignment view.	t
745	3	The data model view to represent each one of the platforms.	t
746	2	The events should be delivered by the same order they are sent.	t
747	2	Buffering can be considered a direct sub-module of the top Graphite module.	t
748	3	And filters do not have to agree on the data formats.	t
749	2	Amazon Silk is more convenient for mobile devices because it customizes the number of threads that run in the device.	t
750	1	Google Chrome uses a usability maintain system model tactic.	t
751	2	Amazon Silk cache is not shared between different users of the service to support confidentiality.	t
752	1	In Google Chrome a request for a web page is accomplished by a single access to the internet.	t
753	0	As a specialization of the RulesSet module.	t
754	0	Should be described as a submodule of the RulesSet module.	t
755	3	There is an EventBus connector.	t
756	2	There is a Read/Write connector which guarantees that players turns are not lost.	t
757	0	Was taken because HTML5 provides better portability qualities.	t
758	3	Has reduced reliability qualities.	t
759	2	Three distinct unidirectional connectors.	t
760	0	Performance was traded for easy of development.	t
761	3	The \\textsc{: TableEditor} broadcasts the cursor position through its \\textsc{: StatusCallback} port.	t
762	1	The server implements the \\textsc{: Repository} component.	t
763	2	The code of the \\textsc{Parser} module is executed by a repository component, which is not represented in the view.	t
764	0	The \\textsc{ConflictResolution} module is part of the code executed by the \\textsc{: TableEditor} component.	t
765	2	Row Data Gateway and Data Mapper.	t
766	3	Active Record and Data Mapper.	t
767	2	Contain the business logic.	t
768	3	A Service Layer should be used to provide an interface for the presentation layer.	t
769	0	Amazon Silk is more convenient for mobile devices because it does most of the computation in the cloud.	t
770	0	There is a ThousandParsec connector.	t
771	2	May loose some of the changes done on the client component.	t
772	2	The code of the \\textsc{ConflictResolution} module is executed by a broadcast connector that implements an eventbus between the \\textsc{SpreadSheet} components.	t
773	3	A Service Layer should be used to provide an interface for the presentation layer.	t
774	1	The \\textsc{ConflictResolution} module is part of the code executed by the \\textsc{: Sheet} component.	t
775	2	Row Data Gateway is the most suitable data source pattern.	t
776	0	Amazon Silk is more convenient for mobile devices because it does most of the computation in the cloud.	t
777	0	There is a ThousandParsec connector.	t
778	1	Implements an event bus that allows the server to inform the client about new order recommendations.	t
779	0	In Amazon Silk a request for a web page corresponds to a peer-to-peer interaction between all the web components containing the resources.	t
780	3	Should not be described as a module because it is a component.	t
781	2	Performance was traded for the modifiability quality.	t
782	2	The \\textsc{: Sheet} broadcasts the cursor position through the \\textsc{Pub} port.	t
783	3	May not even exist, only record sets are used.	t
784	2	Contain the business logic.	t
785	1	An iterative development was followed, which allowed more time to develop a connector with good performance in the latter stages of the project.	t
786	2	In Amazon Silk a request for a web page corresponds to requesting a service from the amazon cloud.	t
787	1	Should be described as a submodule of but not included in the RulesSet subtree.	t
788	0	The \\textsc{: TableEditor} broadcasts the cursor position through the \\textsc{: Sheet}.	t
789	0	Amazon Silk predicts accesses based on the information gathered for all Silk users.	t
790	0	There is a ThousandParsec connector.	t
791	2	Was taken because HTML5 provides better usability qualities.	t
792	2	The server implements the \\textsc{: Broadcast} connector.	t
793	3	Active Record and Data Mapper.	t
794	1	Row Data Gateway and Active Record.	t
795	2	Was taken because HTML5 provides better usability qualities.	t
796	0	Amazon Silk predicts accesses based on the information gathered for all Silk users.	t
797	0	The server implements the \\textsc{: Repository} component and the \\textsc{: Broadcast} connector.	t
798	1	There is a Request/Reply connector.	t
799	0	Amazon Silk explicitly caches pages on the browser to optimize accesses.	t
800	3	As a specialization of the Design module.	t
802	2	The code of the \\textsc{Parser} module is executed by a repository component, which is not represented in the view.	t
803	3	Active Record and Data Mapper.	t
804	2	Three distinct unidirectional connectors.	t
805	1	Row Data Gateway and Active Record.	t
806	2	Amazon Silk cache is not shared between different users of the service to support confidentiality.	t
807	1	As a submodule of the RulesSet module.	t
808	0	The \\textsc{Parser} module is part of the code executed by the \\textsc{: TableEditor} component.	t
809	0	This law highlights the impact of the business on the architecture	t
810	0	Becomes unavailable for clients if there is a fault in the hardware of web server (srv-web)	t
811	0	Performance is a quality that you have to address at the end of the development process	t
812	0	Typically have a software architecture that results\n          from the common knowledge about the system that is shared among\n          the team members	t
813	0	Describing what are the qualities that the system should possess	t
814	0	They are both modules	t
815	0	Retry	t
816	0	Has as main goal the reduction of the modules' size.	t
817	0	Manage sampling rate.	t
818	0	Due to its configuration strategy Apache has better performance	t
819	0	The stimulus is to integrate reports from a variety of test tools	t
820	0	Modifiability and Performance	t
821	0	We should always satisfy in the first place the requirements\n      of more important stakeholders (such as the client)	t
822	0	Its main goal is to establish the reusability qualities of the architecture.	t
823	0	The Decomposition style	t
824	0	Layer 1	t
825	0	It makes no sense to use views of the module viewtype, as\n        they give only a static view of the system	t
826	0	The Work Assignment style	t
827	0	The Shared Data style	t
828	0	The Peer-to-Peer style	t
829	0	It assigns components and connectors to people and teams.	t
830	0	Launching a new process for processing each request is too expensive	t
831	0	An increase resource efficiency tactic	t
832	0	A decomposition view which represent the module for compare-and-set	t
833	0	In the Deployment view, because the presentation\n      component is now executing in a different place	t
834	0	The left part of the figure represents a three-layered architecture	t
835	0	Service-oriented architecture to express how clients can access the services	t
836	0	The solution where the application is responsible for the eviction has better availability	t
837	0	Performance	t
838	0	Client-server	t
839	1	The response is JUnit XML standard	t
840	1	Availability and Modifiability	t
841	1	In the component-and-connector view, because the\n      connector between the web client and the web server has to change	t
842	1	The most relevant architectural style in the right part of the figure is shared-data	t
843	1	Client-server to express how multiple clients can access the applications	t
844	1	If no order was established among them, we would not know\n      from where should we start the design process	t
845	1	Project managers are not interested in views that use this style because it lacks the necessary level of detail.	t
846	1	The Deployment style	t
847	1	Layer 4	t
848	1	Active redundancy	t
849	1	Results in the creation of a third module that does not have to change when any of the original modules are changed.	t
850	1	Limit event response.	t
851	1	Performance was the main concern of the design of the configuration strategy in Nginx	t
852	1	You should use only views of the component-and-connector\n        viewtype, which describe the dynamic aspects of the system	t
853	1	The Client-Server style	t
854	1	The Pipes-and-filters style	t
855	1	The Pipes-and-filters style	t
856	1	It is useful for the project managers.	t
857	1	Using threads ensures that the processing of each request is\n      isolated from the remaining requests	t
858	1	A schedule resources tactic	t
859	1	A client-server view with non-blocking connectors for the interaction between threads and core data structures	t
860	1	The solution where the cache is responsible for the eviction has better availability	t
861	1	Interoperability	t
862	1	Communicating Processes	t
863	1	This law can be seen as an example of the architecture influence cycle	t
864	1	Becomes unavailable for clients if there is a fault in the hardware of database server (srv-db)	t
865	1	There is no system which can have good performance and be easily maintainable	t
866	1	Do not have a software architecture, because in agile\n          methodologies there is no architectural design phase	t
867	1	Describing a set of steps that a user of the system must\n      perform to accomplish some task	t
868	1	They are both components	t
869	0	Is useful only if done (even if only partially) before the\n         system's implementation is concluded, given that the architecture\n        is used for restricting the implementation	t
870	0	The most important requirements (both functional and\n      qualities) that the system must achieve	t
871	0	Depends mostly on the system's functional requirements	t
872	0	Communicating processes	t
873	0	A module may contain code from different components	t
874	0	They describe general requirements that all systems should try to satisfy	t
875	0	Ping/Echo	t
876	0	This is a performance scenario because the stimulus is an input, \\emph{launches several instances of the system}.	t
877	0	Launch a new process for processing each request	t
878	0	Manage sampling rate.	t
879	0	Make a business case for the system	t
880	0	Modifiability	t
881	0	Performance	t
882	0	Cycles in the uses relation between modules are a good sign, because it indicates that several modules should be tested together.	t
883	0	There is a high level of communication between the several modules, and this\n        will cause the system to have a low performance	t
884	0	Can use the operations defined in any of the system's modules	t
885	0	Represent the network infrastructure that allows components to communicate\n        with each other	t
886	0	The Peer-to-Peer style	t
887	0	The Shared data style	t
888	0	The Decomposition style	t
889	0	It assigns modules to the hardware.	t
890	0	By interleaving the various processing phases of each\n      request in a sequential process	t
891	0	Shared-data and Communicating-Processes	t
892	0	You need to change the decomposition view to represent modules with the responsibilities associated with the DSL	t
893	0	A uses view which represent modules for the externalizers	t
894	0	A \\emph{web services} architecture	t
895	0	The main quality of the system in the right part of the figure is scalability	t
896	0	Data model to express the stored data formats	t
897	0	Performance because all requests will be processed faster	t
898	0	Usability and Performance	t
899	2	The Service Oriented Architecture style	t
900	2	For each set of software elements there is a single possible assignment to hardwre.	t
902	2	You need to design an implementation view to allow system administrators configure the builds	t
903	2	A connector that has the serialization and de-serialization speed qualities	t
904	2	A layered architecture, where the access to the various\n      sources is the responsibility of the bottommost layer	t
905	2	The main quality of the system in the right part of the figure is ease of development	t
906	2	Aspects to express the evolution of service interfaces	t
907	2	Availability because even if PartB1 is not available partB2 can be provided	t
908	2	Performance	t
909	2	Tiers	t
910	2	Is useful only if done (even if only partially) before the\n        system passes all of the acceptance tests by the client, given\n        that no more requirements changes will take place after that time	t
911	2	The stakeholders that drive the development of the system	t
912	2	Should not depend on the skills of the developing team	t
913	2	Communicating processes, shared-data and service-oriented architecture	t
914	2	A module may execute code from different components	t
915	2	They identify the most important requirements that the system should satisfy	t
916	2	It is not possible to develop and to test the system incrementally	t
917	2	Can use the operations defined in the upper layer, but not the ones defined in\n         the lower layer	t
918	2	Represent the dependency relations that exist among the various components	t
919	2	The Shared-Data style	t
920	2	The Peer-to-Peer style	t
921	2	Voting	t
922	2	This is not a modifiability scenario because the source of the stimulus cannot be a system administrator.	t
923	2	Put the requests into a queue and schedule their processing	t
924	2	The uses relation should be applied to the coarse-grained modules, because it allows to identify circular dependences.	t
925	2	Prioritize events.	t
926	2	The system design	t
927	2	Testability	t
928	2	Usability	t
929	0	This is a case of an architectural influence cycle where the feedback cycle resulted in changes on the business.	t
930	0	The exchange of information is the stimulus.	t
931	0	This shared understanding can be represented by a set of architectural views.	t
932	0	A component.	t
933	0	Service-oriented architecture, and Client-server.	t
934	0	Should be avoided because scenarios should describe very concrete situations.	t
935	0	Can be applied to any kind of availability scenario.	t
936	0	Has as main goal the reduction of the modules' size.	t
937	0	A security scenario because it allows the introduction of filters to encrypt the messages.	t
938	0	Increase resource efficiency.	t
939	0	Is driven by functional requirements.	t
940	0	Modifiability	t
941	0	Modifiability.	t
942	0	Modifiability.	t
943	0	The correctness of the caller module may not depend on the correct implementation of the invoked function in the called module.	t
944	0	Layer 1	t
945	0	She encapsulates the connector qualities inside a higher level component.	t
946	0	It allows an undefined number of clients.	t
947	0	All the peers are equal.	t
948	0	But when the filters are executed sequentially the composition power is reduced.	t
949	0	Deployment style.	t
950	0	By interleaving the various processing phases of each\n      request in a sequential process	t
951	0	Publish-subscribe.	t
952	0	Client-server.	t
953	0	There is a message passing connector between the \\texttt{read} port of \\texttt{Queue} and the \\texttt{data points access} port of \\texttt{WebApp}.	t
954	0	In the Deployment view, because the presentation\n      component is now executing in a different place	t
955	0	The data-shared architectural style is not applied because data is encapsulated inside services.	t
956	0	A decomposition view.	t
957	0	This view highlights the availability of the \\texttt{Image File Storage}.	t
958	0	The quality addressed is availability.	t
959	1	Dealing with the technological aspects of the system should be delayed to the implementation stage of development.	t
960	2	Martin Fowler complains about this definition because architecture should stress flexibility which can only be necessary later.	t
961	0	This view highlights the availability of the system.	t
962	0	Should be avoided because scenarios should describe very concrete situations.	t
963	1	Is useful to support scenarios where the stimulus is an omission.	t
964	0	Should be avoided because scenarios should describe very concrete situations.	t
965	3	Reduces the availability scenario response time because the request occurs twice.	t
966	2	The modeling of a system is not part of the software architect duties.	t
967	2	Martin Fowler complains about this definition because architecture should stress flexibility which can only be necessary later.	t
968	3	This view highlights the scalability of \\texttt{upload} and \\texttt{dowload} operations.	t
969	2	This is a case of an architectural influence cycle where the feedback cycle resulted in changes on the business and project.	t
970	1	This shared understanding includes the architecturally significant requirements.	t
971	2	This view highlights the scalability of storage.	t
972	1	The request to adapt an interface is the stimulus.	t
973	0	These tactics cannot not be applied in conjunction with the self-test tactic.	t
974	0	These tactics cannot not be applied in conjunction with the self-test tactic.	t
975	0	This is a case of an architectural influence cycle where the feedback cycle resulted in changes on the business.	t
976	2	This view highlights the scalability of storage.	t
977	2	The system algorithms should be part of the shared understanding.	t
978	3	The data input to the system is the stimulus.	t
979	1	Solve the conflicts between requirements by deciding on the best trad-offs the system should support.	t
980	2	The hardware is an example of a software element.	t
981	0	This view highlights the availability of the \\texttt{Image File Storage}.	t
982	0	However, functional requirements do not have any impact on the architecture because the systemic qualities of an architecture are non-functional.	t
983	1	These tactics are used to prevent the occurence of a fault.	t
984	0	This view highlights the availability of the \\texttt{Image File Storage}.	t
985	3	The functional requirements can be considered as constraints on the software architecture design.	t
986	2	Facilitate the communication among the stakeholders such that they can decide on what are the architecturally significant requirements.	t
987	2	The hardware is an example of a software element.	t
988	3	Passive redundancy does not work with non-deterministic behavior of request's execution.	t
989	2	Prioritize events.	t
1172	2	But the exceptions tactic could have been used as well	t
990	1	Results in the creation of a third module that does not have to change when any of the original modules are changed.	t
991	2	During the design process the number of architecturally significant requirements cannot change.	t
992	1	The scenario is supported by a manage sampling rate tactic because several requests to the same graph return the same result.	t
993	0	It describes an availability scenario because the configuration allows to define redundant virtual servers.	t
994	0	It describes an availability scenario because the configuration allows to define redundant virtual servers.	t
995	0	In each iteration one or more architecturally significant requirements are used to decompose a software element of the system design.	t
996	2	Prioritize events.	t
997	2	It describes a usability scenario where the source of stimulus is a non-technical user.	t
998	3	Cannot be used together with the Reduce Overhead performance tactic.	t
999	1	Limit event response.	t
1000	2	This is not a modifiability scenario because the source of the stimulus cannot be a system administrator.	t
1008	3	Maintain multiple copies of computation.	t
1009	2	Increase resource efficiency and Increase resources.	t
1010	1	A low cost of change implies a low cost of development, because changing the code is part of development.	t
1011	2	This decision needs to be made concrete by an interoperability scenario.	t
1012	1	It describes a performance scenario for the execution of reads.	t
1013	0	A security scenario because it allows the introduction of filters to encrypt the messages.	t
1014	0	This decision does not have any impact on the architecture.	t
1015	0	It describes a reliability scenario because the data points for each metric will be split between a buffer and disk.	t
1016	2	Increase resource efficiency and Increase resources.	t
1017	2	A modifiability scenario where defer binding occurs at compile time.	t
1018	3	A high cost of change occurs if it is necessary to defer the binding of what needs to be changed.	t
1019	1	Project managers are not interested in views that use this style because it lacks the necessary level of detail.	t
1020	2	Voting.	t
1021	0	The library approach allows non-java applications.	t
1022	0	A component cannot be decomposed into a set of components and connectors.	t
1023	1	A shared-data style.	t
1024	0	A client-server style.	t
1025	3	Maintain multiples copies of computation.	t
1026	2	Incremental development is a criteria that drives the design of views of this type.	t
1027	2	The server approach implements a local cache.	t
1028	3	A component can only have a single type of port.	t
1029	2	The uses relation should be applied to the coarse-grained modules, because it allows to identify circular dependences.	t
1030	1	Introduce concurrency.	t
1031	2	Performance.	t
1032	1	A component type is made of a single architectural style.	t
1033	0	All the peers are equal.	t
1034	0	A component is an instance and a view can have several instances of the same component type.	t
1035	0	All the peers are equal.	t
1036	2	The uses relation should be applied to the coarse-grained modules, because it allows to identify circular dependences.	t
1037	2	Tailor interface.	t
1038	3	Scalability.	t
1039	1	A layer cannot call the layer above.	t
1040	2	Performance.	t
1041	0	Performance.	t
1042	0	The Merge component executes the module merge.	t
1043	1	Scalability of read requests, because it is easy add more repositories to where reads are distributed, though there may be some level of inconsistency.	t
1044	0	The Merge component executes the module merge.	t
1045	3	Reliability.	t
1046	2	Scalability of write requests, because a transactional system will synchronize the writes among the several repositories.	t
1047	2	Performance.	t
1048	3	It is possible to have a circular allowed-to-use relationship between several layers.	t
1049	2	Its enterprise service bus cannot support asynchronous communication between the components.	t
1050	1	It is useful for the project managers.	t
1051	2	Master-slave.	t
1052	1	A view of the component-and-connector viewtype.	t
1053	0	Peer-to-peer.	t
1054	0	A decomposition view.	t
1055	0	It assigns components and connectors to people and teams.	t
1056	2	Master-slave.	t
1057	2	Client-server where the Buildbot is the client.	t
1058	3	The typical communication pattern is point-to-point.	t
1059	1	Tiers, and Shared-data.	t
1060	2	Decomposition and Generalization.	t
1061	0	It assigns modules to the hardware.	t
1062	0	Client-server to represent performance.	t
1063	1	Client-server.	t
1064	0	Decomposition.	t
1065	3	Tiers, Shared-data, Service-oriented architecture, and Client-server.	t
1066	2	For each set of software elements there is a single possible assignment to hardwre.	t
1067	2	Shared-date.	t
1068	3	Shared-data to represent modifiability.	t
1069	2	Service-oriented architecture, Shared-data, and Peer-to-peer.	t
1070	1	It assigns modules to files.	t
1071	2	Peer-to-peer.	t
1072	1	The sharing of data is done using a service-oriented architecture.	t
1073	0	Peer-to-peer.	t
1074	0	The data-shared architectural style is not applied because data is encapsulated inside services.	t
1076	2	Service-oriented architecture, Shared-data, and Peer-to-peer.	t
1077	2	It is completely independent of the deployment architectural style.	t
1078	3	Shared-data.	t
1079	1	Do not have a software architecture, because in agile\n    methodologies there is no architectural design phase	t
1173	3	Is a set of diagrams that show the runtime elements of the\n  system and their relationships	t
1080	2	The functional requirements have a large impact on the definition of views of the module viewtype because they are used to define the high cohesion and low coupling of modules	t
1081	0	The stimulus is incorrect response	t
1082	0	Programming, if the components execute modules developed by different teams	t
1083	1	Usability	t
1084	2	Reduce overhead	t
1085	3	May be easily changed to increase their performance	t
1086	1	Encapsulate	t
1087	0	We must use various different views, both of the\n      component-and-connector and the allocation viewtypes	t
1088	0	Active replication and passive replication	t
1089	2	The views describe different aspects of the system	t
1090	0	Modifiability	t
1091	3	A view of the Uses style	t
1092	2	It separates in new modules responsibilities that were\n      spread over various of the system's modules	t
1093	3	Should use some operation defined in the lower layer	t
1094	1	Shared-data	t
1095	3	The stimulus is incorrect response and the tactic is voting	t
1096	3	The data model view in order to define generic entities that can be customized for different kinds of catalogs	t
1097	2	Only in a component-and-connector view	t
1098	2	When a peer receives a connection it sends all its files to the peer connecting it	t
1099	1	Which improves modifiability, because filters are decoupled through pipes	t
1100	2	To increase the performance of the interaction between\n      the components of the system	t
1108	0	The access to two different aggregate instances in the context of the same request does not hinder scalability	t
1109	0	Only in the Deployment view	t
1110	3	The behavior described in the sentence can be represented in a view where the tier architectural style is used	t
1111	2	But the size of buffers may reduce the composition power	t
1112	2	To increase the performance of the interaction between\n      the components of the system	t
1113	3	Implementation views	t
1114	0	Communicating Processes	t
1115	1	Do not have a software architecture, because in agile\n    methodologies there is no architectural design phase	t
1116	3	The functional requirements can be considered as constraints on the software architecture design	t
1117	3	The quality it addresses is interoperability	t
1118	3	All the previous options	t
1119	2	Availability	t
1120	0	Manage sampling rate	t
1121	0	Have high throughput	t
1122	0	Split module	t
1123	1	Shared-data	t
1124	1	The stimulus is a crash and the tactic is retry	t
1125	1	The layered view to accommodate a new layer for each kind of catalog, which other layers may use	t
1126	2	The quality being addressed is performance and the tactics multiple copies of data and multiple copies of computation	t
1127	0	Tiers style	t
1128	1	Easier to scale development	t
1129	0	The shared-data architectural style is not applied because data is encapsulated inside services	t
1130	3	an ACID transaction occurs in the invoked application and ACID transactions in the other involved applications will eventually occur later	t
1131	2	It describes the typical behavior of a microservices system	t
1132	2	We just have to show, through Deployment views,\n      that the \\emph{DataNode} component executes in more than one\n      machine of the cluster	t
1133	3	Quorum, active replication, and passive replication	t
1134	0	Different stakeholders are interested in different views of the system	t
1135	1	Usability	t
1136	3	A view of the Uses style	t
1137	3	It allows the decomposition of each of the system's\n      modules into finer grained modules	t
1138	3	Should use some operation defined in the lower layer	t
1139	2	Is a set of guidelines that the developing team should\n  follow in the development of the system	t
1140	1	Describing a set of steps that a user of the system must\n  perform to accomplish some task	t
1141	2	The scenario is correct but it is not clear what is the artefact	t
1142	1	Only in the Decomposition view	t
1143	0	Performance	t
1144	0	Manage sampling rate	t
1145	3	To implement the above scenario it is necessary to apply a runtime defer binding tactic	t
1146	2	Restrict dependencies	t
1147	0	Essential to ensure the system scalability	t
1148	3	To inform other DataNodes about their availability	t
1149	2	A view may not contain any architectural style	t
1150	0	A module view	t
1151	3	The Decomposition and the SOA styles	t
1152	1	The Deployment style	t
1153	2	The Layers style	t
1154	0	Interoperability	t
1155	2	Use an active redundancy tactic in the OPC (Order Processing Center) 	t
1156	3	The domain layer of the layered style to represent the types of devices	t
1157	2	Only views of the component-and-connector viewtype and allocation viewtype are needed	t
1158	3	The price for high scalability and availability is the need to have several replicas of the files to be shared	t
1159	2	The web browser, o web server, and the data base	t
1160	1	Work assignment	t
1161	2	The enterprise service bus coordinates the execution of several services	t
1162	1	Install view	t
1163	0	Write a single scenario on performance	t
1164	0	Module viewtype	t
1165	3	It is necessary to use views of the three viewtypes	t
1166	2	It is not necessary to have transactional properties because all data is in memory	t
1167	0	When an event is published to the distributed log, the order of delivery to the different subscribing applications is predefined	t
1168	3	It does not allow high scalability	t
1169	0	The stimulus is to port the system to a new browser	t
1170	0	Split module	t
1171	2	Essential to ensure the system portability	t
1174	3	Describing the system's features by way of different\n  usage scenarios for it, in which users play the role of actors	t
1175	1	The scenario is correct but it does not describe whether the request the servers fails to respond to succeeds or fails	t
1176	3	Both in a component-and-connector and the Deployment\n      views	t
1177	0	Performance	t
1178	3	Bound execution times	t
1179	1	The traditional web applications, the mashups, and the rich internet applications (RIAs)	t
1180	2	The enterprise service bus coordinates the execution of several services	t
1181	0	Work assignment view	t
1182	1	Write two scenarios on performance	t
1183	0	Module viewtype	t
1184	0	Each view contains a single architectural style	t
1185	3	They are not represented by a view	t
1186	1	The Decomposition and the Layers styles	t
1187	1	The Deployment style	t
1188	0	The Generalization style	t
1189	0	Interoperability	t
1190	0	Use a passive redundancy tactic in the OPC (Order Processing Center)	t
1191	2	The layered view to include a layer for each type of device	t
1192	2	Only views of the component-and-connector viewtype and allocation viewtype are needed	t
1193	3	The price for high scalability and availability is the need to have several replicas of the files to be shared	t
1194	3	It is necessary to use views of the three viewtypes	t
1195	1	Only a small set of functionalities are transactional	t
1196	3	The distributed log may not deliver some of the events that are published to their subscribers	t
1197	0	It allows high scalability because the data model has only four entities	t
1198	3	None, because this description does not describe any architectural aspect of the system	t
1199	1	Depends more on the architect's experience than on anything else	t
1200	2	The tweet unique ID is written in the home timeline of each one of the writer's followers	t
1202	0	This solution optimizes the performance in terms of the latency of each request	t
1203	1	When a new block is created, the second replica is not stored in the same rack than the first replica to increase the availability when a Data Node fails	t
1204	0	When a new block is created, the first replica is written in the node where the writer is located, to improve availability	t
1206	2	Can omit some of the elements like, for instance, the environment, if they are not relevant for the general scenario	t
1207	2	The tweet unique ID is written in the home timeline of each one of the writer's followers	t
1208	3	This solution optimizes the performance in terms of the throughput of processed requests	t
1209	2	What should be the system response in the occurrence of a stimulus	t
1210	1	This is wrong because you can easily change these decisions during the project lifetime	t
1211	2	The Early Bird server contains the tweet content	t
1212	1	In this solution the clients invocations have to be synchronous	t
1213	0	The periodic rebuild of the checkpoint is done to increase the availability of the NameNode	t
1214	0	The periodic rebuild of the checkpoint is done to increase the availability of the NameNode	t
1215	0	A non-functional requirement a system has to achieve	t
1216	2	The Early Bird server contains the tweet content	t
1217	2	This is right but you cannot be completely sure whether the decisions are the right ones	t
1218	3	This solution allows the dimensioning of the number of activities (threads or processes) that run in the server, taking into consideration the server's hardware capacity, in order to have a efficient usage of the server's CPU	t
1219	1	Is useful to support scenarios where the stimulus is an omission	t
1220	2	Allow many simultaneous users	t
1221	0	When the environment is design time it means that the change should be done before the system enters into production	t
1223	1	Performance qualities only	t
1224	0	When the environment is design time it means that the change should be done before the system enters into production	t
1225	3	Security	t
1226	2	Availability qualities only	t
1227	2	Can guarantee that the system will not become unavailable	t
1228	3	May be easily changed to increase their storage capacity	t
1229	2	The Voting tactic	t
1230	1	Limit event response	t
1231	2	Refactor the common parts between the business logic and the remote invocation	t
1232	1	Usability	t
1233	0	The system would respond faster to all the\n      clients' requests	t
1234	0	Encapsulate the module such that the clients of the module should not be aware of the remote invocations	t
1235	0	Usability and Performance	t
1236	2	The system would respond faster to requests about\n      file locations	t
1237	2	Prioritize events	t
1238	3	The Removal from Service tactic	t
1239	1	The project manager uses this view to get advice on the incremental development of the system	t
1240	2	The uses view to show the uses relationships between the different platforms	t
1241	0	A module contains the code that executes in a single component and a component executes the code of a single module	t
1242	0	This means that in this software system it is not possible to modularize each responsibility in a cohesive module	t
1243	1	The view addresses the scenario because it separates the \\texttt{Consumer Website} module from the \\texttt{OpcApp} module	t
1244	0	The layered view to deal with the aspects of portability	t
1245	3	A module contains the code that can execute in several components and a component can execute the code of several modules	t
1246	2	The uses relation should be applied to the coarse-grained modules, because it allows to identify circular dependences	t
1247	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement	t
1248	3	She should try to use a view of the Layered style and assign this responsibility to a module in the bottom layer that can be used by all the other modules	t
1249	2	A change of the decomposition view to include a set of new modules with the responsibilities associated with the access control	t
1250	1	The invoked function may not have any input parameter	t
1251	2	Each layer defines a virtual machine because it provides a set of cohesive functionalities to the upper layer	t
1252	1	It is enough to design a view of the Data Model architectural style at the conceptual level because Facebook information has a very simple structure	t
1253	0	The view does not address the scenario	t
1254	0	The modules inside a layer cannot use other modules in the same layer	t
1255	0	A change to the uses view to represent that friends can use each other catalog	t
1256	2	The invoked function may not have any output parameter	t
1257	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement	t
1258	3	It is necessary to design a view of the Data Model architectural style at the physical level to deal with performance and consistency issues of the access to data	t
1259	1	May, on another view of the system, be represented by a set of components\n        and connectors	t
1261	0	Applies layers to tiers	t
1262	0	Client-server	t
1263	1	Service-oriented architecture, and Shared-data	t
1264	0	Service-oriented architecture, and Client-server	t
1265	3	Defines tiers as components	t
1266	2	Represent the dependency relations that exist among the various components	t
1267	2	Client-Server	t
1268	3	Pipes-and-Filters	t
1269	2	It represents a relation between a component's port and a port of one of its internal components	t
1270	1	A Allocation viewtype view	t
1271	2	The events should be delivered by the same order they are sent	t
1272	1	Communicating-Processes	t
1273	0	Tiers	t
1274	0	Tiers	t
1275	0	A component can subscribe to events	t
1276	2	Tiers	t
1277	2	It represents a relation between a component's port and a port of one of its internal components	t
1278	3	A Install view	t
1279	1	An error.	t
1280	2	Change level of service.	t
1281	0	Split module.	t
1282	0	Decomposition style.	t
1283	1	The Decomposition and Uses styles.	t
1284	2	If there is some technology available that implements the complex connectors it is not necessary to document their decomposition.	t
1285	3	The Client-Server style.	t
1286	1	This solution allows an "infinite"\\ increase of the number clients by allowing the inclusion of more Request Nodes.	t
1287	0	Decomposition.	t
1288	0	Aggregate.	t
1289	2	This view \\textbf{does not} show that the \\texttt{Adventure Builder Catalog DB} and the \\texttt{OPC} components can execute behind a firewall.	t
1290	0	Pipe-and-filter.	t
1292	2	The uses relation should be applied to the coarse-grained modules, because it allows to identify circular dependences.	t
1293	3	The behavior described in the sentence can be represented in a view where the tier architectural style is used.	t
1294	1	Planning incremental releases of the system.	t
1295	3	All layers are mapped to the browser component where the data access layer will contains, besides a module to access a local repository, modules to access external services.	t
1296	3	Reimplement all the information systems of the organization	t
1297	2	An aggregate has runtime references to other aggregates.	t
1298	2	Eliminates any long-term commitment to a technology stack	t
1299	0	Whenever complex connectors are used in architectural views it is necessary to also document their decomposition.	t
1300	3	The Client-Server style.	t
1313	1	Maintain multiple copies of data.	t
1314	1	Ping-and-echo tactic	t
1315	1	The project manager uses this view to get advice on the incremental development of the system.	t
1316	2	When a peer receives a connection it sends all its files to the peer connecting it.	t
1317	0	Analysing the performance of the system.	t
1318	1	The presentation and domain logic layers are mapped to the application server component and the data access layer to the repository component.	t
1319	2	Voting.	t
1320	1	Reduce overhead.	t
1321	2	The new defects introduced.	t
1322	1	The uses view to represent how the mobile device uses the Catalog application	t
1323	0	The \\emph{config} module is not used in the implementation of any component.	t
1324	0	Split module.	t
1325	3	Publish-Subscribe.	t
1326	2	Performance and Availability for crashes of the Image File Storage component.	t
1327	0	Usability and Performance.	t
1328	3	It allows to estimate the cost of hardware.	t
1329	2	Three.	t
1330	0	The cost of the modification.	t
1331	3	It is necessary to design a view of the Data Model architectural style at the physical level to deal with performance and consistency issues of the access to data.	t
1332	1	The Client-Server style.	t
1334	0	Pipe-and-filter and tiers.	t
1335	2	Do not loose the changes done on the client component if the server is not available.	t
1336	3	Results from the application of several ADD iterations.	t
1337	2	As the number of orders grows it will be increasingly expensive to load the aggregate.	t
1338	3	It is necessary to use views of the three viewtypes.	t
1339	0	It would reduce the scalability for updates of different orders for the same customer.	t
1340	0	Increase competence set.	t
1341	2	Bound queue sizes.	t
1342	2	The component-and-connector view should emphasize the performance qualities of systems following the microservices architecture.	t
1343	3	Defer binding.	t
1344	3	The domain layer of the layered style to represent the types of devices	t
1345	1	Usability.	t
1346	3	It allows to estimate the cost of hardware.	t
1347	0	Performance.	t
1348	3	Four.	t
1349	1	That the integration of a new source will not have any impact on the other modules of the Catalog of DVDs.	t
1350	2	It is enough to design a view of the Data Model architectural style at the logical level because the information will be stored in a relational database.	t
1351	0	The Decomposition style.	t
1352	1	This view shows that the processing of tracking requests is done synchronously.	t
1353	0	Results from a utility tree for performance.	t
1354	0	Pipe-and-filter and tiers.	t
1355	3	It completely hides the server faults from the Pad user.	t
1356	1	Abstract common services.	t
1357	1	Pipe-and-Filter.	t
1358	0	The \\emph{config} module is not used in the implementation of any component.	t
1359	1	Performance of the tasks execution, scheduling of tasks can be optimized for the particular context of the system	t
1360	2	A common understanding to be achieve among all the system stakeholders	t
1361	0	Commercial	t
1362	0	Availability of the Image Write Service, whenever one of the Image Write Service components crashes	t
1363	1	The stimulus is periodic	t
1364	0	The result of decisions that are made at the "upper floors" of the organization	t
1365	3	The measure of the response is throughput	t
1366	2	Project	t
1367	2	Availability of the Image File Storage, whenever the Image File Storage component crashes	t
1368	3	Simple programming model, the clients only need to concern about the business logic of the application, the remote services are transparent	t
1369	2	That the use of XML technology for interoperability is not a correct decision	t
1370	1	Availability	t
1371	2	Both components, the Image Write Service and the Image Retrieval Service, should be designed using an synchronous model of interactions, where a thread is associated with each request	t
1372	1	The asynchronous solution can support a larger number of simultaneous requests	t
1373	0	Introduce concurrency	t
1374	0	The synchronous solution requires less memory than asynchronous solution	t
1375	0	Interoperability is a quality that as lower priority than performance	t
1376	2	Modifiability	t
1377	2	Both components, the Image Write Service and the Image Retrieval Service, should be designed using an synchronous model of interactions, where a thread is associated with each request	t
1378	3	Schedule resources	t
1379	1	Provides the quality of performance	t
1380	2	The need to have eventual consistency and compensating operations	t
1381	0	Time to market is the most important impact of cloud computing in an architecture	t
1382	0	In the synchronous solution only some of the tasks that are being executed are lost and they have to be resubmitted by the client	t
1383	1	Bound execution times	t
1384	0	In the synchronous solution only some of the tasks that are being executed are lost and they have to be resubmitted by the client	t
1385	3	Does not provide any additional quality	t
1386	2	The need to have eventual consistency and compensating operations	t
1387	2	Maintain multiple copies of computation	t
1388	3	Using cloud computing we cannot delay some architectural decisions	t
1389	2	Voting.	t
1390	1	Results in the creation of a third module that makes the original modules independent.	t
1391	2	Results from the application of a single ADD iteration.	t
1392	1	Project managers are not interested in views that use this style because it lacks the necessary level of detail.	t
1393	0	Task Model tactics.	t
1394	0	Its main goal is to establish the reusability qualities of the architecture.	t
1395	0	Task Model tactics.	t
1396	2	Voting.	t
1397	2	Increases the cohesion between the two modules.	t
1398	3	Results from the application of several ADD iterations.	t
1399	1	Hardware, if there is hardware redundancy.	t
1400	2	This is not a modifiability scenario because the source of the stimulus cannot be a system administrator.	t
1406	2	The cost of meeting the ASR after development starts is too high.	t
1407	2	This is not a modifiability scenario because the source of the stimulus cannot be a system administrator.	t
1409	2	Prevent a fault in a process.	t
1410	1	A low cost of change implies a low cost of development, because changing the code is part of development.	t
1411	2	Is a top-down process where a initial decomposition is chosen and it is successively decomposed without changing the initial decisions.	t
1412	1	Views need to contain more than one architectural style.	t
1413	0	The quality addressed is availability and transactions tactic is required to solve the problem.	t
1414	0	Is driven by functional requirements.	t
1415	0	Each view contains a single architectural style.	t
1416	2	The quality addressed is availability and a voting design tactic is required to solve the problem.	t
1417	2	Prevent a fault in a process.	t
1418	3	The cost of change is higher if it occurs at runtime.	t
1419	1	The Generalisation style.	t
1420	2	Service-oriented architecture, Shared-data, and Client-server.	t
1421	0	The view does not address the scenario	t
1422	0	It corresponds to a particular case of a specialization in a generalization view.	t
1423	1	Which improves modifiability, because filters are decoupled through pipes.	t
1424	0	Service-oriented architecture, and Client-server.	t
1425	3	The Shared-data style.	t
1426	2	It represents a relation between a component's port and a port of one of its internal components.	t
1427	2	But the size of buffers may reduce the composition power.	t
1428	3	The view addresses the scenario because the \\texttt{Consumer Website} module does not use the interfaces a new business partner has to implement.	t
1429	2	The events should be received by the same order they are sent.	t
1430	1	If the OPC crashes the Consumer Website can continue to provide service in normal mode.	t
1431	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement.	t
1432	1	Components of different types may have ports of the same type.	t
1433	0	The Decomposition style.	t
1434	0	If the OPC crashes the Consumer Website can continue to provide service in degraded mode.	t
1435	0	A component can subscribe to events.	t
1436	2	The Uses style.	t
1437	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement.	t
1438	3	The attachment between components and connectors only depends on their ports and roles types.	t
1440	2	Shared-data.	t
1441	0	The view does not address the scenario	t
1442	0	Modifiability.	t
1443	1	The peer initiating the request for a file needs to know where the file is located.	t
1444	0	Client-server.	t
1445	3	Modifiability is not made easier by a layered architecture.	t
1446	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement.	t
1447	2	If a peer providing a file crashes the file will not be downloaded.	t
1448	3	Maintainability and Availability.	t
1449	2	Is an extension of the Client-Server architectural style.	t
1450	1	The decomposition was driven by a quality that is supported by a restrict dependencies tactic.	t
1451	2	An availability scenario associated with a fault in the \\emph{Carbon} component.	t
1453	0	Simplifies the evolution of the event schema.	t
1454	0	A performance scenario associated with the throughput of writing data points to disk.	t
1455	0	Simplifies the evolution of the event schema.	t
1456	2	Is an extension of the Client-Server architectural style.	t
1457	2	The decomposition was driven by a split module tactic.	t
1458	3	Native applications provide better support for working offline.	t
1459	1	Tiers.	t
1460	2	The view results from the implementation of a support user initiative tactic.	t
1461	0	A modifiability scenario the \\emph{Graphite} system.	t
1462	0	A request for a web page corresponds to a peer-to-peer interaction between all the web components containing the resources.	t
1463	1	She should decide to use a modular monolith architecture to reduce the cost of development, because developers will not need to define intermediate states for the transactional execution of the business logic.	t
1464	0	A modifiability scenario the \\emph{Graphite} system.	t
1465	3	It is possible to customize the number of threads that run in the mobile device.	t
1466	2	She should try to split the system in parts in order to isolate the complex business logic and use the two architectural approaches accordingly.	t
1467	2	Communicating Processes.	t
1468	3	The view results from the implementation of a support system initiative tactic.	t
1469	2	A deployment and a work assignment view.	t
1470	1	This view fulfills an availability scenario, which defines the expected behavior whenever an external source is not available.	t
1471	2	A single performance scenario of the \\emph{Graphite} system.	t
1472	1	An iterative development was followed, which allowed more time to develop a connector with good performance in the latter stages of the project.	t
1473	0	Does not allow optimizations according to the type of query.	t
1474	0	Performance was traded for easy of development to reduce the overall development costs.	t
1475	0	A deployment view.	t
1476	2	This view fulfills a modifiability scenario, which states about the cost of adding a new source of information to the system.	t
1477	2	A single performance scenario of the \\emph{Graphite} system.	t
1478	3	Querying the event sourcing becomes more complex.	t
\.


--
-- Data for Name: question_has_topic; Type: TABLE DATA; Schema: public; Owner: pedro
--

COPY public.question_has_topic (topic_id, question_id, votes, score) FROM stdin;
\.


--
-- Data for Name: questions; Type: TABLE DATA; Schema: public; Owner: pedro
--

COPY public.questions (id, name, new_id, content, difficulty) FROM stdin;
2	AtrQualNegocio	\N	There are other factors that affect the development of a software\n  system, besides its functional requirements and quality attributes.\n  For example, factors such as budget or available time.  These factors	\N
3	Reutilizar	\N	Suppose that you are developing a new software system and that you\n  want some part of the system's functionality to be easily reusable\n  in future systems.  Which of the following architectural styles are\n  more suitable to show that the system architecture meets this\n  requirement.	\N
4	AumentarDesempenhoClienteServidor	\N	Suppose you have a system with a client-server architecture that was\n  designed to support the simultaneous existence of at most 100\n  clients, without specific requirements for availability.  The\n  solution adopted and put into operation four years ago is a single\n  server component to which all clients connect to.  This solution\n  satisfies the initial requirements but with the recent increase in\n  the maximum number of clients to 200, the system no longer has\n  acceptable performance.  Not knowing anything else about the\n  system's architecture, which solution do you propose to solve the\n  system's performance problems?	\N
5	TresTiposVista	\N	According to the SEI model, there are three different architectural\n  viewtypes that are usually necessary to describe completely a\n  software architecture.	\N
8	ArchitecturalDrivers	\N	The requirements for complex systems are usually very numerous and\n  conflicting among them, making it impossible to satisfy all the\n  requirements in a given implementation of the system.  Therefore,\n  the recommended process for making the design of a software\n  architecture involves the identification of the \\emph{architectural\n    drivers} that will shape the design of architecture.  These\n  \\emph{architectural drivers} should be chosen so that they are	\N
9	ArqEmailMTA	\N	The email system is composed of various types of components playing\n  different roles.  For example, to send an email, a user can use a\n  program such as Microsoft Outlook or Mozilla Thunderbird,\n  generically designed a \\emph{mail user agent} (MUA), to compose his\n  message and send it.  To send the message, the MUA typically\n  connects to a \\emph{mail transfer agent} (MTA) that receives the\n  message, analyzes the message's headers to determine the recipients\n  and, after querying the DNS system to determine the MTA responsible\n  for each recipient, it connects to the MTAs responsible for the\n  destination addresses to deliver the message.  Each of these MTAs\n  receives the message and stores it locally or forwards it to others\n  MTAs (for example, when there are forwards or aliases configured, or\n  when the MTA that receives the message is not the ultimately\n  responsible for the email address of the recipient).\n\n  Given this simplified description of the operation of the email\n  system, which of the following architectural styles is more\n  appropriate to represent the pattern of interaction between the\n  MTAs?	\N
10	ArqEmailIMAP	\N	Considering yet the example of the email system, MUAs are used not\n  only to compose and to send messages, but also for users to read the\n  email messages sent to them. For this, the MUAs have to get those\n  messages from the component that stores them to show them to the\n  user.  Two different ways of doing this is by using the POP and IMAP\n  protocols.  In the first case, messages are moved from the POP\n  server to the user's computer.  In second case, the messages are\n  always stored on the IMAP server, allowing the user to access email\n  from different computers, as long as they are able to connect to the\n  same IMAP server.\n\n  Which of the following architectural styles is more appropriate to\n  represent the pattern of interaction between the MUAs and a IMAP\n  server?	\N
11	AlteracaoWebDois	\N	The recent developments in web applications that made them provide a\n  richer user interface led to a change in its architecture: part of\n  the application's computation has to be done in the web browser used\n  by users to access the application.  How is this change in the\n  architecture manifested in the different types of views that\n  describe the software architecture of a web application?	\N
12	XBoardChess	\N	Given the complexity of building a good automatic Chess player,\n  programs that play chess usually make use of existing chess engines,\n  as shown by the following excerpt from Wikipedia:\n \\begin{quote}\n    A chess engine is a computer program that can play the game of\n    chess.\n\n    Most chess engines do not have their own graphical user interface\n    (GUI) but are rather console applications that communicate with a\n    GUI such as XBoard (Linux) and WinBoard (Windows) via a standard\n    protocol.\n  \\end{quote}\n\n  In the web page for XBoard, we may read the following:\n \\begin{quote}\n    XBoard is a graphical user interface for chess [...]. It displays\n    a chessboard on the screen, accepts moves made with the mouse, and\n    loads and saves games in Portable Game Notation (PGN). It serves\n    as a front-end for many different chess services, including:\n\n    \\begin{itemize}\n    \\item Chess engines that will run on your machine and play a game\n      against you or help you analyze, such as GNU Chess, Crafty, or\n      many others.\n    \\item [...]\n    \\end{itemize}\n  \\end{quote}\n \n  Given the above information on XBoard, chess engines, and how they\n  interact at runtime, which of the following architectural styles\n  best represents the of architecture of a software system based on\n  XBoard and one of the engines?	\N
13	AlterarFuncionalidadesExistentes	\N	Suppose that you join the development team of a very large software\n  system, and that you are assigned some tasks to change some existing\n  features.  Which of the following architectural views would be, in\n  principle, more useful to you to perform those tasks quickly?	\N
14	BlackBoxTesting	\N	Consider the following excerpt from the Wikipedia page on\n  \\emph{black-box testing}:\n  \\begin{quote}\n    Black-box testing is a method of software testing that tests the\n    functionality of an application as opposed to its internal\n    structures or workings.  Specific knowledge of the application's\n    code/internal structure and programming knowledge in general is\n    not required.  Test cases are built around specifications and\n    requirements, i.e., what the application is supposed to do.\n  \\end{quote}\n  \n  Assuming that you belong to the team testing a complex system and\n  that you are responsible for performing black box tests on the\n  system, which of the following architectural views of the system\n  would be most useful to you?	\N
61	GHCStakeholdersINGLES	\N	Two of the \\emph{stakeholders} for the \\ghc{} were the UK\n    government and the researchers that want to do research on\n    functional programming languages.  Which of these\n    \\emph{stakeholders} had a more significant influence in the\n    software architecture of the system?	\N
15	TrocarBDCamadas	\N	Consider an enterprise application that needs to keep its data\n  persistently, but for which no one knows yet what is the volume of\n  information that will be handled by the application.  Therefore, the\n  system's architect intends to develop the system such that it is\n  possible to change easily the relational database (RDBMS) component\n  used to store the application's data, replacing it with an RDBMS\n  from another manufacturer.  Given that this is a common requirement,\n  the recommended software architecture for such applications fulfills\n  this requirement by using a particular architectural style.  Which\n  style is it?	\N
16	GoogleAppEngine	\N	Suppose that you decided to use the Google App Engine (GAE) in the\n  development of a web application.\n\n  The GAE is described in the Wikipedia as follows:\n  \\begin{quote}\n    Google App Engine is a platform for developing and hosting web\n    applications in Google-managed data centers.\n\n    Google App Engine is cloud computing technology.  It virtualizes\n    applications across multiple servers and data centers. [...]\n\n    Google App Engine is free up to a certain level of used resources.\n    Fees are charged for additional storage, bandwidth, or CPU cycles\n    required by the application.\n  \\end{quote}\n  \n  On the other hand, the GAE documentation reads the following:\n  \\begin{quote}\n    With App Engine, you can build web applications using standard\n    Java technologies and run them on Google's scalable\n    infrastructure.  The Java environment provides a Java 6 JVM, a\n    Java Servlets interface, and support for standard interfaces to\n    the App Engine scalable datastore and services, such as JDO, JPA,\n    JavaMail, and JCache.  Standards support makes developing your\n    application easy and familiar, and also makes porting your\n    application to and from your own servlet environment\n    straightforward.\n  \\end{quote}\n\n  Taking into account these two perspectives on the GAE, which\n  architectural styles are more appropriate to represent the use of\n  GAE in the software architecture of your web application?	\N
17	PluginsEclipse	\N	The Eclipse IDE is an open source application written in Java, and\n  is extensible through the use of plug-ins.  In the document that\n  describes the existing plug-ins architecture in Eclipse, we may read\n  the following:\n\n \\begin{quote}\n    A plug-in in Eclipse is a component that provides a certain type\n    of service within the context of the Eclipse workbench. [...]  The\n    plug-in class provides configuration and management support for\n    the plug-in.  A plug-in class in Eclipse must extend\n    \\texttt{org.eclipse.core.runtime.Plugin}, which is an abstract\n    class that provides generic facilities for managing plug-ins.\n  \\end{quote}\n\n  Considering the model and terminology used in the course to describe\n  a software architecture, what kind of views are more appropriate to\n  represent the plug-ins architecture of Eclipse described above?	\N
18	ServiceLayer	\N	When someone uses the Domain Model pattern to implement the domain\n  logic layer of an enterprise application, it is common to use also\n  the Service Layer pattern. The Service Layer pattern is used in\n  these cases	\N
19	UnitOfWork	\N	The Unit of Work pattern is often used in enterprise applications	\N
20	IdentityMap	\N	The Identity Map pattern is typically used in enterprise\n  applications	\N
21	HadoopEscalabilidadePossivelINGLES	\N	The scalability quality is achieved in the Hadoop system only because	\N
22	HadoopDisponibilidadeDesempenhoINGLES	\N	In the Hadoop system:	\N
23	HadoopTacticasRecuperacaoFaltasINGLES	\N	In the Hadoop system the fault recovery tactics are:	\N
24	HadoopTacticasRecuperacaoFaltasDoisINGLES	\N	In the Hadoop system the tactics used to reintroduce a DataNode after its failure are:	\N
25	HadoopTacticasSegurancaINGLES	\N	The security tactics used in The Hadoop system deployed at Yahoo! are:	\N
26	HadoopHeartbeatINGLES	\N	During normal operation DataNodes use the heartbeat tactic	\N
27	ModulosCamadasINGLES	\N	A layer, in the layers architectural style, is a module:	\N
28	UtilizacaoImpactoAlteracoesINGLES	\N	The uses architectural style allows to assess the impact of changes in modules	\N
29	UtilizacaoNotificaINGLES	\N	In the uses architectural style a call does not necessarily\n    correspond to a uses relationship because:	\N
30	UtilizacaoNotificaDoisINGLES	\N	According to the attribute-driven design process, we should design\n    the software architecture for a system based on a selected list of\n    requirements, which are called the \\textit{architectural drivers}.\n    These architectural drivers should be sorted according to their\n    importance for the system's stakeholders because	\N
31	HadoopInteraccaoDataNodesINGLES	\N	In the HDFS system, the main responsibility of the DataNode\n    component is to store the data blocks corresponding to the\n    client's files, and usually there are several instances of this\n    component on each system.  The architectural style that best\n    describes the interaction pattern among the various instances of\n    DataNode is	\N
32	HadoopInteraccaoNameNodeDataNodesINGLES	\N	According to Section 8.2.3, the NameNode component issues commands\n    to the DataNodes so that they execute some operations on their\n    blocks, whereas DataNodes have to send reports regularly to the\n    NameNode.  The architecture that best describes how these two\n    types of components interact in the HDFS system is	\N
33	HadoopNameNodeComoConectorINGLES	\N	Imagine that you intend to describe how a client reads a file from\n    an HDFS system while supporting sporadic failures in the hardware\n    of some DataNodes, but without affecting the availability of the\n    system.  To accomplish that, you want to use a\n    component-and-connector view containing only two types of\n    components: the HDFS Client, and the DataNode.	\N
34	HadoopNameNodeThreadsINGLES	\N	The last paragraph of Section 8.2.2 describes the solution used by\n    the NameNode to obtain a certain level of performance while\n    writing to disk.  Which architectural style is more adequate to\n    represent the solution used?	\N
36	ServiceLayerINGLES	\N	When someone uses the Domain Model pattern to implement the domain\n    logic layer of an enterprise application, it is common to use also\n    the Service Layer pattern. The Service Layer pattern is used in\n    these cases	\N
37	SharedDataAccessorsDirectINGLES	\N	Imagine that you are developing an architectural view where you\n    are using the Shared Data style and that a member of your team\n    proposes that two of Data Accessors communicate directly between\n    them.  In your opinion	\N
130	CHPerformanceQualityINGLES	\N	In \\ch{} it is possible to associate a Renderer Process to each Tab, which results in the increase of performance due to a tactic of	\N
387	ComponentViewType	\N	The quality(ies) that is(are) more relevant to views of the component-and-connector viewtype is(are):	\N
41	HadoopStakeholdersEurosINGLES	\N	From the stakeholders perspective the use of low cost servers to build the clusters is:	\N
42	HadoopCheckpointBackupNodeINGLES	\N	In the Hadoop system the use of a \\emph{BackupNode} instead of a \\emph{CheckpointNode}:	\N
43	HadoopCheckpointINGLES	\N	In the Hadoop system when the \\emph{CheckpointNode} and the \\emph{NameNode} are deployed in different nodes, the \\emph{CheckpointNode} provides:	\N
44	HadoopPoliticaLocalizacaoReplicasINGLES	\N	The Hadoop system support of different block placement policies:	\N
45	HadoopPingINGLES	\N	In the Hadoop system, during normal operation, \\emph{NameNode}\n    could use a ping tactic to know whether \\emph{DataNodes} are available	\N
46	HadoopInstalacaoINGLES	\N	Knowing the deployment structure in the Hadoop system is critical\n    to the effective system operation. Therefore, for each deployment,\n    the administrator can configure a script that returns a node's\n    rack identification given a node's address (see section 8.3.2).	\N
47	TacticaCheckpointRollbackINGLES	\N	The \\emph{Checkpoint/rollback} tactic is a tactic for	\N
49	UsaCircularINGLES	\N	A view of the \\emph{Uses} style that contains a loop in the uses relationships	\N
50	UsaPodeUsarINGLES	\N	The main difference between the \\emph{Uses} relation of the Uses\n    style and the \\emph{Allowed to Use} relation of the Layers style	\N
51	HadoopFileWriteBufferedINGLES	\N	The third paragraph of section 8.3.1 describes the buffering\n    mechanism used by an HDFS client when it is writing to a file.\n    How would you describe this mechanism using an architectural view?	\N
54	HadoopComoDatabaseINGLES	\N	Suppose that you are implementing a web application and that you\n    decided to use an HDFS system to store the data of your\n    application---that is, your web application will be a client of\n    the HDFS system.  How does this decision affects the architecture\n    of your web application?	\N
55	HadoopCheckpointNodeINGLES	\N	Considering the description of the \\emph{CheckpointNode} made in\n    Section~8.2.5, which architectural style best represents the\n    interaction between the \\emph{CheckpointNode} and the\n    \\emph{NameNode} components?	\N
56	DomainModelINGLES	\N	\\emph{Domain Model} and \\emph{Transaction Script} are two of the\n    existing patterns to implement the domain logic layer of an\n    enterprise application.  Choosing one or the other	\N
57	RelacaoComponentesMaquinasINGLES	\N	Which of the following sentences best captures the restrictions\n    regarding which components may execute in which machines in the\n    Deployment style?	\N
60	SegurancaINGLES	\N	Suppose that you are designing the software architecture for an\n    enterprise application that has security requirements about the\n    confidentiality of some of its data.  To show to the stakeholders\n    that your system satisfies the security requirements you have to\n    use views of which architectural style?	\N
388	HammersNails	\N	In his article \\emph{On Hammers and Nails, and Falling in Love with Technology and Design} what is the main type of influence on the architecture?	\N
39	TresTiersINGLES	1179	Currently, the most popular architecture for an enterprise\n    application is composed of 3 tiers.  The three tiers are	\N
48	TiposVistaDesempenhoINGLES	1192	To analyse the performance of a system	\N
38	WhiteBoxTestingINGLES	1113	Consider the following excerpt from the Wikipedia page on\n    \\emph{white-box testing}:\n    \\begin{quote}\n      White-box testing is a method of testing software that tests\n      internal structures or workings of an application, as opposed to\n      its functionality. In white-box testing an internal perspective\n      of the system (including the module's code), as well as\n      programming skills, are required and used to design test\n      cases. The tester chooses inputs to exercise paths through the\n      code and determine the appropriate outputs.\n    \\end{quote}\n  \n    Assuming that you belong to the team testing a complex system and\n    that you are responsible for performing white box tests on the\n    system, which of the following architectural views of the system\n    would be most useful to you?	\N
52	HadoopDisponibilidadeDadosINGLES	1132	One of the key requirements for the HDFS system is that the data\n    stored in the system remains available, even in the presence of\n    various types of failures (non simultaneous) in the hardware in\n    which the system executes.  To show that the system satisfies this\n    requirement	\N
62	GHCChunksINGLES	\N	According to the document that describes the \\ghc{}:\n    \\begin{quote}\n      At the highest level, GHC can be divided into three distinct\n      chunks:\n      \\begin{itemize}\n      \\item The compiler itself.\n      \\item The Boot Libraries.\n      \\item The Runtime System (RTS). \n      \\end{itemize}\n    \\end{quote}\n    What is the most architecturally correct way of classifying the\n    three \\emph{chunks} that this text refers to?	\N
63	GHCDesugaringINGLES	\N	One of the most important decisions during the development of the\n    \\ghc{} was to perform the type-checking before the desugaring of\n    an Haskell program into a program in the Core language\n    (\\emph{type-check-before-desugar}).  This design decision	\N
64	GHCRTSINGLES	\N	According to the document that describes the \\ghc{}:\n    \\begin{quote}\n      The Runtime System is a library of mostly C code that is linked\n      into every Haskell program. It provides the support\n      infrastructure needed for running the compiled Haskell code,\n      including the following main components:\n      \\begin{itemize}\n      \\item Memory management, including a parallel, generational, garbage collector;\n      \\item Thread management and scheduling;\n      \\item The primitive operations provided by GHC;\n      \\item A bytecode interpreter and dynamic linker for GHCi.\n      \\end{itemize}\n    \\end{quote}\n    Which system qualities are improved by the design decision of\n    creating the Runtime System, described above?	\N
65	GHCPipeAndFilterINGLES	\N	Like many other compilers, the compilation of an Haskell program\n    with the \\ghc{} uses the Pipe-and-Filter style, creating a\n    \\emph{pipeline} composed of several compilation phases.  The goal\n    of using this architectural style in GHC is	\N
66	ZeroMQAppsINGLES	\N	Which of the following sentences better describes the ZeroMQ system?	\N
67	ZeroMQWorkersPerCoreINGLES	\N	According to the document that describes ZeroMQ:\n    \\begin{quote}\n      The idea was to launch one worker thread per CPU core---having\n      two threads sharing the same core would only mean a lot of\n      context switching for no particular advantage.\n    \\end{quote}\n    Which architectural style is more adequate to represent the\n    information presented above?	\N
68	ZeroMQMessagingPatternsINGLES	\N	According to the document that describes ZeroMQ:\n    \\begin{quote}\n      Messaging patterns form a layer (the so-called "scalability\n      layer") on top of the transport layer (TCP and friends).\n      Individual messaging patterns are implementations of this layer.\n    \\end{quote}\n    What is the main advantage of this layered architecture adopted by\n    ZeroMQ?	\N
69	ZeroMQBatchingINGLES	\N	ZeroMQ uses dynamic batching to control the performance of the\n    system.  The goal of this approach is	\N
70	ZeroMQLockFreeINGLES	\N	According to the document that describes ZeroMQ:\n    \\begin{quote}\n      ØMQ uses a lock-free queue in pipe objects to pass messages\n      between the user's threads and ØMQ's worker threads.  There are\n      two interesting aspects to how ØMQ uses the lock-free queue.\n      First, each queue has exactly one writer thread and exactly one\n      reader thread.  If there's a need for 1-to-N communication,\n      multiple queues are created.  Given that this way the queue\n      doesn't have to take care of synchronising the writers (there's\n      only one writer) or readers (there's only one reader) it can be\n      implemented in an extra-efficient way.\n    \\end{quote}\n    The architectural style that better represents the interaction\n    pattern described above is	\N
71	nginxFirstADINGLES	\N	The main architectural driver for the nginx system was	\N
72	nginxEventDrivenINGLES	\N	According to the document that describes nginx:\n    \\begin{quote}\n      Traditional process- or thread-based models of handling\n      concurrent connections involve handling each connection with a\n      separate process or thread, and blocking on network or\n      input/output operations.  nginx followed a different model.  It\n      was actually inspired by the ongoing development of advanced\n      event-based mechanisms in a variety of operating systems.  What\n      resulted is a modular, event-driven, asynchronous,\n      single-threaded, non-blocking architecture which became the\n      foundation of nginx code.\n    \\end{quote}\n    The decision of turning nginx into an \\emph{event-driven},\n    \\emph{asynchronous}, \\emph{single-threaded}, and\n    \\emph{non-blocking} system was made because	\N
74	nginxOSOptimizationsINGLES	\N	According to the document that describes nginx:\n    \\begin{quote}\n      While handling a variety of actions associated with accepting,\n      processing and managing network connections and content\n      retrieval, nginx uses event notification mechanisms and a number\n      of disk I/O performance enhancements in Linux, Solaris and\n      BSD-based operating systems, like kqueue, epoll, and event\n      ports.  The goal is to provide as many hints to the operating\n      system as possible, in regards to obtaining timely asynchronous\n      feedback for inbound and outbound traffic, disk operations,\n      reading from or writing to sockets, timeouts and so on.\n    \\end{quote}\n    The goal of this approach used in the development of nginx was	\N
75	nginxProcessThreadINGLES	\N	According to the document that describes nginx:\n    \\begin{quote}\n      Traditional process- or thread-based models of handling\n      concurrent connections involve handling each connection with a\n      separate process or thread, and blocking on network or\n      input/output operations.\n    \\end{quote}\n    The architectural style that better describes the model presented\n    above for processing requests is	\N
76	WebPartioningINGLES	\N	According to the document that describes the architecture of web\n    services (attached at the end of this document), one of the\n    approaches introduced in Section~1.2 is \\emph{partitioning}, shown\n    in Figure~1.4.  The use of \\emph{partitioning}	\N
77	WebPartitioningDoisINGLES	\N	Considering again the case of the previous question, compare the\n    architectures sketched in Figure~1.3 and Figure~1.4.  The\n    difference between the two shows	\N
78	WebRedundancyINGLES	\N	Consider again the architecture shown in Figure~1.3, where\n    redundancy was introduced into the system.  In this particular\n    case, introducing redundancy into the architecture has the goal of	\N
79	ThreeVsFourTiersINGLES	\N	The typical software architecture of an enterprise application is\n    composed of three tiers and three layers.  Yet, we may have\n    variations of this architecture.  For instance, by separating the\n    middle tier in two tiers.  In this case, which other changes exist\n    on the architecture that are related with the layers?	\N
80	WebLoadBalancerINGLES	\N	According to the document that describes the architecture of web\n    services:\n    \\begin{quote}\n      Another critical piece of any distributed system is a load\n      balancer.  Load balancers are a principal part of any\n      architecture, as their role is to distribute load across a set\n      of nodes responsible for servicing requests.  This allows\n      multiple nodes to transparently service the same function in a\n      system.  Their main purpose is to handle a lot of simultaneous\n      connections and route those connections to one of the request\n      nodes, allowing the system to scale to service more requests by\n      just adding nodes.\n    \\end{quote}\n    Based on this description, what is the best way to represent the\n    architecture of a system that is using a \\emph{load balancer}?	\N
81	DomainLogicFenixINGLES	\N	The first architecture of the Fénix system, corresponding to its\n    first years of development, could be described as a three-layered\n    architecture, typical of an enterprise application.  One of those\n    layers was the \\emph{domain logic} layer.  Which of the following\n    sentences best describes the Fénix architecture in what concerns\n    that layer?	\N
82	IncrementalReleasesINGLES	\N	To achieve a faster time-to-market, software companies are\n    increasingly using a strategy of incremental releases of their\n    software, where each new release has a set of new features.  Which\n    architectural style is better to analyse whether the system's\n    software architecture is adequate for the planned incremental\n    releases?	\N
86	ChromiumDecompositionINGLES	\N	The web page that describes the architecture of Chromium OS (an\n    open source project to implement a new operating system) starts\n    like this:\n    \\begin{quote}\n      Chromium OS consists of three major components: \n      \\begin{itemize}\n      \\item The Chromium-based browser and the window manager\n      \\item System-level software and user-land services: the kernel, drivers, connection manager, and so on\n      \\item Firmware \n      \\end{itemize}\n    \\end{quote}\n    Considering this brief description of the software architecture of\n    Chromium OS, which architectural style is more adequate to\n    represent it?	\N
87	SecurityINGLES	\N	Suppose that, to satisfy a security requirement related with\n    possible attacks coming from users that access your system through\n    the Internet, you want to use the tactic named \\emph{Limit\n      Exposure}.  How does the use of that tactic manifests in the\n    architectural views of your system?	\N
88	SkeletonSystemINGLES	\N	One of the best practices in the design of a software architecture\n    is to create a skeleton system.  What is its purpose?	\N
90	AspectsINGLES	\N	The Aspects style was introduced recently as a new style of the\n    module viewtype.  Using this style in the software architecture of\n    a system	\N
91	ZeroMQScaleMulticoreINGLES	\N	According to the document that describes ZeroMQ:\n    \\begin{quote}\n      One of the requirements for ØMQ was to take advantage of\n      multi-core boxes; in other words, to scale the throughput\n      linearly with the number of available CPU cores.\n    \\end{quote}\n    To satisfy this requirement, the solution adopted by ZeroMQ was	\N
92	ZeroMQAsLibraryINGLES	\N	Knowing that in the document describing ZeroMQ there is the\n    following statement:\n    \\begin{quote}\n      ØMQ is a library, not a messaging server.\n    \\end{quote}\n    Which views are needed to describe the software architecture of\n    ZeroMQ?	\N
93	ZeroMQBrokerINGLES	\N	According to the document that describes ZeroMQ:\n    \\begin{quote}\n      It took us several years working on AMQP protocol [...] to\n      realise that there's something wrong with the classic\n      client/server model of smart messaging server (broker) and dumb\n      messaging clients.\n    \\end{quote}\n    What is the main problem, according to the authors, of the\n    \\emph{broker}-based model?	\N
94	ZeroMQExtensibleEnginesINGLES	\N	According to the document that describes ZeroMQ:\n    \\begin{quote}\n      The objects that handle data transfer are composed of two parts:\n      the session object is responsible for interacting with the ØMQ\n      socket, and the engine object is responsible for communication\n      with the network.  There's only one kind of the session object,\n      but there's a different engine type for each underlying protocol\n      ØMQ supports.  Thus, we have TCP engines, IPC engines, PGM\n      engines, etc.  The set of engines is extensible---in the future\n      we may choose to implement, say, a WebSocket engine or an SCTP\n      engine.\n    \\end{quote}\n    Supposing that the code implementing the \\emph{session object}\n    does not need to be changed when a new type of \\emph{engine} is\n    added to the system, which architectural views are better to show\n    this extensibility aspect of the system?	\N
95	ZeroMQBSDSocketsINGLES	\N	According to the document that describes ZeroMQ:\n    \\begin{quote}\n      In early versions of ØMQ the API was based on AMQP's model of\n      exchanges and queues.  I spent the end of 2009 rewriting it\n      almost from scratch to use the BSD Socket API instead.\n    \\end{quote}\n    Which requirements were targeted by this change in the system?	\N
186	MWReliabilityReadsImplementationEEEN	\N	The \\mw{} system tries to guarantee a reliability criteria where all information is available to be read by any reader in less than 30 seconds after being written. To achieve this criteria the load balancer may stop accepting writes until	\N
85	AvailabilityINGLES	1238	There are several tactics to satisfy availability requirements,\n    which may be applied depending on the concrete requirement that we\n    want to satisfy.  Assuming that you want to detect faults of type\n    \\emph{response} in your system, which tactic is more adequate?	\N
84	SOAINGLES	1112	In the Service Oriented Architecture style it is common to have a\n    specialized component, named \\emph{Enterprise Service Bus} (ESB).\n    The goal of using of an ESB in a system is	\N
83	ScalabilityINGLES	1121	Several of the cases studied in this course had scalability\n    requirements.  That means that those systems should be designed in\n    such a way that they	\N
96	nginxProcessesINGLES	\N	According to the document that describes nginx:\n    \\begin{quote}\n      nginx runs several processes in memory; there is a single master\n      process and several worker processes.  There are also a couple\n      of special purpose processes, specifically a cache loader and\n      cache manager.  All processes are single-threaded in version 1.x\n      of nginx.  All processes primarily use shared-memory mechanisms\n      for inter-process communication.\n    \\end{quote}\n    Assuming that you want to highlight how the various nginx\n    processes communicate among themselves, which architectural style\n    is more adequate to represent the above information?	\N
97	nginxCachingINGLES	\N	In the continuation of the description presented in the previous\n    question, later in the document there is this passage:\n    \\begin{quote}\n      Caching in nginx is implemented in the form of hierarchical data\n      storage on a filesystem.  Cache keys are configurable, and\n      different request-specific parameters can be used to control\n      what gets into the cache.  Cache keys and cache metadata are\n      stored in the shared memory segments, which the cache loader,\n      cache manager and workers can access.\n    \\end{quote}\n    Which architectural style is more adequate to represent the use of\n    cache in nginx?	\N
98	nginxWorkersINGLES	\N	As mentioned in the previous questions, the use of \\emph{workers}\n    is one of the crucial elements in the software architecture of\n    nginx.  Which of the following sentences best describes how\n    \\emph{workers} work in nginx?	\N
99	nginxWorkerParallelINGLES	\N	Given that a \\emph{worker} processes various requests during its\n    life, how does it do it?	\N
100	nginxCTenKProblemINGLES	\N	The main \\emph{architectural driver} for the nginx system was to\n    solve the \\emph{C10K problem}: being able to maintain 10.000\n    simultaneous connections with a single server running on\n    conventional hardware.  For this o happen, nginx must	\N
101	GHCBlockLayerINGLES	\N	The document describing the \\ghc{} presents two design decisions\n    about the development of the \\emph{Runtime System}.  The first of\n    those decisions is described like this:\n    \\begin{quote}\n      The garbage collector is built on top of a block layer that\n      manages memory in units of blocks, where a block is a multiple\n      of 4 KB in size. The block layer has a very simple API: [...].\n      This is the only API used by the garbage collector for\n      allocating and deallocating memory.  Blocks of memory are\n      allocated with \\texttt{allocGroup} and freed with\n      \\texttt{freeGroup}.\n    \\end{quote}\n    Which architectural style is more adequate to represent this\n    design decision?	\N
102	GHCBlockLayerQualitiesINGLES	\N	What was the main goal of the GHC's authors that led them to the\n    design decision described in the previous question?	\N
103	GHCRewriteRulesINGLES	\N	Some of the \\emph{architectural drivers} of the \\ghc{} are related\n    with the system's extensibility, and one of the solutions adopted\n    by its authors to provide that extensibility was the introduction\n    of \\emph{user-defined rewrite rules}, described in the document as\n    follows:\n    \\begin{quote}\n      The core of GHC is a long sequence of optimisation passes, each\n      of which performs some semantics-preserving transformation,\n      \\texttt{Core} into \\texttt{Core}.  But the author of a library\n      defines functions that often have some non-trivial,\n      domain-specific transformations of their own, ones that cannot\n      possibly be predicted by GHC.  So GHC allows library authors to\n      define rewrite rules that are used to rewrite the program during\n      optimisation.  In this way, programmers can, in effect, extend\n      GHC with domain-specific optimisations.\n    \\end{quote}\n    How does this solution manifests in the software architecture of\n    the system?	\N
104	GHCAsLibraryINGLES	\N	According to the document that describes the \\ghc{}:\n    \\begin{quote}\n      As the popularity of the Haskell language has grown, there has\n      been an increasing need for tools and infrastructure that\n      understand Haskell source code, and GHC of course contains a lot\n      of the functionality necessary for building these tools: a\n      Haskell parser, abstract syntax, type checker and so on.  With\n      this in mind, we made a simple change to GHC: rather than\n      building GHC as a monolithic program, we build GHC as a library,\n      that is then linked with a small Main module to make the GHC\n      executable itself, but also shipped in library form so that\n      users can call it from their own programs.  At the same time we\n      built an API to expose GHC's functionality to clients.\n    \\end{quote}\n    Which architectural diagram is more adequate to represent the\n    information presented above?	\N
105	GHCCodeGenerationINGLES	\N	According to the document that describes the \\ghc{}:\n    \\begin{quote}\n      Once the \\texttt{Core} program has been optimised, the process\n      of code generation begins.  The code generator first converts\n      the \\texttt{Core} into a language called \\texttt{STG}, which is\n      essentially just \\texttt{Core} annotated with more information\n      required by the code generator.  Then, \\texttt{STG} is\n      translated to \\texttt{Cmm}, a low-level imperative language with\n      an explicit stack.  From here, the code takes one of three\n      routes:\n      \\begin{itemize}\n      \\item Native code generation: [...]\n      \\item LLVM code generation: [...]\n      \\item C code generation: [...]\n      \\end{itemize}\n    \\end{quote}\n    That is, GHC may use one of three alternative code generators,\n    which have different qualities (omitted in the excerpt presented\n    above).  Supposing that you want to present an architectural\n    diagram to represent the description presented above, which one\n    seems more adequate?	\N
106	WebCacheModuleINGLES	\N	Consider the Figure~1.8 in the document that describes the use of\n    caches in web services (see annex).  In that Figure, there is a\n    rectangle with the name \\emph{Cache} within another rectangle with\n    the name \\emph{Request Node}.  Taking into account the description\n    made in the text and the goal of that Figure, those rectangles\n    correspond to which type of software elements?	\N
107	WebCacheGlobalINGLES	\N	Consider the change in the architecture introduced from Figure~1.9\n    to Figure~1.10 in the document that describes the use of caches in\n    web services (see annex).  That change has the goal and the\n    consequence of, respectively	\N
108	WebDistributedCacheINGLES	\N	Consider the paragraph marked with the number 1 in the document\n    that describes the use of caches in web services (see annex),\n    where the concept of \\emph{distributed cache} is introduced.\n    Which architectural style better represents the interaction\n    pattern that exists among the various request nodes?	\N
109	WebMissingCacheNodeINGLES	\N	Consider the paragraph marked with the number 2 in the document\n    that describes the use of caches in web services (see annex),\n    where the failure of a node in the distributed cache is discussed.\n    When that happens, what are the consequences for the system?	\N
187	MWQualitiesEEEN	\N	Which of the following qualities are not relevant for the \\mw{} system?	\N
111	DomainLogicFenixINGLES	\N	One of the major changes introduced in the software architecture\n    of the Fénix system, compared to its first architecture, was	\N
112	PerformanceINGLES	\N	Several of the cases studied in this course had performance\n    requirements.  Which architectural views are typically needed to\n    show that those requirements are satisfied?	\N
116	ArqEmailMUAMTAINGLES	\N	The email system is composed of various types of components\n    playing different roles.  For example, to send an email, a user\n    uses a \\emph{mail user agent} (MUA), to compose his message and\n    send it.  To send the message, the MUA typically connects to a\n    \\emph{mail transfer agent} (MTA) that receives the message,\n    analyzes the message's headers to determine the recipients and,\n    after querying the DNS system to determine the MTA responsible for\n    each recipient, it connects to the MTAs responsible for the\n    destination addresses to deliver the message.  Each of these MTAs\n    receives the message and stores it locally or forwards it to\n    others MTAs until the message reaches its destination MTA.\n    The recipient user of the message will then use his MUA to see the\n    messages that were sent to him.  To do it, the MUA connects to an\n    IMAP or POP server to obtain the user's messages.  Those IMAP and\n    POP servers obtain the messages for a user by reading the messages\n    stored by the MTA.\n\n    Given this simplified description of the operation of the email\n    system, which of the following architectural styles is more\n    appropriate to represent the pattern of interaction between the\n    MUA and the MTA?	\N
118	SecurityINGLES	\N	Suppose that you are developing a web application that keeps in a\n    database some information that is introduced by the users and that\n    one of the requirements is that the information should be kept\n    confidential, such that no one but the author of the information\n    should be able to see it (but the author may access that\n    information whenever he wants it).  How would you satisfy this\n    requirement?	\N
119	WebEvolutionINGLES	\N	Web applications went through several evolutions over the last\n    years.  One of those evolutions was to make their user interfaces\n    more sophisticated, by leveraging on new technologies available in\n    the browsers, such as, for example, Javascript, to provide a more\n    satisfying user experience.  What were the most visible\n    consequences of such an evolution on the typical software\n    architecture of a web application?	\N
120	TiersINGLES	\N	One of the terms often used to describe the software architecture\n    of a system is the term \\emph{tier}, being common, for instance,\n    to talk about \\emph{multi-tier} systems.  Taking into account the\n    various types of software elements that compose a software\n    architecture, a \\emph{tier} is	\N
121	GPReceiverWriterStyleINGLES	\N	In \\gp{} system  the \\emph{receiver} and the \\emph{writer threads} support asynchronous writing of metrics to optimize disk accesses. The interaction between these two components follow the architectural style	\N
122	GPCarbonRelayINGLES	\N	In the \\gp{} system the component \\emph{carbon-relay} implements a tactic	\N
123	GPComposerUIQualityINGLES	\N	Which quality, or qualities, of the \\gp{} system are described by the sentence: \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL.}	\N
124	MWQualitiesINGLES	\N	Which are the most significant qualities of the \\mw{} system?	\N
125	MWArchitecuralStyleINGLES	\N	The architectural styles which are more suitable to describe the \\mw{} system from the end user viewpoint are	\N
126	MWReliabilityTacticsINGLES	\N	The \\mw{} system tries to enforce a reliability criteria that all the changes done by a writer are consistently visualized in her subsequent reads	\N
127	MWReliabilityReadsImplementationINGLES	\N	The \\mw{} system tries to guarantee a reliability criteria where all information is available to be read by any reader in less than 30 seconds after being written. To achieve this criteria the load balancer	\N
128	MWResourceLoaderTacticINGLES	\N	Consider the following fragment of the \\mw{} system description:\n      \\newline\n      \n      \\emph{To optimize the delivery of JavaScript and CSS assets, the ResourceLoader module was developed to optimize delivery of JS and CSS. Started in 2009, it was completed in 2011 and has been a core feature of MediaWiki since version 1.17. ResourceLoader works by loading JS and CSS assets on demand, thus reducing loading and parsing time when features are unused, for example by older browsers. It also minifies the code, groups resources to save requests, and can embed images as data URIs.}\n      \\newline\n      \n      The \\emph{ResourceLoader} implements a tactic	\N
129	CHSecurityQualityINGLES	\N	In \\ch{}, to accomplish the security quality, the Browser Process implements a tactic	\N
117	AvailabilityINGLES	1176	Suppose that, to satisfy an availability requirement related with\n    the occurrence of faults at the network infrastructure used by\n    your system, you want to use the tactic named \\emph{Ping/Echo}.\n    How does the use of that tactic manifests in the architectural\n    views of your system?	\N
114	AspectsINGLES	1137	Using the Aspects architectural style promotes the modifiability\n    of a system because	\N
113	SubcontractorsINGLES	1186	Suppose that you are developing a software architecture for a new\n    large scale system and that you intend to resort extensively to\n    third party subcontractors for the development of various parts of\n    the system.  Which architectural styles are most useful to plan\n    the development of the system in this case?	\N
131	CHMobilityArchitecturalStyleINGLES	\N	In the description of the \\ch{} case you can read:\n      \\newline\n      \n      \\emph{On Android devices, Chrome leverages the same multi-process architecture as the desktop version - there is a browser process, and one or more renderer processes. The one difference is that due to memory constraints of the mobile device, Chrome may not be able to run a dedicated renderer for each open tab. Instead, Chrome determines the optimal number of renderer processes based on available memory, and other constraints of the device, and shares the renderer process between the multiple tabs.} \n      \\newline\n      \n      This description can be represented by a view of viewtype Component-and-Connector using the architectural style	\N
132	CHAmazonSilkTwoEN	\N	An advantage of \\ch{} when compared with Amazon Silk is	\N
133	CHSecurityLevelEN	\N	One of the qualities of \\ch{} is the execution of the JavaScript code inside a process, which allows the isolation against possible interferences between the execution of JavaScript programs that are loaded from different sites. The isolation level	\N
134	CHOmniboxTacticsEN	\N	In the description of the \\ch{} case study you can read:\n      \\newline\n      \n      \\emph{Typing in the Omnibox (URL) bar triggers high-likelihood suggestions, which may similarly kick off a DNS lookup, TCP pre-connect, and even prerender the page in a hidden tab.} \n      \\newline\n      \n      This description refers to	\N
135	GMPicklePerformanceEN	\N	Consider the following fragment of \\gm{} \n  \\newline\n  \n  \\emph{In Mailman 2, the MailList object's state is stored in a file called config.pck, which is just the pickled representation of the MailList object's dictionary. Every Python object has an attribute dictionary called \\_\\_dict\\_\\_. So saving a mailing list object then is simply a matter of pickling its \\_\\_dict\\_\\_ to a file, and loading it just involves reading the pickle from the file and reconstituting its \\_\\_dict\\_\\_.}\n  \\newline\n      \n      Although simple, this solution resulted in several problems which had a negative impact on performance. This is due to:	\N
136	GMRestModularityEN	\N	Consider the following fragment of \\gm{} case study:\n  \\newline\n  \n  \\emph{Mailman 3 has adopted the Representational State Transfer (REST) model for external administrative control. REST is based on HTTP, and Mailman's default object representation is JSON. These protocols are ubiquitous and well-supported in a large variety of programming languages and environments, making it fairly easy to integrate Mailman with third party systems. REST was the perfect fit for Mailman 3, and now much of its functionality is exposed through a REST API.}\n  \\newline\n      \n      This solution allowed:	\N
137	GMPipesFiltersDataEN	\N	Consider the following fragment of \\gm{} case study:\n  \\newline\n  \n  \\emph{Once a message has made its way through the chains and rules and is accepted for posting, the message must be further processed before it can be delivered to the final recipients. For example, some headers may get added or deleted, and some messages may get some extra decorations that provide important disclaimers or information, such as how to leave the mailing list.}\n  \\newline\n      \n      The Pipes-and-Filters architectural style is used in the handling of messages. In this context the data type which is sent among the filters is	\N
138	GMReliabilityFIFOEN	\N	In the description of the \\gm{} case study it is proposed a solution that, when there are several queue runners executing on the same queue, the delivery of messages is done according to arrival order (FIFO).\n  \\newline\n  \n  \\emph{There's another side effect of this algorithm that did cause problems during the early design of this system. Despite the unpredictability of email delivery in general, the best user experience is provided by processing the queue files in FIFO order, so that replies to a mailing list get sent out in roughly chronological order.}\n  \\newline\n  \n  The proposed solution	\N
140	GMMessagesPersistenceEN	\N	In Mailman 3 messages are still being persistently stored using pickle because	\N
141	InstallImplementationStylesEN	\N	The Install and Implementation architectural styles	\N
142	FenixTwoEN	\N	The architecturally significant qualities of the second Fénix architecture are:	\N
143	ElasticityDeferBindingEN	\N	The elasticity of a system, defined as its capability to easily adapt to load changes, is often represented as a required property of the scalability quality. For this level of easiness contribute the architectural solutions associated with the following tactic(s)	\N
144	UnitOfWorkEN	\N	The Unit of Work pattern can be implemented in an application server, while it is still necessary to use transactions in the repository to access to the data. In this situation	\N
146	SecurityInternalSourceEN	\N	When the source of an attack is internal to an organization the tactics which are more efective are	\N
147	DataModelEN	\N	The detail that can be used in a view of the Data Model view type can be conceptual, logical or physical.	\N
148	PublishSubscribeEN	\N	In the Publish-Subscribe architectural style, the components, from the point of view of the modules they execute	\N
149	UsabilityNonArchitecturalEN	\N	Some usability qualities are not architectural because	\N
151	GPCarbonBufferInterfaceEN	\N	In the \\gp{} system the component \\emph{carbon} provides to \\emph{webapp} components an access interface to the \\emph{buffers} in order to improve the quality(ies) of	\N
152	GPCCViewEN	\N	An higher-level component-and-connect view of \\gp{} system can be designed using only the architectural style(s)	\N
153	GPComposerUIPerformanceEN	\N	The \\emph{Composer UI} component of \\gp{} system, described as - \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL} - to be effective needs to show to the user the changes she performs in the graph such that she has immediate feedback about the result of the changes. To do so, the system needs to implement the tactics of	\N
154	MWLowCostEN	\N	The design of the \\mw{} architecture was constrained the requirement that the solution should have relatively low cost. Due to this restriction it was taken the architectural decision of	\N
155	MWTacticsEN	\N	Consider a Component-and-Connector architectural view of the \\mw{} system where all the clients are connected to a server through a request-reply connector. This connector implements the tactics	\N
156	MWReliabilityImplementationEN	\N	The \\mw{} system tries to enforce a reliability criteria that all the changes done by a writer are consistently visualized in her subsequent reads. This criteria is implemented	\N
157	MWReliabilityReadsTacticEN	\N	The \\mw{} system tries to guarantee a reliability criteria where all information is available to be read by any reader in less than 30 seconds after being written. To achieve this criteria it is implemented a tactic of	\N
145	AvailabilityVotingEN	1405	The availability quality can be supported by a voting tactic in order to identify faults of	\N
158	MWVerBlobTacticEN	\N	In the description of \\mw{} system we can read:\n      \\newline\n      \n      \\emph{The first revision of the blob is stored in full, and following revisions to the same page are stored as diffs relative to the previous revision; the blobs are then gzipped. Because the revisions are grouped per page, they tend to be similar, so the diffs are relatively small and gzip works well. The compression ratio achieved on Wikimedia sites nears 98\\%.}\n      \\newline\n      \n      This description refers to a tactic of	\N
160	CHPerformanceQualityTwoEN	\N	In the description of \\ch{} case study we can read:\n      \\newline\n      \n      \\emph{Chrome maintains a single instance of the resource dispatcher, which is shared across all render processes, and runs within the browser kernel process.}\n      \\newline\n      \n      The \\emph{Resource Dispatcher} contributes to the performance quality because it implements a tactic of	\N
161	CHAmazonSilkEN	\N	An advantage of Amazon Silk when compared with \\ch{} is	\N
162	CHRenderStyleEN	\N	An architectural view of the Component-and-Connector viewtype that describes the interactions within the Renderer Process component of \\ch{}, uses the architectural style	\N
163	CHPrerenderTacticsEN	\N	In some situations \\ch{} prerenders a page. To do it	\N
164	CHOmniboxQualitiesEN	\N	In the description of the \\ch{} case study you can read:\n      \\newline\n      \n      \\emph{Typing in the Omnibox (URL) bar triggers high-likelihood suggestions, which may similarly kick off a DNS lookup, TCP pre-connect, and even prerender the page in a hidden tab.} \n      \\newline\n      \n      This description refers to the qualities of	\N
165	GMRestInteroperabilityEN	\N	Consider the following fragment of \\gm{} case study:\n  \\newline\n  \n  \\emph{Mailman 3 has adopted the Representational State Transfer (REST) model for external administrative control. REST is based on HTTP, and Mailman's default object representation is JSON. These protocols are ubiquitous and well-supported in a large variety of programming languages and environments, making it fairly easy to integrate Mailman with third party systems. REST was the perfect fit for Mailman 3, and now much of its functionality is exposed through a REST API.}\n  \\newline\n      \n      This solution allowed increased interoperability because	\N
166	GMPipesFiltersEN	\N	Consider the following fragment of \\gm{} case study:\n  \\newline\n  \n  \\emph{Once a message has made its way through the chains and rules and is accepted for posting, the message must be further processed before it can be delivered to the final recipients. For example, some headers may get added or deleted, and some messages may get some extra decorations that provide important disclaimers or information, such as how to leave the mailing list.}\n  \\newline\n      \n      The architectural style that is more accurate to describe the flexible processing of messages is	\N
167	GMDataModelEN	\N	Consider the following fragment of \\gm{} case study:\n  \\newline\n  \n  \\emph{Email messages can act as containers for other types of data, as defined in the various MIME standards. A container message part can encode an image, some audio, or just about any type of binary or text data, including other container parts.}\n  \\newline\n      \n      The architectural style that is more accurate to describe this transcription is	\N
168	GMPerformanceEN	\N	Consider the following transcription of the \\gm{} system:\n  \\newline\n  \n  \\emph{...Mailman supports running more than one runner process per queue directory...}\n  \\newline\n  \n  It has the goal to support	\N
169	GMReliabilityBounceEN	\N	Consider the following description of the \\gm{} system:\n  \\newline\n  \n  \\emph{VERP stands for Variable Envelope Return Path, and it is a well-known technique that mailing lists use to unambiguously determine bouncing recipient addresses. When an address on a mailing list is no longer active, the recipient's mail server will send a notification back to the sender. In the case of a mailing list, you want this bounce to go back to the mailing list, not to the original author of the message; the author can't do anything about the bounce, and worse, sending the bounce back to the author can leak information about who is subscribed to the mailing list. When the mailing list gets the bounce, however, it can do something useful, such as disable the bouncing address or remove it from the list's membership.}\n  \\newline\n  \n  This transcription describes the quality(ies) of	\N
170	GMSwitchboardEN	\N	Consider the following description of the \\gm{} system:\n  \\newline\n  \n  \\emph{There is a core Mailman class called Switchboard which provides an interface for enqueuing (i.e., writing) and dequeuing (i.e., reading) the message object tree and metadata dictionary to files in a specific queue directory. Every queue directory has at least one switchboard instance, and every queue runner instance has exactly one switchboard.}\n  \\newline\n  \n  This transcription contains relevant information for viewtypes of	\N
171	FenixThreeEN	\N	The architecturally significant requirements of the third architecture of Fénix are	\N
172	FenixOneEN	\N	In the Fénix first architecture it was common programmers forget to lock objects in the context of transactions. A solution for this problem can be architecturally described using a view of the architectural style	\N
173	InternationalizationTacticsEN	\N	The internationalization of the user interface is supported by the tactic(s)	\N
174	IdentityMapEN	\N	To implement the Identity Map pattern	\N
175	AvailabilityDefensiveEN	\N	In defensive programming the programmer checks that the conditions under which modules are invoked comply with their specification, and if they don't an exception is raised to avoid failure propagation. When defensive programming is followed, in the context of availability quality, we are using a tactic of	\N
176	ObserverUsesEN	\N	In the Observer design pattern, where the model invokes a notification method on all its observers whenever it is changed, can be said, in what concerns the Uses relation of the Uses architectural style, that	\N
177	UsesLayersEN	\N	Consider the Uses and Layered architectural styles.	\N
178	SeveralStylesViewEN	\N	An architectural view	\N
179	ApplyUsesEN	\N	The Uses architectural style	\N
180	EnterpriseWideEN	\N	In a enterprise-wide system, like Fénix system,	\N
181	GPCarbonBufferInterfaceEEEN	\N	In the \\gp{} system, in order to improve performance the component \\emph{carbon} do not write directly on disk, it uses a buffer instead:	\N
182	GPCarbonRelayEEEN	\N	In the \\gp{} system the component \\emph{carbon-relay} implements a tactic of maintain multiple copies of computation, in order to improve the quality	\N
183	GPWhisperViewTypeEEEN	\N	To describe the structure of a whisper file of the \\gp{} system it is necessary to use a view of the viewtype	\N
184	MWLowCostEEEN	\N	The design of the \\mw{} architecture was decided to have a single write server	\N
185	MWReliabilityImplementationEEEN	\N	The reliability criteria of the \\mw{} system  that all the changes done by a writer are consistently visualized in her subsequent reads,	\N
188	MWResourceLoaderTacticEEEN	\N	Consider the following fragment of the \\mw{} system description:\n      \\newline\n      \n      \\emph{To optimize the delivery of JavaScript and CSS assets, the ResourceLoader module was developed to optimize delivery of JS and CSS. Started in 2009, it was completed in 2011 and has been a core feature of MediaWiki since version 1.17. ResourceLoader works by loading JS and CSS assets on demand, thus reducing loading and parsing time when features are unused, for example by older browsers. It also minifies the code, groups resources to save requests, and can embed images as data URIs.}\n      \\newline\n      \n      The \\emph{ResourceLoader} supports a quality	\N
189	CHQualitiesEEEN	\N	\\ch{}, as described in the case study, was designed to support the accomplish the following architectural qualities:	\N
190	CHPerformanceQualityEEEN	\N	In \\ch{} it is possible to associate a Renderer Process to each Tab, which results in the qualities	\N
191	CHPrerenderTacticsEEEN	\N	In some situations \\ch{} prerenders a page. Therefore it achieves the qualities of	\N
192	CHOmniboxTacticsEEEN	\N	In the description of the \\ch{} case study you can read:\n      \\newline\n      \n      \\emph{Typing in the Omnibox (URL) bar triggers high-likelihood suggestions, which may similarly kick off a DNS lookup, TCP pre-connect, and even prerender the page in a hidden tab.} \n      \\newline\n       \n      This description refers to the qualities of	\N
193	CHAmazonSilkTwoEEEN	\N	Architecturally \\ch{} and Amazon Silk differ because	\N
194	CHMobilityArchitecturalStyleEEEN	\N	In the description of the \\ch{} case you can read:\n      \\newline\n      \n      \\emph{On Android devices, Chrome leverages the same multi-process architecture as the desktop version - there is a browser process, and one or more renderer processes. The one difference is that due to memory constraints of the mobile device, Chrome may not be able to run a dedicated renderer for each open tab. Instead, Chrome determines the optimal number of renderer processes based on available memory, and other constraints of the device, and shares the renderer process between the multiple tabs.} \n      \\newline\n      \n      This description refers to a quality, usually named mobility, due to adaptation to the condition of the device. Due to this quality other qualities can be compromissed	\N
195	GMPicklePerformanceEEEN	\N	Consider the following fragment of \\gm{} \n  \\newline\n  \n  \\emph{In Mailman 2, the MailList object's state is stored in a file called config.pck, which is just the pickled representation of the MailList object's dictionary. Every Python object has an attribute dictionary called \\_\\_dict\\_\\_. So saving a mailing list object then is simply a matter of pickling its \\_\\_dict\\_\\_ to a file, and loading it just involves reading the pickle from the file and reconstituting its \\_\\_dict\\_\\_.}\n  \\newline\n      \n      To describe the internal structure of the config.pck file    it should be used a view of the viewtype	\N
196	GMPerformanceEEEN	\N	Consider the following transcription of the \\gm{} system:\n  \\newline\n  \n  \\emph{...Mailman supports running more than one runner process per queue directory...}\n  \\newline\n  \n  It refers to a tactic of	\N
197	GMRestModularityEEEN	\N	Consider the following fragment of \\gm{} case study:\n  \\newline\n  \n  \\emph{Mailman 3 has adopted the Representational State Transfer (REST) model for external administrative control. REST is based on HTTP, and Mailman's default object representation is JSON. These protocols are ubiquitous and well-supported in a large variety of programming languages and environments, making it fairly easy to integrate Mailman with third party systems. REST was the perfect fit for Mailman 3, and now much of its functionality is exposed through a REST API.}\n  \\newline\n      \n      This solution allowed:	\N
198	GMReliabilityFIFOEEEN	\N	In the description of the \\gm{} case study:\n  \\newline\n  \n  \\emph{There's another side effect of this algorithm that did cause problems during the early design of this system. Despite the unpredictability of email delivery in general, the best user experience is provided by processing the queue files in FIFO order, so that replies to a mailing list get sent out in roughly chronological order.}\n  \\newline\n  \n  The quality being addressed is:	\N
199	GMMessagesPersistenceEEEN	\N	In Mailman 3 messages are still being persistently stored using pickle because	\N
200	GMMasterRunnerEEEN	\N	The function of Master Runner component of \\gm{} can be represented using an architecture style of	\N
202	SecondEEEN	\N	The documentation of the software architecture for a system is often\n  composed of several views, because	\N
203	ThirdEEEN	\N	Establishing a programming convention such as \n  \\begin{quote}\n    All of the global variables of the program should start with the\n    prefix \\textsc{g\\_}, whereas all the non-global variables have\n    no underscores in their name.\n  \\end{quote}	\N
204	FourthEEEN	\N	Assume that one of the requirements for a graphical chess game is\n  that it should be able to run both in Microsoft's Windows and\n  Apple's Mac OS X operating systems.  A good solution for this system\n  would:	\N
205	FifthEEEN	\N	Another requirement for the chess game from the previous questions\n  is that it keeps a table with the best scores obtained in the game.\n  Naturally, this information should be kept between two different\n  executions of the system.  Assuming that the game is a desktop\n  application, then	\N
208	EighthEEEN	\N	The Transaction Script pattern	\N
209	NinethEEEN	\N	The Service Layer pattern is often used in conjunction with	\N
210	TenthEEEN	\N	The Identity Map pattern is used	\N
264	EtherCalcSnapshotPerformance	\N	In EtherCalc initial prototype clients send their local commands, cursor movements and snapshots to the server.	\N
390	Prioritize	\N	Frank Buschmann states that:\n    \n    \\begin{quote}\n        Architects use flexibility as a cover for uncertainty.\n    \\end{quote}	\N
428	ChromePerformance	566	In the Chrome system the following tactic is used to improve performance	\N
241	ServiceLayer	\N	The Service Layer pattern is typically used in conjunction with	\N
242	ActiveRecord	\N	The Active Record pattern is best used when we are also using	\N
244	ThounsandParsecView	\N	Consider the architectural views for the ThousandParsec system. In the case description can be read:\n    \n    \\begin{quote}\n        The Requirements function verifies that each component added to the design conforms to the rules of other previously added components.\n    \\end{quote}\n    \n    The following diagram depicts a fragment of a proposal for the decomposition view of the system.\n    \n    \\begin{center}\n    \\includegraphics[width=100mm]{x-ThousandParsec-ruleset}\n  \\end{center}	\N
245	Checksum	\N	Checksum is a technic that it is often used in architectural design. It can be used as	\N
246	Attack	\N	An attack is	\N
247	SocialCalcTactics	\N	In the description of the SocialCalc case study can be read:\n    \n    \\begin{quote}\n        As the user scrolls the spreadsheet through our custom-drawn scroll bars, we dynamically update the innerHTML of the pre-drawn \\textsc{<td>} elements. This means we don't need to create or destroy any \\textsc{<tr>} or \\textsc{<td>} elements in many common cases, which greatly speeds up response time.\n    \\end{quote} \n    \n    This corresponds to the application of	\N
248	ThousandParsecTactics	\N	In the description of the Thousand Parsec case study can be read:\n    \n    \\begin{quote}\n        A ruleset designer thus has the ability to create new object types or store additional information in the existing object types as required by the ruleset, allowing for virtually unlimited extensibility in terms of the available physical objects in the game.\n    \\end{quote} \n    \n    This excerpt can be represented as a modifiability scenario where	\N
249	GitTactics	\N	In the description of the Git case study can be read:\n    \n    \\begin{quote}\n        Git tackles the storage space problem by packing objects in a compressed format, using an index file which points to offsets to locate specific objects in the corresponding packed file.\n    \\end{quote}\n    \n    The tactic addressed in this fragments is:	\N
250	Layered	\N	Assume that one of the requirements for a graphical chess game is\n  that it should be able to run both in Microsoft's Windows and\n  Apple's Mac OS X operating systems.  A good solution for this system\n  would:	\N
252	Repository	\N	A requirement for a chess game is that it keeps a table with the best scores obtained in the game.\n  Naturally, this information should be kept between two different\n  executions of the system.  Assuming that the game is a web-based application, then	\N
253	PeerToPeer	\N	An email client such as Mozilla's Thunderbird or Microsoft's Outlook\n  allows a user both to read the emails that were sent to him and to\n  send new emails to other people.  To do that, the email client\n  connects to other components (one or more): some of these components\n  keep the user's mailboxes with all the emails that were sent to him,\n  whereas other components know how to forward the emails sent by the\n  user to their final destinations (associated with a new set of destinations).  In either case, it is always the\n  email client that makes a request to the other components, but\n  whereas in the first case the email client receives all the\n  information about the user's emails, in the second case only a\n  success or failure error code is returned.  The architectural\n  patterns that best describe the interactions between the components from the client to the final destinations	\N
254	ArchitectureInfluenceCycle	\N	The software architecture of a system	\N
255	TechoGeeks	\N	Frank Buschmann, \\emph{Introducing the Pragmatic Architect}, defines the \\emph{techno-geeks} architects. This kind of architect	\N
257	Scenario	\N	Consider the following scenario\n    \n    \\begin{quote}\n        Our vehicle information system send our current location to the traffic monitoring system. The traffic monitoring system combines our location with other information, overlays this information on a Google Map, and broadcasts it. Our location information is correctly included with a probability of 99.99\\%.\n    \\end{quote}	\N
259	SocialCalcView	\N	Consider the architectural views for the SocialCalc system. In the case description can be read:\n    \n    \\begin{quote}\n        The save format is in standard MIME multipart/mixed format, consisting of four text/plain; charset=UTF-8 parts, each part containing newline-delimited text with colon-delimited data fields. The parts are...\n        \n        This format is designed to be human-readable, as well as being relatively easy to generate programmatically. This makes it possible for Drupal's Sheetnode plugin to use PHP to convert between this format and other popular spreadsheet formats, such as Excel (.xls) and OpenDocument (.ods).\n    \\end{quote}\n    \n    From the above excerpt can be inferred the need to have	\N
260	GitViews	\N	The architectural style that best represents the runtime execution of a system Git installed for a small group of developers is	\N
261	OrderPad	\N	In the OrderPad system they have decided to use a Row Data Gateway data access pattern because	\N
262	EtherCalcAllocation	\N	Consider the architectural views of EtherCalc system. In the case study description can be read\n  \n  \\begin{quote}\n      The Socialtext platform has both behind-the-firewall and on-the-cloud deployment options, imposing unique constraints on EtherCalc's resource and performance requirements.\n  \\end{quote}	\N
263	EtherCalcRedundancy	\N	In EtherCalc initial prototype clients send their local commands and snapshots to the server, which result on redundant information on the server about the state of the spreadsheet. This redundancy is an application of	\N
239	ServiceLayer	241	The Service Layer pattern is typically used in conjunction with	\N
256	ModuleComponent	914	Which of the following phrases best describe the relationship\n  between modules and components?	\N
243	InstallView	1181	Consider a system that will require a significative configuration effort during deployment, because it provides several variations of the same functionalities and it is necessary to choose which functionalities better fit in each case. The most helpful architectural view for this situation is	\N
265	EtherCalcModifiabilityTestability	\N	In the EtherCalc case description can be read\n \n  \\begin{quote}\n      The in-browser SocialCalc engine is written in JavaScript. We considered translating that logic into Perl, but that would have carried the steep cost of maintaining two code bases. \n  \\end{quote} \n  \n  The excerpt is referring to a quality of	\N
266	FeaturitisOrderPad	\N	Frank Buschmann states that:\n        \n    \\begin{quote}\n        Featuritis is the tendency to trade functional coverage for quality - the more functions the earlier they're delivered, the better.\n    \\end{quote}\n    \n    In the OrderPad system the architect regretted not getting performance tests going earlier. The OrderPad system	\N
268	DesigningArchitecture	\N	The architectural significant requirements are important in the process of creating\n  the software architecture for a system because they define	\N
382	HammersNails	388	In his article \\emph{On Hammers and Nails, and Falling in Love with Technology and Design} what is the main type of influence on the architecture?	\N
267	ArchitectureDefinition	1173	The software architecture of a system	\N
270	UsesStyle	1187	To achieve a faster time-to-market, software companies are\n  increasingly using a strategy of incremental releases of their\n  software, where each new release has a set of new features.  Which\n  architectural style is better to analyse whether the system's\n  software architecture is adequate for the planned incremental\n  releases?	\N
269	DecompositionGeneralization	1308	Consider that a chess game should\n  provide an automatic and intelligent chess player, and that to\n  implement that player we will use some of the many chess engines\n  already available in the market.  Moreover, the system should allow\n  the user to choose which engine to use for each new game.  Given\n  these requirements, which of the architectural styles from the\n  module viewtype are best suited to satisfy them?	\N
302	TransactionScript	\N	Compared to the Transaction Script pattern, the Domain Logic pattern\n  has a higher initial cost of adoption.  That is, it is harder to\n  start with the Domain Logic pattern than with the Transaction Script\n  pattern.  The reason for this is that the Domain Logic pattern	\N
303	ActiveRecordRuby	\N	Ruby on Rails is a popular full-stack framework for building web\n  applications.  One of the elements of this framework is the\n  \\textbf{model}, which is described in the Rails documentation in the\n  following way:\n  \\begin{quote}\n    A model represents the information (data) of the application and\n    the rules to manipulate that data. In the case of Rails, models\n    are primarily used for managing the rules of interaction with a\n    corresponding database table. In most cases, one table in your\n    database will correspond to one model in your application. The\n    bulk of your application's business logic will be concentrated in\n    the models.\n  \\end{quote}\n  Given this description, the Rails' model is best described as an\n  instance of	\N
305	AvailabilityPingEchoHeartbeat	\N	Ping-and-echo and Heartbeat are two availability tactics to detect faults.	\N
306	SecurityDatabase	\N	Consider that when designing the architecture of a web application, the architect intends to guarantee of the confidentiality of persistent data in face of an attack from a system administrator.	\N
304	ConcreteScenario	1174	As part of the process of creating an architecture, we talked about\n  a framework for capturing some of the requirements for a system.  In\n  this context, \\textbf{concrete scenarios} are used for	\N
383	FunctionalModule	1185	When designing an architecture requirements can be split into functional, quality attributes, and constraints. Functional requirements have impact on:	\N
301	OrderPadTactics	1314	In the description of architecture of the OrderPad case study, it can be read that the updates the user does on the OrderPad when it is offline are not lost. This availability quality is achieved through a	\N
307	SocialCalcTactic	\N	In the description of the SocialCalc case study can be read:\n    \n    \\begin{quote}\n        A simple improvement is for each client to broadcast its cursor position to other users, so everyone can see which cells are being worked on.\n    \\end{quote}\n    \n    This sentence describes a tactic for usability which is	\N
308	ThousandParsecScenario	\N	In the description of the ThousandParsec case study can be read:\n    \n    \\begin{quote}\n        The Thousand Parsec Component Language (TPCL) exists to allow clients to create designs locally without server interaction - allowing for instant feedback about the properties, makeup, and validity of the designs. \n    \\end{quote}\n    \n    From this sentence can be written	\N
309	GitTactic	\N	In the description of GitHub case study can be read\n    \n    \\begin{quote}\n        Once the Smoke proxy has determined the user's route, it establishes a transparent proxy to the proper file server. We have four pairs of fileservers. Their names are fs1a, fs1b, ..., fs4a, fs4b. These are 8 core, 16GB RAM bare metal servers, each with six 300GB 15K RPM SAS drives arranged in RAID 10. At any given time one server in each pair is active and the other is waiting to take over should there be a fatal failure in the master. All repository data is constantly replicated from the master to the slave via DRBD.\n    \\end{quote}\n    \n    In this description we can find the application of tactics like	\N
310	ModuleTraceability	\N	Views of the module viewtype can be used to support requirements traceability analysis, determine how the functional requirements of a system are supported. This is represented by	\N
311	ArchitectureKnowledge	\N	Assuming that you were asked to document the software architecture\n  of an existing (and already developed) system, the best thing for\n  you to do would be	\N
312	ArchitectureEvolution	\N	Ralph Johnson says that\n  \n  \\begin{quote}\n      Architecture is the decisions that you wish you could get right early in a project.\n  \\end{quote}\n  \n  This sentence reflects the fact that	\N
313	Performitis	\N	Marquardt characterizes performitis as:\n    \n    \\begin{quote}\n        Each part of the system is directly influenced by local performance tuning measures. There is no global performance strategy, or it ignores other qualities of the system such as testability and maintainability.\n    \\end{quote}\n    \n    This means that	\N
314	ArchitecturalViews	\N	The software architecture of a system is usually represented through several views because we need to	\N
315	ArchitecturallySignificantRequirements	\N	According to the attribute-driven design process, we should design\n  the software architecture for a system based on a selected list of\n  requirements, which are called the \\textit{architecturally significant requirements}.\n  These architecturally significant requirements should be sorted according to their\n  importance for the system's stakeholders because	\N
316	ModueComponent	\N	On the web page of Memcached can be read:\n  \n  \\begin{quote}\n      ..., high-performance, distributed memory object caching system, generic in nature, but intended for use in speeding up dynamic web applications by alleviating database load.\n  \\end{quote}\n  \n  According to this information, Memcached is	\N
317	GeneralizationInterfaces	\N	You have to develop an application that collects news from different web sources and process that information to present a digest to the application users. The different sources provide similar information through different interfaces (APIs). Additionally, the new sources may change the interfaces, for instance to enhance their service. Which architectural style can be used to represent this requirements?	\N
318	UsesIncremental	\N	When designing the architecture for a system the architect realises that most of the modules have bidirectional uses relationships. This has impact on	\N
319	EtherCalcPerformance	\N	In the description of EtherCalc case study can be read\n    \n    \\begin{quote}\n        Because all jsdom code runs in a single thread, subsequent REST API calls are blocked until the previous command's rendering completes. Under high concurrency, this queue eventually triggered a latent bug that ultimately resulted in server lock-up.\n    \\end{quote}    \n    \n    The above sentence is related to a quality for	\N
320	EtherCalcTactic	\N	In the description of EtherCalc case study can be read\n    \n    \\begin{quote}\n        So, we removed jsdom from the RenderSheet function, re-implemented a minimal DOM in 20 lines of LiveScript for HTML export, then ran the profiler again. Much better! We have improved throughput by a factor of 4, HTML exporting is 20 times faster, and the lock-up problem is gone.\n    \\end{quote}    \n    \n    The above sentence describes a	\N
321	EtherCalcTestability	\N	In the description of EtherCalc case study can be read how the architect tried to increase the performance in a multi-core context\n    \n    \\begin{quote}\n    Is there a way to make use of all those spare CPUs in the multi-tenant server?\n\n    For other Node.js services running on multi-core hosts, we utilized a pre-forking cluster server that creates a process for each CPU.\n    \n        However, while EtherCalc does support multi-server scaling with Redis, the interplay of Socket.io clustering with RedisStore in a single server would have massively complicated the logic, making debugging much more difficult.\n    \\end{quote}    \n    \n    This possible solution has impact on the	\N
323	EtherCalcViews	\N	In the description of EtherCalc case study can be read how the architect increased the performance in a multi-core context\n    \n    \\begin{quote}\n    Instead of pre-forking a fixed number of processes, we sought a way to create one background thread for each server-side spreadsheet, thereby distributing the work of command execution among all CPU cores.\n    \\end{quote}    \n    \n    Which is represented by the diagram\n    \\newline\n    \n    \\begin{center}\n    \\includegraphics[width=120mm]{x-EtherCalc-multi-tenant}\n  \\end{center}\n    \n    \\begin{flushleft}\n        The above diagram, describing a server spreadsheet, can be represented using \n    \\end{flushleft}	\N
324	LoadBalancer	\N	To increase the availability of a web application it is possible to use a load-balancer between the clients and the servers that detects server failures and transparently redirects the requests to the servers that are functioning properly. To represent this architecture	\N
325	ThreeTiers	\N	One way to increase the performance of a 3-tier enterprise\n  application (with the standard separation in the web client, web\n  server, and database tiers) is to replicate the web server tier and\n  to add a load-balancer between the web clients and the web servers.\n  Unfortunately, for some enterprise applications that option is not\n  enough (or does not work at all), because	\N
327	DeploymentPerformance	\N	In the software architecture of a system, the Deployment view is\n  best suited for	\N
328	ThousandParsecPersistence	\N	In the description of ThousandParsec case study can be read\n  \n  \\begin{quote}\n      The flagship server, \\textsc{tpserver-cpp}, provides an abstract persistence interface and a modular plugin system to allow for various database back ends. \n  \\end{quote}\n  \n    This above sentence can be diagrammatically represented using	\N
329	SocialCalcBroadcastEvents	\N	Consider the (partial) component-and-connector view for the \\textsc{:SpreasdSheet} component of the SocialCalc system\n  \n    \\begin{center}\n    \\includegraphics[width=70mm]{x-SocialCalc-spreadsheet-component}\n  \\end{center}\n    \n    \\begin{flushleft}\n        The \\textsc{sub1} port\n    \\end{flushleft}	\N
330	GitHubViews	\N	In the description of GitHub case study can be read\n    \n    \\begin{quote}\n        For requests to the main website, the load balancer ships your request off to one of the four frontend machines. Each of these is an 8 core, 16GB RAM bare metal server. Their names are fe1, ..., fe4. Nginx accepts the connection and sends it to a Unix domain socket upon which sixteen Unicorn worker processes are selecting. One of these workers grabs the request and runs the Rails code necessary to fulfill it.\n    \\end{quote}\n    \n    To represent the above description it is necessary to use	\N
386	CreateArchitectureTwo	\N	The \\emph{Ensuring that the implementation conforms to the architecture} step of how to create an architecture	\N
347	ArchitectDwarves	376	Frank Buschmann, \\emph{Introducing the Pragmatic Architect}, defines the \\emph{architecture dwarves}. These kind of architects	\N
341	ComponentvsModuleTwo	377	In the Java documentation you can find:\n    \n\\begin{quote}\n\\texttt{public abstract class Component} \\\\*\n\\texttt{extends Object} \\\\*\n\\texttt{implements ImageObserver, MenuContainer, Serializable}\n\\end{quote}\n\n    Class \\texttt{Component} is:	\N
343	ModuleViewType	1135	The quality that is more relevant to views of the module viewtype is:	\N
342	FunctionalModule	1185	When designing an architecture requirements can be split into functional, quality attributes, and constraints. Functional requirements have impact on:	\N
326	PublishSubscribe	1300	Typically, Instant Messaging clients have a window to list the contacts of the user, and\n  show in that window the status of each contact (whether it is available, unavailable, busy,\n  etc). Given that the status of a contact may be changed at any time, and that the contact's\n  status is given by the Instant Messaging application of that contact, which architectural\n  style represents best the interaction pattern between these components?	\N
350	CreateArchitectureTwo	386	The \\emph{Ensuring that the implementation conforms to the architecture} step of how to create an architecture	\N
344	ComponentViewType	387	The quality(ies) that is(are) more relevant to views of the component-and-connector viewtype is(are):	\N
338	HammersNails	388	In his article \\emph{On Hammers and Nails, and Falling in Love with Technology and Design} what is the main type of influence on the architecture?	\N
334	Prioritize	390	Frank Buschmann states that:\n    \n    \\begin{quote}\n        Architects use flexibility as a cover for uncertainty.\n    \\end{quote}	\N
356	SharedUnderstanding	\N	Martin Fowler, \\emph{Who Needs and Architect?}, cites Ralph Johnson sentence:\n    \n    \\begin{quote}\n        In most successful software projects, the expert developers working on that project have a shared understanding of the system design. This shared understanding is called architecture.\n    \\end{quote}	\N
359	ArchitectureDefinition	\N	On the course slides you can find the following definition of architecture:\n    \n    \\begin{quote}\n        The software architecture of a program or computing system is the structure or structures of the system, which comprise software elements, the externally visible properties of those elements, and the relationships among them.\n    \\end{quote}\n    \n    However, in the book you can find another definition:\n    \n    \\begin{quote}\n        The software architecture of a system is the set of structures needed to reason about the system, which comprise the software elements, relations among them, and the properties of both.\n    \\end{quote}	\N
360	Featuritis	\N	Frank Buschmann states that:\n        \n    \\begin{quote}\n        Featuritis is the tendency to trade functional coverage for quality - the more functions the earlier they're delivered, the better.\n    \\end{quote}	\N
368	ArchitectAstronauts	\N	Frank Buschmann, \\emph{Introducing the Pragmatic Architect}, defines the \\emph{architecture astronauts}. This kind of architect	\N
369	FeaturitisPerformitisFlexibilities	\N	In his article, \\emph{Featuritis, Performitis, and Other Deseases}, Frank Buschmann claims that:	\N
370	Flexibilitis	\N	Frank Buschmann states that:\n    \n    \\begin{quote}\n        Overly flexible systems are hard to configure, and when they're finally configured, they lack qualities like performance or security.\n    \\end{quote}	\N
376	ArchitectDwarves	\N	Frank Buschmann, \\emph{Introducing the Pragmatic Architect}, defines the \\emph{architecture dwarves}. These kind of architects	\N
377	ComponentvsModuleTwo	\N	In the Java documentation you can find:\n    \n\\begin{quote}\n\\texttt{public abstract class Component} \\\\*\n\\texttt{extends Object} \\\\*\n\\texttt{implements ImageObserver, MenuContainer, Serializable}\n\\end{quote}\n\n    Class \\texttt{Component} is:	\N
378	Explicit	\N	Frank Buschmann states that:\n    \n    \\begin{quote}\n        There's only one escape from such situations: architects must actively break the cycle of mutual misunderstanding and mistrust!\n    \\end{quote}	\N
380	WalkingSkeleton	\N	The \\emph{Walking Skeleton} referred in Frank Buschmann's article, \\emph{Featuritis, Performitis, and Other Deseases}:	\N
375	ArchitectDwarves	376	Frank Buschmann, \\emph{Introducing the Pragmatic Architect}, defines the \\emph{architecture dwarves}. These kind of architects	\N
373	ComponentvsModuleTwo	377	In the Java documentation you can find:\n    \n\\begin{quote}\n\\texttt{public abstract class Component} \\\\*\n\\texttt{extends Object} \\\\*\n\\texttt{implements ImageObserver, MenuContainer, Serializable}\n\\end{quote}\n\n    Class \\texttt{Component} is:	\N
371	Explicit	378	Frank Buschmann states that:\n    \n    \\begin{quote}\n        There's only one escape from such situations: architects must actively break the cycle of mutual misunderstanding and mistrust!\n    \\end{quote}	\N
374	ModuleViewType	1135	The quality that is more relevant to views of the module viewtype is:	\N
372	WalkingSkeleton	380	The \\emph{Walking Skeleton} referred in Frank Buschmann's article, \\emph{Featuritis, Performitis, and Other Deseases}:	\N
381	Prioritize	390	Frank Buschmann states that:\n    \n    \\begin{quote}\n        Architects use flexibility as a cover for uncertainty.\n    \\end{quote}	\N
379	ModuleViewType	1135	The quality that is more relevant to views of the module viewtype is:	\N
358	Performitis	865	Frank Buschmann cites the characterization Marquardt does of Performitis:\n        \n    \\begin{quote}\n        Each part of the system is directly influenced by local performance tuning measures. There is no global performance strategy, or it ignores other qualities of the system as testability and maintainability.\n    \\end{quote}\n    \n    From this problem you can conclude that:	\N
357	CreateArchitectureOne	926	During the different steps on how to create an architecture, the precise specification of architecture quality attributes is initially relevant to	\N
366	ComponentvsModule	932	In wikipedia you can find the following fragment of a definition:\n    \n    \\begin{quote}\n        An individual software component is a software package, or a module that encapsulates a set of related functions.\n    \\end{quote}\n    \n    According to the definitions taught in the course the above \\emph{individual software component} corresponds to:	\N
367	EarlyDecisions	1217	In his article, \\emph{Who Needs and Architect?}, Martin Fowler cites Ralph Johnson definition:\n    \n    \\begin{quote}\n        Architecture is the set of decisions that must be made early in a project.\n    \\end{quote}\n    \n    In his opinion:	\N
431	Scenario	552	In a quality scenario	\N
452	Scenario	552	In a quality scenario	\N
435	Voting	1417	A voting tactic can be used to	\N
456	Voting	1417	A voting tactic can be used to	\N
489	ChromePredictor	556	In the description of the Chrome system can be read\n    \n    \\begin{quote}\n        The goal of the predictor is to evaluate the likelihood of its success, and then to trigger the activity if resources are available. \n    \\end{quote}\n    \n    The above sentence refer to	\N
496	Voting	1417	A voting tactic can be used to	\N
498	GarbageCollector	557	In wikipedia you can find the following definition:\n    \n    \\begin{quote}\n        The garbage collector, or just collector, attempts to reclaim garbage, or memory occupied by objects that are no longer in use by the program.\n    \\end{quote}\n    \n    The garbage collector is a component that implements an availability tactic of	\N
499	GraphiteTechnicaAndNonTechnicalUsers	558	Human-editable URL API for creating graphs is a usability design tactic used in the Graphite system. This tactic	\N
483	InternalAttack	563	In a system where the source of attacks can be internal, from authorized users, the appropriate tactics to be used are	\N
491	AvailabilityScenario	551	Consider the following scenario\n    \n    \\begin{quote}\n        When writing to the database the system receives an exception about a write failure. The system should stop interacting with data base and write a log message. \n    \\end{quote}\n    \n    The quality addressed by this scenario is	\N
488	Scenario	552	In a quality scenario	\N
492	Scenario	552	In a quality scenario	\N
494	InteroperabilityScenario	553	Consider the following scenario\n    \n    \\begin{quote}\n        Our vehicle information system send our current location to the traffic monitoring system. The traffic monitoring system combines our location with other information, overlays this information on a Google Map, and broadcasts it. Our location information is correctly included with a probability of 99.99\\%.\n    \\end{quote}\n    \n    The quality addressed by this scenario is	\N
466	SeparateEntities	564	In a system where there are sensitive data an appropriate tactic to be used is	\N
484	SeparateEntities	564	In a system where there are sensitive data an appropriate tactic to be used is	\N
467	ChromeTabSecurity	565	In the Chrome system the use of a process per tab results form the application of a tactic of	\N
485	ChromeTabSecurity	565	In the Chrome system the use of a process per tab results form the application of a tactic of	\N
486	ChromePerformance	566	In the Chrome system the following tactic is used to improve performance	\N
493	Tactics	568	An architectural tactic	\N
497	Degradation	569	Consider a enterprise web system, which provides services both on the company's intranet and to the company's clients on the internet, that when under a denial of service attack decides to stop providing internet services.	\N
495	PingEcho	554	A heartbeat monitor	\N
537	Degradation	569	Consider a enterprise web system, which provides services both on the company's intranet and to the company's clients on the internet, that when under a denial of service attack decides to stop providing internet services.	\N
490	ChromeUsability	570	In the description of the Chrome system can be read\n    \n    \\begin{quote}\n        As the user types, the Omnibox automatically proposes an action, which is either a URL based on your navigation history, or a search query.\n    \\end{quote}\n    \n    The above sentence refers to	\N
512	Scenario	552	In a quality scenario	\N
532	Scenario	552	In a quality scenario	\N
534	InteroperabilityScenario	553	Consider the following scenario\n    \n    \\begin{quote}\n        Our vehicle information system send our current location to the traffic monitoring system. The traffic monitoring system combines our location with other information, overlays this information on a Google Map, and broadcasts it. Our location information is correctly included with a probability of 99.99\\%.\n    \\end{quote}\n    \n    The quality addressed by this scenario is	\N
535	PingEcho	554	A heartbeat monitor	\N
519	GarbageCollector	557	In wikipedia you can find the following definition:\n    \n    \\begin{quote}\n        The garbage collector, or just collector, attempts to reclaim garbage, or memory occupied by objects that are no longer in use by the program.\n    \\end{quote}\n    \n    The garbage collector is a component that implements an availability tactic of	\N
520	GraphiteTechnicaAndNonTechnicalUsers	558	Human-editable URL API for creating graphs is a usability design tactic used in the Graphite system. This tactic	\N
536	Voting	1417	A voting tactic can be used to	\N
502	GraphiteBackend	560	To reduce the backend load (writes) the Graphite system uses	\N
523	GraphiteBackend	560	To reduce the backend load (writes) the Graphite system uses	\N
503	Firewall	561	Having a single point of access to an intranet is a security tactic of	\N
524	Firewall	561	Having a single point of access to an intranet is a security tactic of	\N
504	VerifyMessageIntegrity	562	In the Fenix system a checksum is associated to a set of grades. This is an application of the tactic	\N
525	VerifyMessageIntegrity	562	In the Fenix system a checksum is associated to a set of grades. This is an application of the tactic	\N
505	InternalAttack	563	In a system where the source of attacks can be internal, from authorized users, the appropriate tactics to be used are	\N
517	SeparateEntities	564	In a system where there are sensitive data an appropriate tactic to be used is	\N
522	GraphiteModifiability	567	In the Graphite system description can be read:\n    \n    \\begin{quote}\n        Making multiple Graphite servers appear to be a single system from a user perspective isn't terribly difficult, at least for a naive implementation.\n    \\end{quote}	\N
513	Tactics	568	An architectural tactic	\N
533	Tactics	568	An architectural tactic	\N
521	GraphiteReliability	958	In the Graphite system description can be read:\n    \n    \\begin{quote}\n        We've got 600,000 metrics that update every minute and we're assuming our storage can only keep up with 60,000 write operations per minute. This means we will have approximately 10 minutes worth of data sitting in carbon's queues at any given time. To a user this means that the graphs they request from the Graphite webapp will be missing the most recent 10 minutes of data.\n    \\end{quote}	\N
551	AvailabilityScenario	\N	Consider the following scenario\n    \n    \\begin{quote}\n        When writing to the database the system receives an exception about a write failure. The system should stop interacting with data base and write a log message. \n    \\end{quote}\n    \n    The quality addressed by this scenario is	\N
552	Scenario	\N	In a quality scenario	\N
553	InteroperabilityScenario	\N	Consider the following scenario\n    \n    \\begin{quote}\n        Our vehicle information system send our current location to the traffic monitoring system. The traffic monitoring system combines our location with other information, overlays this information on a Google Map, and broadcasts it. Our location information is correctly included with a probability of 99.99\\%.\n    \\end{quote}\n    \n    The quality addressed by this scenario is	\N
554	PingEcho	\N	A heartbeat monitor	\N
556	ChromePredictor	\N	In the description of the Chrome system can be read\n    \n    \\begin{quote}\n        The goal of the predictor is to evaluate the likelihood of its success, and then to trigger the activity if resources are available. \n    \\end{quote}\n    \n    The above sentence refer to	\N
557	GarbageCollector	\N	In wikipedia you can find the following definition:\n    \n    \\begin{quote}\n        The garbage collector, or just collector, attempts to reclaim garbage, or memory occupied by objects that are no longer in use by the program.\n    \\end{quote}\n    \n    The garbage collector is a component that implements an availability tactic of	\N
558	GraphiteTechnicaAndNonTechnicalUsers	\N	Human-editable URL API for creating graphs is a usability design tactic used in the Graphite system. This tactic	\N
560	GraphiteBackend	\N	To reduce the backend load (writes) the Graphite system uses	\N
561	Firewall	\N	Having a single point of access to an intranet is a security tactic of	\N
562	VerifyMessageIntegrity	\N	In the Fenix system a checksum is associated to a set of grades. This is an application of the tactic	\N
563	InternalAttack	\N	In a system where the source of attacks can be internal, from authorized users, the appropriate tactics to be used are	\N
564	SeparateEntities	\N	In a system where there are sensitive data an appropriate tactic to be used is	\N
565	ChromeTabSecurity	\N	In the Chrome system the use of a process per tab results form the application of a tactic of	\N
566	ChromePerformance	\N	In the Chrome system the following tactic is used to improve performance	\N
567	GraphiteModifiability	\N	In the Graphite system description can be read:\n    \n    \\begin{quote}\n        Making multiple Graphite servers appear to be a single system from a user perspective isn't terribly difficult, at least for a naive implementation.\n    \\end{quote}	\N
568	Tactics	\N	An architectural tactic	\N
569	Degradation	\N	Consider a enterprise web system, which provides services both on the company's intranet and to the company's clients on the internet, that when under a denial of service attack decides to stop providing internet services.	\N
570	ChromeUsability	\N	In the description of the Chrome system can be read\n    \n    \\begin{quote}\n        As the user types, the Omnibox automatically proposes an action, which is either a URL based on your navigation history, or a search query.\n    \\end{quote}\n    \n    The above sentence refers to	\N
547	ChromeTabSecurity	565	In the Chrome system the use of a process per tab results form the application of a tactic of	\N
548	ChromePerformance	566	In the Chrome system the following tactic is used to improve performance	\N
541	GraphiteModifiability	567	In the Graphite system description can be read:\n    \n    \\begin{quote}\n        Making multiple Graphite servers appear to be a single system from a user perspective isn't terribly difficult, at least for a naive implementation.\n    \\end{quote}	\N
550	ChromeUsability	570	In the description of the Chrome system can be read\n    \n    \\begin{quote}\n        As the user types, the Omnibox automatically proposes an action, which is either a URL based on your navigation history, or a search query.\n    \\end{quote}\n    \n    The above sentence refers to	\N
559	GraphiteReliability	958	In the Graphite system description can be read:\n    \n    \\begin{quote}\n        We've got 600,000 metrics that update every minute and we're assuming our storage can only keep up with 60,000 write operations per minute. This means we will have approximately 10 minutes worth of data sitting in carbon's queues at any given time. To a user this means that the graphs they request from the Graphite webapp will be missing the most recent 10 minutes of data.\n    \\end{quote}	\N
571	FenixBusinessCase	1303	In the context of the FenixEdu case study, the business case was to	\N
555	Voting	1417	A voting tactic can be used to	\N
594	SocialCalcUsability	\N	In the description of the SocialCalc case study can be read:\n    \n    \\begin{quote}\n        Even with race conditions resolved, it is still suboptimal to accidentally overwrite the cell another user is currently editing. A simple improvement is for each client to broadcast its cursor position to other users, so everyone can see which cells are being worked on.\n    \\end{quote} \n    \n    From this fragment can be identified a scenario for	\N
595	ThounsandParsecInteroperability	\N	In the description of the Thousand Parsec case study can be read:\n    \n    \\begin{quote}\n        Finding a public Thousand Parsec server to play on is much like locating a lone stealth scout in deep space - a daunting prospect if one doesn't know where to look. Fortunately, public servers can announce themselves to a metaserver, whose location, as a central hub, should ideally be well-known to players.\n    \\end{quote} \n    \n    From this fragment can be identified a scenario for	\N
585	ThounsandParsecRollback	626	In the description of the Thousand Parsec case study can be read:\n    \n    \\begin{quote}\n        Besides often running far longer than the circadian rhythms of the players' species, during this extended period the server process might be prematurely terminated for any number of reasons. To allow players to pick up a game where they left off, Thousand Parsec servers provide persistence by storing the entire state of the universe (or even multiple universes) in a database.\n    \\end{quote} \n    \n    The tactic referred in the fragments is	\N
596	FenixBusinessCase	1303	In the context of the FenixEdu case study, the business case was to	\N
598	IterativeDesign	1414	Designing an architecture	\N
604	SocialCalcModifiability	\N	In the description of the SocialCalc case study can be read:\n    \n    \\begin{quote}\n        To make this work across browsers and operating systems, we use the Web::Hippie4 framework, a high-level abstraction of JSON-over-WebSocket with convenient jQuery bindings.\n    \\end{quote} \n    \n    From this fragment can be identified a scenario for	\N
605	ThounsandParsecSystemInitiative	\N	In the description of the Thousand Parsec case study can be read:\n    \n    \\begin{quote}\n        Next, the player is prompted to configure options for the ruleset and server, with sane defaults pulled from the metadata. Finally, if any compatible AI clients are installed, the player is prompted to configure one or more of them to play against.\n    \\end{quote} \n    \n    The tactic referred in the fragments is	\N
606	DecompositionBuilvsBuy	\N	A criteria for the the application of the Decomposition architectural style of the Module viewtype is Build-vs-Buy decisions. The application of the criteria	\N
608	BusinessScenarioOne	\N	In the context of the FenixEdu case study the following scenario was identified.\n    \n    \\begin{quote}\n        The school management pretends that all the members of the school, students, administrative staff, faculty and management should be able to use the system to perform their activities efficiently without requiring the installation of any client software or a long learning process.\n    \\end{quote}\n    \n    This is a	\N
615	SocialCalcAvailability	\N	In the description of the SocialCalc case study can be read:\n    \n    \\begin{quote}\n        If users A and B simultaneously perform an operation affecting the same cells, then receive and execute commands broadcast from the other user, they will end up in different states.\n    \\end{quote} \n    \n    From this fragment can be identified a scenario for	\N
616	UtilityTree	\N	A utility tree	\N
617	ThounsandParsecAvailability	\N	In the description of the Thousand Parsec case study can be read:\n    \n    \\begin{quote}\n        Turns also have a time limit imposed by the server, so that slow or unresponsive players cannot hold up a game.\n    \\end{quote} \n    \n    From this fragment can be identified a scenario for	\N
618	HighBusinessValue	\N	Consider an architecturally significant requirement (ASR) that has a high impact on the architecture but a low business value	\N
624	SocialCalcMaintainTaskModel	\N	In the description of the SocialCalc case study can be read:\n    \n    \\begin{quote}\n        Therefore, on browsers with support for CSS3, we use the box-shadow property to represent multiple peer cursors in the same cell.\n    \\end{quote} \n    \n    This corresponds to the application of	\N
614	Decomposition	1408	The Decomposition architectural style of the Module viewtype	\N
621	SocialCalcMaintainTaskModel	624	In the description of the SocialCalc case study can be read:\n    \n    \\begin{quote}\n        Therefore, on browsers with support for CSS3, we use the box-shadow property to represent multiple peer cursors in the same cell.\n    \\end{quote} \n    \n    This corresponds to the application of	\N
622	ThounsandParsecRollback	626	In the description of the Thousand Parsec case study can be read:\n    \n    \\begin{quote}\n        Besides often running far longer than the circadian rhythms of the players' species, during this extended period the server process might be prematurely terminated for any number of reasons. To allow players to pick up a game where they left off, Thousand Parsec servers provide persistence by storing the entire state of the universe (or even multiple universes) in a database.\n    \\end{quote} \n    \n    The tactic referred in the fragments is	\N
623	Decomposition	1408	The Decomposition architectural style of the Module viewtype	\N
619	BusinessScenarioTwo	628	In the context of the FenixEdu case study the following scenario was identified.\n    \n    \\begin{quote}\n        The management intends that the system should be available to all users, even after offices close and classes finish because students may need courses material to study 24X7 and faculty and administrative staff may want to work from home.\n    \\end{quote}\n    \n    This is a	\N
625	Decomposition	1408	The Decomposition architectural style of the Module viewtype	\N
620	FenixADD	1398	When applying Attribute-Driven Design (ADD) to the FenixEdu system the creation of a view where there are redundant web servers, load balancers and database servers	\N
600	LowArchitecturalImpact	1406	Consider an architecturally significant requirement (ASR) that has a low impact on the architecture but a high business value	\N
607	LowArchitecturalImpact	1406	Consider an architecturally significant requirement (ASR) that has a low impact on the architecture but a high business value	\N
626	ThounsandParsecRollback	\N	In the description of the Thousand Parsec case study can be read:\n    \n    \\begin{quote}\n        Besides often running far longer than the circadian rhythms of the players' species, during this extended period the server process might be prematurely terminated for any number of reasons. To allow players to pick up a game where they left off, Thousand Parsec servers provide persistence by storing the entire state of the universe (or even multiple universes) in a database.\n    \\end{quote} \n    \n    The tactic referred in the fragments is	\N
628	BusinessScenarioTwo	\N	In the context of the FenixEdu case study the following scenario was identified.\n    \n    \\begin{quote}\n        The management intends that the system should be available to all users, even after offices close and classes finish because students may need courses material to study 24X7 and faculty and administrative staff may want to work from home.\n    \\end{quote}\n    \n    This is a	\N
627	FenixADD	1398	When applying Attribute-Driven Design (ADD) to the FenixEdu system the creation of a view where there are redundant web servers, load balancers and database servers	\N
654	UsesCycles	\N	Consider a view of the module viewtype where there is a uses loop, a cycle of uses dependences between several modules. It may be possible to break the dependence cycle by	\N
655	Aspects	\N	An architect is decomposing a system into a set of responsibilities using a view of the Decomposition style. However, she had already to backtrack several times and try new decompositions because she end up with some responsibility that can not be within a single module.	\N
656	GitHubSecurity	\N	In the description of the GitHub case study can be read:\n    \n    \\begin{quote}\n        Of course, allowing arbitrary execution of commands is unsafe, so SSH includes the ability to restrict what commands can be executed. In a very simple case, you can restrict execution to git-shell which is included with Git. All this script does is check the command that you're trying to execute and ensure that it's one of git upload-pack, git receive-pack, or git upload-archive.\n    \\end{quote}\n    \n    The tactic addressed in this fragments is:	\N
657	ConnectorAttach	\N	A connector may be attached to components of different types because	\N
658	RepositoryPerformance	\N	The repository architectural style provides performance because	\N
665	ClientServerSynchronous	\N	In the client-server architectural style the request/reply connector is synchronous. Consider an architect that wants to describe an asynchronous interaction between clients and servers.	\N
666	GeneralizationEvolution	\N	The Generalization architectural style of the module viewtype can be use to support the evolution of a system	\N
667	GitIncreaseResourceEfficiency	\N	In the description of the Git case study can be read how it efficiently compares content:\n    \n    \\begin{quote}\n        When a content (i.e., file or directory) node in the graph has the same reference identity (the SHA in Git) as that in a different commit, the two nodes are guaranteed to contain the same content, allowing Git to short-circuit content diffing efficiently.\n    \\end{quote}\n    \n    The performance tactic addressed in this fragments is:	\N
668	DataModelFacebook	\N	In Facebook it is not possible to have the information about more that one bilion users in a single disk. Therefore, a sharding technique is applied, where the persistent information is split between several database servers, and applications are routed to the right servers for queries and updates. To describe this architecture	\N
674	GitHubComputationRedundancy	\N	In the description of the GitHub case study can be read:\n    \n    \\begin{quote}\n        Once the Smoke proxy has determined the user's route, it establishes a transparent proxy to the proper file server. We have four pairs of file servers. Their names are fs1a, fs1b, ..., fs4a, fs4b. These are 8 core, 16GB RAM bare metal servers, each with six 300GB 15K RPM SAS drives arranged in RAID 10. At any given time one server in each pair is active and the other is waiting to take over should there be a fatal failure in the master. All repository data is constantly replicated from the master to the slave via DRBD.\n    \\end{quote}\n    \n    The four pairs of file servers implement:	\N
675	ComponentPorts	\N	Consider the concepts of module interface and component port.	\N
676	UsesDataModel	\N	A CRUD matrix, which indicates whether each module creates, reads, updates, or deletes data (CRUD, for short) from each data entity. The CRUD matrix	\N
678	UsesFor	\N	The Uses architectural style of the Module viewtype	\N
672	ComponentPorts	675	Consider the concepts of module interface and component port.	\N
664	ConnectorDecomposition	945	Consider an architect that is designing a component-and-connector view. In some point the architect decides that she does not need to decompose a connector with a demanding quality level. This may occur because	\N
677	ClientServerAvailability	946	The client-server architectural style provides availability because	\N
684	LayeredVirtualMachine	\N	According to the definition of the Layered architectural style, each layer represents a grouping of modules that offers a cohesive set of services.	\N
685	RepositoryModifiability	\N	The repository architectural style provides modifiability because	\N
687	GitConditionMonitoring	\N	In the description of the Git case study can be read how to deal with the corruption of pack files in the context of the availability quality:\n    \n    \\begin{quote}\n        If an object was only copied partially or another form of data corruption occurred, recalculating the SHA of the current object will identify such corruption.\n    \\end{quote}\n    \n    The tactic addressed in this fragments is:	\N
703	InstallStyle	949	An important stage of the development of any system is its build into the set of executable files. A suitable architectural style which helps on the definition of the build process is	\N
693	SOAInteroperability	1180	The Service-Oriented Architecture style improves interoperability because	\N
697	GraphiteDecompositionMemcached	737	Consider the following decomposition view of the Graphite system where module \\textsc{Store Graphs} is responsible for managing the storage of datapoints and graphs and module \\textsc{Present Graphs} for graphs generation and presentation. Memcache is a library that maintains datapoints in memory to reduce the overhead of obtaining them from the file system.\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{x-top-decomposition}\n    \\end{center}	\N
691	Tiers	738	The Tiers architectural style	\N
686	ModuleComponent	1245	Consider the kind of relations between components and modules.	\N
688	UsesCalls	1256	A function call is not necessarily a uses relation of the Uses architectural style of the Module viewtype because	\N
714	AllocationStylesCost	1475	Consider a stakeholder that is particularly concerned about the total cost of the project. When it comes to describing the system using allocation viewtypes is interested in	\N
707	DVDCatalogMobile	1191	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        To support iPhone/iPad/Android version with sync, which allows offline use of the application in the mobile device and data synchronization to occur when a connection is available\n    \\end{quote}\n    \n    This requirement requires a change of	\N
715	PeerToPeerSpace	1193	The Peer-to-Peer architectural style provides high scalability and availability. In the context of a file sharing system	\N
692	PublishSubscribe	1435	In the Publish-Subscribe architectural style	\N
717	SOAClientServerPeertoPeer	\N	The Service-Oriented Architecture style	\N
718	GraphiteCarbon	\N	Consider the following application-specific types that were defined for a component-and-connector view that depicts the components within \\texttt{Carbon} component. \n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{x-carbon-buffering}\n    \\end{center}	\N
724	ImplementationStyle	\N	An architecture can also be represented by the set of files which contains its modules code. A suitable architectural style to represent this set of files is	\N
725	DVDCatalogAspects	\N	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        To allow the share of catalogs with family and friends, including some access control. \n    \\end{quote}\n    \n    This requirement requires	\N
727	SOAQualities	\N	The Service-Oriented Architecture style improves modifiability because	\N
737	GraphiteDecompositionMemcached	\N	Consider the following decomposition view of the Graphite system where module \\textsc{Store Graphs} is responsible for managing the storage of datapoints and graphs and module \\textsc{Present Graphs} for graphs generation and presentation. Memcache is a library that maintains datapoints in memory to reduce the overhead of obtaining them from the file system.\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{x-top-decomposition}\n    \\end{center}	\N
738	Tiers	\N	The Tiers architectural style	\N
744	DeploymentStyleLimitExposure	\N	An architect needs to show that a security tactic of limit exposure will be effectively provided by the executing system. Therefore, she decides to design	\N
745	DVDCatalogMultiPlatform	1244	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        To support multi-platform (Mac, Windows, Linux)\n    \\end{quote}\n    \n    This requirement requires a change of	\N
720	SOAQualities	727	The Service-Oriented Architecture style improves modifiability because	\N
729	Tiers	738	The Tiers architectural style	\N
736	InstallStyle	949	An important stage of the development of any system is its build into the set of executable files. A suitable architectural style which helps on the definition of the build process is	\N
728	GraphiteDataPointSocket	953	Consider the following application-specific types. Note that \\texttt{Queue} components are within the \\texttt{Carbon} components. In a view that contains components of these three types \n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{x-datapoint-access}\n    \\end{center}	\N
734	DVDCatalogMobile	1191	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        To support iPhone/iPad/Android version with sync, which allows offline use of the application in the mobile device and data synchronization to occur when a connection is available\n    \\end{quote}\n    \n    This requirement requires a change of	\N
746	PublishSubscribe	1435	In the Publish-Subscribe architectural style	\N
730	SOAInteroperability	1180	The Service-Oriented Architecture style improves interoperability because	\N
735	SOAInteroperability	1180	The Service-Oriented Architecture style improves interoperability because	\N
719	PeerToPeerDynamicReconfiguration	1316	In the description of the Gnutella system can be read:\n    \n    \\begin{quote}\n        The topology of the system changes at runtime as peer components connect and disconnect to the network.\n    \\end{quote}	\N
726	PeerToPeerDynamicReconfiguration	1316	In the description of the Gnutella system can be read:\n    \n    \\begin{quote}\n        The topology of the system changes at runtime as peer components connect and disconnect to the network.\n    \\end{quote}	\N
716	DVDCatalogMeta	1125	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        The application should support other kinds of catalogs (CDs, games, books, ...). \n    \\end{quote}\n    \n    This requirement requires a change of	\N
747	GraphiteDecompositionBuffering	\N	Consider the following decomposition view of the Graphite system where module \\textsc{Store Graphs} is responsible for managing the storage of datapoints and graphs and module \\textsc{Present Graphs} for graphs generation and presentation. Buffering is a library used to temporarily store incoming data point.\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{x-top-decomposition}\n    \\end{center}	\N
774	SocialCalcConflictResolution	\N	Consider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the client Spreadsheet. A \\textsc{ConflictResolution} module is used when local commands conflict with remote commands.\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{x-SocialCalc-cc-client}\n    \\end{center}	\N
775	LogicAccessTableModule	\N	When the domain logic is organized using a Table Module pattern	\N
776	SilkMobileDevices	\N	When comparing Amazon Silk with Google Chrome in the context of mobile devices	\N
748	PipeFilterComposition	1427	The Pipe-and-Filter style allows composition of filters	\N
777	ThousandParsecReadWriteConnector	\N	Consider the architectural views for the ThousandParsec system. The following diagram depicts a proposal of application-specific types for the architectural components, where the names of the ports are missing. Between the GameServer and Repository component\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{x-ThousandParsec-cc}\n    \\end{center}	\N
778	OrderPadReliability	\N	Consider the architecture of the Morrison's OrderPad. The connector between the client component, executing in the Pad, and the server component, executing in the OrderPadDatabase	\N
784	LogicAccessTransactionScriptDomainObjects	\N	When the domain logic is organized using a Transaction Script pattern the domain objects	\N
785	OrderPadIterative	\N	Consider the architecture of the Morrison's OrderPad. In the description of the system can be read:\n    \n    \\begin{quote}\n        One of these was using a file-transfer to send data to the mainframe rather than MQ, which wouldn't perform well once many stores were active.\n    \\end{quote}\n    \n    This approach means that	\N
786	SilkConnections	\N	When comparing Amazon Silk with Google Chrome	\N
787	ThousandParsecModule	\N	Consider the architectural views for the ThousandParsec system. The following diagram depicts a fragment of a proposal for the decomposition view of the system. The ThousandParsec protocol\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{x-ThousandParsec-ruleset}\n    \\end{center}	\N
788	SocialCalcRemoteCursor	\N	Consider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the client Spreadsheet. It can be read in the case description: \\emph{A simple improvement is for each client to broadcast its cursor position to other users, so everyone can see which cells are being worked on.}\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{x-SocialCalc-cc-client}\n    \\end{center}	\N
794	LogicAccessTransactionScript	\N	When the domain logic is organized using a Transaction Script pattern the most suitable data source patterns are	\N
795	OrderPadPortability	\N	Consider the architecture of the Morrison's OrderPad. The decision between the use of a Native application or HTML5 on the implementation of the client in the Pad	\N
796	SilkPredictor	\N	When comparing Amazon Silk with Google Chrome in the context of the prediction of pages the user is going to access	\N
797	SocialCalcServer	\N	Consider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the system. According to this representation\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{x-SocialCalc-cc}\n    \\end{center}	\N
798	ThousandParsecTPConnector	\N	Consider the architectural views for the ThousandParsec system. The following diagram depicts a proposal of application-specific types for the architectural components, where the names of the ports are missing. Between the GameClient and GameServer components\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{x-ThousandParsec-cc}\n    \\end{center}	\N
804	OrderPadMainframeConnector	\N	Consider the architecture of the Morrison's OrderPad. The final interaction between the OrderPadDatabase component and Mainframe component is supported by	\N
805	LogicAccessDomainModel	\N	When the domain logic is organized using a Domain Model pattern the most suitable data source patterns are	\N
806	SilkCaching	\N	When comparing Amazon Silk with Google Chrome	\N
779	SilkConnections	786	When comparing Amazon Silk with Google Chrome	\N
807	ThousandParsecAI	\N	Consider the architectural views for the ThousandParsec system. The following diagram depicts a fragment of a proposal for the decomposition view of the system. The AI players should be described\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{x-ThousandParsec-ruleset}\n    \\end{center}	\N
808	SocialCalcParser	\N	Consider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the client Spreadsheet. A \\textsc{Parser} module is used when loading a file\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{x-SocialCalc-cc-client}\n    \\end{center}	\N
863	ArchitectureInfluenceCycleOne	\N	Consider the following sentence by Melvin Conways, also known as Conway's Law\n    \n    \\begin{quote}\n        organizations which design systems ... are constrained to produce designs which are copies of the communication structures of these organizations\n    \\end{quote}	\N
839	ContinousIntegrationScenariosTacticsOne	\N	In the Continous integration case study can be read about Jenkins\n      \n      \\begin{quote}\n          It takes advantage of the JUnit XML standard for unit test and code coverage reporting to integrate reports from a variety of test tools. Jenkins originated with Sun, but is very widely used and has a robust open-source community associated with it.\n      \\end{quote}\n      \n      Consider that a scenario is written from the above sentence	\N
840	InfinispanScenariosTacticsOne	\N	In the Infinispan case study can be read\n      \n      \\begin{quote}\n          When persisting for durability, persistence can either be online, where the application thread is blocked until data is safely written to disk, or offline, where data is flushed to disk periodically and asynchronously. In the latter case, the application thread is not blocked on the process of persistence, in exchange for uncertainty as to whether the data was successfully persisted to disk at all.\n      \\end{quote}\n      \n      From the description we can infer a trade-off between the qualities of	\N
842	MicroservicesArchitectureOne	\N	Consider the following figure depicting two different architectures for web applications\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{../Microservices}\n    \\end{center}	\N
843	AmazonOne	\N	Consider the following excerpt about the Amazon system\n    \n    \\begin{quote}\n        Over time, this grew into hundreds of services and a number of application servers that aggregate the information from the services. The application that renders the Amazon.com Web pages is one such application server, but so are the applications that serve the Web-services interface, the customer service application, the seller interface, and the many third-party Web sites that run on our platform.\n    \\end{quote}\n    \n    The architectural style that better represents these aspects of the Amazon architecture is	\N
841	WebTwoOne	954	With the evolution of the web application technologies, it is now\n    possible to develop web applications with a user interface similar\n    to the interface of desktop applications.  Yet, for this to\n    happen, part of the code that was executing in the web server is\n    now executing in the web browser.  How does this change manifests\n    in the software architecture of the system?	\N
829	AllocationOne	1346	Consider the work assignment architectural style of the allocation viewtype.	\N
844	DesigningArchitectureOne	\N	According to the attribute-driven design process, we should design\n    the software architecture for a system based on a selected list of\n    requirements, which are called the \\textit{architecture significant requirements}.\n    These requirements should be sorted according to their\n    importance for the system's stakeholders because	\N
848	AvailabilityOne	\N	There are several tactics to satisfy availability requirements,\n    which may be applied depending on the concrete requirement that we\n    want to satisfy.  Assuming that you want to deal with faults of type\n    \\emph{omission} in your system, which tactic is more adequate?	\N
851	NginxScenariosTacticsOne	\N	Consider the following excerpt from Nginx case study\n\n    \\begin{quote}\n        nginx configuration is kept in a number of plain text files which typically reside in /usr/local/etc/nginx or /etc/nginx. The main configuration file is usually called nginx.conf.         To keep it uncluttered, parts of the configuration can be put in separate files which can be automatically included in the main one. However, it should be noted here that nginx         does not currently support Apache-style distributed configurations (i.e., .htaccess files). All of the configuration relevant to nginx web server behavior should reside in a         centralized set of configuration files.\n    \\end{quote}\n    \n    When comparing the configuration in Nginx with the configuration in Apache we can say that	\N
852	ComponentConnectorOne	\N	Suppose that there are certain performance requirements for a\n  system, and that you want to show to the stakeholders of the system\n  that the software architecture that you designed meet those\n  requirements. To do this	\N
853	RepositoryClientServerOne	\N	Suppose that you are designing the software architecture for an\n    enterprise application that has requirements about the maximum\n    response time for a certain type of requests.  Moreover, assume\n    that those requests arrive at the system periodically, whereas the\n    remaining requests have an unpredictable frequency.  Finally,\n    assume that your system will have a single server that will be\n    executing on a predefined machine with a 12-core AMD processor.\n    To show to the stakeholders that your system satisfies the\n    performance requirements you have to use views of which\n    architectural style?	\N
855	SOAPipesFiltersOne	\N	Imagine that you want to develop a system that is to be used in email servers, whose goal\n      is to allow changing the emails that are received by the server (for example, to remove\n      potential viruses or URLs linking to phishing sites). The goal is that the server feeds each\n      received email through this system before processing it (e.g., forward it to another server,\n      or store it locally). The system is supposed to be easily modifiable, to support new types\n      of email transformations. Which architectural style is the most adequate to satisfy these\n      requirements?	\N
857	nginxOne	\N	Web servers implemented in Java, such as the Tomcat web server,\n  typically use a thread-based model for processing requests.  That\n  is, they process each request on a different thread within the same\n  JVM process, rather than on a different process.  One of the reasons\n  for this is that	\N
858	ContinousIntegrationViewsOne	\N	Consider the following architectural view of the Pony-Build system as described in the Continous integration case study\n      \n    \\begin{center}\n        \\includegraphics[width=100mm]{../PonyBuildArchitecture}\n    \\end{center}\n    \n    According to this view the quality of performance is achieved through	\N
859	InfinispanViewsOne	\N	In the Infinispan case study can be read\n      \n      \\begin{quote}\n         Infinispan's core data structures make use of software transactional memory techniques for concurrent access to shared data. This minimizes the need for explicit locks, mutexes and other forms of synchronization, preferring techniques like compare-and-set operations within a loop to achieve correctness when updating shared data structures. Such techniques have been proven to improve CPU utilization in multi-core and SMP systems, and despite the increased code complexity, has paid off in overall performance when under load.\n      \\end{quote}\n      \n      These properties of Infinispan can be represented by	\N
860	ScalableArchitectureOne	\N	Consider the following excerpt about the Scalable web architecture and distributed systems case study about two different possible implementations of a global cache\n    \n    \\begin{quote}\n         The majority of applications leveraging global caches tend to use the first type, where the cache itself manages eviction and fetching data to prevent a flood of requests for the same data from the clients. However, there are some cases where the second implementation makes more sense. For example, if the cache is being used for very large files, a low cache hit percentage would cause the cache buffer to become overwhelmed with cache misses; in this situation it helps to have a large percentage of the total data set (or hot data set) in the cache.     \\end{quote}	\N
861	GraphiteScenarioTacticsOne	\N	In the Graphite system the component \\emph{carbon} provides to \\emph{webapp} components an access interface to the \\emph{buffers} in order to improve the quality of	\N
944	LayeredAspectsDataModelOne	1445	In a layered architecture composed by four layers, where the topmost\n  layer is the layer number 1 and the bottommost layer is the layer\n  number 4, which of the layers is more modifiable?	\N
845	ModuleViewtypeOne	1026	Consider the Decomposition architectural style of the Module viewtype	\N
846	UsesGeneralizationOne	1187	To achieve a faster time-to-market, software companies are\n  increasingly using a strategy of incremental releases of their\n  software, where each new release has a set of new features.  Which\n  architectural style is better to analyse whether the system's\n  software architecture is adequate for the planned incremental\n  releases?	\N
862	GraphiteViewsOne	1268	In Graphite system  the \\emph{receiver} and the \\emph{writer threads} support asynchronous writing of metrics to optimize disk accesses. The interaction between these two components follow the architectural style	\N
856	AllocationOne	1346	Consider the work assignment architectural style of the allocation viewtype.	\N
864	AdventureBuilderOne	\N	Consider the following architectural view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{../AdventureBuilderDeployment}\n    \\end{center}\n    \n    According to this view the stakeholders can see that the Adventure Builder system	\N
865	RequirementsOne	\N	Frank Buschmann cites the characterization Marquardt does of Performitis:\n        \n    \\begin{quote}\n        Each part of the system is directly influenced by local performance tuning measures. There is no global performance strategy, or it ignores other qualities of the system as testability and maintainability.\n    \\end{quote}\n    \n    From this problem you can conclude that:	\N
868	ModuleComponentOne	\N	Consider the Figure that describes the use of\n    caches in web services.  \n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{../RequestNodeCache}\n    \\end{center}\n    \n    In that Figure, there is a\n    rectangle with the name \\emph{Cache} within another rectangle with\n    the name \\emph{Request Node}.  Taking into account the description\n    made in the text and the goal of that Figure, those rectangles\n    correspond to which type of software elements?	\N
879	DesigningArchitectureTwo	926	During the different steps on how to create an architecture, the precise specification of architecture quality attributes is initially relevant to	\N
881	InfinispanScenariosTacticsTwo	928	In the Infinispan case study can be read\n      \n      \\begin{quote}\n          Infinispan supports several pluggable cache stores-adapters that can be used to persist data to disk or any form of secondary storage. The current default implementation is a simplistic hash bucket and linked list implementation, where each hash bucket is represented by a file on the filesystem. While easy to use and configure, this isn't the best-performing implementation.\n      \\end{quote}\n      \n      The main architectural quality addressed in the above excerpt is	\N
880	ContinousIntegrationScenariosTacticsTwo	940	In the Continous integration case study can be read about Jenkins\n      \n      \\begin{quote}\n          It takes advantage of the JUnit XML standard for unit test and code coverage reporting to integrate reports from a variety of test tools. Jenkins originated with Sun, but is very widely used and has a robust open-source community associated with it.\n      \\end{quote}\n      \n      The quality of Jenkins that is emphasized in the above sentence is	\N
979	Diplomat	986	Very often, when a software architecture is being designed, conflicting requirements are identified, like between security and availability. The role of the software architect is to	\N
866	ArchitectureDefinitionOne	1115	Consider that a software development team uses an agile methodology\n        such as XP (Extreme Programming), where no documentation is\n        produced.  Then, the systems developed by that team	\N
867	ScenariosTacticsOne	1174	As part of the process of creating an architecture, we talked about\n  a framework for capturing some of the requirements for a system.  In\n  this context, \\textbf{concrete scenarios} are used for	\N
901	nginxTwo	950	In Nginx, given that a \\emph{worker} processes various requests during its\n    life, how does it do it?	\N
900	AllocationTwo	1066	Consider the deployment architectural style of the allocation viewtype.	\N
1029	ModuleViewtypeTwo	1315	Consider the Uses architectural style of the Module viewtype	\N
899	SOAPipesFiltersTwo	1351	Suppose that you are developing the software architecture of a new\n    system for an organization composed of several organizational\n    units, each one with its own information systems, which have been\n    developed independently of each other over the course of several\n    years and depending on the particular needs of each unit.  Your\n    system has the goal of integrating the various existing systems,\n    providing in this way not only a unified view of how the\n    organization works, but also allowing the creation of new\n    processes within the organization that involve more than one unit.\n    Which architectural style is better suited to design such a\n    system?	\N
902	ContinousIntegrationViewsTwo	\N	In the Continous integration case study can be read about future features for Pony-Build\n      \n      \\begin{quote}\n          Currently, each continuous integration system reinvents the wheel by providing its own build configuration language, which is manifestly ridiculous; there are fewer than a dozen commonly used build systems, and probably only a few dozen test runners. Nonetheless, each CI system has a new and different way of specifying the build and test commands to be run. In fact, this seems to be one of the reasons why so many basically identical CI systems exist: each language and community implements their own configuration system, tailored to their own build and test systems, and then layers on the same set of features above that system. Therefore, building a domain-specific language (DSL) capable of representing the options used by the few dozen commonly used build and test tool chains would go a long way toward simplifying the CI landscape.\n      \\end{quote}\n      \n      Suppose that you are the architect that has to change the architecture to accomodate this new feature. Therefore, as an architect	\N
903	InfinispanViewsTwo	\N	In the Infinispan case study can be read\n      \n      \\begin{quote}\n         Infinispan uses its own serialization scheme, where full class definitions are not written to the stream. Instead, magic numbers are used for known types where each known type is represented by a single byte. This greatly improves not just serialization and de-serialization speed qualities, but also produces a much more compact byte stream for transmission across a network. An externalizer is registered for each known data type, registered against a magic number. This externalizer contains the logic to convert object to bytes and vice versa.\n      \\end{quote}\n      \n      These properties of Infinispan can be represented by	\N
904	WebTwoTwo	\N	One of the evolutions in the development of web applications was\n    the appearance of \\emph{mashups}, which are described in Wikipedia\n    as follows:\n\n    \\begin{quote}\n      In web development, a mashup is a web page or application that\n      uses and combines data, presentation or functionality from two\n      or more sources to create new services.\n    \\end{quote}\n\n    Knowing that the sources used by \\emph{mashups} do not know about\n    the existence of the \\emph{mashups} and that they change\n    frequently, forcing the adaptation of the \\emph{mashups} to\n    accomodate those changes, what is the best architecture to\n    minimize the effects of those changes?	\N
905	MicroservicesArchitectureTwo	\N	Consider the following figure depicting two different architectures for web applications\n    \n    \\begin{center}\n        \\includegraphics[width=140mm]{../Microservices}\n    \\end{center}	\N
906	AmazonTwo	\N	Consider the following excerpt about the Amazon system\n    \n    \\begin{quote}\n        Mainly, I think service orientation has helped us there. The stored data formats are decoupled from the format in which you communicate data items. If there is no need for sharing schemas of the actual storage layout, you can focus on making sure that the service interfaces can evolve in a way that allows you to handle variations of data formats. You could dictate a rigorous single format, but that would not be realistic if you are in Amazon's platform business. We have to make sure that the platform can be extended by our customers to meet their needs.\n    \\end{quote}\n    \n    The architectural style that better represents these aspects of the Amazon architecture is	\N
907	ScalableArchitectureTwo	\N	Consider the following excerpt about the Scalable web architecture and distributed systems case study\n    \n    \\begin{quote}\n         Employing such a strategy maximizes data locality for the requests, which can result in decreased request latency. For example, let's say a bunch of nodes request parts of B: partB1, partB2, etc. We can set up our proxy to recognize the spatial locality of the individual requests, collapsing them into a single request and returning only bigB, greatly minimizing the reads from the data origin.\n    \\end{quote}\n    \n    The quality that is achieved with this tactic is	\N
910	ArchitectureInfluenceCycleTwo	\N	Designing the software architecture for a complex system	\N
911	RequirementsTwo	\N	The architecturally significant requirements are important in the process of creating\n  the software architecture for a system because they are	\N
913	AdventureBuilderTwo	\N	Consider the following architectural view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{../AdventureBuilderComponentConector}\n    \\end{center}\n    \n    In this component-and-connector view the interactions the interactions between components follow the architectural style(s)	\N
914	ModuleComponentTwo	\N	Which of the following phrases best describe the relationship\n    between modules and components?	\N
915	ScenariosTacticsTwo	\N	General scenarios play an important role in the development of a software architecture\n    because	\N
916	UsesGeneralizationTwo	\N	Suppose that in the process of designing a system's software architecture you come to\n    the conclusion that there are uses relations in both directions in almost all of the system's\n    modules. This means that	\N
919	RepositoryClientServerTwo	\N	The email system is composed of various types of components\n    playing different roles.  For example, to send an email, a user\n    uses a \\emph{mail user agent} (MUA), to compose his message and\n    send it.  To send the message, the MUA typically connects to a\n    \\emph{mail transfer agent} (MTA) that receives the message,\n    analyzes the message's headers to determine the recipients and,\n    after querying the DNS system to determine the MTA responsible for\n    each recipient, it connects to the MTAs responsible for the\n    destination addresses to deliver the message.  Each of these MTAs\n    receives the message and stores it locally or forwards it to\n    others MTAs until the message reaches its destination MTA.\n    The recipient user of the message will then use his MUA to see the\n    messages that were sent to him.  To do it, the MUA connects to an\n    IMAP or POP server to obtain the user's messages.  Those IMAP and\n    POP servers obtain the messages for a user by reading the messages\n    stored by the MTA.\n\n    Given this simplified description of the operation of the email\n    system, which of the following architectural styles is more\n    appropriate to represent the pattern of interaction between the\n    MTA and the servers IMAP and POP?	\N
912	ArchitectureDefinitionTwo	1205	The software architecture of a system	\N
909	GraphiteViewsTwo	1276	A high-level component-and-connect view of Graphite system can be designed using only the architectural style(s)	\N
918	ComponentConnectorTwo	1266	The connectors on component-and-connector view	\N
920	TiersDynamicreconfigurationPeertopeerPublishsubscribeTwo	\N	Consider the following excerpt from the tutorial on the Hadoop\n    MapReduce:\n\n    \\begin{quote}\n      Hadoop MapReduce is a software framework for easily writing\n      applications which process vast amounts of data (multi-terabyte\n      data-sets) in-parallel on large clusters (thousands of nodes) of\n      commodity hardware in a reliable, fault-tolerant manner.\n\n      A MapReduce job usually splits the input data-set into\n      independent chunks which are processed by the map tasks in a\n      completely parallel manner.  The framework sorts the outputs of\n      the maps, which are then input to the reduce tasks. Typically\n      both the input and the output of the job are stored in a\n      file-system.  The framework takes care of scheduling tasks,\n      monitoring them and re-executes the failed tasks.\n    \\end{quote}\n\n    Which architectural style of the component-and-connector viewtype\n    is more adequate to describe how the MapReduce works, taking into\n    account its main advantages in solving a problem?	\N
921	AvailabilityTwo	\N	There are several tactics to satisfy availability requirements,\n    which may be applied depending on the concrete requirement that we\n    want to satisfy.  Assuming that you want to detect faults of type\n    \\emph{response} in your system, which tactic is more adequate?	\N
923	NginxScenariosTacticsTwo	\N	Web servers typically receive requests from different users\n  concurrently (that is, either different users make requests\n  simultaneously or they make them fast enough that it is not possible\n  for the web server to answer one request from one user before\n  receiving another request from another user).  To process all the\n  requests, web servers may use different implementation strategies.\n  Assuming that we want to develop a web server to serve only static\n  pages with more or less the same size to a set of clients on the\n  same LAN network as the server, which of the following strategies\n  would be better?	\N
926	DesigningArchitectureTwo	\N	During the different steps on how to create an architecture, the precise specification of architecture quality attributes is initially relevant to	\N
928	InfinispanScenariosTacticsTwo	\N	In the Infinispan case study can be read\n      \n      \\begin{quote}\n          Infinispan supports several pluggable cache stores-adapters that can be used to persist data to disk or any form of secondary storage. The current default implementation is a simplistic hash bucket and linked list implementation, where each hash bucket is represented by a file on the filesystem. While easy to use and configure, this isn't the best-performing implementation.\n      \\end{quote}\n      \n      The main architectural quality addressed in the above excerpt is	\N
932	ComponentvsModule	\N	In wikipedia you can find the following fragment of a definition:\n    \n    \\begin{quote}\n        An individual software component is a software package, or a module that encapsulates a set of related functions.\n    \\end{quote}\n    \n    According to the definitions taught in the course the above \\emph{individual software component} corresponds to:	\N
940	ContinousIntegrationScenariosTacticsTwo	\N	In the Continous integration case study can be read about Jenkins\n      \n      \\begin{quote}\n          It takes advantage of the JUnit XML standard for unit test and code coverage reporting to integrate reports from a variety of test tools. Jenkins originated with Sun, but is very widely used and has a robust open-source community associated with it.\n      \\end{quote}\n      \n      The quality of Jenkins that is emphasized in the above sentence is	\N
1085	ScalabilityINGLES	1121	Several of the cases studied in this course had scalability\n    requirements.  That means that those systems should be designed in\n    such a way that they	\N
938	PerformanceThree	1016	Jeff Atwood wrote an article in its blog about performance of software systems that is entitled, \\emph{Hardware is Cheap, Programmers are Expensive}. Which performance tactic(s) is he suggesting	\N
937	NginxThree	1017	In the description of the nginx case study we can read:\n    \n    \\begin{quote}\n        nginx's modular architecture generally allows developers to extend the set of web server features without modifying the nginx core. nginx modules come in slightly different incarnations, namely core modules, event modules, phase handlers, protocols, variable handlers, filters, upstreams and load balancers. At this time, nginx doesn't support dynamically loaded modules; i.e., modules are compiled along with the core at build stage.\n    \\end{quote}\n    \n    The above sentence corresponds to	\N
943	UsesCalls	1256	A function call is not necessarily a uses relation of the Uses architectural style of the Module viewtype because	\N
939	IterativeDesign	1414	Designing an architecture	\N
945	ConnectorDecomposition	\N	Consider an architect that is designing a component-and-connector view. In some point the architect decides that she does not need to decompose a connector with a demanding quality level. This may occur because	\N
946	ClientServerAvailability	\N	The client-server architectural style provides availability because	\N
949	InstallStyle	\N	An important stage of the development of any system is its build into the set of executable files. A suitable architectural style which helps on the definition of the build process is	\N
950	nginxTwo	\N	In Nginx, given that a \\emph{worker} processes various requests during its\n    life, how does it do it?	\N
953	GraphiteDataPointSocket	\N	Consider the following application-specific types. Note that \\texttt{Queue} components are within the \\texttt{Carbon} components. In a view that contains components of these three types \n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{x-datapoint-access}\n    \\end{center}	\N
954	WebTwoOne	\N	With the evolution of the web application technologies, it is now\n    possible to develop web applications with a user interface similar\n    to the interface of desktop applications.  Yet, for this to\n    happen, part of the code that was executing in the web server is\n    now executing in the web browser.  How does this change manifests\n    in the software architecture of the system?	\N
958	GraphiteReliability	\N	In the Graphite system description can be read:\n    \n    \\begin{quote}\n        We've got 600,000 metrics that update every minute and we're assuming our storage can only keep up with 60,000 write operations per minute. This means we will have approximately 10 minutes worth of data sitting in carbon's queues at any given time. To a user this means that the graphs they request from the Graphite webapp will be missing the most recent 10 minutes of data.\n    \\end{quote}	\N
964	GeneralScenario	\N	A general scenario for a quality attribute	\N
965	OmissionRetry	\N	Considering the availability architectural quality, the tactic of retry	\N
966	PragmaticArchitect	\N	According to Frank Buschmann in the article \\emph{Introducing the Pragmatic Architect}	\N
967	EarlydDecisions	\N	In his article \\emph{Who Needs an Architect?} Martin Fowler refers to the following architecture definition\n        \n    \\begin{quote}\n        \\emph{architecture is the set of design decisions that must be made early in a project}\n    \\end{quote}	\N
968	ImageHostingPerformance	\N	Consider the following informal view of an Image Hosting System\n    \n\\begin{center}\n    \\includegraphics[width=100mm]{ImageHostingPerformance}\n\\end{center}	\N
974	PingEchoHeartbeat	\N	Considering the availability architectural quality and the tactics of ping/echo and heartbeat	\N
975	ArchitecturalInfluenceCycle	\N	Suppose that after designing a successful architecture for a particular client the software house management decides to create a cross-functional internal department to start providing products for this particular segment of the market.	\N
976	ImageHostingScalability	\N	Consider the following informal view of an Image Hosting System\n    \n\\begin{center}\n    \\includegraphics[width=100mm]{ImageHostingScalability}\n\\end{center}	\N
977	SharedUnderstanding	\N	In his article \\emph{Who Needs an Architect?} Martin Fowler refers to the following architecture definition\n        \n    \\begin{quote}\n        \\emph{the expert developers working on that project have a shared understanding of the system design}\n    \\end{quote}	\N
978	InteroperabilityStimulus	\N	In a scenario for interoperability	\N
947	CCStyleTwo	1035	Consider the peer-to-peer architectural style	\N
1086	LayersTactics	1122	The main tactic associated with the layered architectural style is:	\N
956	MicroAndAmazonOne	1054	Consider the following distinction between Monoliths and Microservices made by Matin Fowler\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{MonolithsVsMicroservices}\n    \\end{center}\n    \n    If we try to map this figure into a set of views we will need.	\N
952	InfinispanOne	1056	Consider the Infinispan system when it is configured as a remote data grid. The relation between the Applications and the Grid is	\N
948	PipeFilterComposition	1427	The Pipe-and-Filter style allows composition of filters	\N
984	ImageHostingReads	\N	Consider the following informal view of an Image Hosting System\n    \n\\begin{center}\n    \\includegraphics[width=100mm]{ImageHostingReads}\n\\end{center}	\N
986	Diplomat	\N	Very often, when a software architecture is being designed, conflicting requirements are identified, like between security and availability. The role of the software architect is to	\N
987	ASDefinition	\N	The definition of software architecture, on the course book, is\n    \\begin{quote}\n        \\emph{The software architecture of a system is the set of structures needed to reason about the system, which comprise software elements, relations among them, and properties of both.}\n    \\end{quote}\n    \n    According to this definition	\N
988	RestartInRedundancy	\N	Considering the availability architectural quality and the tactics of active redundancy, passive redundancy, and spare	\N
994	NginxOne	\N	Consider the following fragment in the description of the nginx case study.\n    \n    \\begin{quote}\n        nginx's configuration system was inspired by Igor Sysoev's experiences with Apache. His main insight was that a scalable configuration system is essential for a web server. The main scaling problem was encountered when maintaining large complicated configurations with lots of virtual servers, directories, locations and datasets. In a relatively big web setup it can be a nightmare if not done properly both at the application level and by the system engineer himself.\n    \\end{quote}	\N
995	BusinessToDesignOne	\N	The Attribute-Driven Design method is characterized by	\N
997	GraphiteOne	\N	Consider the following fragment in the description of the Graphite system:\n    \n    \\begin{quote}\n        The Graphite webapp allows users to request custom graphs with a simple URL-based API. Graphing parameters are specified in the query-string of an HTTP GET request, and a PNG image is returned in response. \n    \\end{quote}	\N
998	ModifiabilityOne	\N	The modifiability tactic Use an Intermediary between two modules	\N
1004	NginxTwo	\N	In the description of the nginx case study we can read:\n    \n    \\begin{quote}\n        nginx is event-based, so it does not follow Apache's style of spawning new processes or threads for each web page request. The end result is that even as load increases, memory and CPU usage remain manageable. nginx can now deliver tens of thousands of concurrent connections on a server with typical hardware.\n    \\end{quote}\n    \n    The tactic nginx follows to achieve tens of thousands of concurrent connections is	\N
1005	ModifiabilityTwo	\N	Consider the following scenario: \\emph{A system administrator simultaneously launches several instances of the system, each one using a different database, and is able to do it in less than 10 minutes.}	\N
981	ImageHostingReads	984	Consider the following informal view of an Image Hosting System\n    \n\\begin{center}\n    \\includegraphics[width=100mm]{ImageHostingReads}\n\\end{center}	\N
1003	NginxTwo	1004	In the description of the nginx case study we can read:\n    \n    \\begin{quote}\n        nginx is event-based, so it does not follow Apache's style of spawning new processes or threads for each web page request. The end result is that even as load increases, memory and CPU usage remain manageable. nginx can now deliver tens of thousands of concurrent connections on a server with typical hardware.\n    \\end{quote}\n    \n    The tactic nginx follows to achieve tens of thousands of concurrent connections is	\N
1000	ModifiabilityTwo	1005	Consider the following scenario: \\emph{A system administrator simultaneously launches several instances of the system, each one using a different database, and is able to do it in less than 10 minutes.}	\N
1002	GraphiteTwo	1006	Consider the following fragment in the description of the Graphite system:\n    \n    \\begin{quote}\n        To avoid this kind of catastrophe, I added several features to carbon including configurable limits on how many data points can be queued and rate-limits on how quickly various whisper operations can be performed. These features can protect carbon from spiraling out of control and instead impose less harsh effects like dropping some data points or refusing to accept more data points. However, proper values for those settings are system-specific and require a fair amount of testing to tune. They are useful but they do not fundamentally solve the problem. For that, we'll need more hardware.\n    \\end{quote}\n    \n    The performance tactics referred in the above description are:	\N
1001	BusinessToDesignTwo	1007	Architecturally significant requirements (ASR) are captured in a utility tree where each one of the ASRs are classified in terms of its architectural impact and business value.	\N
999	PerformanceTwo	1008	The two basic contributors for the response time are the processing time and the blocking time. Which tactic for performance may reduce the blocking time	\N
985	RequirementsImpact	1116	The requirements impact on how an architecture is designed	\N
996	PerformanceOne	1237	Consider a scenario for performance where the arrival of events is stochastic with a distribution where there are peeks of events but the arrival of events over a long period is uniform. The best tactic to apply is	\N
1006	GraphiteTwo	\N	Consider the following fragment in the description of the Graphite system:\n    \n    \\begin{quote}\n        To avoid this kind of catastrophe, I added several features to carbon including configurable limits on how many data points can be queued and rate-limits on how quickly various whisper operations can be performed. These features can protect carbon from spiraling out of control and instead impose less harsh effects like dropping some data points or refusing to accept more data points. However, proper values for those settings are system-specific and require a fair amount of testing to tune. They are useful but they do not fundamentally solve the problem. For that, we'll need more hardware.\n    \\end{quote}\n    \n    The performance tactics referred in the above description are:	\N
1007	BusinessToDesignTwo	\N	Architecturally significant requirements (ASR) are captured in a utility tree where each one of the ASRs are classified in terms of its architectural impact and business value.	\N
1008	PerformanceTwo	\N	The two basic contributors for the response time are the processing time and the blocking time. Which tactic for performance may reduce the blocking time	\N
1014	BusinessToDesignThree	\N	It was decided that the Fénix system should be based on open-source software.	\N
1015	GraphiteThree	\N	Consider the following fragment in the description of the Graphite system:\n    \n    \\begin{quote}\n        Imagine that you have 60,000 metrics that you send to your Graphite server, and each of these metrics has one data point per minute. Remember that each metric has its own whisper file on the filesystem. This means carbon must do one write operation to 60,000 different files each minute. As long as carbon can write to one file each millisecond, it should be able to keep up. This isn't too far fetched, but let's say you have 600,000 metrics updating each minute, or your metrics are updating every second, or perhaps you simply cannot afford fast enough storage. Whatever the case, assume the rate of incoming data points exceeds the rate of write operations that your storage can keep up with. How should this situation be handled?\n    \\end{quote}	\N
1016	PerformanceThree	\N	Jeff Atwood wrote an article in its blog about performance of software systems that is entitled, \\emph{Hardware is Cheap, Programmers are Expensive}. Which performance tactic(s) is he suggesting	\N
1017	NginxThree	\N	In the description of the nginx case study we can read:\n    \n    \\begin{quote}\n        nginx's modular architecture generally allows developers to extend the set of web server features without modifying the nginx core. nginx modules come in slightly different incarnations, namely core modules, event modules, phase handlers, protocols, variable handlers, filters, upstreams and load balancers. At this time, nginx doesn't support dynamically loaded modules; i.e., modules are compiled along with the core at build stage.\n    \\end{quote}\n    \n    The above sentence corresponds to	\N
1018	ModifiabilityThree	\N	Consider the modifiability quality and the cost of change.	\N
1024	CCStyleOne	\N	When describing their system people refer to a part of it as containing a database server. Applying the component-and-connector styles learned in the course we can say that this system uses	\N
1025	ContinuousIntegrationOne	\N	In the Continuous Integration case study can be read\n    \n    \\begin{quote}\n        The space of architectures for continuous integration systems seems to be dominated by two extremes: master/slave architectures, in which a central server directs and controls remote builds; and reporting architectures, in which a central server aggregates build reports contributed by clients. All of the continuous integration systems of which we are aware have chosen some combination of features from these two architectures.\n    \\end{quote}\n    \n    The tactic that is referred in both architectures is	\N
1026	ModuleViewtypeOne	\N	Consider the Decomposition architectural style of the Module viewtype	\N
1027	InfinispanOne	\N	The Infinispan system can be used as a library, in which case it is embedded into a Java application, or as a server, in which case it is a remote data grid.	\N
1028	ComponentAndConnectorOne	\N	Consider the Component-and-Connector viewtype	\N
1034	ComponentAndConnectorTwo	\N	Consider the Component-and-Connector viewtype	\N
1035	CCStyleTwo	\N	Consider the peer-to-peer architectural style	\N
1037	ContinuousIntegrationTwo	\N	In the Continuous Integration case study can be read\n    \n    \\begin{quote}\n        External resource coordination: Integration tests may depend on non-local resources such as a staging database or a remote web service. The CI system may therefore need to coordinate builds between multiple machines to organize access to these resources.\n    \\end{quote}\n    \n    The referred tactic is	\N
1038	InfinispanTwo	\N	In the Infinispan case study can be read\n    \n    \\begin{quote}\n        This allows applications to theoretically address an unlimited amount of in-memory storage as nodes are added to the cluster, increasing overall capacity.\n    \\end{quote}\n    \n    The quality that is referred is	\N
1044	ComponentAndConnectorThree	\N	Consider the two following views\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{pipes-and-filters}\n    \\end{center}	\N
1045	InfinispanThree	\N	In the Infinispan case study can be read\n    \n    \\begin{quote}\n        Before putting data on the network, application objects need to be serialized into bytes so that they can be pushed across a network, into the grid, and then again between peers. The bytes then need to be de-serialized back into application objects, when read by the application. In most common configurations, about 20\\% of the time spent in processing a request is spent in serialization and de-serialization.\n    \\end{quote}\n    \n    The above description can motivate a scenario for	\N
1046	CCStyleThree	\N	Consider the shared-data style. Which of the following qualities does it support?	\N
1047	ContinuousIntegrationThree	\N	In the Continuous Integration case study can be read\n    \n    \\begin{quote}\n        It takes advantage of the JUnit XML standard for unit test and code coverage reporting to integrate reports from a variety of test tools.\n    \\end{quote}\n    \n    The referred quality is	\N
1054	MicroAndAmazonOne	\N	Consider the following distinction between Monoliths and Microservices made by Matin Fowler\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{MonolithsVsMicroservices}\n    \\end{center}\n    \n    If we try to map this figure into a set of views we will need.	\N
1056	InfinispanOne	\N	Consider the Infinispan system when it is configured as a remote data grid. The relation between the Applications and the Grid is	\N
1057	JenkinsOne	\N	Consider the following representation of the Buildbot system.\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{BuildbotArchitecture}\n    \\end{center}\n    \n    The architecture style between the Buildbot Master and the Clients is:	\N
1058	ComponentAndConnectorOne	\N	Consider the Service-Oriented Architecture architectural style	\N
1032	ComponentAndConnectorTwo	1034	Consider the Component-and-Connector viewtype	\N
1048	ModuleViewtypeThree	1254	Consider the Layered architectural style of the Module viewtype	\N
1036	ModuleViewtypeTwo	1315	Consider the Uses architectural style of the Module viewtype	\N
1055	AllocationOne	1346	Consider the work assignment architectural style of the allocation viewtype.	\N
1064	InfinispanTwo	\N	In the description of Infinispan system can be read\n    \n    \\begin{quote}\n        Infinispan supports several pluggable cache stores-adapters that can be used to persist data to disk or any form of secondary storage. The current default implementation is a simplistic hash bucket and linked list implementation, where each hash bucket is represented by a file on the filesystem. While easy to use and configure, this isn't the best-performing implementation.\n    \\end{quote}\n    \n    The architectural style(s) that should be used to illustrate the sentence is (are)	\N
1066	AllocationTwo	\N	Consider the deployment architectural style of the allocation viewtype.	\N
1067	JenkinsTwo	\N	In the Continuous Integration case can be read\n    \\begin{quote}\n        Build notification: The outcomes of builds generally need to be communicated to interested clients, either via pull (Web, RSS, RPC, etc.) or push notification (e-mail, Twitter, etc.) This can include notification of all builds, or only failed builds, or builds that haven't been executed within a certain period.\n    \\end{quote}\n        The architectural style used in push notifications is	\N
1068	MicroAndAmazonTwo	\N	Consider the following representation of Amazon's architecture (sorry for the figure's layout: \\textbf{save trees})\n            \n    \\begin{center}\n        \\includegraphics[width=80mm]{AmazonArchitecture}\n    \\end{center}\n    \n    What is the most relevant architecture style that is used in this figure?	\N
1074	MicroAndAmazonThree	\N	In the interview Werner Vogels from Amazon gives to Jim Gray, Werner Vogels says that\n    \n    \\begin{quote}\n        The stored data formats are decoupled from the format in which you communicate data items. If there is no need for sharing schemas of the actual storage layout, you can focus on making sure that the service interfaces can evolve in a way that allows you to handle variations of data formats. \n    \\end{quote}\n    \n    Which means that in the software architecture of Amazon's systems	\N
1075	JenkinsThree	\N	Consider the following representation of the CDash system\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{DashArchitecture}\n    \\end{center}\n    \n    The architecture style between the Dashboard and the Clients is:	\N
1076	ComponentAndConnectorTwo	\N	Consider the following view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{AdventureBuilder-SOA}\n    \\end{center}\n    \n    In this view the following architectural styles are used	\N
1077	AllocationThree	\N	Consider the install architectural style of the allocation viewtype.	\N
1078	InfinispanThree	\N	In the description of Infinispan system can be read\n    \n    \\begin{quote}\n        When dealing with thread pools to process such asynchronous tasks, there is always a context switching overhead. That threads are not cheap resources is also noteworthy. Allocating appropriately sized and configured thread pools is important to any installation making use of any of the asynchronous features of Infinispan.\n    \\end{quote}\n    \n    The architectural style that should be used to illustrate the sentence is	\N
1079	SoftwareArchitectureOne	1115	Consider that a software development team uses an agile methodology\n  such as XP (Extreme Programming), where no documentation is\n  produced.  Then, the systems developed by that team	\N
1080	RequirementsImpact	1116	The requirements impact on how an architecture is designed	\N
1081	AvailabilityScenarioOne	1117	Consider the following scenario\n      \n      \\begin{quote}\n          If one of the application servers fails to respond when the system is in its normal operation state, the load balancer should redirect requests to another application server.\n      \\end{quote}	\N
1083	MWResourceLoaderTacticEEEN	1119	Consider the following fragment of the \\emph{MediaWiki} system description:\n      \\newline\n      \n      \\emph{To optimize the delivery of JavaScript and CSS assets, the ResourceLoader module was developed to optimize delivery of JS and CSS. Started in 2009, it was completed in 2011 and has been a core feature of MediaWiki since version 1.17. ResourceLoader works by loading JS and CSS assets on demand, thus reducing loading and parsing time when features are unused, for example by older browsers. It also minifies the code, groups resources to save requests, and can embed images as data URIs}\n      \\newline\n      \n      The \\emph{ResourceLoader} supports a quality	\N
1084	PerfomanceTacticOne	1120	In which performance tactic it may occur that not all the inputs are processed	\N
1082	AvailabilityVotingEN	1405	The availability quality can be supported by a voting tactic in order to identify faults of	\N
1065	ComponentAndConnectorThree	1274	Consider the following view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{AdventureBuilder-Tiers}\n    \\end{center}\n    \n    In this view the following architectural styles are used	\N
1174	ConcreteScenarios	\N	As part of the process of creating an architecture, we talked about\n  a framework for capturing some of the requirements for a system.  In\n  this context, \\textbf{concrete scenarios} are used for	\N
1314	OrderPadOne	\N	In the description of architecture of the OrderPad case study it can be read that the updates the user does on the OrderPad when it is offline are not lost. This availability quality is achieved through a	\N
1112	SOAINGLES	\N	In the Service Oriented Architecture style it is common to have a\n    specialized component, named \\emph{Enterprise Service Bus} (ESB).\n    The goal of using of an ESB in a system is	\N
1113	WhiteBoxTestingINGLES	\N	Consider the following excerpt from the Wikipedia page on\n    \\emph{white-box testing}:\n    \\begin{quote}\n      White-box testing is a method of testing software that tests\n      internal structures or workings of an application, as opposed to\n      its functionality. In white-box testing an internal perspective\n      of the system (including the module's code), as well as\n      programming skills, are required and used to design test\n      cases. The tester chooses inputs to exercise paths through the\n      code and determine the appropriate outputs.\n    \\end{quote}\n  \n    Assuming that you belong to the team testing a complex system and\n    that you are responsible for performing white box tests on the\n    system, which of the following architectural views of the system\n    would be most useful to you?	\N
1114	ArqChrome	\N	The Chromium is a web browser that introduced an innovative architecture. In the Chromium description we can read:\n \n  \\begin{quote}\n    We use separate processes for browser tabs to protect the overall\n    application from bugs and glitches in the rendering engine.  We\n    also restrict access from each rendering engine process to others\n    and to the rest of the system.  In some ways, this brings to web\n    browsing the benefits that memory protection and access control\n    brought to operating systems.\n\n    We refer to the main process that runs the UI and manages tab and\n    plugin processes as the "browser process" or "browser."  Likewise,\n    the tab-specific processes are called "render processes" or\n    "renderers."  The renderers use the WebKit open-source layout\n    engine for interpreting and laying out HTML.\n  \\end{quote}\n  \n  Which architectural style should we use to represent this aspect of Chromium?	\N
1115	SoftwareArchitectureOne	\N	Consider that a software development team uses an agile methodology\n  such as XP (Extreme Programming), where no documentation is\n  produced.  Then, the systems developed by that team	\N
1116	RequirementsImpact	\N	The requirements impact on how an architecture is designed	\N
1117	AvailabilityScenarioOne	\N	Consider the following scenario\n      \n      \\begin{quote}\n          If one of the application servers fails to respond when the system is in its normal operation state, the load balancer should redirect requests to another application server.\n      \\end{quote}	\N
1119	MWResourceLoaderTacticEEEN	\N	Consider the following fragment of the \\emph{MediaWiki} system description:\n      \\newline\n      \n      \\emph{To optimize the delivery of JavaScript and CSS assets, the ResourceLoader module was developed to optimize delivery of JS and CSS. Started in 2009, it was completed in 2011 and has been a core feature of MediaWiki since version 1.17. ResourceLoader works by loading JS and CSS assets on demand, thus reducing loading and parsing time when features are unused, for example by older browsers. It also minifies the code, groups resources to save requests, and can embed images as data URIs}\n      \\newline\n      \n      The \\emph{ResourceLoader} supports a quality	\N
1120	PerfomanceTacticOne	\N	In which performance tactic it may occur that not all the inputs are processed	\N
1121	ScalabilityINGLES	\N	Several of the cases studied in this course had scalability\n    requirements.  That means that those systems should be designed in\n    such a way that they	\N
1122	LayersTactics	\N	The main tactic associated with the layered architectural style is:	\N
1123	AdventureBuilderThree	\N	Consider the following architectural view of the Adventure Builder system, designed around the Order Processing Center\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{../AdventureBuilderCandC}\n    \\end{center}\n    \n    The views \\textbf{does not} use the architectural style	\N
1124	AdventureBuilderFive	\N	Consider the following requirement for availability of the Adventure Builder system\n    \n    \\begin{quote}\n        The Consumer Web site sent a purchase order request to the order processing center (OPC). The OPC processed that request but didn't reply to Consumer Web site within five seconds, so the Consumer Web site resends the request to the OPC.\n    \\end{quote}\n    \n    If we represent this requirement as a scenario	\N
1125	DVDCatalogMeta	\N	Consider the module viewtype views of the DVD Catalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        The application should support other kinds of catalogs (CDs, games, books, ...). \n    \\end{quote}\n    \n    This requirement requires a change of	\N
1126	TwitterOne	\N	Consider the following description of the behavior of Twitter ingestion mechanisms\n    \n    \\begin{quote}\n        Write. when a tweet  comes in there's an O(n) process to write to Redis clusters, where n is the number of people following you. Painful for Lady Gaga and Barack Obama where they are doing 10s of millions of inserts across the cluster. All the Redis clusters are backing disk, the Flock cluster stores the user timeline to disk, but usually timelines are found in RAM in the Redis cluster.\n    \\end{quote}	\N
1175	AvailabilityScenarioTwo	\N	Consider the following availability scenario\n      \n      \\begin{quote}\n         If one of the application servers fails to respond to a request when the system is in its normal operation state, the system should notify the operator and continue to operate normally.\n      \\end{quote}	\N
1118	AvailabilityVotingEN	1405	The availability quality can be supported by a voting tactic in order to identify faults of	\N
1110	PeerToPeerDynamicReconfiguration	1316	In the description of the Gnutella system can be read:\n    \n    \\begin{quote}\n        The topology of the system changes at runtime as peer components connect and disconnect to the network.\n    \\end{quote}	\N
1111	PipeFilterComposition	1427	The Pipe-and-Filter style allows composition of filters	\N
1127	TwitterThree	\N	Consider the following description of the behavior of Twitter\n    \n    \\begin{quote}\n        Solution is a write based fanout approach. Do a lot of processing when tweets arrive to figure out where tweets should go. This makes read time access fast and easy. Don't do any computation on reads. With all the work being performed on the write path ingest rates are slower than the read path, on the order of 4000 QPS.\n    \\end{quote}\n    \n    To describe the performance quality of this behavior, and considering that the number of reads is much higher than the number of writes, we need to have a view that includes	\N
1129	MicroAndAmazonThree	\N	In the interview Werner Vogels from Amazon gives to Jim Gray, Werner Vogels says that\n    \n    \\begin{quote}\n        The stored data formats are decoupled from the format in which you communicate data items. If there is no need for sharing schemas of the actual storage layout, you can focus on making sure that the service interfaces can evolve in a way that allows you to handle variations of data formats. \n    \\end{quote}\n    \n    Which means that in the software architecture of Amazon's systems	\N
1130	BoundedContextOne	\N	Consider the following representation of a system following a microservices architecture,\n      \n      \\begin{center}\n          \\includegraphics[width=140mm]{../MicroservicesArchitecture}\n      \\end{center}\n      \n      After an invocation through the REST API	\N
1131	DomainDesignOne	\N	Consider the following figure\n      \n      \\begin{center}\n          \\includegraphics[width=70mm]{../ProductDomainModelTwo}\n      \\end{center}	\N
1132	HadoopDisponibilidadeDadosINGLES	\N	One of the key requirements for the HDFS system is that the data\n    stored in the system remains available, even in the presence of\n    various types of failures (non simultaneous) in the hardware in\n    which the system executes.  To show that the system satisfies this\n    requirement	\N
1133	HadoopTacticasRecuperacaoFaltasINGLES	\N	In the HDFS system the fault recovery tactics are:	\N
1134	SecondEEEN	\N	The documentation of the software architecture for a system is often\n  composed of several views, because	\N
1135	ModuleViewType	\N	The quality that is more relevant to views of the module viewtype is:	\N
1136	MemcachedModulesINGLES	\N	Consider the following description of \\emph{Memcached}, which is\n    adapted from its Wiki:\n    \\begin{quote}\n      Memcached is an in-memory key-value store for small chunks of\n      arbitrary data from results of database calls, API calls, or\n      page rendering.  It is made up of:\n      \\begin{itemize}\n      \\item Client software, which is given a list of available memcached servers.\n      \\item A client-based hashing algorithm, which chooses a server\n        based on the "key" input.\n      \\item Server software, which stores your values with their keys\n        into an internal hash table.\n      \\item Server algorithms, which determine when to throw out old\n        data (if out of memory), or reuse memory.\n      \\end{itemize}\n    \\end{quote}\n    Suppose that you want to present an architectural view for\n    \\emph{Memcached} that represents the above information.  Which\n    view is more adequate?	\N
1137	AspectsINGLES	\N	Using the Aspects architectural style promotes the modifiability\n    of a system because	\N
1138	LayeredAspectsDataModelTwo	\N	Suppose that you are implementing a module in a system that has a two layered architecture.\n     Knowing that your module belongs to the upper layer (assuming the usual notation\n     for the layer style), this means that you	\N
1176	AvailabilityINGLES	\N	Suppose that, to satisfy an availability requirement related with\n    the occurrence of faults at the network infrastructure used by\n    your system, you want to use the tactic named \\emph{Ping/Echo}.\n    How does the use of that tactic manifests in the architectural\n    views of your system?	\N
1142	AvailabilityINGLES	1176	Suppose that, to satisfy an availability requirement related with\n    the occurrence of faults at the network infrastructure used by\n    your system, you want to use the tactic named \\emph{Ping/Echo}.\n    How does the use of that tactic manifests in the architectural\n    views of your system?	\N
1143	InfinispanThree	1177	Consider the following description of the \\emph{Infinispan} system:\n    \n    \\begin{quote}\n        Before putting data on the network, application objects need to be serialized into bytes so that they can be pushed across a network, into the grid, and then again between peers. The bytes then need to be de-serialized back into application objects, when read by the application. In most common configurations, about 20\\% of the time spent in processing a request is spent in serialization and de-serialization.\n    \\end{quote}\n    \n    The above description can motivate a scenario for	\N
1144	PerfomanceTacticTwo	1178	In which performance tactic it can occur that the inputs are not completely processed, even though they always start being processed	\N
1128	MicroservicesOne	1310	Consider the Microservice architectural style. Which of the following sentences \\textbf{does not} describe an advantage of microservices?	\N
1149	ArchitecturalViews	1415	A software system is usually described using different architectural views	\N
1169	ModifiabilityScenario	\N	Consider the following modifiability scenario\n    \n    \\begin{quote}\n        The effort necessary to successfully port the system to execute in a new browser should not be higher than 5 person/month.\n    \\end{quote}	\N
1170	AspectsTactics	\N	The main tactic associated with the aspects architectural style is:	\N
1171	HadoopStakeholdersEurosINGLES	\N	In the HDFS system, in the stakeholders perspective, the use of low cost servers to build the clusters is:	\N
1172	HadoopHeartbeatINGLES	\N	In HDFS, during normal operation DataNodes use the heartbeat tactic	\N
1173	SoftwareArchitectureTwo	\N	The software architecture of a system	\N
1157	TiposVistaDesempenhoINGLES	1192	To analyse the performance of a system	\N
1177	InfinispanThree	\N	Consider the following description of the \\emph{Infinispan} system:\n    \n    \\begin{quote}\n        Before putting data on the network, application objects need to be serialized into bytes so that they can be pushed across a network, into the grid, and then again between peers. The bytes then need to be de-serialized back into application objects, when read by the application. In most common configurations, about 20\\% of the time spent in processing a request is spent in serialization and de-serialization.\n    \\end{quote}\n    \n    The above description can motivate a scenario for	\N
1178	PerfomanceTacticTwo	\N	In which performance tactic it can occur that the inputs are not completely processed, even though they always start being processed	\N
1179	TresTiersINGLES	\N	Currently, the most popular architecture for an enterprise\n    application is composed of 3 tiers.  The three tiers are	\N
1180	SOAInteroperability	\N	The Service-Oriented Architecture style improves interoperability because	\N
1181	InstallView	\N	Consider a system that will require a significative configuration effort during deployment, because it provides several variations of the same functionalities and it is necessary to choose which functionalities better fit in each case. The most helpful architectural view for this situation is	\N
1182	TwitterTwo	\N	Consider the following description of the behavior of Twitter\n    \n    \\begin{quote}\n        Solution is a write based fanout approach. Do a lot of processing when tweets arrive to figure out where tweets should go. This makes read time access fast and easy. Don't do any computation on reads. With all the work being performed on the write path ingest rates are slower than the read path, on the order of 4000 QPS.\n    \\end{quote}\n    \n    To describe this behavior we need to	\N
1183	TwitterFour	\N	Consider the following description of the behavior of Twitter ingestion mechanisms\n    \n    \\begin{quote}\n        Write. when a tweet  comes in there's an O(n) process to write to Redis clusters, where n is the number of people following you. Painful for Lady Gaga and Barack Obama where they are doing 10s of millions of inserts across the cluster. All the Redis clusters are backing disk, the Flock cluster stores the user timeline to disk, but usually timelines are found in RAM in the Redis cluster.\n    \\end{quote}\n    \n    The view that represents this behavior should be of the	\N
1185	FunctionalModule	\N	When designing an architecture requirements can be split into functional, quality attributes, and constraints. Functional requirements have impact on:	\N
1186	SubcontractorsINGLES	\N	Suppose that you are developing a software architecture for a new\n    large scale system and that you intend to resort extensively to\n    third party subcontractors for the development of various parts of\n    the system.  Which architectural styles are most useful to plan\n    the development of the system in this case?	\N
1187	UsesStyle	\N	To achieve a faster time-to-market, software companies are\n  increasingly using a strategy of incremental releases of their\n  software, where each new release has a set of new features.  Which\n  architectural style is better to analyse whether the system's\n  software architecture is adequate for the planned incremental\n  releases?	\N
1188	nginxModuleTypesINGLES	\N	According to the document that describes nginx:\n    \\begin{quote}\n      nginx's modular architecture generally allows developers to\n      extend the set of web server features without modifying the\n      nginx core.  nginx modules come in slightly different\n      incarnations, namely core modules, event modules, phase\n      handlers, protocols, variable handlers, filters, upstreams and\n      load balancers.  [...]  Event modules provide a particular\n      OS-dependent event notification mechanism like kqueue or epoll.\n      Protocol modules allow nginx to communicate through HTTPS,\n      TLS/SSL, SMTP, POP3 and IMAP.\n    \\end{quote}\n    Which architectural style is more adequate to represent the\n    information presented above?	\N
1189	AdventureBuilderFour	\N	Consider the following architectural view of the Adventure Builder system, designed around the Order Processing Center\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{../AdventureBuilderCandC}\n    \\end{center}\n    \n    The views \\textbf{does not} allow the reason about the quality of	\N
1190	AdventureBuilderSix	\N	Consider the following requirement for availability of the Adventure Builder system\n    \n    \\begin{quote}\n        The Consumer Web site is available to the user 24x7. If an instance of OPC application fails, the fault is detected and the system administrator is notified in 30 seconds; the system continues taking order requests; another OPC instance is automatically created; and data remains in consistent state.\n    \\end{quote}\n    \n    In order to support this quality it is necessary to	\N
1191	DVDCatalogMobile	\N	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        To support iPhone/iPad/Android version with sync, which allows offline use of the application in the mobile device and data synchronization to occur when a connection is available\n    \\end{quote}\n    \n    This requirement requires a change of	\N
1192	TiposVistaDesempenhoINGLES	\N	To analyse the performance of a system	\N
1193	PeerToPeerSpace	\N	The Peer-to-Peer architectural style provides high scalability and availability. In the context of a file sharing system	\N
1195	WorldWideEN	\N	In world-wide systems like Facebook or Amazon,	\N
1196	BoundedContextTwo	\N	Consider the following representation of a system following a microservices architecture,\n      \n      \\begin{center}\n          \\includegraphics[width=140mm]{../MicroservicesArchitecture}\n      \\end{center}	\N
1197	DomainDesignTwo	\N	Consider the following data model\n      \n      \\begin{center}\n          \\includegraphics[width=80mm]{../ProductDomainModel}\n      \\end{center}	\N
1226	HadoopCheckpoint	\N	In the HDFS system when the \\emph{CheckpointNode} and the \\emph{NameNode} are deployed in different nodes, the \\emph{CheckpointNode} provides:	\N
1227	OmissionRetry	\N	Considering the availability architectural quality, the tactic of retry	\N
1228	Scalability	\N	Several of the cases studied in this course have scalability\n    requirements.  That means that those systems should be designed in\n    such a way that they	\N
1184	ArchitecturalViews	1415	A software system is usually described using different architectural views	\N
1198	ChromeMultiPlatform	\N	The Chromium is a web browser that introduced an innovative architecture. In the Chromium description we can read:\n\n  \\begin{quote}\n    Chromium is a large and complex cross-platform product.  We try to\n    share as much code as possible between platforms, while\n    implementing the UI and OS integration in the most appropriate way\n    for each.  While this gives a better user experience, it adds\n    extra complexity to the code.  This document describes the\n    recommended practices for keeping such cross-platform code clean.\n\n    We use a variety of different file naming suffixes to indicate\n    when a file should be used:\n    \\begin{itemize}\n    \\item Windows files use the \\texttt{\\_win} suffix.\n    \\item Cocoa (Mac UI) files use the \\texttt{\\_cocoa} suffix, and lower-level Mac files use the \\texttt{\\_mac} suffix.\n    \\item Linux files use \\texttt{\\_linux} for lower-level files, \\texttt{\\_gtk} for GTK-specific files, and \\texttt{\\_x} for X Windows (with no GTK) specific files.\n    \\item Posix files shared between Mac and Linux use the \\texttt{\\_posix} suffix.\n    \\item Files for Chrome's ``Views'' UI (on Windows and experimental GTK) layout system use the \\texttt{\\_views} suffix.\n   \\end{itemize}\n\n    The separate front-ends of the browser are contained in their own directories:\n    \\begin{itemize}\n    \\item Windows Views (and the experimental GTK-views): \\\\\n      \\texttt{chrome/browser/ui/views}\n    \\item Linux GTK: \\texttt{chrome/browser/gtk}\n    \\item Mac: \\texttt{chrome/browser/cocoa}\n    \\end{itemize}\n  \\end{quote}\n  \n  Which architectural style should we use to represent this aspect of Chromium?	\N
1204	HadoopCluster	\N	Consider the following figure that presents the Hadoop cluster topology.\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{HadoopClusterTopology}\n    \\end{center}	\N
1205	SoftwareArchitecture	\N	The software architecture of a system	\N
1206	GeneralScenario	\N	A general scenario for a quality attribute	\N
1207	TwitterScaleOne	\N	In the description of the Twitter system we can read:\n    \n    \\begin{quote}\n         Twitter is optimized to be highly available on the read path on the home timeline. Read path is in the 10s of milliseconds.\n    \\end{quote}\n    \n    This is achieved because:	\N
1208	ProxyServer	\N	Consider the following figure that presents a Proxy Server, which collapses requests from different users.\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{ProxyServer}\n    \\end{center}	\N
1214	HadoopCreateFile	\N	In the description of Hadoop we can red.\n    \n    \\begin{quote}\n        The CheckpointNode periodically combines the existing checkpoint and journal to create a new checkpoint and an empty journal. The CheckpointNode usually runs on a different host from the NameNode since it has the same memory requirements as the NameNode.\n    \\end{quote}	\N
1215	ArchitecturalTactics	\N	An architectural tactic for a system describes	\N
1216	TwitterScaleTwo	\N	In the description of the Twitter system we can read:\n    \n    \\begin{quote}\n        On the search timeline:\n         Write. when a tweet comes in and hits the Ingester only one Early Bird machine is hit. Write time path is O(1). A single tweet is ingested in under 5 seconds between the queuing and processing to find the one Early Bird to write it to.\n    \\end{quote}	\N
1217	EarlyDecisions	\N	In his article, \\emph{Who Needs and Architect?}, Martin Fowler cites Ralph Johnson definition:\n    \n    \\begin{quote}\n        Architecture is the set of decisions that must be made early in a project.\n    \\end{quote}\n    \n    In his opinion:	\N
1218	Queues	\N	Consider the following figure that presents a Queue where client applications write their requests to be served by a server.\n    \n    \\begin{center}\n        \\includegraphics[width=130mm]{Queues}\n    \\end{center}	\N
1224	ModifiabilityOne	\N	In a modifiability scenario the environment can be characterized as design time, compile time, build time, initiation time, and runtime.	\N
1225	GraphiteScenarioTacticsOne	\N	In the Graphite system the component \\emph{carbon} provides to \\emph{webapp} components an access interface to the \\emph{buffers} in order to improve the quality of	\N
1315	Layered	\N	Consider the Uses architectural style of the Module viewtype	\N
1234	ModifiabilityTwo	\N	Consider that a module, that contains a complex business logic, needs to invoke a remote entity using a particular communication protocol and it is needs to manage the invocation, like deal with the possible errors, delays and omissions in the invocation, transform the data before sending it, etc. Which tactic should be applied for a scenario where there will be changes in the communication protocol. Note that the business logic comprises a set of functionalities that is independent of the remote invocation technological aspects.	\N
1235	GraphiteScenarioTacticsTwo	\N	Which quality, or qualities, of the Graphite system are described by the sentence: \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL}	\N
1236	HadoopNameNodeReplica	\N	The architecture of the HDFS system only allows the existence of\n    one NameNode.  Given the responsibilities of this component and\n    the current architecture of HDFS, what would be the consequences\n    of adding the possibility of having replicas of the NameNode in\n    the system?	\N
1237	Performance	\N	Consider a scenario for performance where the arrival of events is stochastic with a distribution where there are peeks of events but the arrival of events over a long period is uniform. The best tactic to apply is	\N
1238	Availability	\N	There are several tactics to satisfy availability requirements,\n    which may be applied depending on the concrete requirement that we\n    want to satisfy.  Assuming that you want to detect faults of type\n    \\emph{response} in your system, which tactic is more adequate?	\N
1244	DVDCatalogMultiPlatform	\N	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        To support multi-platform (Mac, Windows, Linux)\n    \\end{quote}\n    \n    This requirement requires a change of	\N
1245	ModuleComponent	\N	Consider the kind of relations between components and modules.	\N
1247	AdventureBuilderModuleOne	\N	Consider the following modifiability scenario for the Adventure Builder system \n    \n    \\begin{quote}\n        A new business partner (airline, lodging, or activity provider) that uses its own web services interface is added to the system in no more than 10 person-days of effort for the implementation. The business goal is easy integration with new business partners.\n    \\end{quote}\n    \n    and the following architectural view\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{AdventureBuilderHighLevelVIew}\n    \\end{center}	\N
1248	Aspects	\N	An architect is decomposing a system into a set of responsibilities using a view of the Decomposition style. However, she had already to backtrack several times and try new decompositions because she always end up with some responsibility that cannot fit within a single module.	\N
1239	ModuleViewtypeTwo	1315	Consider the Uses architectural style of the Module viewtype	\N
1243	AdventureBuilderModuleOne	1247	Consider the following modifiability scenario for the Adventure Builder system \n    \n    \\begin{quote}\n        A new business partner (airline, lodging, or activity provider) that uses its own web services interface is added to the system in no more than 10 person-days of effort for the implementation. The business goal is easy integration with new business partners.\n    \\end{quote}\n    \n    and the following architectural view\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{AdventureBuilderHighLevelVIew}\n    \\end{center}	\N
1242	Aspects	1248	An architect is decomposing a system into a set of responsibilities using a view of the Decomposition style. However, she had already to backtrack several times and try new decompositions because she always end up with some responsibility that cannot fit within a single module.	\N
1251	ModuleViewtypeThree	1254	Consider the Layered architectural style of the Module viewtype	\N
1249	DVDCatalogAspects	1255	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        To allow the share of catalogs with family and friends, including some access control. \n    \\end{quote}\n    \n    This requirement requires	\N
1250	UsesCalls	1256	A function call is not necessarily a uses relation of the Uses architectural style of the Module viewtype because	\N
1252	DataModelFacebook	1258	In Facebook it is not possible to have the information about more that one bilion users in a single disk. Therefore, a sharding technique is applied, where the persistent information is split between several database servers, and applications are routed to the right servers for queries and updates. To describe this architecture	\N
1412	ArchitecturalViews	1415	A software system is usually described using different architectural views	\N
1254	ModuleViewtypeThree	\N	Consider the Layered architectural style of the Module viewtype	\N
1255	DVDCatalogAspects	\N	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        To allow the share of catalogs with family and friends, including some access control. \n    \\end{quote}\n    \n    This requirement requires	\N
1256	UsesCalls	\N	A function call is not necessarily a uses relation of the Uses architectural style of the Module viewtype because	\N
1257	AdventureBuilderModuleTwo	\N	Consider the following performance/scalability scenario for the Adventure Builder system \n    \n    \\begin{quote}\n        Up to 500 users click to see the catalog of adventure packages following a random distribution over 1 minute; the system is under normal operating conditions; the maximal latency to serve the first page of content is under 5 seconds; average latency for same is less than 2 seconds. If required, the system should easily support an increase in the number of simultaneous requests while maintaining the same latency per request.\n    \\end{quote}\n    \n    and the following architectural view\n    \n    \\begin{center}\n        \\includegraphics[width=105mm]{AdventureBuilderHighLevelVIew}\n    \\end{center}	\N
1258	DataModelFacebook	\N	In Facebook it is not possible to have the information about more that one bilion users in a single disk. Therefore, a sharding technique is applied, where the persistent information is split between several database servers, and applications are routed to the right servers for queries and updates. To describe this architecture	\N
1264	AdventureBuilderOne	\N	Consider the following view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{AdventureBuilder-SOA}\n    \\end{center}\n    \n    In this view the following architectural styles are used	\N
1266	ComponentConnectorTwo	\N	The connectors on component-and-connector view	\N
1268	GraphiteViewsOne	\N	In Graphite system  the \\emph{receiver} and the \\emph{writer threads} support asynchronous writing of metrics to optimize disk accesses. The interaction between these two components follow the architectural style	\N
1274	AdventureBuilderTwo	\N	Consider the following view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=140mm]{AdventureBuilder-Tiers}\n    \\end{center}\n    \n    In this view the following architectural styles are used	\N
1275	PublishSubscribe	\N	In the Publish-Subscribe architectural style	\N
1276	GraphiteViewsTwo	\N	A high-level component-and-connect view of Graphite system can be designed using only the architectural style(s)	\N
1278	CommunicationProcesses	\N	The Java web servers, like Tomcat, use threads to process requests. For each request they create (or reuse) a thread to process it.\n    To draw a architectural view that describes this behaviour we should use	\N
1267	PipesFilters	1357	Consider that you intend to develop a system where it is necessary to change the emails received by the server (for instance, to remove potential virus or URLs for phishing sites). The goal is that each email is processed by this system before it is sent to other servers or it is stored locally. Additionally, the system should be easily modified to support new kinds of transformations. Which style is more suitable to satisfy these requirements?	\N
1265	Tiers	1456	The Tiers architectural style	\N
1277	InterfaceDelegation	1426	Consider the concept of interface delegation	\N
1299	ComponentAndConnectorViewtypeOne	\N	In the component-and-connector viewtype connectors can be complex, which means that they provide a rich set of qualities to the interaction between the components that they connect. These complex connectors can be documented in another view using a set of components interacting through simpler connectors.	\N
1300	PublishsubscribeOne	\N	Typically, Instant Messaging clients have a window to list the contacts of the user, and\n      show in that window the status of each contact (whether it is available, unavailable, busy,\n      etc). Given that the status of a contact may be changed at any time, and that the contact's\n      status is given by the Instant Messaging application of that contact, which architectural\n      style represents best the interaction pattern between these components?	\N
1301	GraphiteOne	\N	Consider the following fragment in the description of the Graphite system.\n    \n    \\begin{quote}\n        The Graphite webapp allows users to request custom graphs with a simple URL-based API. Graphing parameters are specified in the query-string of an HTTP GET request, and a PNG image is returned in response. \n    \\end{quote}\n    \n    To describe this scenario it should be designed a view that applies the following architectural style	\N
1302	ProxyServer	\N	Consider the following figure that presents a Proxy Server that collapses requests from different users.\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{1-proxy-server}\n    \\end{center}	\N
1303	FenixOne	\N	In the context of the FenixEdu case study, the business case was to	\N
1304	AvailabilityOne	\N	The stimulus of an availability scenario is	\N
1305	PerformanceOne	\N	A response measure of a performance scenario is	\N
1306	ModifiabilityExamOne	\N	The layered architectural style applies the modifiability architectural tactic of	\N
1307	ModuleViewtypeExamOne	\N	One of the advantages of having views of the module viewtype is that they allow to do an impact analysis to predict the effect of modifying the system. The architectural style of the module viewtype which provides richer information for this impact analysis is	\N
1308	DecompositionGeneralization	\N	Consider that a chess game should\n  provide an automatic and intelligent chess player, and that to\n  implement that player we will use some of the many chess engines\n  already available in the market.  Moreover, the system should allow\n  the user to choose which engine to use for each new game.  Given\n  these requirements, which of the architectural styles from the\n  module viewtype are best suited to satisfy them?	\N
1309	AggregateOne	\N	In a microservices architecture, aggregates are used as a unit of processing	\N
1310	MicroservicesExamOne	\N	Consider the Microservice architectural style. Which of the following sentences \\textbf{does not} describe an advantage of microservices?	\N
1311	DVDOne	\N	Consider the following usability scenario of the Catalog of DVDs case study\n    \n    \\begin{quote}\n        The user intends to have up-to-date info about the movies and the system informs the user that the existing sources have new information about one of his DVDs, which helps to maintain an up-to-date catalog. \n    \\end{quote}\n    \n    The tactic used to fulfill this scenario is	\N
1312	AdventureBuilderOne	\N	Consider the following view of the Adventure Builder case study that applies the tiers architectural style \n    \n    \\begin{center}\n       \\includegraphics[width=100mm]{1-adventure-tiers}\n    \\end{center}	\N
1313	PulseOne	\N	Consider the following view of the Pulse case study \n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{1-pulse-multiple-copies-computation}\n    \\end{center}\n    \n    This view provides a solution that uses the following tactic	\N
1296	FenixOne	1303	In the context of the FenixEdu case study, the business case was to	\N
1298	MicroservicesExamOne	1310	Consider the Microservice architectural style. Which of the following sentences \\textbf{does not} describe an advantage of microservices?	\N
1288	DVDOne	1311	Consider the following usability scenario of the Catalog of DVDs case study\n    \n    \\begin{quote}\n        The user intends to have up-to-date info about the movies and the system informs the user that the existing sources have new information about one of his DVDs, which helps to maintain an up-to-date catalog. \n    \\end{quote}\n    \n    The tactic used to fulfill this scenario is	\N
1289	AdventureBuilderOne	1312	Consider the following view of the Adventure Builder case study that applies the tiers architectural style \n    \n    \\begin{center}\n       \\includegraphics[width=100mm]{1-adventure-tiers}\n    \\end{center}	\N
1290	PulseOne	1313	Consider the following view of the Pulse case study \n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{1-pulse-multiple-copies-computation}\n    \\end{center}\n    \n    This view provides a solution that uses the following tactic	\N
1291	OrderPadOne	1314	In the description of architecture of the OrderPad case study it can be read that the updates the user does on the OrderPad when it is offline are not lost. This availability quality is achieved through a	\N
1292	Layered	1315	Consider the Uses architectural style of the Module viewtype	\N
1316	DynamicReconfiguration	\N	In the description of the Gnutella system can be read:\n    \n    \\begin{quote}\n        The topology of the system changes at runtime as peer components connect and disconnect to the network.\n    \\end{quote}	\N
1317	Deployment	\N	In the software architecture of a system, the Deployment architectural style of the allocation viewtype is\n  best suited for	\N
1318	WebAppsOne	\N	Consider a web application that was implemented using three layers: presentation, domain logic, and data access. How are these layers mapped into the components if it is a rich interface application.	\N
1339	AggregateTwo	\N	Consider the following decomposition of a domain model into 3 aggregates. If, instead of this decomposition, \\texttt{Customer} and \\texttt{Order} were in the same aggregate  \n    \n    \\begin{center}\n       \\includegraphics[width=120mm]{1-aggregate}\n    \\end{center}	\N
1340	AvailabilityTwo	\N	An availability tactic to prevent faults is	\N
1341	PerformanceTwo	\N	A performance tactic to control resource demand is	\N
1319	AvailabilityTwo	1340	An availability tactic to prevent faults is	\N
1320	PerformanceTwo	1341	A performance tactic to control resource demand is	\N
1342	MicroservicesExamTwo	\N	Consider the following definition of Microservice architectural style by Martin Fowler\n    \n    \\begin{quote}\n        The microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies.\n    \\end{quote}\n    \n    To represent an architecture based on Microservices	\N
1343	ModifiabilityExamTwo	\N	A response measure of a modifiability scenario is	\N
1344	DVDCatalogMobile	\N	Consider the module viewtype views of the Catalog of DVD application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        To support iPhone/iPad/Android version with sync, which allows offline use of the application in the mobile device and data synchronization to occur when a connection is available\n    \\end{quote}\n    \n    This requirement requires a change of	\N
1345	GraphiteTwo	\N	Which quality, or qualities, of the Graphite system are described by the sentence: \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL.}	\N
1346	WorkAssigment	\N	Consider the Work Assignment architectural style of the allocation viewtype.	\N
1347	ScalableArchitectureOne	\N	Consider the following figure that presents a Image Hosting System.\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{1-image-hosting}\n    \\end{center}\n    \n    By adding another Image File Storage component, which contains a redundant copy of the data and provides read access to the clients, but without guaranteeing a ACID transactional behavior between reads and writes, it improves the quality(ies) of	\N
1348	WebAppsTwo	\N	Consider a web application that supports several types of user interface, e.g., web, mobile, etc. If it has to process a high volume of requests, which depend on the type of user interface, and a multi-tier architecture is followed. How many tiers should be used?	\N
1349	DVDTwo	\N	Consider the following generalization view of the Catalog of DVD case study to fulfill a modifiability scenario\n    \n    \\begin{center}\n        \\includegraphics[width=60mm]{1-dvd-generalization}\n    \\end{center}\n    \n    From this view the stakeholders can infer	\N
1350	DataModel	\N	In Facebook it is not possible to have the information about more that one bilion users in a single disk. Therefore, a sharding technique is applied, where the persistent information is split between several database servers, and requests are routed to the right servers for queries and updates. Additionally, due to performance requirements, the information needs to be replicated in several servers. To describe this architecture	\N
1351	SOA	\N	Suppose that you are developing the software architecture of a new\n    system for an organization composed of several organizational\n    units, each one with its own information systems, which have been\n    developed independently of each other over the course of several\n    years and depending on the particular needs of each unit.  Your\n    system has the goal of integrating the various existing systems,\n    providing in this way not only a unified view of how the\n    organization works, but also allowing the creation of new\n    processes within the organization that involve more than one unit.\n    Which architectural style is better suited to design such a\n    system?	\N
1352	AdventureBuilderTwo	\N	Consider the following view of the Adventure Builder case study \n    \n    \\begin{center}\n       \\includegraphics[width=120mm]{1-adventure-com-proc}\n    \\end{center}	\N
1354	PulseTwo	\N	Consider the following view of the Pulse case study \n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{1-pulse-multiple-copies-computation}\n    \\end{center}\n    \n    This view applies the following architectural styles	\N
1355	OrderPadTwo	\N	Consider the architecture of the Morrison's OrderPad. The connector between the client component, executing in the Pad, and the server component, executing in the OrderPadDatabase	\N
1356	ModuleViewtypeExamTwo	\N	One of the advantages of having views of the module viewtype is that they allow to do a traceability analysis of requirements, how the functional requirements of the system are supported by module responsibilities. The modifiability tactic that is involved in this mapping is	\N
1357	PipesFilters	\N	Consider that you intend to develop a system where it is necessary to change the emails received by the server (for instance, to remove potential virus or URLs for phishing sites). The goal is that each email is processed by this system before it is sent to other servers or it is stored locally. Additionally, the system should be easily modified to support new kinds of transformations. Which style is more suitable to satisfy these requirements?	\N
1358	ComponentAndConnectorViewtypeTwo	\N	Considered the following two views of a system that receive a stream of character and produce the same stream where the characters are alternately uppercase and lowercase.\n    \n    \\begin{center}\n       \\includegraphics[width=120mm]{1-module-and-cc}\n    \\end{center}	\N
1364	ElevatorCommon	\N	In the Architect Elevator article by Gregor Hohpe can be read:\n    \n    \\begin{quote}\n        Finding the appropriate context requires the architect to visit many floors of the organization.\n    \\end{quote}\n    \n    This sentence reflects the fact that an architecture is	\N
1365	PerformanceSenario	\N	Consider the following scenario for performance\n    \n    \\begin{quote}\n        During the enrollment period the FenixEDU system should be able to completely enroll 5.000 students in less than 30 minutes.\n    \\end{quote}	\N
1366	MicroservicesProject	\N	In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:\n    \n    \\begin{quote}\n        The microservice approach to division ..., splitting up into services organized around business capability. Such services take a broad-stack implementation of software for that business area, including user-interface, persistent storage, and any external collaborations. Consequently the teams are cross-functional, including the full range of skills required for the development: user-experience, database, and project management.\n    \\end{quote}\n    \n    Considering the architecture influence cycle, which influence factor it is being considered?	\N
1367	ScalablePartitioning	\N	Consider the following figure that presents an architectural view of an \\emph{Image Hosting Application} which resulted from the enrichment of another architectural view by adding another \\emph{Image File Storage} pair, in the figure they are distinguished by 1 and 2. \n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{ScalablePartitioning}\n    \\end{center}\n    \n    Which quality results from this enrichment, that was not provided by the previous version of the architecture?	\N
1368	QueuesQualities	\N	Consider the following figure that presents a Queue where client applications write their requests to be processed by a server.\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{Queues}\n    \\end{center}\n    \n    This solution \\textbf{does not} provide the following quality:	\N
1374	QueuesSyncAndAsync	\N	Consider the following figure that presents a Queue where client applications write their requests to be processed by a server (asynchronous) and compare with another architectural design (synchronous) where a thread is associated with each request.\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{Queues}\n    \\end{center}	\N
1375	ElevatorInteroperability	\N	In the Architect Elevator article by Gregor Hohpe can be read:\n    \n    \\begin{quote}\n        Once a developer approached our architecture team with an application that had "significant scalability demands". A quick look at the architecture diagram revealed numerous components communicating via XML messages. When I pointed out that this may be the very reason for the performance concerns, I was quickly informed that this was an architecture decision and couldn't be changed. Assuming the architects are smart and well-intentioned, they may have thought about interoperability when they made this decision but may be unaware of the negative impact on run-time performance and development velocity.\n    \\end{quote}\n    \n    From this sentence we can conclude that	\N
1376	MicroservicesModularity	\N	In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:\n    \n    \\begin{quote}\n        As well as the fact that services are independently deployable and scalable, each service also provides a firm module boundary, even allowing for different services to be written in different programming languages. They can also be managed by different teams.\n    \\end{quote}\n    \n    Which is not necessarily an advantage of being independently deployable and scalable?	\N
1377	ReadsAndWrites	\N	Consider the following figure that presents an architectural view of an \\emph{Image Hosting Application}. \n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{ScalablePartitioning}\n    \\end{center}	\N
1378	PerformanceTacticsOne	\N	Which of the following tactics is not related with the management of resources	\N
1363	PerformanceSenario	1365	Consider the following scenario for performance\n    \n    \\begin{quote}\n        During the enrollment period the FenixEDU system should be able to completely enroll 5.000 students in less than 30 minutes.\n    \\end{quote}	\N
1384	QueuesCrash	\N	Consider the following figure that presents a Queue where client applications write their requests to be processed by a server (asynchronous) and compare with another architectural design (synchronous) where a thread is associated with each request.\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{Queues}\n    \\end{center}\n    \n    Consider a situation where the server that processes the tasks crashes	\N
1385	DataStorageAvailability	\N	Consider the following figure that presents an architectural view of an \\emph{Image Hosting Application}. \n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{ScalablePartitioning}\n    \\end{center}\n    \n    The replication between the Image File Storage \\emph{n} and Image File Storage \\emph{nb}	\N
1386	MicroservicesConsistency	\N	In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:\n    \n    \\begin{quote}\n        Decentralizing responsibility for data across microservices has implications for managing updates. The common approach to dealing with updates has been to use transactions to guarantee consistency when updating multiple resources. This approach is often used within monoliths.\n    \\end{quote}\n    \n    What is the impact of decentralizing responsibility for data across microservices?	\N
1387	PerformanceTacticsTwo	\N	Which of the following tactics is not related with the control of resource demand	\N
1388	ElevatorDevops	\N	In the Architect Elevator article by Gregor Hohpe can be read:\n    \n    \\begin{quote}\n        A lot of large companies have discovered the benefits of cloud computing but see it mainly as an infrastructure topic. I feel that's misguided: being able to get compute resources more quickly and cheaply is useful, but the real business benefit lies in a fully automated tool chain that minimizes the time in which a normal code change can go into production. Not quite coincidentally, this is my favorite definition of DevOps.\n    \\end{quote}\n    \n    In the author's opinion	\N
1394	ModuleViewtypeOne	\N	Consider the Decomposition architectural style of the Module viewtype	\N
1395	GraphiteComposerUIPerformance	\N	The \\emph{Composer UI} component of Graphite system, described as - \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL} - to be effective needs to show to the user the changes she performs in the graph such that she has immediate feedback whenever she clicks on a option. To do so, the architecture needs to include	\N
1396	AvailabilityVotingFirst	\N	There are several tactics to satisfy availability requirements,\n    which may be applied depending on the concrete requirement that we\n    want to satisfy.  Assuming that you want to detect faults of type\n    \\emph{response} in your system, which tactic is more adequate?	\N
1397	ModifiabilityOne	\N	The modifiability tactic Use an Intermediary between two modules	\N
1398	FenixADD	\N	When applying Attribute-Driven Design (ADD) to the FenixEdu system the creation of a view where there are redundant web servers, load balancers and database servers	\N
1404	GraphiteScenarioTacticsOne	\N	In the Graphite system the component \\emph{carbon} provides to \\emph{webapp} components an access interface to the \\emph{buffers} in order to improve the quality of	\N
1405	AvailabilityVotingSecond	\N	The availability quality can be supported by a voting tactic in order to identify faults of	\N
1406	LowArchitecturalImpact	\N	Consider an architecturally significant requirement (ASR) that has a low impact on the architecture but a high business value	\N
1407	ModifiabilityTwo	\N	Consider the following scenario: \\emph{A system administrator adds more copies of computation of the system, each one using a different database, and is able to do it in less than 10 minutes.}	\N
1408	Decomposition	\N	The Decomposition architectural style of the Module viewtype	\N
1391	FenixADD	1398	When applying Attribute-Driven Design (ADD) to the FenixEdu system the creation of a view where there are redundant web servers, load balancers and database servers	\N
1403	GraphiteScenarioTacticsOne	1404	In the Graphite system the component \\emph{carbon} provides to \\emph{webapp} components an access interface to the \\emph{buffers} in order to improve the quality of	\N
1399	AvailabilityVotingSecond	1405	The availability quality can be supported by a voting tactic in order to identify faults of	\N
1401	LowArchitecturalImpact	1406	Consider an architecturally significant requirement (ASR) that has a low impact on the architecture but a high business value	\N
1400	ModifiabilityTwo	1407	Consider the following scenario: \\emph{A system administrator adds more copies of computation of the system, each one using a different database, and is able to do it in less than 10 minutes.}	\N
1402	Decomposition	1408	The Decomposition architectural style of the Module viewtype	\N
1411	IterativeDesign	1414	Designing an architecture	\N
1409	Voting	1417	A voting tactic can be used to	\N
1410	ModifiabilityThree	1418	Consider the modifiability quality and the cost of change.	\N
1414	IterativeDesign	\N	Designing an architecture	\N
1415	ArchitecturalViews	\N	A software system is usually described using different architectural views	\N
1416	GraphiteReliability	\N	In the Graphite system description can be read:\n    \n    \\begin{quote}\n        We've got 600,000 metrics that update every minute and we're assuming our storage can only keep up with 60,000 write operations per minute. This means we will have approximately 10 minutes worth of data sitting in carbon's queues at any given time. To a user this means that the graphs they request from the Graphite webapp will be missing the most recent 10 minutes of data.\n    \\end{quote}	\N
1417	Voting	\N	A voting tactic can be used to	\N
1418	ModifiabilityThree	\N	Consider the modifiability quality and the cost of change.	\N
1424	AdventureBuilderComponentAndConnectorOne	\N	Consider the following view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=95mm]{AdventureBuilderComponentAndConnector}\n    \\end{center}\n    \n    In this view the following architectural styles are used	\N
1425	ModuleStylesOne	\N	Suppose that in the development of an enterprise application (which needs to access a\n      database) it was decided to use the FenixFramework library to simplify the development\n      of the data access code. Which architectural style is the most adequate to represent this\n      decision?	\N
1426	InterfaceDelegation	\N	Consider the concept of interface delegation	\N
1427	PipeFilterComposition	\N	The Pipe-and-Filter style allows composition of filters	\N
1428	AdventureBuilderModuleOne	\N	Consider the following modifiability scenario for the Adventure Builder system \n    \n    \\begin{quote}\n        A new business partner (airline, lodging, or activity provider) that uses its own web services interface is added to the system in no more than 10 person-days of effort for the implementation. The business goal is easy integration with new business partners.\n    \\end{quote}\n    \n    and the following architectural view\n    \n    \\begin{center}\n        \\includegraphics[width=95mm]{AdventureBuilderModule}\n    \\end{center}	\N
1434	AdventureBuilderComponentAndConnectorSecond	\N	Consider the following view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=95mm]{AdventureBuilderComponentAndConnector}\n    \\end{center}\n    \n    In this view it is possible to reason that	\N
1435	PublishSubscribe	\N	In the Publish-Subscribe architectural style	\N
1436	UsesOne	\N	Which\n  architectural style is \n  adequate for planning incremental\n  releases?	\N
1437	AdventureBuilderModuleThree	\N	Consider the following performance/scalability scenario for the Adventure Builder system \n    \n    \\begin{quote}\n        Up to 500 users click to see the catalog of adventure packages following a random distribution over 1 minute; the system is under normal operating conditions; the maximal latency to serve the first page of content is under 5 seconds; average latency for same is less than 2 seconds. If required, the system should easily support an increase in the number of simultaneous requests while maintaining the same latency per request.\n    \\end{quote}\n    \n    and the following architectural view\n    \n    \\begin{center}\n        \\includegraphics[width=95mm]{AdventureBuilderModule}\n    \\end{center}	\N
1438	ConnectorAttach	\N	A connector may be attached to components of different types because	\N
1422	InterfaceDelegation	1426	Consider the concept of interface delegation	\N
1423	PipeFilterComposition	1427	The Pipe-and-Filter style allows composition of filters	\N
1444	AdventureBuilderComponentAndConnectorThird	\N	Consider the following view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=95mm]{AdventureBuilderComponentAndConnector}\n    \\end{center}\n    \n    This view \\textbf{does not} apply the architectural style	\N
1445	LayeredAspectsDataModelOne	\N	In a layered architecture composed by four layers, where the topmost\n  layer is the layer number 1 and the bottommost layer is the layer\n  number 4, which of the layers is more modifiable?	\N
1446	AdventureBuilderModuleTwo	\N	Consider the following availability scenario for the Adventure Builder system \n    \n    \\begin{quote}\n        The Consumer Web site is available to the user 24x7. If an instance of OPC application fails, the fault is detected and the system administrator is notified in 30 seconds; the system continues taking order requests; another OPC instance is created; and data remains in consistent state.\n    \\end{quote}\n    \n    and the following architectural view\n    \n    \\begin{center}\n        \\includegraphics[width=95mm]{AdventureBuilderModule}\n    \\end{center}	\N
1447	PeerToPeerSpace	\N	The Peer-to-Peer architectural style provides high scalability and availability. In the context of a file sharing system	\N
1448	ComponentViewType	\N	The quality(ies) that is(are) more relevant to views of the component-and-connector viewtype is(are):	\N
1454	GraphitePerformanceScenario	\N	In the context of the \\emph{Graphite} case study, consider the following view that represents the internal behavior of the \\emph{Carbon} component, where the components \\texttt{r1,... , rn, w} are threads and \\texttt{q1, ..., qn} are buffers. This view shows the Graphite's architecture support of\n    \n    \\begin{center}\n       \\includegraphics[width=120mm]{graphite-carbon}\n    \\end{center}	\N
1455	MicroservicesOne	\N	Consider the architectural solutions for microservices architectures that use the event sourcing technique. This technique has the following advantage	\N
1456	Tiers	\N	The Tiers architectural style	\N
1457	DVDTopDecomposition	\N	Consider the following decomposition view of the Catalog of DVD case study.\n    \n    \\begin{center}\n       \\includegraphics[width=100mm]{dvd-top-decomposition}\n    \\end{center}	\N
1458	OrderPadPortability	\N	Consider the architecture of the Morrison's OrderPad. The decision whether use a Native application or HTML5 for the implementation of the client in the Pad was taken because	\N
1464	GraphiteAvailabilityScenario	\N	In the context of the \\emph{Graphite} case study, consider the following view that represents the internal behavior of the \\emph{Carbon} component, where the components \\texttt{r1,... , rn, w} are threads and \\texttt{q1, ..., qn} are buffers. The port \\emph{read}, which provides an interface to read the data points stored in the queue, can be used, in an enrichment of the view, to illustrate\n    \n    \\begin{center}\n       \\includegraphics[width=120mm]{graphite-carbon}\n    \\end{center}	\N
1465	Silk	\N	In the Amazon Silk browser	\N
1466	MicroservicesTwo	\N	Suppose that an architect needs to decide whether to follow a modular monolith architecture or a microservices architecture for a new large system. The system to be developed has a complex logic and high volume of requests.	\N
227	Repository	252	A requirement for a chess game is that it keeps a table with the best scores obtained in the game.\n  Naturally, this information should be kept between two different\n  executions of the system.  Assuming that the game is a web-based application, then	\N
1442	ComponentViewType	1448	The quality(ies) that is(are) more relevant to views of the component-and-connector viewtype is(are):	\N
1451	GraphitePerformanceScenario	1454	In the context of the \\emph{Graphite} case study, consider the following view that represents the internal behavior of the \\emph{Carbon} component, where the components \\texttt{r1,... , rn, w} are threads and \\texttt{q1, ..., qn} are buffers. This view shows the Graphite's architecture support of\n    \n    \\begin{center}\n       \\includegraphics[width=120mm]{graphite-carbon}\n    \\end{center}	\N
1453	MicroservicesOne	1455	Consider the architectural solutions for microservices architectures that use the event sourcing technique. This technique has the following advantage	\N
1449	Tiers	1456	The Tiers architectural style	\N
1467	CommunicatingProcesses	\N	In the web page of the NGINX HTTP server can be read\n    \n    \\begin{quote}\n        NGINX is a free, open-source, high-performance HTTP server and reverse proxy, as well as an IMAP/POP3 proxy server. (...)\n        Unlike traditional servers, NGINX doesn't rely on threads to handle requests. Instead it uses a much more scalable event-driven (asynchronous) architecture. This architecture uses small, but more importantly, predictable amounts of memory under load.\n    \\end{quote}\n    \n    According to the above description the most adequate architectural style to represent the performance qualities of NGINX is	\N
1468	DVDAutocomplete	\N	Consider the following decomposition views of the Catalog of DVD case study were the \\emph{Autocomplete} module is implemented in javascript and executes in a browser.\n    \n    \\begin{center}\n    \\includegraphics[width=120mm]{dvd-autocomplete}\n    \\end{center}	\N
1474	OrderPadIterative	\N	Consider the architecture of the Morrison's OrderPad. In the description of the system can be read:\n    \n    \\begin{quote}\n        The pilot version included some architectural short-cuts that would not work with the full complement of stores. One of these was using a file-transfer to send data to the mainframe rather than MQ, which wouldn't perform well once many stores were active.\n    \\end{quote}\n    \n    This approach means that	\N
1475	AllocationStylesCost	\N	Consider a stakeholder that is particularly concerned about the total cost of the project. When it comes to describing the system using allocation viewtypes is interested in	\N
1476	DVDGeneralization	\N	Consider the following generalization view of the Catalog of DVD case study.\n    \n    \\begin{center}\n       \\includegraphics[width=60mm]{dvd-generalization}\n    \\end{center}	\N
1477	GraphiteWebapp	\N	In the context of the \\emph{Graphite} case study, consider the following application-specific types that are used in a view to represent the internal behavior of the \\emph{Webapp} component. \n    \n    \\begin{center}\n       \\includegraphics[width=120mm]{graphite-webapp}\n    \\end{center}\n    \n    This view can show that the architecture fulfills	\N
1478	MicroservicesThree	\N	Consider the architectural solutions for microservices architectures that use the Command Query Responsibility Segregation (CQRS) technique in the context of Event Sourcing. This technique has the following disadvantage	\N
159	CHQualitiesEN	189	\\ch{}, as described in the case study, was designed to support the accomplish the following architectural qualities:	\N
139	GMMasterRunnerEN	200	The function of Master Runner component of \\gm{} can be represented using an architecture style of	\N
240	ActiveRecord	242	The Active Record pattern is best used when we are also using	\N
231	ThounsandParsecView	244	Consider the architectural views for the ThousandParsec system. In the case description can be read:\n    \n    \\begin{quote}\n        The Requirements function verifies that each component added to the design conforms to the rules of other previously added components.\n    \\end{quote}\n    \n    The following diagram depicts a fragment of a proposal for the decomposition view of the system.\n    \n    \\begin{center}\n    \\includegraphics[width=100mm]{x-ThousandParsec-ruleset}\n  \\end{center}	\N
217	Checksum	245	Checksum is a technic that it is often used in architectural design. It can be used as	\N
218	Attack	246	An attack is	\N
219	SocialCalcTactics	247	In the description of the SocialCalc case study can be read:\n    \n    \\begin{quote}\n        As the user scrolls the spreadsheet through our custom-drawn scroll bars, we dynamically update the innerHTML of the pre-drawn \\textsc{<td>} elements. This means we don't need to create or destroy any \\textsc{<tr>} or \\textsc{<td>} elements in many common cases, which greatly speeds up response time.\n    \\end{quote} \n    \n    This corresponds to the application of	\N
220	ThousandParsecTactics	248	In the description of the Thousand Parsec case study can be read:\n    \n    \\begin{quote}\n        A ruleset designer thus has the ability to create new object types or store additional information in the existing object types as required by the ruleset, allowing for virtually unlimited extensibility in terms of the available physical objects in the game.\n    \\end{quote} \n    \n    This excerpt can be represented as a modifiability scenario where	\N
221	GitTactics	249	In the description of the Git case study can be read:\n    \n    \\begin{quote}\n        Git tackles the storage space problem by packing objects in a compressed format, using an index file which points to offsets to locate specific objects in the corresponding packed file.\n    \\end{quote}\n    \n    The tactic addressed in this fragments is:	\N
225	Layered	250	Assume that one of the requirements for a graphical chess game is\n  that it should be able to run both in Microsoft's Windows and\n  Apple's Mac OS X operating systems.  A good solution for this system\n  would:	\N
1472	OrderPadIterative	1474	Consider the architecture of the Morrison's OrderPad. In the description of the system can be read:\n    \n    \\begin{quote}\n        The pilot version included some architectural short-cuts that would not work with the full complement of stores. One of these was using a file-transfer to send data to the mainframe rather than MQ, which wouldn't perform well once many stores were active.\n    \\end{quote}\n    \n    This approach means that	\N
230	InstallView	1181	Consider a system that will require a significative configuration effort during deployment, because it provides several variations of the same functionalities and it is necessary to choose which functionalities better fit in each case. The most helpful architectural view for this situation is	\N
228	PeerToPeer	253	An email client such as Mozilla's Thunderbird or Microsoft's Outlook\n  allows a user both to read the emails that were sent to him and to\n  send new emails to other people.  To do that, the email client\n  connects to other components (one or more): some of these components\n  keep the user's mailboxes with all the emails that were sent to him,\n  whereas other components know how to forward the emails sent by the\n  user to their final destinations (associated with a new set of destinations).  In either case, it is always the\n  email client that makes a request to the other components, but\n  whereas in the first case the email client receives all the\n  information about the user's emails, in the second case only a\n  success or failure error code is returned.  The architectural\n  patterns that best describe the interactions between the components from the client to the final destinations	\N
211	ArchitectureInfluenceCycle	254	The software architecture of a system	\N
212	TechoGeeks	255	Frank Buschmann, \\emph{Introducing the Pragmatic Architect}, defines the \\emph{techno-geeks} architects. This kind of architect	\N
216	Scenario	257	Consider the following scenario\n    \n    \\begin{quote}\n        Our vehicle information system send our current location to the traffic monitoring system. The traffic monitoring system combines our location with other information, overlays this information on a Google Map, and broadcasts it. Our location information is correctly included with a probability of 99.99\\%.\n    \\end{quote}	\N
232	SocialCalcView	259	Consider the architectural views for the SocialCalc system. In the case description can be read:\n    \n    \\begin{quote}\n        The save format is in standard MIME multipart/mixed format, consisting of four text/plain; charset=UTF-8 parts, each part containing newline-delimited text with colon-delimited data fields. The parts are...\n        \n        This format is designed to be human-readable, as well as being relatively easy to generate programmatically. This makes it possible for Drupal's Sheetnode plugin to use PHP to convert between this format and other popular spreadsheet formats, such as Excel (.xls) and OpenDocument (.ods).\n    \\end{quote}\n    \n    From the above excerpt can be inferred the need to have	\N
233	GitViews	260	The architectural style that best represents the runtime execution of a system Git installed for a small group of developers is	\N
234	OrderPad	261	In the OrderPad system they have decided to use a Row Data Gateway data access pattern because	\N
235	EtherCalcAllocation	262	Consider the architectural views of EtherCalc system. In the case study description can be read\n  \n  \\begin{quote}\n      The Socialtext platform has both behind-the-firewall and on-the-cloud deployment options, imposing unique constraints on EtherCalc's resource and performance requirements.\n  \\end{quote}	\N
236	EtherCalcRedundancy	263	In EtherCalc initial prototype clients send their local commands and snapshots to the server, which result on redundant information on the server about the state of the spreadsheet. This redundancy is an application of	\N
237	EtherCalcSnapshotPerformance	264	In EtherCalc initial prototype clients send their local commands, cursor movements and snapshots to the server.	\N
238	EtherCalcModifiabilityTestability	265	In the EtherCalc case description can be read\n \n  \\begin{quote}\n      The in-browser SocialCalc engine is written in JavaScript. We considered translating that logic into Perl, but that would have carried the steep cost of maintaining two code bases. \n  \\end{quote} \n  \n  The excerpt is referring to a quality of	\N
213	FeaturitisOrderPad	266	Frank Buschmann states that:\n        \n    \\begin{quote}\n        Featuritis is the tendency to trade functional coverage for quality - the more functions the earlier they're delivered, the better.\n    \\end{quote}\n    \n    In the OrderPad system the architect regretted not getting performance tests going earlier. The OrderPad system	\N
222	DesigningArchitecture	268	The architectural significant requirements are important in the process of creating\n  the software architecture for a system because they define	\N
299	TransactionScript	302	Compared to the Transaction Script pattern, the Domain Logic pattern\n  has a higher initial cost of adoption.  That is, it is harder to\n  start with the Domain Logic pattern than with the Transaction Script\n  pattern.  The reason for this is that the Domain Logic pattern	\N
229	PipesFilters	1357	Consider that you intend to develop a system where it is necessary to change the emails received by the server (for instance, to remove potential virus or URLs for phishing sites). The goal is that each email is processed by this system before it is sent to other servers or it is stored locally. Additionally, the system should be easily modified to support new kinds of transformations. Which style is more suitable to satisfy these requirements?	\N
201	FirstEEEN	1173	The software architecture of a system	\N
214	ArchitectureDefinition	1173	The software architecture of a system	\N
300	ActiveRecordRuby	303	Ruby on Rails is a popular full-stack framework for building web\n  applications.  One of the elements of this framework is the\n  \\textbf{model}, which is described in the Rails documentation in the\n  following way:\n  \\begin{quote}\n    A model represents the information (data) of the application and\n    the rules to manipulate that data. In the case of Rails, models\n    are primarily used for managing the rules of interaction with a\n    corresponding database table. In most cases, one table in your\n    database will correspond to one model in your application. The\n    bulk of your application's business logic will be concentrated in\n    the models.\n  \\end{quote}\n  Given this description, the Rails' model is best described as an\n  instance of	\N
277	AvailabilityPingEchoHeartbeat	305	Ping-and-echo and Heartbeat are two availability tactics to detect faults.	\N
278	SecurityDatabase	306	Consider that when designing the architecture of a web application, the architect intends to guarantee of the confidentiality of persistent data in face of an attack from a system administrator.	\N
279	SocialCalcTactic	307	In the description of the SocialCalc case study can be read:\n    \n    \\begin{quote}\n        A simple improvement is for each client to broadcast its cursor position to other users, so everyone can see which cells are being worked on.\n    \\end{quote}\n    \n    This sentence describes a tactic for usability which is	\N
280	ThousandParsecScenario	308	In the description of the ThousandParsec case study can be read:\n    \n    \\begin{quote}\n        The Thousand Parsec Component Language (TPCL) exists to allow clients to create designs locally without server interaction - allowing for instant feedback about the properties, makeup, and validity of the designs. \n    \\end{quote}\n    \n    From this sentence can be written	\N
281	GitTactic	309	In the description of GitHub case study can be read\n    \n    \\begin{quote}\n        Once the Smoke proxy has determined the user's route, it establishes a transparent proxy to the proper file server. We have four pairs of fileservers. Their names are fs1a, fs1b, ..., fs4a, fs4b. These are 8 core, 16GB RAM bare metal servers, each with six 300GB 15K RPM SAS drives arranged in RAID 10. At any given time one server in each pair is active and the other is waiting to take over should there be a fatal failure in the master. All repository data is constantly replicated from the master to the slave via DRBD.\n    \\end{quote}\n    \n    In this description we can find the application of tactics like	\N
283	ModuleTraceability	310	Views of the module viewtype can be used to support requirements traceability analysis, determine how the functional requirements of a system are supported. This is represented by	\N
271	ArchitectureKnowledge	311	Assuming that you were asked to document the software architecture\n  of an existing (and already developed) system, the best thing for\n  you to do would be	\N
272	ArchitectureEvolution	312	Ralph Johnson says that\n  \n  \\begin{quote}\n      Architecture is the decisions that you wish you could get right early in a project.\n  \\end{quote}\n  \n  This sentence reflects the fact that	\N
273	Performitis	313	Marquardt characterizes performitis as:\n    \n    \\begin{quote}\n        Each part of the system is directly influenced by local performance tuning measures. There is no global performance strategy, or it ignores other qualities of the system such as testability and maintainability.\n    \\end{quote}\n    \n    This means that	\N
274	ArchitecturalViews	314	The software architecture of a system is usually represented through several views because we need to	\N
282	ArchitecturallySignificantRequirements	315	According to the attribute-driven design process, we should design\n  the software architecture for a system based on a selected list of\n  requirements, which are called the \\textit{architecturally significant requirements}.\n  These architecturally significant requirements should be sorted according to their\n  importance for the system's stakeholders because	\N
275	ModueComponent	316	On the web page of Memcached can be read:\n  \n  \\begin{quote}\n      ..., high-performance, distributed memory object caching system, generic in nature, but intended for use in speeding up dynamic web applications by alleviating database load.\n  \\end{quote}\n  \n  According to this information, Memcached is	\N
284	GeneralizationInterfaces	317	You have to develop an application that collects news from different web sources and process that information to present a digest to the application users. The different sources provide similar information through different interfaces (APIs). Additionally, the new sources may change the interfaces, for instance to enhance their service. Which architectural style can be used to represent this requirements?	\N
285	UsesIncremental	318	When designing the architecture for a system the architect realises that most of the modules have bidirectional uses relationships. This has impact on	\N
295	EtherCalcPerformance	319	In the description of EtherCalc case study can be read\n    \n    \\begin{quote}\n        Because all jsdom code runs in a single thread, subsequent REST API calls are blocked until the previous command's rendering completes. Under high concurrency, this queue eventually triggered a latent bug that ultimately resulted in server lock-up.\n    \\end{quote}    \n    \n    The above sentence is related to a quality for	\N
296	EtherCalcTactic	320	In the description of EtherCalc case study can be read\n    \n    \\begin{quote}\n        So, we removed jsdom from the RenderSheet function, re-implemented a minimal DOM in 20 lines of LiveScript for HTML export, then ran the profiler again. Much better! We have improved throughput by a factor of 4, HTML exporting is 20 times faster, and the lock-up problem is gone.\n    \\end{quote}    \n    \n    The above sentence describes a	\N
297	EtherCalcTestability	321	In the description of EtherCalc case study can be read how the architect tried to increase the performance in a multi-core context\n    \n    \\begin{quote}\n    Is there a way to make use of all those spare CPUs in the multi-tenant server?\n\n    For other Node.js services running on multi-core hosts, we utilized a pre-forking cluster server that creates a process for each CPU.\n    \n        However, while EtherCalc does support multi-server scaling with Redis, the interplay of Socket.io clustering with RedisStore in a single server would have massively complicated the logic, making debugging much more difficult.\n    \\end{quote}    \n    \n    This possible solution has impact on the	\N
286	ComponentAndConnnector	1278	The Java web servers, like Tomcat, use threads to process requests. For each request they create (or reuse) a thread to process it.\n    To draw a architectural view that describes this behaviour we should use	\N
298	EtherCalcViews	323	In the description of EtherCalc case study can be read how the architect increased the performance in a multi-core context\n    \n    \\begin{quote}\n    Instead of pre-forking a fixed number of processes, we sought a way to create one background thread for each server-side spreadsheet, thereby distributing the work of command execution among all CPU cores.\n    \\end{quote}    \n    \n    Which is represented by the diagram\n    \\newline\n    \n    \\begin{center}\n    \\includegraphics[width=120mm]{x-EtherCalc-multi-tenant}\n  \\end{center}\n    \n    \\begin{flushleft}\n        The above diagram, describing a server spreadsheet, can be represented using \n    \\end{flushleft}	\N
287	LoadBalancer	324	To increase the availability of a web application it is possible to use a load-balancer between the clients and the servers that detects server failures and transparently redirects the requests to the servers that are functioning properly. To represent this architecture	\N
288	ThreeTiers	325	One way to increase the performance of a 3-tier enterprise\n  application (with the standard separation in the web client, web\n  server, and database tiers) is to replicate the web server tier and\n  to add a load-balancer between the web clients and the web servers.\n  Unfortunately, for some enterprise applications that option is not\n  enough (or does not work at all), because	\N
290	DeploymentPerformance	327	In the software architecture of a system, the Deployment view is\n  best suited for	\N
291	ThousandParsecPersistence	328	In the description of ThousandParsec case study can be read\n  \n  \\begin{quote}\n      The flagship server, \\textsc{tpserver-cpp}, provides an abstract persistence interface and a modular plugin system to allow for various database back ends. \n  \\end{quote}\n  \n    This above sentence can be diagrammatically represented using	\N
292	SocialCalcBroadcastEvents	329	Consider the (partial) component-and-connector view for the \\textsc{:SpreasdSheet} component of the SocialCalc system\n  \n    \\begin{center}\n    \\includegraphics[width=70mm]{x-SocialCalc-spreadsheet-component}\n  \\end{center}\n    \n    \\begin{flushleft}\n        The \\textsc{sub1} port\n    \\end{flushleft}	\N
293	GitHubViews	330	In the description of GitHub case study can be read\n    \n    \\begin{quote}\n        For requests to the main website, the load balancer ships your request off to one of the four frontend machines. Each of these is an 8 core, 16GB RAM bare metal server. Their names are fe1, ..., fe4. Nginx accepts the connection and sends it to a Unix domain socket upon which sixteen Unicorn worker processes are selecting. One of these workers grabs the request and runs the Rails code necessary to fulfill it.\n    \\end{quote}\n    \n    To represent the above description it is necessary to use	\N
346	SharedUnderstanding	356	Martin Fowler, \\emph{Who Needs and Architect?}, cites Ralph Johnson sentence:\n    \n    \\begin{quote}\n        In most successful software projects, the expert developers working on that project have a shared understanding of the system design. This shared understanding is called architecture.\n    \\end{quote}	\N
354	SharedUnderstanding	356	Martin Fowler, \\emph{Who Needs and Architect?}, cites Ralph Johnson sentence:\n    \n    \\begin{quote}\n        In most successful software projects, the expert developers working on that project have a shared understanding of the system design. This shared understanding is called architecture.\n    \\end{quote}	\N
289	PublishSubscribe	1300	Typically, Instant Messaging clients have a window to list the contacts of the user, and\n  show in that window the status of each contact (whether it is available, unavailable, busy,\n  etc). Given that the status of a contact may be changed at any time, and that the contact's\n  status is given by the Instant Messaging application of that contact, which architectural\n  style represents best the interaction pattern between these components?	\N
331	Featuritis	360	Frank Buschmann states that:\n        \n    \\begin{quote}\n        Featuritis is the tendency to trade functional coverage for quality - the more functions the earlier they're delivered, the better.\n    \\end{quote}	\N
335	Performitis	865	Frank Buschmann cites the characterization Marquardt does of Performitis:\n        \n    \\begin{quote}\n        Each part of the system is directly influenced by local performance tuning measures. There is no global performance strategy, or it ignores other qualities of the system as testability and maintainability.\n    \\end{quote}\n    \n    From this problem you can conclude that:	\N
419	GraphiteTechnicaAndNonTechnicalUsers	558	Human-editable URL API for creating graphs is a usability design tactic used in the Graphite system. This tactic	\N
352	Performitis	865	Frank Buschmann cites the characterization Marquardt does of Performitis:\n        \n    \\begin{quote}\n        Each part of the system is directly influenced by local performance tuning measures. There is no global performance strategy, or it ignores other qualities of the system as testability and maintainability.\n    \\end{quote}\n    \n    From this problem you can conclude that:	\N
339	ArchitectureDefinition	359	On the course slides you can find the following definition of architecture:\n    \n    \\begin{quote}\n        The software architecture of a program or computing system is the structure or structures of the system, which comprise software elements, the externally visible properties of those elements, and the relationships among them.\n    \\end{quote}\n    \n    However, in the book you can find another definition:\n    \n    \\begin{quote}\n        The software architecture of a system is the set of structures needed to reason about the system, which comprise the software elements, relations among them, and the properties of both.\n    \\end{quote}	\N
353	ArchitectureDefinition	359	On the course slides you can find the following definition of architecture:\n    \n    \\begin{quote}\n        The software architecture of a program or computing system is the structure or structures of the system, which comprise software elements, the externally visible properties of those elements, and the relationships among them.\n    \\end{quote}\n    \n    However, in the book you can find another definition:\n    \n    \\begin{quote}\n        The software architecture of a system is the set of structures needed to reason about the system, which comprise the software elements, relations among them, and the properties of both.\n    \\end{quote}	\N
351	Featuritis	360	Frank Buschmann states that:\n        \n    \\begin{quote}\n        Featuritis is the tendency to trade functional coverage for quality - the more functions the earlier they're delivered, the better.\n    \\end{quote}	\N
364	EarlyDecisions	1217	In his article, \\emph{Who Needs and Architect?}, Martin Fowler cites Ralph Johnson definition:\n    \n    \\begin{quote}\n        Architecture is the set of decisions that must be made early in a project.\n    \\end{quote}\n    \n    In his opinion:	\N
348	ArchitectAstronauts	368	Frank Buschmann, \\emph{Introducing the Pragmatic Architect}, defines the \\emph{architecture astronauts}. This kind of architect	\N
365	ArchitectAstronauts	368	Frank Buschmann, \\emph{Introducing the Pragmatic Architect}, defines the \\emph{architecture astronauts}. This kind of architect	\N
336	FeaturitisPerformitisFlexibilities	369	In his article, \\emph{Featuritis, Performitis, and Other Deseases}, Frank Buschmann claims that:	\N
362	FeaturitisPerformitisFlexibilities	369	In his article, \\emph{Featuritis, Performitis, and Other Deseases}, Frank Buschmann claims that:	\N
333	Flexibilitis	370	Frank Buschmann states that:\n    \n    \\begin{quote}\n        Overly flexible systems are hard to configure, and when they're finally configured, they lack qualities like performance or security.\n    \\end{quote}	\N
361	Flexibilitis	370	Frank Buschmann states that:\n    \n    \\begin{quote}\n        Overly flexible systems are hard to configure, and when they're finally configured, they lack qualities like performance or security.\n    \\end{quote}	\N
332	Explicit	378	Frank Buschmann states that:\n    \n    \\begin{quote}\n        There's only one escape from such situations: architects must actively break the cycle of mutual misunderstanding and mistrust!\n    \\end{quote}	\N
337	WalkingSkeleton	380	The \\emph{Walking Skeleton} referred in Frank Buschmann's article, \\emph{Featuritis, Performitis, and Other Deseases}:	\N
385	CreateArchitectureTwo	386	The \\emph{Ensuring that the implementation conforms to the architecture} step of how to create an architecture	\N
384	ComponentViewType	387	The quality(ies) that is(are) more relevant to views of the component-and-connector viewtype is(are):	\N
363	ComponentvsModule	932	In wikipedia you can find the following fragment of a definition:\n    \n    \\begin{quote}\n        An individual software component is a software package, or a module that encapsulates a set of related functions.\n    \\end{quote}\n    \n    According to the definitions taught in the course the above \\emph{individual software component} corresponds to:	\N
396	Voting	1417	A voting tactic can be used to	\N
345	EarlyDecisions	1217	In his article, \\emph{Who Needs and Architect?}, Martin Fowler cites Ralph Johnson definition:\n    \n    \\begin{quote}\n        Architecture is the set of decisions that must be made early in a project.\n    \\end{quote}\n    \n    In his opinion:	\N
392	Scenario	552	In a quality scenario	\N
395	PingEcho	554	A heartbeat monitor	\N
393	Tactics	568	An architectural tactic	\N
340	ComponentvsModule	932	In wikipedia you can find the following fragment of a definition:\n    \n    \\begin{quote}\n        An individual software component is a software package, or a module that encapsulates a set of related functions.\n    \\end{quote}\n    \n    According to the definitions taught in the course the above \\emph{individual software component} corresponds to:	\N
415	PingEcho	554	A heartbeat monitor	\N
416	Voting	1417	A voting tactic can be used to	\N
412	Scenario	552	In a quality scenario	\N
409	ChromePredictor	556	In the description of the Chrome system can be read\n    \n    \\begin{quote}\n        The goal of the predictor is to evaluate the likelihood of its success, and then to trigger the activity if resources are available. \n    \\end{quote}\n    \n    The above sentence refer to	\N
429	ChromePredictor	556	In the description of the Chrome system can be read\n    \n    \\begin{quote}\n        The goal of the predictor is to evaluate the likelihood of its success, and then to trigger the activity if resources are available. \n    \\end{quote}\n    \n    The above sentence refer to	\N
406	SeparateEntities	564	In a system where there are sensitive data an appropriate tactic to be used is	\N
426	SeparateEntities	564	In a system where there are sensitive data an appropriate tactic to be used is	\N
447	SeparateEntities	564	In a system where there are sensitive data an appropriate tactic to be used is	\N
407	ChromeTabSecurity	565	In the Chrome system the use of a process per tab results form the application of a tactic of	\N
427	ChromeTabSecurity	565	In the Chrome system the use of a process per tab results form the application of a tactic of	\N
434	ChromeTabSecurity	565	In the Chrome system the use of a process per tab results form the application of a tactic of	\N
408	ChromePerformance	566	In the Chrome system the following tactic is used to improve performance	\N
448	ChromePerformance	566	In the Chrome system the following tactic is used to improve performance	\N
413	Tactics	568	An architectural tactic	\N
469	ChromePredictor	556	In the description of the Chrome system can be read\n    \n    \\begin{quote}\n        The goal of the predictor is to evaluate the likelihood of its success, and then to trigger the activity if resources are available. \n    \\end{quote}\n    \n    The above sentence refer to	\N
446	InternalAttack	563	In a system where the source of attacks can be internal, from authorized users, the appropriate tactics to be used are	\N
465	InternalAttack	563	In a system where the source of attacks can be internal, from authorized users, the appropriate tactics to be used are	\N
468	ChromePerformance	566	In the Chrome system the following tactic is used to improve performance	\N
410	ChromeUsability	570	In the description of the Chrome system can be read\n    \n    \\begin{quote}\n        As the user types, the Omnibox automatically proposes an action, which is either a URL based on your navigation history, or a search query.\n    \\end{quote}\n    \n    The above sentence refers to	\N
430	ChromeUsability	570	In the description of the Chrome system can be read\n    \n    \\begin{quote}\n        As the user types, the Omnibox automatically proposes an action, which is either a URL based on your navigation history, or a search query.\n    \\end{quote}\n    \n    The above sentence refers to	\N
450	ChromeUsability	570	In the description of the Chrome system can be read\n    \n    \\begin{quote}\n        As the user types, the Omnibox automatically proposes an action, which is either a URL based on your navigation history, or a search query.\n    \\end{quote}\n    \n    The above sentence refers to	\N
470	ChromeUsability	570	In the description of the Chrome system can be read\n    \n    \\begin{quote}\n        As the user types, the Omnibox automatically proposes an action, which is either a URL based on your navigation history, or a search query.\n    \\end{quote}\n    \n    The above sentence refers to	\N
391	AvailabilityScenario	551	Consider the following scenario\n    \n    \\begin{quote}\n        When writing to the database the system receives an exception about a write failure. The system should stop interacting with data base and write a log message. \n    \\end{quote}\n    \n    The quality addressed by this scenario is	\N
449	ChromePredictor	556	In the description of the Chrome system can be read\n    \n    \\begin{quote}\n        The goal of the predictor is to evaluate the likelihood of its success, and then to trigger the activity if resources are available. \n    \\end{quote}\n    \n    The above sentence refer to	\N
394	InteroperabilityScenario	553	Consider the following scenario\n    \n    \\begin{quote}\n        Our vehicle information system send our current location to the traffic monitoring system. The traffic monitoring system combines our location with other information, overlays this information on a Google Map, and broadcasts it. Our location information is correctly included with a probability of 99.99\\%.\n    \\end{quote}\n    \n    The quality addressed by this scenario is	\N
414	InteroperabilityScenario	553	Consider the following scenario\n    \n    \\begin{quote}\n        Our vehicle information system send our current location to the traffic monitoring system. The traffic monitoring system combines our location with other information, overlays this information on a Google Map, and broadcasts it. Our location information is correctly included with a probability of 99.99\\%.\n    \\end{quote}\n    \n    The quality addressed by this scenario is	\N
433	InteroperabilityScenario	553	Consider the following scenario\n    \n    \\begin{quote}\n        Our vehicle information system send our current location to the traffic monitoring system. The traffic monitoring system combines our location with other information, overlays this information on a Google Map, and broadcasts it. Our location information is correctly included with a probability of 99.99\\%.\n    \\end{quote}\n    \n    The quality addressed by this scenario is	\N
454	InteroperabilityScenario	553	Consider the following scenario\n    \n    \\begin{quote}\n        Our vehicle information system send our current location to the traffic monitoring system. The traffic monitoring system combines our location with other information, overlays this information on a Google Map, and broadcasts it. Our location information is correctly included with a probability of 99.99\\%.\n    \\end{quote}\n    \n    The quality addressed by this scenario is	\N
473	InteroperabilityScenario	553	Consider the following scenario\n    \n    \\begin{quote}\n        Our vehicle information system send our current location to the traffic monitoring system. The traffic monitoring system combines our location with other information, overlays this information on a Google Map, and broadcasts it. Our location information is correctly included with a probability of 99.99\\%.\n    \\end{quote}\n    \n    The quality addressed by this scenario is	\N
432	Tactics	568	An architectural tactic	\N
453	Tactics	568	An architectural tactic	\N
403	Firewall	561	Having a single point of access to an intranet is a security tactic of	\N
423	Firewall	561	Having a single point of access to an intranet is a security tactic of	\N
442	Firewall	561	Having a single point of access to an intranet is a security tactic of	\N
463	Firewall	561	Having a single point of access to an intranet is a security tactic of	\N
481	Firewall	561	Having a single point of access to an intranet is a security tactic of	\N
404	VerifyMessageIntegrity	562	In the Fenix system a checksum is associated to a set of grades. This is an application of the tactic	\N
424	VerifyMessageIntegrity	562	In the Fenix system a checksum is associated to a set of grades. This is an application of the tactic	\N
445	VerifyMessageIntegrity	562	In the Fenix system a checksum is associated to a set of grades. This is an application of the tactic	\N
464	VerifyMessageIntegrity	562	In the Fenix system a checksum is associated to a set of grades. This is an application of the tactic	\N
482	VerifyMessageIntegrity	562	In the Fenix system a checksum is associated to a set of grades. This is an application of the tactic	\N
405	InternalAttack	563	In a system where the source of attacks can be internal, from authorized users, the appropriate tactics to be used are	\N
425	InternalAttack	563	In a system where the source of attacks can be internal, from authorized users, the appropriate tactics to be used are	\N
582	SocialCalcModifiability	604	In the description of the SocialCalc case study can be read:\n    \n    \\begin{quote}\n        To make this work across browsers and operating systems, we use the Web::Hippie4 framework, a high-level abstraction of JSON-over-WebSocket with convenient jQuery bindings.\n    \\end{quote} \n    \n    From this fragment can be identified a scenario for	\N
601	SocialCalcModifiability	604	In the description of the SocialCalc case study can be read:\n    \n    \\begin{quote}\n        To make this work across browsers and operating systems, we use the Web::Hippie4 framework, a high-level abstraction of JSON-over-WebSocket with convenient jQuery bindings.\n    \\end{quote} \n    \n    From this fragment can be identified a scenario for	\N
586	ThounsandParsecSystemInitiative	605	In the description of the Thousand Parsec case study can be read:\n    \n    \\begin{quote}\n        Next, the player is prompted to configure options for the ruleset and server, with sane defaults pulled from the metadata. Finally, if any compatible AI clients are installed, the player is prompted to configure one or more of them to play against.\n    \\end{quote} \n    \n    The tactic referred in the fragments is	\N
593	DecompositionBuilvsBuy	606	A criteria for the the application of the Decomposition architectural style of the Module viewtype is Build-vs-Buy decisions. The application of the criteria	\N
597	DecompositionBuilvsBuy	606	A criteria for the the application of the Decomposition architectural style of the Module viewtype is Build-vs-Buy decisions. The application of the criteria	\N
699	GraphiteCarbon	718	Consider the following application-specific types that were defined for a component-and-connector view that depicts the components within \\texttt{Carbon} component. \n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{x-carbon-buffering}\n    \\end{center}	\N
711	GraphiteCarbon	718	Consider the following application-specific types that were defined for a component-and-connector view that depicts the components within \\texttt{Carbon} component. \n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{x-carbon-buffering}\n    \\end{center}	\N
702	ImplementationStyle	724	An architecture can also be represented by the set of files which contains its modules code. A suitable architectural style to represent this set of files is	\N
722	ImplementationStyle	724	An architecture can also be represented by the set of files which contains its modules code. A suitable architectural style to represent this set of files is	\N
706	DVDCatalogAspects	725	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        To allow the share of catalogs with family and friends, including some access control. \n    \\end{quote}\n    \n    This requirement requires	\N
690	PeerToPeerDynamicReconfiguration	1316	In the description of the Gnutella system can be read:\n    \n    \\begin{quote}\n        The topology of the system changes at runtime as peer components connect and disconnect to the network.\n    \\end{quote}	\N
694	SOAQualities	727	The Service-Oriented Architecture style improves modifiability because	\N
700	GraphiteDataPointSocket	953	Consider the following application-specific types. Note that \\texttt{Queue} components are within the \\texttt{Carbon} components. In a view that contains components of these three types \n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{x-datapoint-access}\n    \\end{center}	\N
411	AvailabilityScenario	551	Consider the following scenario\n    \n    \\begin{quote}\n        When writing to the database the system receives an exception about a write failure. The system should stop interacting with data base and write a log message. \n    \\end{quote}\n    \n    The quality addressed by this scenario is	\N
441	AvailabilityScenario	551	Consider the following scenario\n    \n    \\begin{quote}\n        When writing to the database the system receives an exception about a write failure. The system should stop interacting with data base and write a log message. \n    \\end{quote}\n    \n    The quality addressed by this scenario is	\N
443	GraphiteTechnicaAndNonTechnicalUsers	558	Human-editable URL API for creating graphs is a usability design tactic used in the Graphite system. This tactic	\N
402	GraphiteBackend	560	To reduce the backend load (writes) the Graphite system uses	\N
422	GraphiteBackend	560	To reduce the backend load (writes) the Graphite system uses	\N
440	GraphiteBackend	560	To reduce the backend load (writes) the Graphite system uses	\N
462	GraphiteBackend	560	To reduce the backend load (writes) the Graphite system uses	\N
480	GraphiteBackend	560	To reduce the backend load (writes) the Graphite system uses	\N
420	GraphiteReliability	958	In the Graphite system description can be read:\n    \n    \\begin{quote}\n        We've got 600,000 metrics that update every minute and we're assuming our storage can only keep up with 60,000 write operations per minute. This means we will have approximately 10 minutes worth of data sitting in carbon's queues at any given time. To a user this means that the graphs they request from the Graphite webapp will be missing the most recent 10 minutes of data.\n    \\end{quote}	\N
438	GraphiteReliability	958	In the Graphite system description can be read:\n    \n    \\begin{quote}\n        We've got 600,000 metrics that update every minute and we're assuming our storage can only keep up with 60,000 write operations per minute. This means we will have approximately 10 minutes worth of data sitting in carbon's queues at any given time. To a user this means that the graphs they request from the Graphite webapp will be missing the most recent 10 minutes of data.\n    \\end{quote}	\N
460	GraphiteReliability	958	In the Graphite system description can be read:\n    \n    \\begin{quote}\n        We've got 600,000 metrics that update every minute and we're assuming our storage can only keep up with 60,000 write operations per minute. This means we will have approximately 10 minutes worth of data sitting in carbon's queues at any given time. To a user this means that the graphs they request from the Graphite webapp will be missing the most recent 10 minutes of data.\n    \\end{quote}	\N
458	GarbageCollector	557	In wikipedia you can find the following definition:\n    \n    \\begin{quote}\n        The garbage collector, or just collector, attempts to reclaim garbage, or memory occupied by objects that are no longer in use by the program.\n    \\end{quote}\n    \n    The garbage collector is a component that implements an availability tactic of	\N
476	GarbageCollector	557	In wikipedia you can find the following definition:\n    \n    \\begin{quote}\n        The garbage collector, or just collector, attempts to reclaim garbage, or memory occupied by objects that are no longer in use by the program.\n    \\end{quote}\n    \n    The garbage collector is a component that implements an availability tactic of	\N
399	GraphiteTechnicaAndNonTechnicalUsers	558	Human-editable URL API for creating graphs is a usability design tactic used in the Graphite system. This tactic	\N
459	GraphiteTechnicaAndNonTechnicalUsers	558	Human-editable URL API for creating graphs is a usability design tactic used in the Graphite system. This tactic	\N
477	GraphiteTechnicaAndNonTechnicalUsers	558	Human-editable URL API for creating graphs is a usability design tactic used in the Graphite system. This tactic	\N
400	GraphiteReliability	958	In the Graphite system description can be read:\n    \n    \\begin{quote}\n        We've got 600,000 metrics that update every minute and we're assuming our storage can only keep up with 60,000 write operations per minute. This means we will have approximately 10 minutes worth of data sitting in carbon's queues at any given time. To a user this means that the graphs they request from the Graphite webapp will be missing the most recent 10 minutes of data.\n    \\end{quote}	\N
527	InteroperabilityScenario	553	Consider the following scenario\n    \n    \\begin{quote}\n        Our vehicle information system send our current location to the traffic monitoring system. The traffic monitoring system combines our location with other information, overlays this information on a Google Map, and broadcasts it. Our location information is correctly included with a probability of 99.99\\%.\n    \\end{quote}\n    \n    The quality addressed by this scenario is	\N
444	PingEcho	554	A heartbeat monitor	\N
455	PingEcho	554	A heartbeat monitor	\N
474	PingEcho	554	A heartbeat monitor	\N
514	PingEcho	554	A heartbeat monitor	\N
398	GarbageCollector	557	In wikipedia you can find the following definition:\n    \n    \\begin{quote}\n        The garbage collector, or just collector, attempts to reclaim garbage, or memory occupied by objects that are no longer in use by the program.\n    \\end{quote}\n    \n    The garbage collector is a component that implements an availability tactic of	\N
418	GarbageCollector	557	In wikipedia you can find the following definition:\n    \n    \\begin{quote}\n        The garbage collector, or just collector, attempts to reclaim garbage, or memory occupied by objects that are no longer in use by the program.\n    \\end{quote}\n    \n    The garbage collector is a component that implements an availability tactic of	\N
437	GarbageCollector	557	In wikipedia you can find the following definition:\n    \n    \\begin{quote}\n        The garbage collector, or just collector, attempts to reclaim garbage, or memory occupied by objects that are no longer in use by the program.\n    \\end{quote}\n    \n    The garbage collector is a component that implements an availability tactic of	\N
401	GraphiteModifiability	567	In the Graphite system description can be read:\n    \n    \\begin{quote}\n        Making multiple Graphite servers appear to be a single system from a user perspective isn't terribly difficult, at least for a naive implementation.\n    \\end{quote}	\N
472	Tactics	568	An architectural tactic	\N
397	Degradation	569	Consider a enterprise web system, which provides services both on the company's intranet and to the company's clients on the internet, that when under a denial of service attack decides to stop providing internet services.	\N
417	Degradation	569	Consider a enterprise web system, which provides services both on the company's intranet and to the company's clients on the internet, that when under a denial of service attack decides to stop providing internet services.	\N
436	Degradation	569	Consider a enterprise web system, which provides services both on the company's intranet and to the company's clients on the internet, that when under a denial of service attack decides to stop providing internet services.	\N
457	Degradation	569	Consider a enterprise web system, which provides services both on the company's intranet and to the company's clients on the internet, that when under a denial of service attack decides to stop providing internet services.	\N
475	Degradation	569	Consider a enterprise web system, which provides services both on the company's intranet and to the company's clients on the internet, that when under a denial of service attack decides to stop providing internet services.	\N
516	Degradation	569	Consider a enterprise web system, which provides services both on the company's intranet and to the company's clients on the internet, that when under a denial of service attack decides to stop providing internet services.	\N
631	UsesCycles	654	Consider a view of the module viewtype where there is a uses loop, a cycle of uses dependences between several modules. It may be possible to break the dependence cycle by	\N
649	UsesCycles	654	Consider a view of the module viewtype where there is a uses loop, a cycle of uses dependences between several modules. It may be possible to break the dependence cycle by	\N
634	Aspects	655	An architect is decomposing a system into a set of responsibilities using a view of the Decomposition style. However, she had already to backtrack several times and try new decompositions because she end up with some responsibility that can not be within a single module.	\N
650	Aspects	655	An architect is decomposing a system into a set of responsibilities using a view of the Decomposition style. However, she had already to backtrack several times and try new decompositions because she end up with some responsibility that can not be within a single module.	\N
646	RepositoryPerformance	658	The repository architectural style provides performance because	\N
478	GraphiteReliability	958	In the Graphite system description can be read:\n    \n    \\begin{quote}\n        We've got 600,000 metrics that update every minute and we're assuming our storage can only keep up with 60,000 write operations per minute. This means we will have approximately 10 minutes worth of data sitting in carbon's queues at any given time. To a user this means that the graphs they request from the Graphite webapp will be missing the most recent 10 minutes of data.\n    \\end{quote}	\N
487	Voting	1417	A voting tactic can be used to	\N
515	Voting	1417	A voting tactic can be used to	\N
451	AvailabilityScenario	551	Consider the following scenario\n    \n    \\begin{quote}\n        When writing to the database the system receives an exception about a write failure. The system should stop interacting with data base and write a log message. \n    \\end{quote}\n    \n    The quality addressed by this scenario is	\N
471	AvailabilityScenario	551	Consider the following scenario\n    \n    \\begin{quote}\n        When writing to the database the system receives an exception about a write failure. The system should stop interacting with data base and write a log message. \n    \\end{quote}\n    \n    The quality addressed by this scenario is	\N
511	AvailabilityScenario	551	Consider the following scenario\n    \n    \\begin{quote}\n        When writing to the database the system receives an exception about a write failure. The system should stop interacting with data base and write a log message. \n    \\end{quote}\n    \n    The quality addressed by this scenario is	\N
531	AvailabilityScenario	551	Consider the following scenario\n    \n    \\begin{quote}\n        When writing to the database the system receives an exception about a write failure. The system should stop interacting with data base and write a log message. \n    \\end{quote}\n    \n    The quality addressed by this scenario is	\N
509	ChromePredictor	556	In the description of the Chrome system can be read\n    \n    \\begin{quote}\n        The goal of the predictor is to evaluate the likelihood of its success, and then to trigger the activity if resources are available. \n    \\end{quote}\n    \n    The above sentence refer to	\N
530	ChromePredictor	556	In the description of the Chrome system can be read\n    \n    \\begin{quote}\n        The goal of the predictor is to evaluate the likelihood of its success, and then to trigger the activity if resources are available. \n    \\end{quote}\n    \n    The above sentence refer to	\N
549	ChromePredictor	556	In the description of the Chrome system can be read\n    \n    \\begin{quote}\n        The goal of the predictor is to evaluate the likelihood of its success, and then to trigger the activity if resources are available. \n    \\end{quote}\n    \n    The above sentence refer to	\N
538	GarbageCollector	557	In wikipedia you can find the following definition:\n    \n    \\begin{quote}\n        The garbage collector, or just collector, attempts to reclaim garbage, or memory occupied by objects that are no longer in use by the program.\n    \\end{quote}\n    \n    The garbage collector is a component that implements an availability tactic of	\N
539	GraphiteTechnicaAndNonTechnicalUsers	558	Human-editable URL API for creating graphs is a usability design tactic used in the Graphite system. This tactic	\N
526	InternalAttack	563	In a system where the source of attacks can be internal, from authorized users, the appropriate tactics to be used are	\N
506	SeparateEntities	564	In a system where there are sensitive data an appropriate tactic to be used is	\N
507	ChromeTabSecurity	565	In the Chrome system the use of a process per tab results form the application of a tactic of	\N
528	ChromeTabSecurity	565	In the Chrome system the use of a process per tab results form the application of a tactic of	\N
508	ChromePerformance	566	In the Chrome system the following tactic is used to improve performance	\N
529	ChromePerformance	566	In the Chrome system the following tactic is used to improve performance	\N
421	GraphiteModifiability	567	In the Graphite system description can be read:\n    \n    \\begin{quote}\n        Making multiple Graphite servers appear to be a single system from a user perspective isn't terribly difficult, at least for a naive implementation.\n    \\end{quote}	\N
439	GraphiteModifiability	567	In the Graphite system description can be read:\n    \n    \\begin{quote}\n        Making multiple Graphite servers appear to be a single system from a user perspective isn't terribly difficult, at least for a naive implementation.\n    \\end{quote}	\N
461	GraphiteModifiability	567	In the Graphite system description can be read:\n    \n    \\begin{quote}\n        Making multiple Graphite servers appear to be a single system from a user perspective isn't terribly difficult, at least for a naive implementation.\n    \\end{quote}	\N
500	GraphiteReliability	958	In the Graphite system description can be read:\n    \n    \\begin{quote}\n        We've got 600,000 metrics that update every minute and we're assuming our storage can only keep up with 60,000 write operations per minute. This means we will have approximately 10 minutes worth of data sitting in carbon's queues at any given time. To a user this means that the graphs they request from the Graphite webapp will be missing the most recent 10 minutes of data.\n    \\end{quote}	\N
542	GraphiteBackend	560	To reduce the backend load (writes) the Graphite system uses	\N
543	Firewall	561	Having a single point of access to an intranet is a security tactic of	\N
544	VerifyMessageIntegrity	562	In the Fenix system a checksum is associated to a set of grades. This is an application of the tactic	\N
545	InternalAttack	563	In a system where the source of attacks can be internal, from authorized users, the appropriate tactics to be used are	\N
546	SeparateEntities	564	In a system where there are sensitive data an appropriate tactic to be used is	\N
479	GraphiteModifiability	567	In the Graphite system description can be read:\n    \n    \\begin{quote}\n        Making multiple Graphite servers appear to be a single system from a user perspective isn't terribly difficult, at least for a naive implementation.\n    \\end{quote}	\N
501	GraphiteModifiability	567	In the Graphite system description can be read:\n    \n    \\begin{quote}\n        Making multiple Graphite servers appear to be a single system from a user perspective isn't terribly difficult, at least for a naive implementation.\n    \\end{quote}	\N
510	ChromeUsability	570	In the description of the Chrome system can be read\n    \n    \\begin{quote}\n        As the user types, the Omnibox automatically proposes an action, which is either a URL based on your navigation history, or a search query.\n    \\end{quote}\n    \n    The above sentence refers to	\N
518	ChromeUsability	570	In the description of the Chrome system can be read\n    \n    \\begin{quote}\n        As the user types, the Omnibox automatically proposes an action, which is either a URL based on your navigation history, or a search query.\n    \\end{quote}\n    \n    The above sentence refers to	\N
580	SocialCalcUsability	594	In the description of the SocialCalc case study can be read:\n    \n    \\begin{quote}\n        Even with race conditions resolved, it is still suboptimal to accidentally overwrite the cell another user is currently editing. A simple improvement is for each client to broadcast its cursor position to other users, so everyone can see which cells are being worked on.\n    \\end{quote} \n    \n    From this fragment can be identified a scenario for	\N
591	SocialCalcUsability	594	In the description of the SocialCalc case study can be read:\n    \n    \\begin{quote}\n        Even with race conditions resolved, it is still suboptimal to accidentally overwrite the cell another user is currently editing. A simple improvement is for each client to broadcast its cursor position to other users, so everyone can see which cells are being worked on.\n    \\end{quote} \n    \n    From this fragment can be identified a scenario for	\N
584	ThounsandParsecInteroperability	595	In the description of the Thousand Parsec case study can be read:\n    \n    \\begin{quote}\n        Finding a public Thousand Parsec server to play on is much like locating a lone stealth scout in deep space - a daunting prospect if one doesn't know where to look. Fortunately, public servers can announce themselves to a metaserver, whose location, as a central hub, should ideally be well-known to players.\n    \\end{quote} \n    \n    From this fragment can be identified a scenario for	\N
592	ThounsandParsecInteroperability	595	In the description of the Thousand Parsec case study can be read:\n    \n    \\begin{quote}\n        Finding a public Thousand Parsec server to play on is much like locating a lone stealth scout in deep space - a daunting prospect if one doesn't know where to look. Fortunately, public servers can announce themselves to a metaserver, whose location, as a central hub, should ideally be well-known to players.\n    \\end{quote} \n    \n    From this fragment can be identified a scenario for	\N
540	GraphiteReliability	958	In the Graphite system description can be read:\n    \n    \\begin{quote}\n        We've got 600,000 metrics that update every minute and we're assuming our storage can only keep up with 60,000 write operations per minute. This means we will have approximately 10 minutes worth of data sitting in carbon's queues at any given time. To a user this means that the graphs they request from the Graphite webapp will be missing the most recent 10 minutes of data.\n    \\end{quote}	\N
589	FenixBusinessCase	1303	In the context of the FenixEdu case study, the business case was to	\N
575	IterativeDesign	1414	Designing an architecture	\N
590	IterativeDesign	1414	Designing an architecture	\N
602	ThounsandParsecSystemInitiative	605	In the description of the Thousand Parsec case study can be read:\n    \n    \\begin{quote}\n        Next, the player is prompted to configure options for the ruleset and server, with sane defaults pulled from the metadata. Finally, if any compatible AI clients are installed, the player is prompted to configure one or more of them to play against.\n    \\end{quote} \n    \n    The tactic referred in the fragments is	\N
588	DecompositionBuilvsBuy	606	A criteria for the the application of the Decomposition architectural style of the Module viewtype is Build-vs-Buy decisions. The application of the criteria	\N
603	DecompositionBuilvsBuy	606	A criteria for the the application of the Decomposition architectural style of the Module viewtype is Build-vs-Buy decisions. The application of the criteria	\N
572	BusinessScenarioOne	608	In the context of the FenixEdu case study the following scenario was identified.\n    \n    \\begin{quote}\n        The school management pretends that all the members of the school, students, administrative staff, faculty and management should be able to use the system to perform their activities efficiently without requiring the installation of any client software or a long learning process.\n    \\end{quote}\n    \n    This is a	\N
599	BusinessScenarioOne	608	In the context of the FenixEdu case study the following scenario was identified.\n    \n    \\begin{quote}\n        The school management pretends that all the members of the school, students, administrative staff, faculty and management should be able to use the system to perform their activities efficiently without requiring the installation of any client software or a long learning process.\n    \\end{quote}\n    \n    This is a	\N
581	SocialCalcAvailability	615	In the description of the SocialCalc case study can be read:\n    \n    \\begin{quote}\n        If users A and B simultaneously perform an operation affecting the same cells, then receive and execute commands broadcast from the other user, they will end up in different states.\n    \\end{quote} \n    \n    From this fragment can be identified a scenario for	\N
611	SocialCalcAvailability	615	In the description of the SocialCalc case study can be read:\n    \n    \\begin{quote}\n        If users A and B simultaneously perform an operation affecting the same cells, then receive and execute commands broadcast from the other user, they will end up in different states.\n    \\end{quote} \n    \n    From this fragment can be identified a scenario for	\N
574	UtilityTree	616	A utility tree	\N
609	UtilityTree	616	A utility tree	\N
583	ThounsandParsecAvailability	617	In the description of the Thousand Parsec case study can be read:\n    \n    \\begin{quote}\n        Turns also have a time limit imposed by the server, so that slow or unresponsive players cannot hold up a game.\n    \\end{quote} \n    \n    From this fragment can be identified a scenario for	\N
612	ThounsandParsecAvailability	617	In the description of the Thousand Parsec case study can be read:\n    \n    \\begin{quote}\n        Turns also have a time limit imposed by the server, so that slow or unresponsive players cannot hold up a game.\n    \\end{quote} \n    \n    From this fragment can be identified a scenario for	\N
577	HighBusinessValue	618	Consider an architecturally significant requirement (ASR) that has a high impact on the architecture but a low business value	\N
610	HighBusinessValue	618	Consider an architecturally significant requirement (ASR) that has a high impact on the architecture but a low business value	\N
579	SocialCalcMaintainTaskModel	624	In the description of the SocialCalc case study can be read:\n    \n    \\begin{quote}\n        Therefore, on browsers with support for CSS3, we use the box-shadow property to represent multiple peer cursors in the same cell.\n    \\end{quote} \n    \n    This corresponds to the application of	\N
573	BusinessScenarioTwo	628	In the context of the FenixEdu case study the following scenario was identified.\n    \n    \\begin{quote}\n        The management intends that the system should be available to all users, even after offices close and classes finish because students may need courses material to study 24X7 and faculty and administrative staff may want to work from home.\n    \\end{quote}\n    \n    This is a	\N
578	FenixADD	1398	When applying Attribute-Driven Design (ADD) to the FenixEdu system the creation of a view where there are redundant web servers, load balancers and database servers	\N
576	LowArchitecturalImpact	1406	Consider an architecturally significant requirement (ASR) that has a low impact on the architecture but a high business value	\N
587	Decomposition	1408	The Decomposition architectural style of the Module viewtype	\N
613	Decomposition	1408	The Decomposition architectural style of the Module viewtype	\N
637	GitHubSecurity	656	In the description of the GitHub case study can be read:\n    \n    \\begin{quote}\n        Of course, allowing arbitrary execution of commands is unsafe, so SSH includes the ability to restrict what commands can be executed. In a very simple case, you can restrict execution to git-shell which is included with Git. All this script does is check the command that you're trying to execute and ensure that it's one of git upload-pack, git receive-pack, or git upload-archive.\n    \\end{quote}\n    \n    The tactic addressed in this fragments is:	\N
651	GitHubSecurity	656	In the description of the GitHub case study can be read:\n    \n    \\begin{quote}\n        Of course, allowing arbitrary execution of commands is unsafe, so SSH includes the ability to restrict what commands can be executed. In a very simple case, you can restrict execution to git-shell which is included with Git. All this script does is check the command that you're trying to execute and ensure that it's one of git upload-pack, git receive-pack, or git upload-archive.\n    \\end{quote}\n    \n    The tactic addressed in this fragments is:	\N
642	ConnectorAttach	657	A connector may be attached to components of different types because	\N
652	ConnectorAttach	657	A connector may be attached to components of different types because	\N
653	RepositoryPerformance	658	The repository architectural style provides performance because	\N
648	ClientServerSynchronous	665	In the client-server architectural style the request/reply connector is synchronous. Consider an architect that wants to describe an asynchronous interaction between clients and servers.	\N
663	ClientServerSynchronous	665	In the client-server architectural style the request/reply connector is synchronous. Consider an architect that wants to describe an asynchronous interaction between clients and servers.	\N
632	GeneralizationEvolution	666	The Generalization architectural style of the module viewtype can be use to support the evolution of a system	\N
659	GeneralizationEvolution	666	The Generalization architectural style of the module viewtype can be use to support the evolution of a system	\N
639	GitIncreaseResourceEfficiency	667	In the description of the Git case study can be read how it efficiently compares content:\n    \n    \\begin{quote}\n        When a content (i.e., file or directory) node in the graph has the same reference identity (the SHA in Git) as that in a different commit, the two nodes are guaranteed to contain the same content, allowing Git to short-circuit content diffing efficiently.\n    \\end{quote}\n    \n    The performance tactic addressed in this fragments is:	\N
661	GitIncreaseResourceEfficiency	667	In the description of the Git case study can be read how it efficiently compares content:\n    \n    \\begin{quote}\n        When a content (i.e., file or directory) node in the graph has the same reference identity (the SHA in Git) as that in a different commit, the two nodes are guaranteed to contain the same content, allowing Git to short-circuit content diffing efficiently.\n    \\end{quote}\n    \n    The performance tactic addressed in this fragments is:	\N
635	DataModelFacebook	668	In Facebook it is not possible to have the information about more that one bilion users in a single disk. Therefore, a sharding technique is applied, where the persistent information is split between several database servers, and applications are routed to the right servers for queries and updates. To describe this architecture	\N
660	DataModelFacebook	668	In Facebook it is not possible to have the information about more that one bilion users in a single disk. Therefore, a sharding technique is applied, where the persistent information is split between several database servers, and applications are routed to the right servers for queries and updates. To describe this architecture	\N
641	ComponentPorts	675	Consider the concepts of module interface and component port.	\N
636	UsesDataModel	676	A CRUD matrix, which indicates whether each module creates, reads, updates, or deletes data (CRUD, for short) from each data entity. The CRUD matrix	\N
629	UsesFor	678	The Uses architectural style of the Module viewtype	\N
644	ConnectorDecomposition	945	Consider an architect that is designing a component-and-connector view. In some point the architect decides that she does not need to decompose a connector with a demanding quality level. This may occur because	\N
662	ConnectorDecomposition	945	Consider an architect that is designing a component-and-connector view. In some point the architect decides that she does not need to decompose a connector with a demanding quality level. This may occur because	\N
640	GitHubComputationRedundancy	674	In the description of the GitHub case study can be read:\n    \n    \\begin{quote}\n        Once the Smoke proxy has determined the user's route, it establishes a transparent proxy to the proper file server. We have four pairs of file servers. Their names are fs1a, fs1b, ..., fs4a, fs4b. These are 8 core, 16GB RAM bare metal servers, each with six 300GB 15K RPM SAS drives arranged in RAID 10. At any given time one server in each pair is active and the other is waiting to take over should there be a fatal failure in the master. All repository data is constantly replicated from the master to the slave via DRBD.\n    \\end{quote}\n    \n    The four pairs of file servers implement:	\N
671	GitHubComputationRedundancy	674	In the description of the GitHub case study can be read:\n    \n    \\begin{quote}\n        Once the Smoke proxy has determined the user's route, it establishes a transparent proxy to the proper file server. We have four pairs of file servers. Their names are fs1a, fs1b, ..., fs4a, fs4b. These are 8 core, 16GB RAM bare metal servers, each with six 300GB 15K RPM SAS drives arranged in RAID 10. At any given time one server in each pair is active and the other is waiting to take over should there be a fatal failure in the master. All repository data is constantly replicated from the master to the slave via DRBD.\n    \\end{quote}\n    \n    The four pairs of file servers implement:	\N
670	UsesDataModel	676	A CRUD matrix, which indicates whether each module creates, reads, updates, or deletes data (CRUD, for short) from each data entity. The CRUD matrix	\N
669	UsesFor	678	The Uses architectural style of the Module viewtype	\N
633	LayeredVirtualMachine	684	According to the definition of the Layered architectural style, each layer represents a grouping of modules that offers a cohesive set of services.	\N
683	LayeredVirtualMachine	684	According to the definition of the Layered architectural style, each layer represents a grouping of modules that offers a cohesive set of services.	\N
645	RepositoryModifiability	685	The repository architectural style provides modifiability because	\N
681	RepositoryModifiability	685	The repository architectural style provides modifiability because	\N
630	UsesCalls	1256	A function call is not necessarily a uses relation of the Uses architectural style of the Module viewtype because	\N
638	GitConditionMonitoring	687	In the description of the Git case study can be read how to deal with the corruption of pack files in the context of the availability quality:\n    \n    \\begin{quote}\n        If an object was only copied partially or another form of data corruption occurred, recalculating the SHA of the current object will identify such corruption.\n    \\end{quote}\n    \n    The tactic addressed in this fragments is:	\N
680	GitConditionMonitoring	687	In the description of the Git case study can be read how to deal with the corruption of pack files in the context of the availability quality:\n    \n    \\begin{quote}\n        If an object was only copied partially or another form of data corruption occurred, recalculating the SHA of the current object will identify such corruption.\n    \\end{quote}\n    \n    The tactic addressed in this fragments is:	\N
682	UsesCalls	1256	A function call is not necessarily a uses relation of the Uses architectural style of the Module viewtype because	\N
695	SOAClientServerPeertoPeer	717	The Service-Oriented Architecture style	\N
710	SOAClientServerPeertoPeer	717	The Service-Oriented Architecture style	\N
712	AllocationStylesCost	1475	Consider a stakeholder that is particularly concerned about the total cost of the project. When it comes to describing the system using allocation viewtypes is interested in	\N
647	ClientServerAvailability	946	The client-server architectural style provides availability because	\N
673	ClientServerAvailability	946	The client-server architectural style provides availability because	\N
643	ModuleComponent	1245	Consider the kind of relations between components and modules.	\N
679	ModuleComponent	1245	Consider the kind of relations between components and modules.	\N
705	DVDCatalogMeta	1125	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        The application should support other kinds of catalogs (CDs, games, books, ...). \n    \\end{quote}\n    \n    This requirement requires a change of	\N
701	AllocationStylesCost	1475	Consider a stakeholder that is particularly concerned about the total cost of the project. When it comes to describing the system using allocation viewtypes is interested in	\N
723	DVDCatalogAspects	725	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        To allow the share of catalogs with family and friends, including some access control. \n    \\end{quote}\n    \n    This requirement requires	\N
733	GraphiteDecompositionMemcached	737	Consider the following decomposition view of the Graphite system where module \\textsc{Store Graphs} is responsible for managing the storage of datapoints and graphs and module \\textsc{Present Graphs} for graphs generation and presentation. Memcache is a library that maintains datapoints in memory to reduce the overhead of obtaining them from the file system.\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{x-top-decomposition}\n    \\end{center}	\N
704	DeploymentStyleLimitExposure	744	An architect needs to show that a security tactic of limit exposure will be effectively provided by the executing system. Therefore, she decides to design	\N
742	DeploymentStyleLimitExposure	744	An architect needs to show that a security tactic of limit exposure will be effectively provided by the executing system. Therefore, she decides to design	\N
698	GraphiteDecompositionBuffering	747	Consider the following decomposition view of the Graphite system where module \\textsc{Store Graphs} is responsible for managing the storage of datapoints and graphs and module \\textsc{Present Graphs} for graphs generation and presentation. Buffering is a library used to temporarily store incoming data point.\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{x-top-decomposition}\n    \\end{center}	\N
741	GraphiteDecompositionBuffering	747	Consider the following decomposition view of the Graphite system where module \\textsc{Store Graphs} is responsible for managing the storage of datapoints and graphs and module \\textsc{Present Graphs} for graphs generation and presentation. Buffering is a library used to temporarily store incoming data point.\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{x-top-decomposition}\n    \\end{center}	\N
764	SocialCalcConflictResolution	774	Consider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the client Spreadsheet. A \\textsc{ConflictResolution} module is used when local commands conflict with remote commands.\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{x-SocialCalc-cc-client}\n    \\end{center}	\N
772	SocialCalcConflictResolution	774	Consider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the client Spreadsheet. A \\textsc{ConflictResolution} module is used when local commands conflict with remote commands.\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{x-SocialCalc-cc-client}\n    \\end{center}	\N
768	LogicAccessTableModule	775	When the domain logic is organized using a Table Module pattern	\N
773	LogicAccessTableModule	775	When the domain logic is organized using a Table Module pattern	\N
749	SilkMobileDevices	776	When comparing Amazon Silk with Google Chrome in the context of mobile devices	\N
769	SilkMobileDevices	776	When comparing Amazon Silk with Google Chrome in the context of mobile devices	\N
756	ThousandParsecReadWriteConnector	777	Consider the architectural views for the ThousandParsec system. The following diagram depicts a proposal of application-specific types for the architectural components, where the names of the ports are missing. Between the GameServer and Repository component\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{x-ThousandParsec-cc}\n    \\end{center}	\N
758	OrderPadReliability	778	Consider the architecture of the Morrison's OrderPad. The connector between the client component, executing in the Pad, and the server component, executing in the OrderPadDatabase	\N
732	DVDCatalogMobile	1191	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        To support iPhone/iPad/Android version with sync, which allows offline use of the application in the mobile device and data synchronization to occur when a connection is available\n    \\end{quote}\n    \n    This requirement requires a change of	\N
696	PipeFilterComposition	1427	The Pipe-and-Filter style allows composition of filters	\N
731	InstallStyle	949	An important stage of the development of any system is its build into the set of executable files. A suitable architectural style which helps on the definition of the build process is	\N
721	GraphiteDataPointSocket	953	Consider the following application-specific types. Note that \\texttt{Queue} components are within the \\texttt{Carbon} components. In a view that contains components of these three types \n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{x-datapoint-access}\n    \\end{center}	\N
816	ModifiabilityOne	998	The modifiability tactic Use an Intermediary between two modules	\N
849	ModifiabilityOne	998	The modifiability tactic Use an Intermediary between two modules	\N
740	PipeFilterComposition	1427	The Pipe-and-Filter style allows composition of filters	\N
739	PublishSubscribe	1435	In the Publish-Subscribe architectural style	\N
276	ConcreteScenario	1174	As part of the process of creating an architecture, we talked about\n  a framework for capturing some of the requirements for a system.  In\n  this context, \\textbf{concrete scenarios} are used for	\N
1140	ConcreteScenarios	1174	As part of the process of creating an architecture, we talked about\n  a framework for capturing some of the requirements for a system.  In\n  this context, \\textbf{concrete scenarios} are used for	\N
1141	AvailabilityScenarioTwo	1175	Consider the following availability scenario\n      \n      \\begin{quote}\n         If one of the application servers fails to respond to a request when the system is in its normal operation state, the system should notify the operator and continue to operate normally.\n      \\end{quote}	\N
770	ThousandParsecReadWriteConnector	777	Consider the architectural views for the ThousandParsec system. The following diagram depicts a proposal of application-specific types for the architectural components, where the names of the ports are missing. Between the GameServer and Repository component\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{x-ThousandParsec-cc}\n    \\end{center}	\N
771	OrderPadReliability	778	Consider the architecture of the Morrison's OrderPad. The connector between the client component, executing in the Pad, and the server component, executing in the OrderPadDatabase	\N
767	LogicAccessTransactionScriptDomainObjects	784	When the domain logic is organized using a Transaction Script pattern the domain objects	\N
783	LogicAccessTransactionScriptDomainObjects	784	When the domain logic is organized using a Transaction Script pattern the domain objects	\N
760	OrderPadIterative	785	Consider the architecture of the Morrison's OrderPad. In the description of the system can be read:\n    \n    \\begin{quote}\n        One of these was using a file-transfer to send data to the mainframe rather than MQ, which wouldn't perform well once many stores were active.\n    \\end{quote}\n    \n    This approach means that	\N
781	OrderPadIterative	785	Consider the architecture of the Morrison's OrderPad. In the description of the system can be read:\n    \n    \\begin{quote}\n        One of these was using a file-transfer to send data to the mainframe rather than MQ, which wouldn't perform well once many stores were active.\n    \\end{quote}\n    \n    This approach means that	\N
752	SilkConnections	786	When comparing Amazon Silk with Google Chrome	\N
754	ThousandParsecModule	787	Consider the architectural views for the ThousandParsec system. The following diagram depicts a fragment of a proposal for the decomposition view of the system. The ThousandParsec protocol\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{x-ThousandParsec-ruleset}\n    \\end{center}	\N
780	ThousandParsecModule	787	Consider the architectural views for the ThousandParsec system. The following diagram depicts a fragment of a proposal for the decomposition view of the system. The ThousandParsec protocol\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{x-ThousandParsec-ruleset}\n    \\end{center}	\N
761	SocialCalcRemoteCursor	788	Consider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the client Spreadsheet. It can be read in the case description: \\emph{A simple improvement is for each client to broadcast its cursor position to other users, so everyone can see which cells are being worked on.}\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{x-SocialCalc-cc-client}\n    \\end{center}	\N
782	SocialCalcRemoteCursor	788	Consider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the client Spreadsheet. It can be read in the case description: \\emph{A simple improvement is for each client to broadcast its cursor position to other users, so everyone can see which cells are being worked on.}\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{x-SocialCalc-cc-client}\n    \\end{center}	\N
766	LogicAccessTransactionScript	794	When the domain logic is organized using a Transaction Script pattern the most suitable data source patterns are	\N
793	LogicAccessTransactionScript	794	When the domain logic is organized using a Transaction Script pattern the most suitable data source patterns are	\N
757	OrderPadPortability	795	Consider the architecture of the Morrison's OrderPad. The decision between the use of a Native application or HTML5 on the implementation of the client in the Pad	\N
791	OrderPadPortability	795	Consider the architecture of the Morrison's OrderPad. The decision between the use of a Native application or HTML5 on the implementation of the client in the Pad	\N
750	SilkPredictor	796	When comparing Amazon Silk with Google Chrome in the context of the prediction of pages the user is going to access	\N
789	SilkPredictor	796	When comparing Amazon Silk with Google Chrome in the context of the prediction of pages the user is going to access	\N
762	SocialCalcServer	797	Consider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the system. According to this representation\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{x-SocialCalc-cc}\n    \\end{center}	\N
792	SocialCalcServer	797	Consider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the system. According to this representation\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{x-SocialCalc-cc}\n    \\end{center}	\N
755	ThousandParsecTPConnector	798	Consider the architectural views for the ThousandParsec system. The following diagram depicts a proposal of application-specific types for the architectural components, where the names of the ports are missing. Between the GameClient and GameServer components\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{x-ThousandParsec-cc}\n    \\end{center}	\N
790	ThousandParsecTPConnector	798	Consider the architectural views for the ThousandParsec system. The following diagram depicts a proposal of application-specific types for the architectural components, where the names of the ports are missing. Between the GameClient and GameServer components\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{x-ThousandParsec-cc}\n    \\end{center}	\N
759	OrderPadMainframeConnector	804	Consider the architecture of the Morrison's OrderPad. The final interaction between the OrderPadDatabase component and Mainframe component is supported by	\N
801	OrderPadMainframeConnector	804	Consider the architecture of the Morrison's OrderPad. The final interaction between the OrderPadDatabase component and Mainframe component is supported by	\N
765	LogicAccessDomainModel	805	When the domain logic is organized using a Domain Model pattern the most suitable data source patterns are	\N
803	LogicAccessDomainModel	805	When the domain logic is organized using a Domain Model pattern the most suitable data source patterns are	\N
751	SilkCaching	806	When comparing Amazon Silk with Google Chrome	\N
799	SilkCaching	806	When comparing Amazon Silk with Google Chrome	\N
753	ThousandParsecAI	807	Consider the architectural views for the ThousandParsec system. The following diagram depicts a fragment of a proposal for the decomposition view of the system. The AI players should be described\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{x-ThousandParsec-ruleset}\n    \\end{center}	\N
800	ThousandParsecAI	807	Consider the architectural views for the ThousandParsec system. The following diagram depicts a fragment of a proposal for the decomposition view of the system. The AI players should be described\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{x-ThousandParsec-ruleset}\n    \\end{center}	\N
763	SocialCalcParser	808	Consider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the client Spreadsheet. A \\textsc{Parser} module is used when loading a file\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{x-SocialCalc-cc-client}\n    \\end{center}	\N
802	SocialCalcParser	808	Consider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the client Spreadsheet. A \\textsc{Parser} module is used when loading a file\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{x-SocialCalc-cc-client}\n    \\end{center}	\N
819	ContinousIntegrationScenariosTacticsOne	839	In the Continous integration case study can be read about Jenkins\n      \n      \\begin{quote}\n          It takes advantage of the JUnit XML standard for unit test and code coverage reporting to integrate reports from a variety of test tools. Jenkins originated with Sun, but is very widely used and has a robust open-source community associated with it.\n      \\end{quote}\n      \n      Consider that a scenario is written from the above sentence	\N
6	ModificabilidadeCamadas	1445	In a layered architecture composed by four layers, where the topmost\n  layer is the layer number 1 and the bottommost layer is the layer\n  number 4, which of the layers is more modifiable?	\N
1	VistasDesempenho	852	Suppose that there are certain performance requirements for a\n  system, and that you want to show to the stakeholders of the system\n  that the software architecture that you designed meet those\n  requirements.  To do this	\N
830	nginxOne	857	Web servers implemented in Java, such as the Tomcat web server,\n  typically use a thread-based model for processing requests.  That\n  is, they process each request on a different thread within the same\n  JVM process, rather than on a different process.  One of the reasons\n  for this is that	\N
58	WebDoisINGLES	954	With the evolution of the web application technologies, it is now\n    possible to develop web applications with a user interface similar\n    to the interface of desktop applications.  Yet, for this to\n    happen, part of the code that was executing in the web server is\n    now executing in the web browser.  How does this change manifests\n    in the software architecture of the system?	\N
224	UsesStyle	1187	To achieve a faster time-to-market, software companies are\n  increasingly using a strategy of incremental releases of their\n  software, where each new release has a set of new features.  Which\n  architectural style is better to analyse whether the system's\n  software architecture is adequate for the planned incremental\n  releases?	\N
820	InfinispanScenariosTacticsOne	840	In the Infinispan case study can be read\n      \n      \\begin{quote}\n          When persisting for durability, persistence can either be online, where the application thread is blocked until data is safely written to disk, or offline, where data is flushed to disk periodically and asynchronously. In the latter case, the application thread is not blocked on the process of persistence, in exchange for uncertainty as to whether the data was successfully persisted to disk at all.\n      \\end{quote}\n      \n      From the description we can infer a trade-off between the qualities of	\N
834	MicroservicesArchitectureOne	842	Consider the following figure depicting two different architectures for web applications\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{../Microservices}\n    \\end{center}	\N
835	AmazonOne	843	Consider the following excerpt about the Amazon system\n    \n    \\begin{quote}\n        Over time, this grew into hundreds of services and a number of application servers that aggregate the information from the services. The application that renders the Amazon.com Web pages is one such application server, but so are the applications that serve the Web-services interface, the customer service application, the seller interface, and the many third-party Web sites that run on our platform.\n    \\end{quote}\n    \n    The architectural style that better represents these aspects of the Amazon architecture is	\N
821	DesigningArchitectureOne	844	According to the attribute-driven design process, we should design\n    the software architecture for a system based on a selected list of\n    requirements, which are called the \\textit{architecture significant requirements}.\n    These requirements should be sorted according to their\n    importance for the system's stakeholders because	\N
815	AvailabilityOne	848	There are several tactics to satisfy availability requirements,\n    which may be applied depending on the concrete requirement that we\n    want to satisfy.  Assuming that you want to deal with faults of type\n    \\emph{omission} in your system, which tactic is more adequate?	\N
818	NginxScenariosTacticsOne	851	Consider the following excerpt from Nginx case study\n\n    \\begin{quote}\n        nginx configuration is kept in a number of plain text files which typically reside in /usr/local/etc/nginx or /etc/nginx. The main configuration file is usually called nginx.conf.         To keep it uncluttered, parts of the configuration can be put in separate files which can be automatically included in the main one. However, it should be noted here that nginx         does not currently support Apache-style distributed configurations (i.e., .htaccess files). All of the configuration relevant to nginx web server behavior should reside in a         centralized set of configuration files.\n    \\end{quote}\n    \n    When comparing the configuration in Nginx with the configuration in Apache we can say that	\N
825	ComponentConnectorOne	852	Suppose that there are certain performance requirements for a\n  system, and that you want to show to the stakeholders of the system\n  that the software architecture that you designed meet those\n  requirements. To do this	\N
40	TempoRespostaAplicacaoEmpresarialINGLES	853	Suppose that you are designing the software architecture for an\n    enterprise application that has requirements about the maximum\n    response time for a certain type of requests.  Moreover, assume\n    that those requests arrive at the system periodically, whereas the\n    remaining requests have an unpredictable frequency.  Finally,\n    assume that your system will have a single server that will be\n    executing on a predefined machine with a 12-core AMD processor.\n    To show to the stakeholders that your system satisfies the\n    performance requirements you have to use views of which\n    architectural style?	\N
826	RepositoryClientServerOne	853	Suppose that you are designing the software architecture for an\n    enterprise application that has requirements about the maximum\n    response time for a certain type of requests.  Moreover, assume\n    that those requests arrive at the system periodically, whereas the\n    remaining requests have an unpredictable frequency.  Finally,\n    assume that your system will have a single server that will be\n    executing on a predefined machine with a 12-core AMD processor.\n    To show to the stakeholders that your system satisfies the\n    performance requirements you have to use views of which\n    architectural style?	\N
828	SOAPipesFiltersOne	855	Imagine that you want to develop a system that is to be used in email servers, whose goal\n      is to allow changing the emails that are received by the server (for example, to remove\n      potential viruses or URLs linking to phishing sites). The goal is that the server feeds each\n      received email through this system before processing it (e.g., forward it to another server,\n      or store it locally). The system is supposed to be easily modifiable, to support new types\n      of email transformations. Which architectural style is the most adequate to satisfy these\n      requirements?	\N
822	ModuleViewtypeOne	1026	Consider the Decomposition architectural style of the Module viewtype	\N
827	TiersDynamicreconfigurationPeertopeerPublishsubscribeOne	1300	Typically, Instant Messaging clients have a window to list the contacts of the user, and\n      show in that window the status of each contact (whether it is available, unavailable, busy,\n      etc). Given that the status of a contact may be changed at any time, and that the contact's\n      status is given by the Instant Messaging application of that contact, which architectural\n      style represents best the interaction pattern between these components?	\N
206	SixthEEEN	1187	To achieve a faster time-to-market, software companies are\n  increasingly using a strategy of incremental releases of their\n  software, where each new release has a set of new features.  Which\n  architectural style is better to analyse whether the system's\n  software architecture is adequate for the planned incremental\n  releases?	\N
823	UsesGeneralizationOne	1187	To achieve a faster time-to-market, software companies are\n  increasingly using a strategy of incremental releases of their\n  software, where each new release has a set of new features.  Which\n  architectural style is better to analyse whether the system's\n  software architecture is adequate for the planned incremental\n  releases?	\N
831	ContinousIntegrationViewsOne	858	Consider the following architectural view of the Pony-Build system as described in the Continous integration case study\n      \n    \\begin{center}\n        \\includegraphics[width=100mm]{../PonyBuildArchitecture}\n    \\end{center}\n    \n    According to this view the quality of performance is achieved through	\N
832	InfinispanViewsOne	859	In the Infinispan case study can be read\n      \n      \\begin{quote}\n         Infinispan's core data structures make use of software transactional memory techniques for concurrent access to shared data. This minimizes the need for explicit locks, mutexes and other forms of synchronization, preferring techniques like compare-and-set operations within a loop to achieve correctness when updating shared data structures. Such techniques have been proven to improve CPU utilization in multi-core and SMP systems, and despite the increased code complexity, has paid off in overall performance when under load.\n      \\end{quote}\n      \n      These properties of Infinispan can be represented by	\N
836	ScalableArchitectureOne	860	Consider the following excerpt about the Scalable web architecture and distributed systems case study about two different possible implementations of a global cache\n    \n    \\begin{quote}\n         The majority of applications leveraging global caches tend to use the first type, where the cache itself manages eviction and fetching data to prevent a flood of requests for the same data from the clients. However, there are some cases where the second implementation makes more sense. For example, if the cache is being used for very large files, a low cache hit percentage would cause the cache buffer to become overwhelmed with cache misses; in this situation it helps to have a large percentage of the total data set (or hot data set) in the cache.     \\end{quote}	\N
837	GraphiteScenarioTacticsOne	861	In the Graphite system the component \\emph{carbon} provides to \\emph{webapp} components an access interface to the \\emph{buffers} in order to improve the quality of	\N
809	ArchitectureInfluenceCycleOne	863	Consider the following sentence by Melvin Conways, also known as Conway's Law\n    \n    \\begin{quote}\n        organizations which design systems ... are constrained to produce designs which are copies of the communication structures of these organizations\n    \\end{quote}	\N
810	AdventureBuilderOne	864	Consider the following architectural view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{../AdventureBuilderDeployment}\n    \\end{center}\n    \n    According to this view the stakeholders can see that the Adventure Builder system	\N
811	RequirementsOne	865	Frank Buschmann cites the characterization Marquardt does of Performitis:\n        \n    \\begin{quote}\n        Each part of the system is directly influenced by local performance tuning measures. There is no global performance strategy, or it ignores other qualities of the system as testability and maintainability.\n    \\end{quote}\n    \n    From this problem you can conclude that:	\N
814	ModuleComponentOne	868	Consider the Figure that describes the use of\n    caches in web services.  \n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{../RequestNodeCache}\n    \\end{center}\n    \n    In that Figure, there is a\n    rectangle with the name \\emph{Cache} within another rectangle with\n    the name \\emph{Request Node}.  Taking into account the description\n    made in the text and the goal of that Figure, those rectangles\n    correspond to which type of software elements?	\N
215	ModuleComponent	914	Which of the following phrases best describe the relationship\n  between modules and components?	\N
875	AvailabilityTwo	921	There are several tactics to satisfy availability requirements,\n    which may be applied depending on the concrete requirement that we\n    want to satisfy.  Assuming that you want to detect faults of type\n    \\emph{response} in your system, which tactic is more adequate?	\N
349	CreateArchitectureOne	926	During the different steps on how to create an architecture, the precise specification of architecture quality attributes is initially relevant to	\N
355	CreateArchitectureOne	926	During the different steps on how to create an architecture, the precise specification of architecture quality attributes is initially relevant to	\N
812	ArchitectureDefinitionOne	1115	Consider that a software development team uses an agile methodology\n        such as XP (Extreme Programming), where no documentation is\n        produced.  Then, the systems developed by that team	\N
813	ScenariosTacticsOne	1174	As part of the process of creating an architecture, we talked about\n  a framework for capturing some of the requirements for a system.  In\n  this context, \\textbf{concrete scenarios} are used for	\N
838	GraphiteViewsOne	1268	In Graphite system  the \\emph{receiver} and the \\emph{writer threads} support asynchronous writing of metrics to optimize disk accesses. The interaction between these two components follow the architectural style	\N
892	ContinousIntegrationViewsTwo	902	In the Continous integration case study can be read about future features for Pony-Build\n      \n      \\begin{quote}\n          Currently, each continuous integration system reinvents the wheel by providing its own build configuration language, which is manifestly ridiculous; there are fewer than a dozen commonly used build systems, and probably only a few dozen test runners. Nonetheless, each CI system has a new and different way of specifying the build and test commands to be run. In fact, this seems to be one of the reasons why so many basically identical CI systems exist: each language and community implements their own configuration system, tailored to their own build and test systems, and then layers on the same set of features above that system. Therefore, building a domain-specific language (DSL) capable of representing the options used by the few dozen commonly used build and test tool chains would go a long way toward simplifying the CI landscape.\n      \\end{quote}\n      \n      Suppose that you are the architect that has to change the architecture to accomodate this new feature. Therefore, as an architect	\N
893	InfinispanViewsTwo	903	In the Infinispan case study can be read\n      \n      \\begin{quote}\n         Infinispan uses its own serialization scheme, where full class definitions are not written to the stream. Instead, magic numbers are used for known types where each known type is represented by a single byte. This greatly improves not just serialization and de-serialization speed qualities, but also produces a much more compact byte stream for transmission across a network. An externalizer is registered for each known data type, registered against a magic number. This externalizer contains the logic to convert object to bytes and vice versa.\n      \\end{quote}\n      \n      These properties of Infinispan can be represented by	\N
59	MashupsINGLES	904	One of the evolutions in the development of web applications was\n    the appearance of \\emph{mashups}, which are described in Wikipedia\n    as follows:\n\n    \\begin{quote}\n      In web development, a mashup is a web page or application that\n      uses and combines data, presentation or functionality from two\n      or more sources to create new services.\n    \\end{quote}\n\n    Knowing that the sources used by \\emph{mashups} do not know about\n    the existence of the \\emph{mashups} and that they change\n    frequently, forcing the adaptation of the \\emph{mashups} to\n    accomodate those changes, what is the best architecture to\n    minimize the effects of those changes?	\N
894	WebTwoTwo	904	One of the evolutions in the development of web applications was\n    the appearance of \\emph{mashups}, which are described in Wikipedia\n    as follows:\n\n    \\begin{quote}\n      In web development, a mashup is a web page or application that\n      uses and combines data, presentation or functionality from two\n      or more sources to create new services.\n    \\end{quote}\n\n    Knowing that the sources used by \\emph{mashups} do not know about\n    the existence of the \\emph{mashups} and that they change\n    frequently, forcing the adaptation of the \\emph{mashups} to\n    accomodate those changes, what is the best architecture to\n    minimize the effects of those changes?	\N
895	MicroservicesArchitectureTwo	905	Consider the following figure depicting two different architectures for web applications\n    \n    \\begin{center}\n        \\includegraphics[width=140mm]{../Microservices}\n    \\end{center}	\N
896	AmazonTwo	906	Consider the following excerpt about the Amazon system\n    \n    \\begin{quote}\n        Mainly, I think service orientation has helped us there. The stored data formats are decoupled from the format in which you communicate data items. If there is no need for sharing schemas of the actual storage layout, you can focus on making sure that the service interfaces can evolve in a way that allows you to handle variations of data formats. You could dictate a rigorous single format, but that would not be realistic if you are in Amazon's platform business. We have to make sure that the platform can be extended by our customers to meet their needs.\n    \\end{quote}\n    \n    The architectural style that better represents these aspects of the Amazon architecture is	\N
890	nginxTwo	950	In Nginx, given that a \\emph{worker} processes various requests during its\n    life, how does it do it?	\N
876	ModifiabilityTwo	1005	Consider the following scenario: \\emph{A system administrator simultaneously launches several instances of the system, each one using a different database, and is able to do it in less than 10 minutes.}	\N
889	AllocationTwo	1066	Consider the deployment architectural style of the allocation viewtype.	\N
897	ScalableArchitectureTwo	907	Consider the following excerpt about the Scalable web architecture and distributed systems case study\n    \n    \\begin{quote}\n         Employing such a strategy maximizes data locality for the requests, which can result in decreased request latency. For example, let's say a bunch of nodes request parts of B: partB1, partB2, etc. We can set up our proxy to recognize the spatial locality of the individual requests, collapsing them into a single request and returning only bigB, greatly minimizing the reads from the data origin.\n    \\end{quote}\n    \n    The quality that is achieved with this tactic is	\N
7	UtilidadeArquitectura	910	Designing the software architecture for a complex system	\N
869	ArchitectureInfluenceCycleTwo	910	Designing the software architecture for a complex system	\N
870	RequirementsTwo	911	The architecturally significant requirements are important in the process of creating\n  the software architecture for a system because they are	\N
872	AdventureBuilderTwo	913	Consider the following architectural view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{../AdventureBuilderComponentConector}\n    \\end{center}\n    \n    In this component-and-connector view the interactions the interactions between components follow the architectural style(s)	\N
207	SeventhEEEN	914	Which of the following phrases best describe the relationship\n  between modules and components?	\N
873	ModuleComponentTwo	914	Which of the following phrases best describe the relationship\n    between modules and components?	\N
874	ScenariosTacticsTwo	915	General scenarios play an important role in the development of a software architecture\n    because	\N
883	UsesGeneralizationTwo	916	Suppose that in the process of designing a system's software architecture you come to\n    the conclusion that there are uses relations in both directions in almost all of the system's\n    modules. This means that	\N
89	ArqEmailMTAIMAPINGLES	919	The email system is composed of various types of components\n    playing different roles.  For example, to send an email, a user\n    uses a \\emph{mail user agent} (MUA), to compose his message and\n    send it.  To send the message, the MUA typically connects to a\n    \\emph{mail transfer agent} (MTA) that receives the message,\n    analyzes the message's headers to determine the recipients and,\n    after querying the DNS system to determine the MTA responsible for\n    each recipient, it connects to the MTAs responsible for the\n    destination addresses to deliver the message.  Each of these MTAs\n    receives the message and stores it locally or forwards it to\n    others MTAs until the message reaches its destination MTA.\n    The recipient user of the message will then use his MUA to see the\n    messages that were sent to him.  To do it, the MUA connects to an\n    IMAP or POP server to obtain the user's messages.  Those IMAP and\n    POP servers obtain the messages for a user by reading the messages\n    stored by the MTA.\n\n    Given this simplified description of the operation of the email\n    system, which of the following architectural styles is more\n    appropriate to represent the pattern of interaction between the\n    MTA and the servers IMAP and POP?	\N
886	RepositoryClientServerTwo	919	The email system is composed of various types of components\n    playing different roles.  For example, to send an email, a user\n    uses a \\emph{mail user agent} (MUA), to compose his message and\n    send it.  To send the message, the MUA typically connects to a\n    \\emph{mail transfer agent} (MTA) that receives the message,\n    analyzes the message's headers to determine the recipients and,\n    after querying the DNS system to determine the MTA responsible for\n    each recipient, it connects to the MTAs responsible for the\n    destination addresses to deliver the message.  Each of these MTAs\n    receives the message and stores it locally or forwards it to\n    others MTAs until the message reaches its destination MTA.\n    The recipient user of the message will then use his MUA to see the\n    messages that were sent to him.  To do it, the MUA connects to an\n    IMAP or POP server to obtain the user's messages.  Those IMAP and\n    POP servers obtain the messages for a user by reading the messages\n    stored by the MTA.\n\n    Given this simplified description of the operation of the email\n    system, which of the following architectural styles is more\n    appropriate to represent the pattern of interaction between the\n    MTA and the servers IMAP and POP?	\N
53	HadoopMapReduceINGLES	920	Consider the following excerpt from the tutorial on the Hadoop\n    MapReduce:\n\n    \\begin{quote}\n      Hadoop MapReduce is a software framework for easily writing\n      applications which process vast amounts of data (multi-terabyte\n      data-sets) in-parallel on large clusters (thousands of nodes) of\n      commodity hardware in a reliable, fault-tolerant manner.\n\n      A MapReduce job usually splits the input data-set into\n      independent chunks which are processed by the map tasks in a\n      completely parallel manner.  The framework sorts the outputs of\n      the maps, which are then input to the reduce tasks. Typically\n      both the input and the output of the job are stored in a\n      file-system.  The framework takes care of scheduling tasks,\n      monitoring them and re-executes the failed tasks.\n    \\end{quote}\n\n    Which architectural style of the component-and-connector viewtype\n    is more adequate to describe how the MapReduce works, taking into\n    account its main advantages in solving a problem?	\N
887	TiersDynamicreconfigurationPeertopeerPublishsubscribeTwo	920	Consider the following excerpt from the tutorial on the Hadoop\n    MapReduce:\n\n    \\begin{quote}\n      Hadoop MapReduce is a software framework for easily writing\n      applications which process vast amounts of data (multi-terabyte\n      data-sets) in-parallel on large clusters (thousands of nodes) of\n      commodity hardware in a reliable, fault-tolerant manner.\n\n      A MapReduce job usually splits the input data-set into\n      independent chunks which are processed by the map tasks in a\n      completely parallel manner.  The framework sorts the outputs of\n      the maps, which are then input to the reduce tasks. Typically\n      both the input and the output of the job are stored in a\n      file-system.  The framework takes care of scheduling tasks,\n      monitoring them and re-executes the failed tasks.\n    \\end{quote}\n\n    Which architectural style of the component-and-connector viewtype\n    is more adequate to describe how the MapReduce works, taking into\n    account its main advantages in solving a problem?	\N
871	ArchitectureDefinitionTwo	1205	The software architecture of a system	\N
891	GraphiteViewsTwo	1276	A high-level component-and-connect view of Graphite system can be designed using only the architectural style(s)	\N
885	ComponentConnectorTwo	1266	The connectors on component-and-connector view	\N
877	NginxScenariosTacticsTwo	923	Web servers typically receive requests from different users\n  concurrently (that is, either different users make requests\n  simultaneously or they make them fast enough that it is not possible\n  for the web server to answer one request from one user before\n  receiving another request from another user).  To process all the\n  requests, web servers may use different implementation strategies.\n  Assuming that we want to develop a web server to serve only static\n  pages with more or less the same size to a set of clients on the\n  same LAN network as the server, which of the following strategies\n  would be better?	\N
927	ContinousIntegrationScenariosTacticsTwo	940	In the Continous integration case study can be read about Jenkins\n      \n      \\begin{quote}\n          It takes advantage of the JUnit XML standard for unit test and code coverage reporting to integrate reports from a variety of test tools. Jenkins originated with Sun, but is very widely used and has a robust open-source community associated with it.\n      \\end{quote}\n      \n      The quality of Jenkins that is emphasized in the above sentence is	\N
833	WebTwoOne	954	With the evolution of the web application technologies, it is now\n    possible to develop web applications with a user interface similar\n    to the interface of desktop applications.  Yet, for this to\n    happen, part of the code that was executing in the web server is\n    now executing in the web browser.  How does this change manifests\n    in the software architecture of the system?	\N
934	GeneralScenario	964	A general scenario for a quality attribute	\N
962	GeneralScenario	964	A general scenario for a quality attribute	\N
935	OmissionRetry	965	Considering the availability architectural quality, the tactic of retry	\N
963	OmissionRetry	965	Considering the availability architectural quality, the tactic of retry	\N
959	PragmaticArchitect	966	According to Frank Buschmann in the article \\emph{Introducing the Pragmatic Architect}	\N
960	EarlydDecisions	967	In his article \\emph{Who Needs an Architect?} Martin Fowler refers to the following architecture definition\n        \n    \\begin{quote}\n        \\emph{architecture is the set of design decisions that must be made early in a project}\n    \\end{quote}	\N
961	ImageHostingPerformance	968	Consider the following informal view of an Image Hosting System\n    \n\\begin{center}\n    \\includegraphics[width=100mm]{ImageHostingPerformance}\n\\end{center}	\N
973	PingEchoHeartbeat	974	Considering the availability architectural quality and the tactics of ping/echo and heartbeat	\N
929	ArchitecturalInfluenceCycle	975	Suppose that after designing a successful architecture for a particular client the software house management decides to create a cross-functional internal department to start providing products for this particular segment of the market.	\N
969	ArchitecturalInfluenceCycle	975	Suppose that after designing a successful architecture for a particular client the software house management decides to create a cross-functional internal department to start providing products for this particular segment of the market.	\N
971	ImageHostingScalability	976	Consider the following informal view of an Image Hosting System\n    \n\\begin{center}\n    \\includegraphics[width=100mm]{ImageHostingScalability}\n\\end{center}	\N
931	SharedUnderstanding	977	In his article \\emph{Who Needs an Architect?} Martin Fowler refers to the following architecture definition\n        \n    \\begin{quote}\n        \\emph{the expert developers working on that project have a shared understanding of the system design}\n    \\end{quote}	\N
970	SharedUnderstanding	977	In his article \\emph{Who Needs an Architect?} Martin Fowler refers to the following architecture definition\n        \n    \\begin{quote}\n        \\emph{the expert developers working on that project have a shared understanding of the system design}\n    \\end{quote}	\N
930	InteroperabilityStimulus	978	In a scenario for interoperability	\N
972	InteroperabilityStimulus	978	In a scenario for interoperability	\N
957	ImageHostingReads	984	Consider the following informal view of an Image Hosting System\n    \n\\\\begin{center}\n        \\includegraphics[width=100mm]{ImageHostingReads}\n\\end{center}	\N
980	ASDefinition	987	The definition of software architecture, on the course book, is\n    \\begin{quote}\n        \\emph{The software architecture of a system is the set of structures needed to reason about the system, which comprise software elements, relations among them, and properties of both.}\n    \\end{quote}\n    \n    According to this definition	\N
983	RestartInRedundancy	988	Considering the availability architectural quality and the tactics of active redundancy, passive redundancy, and spare	\N
824	LayeredAspectsDataModelOne	1445	In a layered architecture composed by four layers, where the topmost\n  layer is the layer number 1 and the bottommost layer is the layer\n  number 4, which of the layers is more modifiable?	\N
847	LayeredAspectsDataModelOne	1445	In a layered architecture composed by four layers, where the topmost\n  layer is the layer number 1 and the bottommost layer is the layer\n  number 4, which of the layers is more modifiable?	\N
982	RequirementsImpact	1116	The requirements impact on how an architecture is designed	\N
882	ModuleViewtypeTwo	1315	Consider the Uses architectural style of the Module viewtype	\N
993	NginxOne	994	Consider the following fragment in the description of the nginx case study.\n    \n    \\begin{quote}\n        nginx's configuration system was inspired by Igor Sysoev's experiences with Apache. His main insight was that a scalable configuration system is essential for a web server. The main scaling problem was encountered when maintaining large complicated configurations with lots of virtual servers, directories, locations and datasets. In a relatively big web setup it can be a nightmare if not done properly both at the application level and by the system engineer himself.\n    \\end{quote}	\N
991	BusinessToDesignOne	995	The Attribute-Driven Design method is characterized by	\N
992	GraphiteOne	997	Consider the following fragment in the description of the Graphite system:\n    \n    \\begin{quote}\n        The Graphite webapp allows users to request custom graphs with a simple URL-based API. Graphing parameters are specified in the query-string of an HTTP GET request, and a PNG image is returned in response. \n    \\end{quote}	\N
936	ModifiabilityOne	998	The modifiability tactic Use an Intermediary between two modules	\N
990	ModifiabilityOne	998	The modifiability tactic Use an Intermediary between two modules	\N
922	ModifiabilityTwo	1005	Consider the following scenario: \\emph{A system administrator simultaneously launches several instances of the system, each one using a different database, and is able to do it in less than 10 minutes.}	\N
878	PerformanceTwo	1008	The two basic contributors for the response time are the processing time and the blocking time. Which tactic for performance may reduce the blocking time	\N
925	PerformanceTwo	1008	The two basic contributors for the response time are the processing time and the blocking time. Which tactic for performance may reduce the blocking time	\N
1011	BusinessToDesignThree	1014	It was decided that the Fénix system should be based on open-source software.	\N
1012	GraphiteThree	1015	Consider the following fragment in the description of the Graphite system:\n    \n    \\begin{quote}\n        Imagine that you have 60,000 metrics that you send to your Graphite server, and each of these metrics has one data point per minute. Remember that each metric has its own whisper file on the filesystem. This means carbon must do one write operation to 60,000 different files each minute. As long as carbon can write to one file each millisecond, it should be able to keep up. This isn't too far fetched, but let's say you have 600,000 metrics updating each minute, or your metrics are updating every second, or perhaps you simply cannot afford fast enough storage. Whatever the case, assume the rate of incoming data points exceeds the rate of write operations that your storage can keep up with. How should this situation be handled?\n    \\end{quote}	\N
1009	PerformanceThree	1016	Jeff Atwood wrote an article in its blog about performance of software systems that is entitled, \\emph{Hardware is Cheap, Programmers are Expensive}. Which performance tactic(s) is he suggesting	\N
1013	NginxThree	1017	In the description of the nginx case study we can read:\n    \n    \\begin{quote}\n        nginx's modular architecture generally allows developers to extend the set of web server features without modifying the nginx core. nginx modules come in slightly different incarnations, namely core modules, event modules, phase handlers, protocols, variable handlers, filters, upstreams and load balancers. At this time, nginx doesn't support dynamically loaded modules; i.e., modules are compiled along with the core at build stage.\n    \\end{quote}\n    \n    The above sentence corresponds to	\N
1010	ModifiabilityThree	1018	Consider the modifiability quality and the cost of change.	\N
1023	CCStyleOne	1024	When describing their system people refer to a part of it as containing a database server. Applying the component-and-connector styles learned in the course we can say that this system uses	\N
1020	ContinuousIntegrationOne	1025	In the Continuous Integration case study can be read\n    \n    \\begin{quote}\n        The space of architectures for continuous integration systems seems to be dominated by two extremes: master/slave architectures, in which a central server directs and controls remote builds; and reporting architectures, in which a central server aggregates build reports contributed by clients. All of the continuous integration systems of which we are aware have chosen some combination of features from these two architectures.\n    \\end{quote}\n    \n    The tactic that is referred in both architectures is	\N
1019	ModuleViewtypeOne	1026	Consider the Decomposition architectural style of the Module viewtype	\N
1021	InfinispanOne	1027	The Infinispan system can be used as a library, in which case it is embedded into a Java application, or as a server, in which case it is a remote data grid.	\N
1022	ComponentAndConnectorOne	1028	Consider the Component-and-Connector viewtype	\N
1033	CCStyleTwo	1035	Consider the peer-to-peer architectural style	\N
1030	ContinuousIntegrationTwo	1037	In the Continuous Integration case study can be read\n    \n    \\begin{quote}\n        External resource coordination: Integration tests may depend on non-local resources such as a staging database or a remote web service. The CI system may therefore need to coordinate builds between multiple machines to organize access to these resources.\n    \\end{quote}\n    \n    The referred tactic is	\N
817	PerformanceOne	1237	Consider a scenario for performance where the arrival of events is stochastic with a distribution where there are peeks of events but the arrival of events over a long period is uniform. The best tactic to apply is	\N
941	InfinispanTwoOne	1038	In the Infinispan case study can be read\n    \n    \\begin{quote}\n        This allows applications to theoretically address an unlimited amount of in-memory storage as nodes are added to the cluster, increasing overall capacity.\n    \\end{quote}\n    \n    The quality that is referred is	\N
1031	InfinispanTwo	1038	In the Infinispan case study can be read\n    \n    \\begin{quote}\n        This allows applications to theoretically address an unlimited amount of in-memory storage as nodes are added to the cluster, increasing overall capacity.\n    \\end{quote}\n    \n    The quality that is referred is	\N
1042	ComponentAndConnectorThree	1044	Consider the two following views\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{pipes-and-filters}\n    \\end{center}	\N
1041	InfinispanThree	1045	In the Infinispan case study can be read\n    \n    \\begin{quote}\n        Before putting data on the network, application objects need to be serialized into bytes so that they can be pushed across a network, into the grid, and then again between peers. The bytes then need to be de-serialized back into application objects, when read by the application. In most common configurations, about 20\\% of the time spent in processing a request is spent in serialization and de-serialization.\n    \\end{quote}\n    \n    The above description can motivate a scenario for	\N
1043	CCStyleThree	1046	Consider the shared-data style. Which of the following qualities does it support?	\N
1040	ContinuousIntegrationThree	1047	In the Continuous Integration case study can be read\n    \n    \\begin{quote}\n        It takes advantage of the JUnit XML standard for unit test and code coverage reporting to integrate reports from a variety of test tools.\n    \\end{quote}\n    \n    The referred quality is	\N
1052	MicroAndAmazonOne	1054	Consider the following distinction between Monoliths and Microservices made by Matin Fowler\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{MonolithsVsMicroservices}\n    \\end{center}\n    \n    If we try to map this figure into a set of views we will need.	\N
1051	InfinispanOne	1056	Consider the Infinispan system when it is configured as a remote data grid. The relation between the Applications and the Grid is	\N
1053	JenkinsOne	1057	Consider the following representation of the Buildbot system.\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{BuildbotArchitecture}\n    \\end{center}\n    \n    The architecture style between the Buildbot Master and the Clients is:	\N
1049	ComponentAndConnectorOne	1058	Consider the Service-Oriented Architecture architectural style	\N
1060	InfinispanTwo	1064	In the description of Infinispan system can be read\n    \n    \\begin{quote}\n        Infinispan supports several pluggable cache stores-adapters that can be used to persist data to disk or any form of secondary storage. The current default implementation is a simplistic hash bucket and linked list implementation, where each hash bucket is represented by a file on the filesystem. While easy to use and configure, this isn't the best-performing implementation.\n    \\end{quote}\n    \n    The architectural style(s) that should be used to illustrate the sentence is (are)	\N
1061	AllocationTwo	1066	Consider the deployment architectural style of the allocation viewtype.	\N
951	JenkinsTwo	1067	In the Continuous Integration case can be read\n    \\begin{quote}\n        Build notification: The outcomes of builds generally need to be communicated to interested clients, either via pull (Web, RSS, RPC, etc.) or push notification (e-mail, Twitter, etc.) This can include notification of all builds, or only failed builds, or builds that haven't been executed within a certain period.\n    \\end{quote}\n        The architectural style used in push notifications is	\N
1063	JenkinsTwo	1067	In the Continuous Integration case can be read\n    \\begin{quote}\n        Build notification: The outcomes of builds generally need to be communicated to interested clients, either via pull (Web, RSS, RPC, etc.) or push notification (e-mail, Twitter, etc.) This can include notification of all builds, or only failed builds, or builds that haven't been executed within a certain period.\n    \\end{quote}\n        The architectural style used in push notifications is	\N
1062	MicroAndAmazonTwo	1068	Consider the following representation of Amazon's architecture (sorry for the figure's layout: \\textbf{save trees})\n            \n    \\begin{center}\n        \\includegraphics[width=80mm]{AmazonArchitecture}\n    \\end{center}\n    \n    What is the most relevant architecture style that is used in this figure?	\N
955	MicroAndAmazonThree	1074	In the interview Werner Vogels from Amazon gives to Jim Gray, Werner Vogels says that\n    \n    \\begin{quote}\n        The stored data formats are decoupled from the format in which you communicate data items. If there is no need for sharing schemas of the actual storage layout, you can focus on making sure that the service interfaces can evolve in a way that allows you to handle variations of data formats. \n    \\end{quote}\n    \n    Which means that in the software architecture of Amazon's systems	\N
1072	MicroAndAmazonThree	1074	In the interview Werner Vogels from Amazon gives to Jim Gray, Werner Vogels says that\n    \n    \\begin{quote}\n        The stored data formats are decoupled from the format in which you communicate data items. If there is no need for sharing schemas of the actual storage layout, you can focus on making sure that the service interfaces can evolve in a way that allows you to handle variations of data formats. \n    \\end{quote}\n    \n    Which means that in the software architecture of Amazon's systems	\N
1073	JenkinsThree	1075	Consider the following representation of the CDash system\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{DashArchitecture}\n    \\end{center}\n    \n    The architecture style between the Dashboard and the Clients is:	\N
1168	DomainDesignTwo	1197	Consider the following data model\n      \n      \\begin{center}\n          \\includegraphics[width=80mm]{../ProductDomainModel}\n      \\end{center}	\N
1039	ModuleViewtypeThree	1254	Consider the Layered architectural style of the Module viewtype	\N
1050	AllocationOne	1346	Consider the work assignment architectural style of the allocation viewtype.	\N
1059	ComponentAndConnectorThree	1274	Consider the following view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{AdventureBuilder-Tiers}\n    \\end{center}\n    \n    In this view the following architectural styles are used	\N
933	ComponentAndConnectorTwoOne	1076	Consider the following view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{AdventureBuilder-SOA}\n    \\end{center}\n    \n    In this view the following architectural styles are used	\N
1069	ComponentAndConnectorTwo	1076	Consider the following view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=80mm]{AdventureBuilder-SOA}\n    \\end{center}\n    \n    In this view the following architectural styles are used	\N
1070	AllocationThree	1077	Consider the install architectural style of the allocation viewtype.	\N
1071	InfinispanThree	1078	In the description of Infinispan system can be read\n    \n    \\begin{quote}\n        When dealing with thread pools to process such asynchronous tasks, there is always a context switching overhead. That threads are not cheap resources is also noteworthy. Allocating appropriately sized and configured thread pools is important to any installation making use of any of the asynchronous features of Infinispan.\n    \\end{quote}\n    \n    The architectural style that should be used to illustrate the sentence is	\N
1100	SOAINGLES	1112	In the Service Oriented Architecture style it is common to have a\n    specialized component, named \\emph{Enterprise Service Bus} (ESB).\n    The goal of using of an ESB in a system is	\N
1101	WhiteBoxTestingINGLES	1113	Consider the following excerpt from the Wikipedia page on\n    \\emph{white-box testing}:\n    \\begin{quote}\n      White-box testing is a method of testing software that tests\n      internal structures or workings of an application, as opposed to\n      its functionality. In white-box testing an internal perspective\n      of the system (including the module's code), as well as\n      programming skills, are required and used to design test\n      cases. The tester chooses inputs to exercise paths through the\n      code and determine the appropriate outputs.\n    \\end{quote}\n  \n    Assuming that you belong to the team testing a complex system and\n    that you are responsible for performing white box tests on the\n    system, which of the following architectural views of the system\n    would be most useful to you?	\N
1102	ArqChrome	1114	The Chromium is a web browser that introduced an innovative architecture. In the Chromium description we can read:\n \n  \\begin{quote}\n    We use separate processes for browser tabs to protect the overall\n    application from bugs and glitches in the rendering engine.  We\n    also restrict access from each rendering engine process to others\n    and to the rest of the system.  In some ways, this brings to web\n    browsing the benefits that memory protection and access control\n    brought to operating systems.\n\n    We refer to the main process that runs the UI and manages tab and\n    plugin processes as the "browser process" or "browser."  Likewise,\n    the tab-specific processes are called "render processes" or\n    "renderers."  The renderers use the WebKit open-source layout\n    engine for interpreting and laying out HTML.\n  \\end{quote}\n  \n  Which architectural style should we use to represent this aspect of Chromium?	\N
1094	AdventureBuilderThree	1123	Consider the following architectural view of the Adventure Builder system, designed around the Order Processing Center\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{../AdventureBuilderCandC}\n    \\end{center}\n    \n    The views \\textbf{does not} use the architectural style	\N
1095	AdventureBuilderFive	1124	Consider the following requirement for availability of the Adventure Builder system\n    \n    \\begin{quote}\n        The Consumer Web site sent a purchase order request to the order processing center (OPC). The OPC processed that request but didn't reply to Consumer Web site within five seconds, so the Consumer Web site resends the request to the OPC.\n    \\end{quote}\n    \n    If we represent this requirement as a scenario	\N
1096	DVDCatalogMeta	1125	Consider the module viewtype views of the DVD Catalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        The application should support other kinds of catalogs (CDs, games, books, ...). \n    \\end{quote}\n    \n    This requirement requires a change of	\N
1103	TwitterOne	1126	Consider the following description of the behavior of Twitter ingestion mechanisms\n    \n    \\begin{quote}\n        Write. when a tweet  comes in there's an O(n) process to write to Redis clusters, where n is the number of people following you. Painful for Lady Gaga and Barack Obama where they are doing 10s of millions of inserts across the cluster. All the Redis clusters are backing disk, the Flock cluster stores the user timeline to disk, but usually timelines are found in RAM in the Redis cluster.\n    \\end{quote}	\N
942	ModuleViewType	1135	The quality that is more relevant to views of the module viewtype is:	\N
884	LayeredAspectsDataModelTwo	1138	Suppose that you are implementing a module in a system that has a two layered architecture.\n     Knowing that your module belongs to the upper layer (assuming the usual notation\n     for the layer style), this means that you	\N
1098	PeerToPeerDynamicReconfiguration	1316	In the description of the Gnutella system can be read:\n    \n    \\begin{quote}\n        The topology of the system changes at runtime as peer components connect and disconnect to the network.\n    \\end{quote}	\N
1099	PipeFilterComposition	1427	The Pipe-and-Filter style allows composition of filters	\N
1104	TwitterThree	1127	Consider the following description of the behavior of Twitter\n    \n    \\begin{quote}\n        Solution is a write based fanout approach. Do a lot of processing when tweets arrive to figure out where tweets should go. This makes read time access fast and easy. Don't do any computation on reads. With all the work being performed on the write path ingest rates are slower than the read path, on the order of 4000 QPS.\n    \\end{quote}\n    \n    To describe the performance quality of this behavior, and considering that the number of reads is much higher than the number of writes, we need to have a view that includes	\N
1106	MicroAndAmazonThree	1129	In the interview Werner Vogels from Amazon gives to Jim Gray, Werner Vogels says that\n    \n    \\begin{quote}\n        The stored data formats are decoupled from the format in which you communicate data items. If there is no need for sharing schemas of the actual storage layout, you can focus on making sure that the service interfaces can evolve in a way that allows you to handle variations of data formats. \n    \\end{quote}\n    \n    Which means that in the software architecture of Amazon's systems	\N
1107	BoundedContextOne	1130	Consider the following representation of a system following a microservices architecture,\n      \n      \\begin{center}\n          \\includegraphics[width=140mm]{../MicroservicesArchitecture}\n      \\end{center}\n      \n      After an invocation through the REST API	\N
1108	DomainDesignOne	1131	Consider the following figure\n      \n      \\begin{center}\n          \\includegraphics[width=70mm]{../ProductDomainModelTwo}\n      \\end{center}	\N
1087	HadoopDisponibilidadeDadosINGLES	1132	One of the key requirements for the HDFS system is that the data\n    stored in the system remains available, even in the presence of\n    various types of failures (non simultaneous) in the hardware in\n    which the system executes.  To show that the system satisfies this\n    requirement	\N
1088	HadoopTacticasRecuperacaoFaltasINGLES	1133	In the HDFS system the fault recovery tactics are:	\N
1089	SecondEEEN	1134	The documentation of the software architecture for a system is often\n  composed of several views, because	\N
1090	ModuleViewType	1135	The quality that is more relevant to views of the module viewtype is:	\N
110	MemcachedModulesINGLES	1136	Consider the following description of \\emph{Memcached}, which is\n    adapted from its Wiki:\n    \\begin{quote}\n      Memcached is an in-memory key-value store for small chunks of\n      arbitrary data from results of database calls, API calls, or\n      page rendering.  It is made up of:\n      \\begin{itemize}\n      \\item Client software, which is given a list of available memcached servers.\n      \\item A client-based hashing algorithm, which chooses a server\n        based on the "key" input.\n      \\item Server software, which stores your values with their keys\n        into an internal hash table.\n      \\item Server algorithms, which determine when to throw out old\n        data (if out of memory), or reuse memory.\n      \\end{itemize}\n    \\end{quote}\n    Suppose that you want to present an architectural view for\n    \\emph{Memcached} that represents the above information.  Which\n    view is more adequate?	\N
1091	MemcachedModulesINGLES	1136	Consider the following description of \\emph{Memcached}, which is\n    adapted from its Wiki:\n    \\begin{quote}\n      Memcached is an in-memory key-value store for small chunks of\n      arbitrary data from results of database calls, API calls, or\n      page rendering.  It is made up of:\n      \\begin{itemize}\n      \\item Client software, which is given a list of available memcached servers.\n      \\item A client-based hashing algorithm, which chooses a server\n        based on the "key" input.\n      \\item Server software, which stores your values with their keys\n        into an internal hash table.\n      \\item Server algorithms, which determine when to throw out old\n        data (if out of memory), or reuse memory.\n      \\end{itemize}\n    \\end{quote}\n    Suppose that you want to present an architectural view for\n    \\emph{Memcached} that represents the above information.  Which\n    view is more adequate?	\N
1092	AspectsINGLES	1137	Using the Aspects architectural style promotes the modifiability\n    of a system because	\N
917	LayeredAspectsDataModelTwo	1138	Suppose that you are implementing a module in a system that has a two layered architecture.\n     Knowing that your module belongs to the upper layer (assuming the usual notation\n     for the layer style), this means that you	\N
1093	LayeredAspectsDataModelTwo	1138	Suppose that you are implementing a module in a system that has a two layered architecture.\n     Knowing that your module belongs to the upper layer (assuming the usual notation\n     for the layer style), this means that you	\N
1145	ModifiabilityScenario	1169	Consider the following modifiability scenario\n    \n    \\begin{quote}\n        The effort necessary to successfully port the system to execute in a new browser should not be higher than 5 person/month.\n    \\end{quote}	\N
1146	AspectsTactics	1170	The main tactic associated with the aspects architectural style is:	\N
1147	HadoopStakeholdersEurosINGLES	1171	In the HDFS system, in the stakeholders perspective, the use of low cost servers to build the clusters is:	\N
1148	HadoopHeartbeatINGLES	1172	In HDFS, during normal operation DataNodes use the heartbeat tactic	\N
1139	SoftwareArchitectureTwo	1173	The software architecture of a system	\N
1105	MicroservicesOne	1310	Consider the Microservice architectural style. Which of the following sentences \\textbf{does not} describe an advantage of microservices?	\N
1097	AvailabilityINGLES	1176	Suppose that, to satisfy an availability requirement related with\n    the occurrence of faults at the network infrastructure used by\n    your system, you want to use the tactic named \\emph{Ping/Echo}.\n    How does the use of that tactic manifests in the architectural\n    views of your system?	\N
1109	AvailabilityINGLES	1176	Suppose that, to satisfy an availability requirement related with\n    the occurrence of faults at the network infrastructure used by\n    your system, you want to use the tactic named \\emph{Ping/Echo}.\n    How does the use of that tactic manifests in the architectural\n    views of your system?	\N
1159	TresTiersINGLES	1179	Currently, the most popular architecture for an enterprise\n    application is composed of 3 tiers.  The three tiers are	\N
1161	SOAInteroperability	1180	The Service-Oriented Architecture style improves interoperability because	\N
1162	InstallView	1181	Consider a system that will require a significative configuration effort during deployment, because it provides several variations of the same functionalities and it is necessary to choose which functionalities better fit in each case. The most helpful architectural view for this situation is	\N
1163	TwitterTwo	1182	Consider the following description of the behavior of Twitter\n    \n    \\begin{quote}\n        Solution is a write based fanout approach. Do a lot of processing when tweets arrive to figure out where tweets should go. This makes read time access fast and easy. Don't do any computation on reads. With all the work being performed on the write path ingest rates are slower than the read path, on the order of 4000 QPS.\n    \\end{quote}\n    \n    To describe this behavior we need to	\N
1164	TwitterFour	1183	Consider the following description of the behavior of Twitter ingestion mechanisms\n    \n    \\begin{quote}\n        Write. when a tweet  comes in there's an O(n) process to write to Redis clusters, where n is the number of people following you. Painful for Lady Gaga and Barack Obama where they are doing 10s of millions of inserts across the cluster. All the Redis clusters are backing disk, the Flock cluster stores the user timeline to disk, but usually timelines are found in RAM in the Redis cluster.\n    \\end{quote}\n    \n    The view that represents this behavior should be of the	\N
389	FunctionalModule	1185	When designing an architecture requirements can be split into functional, quality attributes, and constraints. Functional requirements have impact on:	\N
1150	FunctionalModule	1185	When designing an architecture requirements can be split into functional, quality attributes, and constraints. Functional requirements have impact on:	\N
1151	SubcontractorsINGLES	1186	Suppose that you are developing a software architecture for a new\n    large scale system and that you intend to resort extensively to\n    third party subcontractors for the development of various parts of\n    the system.  Which architectural styles are most useful to plan\n    the development of the system in this case?	\N
1152	UsesStyle	1187	To achieve a faster time-to-market, software companies are\n  increasingly using a strategy of incremental releases of their\n  software, where each new release has a set of new features.  Which\n  architectural style is better to analyse whether the system's\n  software architecture is adequate for the planned incremental\n  releases?	\N
73	nginxModuleTypesINGLES	1188	According to the document that describes nginx:\n    \\begin{quote}\n      nginx's modular architecture generally allows developers to\n      extend the set of web server features without modifying the\n      nginx core.  nginx modules come in slightly different\n      incarnations, namely core modules, event modules, phase\n      handlers, protocols, variable handlers, filters, upstreams and\n      load balancers.  [...]  Event modules provide a particular\n      OS-dependent event notification mechanism like kqueue or epoll.\n      Protocol modules allow nginx to communicate through HTTPS,\n      TLS/SSL, SMTP, POP3 and IMAP.\n    \\end{quote}\n    Which architectural style is more adequate to represent the\n    information presented above?	\N
1153	nginxModuleTypesINGLES	1188	According to the document that describes nginx:\n    \\begin{quote}\n      nginx's modular architecture generally allows developers to\n      extend the set of web server features without modifying the\n      nginx core.  nginx modules come in slightly different\n      incarnations, namely core modules, event modules, phase\n      handlers, protocols, variable handlers, filters, upstreams and\n      load balancers.  [...]  Event modules provide a particular\n      OS-dependent event notification mechanism like kqueue or epoll.\n      Protocol modules allow nginx to communicate through HTTPS,\n      TLS/SSL, SMTP, POP3 and IMAP.\n    \\end{quote}\n    Which architectural style is more adequate to represent the\n    information presented above?	\N
1154	AdventureBuilderFour	1189	Consider the following architectural view of the Adventure Builder system, designed around the Order Processing Center\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{../AdventureBuilderCandC}\n    \\end{center}\n    \n    The views \\textbf{does not} allow the reason about the quality of	\N
1155	AdventureBuilderSix	1190	Consider the following requirement for availability of the Adventure Builder system\n    \n    \\begin{quote}\n        The Consumer Web site is available to the user 24x7. If an instance of OPC application fails, the fault is detected and the system administrator is notified in 30 seconds; the system continues taking order requests; another OPC instance is automatically created; and data remains in consistent state.\n    \\end{quote}\n    \n    In order to support this quality it is necessary to	\N
1156	DVDCatalogMobile	1191	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        To support iPhone/iPad/Android version with sync, which allows offline use of the application in the mobile device and data synchronization to occur when a connection is available\n    \\end{quote}\n    \n    This requirement requires a change of	\N
1158	PeerToPeerSpace	1193	The Peer-to-Peer architectural style provides high scalability and availability. In the context of a file sharing system	\N
150	WorldWideEN	1195	In world-wide systems like Facebook or Amazon,	\N
1166	WorldWideEN	1195	In world-wide systems like Facebook or Amazon,	\N
1167	BoundedContextTwo	1196	Consider the following representation of a system following a microservices architecture,\n      \n      \\begin{center}\n          \\includegraphics[width=140mm]{../MicroservicesArchitecture}\n      \\end{center}	\N
1160	ChromeMultiPlatform	1198	The Chromium is a web browser that introduced an innovative architecture. In the Chromium description we can read:\n\n  \\begin{quote}\n    Chromium is a large and complex cross-platform product.  We try to\n    share as much code as possible between platforms, while\n    implementing the UI and OS integration in the most appropriate way\n    for each.  While this gives a better user experience, it adds\n    extra complexity to the code.  This document describes the\n    recommended practices for keeping such cross-platform code clean.\n\n    We use a variety of different file naming suffixes to indicate\n    when a file should be used:\n    \\begin{itemize}\n    \\item Windows files use the \\texttt{\\_win} suffix.\n    \\item Cocoa (Mac UI) files use the \\texttt{\\_cocoa} suffix, and lower-level Mac files use the \\texttt{\\_mac} suffix.\n    \\item Linux files use \\texttt{\\_linux} for lower-level files, \\texttt{\\_gtk} for GTK-specific files, and \\texttt{\\_x} for X Windows (with no GTK) specific files.\n    \\item Posix files shared between Mac and Linux use the \\texttt{\\_posix} suffix.\n    \\item Files for Chrome's ``Views'' UI (on Windows and experimental GTK) layout system use the \\texttt{\\_views} suffix.\n   \\end{itemize}\n\n    The separate front-ends of the browser are contained in their own directories:\n    \\begin{itemize}\n    \\item Windows Views (and the experimental GTK-views): \\\\\n      \\texttt{chrome/browser/ui/views}\n    \\item Linux GTK: \\texttt{chrome/browser/gtk}\n    \\item Mac: \\texttt{chrome/browser/cocoa}\n    \\end{itemize}\n  \\end{quote}\n  \n  Which architectural style should we use to represent this aspect of Chromium?	\N
1203	HadoopCluster	1204	Consider the following figure that presents the Hadoop cluster topology.\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{HadoopClusterTopology}\n    \\end{center}	\N
1199	SoftwareArchitecture	1205	The software architecture of a system	\N
1201	GeneralScenario	1206	A general scenario for a quality attribute	\N
1200	TwitterScaleOne	1207	In the description of the Twitter system we can read:\n    \n    \\begin{quote}\n         Twitter is optimized to be highly available on the read path on the home timeline. Read path is in the 10s of milliseconds.\n    \\end{quote}\n    \n    This is achieved because:	\N
1202	ProxyServer	1208	Consider the following figure that presents a Proxy Server, which collapses requests from different users.\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{ProxyServer}\n    \\end{center}	\N
1213	HadoopCreateFile	1214	In the description of Hadoop we can red.\n    \n    \\begin{quote}\n        The CheckpointNode periodically combines the existing checkpoint and journal to create a new checkpoint and an empty journal. The CheckpointNode usually runs on a different host from the NameNode since it has the same memory requirements as the NameNode.\n    \\end{quote}	\N
1209	ArchitecturalTactics	1215	An architectural tactic for a system describes	\N
1211	TwitterScaleTwo	1216	In the description of the Twitter system we can read:\n    \n    \\begin{quote}\n        On the search timeline:\n         Write. when a tweet comes in and hits the Ingester only one Early Bird machine is hit. Write time path is O(1). A single tweet is ingested in under 5 seconds between the queuing and processing to find the one Early Bird to write it to.\n    \\end{quote}	\N
1210	EarlyDecisions	1217	In his article, \\emph{Who Needs and Architect?}, Martin Fowler cites Ralph Johnson definition:\n    \n    \\begin{quote}\n        Architecture is the set of decisions that must be made early in a project.\n    \\end{quote}\n    \n    In his opinion:	\N
1212	Queues	1218	Consider the following figure that presents a Queue where client applications write their requests to be served by a server.\n    \n    \\begin{center}\n        \\includegraphics[width=130mm]{Queues}\n    \\end{center}	\N
1221	ModifiabilityOne	1224	In a modifiability scenario the environment can be characterized as design time, compile time, build time, initiation time, and runtime.	\N
1222	GraphiteScenarioTacticsOne	1225	In the Graphite system the component \\emph{carbon} provides to \\emph{webapp} components an access interface to the \\emph{buffers} in order to improve the quality of	\N
1223	HadoopCheckpoint	1226	In the HDFS system when the \\emph{CheckpointNode} and the \\emph{NameNode} are deployed in different nodes, the \\emph{CheckpointNode} provides:	\N
1219	OmissionRetry	1227	Considering the availability architectural quality, the tactic of retry	\N
1220	Scalability	1228	Several of the cases studied in this course have scalability\n    requirements.  That means that those systems should be designed in\n    such a way that they	\N
1231	ModifiabilityTwo	1234	Consider that a module, that contains a complex business logic, needs to invoke a remote entity using a particular communication protocol and it is needs to manage the invocation, like deal with the possible errors, delays and omissions in the invocation, transform the data before sending it, etc. Which tactic should be applied for a scenario where there will be changes in the communication protocol. Note that the business logic comprises a set of functionalities that is independent of the remote invocation technological aspects.	\N
898	GraphiteScenarioTacticsTwo	1235	Which quality, or qualities, of the Graphite system are described by the sentence: \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL.}	\N
908	GraphiteScenarioTacticsTwo	1235	Which quality, or qualities, of the Graphite system are described by the sentence: \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL.}	\N
1232	GraphiteScenarioTacticsTwo	1235	Which quality, or qualities, of the Graphite system are described by the sentence: \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL}	\N
1233	HadoopNameNodeReplica	1236	The architecture of the HDFS system only allows the existence of\n    one NameNode.  Given the responsibilities of this component and\n    the current architecture of HDFS, what would be the consequences\n    of adding the possibility of having replicas of the NameNode in\n    the system?	\N
850	PerformanceOne	1237	Consider a scenario for performance where the arrival of events is stochastic with a distribution where there are peeks of events but the arrival of events over a long period is uniform. The best tactic to apply is	\N
989	PerformanceOne	1237	Consider a scenario for performance where the arrival of events is stochastic with a distribution where there are peeks of events but the arrival of events over a long period is uniform. The best tactic to apply is	\N
1230	Performance	1237	Consider a scenario for performance where the arrival of events is stochastic with a distribution where there are peeks of events but the arrival of events over a long period is uniform. The best tactic to apply is	\N
1229	Availability	1238	There are several tactics to satisfy availability requirements,\n    which may be applied depending on the concrete requirement that we\n    want to satisfy.  Assuming that you want to detect faults of type\n    \\emph{response} in your system, which tactic is more adequate?	\N
708	DVDCatalogMultiPlatform	1244	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        To support multi-platform (Mac, Windows, Linux)\n    \\end{quote}\n    \n    This requirement requires a change of	\N
743	DVDCatalogMultiPlatform	1244	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        To support multi-platform (Mac, Windows, Linux)\n    \\end{quote}\n    \n    This requirement requires a change of	\N
1240	DVDCatalogMultiPlatform	1244	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        To support multi-platform (Mac, Windows, Linux)\n    \\end{quote}\n    \n    This requirement requires a change of	\N
1241	ModuleComponent	1245	Consider the kind of relations between components and modules.	\N
294	OrderPadTactics	1314	In the description of architecture of the OrderPad case study, it can be read that the updates the user does on the OrderPad when it is offline are not lost. This availability quality is achieved through a	\N
1253	AdventureBuilderModuleTwo	1257	Consider the following performance/scalability scenario for the Adventure Builder system \n    \n    \\begin{quote}\n        Up to 500 users click to see the catalog of adventure packages following a random distribution over 1 minute; the system is under normal operating conditions; the maximal latency to serve the first page of content is under 5 seconds; average latency for same is less than 2 seconds. If required, the system should easily support an increase in the number of simultaneous requests while maintaining the same latency per request.\n    \\end{quote}\n    \n    and the following architectural view\n    \n    \\begin{center}\n        \\includegraphics[width=105mm]{AdventureBuilderHighLevelVIew}\n    \\end{center}	\N
1263	AdventureBuilderOne	1264	Consider the following view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{AdventureBuilder-SOA}\n    \\end{center}\n    \n    In this view the following architectural styles are used	\N
1259	ComponentConnectorTwo	1266	The connectors on component-and-connector view	\N
1262	GraphiteViewsOne	1268	In Graphite system  the \\emph{receiver} and the \\emph{writer threads} support asynchronous writing of metrics to optimize disk accesses. The interaction between these two components follow the architectural style	\N
1273	AdventureBuilderTwo	1274	Consider the following view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=140mm]{AdventureBuilder-Tiers}\n    \\end{center}\n    \n    In this view the following architectural styles are used	\N
1271	PublishSubscribe	1275	In the Publish-Subscribe architectural style	\N
1272	GraphiteViewsTwo	1276	A high-level component-and-connect view of Graphite system can be designed using only the architectural style(s)	\N
322	ComponentAndConnnector	1278	The Java web servers, like Tomcat, use threads to process requests. For each request they create (or reuse) a thread to process it.\n    To draw a architectural view that describes this behaviour we should use	\N
1270	CommunicationProcesses	1278	The Java web servers, like Tomcat, use threads to process requests. For each request they create (or reuse) a thread to process it.\n    To draw a architectural view that describes this behaviour we should use	\N
1284	ComponentAndConnectorViewtypeOne	1299	In the component-and-connector viewtype connectors can be complex, which means that they provide a rich set of qualities to the interaction between the components that they connect. These complex connectors can be documented in another view using a set of components interacting through simpler connectors.	\N
854	TiersDynamicreconfigurationPeertopeerPublishsubscribeOne	1300	Typically, Instant Messaging clients have a window to list the contacts of the user, and\n      show in that window the status of each contact (whether it is available, unavailable, busy,\n      etc). Given that the status of a contact may be changed at any time, and that the contact's\n      status is given by the Instant Messaging application of that contact, which architectural\n      style represents best the interaction pattern between these components?	\N
924	ModuleViewtypeTwo	1315	Consider the Uses architectural style of the Module viewtype	\N
1246	ModuleViewtypeTwo	1315	Consider the Uses architectural style of the Module viewtype	\N
1261	Tiers	1456	The Tiers architectural style	\N
226	InterfaceDelegation	1426	Consider the concept of interface delegation	\N
251	InterfaceDelegation	1426	Consider the concept of interface delegation	\N
1269	InterfaceDelegation	1426	Consider the concept of interface delegation	\N
1285	PublishsubscribeOne	1300	Typically, Instant Messaging clients have a window to list the contacts of the user, and\n      show in that window the status of each contact (whether it is available, unavailable, busy,\n      etc). Given that the status of a contact may be changed at any time, and that the contact's\n      status is given by the Instant Messaging application of that contact, which architectural\n      style represents best the interaction pattern between these components?	\N
1287	GraphiteOne	1301	Consider the following fragment in the description of the Graphite system.\n    \n    \\begin{quote}\n        The Graphite webapp allows users to request custom graphs with a simple URL-based API. Graphing parameters are specified in the query-string of an HTTP GET request, and a PNG image is returned in response. \n    \\end{quote}\n    \n    To describe this scenario it should be designed a view that applies the following architectural style	\N
1286	ProxyServer	1302	Consider the following figure that presents a Proxy Server that collapses requests from different users.\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{1-proxy-server}\n    \\end{center}	\N
1279	AvailabilityOne	1304	The stimulus of an availability scenario is	\N
1280	PerformanceOne	1305	A response measure of a performance scenario is	\N
1281	ModifiabilityExamOne	1306	The layered architectural style applies the modifiability architectural tactic of	\N
1282	ModuleViewtypeExamOne	1307	One of the advantages of having views of the module viewtype is that they allow to do an impact analysis to predict the effect of modifying the system. The architectural style of the module viewtype which provides richer information for this impact analysis is	\N
223	DecompositionGeneralization	1308	Consider that a chess game should\n  provide an automatic and intelligent chess player, and that to\n  implement that player we will use some of the many chess engines\n  already available in the market.  Moreover, the system should allow\n  the user to choose which engine to use for each new game.  Given\n  these requirements, which of the architectural styles from the\n  module viewtype are best suited to satisfy them?	\N
1283	DecompositionGeneralization	1308	Consider that a chess game should\n  provide an automatic and intelligent chess player, and that to\n  implement that player we will use some of the many chess engines\n  already available in the market.  Moreover, the system should allow\n  the user to choose which engine to use for each new game.  Given\n  these requirements, which of the architectural styles from the\n  module viewtype are best suited to satisfy them?	\N
1297	AggregateOne	1309	In a microservices architecture, aggregates are used as a unit of processing	\N
1293	DynamicReconfiguration	1316	In the description of the Gnutella system can be read:\n    \n    \\begin{quote}\n        The topology of the system changes at runtime as peer components connect and disconnect to the network.\n    \\end{quote}	\N
1294	Deployment	1317	In the software architecture of a system, the Deployment architectural style of the allocation viewtype is\n  best suited for	\N
1295	WebAppsOne	1318	Consider a web application that was implemented using three layers: presentation, domain logic, and data access. How are these layers mapped into the components if it is a rich interface application.	\N
1337	AggregateTwo	1339	Consider the following decomposition of a domain model into 3 aggregates. If, instead of this decomposition, \\texttt{Customer} and \\texttt{Order} were in the same aggregate  \n    \n    \\begin{center}\n       \\includegraphics[width=120mm]{1-aggregate}\n    \\end{center}	\N
1165	MicroservicesTwo	1342	Consider the following definition of Microservice architectural style by Martin Fowler\n    \n    \\begin{quote}\n        The microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies.\n    \\end{quote}\n    \n    To represent an architecture based on Microservices	\N
258	PipesFilters	1357	Consider that you intend to develop a system where it is necessary to change the emails received by the server (for instance, to remove potential virus or URLs for phishing sites). The goal is that each email is processed by this system before it is sent to other servers or it is stored locally. Additionally, the system should be easily modified to support new kinds of transformations. Which style is more suitable to satisfy these requirements?	\N
1194	MicroservicesTwo	1342	Consider the following definition of Microservice architectural style by Martin Fowler\n    \n    \\begin{quote}\n        The microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies.\n    \\end{quote}\n    \n    To represent an architecture based on Microservices	\N
1338	MicroservicesExamTwo	1342	Consider the following definition of Microservice architectural style by Martin Fowler\n    \n    \\begin{quote}\n        The microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies.\n    \\end{quote}\n    \n    To represent an architecture based on Microservices	\N
1321	ModifiabilityExamTwo	1343	A response measure of a modifiability scenario is	\N
1322	DVDCatalogMobile	1344	Consider the module viewtype views of the Catalog of DVD application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        To support iPhone/iPad/Android version with sync, which allows offline use of the application in the mobile device and data synchronization to occur when a connection is available\n    \\end{quote}\n    \n    This requirement requires a change of	\N
1327	GraphiteTwo	1345	Which quality, or qualities, of the Graphite system are described by the sentence: \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL.}	\N
1328	WorkAssigment	1346	Consider the Work Assignment architectural style of the allocation viewtype.	\N
1326	ScalableArchitectureOne	1347	Consider the following figure that presents a Image Hosting System.\n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{1-image-hosting}\n    \\end{center}\n    \n    By adding another Image File Storage component, which contains a redundant copy of the data and provides read access to the clients, but without guaranteeing a ACID transactional behavior between reads and writes, it improves the quality(ies) of	\N
1329	WebAppsTwo	1348	Consider a web application that supports several types of user interface, e.g., web, mobile, etc. If it has to process a high volume of requests, which depend on the type of user interface, and a multi-tier architecture is followed. How many tiers should be used?	\N
1330	DVDTwo	1349	Consider the following generalization view of the Catalog of DVD case study to fulfill a modifiability scenario\n    \n    \\begin{center}\n        \\includegraphics[width=60mm]{1-dvd-generalization}\n    \\end{center}\n    \n    From this view the stakeholders can infer	\N
1331	DataModel	1350	In Facebook it is not possible to have the information about more that one bilion users in a single disk. Therefore, a sharding technique is applied, where the persistent information is split between several database servers, and requests are routed to the right servers for queries and updates. Additionally, due to performance requirements, the information needs to be replicated in several servers. To describe this architecture	\N
115	SOAINGLES	1351	Suppose that you are developing the software architecture of a new\n    system for an organization composed of several organizational\n    units, each one with its own information systems, which have been\n    developed independently of each other over the course of several\n    years and depending on the particular needs of each unit.  Your\n    system has the goal of integrating the various existing systems,\n    providing in this way not only a unified view of how the\n    organization works, but also allowing the creation of new\n    processes within the organization that involve more than one unit.\n    Which architectural style is better suited to design such a\n    system?	\N
888	SOAPipesFiltersTwo	1351	Suppose that you are developing the software architecture of a new\n    system for an organization composed of several organizational\n    units, each one with its own information systems, which have been\n    developed independently of each other over the course of several\n    years and depending on the particular needs of each unit.  Your\n    system has the goal of integrating the various existing systems,\n    providing in this way not only a unified view of how the\n    organization works, but also allowing the creation of new\n    processes within the organization that involve more than one unit.\n    Which architectural style is better suited to design such a\n    system?	\N
1332	SOA	1351	Suppose that you are developing the software architecture of a new\n    system for an organization composed of several organizational\n    units, each one with its own information systems, which have been\n    developed independently of each other over the course of several\n    years and depending on the particular needs of each unit.  Your\n    system has the goal of integrating the various existing systems,\n    providing in this way not only a unified view of how the\n    organization works, but also allowing the creation of new\n    processes within the organization that involve more than one unit.\n    Which architectural style is better suited to design such a\n    system?	\N
1333	AdventureBuilderTwo	1352	Consider the following view of the Adventure Builder case study \n    \n    \\begin{center}\n       \\includegraphics[width=120mm]{1-adventure-com-proc}\n    \\end{center}	\N
1334	PulseTwo	1354	Consider the following view of the Pulse case study \n    \n    \\begin{center}\n        \\includegraphics[width=120mm]{1-pulse-multiple-copies-computation}\n    \\end{center}\n    \n    This view applies the following architectural styles	\N
1335	OrderPadTwo	1355	Consider the architecture of the Morrison's OrderPad. The connector between the client component, executing in the Pad, and the server component, executing in the OrderPadDatabase	\N
1324	ModuleViewtypeExamTwo	1356	One of the advantages of having views of the module viewtype is that they allow to do a traceability analysis of requirements, how the functional requirements of the system are supported by module responsibilities. The modifiability tactic that is involved in this mapping is	\N
1260	PipesFilters	1357	Consider that you intend to develop a system where it is necessary to change the emails received by the server (for instance, to remove potential virus or URLs for phishing sites). The goal is that each email is processed by this system before it is sent to other servers or it is stored locally. Additionally, the system should be easily modified to support new kinds of transformations. Which style is more suitable to satisfy these requirements?	\N
1325	PipesFilters	1357	Consider that you intend to develop a system where it is necessary to change the emails received by the server (for instance, to remove potential virus or URLs for phishing sites). The goal is that each email is processed by this system before it is sent to other servers or it is stored locally. Additionally, the system should be easily modified to support new kinds of transformations. Which style is more suitable to satisfy these requirements?	\N
1323	ComponentAndConnectorViewtypeTwo	1358	Considered the following two views of a system that receive a stream of character and produce the same stream where the characters are alternately uppercase and lowercase.\n    \n    \\begin{center}\n       \\includegraphics[width=120mm]{1-module-and-cc}\n    \\end{center}	\N
1360	ElevatorCommon	1364	In the Architect Elevator article by Gregor Hohpe can be read:\n    \n    \\begin{quote}\n        Finding the appropriate context requires the architect to visit many floors of the organization.\n    \\end{quote}\n    \n    This sentence reflects the fact that an architecture is	\N
1361	MicroservicesProject	1366	In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:\n    \n    \\begin{quote}\n        The microservice approach to division ..., splitting up into services organized around business capability. Such services take a broad-stack implementation of software for that business area, including user-interface, persistent storage, and any external collaborations. Consequently the teams are cross-functional, including the full range of skills required for the development: user-experience, database, and project management.\n    \\end{quote}\n    \n    Considering the architecture influence cycle, which influence factor it is being considered?	\N
1362	ScalablePartitioning	1367	Consider the following figure that presents an architectural view of an \\emph{Image Hosting Application} which resulted from the enrichment of another architectural view by adding another \\emph{Image File Storage} pair, in the figure they are distinguished by 1 and 2. \n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{ScalablePartitioning}\n    \\end{center}\n    \n    Which quality results from this enrichment, that was not provided by the previous version of the architecture?	\N
1359	QueuesQualities	1368	Consider the following figure that presents a Queue where client applications write their requests to be processed by a server.\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{Queues}\n    \\end{center}\n    \n    This solution \\textbf{does not} provide the following quality:	\N
1372	QueuesSyncAndAsync	1374	Consider the following figure that presents a Queue where client applications write their requests to be processed by a server (asynchronous) and compare with another architectural design (synchronous) where a thread is associated with each request.\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{Queues}\n    \\end{center}	\N
1369	ElevatorInteroperability	1375	In the Architect Elevator article by Gregor Hohpe can be read:\n    \n    \\begin{quote}\n        Once a developer approached our architecture team with an application that had "significant scalability demands". A quick look at the architecture diagram revealed numerous components communicating via XML messages. When I pointed out that this may be the very reason for the performance concerns, I was quickly informed that this was an architecture decision and couldn't be changed. Assuming the architects are smart and well-intentioned, they may have thought about interoperability when they made this decision but may be unaware of the negative impact on run-time performance and development velocity.\n    \\end{quote}\n    \n    From this sentence we can conclude that	\N
1370	MicroservicesModularity	1376	In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:\n    \n    \\begin{quote}\n        As well as the fact that services are independently deployable and scalable, each service also provides a firm module boundary, even allowing for different services to be written in different programming languages. They can also be managed by different teams.\n    \\end{quote}\n    \n    Which is not necessarily an advantage of being independently deployable and scalable?	\N
1371	ReadsAndWrites	1377	Consider the following figure that presents an architectural view of an \\emph{Image Hosting Application}. \n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{ScalablePartitioning}\n    \\end{center}	\N
1373	PerformanceTacticsOne	1378	Which of the following tactics is not related with the management of resources	\N
1382	QueuesCrash	1384	Consider the following figure that presents a Queue where client applications write their requests to be processed by a server (asynchronous) and compare with another architectural design (synchronous) where a thread is associated with each request.\n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{Queues}\n    \\end{center}\n    \n    Consider a situation where the server that processes the tasks crashes	\N
1379	DataStorageAvailability	1385	Consider the following figure that presents an architectural view of an \\emph{Image Hosting Application}. \n    \n    \\begin{center}\n        \\includegraphics[width=100mm]{ScalablePartitioning}\n    \\end{center}\n    \n    The replication between the Image File Storage \\emph{n} and Image File Storage \\emph{nb}	\N
1380	MicroservicesConsistency	1386	In the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:\n    \n    \\begin{quote}\n        Decentralizing responsibility for data across microservices has implications for managing updates. The common approach to dealing with updates has been to use transactions to guarantee consistency when updating multiple resources. This approach is often used within monoliths.\n    \\end{quote}\n    \n    What is the impact of decentralizing responsibility for data across microservices?	\N
1383	PerformanceTacticsTwo	1387	Which of the following tactics is not related with the control of resource demand	\N
1381	ElevatorDevops	1388	In the Architect Elevator article by Gregor Hohpe can be read:\n    \n    \\begin{quote}\n        A lot of large companies have discovered the benefits of cloud computing but see it mainly as an infrastructure topic. I feel that's misguided: being able to get compute resources more quickly and cheaply is useful, but the real business benefit lies in a fully automated tool chain that minimizes the time in which a normal code change can go into production. Not quite coincidentally, this is my favorite definition of DevOps.\n    \\end{quote}\n    \n    In the author's opinion	\N
1392	ModuleViewtypeOne	1394	Consider the Decomposition architectural style of the Module viewtype	\N
1336	FenixTwo	1398	When applying Attribute-Driven Design (ADD) to the FenixEdu system the creation of a view where there are redundant web servers, load balancers and database servers	\N
1393	GraphiteComposerUIPerformance	1395	The \\emph{Composer UI} component of Graphite system, described as - \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL} - to be effective needs to show to the user the changes she performs in the graph such that she has immediate feedback whenever she clicks on a option. To do so, the architecture needs to include	\N
1389	AvailabilityVotingFirst	1396	There are several tactics to satisfy availability requirements,\n    which may be applied depending on the concrete requirement that we\n    want to satisfy.  Assuming that you want to detect faults of type\n    \\emph{response} in your system, which tactic is more adequate?	\N
1390	ModifiabilityOne	1397	The modifiability tactic Use an Intermediary between two modules	\N
1353	FenixTwo	1398	When applying Attribute-Driven Design (ADD) to the FenixEdu system the creation of a view where there are redundant web servers, load balancers and database servers	\N
1413	GraphiteReliability	1416	In the Graphite system description can be read:\n    \n    \\begin{quote}\n        We've got 600,000 metrics that update every minute and we're assuming our storage can only keep up with 60,000 write operations per minute. This means we will have approximately 10 minutes worth of data sitting in carbon's queues at any given time. To a user this means that the graphs they request from the Graphite webapp will be missing the most recent 10 minutes of data.\n    \\end{quote}	\N
1420	AdventureBuilderComponentAndConnectorOne	1424	Consider the following view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=95mm]{AdventureBuilderComponentAndConnector}\n    \\end{center}\n    \n    In this view the following architectural styles are used	\N
1419	ModuleStylesOne	1425	Suppose that in the development of an enterprise application (which needs to access a\n      database) it was decided to use the FenixFramework library to simplify the development\n      of the data access code. Which architectural style is the most adequate to represent this\n      decision?	\N
1421	AdventureBuilderModuleOne	1428	Consider the following modifiability scenario for the Adventure Builder system \n    \n    \\begin{quote}\n        A new business partner (airline, lodging, or activity provider) that uses its own web services interface is added to the system in no more than 10 person-days of effort for the implementation. The business goal is easy integration with new business partners.\n    \\end{quote}\n    \n    and the following architectural view\n    \n    \\begin{center}\n        \\includegraphics[width=95mm]{AdventureBuilderModule}\n    \\end{center}	\N
1430	AdventureBuilderComponentAndConnectorSecond	1434	Consider the following view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=95mm]{AdventureBuilderComponentAndConnector}\n    \\end{center}\n    \n    In this view it is possible to reason that	\N
1429	PublishSubscribe	1435	In the Publish-Subscribe architectural style	\N
1433	UsesOne	1436	Which\n  architectural style is \n  adequate for planning incremental\n  releases?	\N
1431	AdventureBuilderModuleThree	1437	Consider the following performance/scalability scenario for the Adventure Builder system \n    \n    \\begin{quote}\n        Up to 500 users click to see the catalog of adventure packages following a random distribution over 1 minute; the system is under normal operating conditions; the maximal latency to serve the first page of content is under 5 seconds; average latency for same is less than 2 seconds. If required, the system should easily support an increase in the number of simultaneous requests while maintaining the same latency per request.\n    \\end{quote}\n    \n    and the following architectural view\n    \n    \\begin{center}\n        \\includegraphics[width=95mm]{AdventureBuilderModule}\n    \\end{center}	\N
1432	ConnectorAttach	1438	A connector may be attached to components of different types because	\N
1440	AdventureBuilderComponentAndConnectorThird	1444	Consider the following view of the Adventure Builder system\n    \n    \\begin{center}\n        \\includegraphics[width=95mm]{AdventureBuilderComponentAndConnector}\n    \\end{center}\n    \n    This view \\textbf{does not} apply the architectural style	\N
1439	LayeredAspectsDataModelOne	1445	In a layered architecture composed by four layers, where the topmost\n  layer is the layer number 1 and the bottommost layer is the layer\n  number 4, which of the layers is more modifiable?	\N
1441	AdventureBuilderModuleTwo	1446	Consider the following availability scenario for the Adventure Builder system \n    \n    \\begin{quote}\n        The Consumer Web site is available to the user 24x7. If an instance of OPC application fails, the fault is detected and the system administrator is notified in 30 seconds; the system continues taking order requests; another OPC instance is created; and data remains in consistent state.\n    \\end{quote}\n    \n    and the following architectural view\n    \n    \\begin{center}\n        \\includegraphics[width=95mm]{AdventureBuilderModule}\n    \\end{center}	\N
1443	PeerToPeerSpace	1447	The Peer-to-Peer architectural style provides high scalability and availability. In the context of a file sharing system	\N
1450	DVDTopDecomposition	1457	Consider the following decomposition view of the Catalog of DVD case study.\n    \n    \\begin{center}\n       \\includegraphics[width=100mm]{dvd-top-decomposition}\n    \\end{center}	\N
1452	OrderPadPortability	1458	Consider the architecture of the Morrison's OrderPad. The decision whether use a Native application or HTML5 for the implementation of the client in the Pad was taken because	\N
1461	GraphiteAvailabilityScenario	1464	In the context of the \\emph{Graphite} case study, consider the following view that represents the internal behavior of the \\emph{Carbon} component, where the components \\texttt{r1,... , rn, w} are threads and \\texttt{q1, ..., qn} are buffers. The port \\emph{read}, which provides an interface to read the data points stored in the queue, can be used, in an enrichment of the view, to illustrate\n    \n    \\begin{center}\n       \\includegraphics[width=120mm]{graphite-carbon}\n    \\end{center}	\N
1462	Silk	1465	In the Amazon Silk browser	\N
1463	MicroservicesTwo	1466	Suppose that an architect needs to decide whether to follow a modular monolith architecture or a microservices architecture for a new large system. The system to be developed has a complex logic and high volume of requests.	\N
1459	CommunicatingProcesses	1467	In the web page of the NGINX HTTP server can be read\n    \n    \\begin{quote}\n        NGINX is a free, open-source, high-performance HTTP server and reverse proxy, as well as an IMAP/POP3 proxy server. (...)\n        Unlike traditional servers, NGINX doesn't rely on threads to handle requests. Instead it uses a much more scalable event-driven (asynchronous) architecture. This architecture uses small, but more importantly, predictable amounts of memory under load.\n    \\end{quote}\n    \n    According to the above description the most adequate architectural style to represent the performance qualities of NGINX is	\N
1460	DVDAutocomplete	1468	Consider the following decomposition views of the Catalog of DVD case study were the \\emph{Autocomplete} module is implemented in javascript and executes in a browser.\n    \n    \\begin{center}\n    \\includegraphics[width=120mm]{dvd-autocomplete}\n    \\end{center}	\N
1469	AllocationStylesCost	1475	Consider a stakeholder that is particularly concerned about the total cost of the project. When it comes to describing the system using allocation viewtypes is interested in	\N
1470	DVDGeneralization	1476	Consider the following generalization view of the Catalog of DVD case study.\n    \n    \\begin{center}\n       \\includegraphics[width=60mm]{dvd-generalization}\n    \\end{center}	\N
1471	GraphiteWebapp	1477	In the context of the \\emph{Graphite} case study, consider the following application-specific types that are used in a view to represent the internal behavior of the \\emph{Webapp} component. \n    \n    \\begin{center}\n       \\includegraphics[width=120mm]{graphite-webapp}\n    \\end{center}\n    \n    This view can show that the architecture fulfills	\N
1473	MicroservicesThree	1478	Consider the architectural solutions for microservices architectures that use the Command Query Responsibility Segregation (CQRS) technique in the context of Event Sourcing. This technique has the following disadvantage	\N
35	HadoopReplicarNameNodeINGLES	1236	The architecture of the HDFS system only allows the existence of\n    one NameNode.  Given the responsibilities of this component and\n    the current architecture of HDFS, what would be the consequences\n    of adding the possibility of having replicas of the NameNode in\n    the system?	\N
713	DVDCatalogMeta	1125	Consider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n    \n    \\begin{quote}\n        The application should support other kinds of catalogs (CDs, games, books, ...). \n    \\end{quote}\n    \n    This requirement requires a change of	\N
689	PeerToPeerSpace	1193	The Peer-to-Peer architectural style provides high scalability and availability. In the context of a file sharing system	\N
709	PeerToPeerSpace	1193	The Peer-to-Peer architectural style provides high scalability and availability. In the context of a file sharing system	\N
\.


--
-- Data for Name: quiz_has_question; Type: TABLE DATA; Schema: public; Owner: pedro
--

COPY public.quiz_has_question (quiz_id, question_id) FROM stdin;
1	1
1	2
1	3
1	4
1	5
1	6
1	7
1	8
1	9
1	10
1	11
1	12
1	13
1	14
1	15
1	16
1	17
1	18
1	19
1	20
2	21
2	22
2	23
2	24
2	25
2	26
2	27
2	28
2	29
2	30
2	31
2	32
2	33
2	34
2	35
2	36
2	37
2	38
2	39
2	40
3	41
3	42
3	43
3	44
3	45
3	46
3	47
3	48
3	49
3	50
3	51
3	52
3	53
3	54
3	55
3	56
3	57
3	58
3	59
3	60
4	61
4	62
4	63
4	64
4	65
4	66
4	67
4	68
4	69
4	70
4	71
4	72
4	73
4	74
4	75
4	76
4	77
4	78
4	79
4	80
4	81
4	82
4	83
4	84
4	85
4	86
4	87
4	88
4	89
4	90
5	91
5	92
5	93
5	94
5	95
5	96
5	97
5	98
5	99
5	100
5	101
5	102
5	103
5	104
5	105
5	106
5	107
5	108
5	109
5	110
5	111
5	112
5	113
5	114
5	115
5	116
5	117
5	118
5	119
5	120
6	121
6	122
6	123
6	124
6	125
6	126
6	127
6	128
6	129
6	130
6	131
6	132
6	133
6	134
6	135
6	136
6	137
6	138
6	139
6	140
6	141
6	142
6	143
6	144
6	145
6	146
6	147
6	148
6	149
6	150
7	151
7	152
7	153
7	154
7	155
7	156
7	157
7	158
7	159
7	160
7	161
7	162
7	163
7	164
7	165
7	166
7	167
7	168
7	169
7	170
7	171
7	172
7	173
7	174
7	175
7	176
7	177
7	178
7	179
7	180
8	181
8	182
8	183
8	184
8	185
8	186
8	187
8	188
8	189
8	190
8	191
8	192
8	193
8	194
8	195
8	196
8	197
8	198
8	199
8	200
8	201
8	202
8	203
8	204
8	205
8	206
8	207
8	208
8	209
8	210
9	211
9	212
9	213
9	214
9	215
9	216
9	217
9	218
9	219
9	220
9	221
9	222
9	223
9	224
9	225
9	226
9	227
9	228
9	229
9	230
9	231
9	232
9	233
9	234
9	235
9	236
9	237
9	238
9	239
9	240
10	241
10	242
10	243
10	244
10	245
10	246
10	247
10	248
10	249
10	250
10	251
10	252
10	253
10	254
10	255
10	256
10	257
10	258
10	259
10	260
10	261
10	262
10	263
10	264
10	265
10	266
10	267
10	268
10	269
10	270
11	271
11	272
11	273
11	274
11	275
11	276
11	277
11	278
11	279
11	280
11	281
11	282
11	283
11	284
11	285
11	286
11	287
11	288
11	289
11	290
11	291
11	292
11	293
11	294
11	295
11	296
11	297
11	298
11	299
11	300
12	301
12	302
12	303
12	304
12	305
12	306
12	307
12	308
12	309
12	310
12	311
12	312
12	313
12	314
12	315
12	316
12	317
12	318
12	319
12	320
12	321
12	322
12	323
12	324
12	325
12	326
12	327
12	328
12	329
12	330
13	331
13	332
13	333
13	334
13	335
13	336
13	337
13	338
13	339
13	340
13	341
13	342
13	343
13	344
13	345
13	346
13	347
13	348
13	349
13	350
14	351
14	352
14	353
14	354
14	355
15	356
15	357
15	358
15	359
15	360
16	361
16	362
16	363
16	364
16	365
17	366
17	367
17	368
17	369
17	370
18	371
18	372
18	373
18	374
18	375
19	376
19	377
19	378
19	379
19	380
20	381
20	382
20	383
20	384
20	385
21	386
21	387
21	388
21	389
21	390
22	391
22	392
22	393
22	394
22	395
22	396
22	397
22	398
22	399
22	400
22	401
22	402
22	403
22	404
22	405
22	406
22	407
22	408
22	409
22	410
23	411
23	412
23	413
23	414
23	415
23	416
23	417
23	418
23	419
23	420
23	421
23	422
23	423
23	424
23	425
23	426
23	427
23	428
23	429
23	430
24	431
24	432
24	433
24	434
24	435
24	436
24	437
24	438
24	439
24	440
24	441
24	442
24	443
24	444
24	445
24	446
24	447
24	448
24	449
24	450
25	451
25	452
25	453
25	454
25	455
25	456
25	457
25	458
25	459
25	460
25	461
25	462
25	463
25	464
25	465
25	466
25	467
25	468
25	469
25	470
26	471
26	472
26	473
26	474
26	475
26	476
26	477
26	478
26	479
26	480
26	481
26	482
26	483
26	484
26	485
26	486
26	487
26	488
26	489
26	490
27	491
27	492
27	493
27	494
27	495
27	496
27	497
27	498
27	499
27	500
27	501
27	502
27	503
27	504
27	505
27	506
27	507
27	508
27	509
27	510
28	511
28	512
28	513
28	514
28	515
28	516
28	517
28	518
28	519
28	520
28	521
28	522
28	523
28	524
28	525
28	526
28	527
28	528
28	529
28	530
29	531
29	532
29	533
29	534
29	535
29	536
29	537
29	538
29	539
29	540
29	541
29	542
29	543
29	544
29	545
29	546
29	547
29	548
29	549
29	550
30	551
30	552
30	553
30	554
30	555
30	556
30	557
30	558
30	559
30	560
30	561
30	562
30	563
30	564
30	565
30	566
30	567
30	568
30	569
30	570
31	571
31	572
31	573
31	574
31	575
31	576
31	577
31	578
31	579
31	580
31	581
31	582
31	583
31	584
31	585
31	586
31	587
31	588
32	589
32	590
32	591
32	592
32	593
33	594
33	595
33	596
33	597
33	598
34	599
34	600
34	601
34	602
34	603
35	604
35	605
35	606
35	607
35	608
36	609
36	610
36	611
36	612
36	613
37	614
37	615
37	616
37	617
37	618
38	619
38	620
38	621
38	622
38	623
39	624
39	625
39	626
39	627
39	628
40	629
40	630
40	631
40	632
40	633
40	634
40	635
40	636
40	637
40	638
40	639
40	640
40	641
40	642
40	643
40	644
40	645
40	646
40	647
40	648
41	649
41	650
41	651
41	652
41	653
42	654
42	655
42	656
42	657
42	658
43	659
43	660
43	661
43	662
43	663
44	664
44	665
44	666
44	667
44	668
45	669
45	670
45	671
45	672
45	673
46	674
46	675
46	676
46	677
46	678
47	679
47	680
47	681
47	682
47	683
48	684
48	685
48	686
48	687
48	688
49	689
49	690
49	691
49	692
49	693
49	694
49	695
49	696
49	697
49	698
49	699
49	700
49	701
49	702
49	703
49	704
49	705
49	706
49	707
49	708
50	709
50	710
50	711
50	712
50	713
51	714
51	715
51	716
51	717
51	718
52	719
52	720
52	721
52	722
52	723
53	724
53	725
53	726
53	727
53	728
54	729
54	730
54	731
54	732
54	733
55	734
55	735
55	736
55	737
55	738
56	739
56	740
56	741
56	742
56	743
57	744
57	745
57	746
57	747
57	748
58	749
58	750
58	751
58	752
58	753
58	754
58	755
58	756
58	757
58	758
58	759
58	760
58	761
58	762
58	763
58	764
58	765
58	766
58	767
58	768
59	769
59	770
59	771
59	772
59	773
60	774
60	775
60	776
60	777
60	778
61	779
61	780
61	781
61	782
61	783
62	784
62	785
62	786
62	787
62	788
63	789
63	790
63	791
63	792
63	793
64	794
64	795
64	796
64	797
64	798
65	799
65	800
65	801
65	802
65	803
66	804
66	805
66	806
66	807
66	808
67	809
67	810
67	811
67	812
67	813
67	814
67	815
67	816
67	817
67	818
67	819
67	820
67	821
67	822
67	823
67	824
67	825
67	826
67	827
67	828
67	829
67	830
67	831
67	832
67	833
67	834
67	835
67	836
67	837
67	838
68	839
68	840
68	841
68	842
68	843
68	844
68	845
68	846
68	847
68	848
68	849
68	850
68	851
68	852
68	853
68	854
68	855
68	856
68	857
68	858
68	859
68	860
68	861
68	862
68	863
68	864
68	865
68	866
68	867
68	868
69	869
69	870
69	871
69	872
69	873
69	874
69	875
69	876
69	877
69	878
69	879
69	880
69	881
69	882
69	883
69	884
69	885
69	886
69	887
69	888
69	889
69	890
69	891
69	892
69	893
69	894
69	895
69	896
69	897
69	898
70	899
70	900
70	901
70	902
70	903
70	904
70	905
70	906
70	907
70	908
70	909
70	910
70	911
70	912
70	913
70	914
70	915
70	916
70	917
70	918
70	919
70	920
70	921
70	922
70	923
70	924
70	925
70	926
70	927
70	928
71	929
71	930
71	931
71	932
71	933
71	934
71	935
71	936
71	937
71	938
71	939
71	940
71	941
71	942
71	943
71	944
71	945
71	946
71	947
71	948
71	949
71	950
71	951
71	952
71	953
71	954
71	955
71	956
71	957
71	958
72	959
72	960
72	961
72	962
72	963
73	964
73	965
73	966
73	967
73	968
74	969
74	970
74	971
74	972
74	973
75	974
75	975
75	976
75	977
75	978
76	979
76	980
76	981
76	982
76	983
77	984
77	985
77	986
77	987
77	988
78	989
78	990
78	991
78	992
78	993
79	994
79	995
79	996
79	997
79	998
80	999
80	1000
80	1001
80	1002
80	1003
81	1004
81	1005
81	1006
81	1007
81	1008
82	1009
82	1010
82	1011
82	1012
82	1013
83	1014
83	1015
83	1016
83	1017
83	1018
84	1019
84	1020
84	1021
84	1022
84	1023
85	1024
85	1025
85	1026
85	1027
85	1028
86	1029
86	1030
86	1031
86	1032
86	1033
87	1034
87	1035
87	1036
87	1037
87	1038
88	1039
88	1040
88	1041
88	1042
88	1043
89	1044
89	1045
89	1046
89	1047
89	1048
90	1049
90	1050
90	1051
90	1052
90	1053
91	1054
91	1055
91	1056
91	1057
91	1058
92	1059
92	1060
92	1061
92	1062
92	1063
93	1064
93	1065
93	1066
93	1067
93	1068
94	1069
94	1070
94	1071
94	1072
94	1073
95	1074
95	1075
95	1076
95	1077
95	1078
96	1079
96	1080
96	1081
96	1082
96	1083
96	1084
96	1085
96	1086
96	1087
96	1088
96	1089
96	1090
96	1091
96	1092
96	1093
96	1094
96	1095
96	1096
96	1097
96	1098
96	1099
96	1100
96	1101
96	1102
96	1103
96	1104
96	1105
96	1106
96	1107
96	1108
97	1109
97	1110
97	1111
97	1112
97	1113
97	1114
97	1115
97	1116
97	1117
97	1118
97	1119
97	1120
97	1121
97	1122
97	1123
97	1124
97	1125
97	1126
97	1127
97	1128
97	1129
97	1130
97	1131
97	1132
97	1133
97	1134
97	1135
97	1136
97	1137
97	1138
98	1139
98	1140
98	1141
98	1142
98	1143
98	1144
98	1145
98	1146
98	1147
98	1148
98	1149
98	1150
98	1151
98	1152
98	1153
98	1154
98	1155
98	1156
98	1157
98	1158
98	1159
98	1160
98	1161
98	1162
98	1163
98	1164
98	1165
98	1166
98	1167
98	1168
99	1169
99	1170
99	1171
99	1172
99	1173
99	1174
99	1175
99	1176
99	1177
99	1178
99	1179
99	1180
99	1181
99	1182
99	1183
99	1184
99	1185
99	1186
99	1187
99	1188
99	1189
99	1190
99	1191
99	1192
99	1193
99	1194
99	1195
99	1196
99	1197
99	1198
100	1199
100	1200
100	1201
100	1202
100	1203
101	1204
101	1205
101	1206
101	1207
101	1208
102	1209
102	1210
102	1211
102	1212
102	1213
103	1214
103	1215
103	1216
103	1217
103	1218
104	1219
104	1220
104	1221
104	1222
104	1223
105	1224
105	1225
105	1226
105	1227
105	1228
106	1229
106	1230
106	1231
106	1232
106	1233
107	1234
107	1235
107	1236
107	1237
107	1238
108	1239
108	1240
108	1241
108	1242
108	1243
109	1244
109	1245
109	1246
109	1247
109	1248
110	1249
110	1250
110	1251
110	1252
110	1253
111	1254
111	1255
111	1256
111	1257
111	1258
112	1259
112	1260
112	1261
112	1262
112	1263
113	1264
113	1265
113	1266
113	1267
113	1268
114	1269
114	1270
114	1271
114	1272
114	1273
115	1274
115	1275
115	1276
115	1277
115	1278
116	1279
116	1280
116	1281
116	1282
116	1283
116	1284
116	1285
116	1286
116	1287
116	1288
116	1289
116	1290
116	1291
116	1292
116	1293
116	1294
116	1295
116	1296
116	1297
116	1298
117	1299
117	1300
117	1301
117	1302
117	1303
117	1304
117	1305
117	1306
117	1307
117	1308
117	1309
117	1310
117	1311
117	1312
117	1313
117	1314
117	1315
117	1316
117	1317
117	1318
118	1319
118	1320
118	1321
118	1322
118	1323
118	1324
118	1325
118	1326
118	1327
118	1328
118	1329
118	1330
118	1331
118	1332
118	1333
118	1334
118	1335
118	1336
118	1337
118	1338
119	1339
119	1340
119	1341
119	1342
119	1343
119	1344
119	1345
119	1346
119	1347
119	1348
119	1349
119	1350
119	1351
119	1352
119	1353
119	1354
119	1355
119	1356
119	1357
119	1358
120	1359
120	1360
120	1361
120	1362
120	1363
121	1364
121	1365
121	1366
121	1367
121	1368
122	1369
122	1370
122	1371
122	1372
122	1373
123	1374
123	1375
123	1376
123	1377
123	1378
124	1379
124	1380
124	1381
124	1382
124	1383
125	1384
125	1385
125	1386
125	1387
125	1388
126	1389
126	1390
126	1391
126	1392
126	1393
127	1394
127	1395
127	1396
127	1397
127	1398
128	1399
128	1400
128	1401
128	1402
128	1403
129	1404
129	1405
129	1406
129	1407
129	1408
130	1409
130	1410
130	1411
130	1412
130	1413
131	1414
131	1415
131	1416
131	1417
131	1418
132	1419
132	1420
132	1421
132	1422
132	1423
133	1424
133	1425
133	1426
133	1427
133	1428
134	1429
134	1430
134	1431
134	1432
134	1433
135	1434
135	1435
135	1436
135	1437
135	1438
136	1439
136	1440
136	1441
136	1442
136	1443
137	1444
137	1445
137	1446
137	1447
137	1448
138	1449
138	1450
138	1451
138	1452
138	1453
139	1454
139	1455
139	1456
139	1457
139	1458
140	1459
140	1460
140	1461
140	1462
140	1463
141	1464
141	1465
141	1466
141	1467
141	1468
142	1469
142	1470
142	1471
142	1472
142	1473
143	1474
143	1475
143	1476
143	1477
143	1478
144	782
144	1362
144	1189
\.


--
-- Data for Name: quizzes; Type: TABLE DATA; Schema: public; Owner: pedro
--

COPY public.quizzes (id, title, year, type, series, version, date) FROM stdin;
144	\N	\N	\N	\N	\N	2019-05-09
101	..-data-2016-test-1-test-11B	2016	T	1	B	\N
102	..-data-2016-test-1-test-12A	2016	T	1	A	\N
103	..-data-2016-test-1-test-12B	2016	T	1	B	\N
104	..-data-2016-test-2-test-21A	2016	T	2	A	\N
105	..-data-2016-test-2-test-21B	2016	T	2	B	\N
106	..-data-2016-test-2-test-22A	2016	T	2	A	\N
107	..-data-2016-test-2-test-22B	2016	T	2	B	\N
108	..-data-2016-test-3-test-31A	2016	T	3	A	\N
1	..-data-2010-primeiro-exame-20110113-companion-en	2010	E	1	A	\N
2	..-data-2011-exam1-exame-20120109-companion-en	2011	E	1	A	\N
3	..-data-2011-exam2-exame-20120203-companion-en	2011	E	2	A	\N
4	..-data-2012-exam1-exame-20130109-companion-en	2012	E	1	A	\N
5	..-data-2012-exam2-exame-20130201-companion-en	2012	E	2	A	\N
6	..-data-2013-exam1-exame-20140110-companion-en	2013	E	1	A	\N
7	..-data-2013-exam2-exame-20140130-companion-en	2013	E	2	A	\N
8	..-data-2013-exam3-exame-20140715-companion-en	2013	E	3	A	\N
9	..-data-2014-exam-exam20150109-exame-20150109-companion-A	2014	E	1	A	\N
10	..-data-2014-exam-exam20150109-exame-20150109-companion-B	2014	E	1	B	\N
11	..-data-2014-exam-exam20150127-exame-20150127-companion-A	2014	E	2	A	\N
12	..-data-2014-exam-exam20150127-exame-20150127-companion-B	2014	E	2	B	\N
13	..-data-2014-test-1-test-1	2014	T	1	\N	\N
14	..-data-2014-test-1-test-11A-17co╠Бpias	2014	T	1	A	\N
15	..-data-2014-test-1-test-11B-17co╠Бpias	2014	T	1	B	\N
16	..-data-2014-test-1-test-12A-24co╠Бpias	2014	T	1	A	\N
17	..-data-2014-test-1-test-12B-24co╠Бpias	2014	T	1	B	\N
18	..-data-2014-test-1-test-13A-17co╠Бpias	2014	T	1	A	\N
19	..-data-2014-test-1-test-13B-17co╠Бpias	2014	T	1	B	\N
20	..-data-2014-test-1-test-14A-24co╠Бpias	2014	T	1	A	\N
21	..-data-2014-test-1-test-14B-24co╠Бpias	2014	T	1	B	\N
22	..-data-2014-test-2-test-2	2014	T	2	\N	\N
23	..-data-2014-test-2-test-21A-18co╠Бpias	2014	T	2	A	\N
24	..-data-2014-test-2-test-21B-18co╠Бpias	2014	T	2	B	\N
25	..-data-2014-test-2-test-22A-18co╠Бpias	2014	T	2	A	\N
26	..-data-2014-test-2-test-22B-18co╠Бpias	2014	T	2	B	\N
27	..-data-2014-test-2-test-23A-18co╠Бpias	2014	T	2	A	\N
28	..-data-2014-test-2-test-23B-18co╠Бpias	2014	T	2	B	\N
29	..-data-2014-test-2-test-24A-18co╠Бpias	2014	T	2	A	\N
30	..-data-2014-test-2-test-24B-18co╠Бpias	2014	T	2	B	\N
31	..-data-2014-test-3-test-3	2014	T	3	\N	\N
32	..-data-2014-test-3-test-31A-18copias	2014	T	3	A	\N
33	..-data-2014-test-3-test-31B-18copias	2014	T	3	B	\N
34	..-data-2014-test-3-test-32A-18copias	2014	T	3	A	\N
35	..-data-2014-test-3-test-32B-18copias	2014	T	3	B	\N
36	..-data-2014-test-3-test-33A-18copias	2014	T	3	A	\N
37	..-data-2014-test-3-test-33B-18copias	2014	T	3	B	\N
38	..-data-2014-test-3-test-34A-18copias	2014	T	3	A	\N
39	..-data-2014-test-3-test-34B-18copias	2014	T	3	B	\N
40	..-data-2014-test-4-test-4	2014	T	4	\N	\N
41	..-data-2014-test-4-test-41A-17copias	2014	T	4	A	\N
42	..-data-2014-test-4-test-41B-17copias	2014	T	4	B	\N
43	..-data-2014-test-4-test-42A-16copias	2014	T	4	A	\N
44	..-data-2014-test-4-test-42B-16copias	2014	T	4	B	\N
45	..-data-2014-test-4-test-43A-16copias	2014	T	4	A	\N
46	..-data-2014-test-4-test-43B-16copias	2014	T	4	B	\N
47	..-data-2014-test-4-test-44A-18copias	2014	T	4	A	\N
48	..-data-2014-test-4-test-44B-18copias	2014	T	4	B	\N
49	..-data-2014-test-5-test-5	2014	T	5	\N	\N
50	..-data-2014-test-5-test-51A-17copias	2014	T	5	A	\N
51	..-data-2014-test-5-test-51B-17copias	2014	T	5	B	\N
52	..-data-2014-test-5-test-52A-16copias	2014	T	5	A	\N
53	..-data-2014-test-5-test-52B-16copias	2014	T	5	B	\N
54	..-data-2014-test-5-test-53A-16copias	2014	T	5	A	\N
55	..-data-2014-test-5-test-53B-16copias	2014	T	5	B	\N
56	..-data-2014-test-5-test-54A-18copias	2014	T	5	A	\N
57	..-data-2014-test-5-test-54B-18copias	2014	T	5	B	\N
58	..-data-2014-test-6-test-6	2014	T	6	\N	\N
59	..-data-2014-test-6-test-61A-17copias	2014	T	6	A	\N
60	..-data-2014-test-6-test-61B-17copias	2014	T	6	B	\N
61	..-data-2014-test-6-test-62A-16copias	2014	T	6	A	\N
62	..-data-2014-test-6-test-62B-16copias	2014	T	6	B	\N
63	..-data-2014-test-6-test-63A-16copias	2014	T	6	A	\N
64	..-data-2014-test-6-test-63B-16copias	2014	T	6	B	\N
65	..-data-2014-test-6-test-64A-18copias	2014	T	6	A	\N
66	..-data-2014-test-6-test-64B-18copias	2014	T	6	B	\N
67	..-data-2015-exams-20160108Exam-exame-20160108-companion-A	2015	E	\N	A	\N
68	..-data-2015-exams-20160108Exam-exame-20160108-companion-B	2015	E	\N	B	\N
69	..-data-2015-exams-20160126Exam-exame-20160126-companion-A	2015	E	\N	A	\N
70	..-data-2015-exams-20160126Exam-exame-20160126-companion-B	2015	E	\N	B	\N
71	..-data-2015-exams-20160711Exam-exame-20160711-companion	2015	E	\N	\N	\N
72	..-data-2015-test-1-test-11A	2015	T	1	A	\N
73	..-data-2015-test-1-test-11B	2015	T	1	B	\N
74	..-data-2015-test-1-test-12A	2015	T	1	A	\N
75	..-data-2015-test-1-test-12B	2015	T	1	B	\N
76	..-data-2015-test-1-test-13A	2015	T	1	A	\N
77	..-data-2015-test-1-test-13B	2015	T	1	B	\N
78	..-data-2015-test-2-test-21A	2015	T	2	A	\N
79	..-data-2015-test-2-test-21B	2015	T	2	B	\N
80	..-data-2015-test-2-test-22A	2015	T	2	A	\N
81	..-data-2015-test-2-test-22B	2015	T	2	B	\N
82	..-data-2015-test-2-test-23A	2015	T	2	A	\N
83	..-data-2015-test-2-test-23B	2015	T	2	B	\N
84	..-data-2015-test-3-test-31A	2015	T	3	A	\N
85	..-data-2015-test-3-test-31B	2015	T	3	B	\N
86	..-data-2015-test-3-test-32A	2015	T	3	A	\N
87	..-data-2015-test-3-test-32B	2015	T	3	B	\N
88	..-data-2015-test-3-test-33A	2015	T	3	A	\N
89	..-data-2015-test-3-test-33B	2015	T	3	B	\N
90	..-data-2015-test-4-test-41A	2015	T	4	A	\N
91	..-data-2015-test-4-test-41B	2015	T	4	B	\N
92	..-data-2015-test-4-test-42A	2015	T	4	A	\N
93	..-data-2015-test-4-test-42B	2015	T	4	B	\N
94	..-data-2015-test-4-test-43A	2015	T	4	A	\N
95	..-data-2015-test-4-test-43B	2015	T	4	B	\N
96	..-data-2016-20170113Exam-exame-20170113-companion-A	2016	E	\N	A	\N
97	..-data-2016-20170113Exam-exame-20170113-companion-B	2016	E	\N	B	\N
98	..-data-2016-20170131Exam-exame-20170131-companion-A	2016	E	\N	A	\N
99	..-data-2016-20170131Exam-exame-20170131-companion-B	2016	E	\N	B	\N
100	..-data-2016-test-1-test-11A	2016	T	1	A	\N
109	..-data-2016-test-3-test-31B	2016	T	3	B	\N
110	..-data-2016-test-3-test-32A	2016	T	3	A	\N
111	..-data-2016-test-3-test-32B	2016	T	3	B	\N
112	..-data-2016-test-4-test-41A	2016	T	4	A	\N
113	..-data-2016-test-4-test-41B	2016	T	4	B	\N
114	..-data-2016-test-4-test-42A	2016	T	4	A	\N
115	..-data-2016-test-4-test-42B	2016	T	4	B	\N
116	..-data-2017-20180112-Exam-exame-20180112-companion-A	2017	E	\N	A	\N
117	..-data-2017-20180112-Exam-exame-20180112-companion-B	2017	E	\N	B	\N
118	..-data-2017-20180130-Exam-exame-20180130-companion-A	2017	E	\N	A	\N
119	..-data-2017-20180130-Exam-exame-20180130-companion-B	2017	E	\N	B	\N
120	..-data-2017-test-1-test-11A	2017	T	1	A	\N
121	..-data-2017-test-1-test-11B	2017	T	1	B	\N
122	..-data-2017-test-1-test-12A	2017	T	1	A	\N
123	..-data-2017-test-1-test-12B	2017	T	1	B	\N
124	..-data-2017-test-1-test-13A	2017	T	1	A	\N
125	..-data-2017-test-1-test-13B	2017	T	1	B	\N
126	..-data-2017-test-2-test-21-A	2017	T	2	A	\N
127	..-data-2017-test-2-test-21-B	2017	T	2	B	\N
128	..-data-2017-test-2-test-22-A	2017	T	2	A	\N
129	..-data-2017-test-2-test-22-B	2017	T	2	B	\N
130	..-data-2017-test-2-test-23-A	2017	T	2	A	\N
131	..-data-2017-test-2-test-23-B	2017	T	2	B	\N
132	..-data-2017-test-3-test-31A	2017	T	3	A	\N
133	..-data-2017-test-3-test-31B	2017	T	3	B	\N
134	..-data-2017-test-3-test-32A	2017	T	3	A	\N
135	..-data-2017-test-3-test-32B	2017	T	3	B	\N
136	..-data-2017-test-3-test-33A	2017	T	3	A	\N
137	..-data-2017-test-3-test-33B	2017	T	3	B	\N
138	..-data-2017-test-4-test-41A	2017	T	4	A	\N
139	..-data-2017-test-4-test-41B	2017	T	4	B	\N
140	..-data-2017-test-4-test-42A	2017	T	4	A	\N
141	..-data-2017-test-4-test-42B	2017	T	4	B	\N
142	..-data-2017-test-4-test-43A	2017	T	4	A	\N
143	..-data-2017-test-4-test-43B	2017	T	4	B	\N
\.


--
-- Data for Name: students; Type: TABLE DATA; Schema: public; Owner: pedro
--

COPY public.students (id, year) FROM stdin;
0	2019
\.


--
-- Data for Name: topics; Type: TABLE DATA; Schema: public; Owner: pedro
--

COPY public.topics (id, name) FROM stdin;
\.


--
-- Name: hibernate_sequence; Type: SEQUENCE SET; Schema: public; Owner: pedro
--

SELECT pg_catalog.setval('public.hibernate_sequence', 1, false);


--
-- Name: questions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: pedro
--

SELECT pg_catalog.setval('public.questions_id_seq', 1478, true);


--
-- Name: quizzes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: pedro
--

SELECT pg_catalog.setval('public.quizzes_id_seq', 144, true);


--
-- Name: students_id_seq; Type: SEQUENCE SET; Schema: public; Owner: pedro
--

SELECT pg_catalog.setval('public.students_id_seq', 1, false);


--
-- Name: topics_id_seq; Type: SEQUENCE SET; Schema: public; Owner: pedro
--

SELECT pg_catalog.setval('public.topics_id_seq', 1, false);


--
-- Name: answers answers_pkey; Type: CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.answers
    ADD CONSTRAINT answers_pkey PRIMARY KEY (student_id, question_id, answer_date);


--
-- Name: images images_pkey; Type: CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.images
    ADD CONSTRAINT images_pkey PRIMARY KEY (question_id);


--
-- Name: options options_pkey; Type: CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.options
    ADD CONSTRAINT options_pkey PRIMARY KEY (question_id, option);


--
-- Name: question_has_topic question_has_topic_pkey; Type: CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.question_has_topic
    ADD CONSTRAINT question_has_topic_pkey PRIMARY KEY (topic_id, question_id);


--
-- Name: questions questions_pkey; Type: CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.questions
    ADD CONSTRAINT questions_pkey PRIMARY KEY (id);


--
-- Name: quiz_has_question quiz_has_question_pkey; Type: CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.quiz_has_question
    ADD CONSTRAINT quiz_has_question_pkey PRIMARY KEY (quiz_id, question_id);


--
-- Name: quizzes quizzes_pkey; Type: CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.quizzes
    ADD CONSTRAINT quizzes_pkey PRIMARY KEY (id);


--
-- Name: students students_pkey; Type: CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.students
    ADD CONSTRAINT students_pkey PRIMARY KEY (id);


--
-- Name: topics topics_name_key; Type: CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.topics
    ADD CONSTRAINT topics_name_key UNIQUE (name);


--
-- Name: topics topics_pkey; Type: CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.topics
    ADD CONSTRAINT topics_pkey PRIMARY KEY (id);


--
-- Name: answers answers_question_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.answers
    ADD CONSTRAINT answers_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.questions(id) ON DELETE CASCADE;


--
-- Name: answers answers_quiz_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.answers
    ADD CONSTRAINT answers_quiz_id_fkey FOREIGN KEY (quiz_id) REFERENCES public.quizzes(id) ON DELETE CASCADE;


--
-- Name: answers answers_student_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.answers
    ADD CONSTRAINT answers_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id) ON DELETE CASCADE;


--
-- Name: images images_question_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.images
    ADD CONSTRAINT images_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.questions(id) ON DELETE CASCADE;


--
-- Name: options options_question_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.options
    ADD CONSTRAINT options_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.questions(id) ON DELETE CASCADE;


--
-- Name: question_has_topic question_has_topic_question_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.question_has_topic
    ADD CONSTRAINT question_has_topic_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.questions(id) ON DELETE CASCADE;


--
-- Name: question_has_topic question_has_topic_topic_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.question_has_topic
    ADD CONSTRAINT question_has_topic_topic_id_fkey FOREIGN KEY (topic_id) REFERENCES public.topics(id) ON DELETE CASCADE;


--
-- Name: questions questions_new_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.questions
    ADD CONSTRAINT questions_new_id_fkey FOREIGN KEY (new_id) REFERENCES public.questions(id) ON DELETE CASCADE;


--
-- Name: quiz_has_question quiz_has_question_question_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.quiz_has_question
    ADD CONSTRAINT quiz_has_question_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.questions(id) ON DELETE CASCADE;


--
-- Name: quiz_has_question quiz_has_question_quiz_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.quiz_has_question
    ADD CONSTRAINT quiz_has_question_quiz_id_fkey FOREIGN KEY (quiz_id) REFERENCES public.quizzes(id) ON DELETE CASCADE;


--
-- PostgreSQL database dump complete
--

