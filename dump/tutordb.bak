--
-- PostgreSQL database dump
--

-- Dumped from database version 10.7 (Ubuntu 10.7-0ubuntu0.18.04.1)
-- Dumped by pg_dump version 10.7 (Ubuntu 10.7-0ubuntu0.18.04.1)

SET statement_timeout = 0;
SET lock_timeout = 0;
SET idle_in_transaction_session_timeout = 0;
SET client_encoding = 'UTF8';
SET standard_conforming_strings = on;
SELECT pg_catalog.set_config('search_path', '', false);
SET check_function_bodies = false;
SET client_min_messages = warning;
SET row_security = off;

--
-- Name: plpgsql; Type: EXTENSION; Schema: -; Owner: 
--

CREATE EXTENSION IF NOT EXISTS plpgsql WITH SCHEMA pg_catalog;


--
-- Name: EXTENSION plpgsql; Type: COMMENT; Schema: -; Owner: 
--

COMMENT ON EXTENSION plpgsql IS 'PL/pgSQL procedural language';


SET default_tablespace = '';

SET default_with_oids = false;

--
-- Name: answers; Type: TABLE; Schema: public; Owner: pedro
--

CREATE TABLE public.answers (
    student_id integer NOT NULL,
    question_id integer NOT NULL,
    answer_date timestamp without time zone NOT NULL,
    quiz_id integer,
    time_taken integer,
    option integer NOT NULL
);


ALTER TABLE public.answers OWNER TO pedro;

--
-- Name: hibernate_sequence; Type: SEQUENCE; Schema: public; Owner: pedro
--

CREATE SEQUENCE public.hibernate_sequence
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.hibernate_sequence OWNER TO pedro;

--
-- Name: images; Type: TABLE; Schema: public; Owner: pedro
--

CREATE TABLE public.images (
    question_id integer NOT NULL,
    url character varying(255),
    width integer
);


ALTER TABLE public.images OWNER TO pedro;

--
-- Name: options; Type: TABLE; Schema: public; Owner: pedro
--

CREATE TABLE public.options (
    question_id integer NOT NULL,
    option integer NOT NULL,
    content text,
    correct boolean DEFAULT false
);


ALTER TABLE public.options OWNER TO pedro;

--
-- Name: question_has_topic; Type: TABLE; Schema: public; Owner: pedro
--

CREATE TABLE public.question_has_topic (
    topic_id integer NOT NULL,
    question_id integer NOT NULL,
    votes integer,
    score integer
);


ALTER TABLE public.question_has_topic OWNER TO pedro;

--
-- Name: questions; Type: TABLE; Schema: public; Owner: pedro
--

CREATE TABLE public.questions (
    id integer NOT NULL,
    new_id integer,
    lang character varying(255),
    content text,
    difficulty integer
);


ALTER TABLE public.questions OWNER TO pedro;

--
-- Name: questions_id_seq; Type: SEQUENCE; Schema: public; Owner: pedro
--

CREATE SEQUENCE public.questions_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.questions_id_seq OWNER TO pedro;

--
-- Name: questions_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: pedro
--

ALTER SEQUENCE public.questions_id_seq OWNED BY public.questions.id;


--
-- Name: quiz_has_question; Type: TABLE; Schema: public; Owner: pedro
--

CREATE TABLE public.quiz_has_question (
    quiz_id integer NOT NULL,
    question_id integer NOT NULL
);


ALTER TABLE public.quiz_has_question OWNER TO pedro;

--
-- Name: quizzes; Type: TABLE; Schema: public; Owner: pedro
--

CREATE TABLE public.quizzes (
    id integer NOT NULL,
    title character varying(255),
    lang character varying(255),
    year integer,
    type character varying(1),
    series integer,
    version character varying(1)
);


ALTER TABLE public.quizzes OWNER TO pedro;

--
-- Name: quizzes_id_seq; Type: SEQUENCE; Schema: public; Owner: pedro
--

CREATE SEQUENCE public.quizzes_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.quizzes_id_seq OWNER TO pedro;

--
-- Name: quizzes_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: pedro
--

ALTER SEQUENCE public.quizzes_id_seq OWNED BY public.quizzes.id;


--
-- Name: students; Type: TABLE; Schema: public; Owner: pedro
--

CREATE TABLE public.students (
    id integer NOT NULL
);


ALTER TABLE public.students OWNER TO pedro;

--
-- Name: students_id_seq; Type: SEQUENCE; Schema: public; Owner: pedro
--

CREATE SEQUENCE public.students_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.students_id_seq OWNER TO pedro;

--
-- Name: students_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: pedro
--

ALTER SEQUENCE public.students_id_seq OWNED BY public.students.id;


--
-- Name: topics; Type: TABLE; Schema: public; Owner: pedro
--

CREATE TABLE public.topics (
    id integer NOT NULL,
    name character varying(255)
);


ALTER TABLE public.topics OWNER TO pedro;

--
-- Name: topics_id_seq; Type: SEQUENCE; Schema: public; Owner: pedro
--

CREATE SEQUENCE public.topics_id_seq
    AS integer
    START WITH 1
    INCREMENT BY 1
    NO MINVALUE
    NO MAXVALUE
    CACHE 1;


ALTER TABLE public.topics_id_seq OWNER TO pedro;

--
-- Name: topics_id_seq; Type: SEQUENCE OWNED BY; Schema: public; Owner: pedro
--

ALTER SEQUENCE public.topics_id_seq OWNED BY public.topics.id;


--
-- Name: questions id; Type: DEFAULT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.questions ALTER COLUMN id SET DEFAULT nextval('public.questions_id_seq'::regclass);


--
-- Name: quizzes id; Type: DEFAULT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.quizzes ALTER COLUMN id SET DEFAULT nextval('public.quizzes_id_seq'::regclass);


--
-- Name: students id; Type: DEFAULT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.students ALTER COLUMN id SET DEFAULT nextval('public.students_id_seq'::regclass);


--
-- Name: topics id; Type: DEFAULT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.topics ALTER COLUMN id SET DEFAULT nextval('public.topics_id_seq'::regclass);


--
-- Data for Name: answers; Type: TABLE DATA; Schema: public; Owner: pedro
--

COPY public.answers (student_id, question_id, answer_date, quiz_id, time_taken, option) FROM stdin;
\.


--
-- Data for Name: images; Type: TABLE DATA; Schema: public; Owner: pedro
--

COPY public.images (question_id, url, width) FROM stdin;
451	451.png	100
464	464.png	100
512	512.png	70
518	518.png	120
543	543.png	120
549	549.png	70
917	917.png	100
918	918.png	100
919	919.png	100
920	920.png	120
931	931.png	100
938	938.png	100
941	941.png	120
948	948.png	120
953	953.png	100
957	957.png	100
961	961.png	100
967	967.png	100
973	973.png	100
974	974.png	100
975	975.png	80
976	976.png	80
981	981.png	80
982	982.png	80
983	983.png	80
984	984.png	80
990	990.png	80
992	992.png	80
994	994.png	80
997	997.png	80
1000	1000.png	100
1002	1002.png	80
1007	1007.png	100
1008	1008.png	80
1010	1010.png	80
1012	1012.png	80
1017	1017.png	80
1018	1018.png	80
1020	1020.png	100
1022	1022.png	80
1027	1027.png	100
1028	1028.png	80
1030	1030.png	80
1034	1034.png	80
1051	1051.png	100
1054	1054.png	100
1062	1062.png	100
1078	1078.png	100
1084	1084.png	80
1088	1088.png	80
1092	1092.png	120
1115	1115.png	140
1125	1125.png	140
1133	1133.png	120
1153	1153.png	80
1173	1173.png	120
1176	1176.png	100
1177	1177.png	100
1181	1181.png	100
1188	1188.png	100
1191	1191.png	100
1196	1196.png	100
1201	1201.png	100
1204	1204.png	100
1262	1262.png	100
1264	1264.png	100
1272	1272.png	100
1273	1273.png	80
1274	1274.png	100
1277	1277.png	80
1279	1279.png	100
1282	1282.png	80
1285	1285.png	100
1288	1288.png	80
1289	1289.png	80
1293	1293.png	80
1295	1295.png	80
1296	1296.png	80
1314	1314.png	120
1327	1327.png	140
1328	1328.png	70
1343	1343.png	120
1350	1350.png	140
1351	1351.png	70
1374	1374.png	120
1387	1387.png	140
1388	1388.png	80
1409	1409.png	120
1416	1416.png	140
1417	1417.png	80
1422	1422.png	120
1423	1423.png	100
1424	1424.png	100
1428	1428.png	120
1432	1432.png	130
1438	1438.png	130
1463	1463.png	120
1467	1467.png	120
1473	1473.png	105
1477	1477.png	105
1483	1483.png	120
1484	1484.png	120
1493	1493.png	140
1494	1494.png	140
1506	1506.png	120
1509	1509.png	100
1510	1510.png	120
1522	1522.png	120
1532	1532.png	100
1533	1533.png	120
1543	1543.png	120
1546	1546.png	120
1550	1550.png	60
1553	1553.png	120
1554	1554.png	120
1557	1557.png	120
1559	1559.png	120
1567	1567.png	120
1569	1569.png	60
1572	1572.png	120
1574	1574.png	120
1578	1578.png	120
1579	1579.png	100
1582	1582.png	100
1587	1587.png	100
1588	1588.png	100
1591	1591.png	100
1592	1592.png	100
1594	1594.png	100
1597	1597.png	100
1599	1599.png	100
1602	1602.png	100
1604	1604.png	100
1605	1605.png	100
1640	1640.png	95
1641	1641.png	95
1644	1644.png	95
1648	1648.png	95
1650	1650.png	95
1651	1651.png	95
1654	1654.png	95
1657	1657.png	95
1660	1660.png	95
1661	1661.png	95
1664	1664.png	95
1666	1666.png	95
1670	1670.png	100
1671	1671.png	120
1674	1674.png	120
1677	1677.png	100
1680	1680.png	120
1681	1681.png	120
1684	1684.png	120
1688	1688.png	120
1690	1690.png	60
1691	1691.png	120
1696	1696.png	60
1697	1697.png	120
\.


--
-- Data for Name: options; Type: TABLE DATA; Schema: public; Owner: pedro
--

COPY public.options (question_id, option, content, correct) FROM stdin;
1	0	Não faz sentido usar vistas do tipo de vista módulo, uma\n    vez que estas apenas descrevem o sistema do ponto de vista estático	f
1	1	Deve-se usar exclusivamente vistas do tipo de vista\n    componente-e-conector, que descrevem os aspectos dinâmicos do sistema	f
1	3	As únicas vistas que são relevantes para aspectos de\n    desempenho são vistas do estilo instalação (\\emph{deployment})	f
2	0	Influenciam o processo de desenvolvimento de software e a\n    gestão do mesmo, mas não a arquitectura de software do sistema a\n    desenvolver	f
2	2	São importantes para determinar a viabilidade do sistema,\n    mas uma vez que se chegue à conclusão de que o sistema pode ser\n    desenvolvido com essas restrições, a arquitectura de software já\n    não depende destes factores	f
2	3	Não são uma das influências da arquitectura de software no\n    ciclo de negócio da arquitectura	f
3	1	O estilo implementação (\\emph{implementation}), que nos\n    permite saber onde estão os artefactos que implementam um\n    determinado módulo	f
3	2	O estilo camadas (\\emph{layers}), que nos permite mostrar\n    que a estrutura do nosso sistema é composta por vários módulos que\n    podem ser facilmente reutilizados noutros sistemas	f
3	3	Os estilos cliente-servidor (\\emph{client-server}) e\n    instalação (\\emph{deployment}), que nos permitem isolar a\n    funcionalidade pretendida num componente que executa autonomamente\n    e, portanto, reutilizável noutros sistemas	f
4	0	Manter a arquitectura actual do sistema e optimizar o\n    código de modo a alcançar os níveis de desempenho necessários actualmente	f
4	1	Alterar a vista de instalação do sistema, replicando o servidor por\n    mais máquinas	f
4	2	Rever a arquitectura do sistema de forma a passar parte da\n    computação actualmente feita no servidor para os clientes	f
5	0	Estes três tipos de vistas complementam-se, mas são\n    completamente independentes entre si, mostrando aspectos\n    diferentes de um sistema que não se relacionam de nenhuma forma	f
5	1	Os tipos de vista módulo e componente-e-conector\n    são independentes entre si, mas o tipo de vista afectação depende\n    dos dois primeiros	f
5	2	Cada tipo de vista utiliza elementos de software\n    diferentes, como módulos ou componentes, pelo que não faz sentido\n    falar em relações entre estes tipos de vistas	f
6	1	A camada 4	f
6	2	Numa arquitectura de camadas, qualquer camada é igualmente\n    modificável	f
6	3	A facilidade de modificação não é particularmente\n    facilitada por uma arquitectura de camadas	f
7	0	Só é útil se for feito (ainda que apenas parcialmente)\n    antes de a implementação do sistema ter sido concluída, visto que\n    a arquitectura serve para restringir a implementação	f
7	1	Só é útil se for feito (ainda que apenas parcialmente)\n    antes de a implementação do sistema ter sido concluída, porque\n    se o sistema já está implementado, a sua implementação determina\n    univocamente a arquitectura do sistema	f
7	2	Só é útil se for feito (ainda que apenas parcialmente)\n    antes de o sistema passar todos os testes de aceitação por parte\n    do cliente, altura a partir da qual não vão existir mais\n    alterações de requisitos	f
8	0	Um subconjunto dos requisitos que não entram em conflito\n    entre si e que correspondam aos objectivos de negócio mais importantes	f
8	1	Um subconjunto dos requisitos que mais entram em conflito e\n    para os quais é preciso encontrar compromissos cedo no processo de desenho	f
8	3	Um subconjunto dos requisitos que é escolhido\n    exclusivamente pelo arquitecto tendo em conta a sua influência na\n    arquitectura do sistema	f
9	1	O estilo Dados Partilhados (\\emph{Shared data})	f
9	2	O estilo Cliente-Servidor (\\emph{Client-Server})	f
9	3	O estilo Publicação-Subscrição (\\emph{Publish-subscribe})	f
10	0	O estilo Processos Comunicantes (\\emph{Communicating Processes})	f
10	1	O estilo Canais-e-filtros (\\emph{Pipes-and-filters})	f
10	2	O estilo Par-a-Par (\\emph{Peer-to-Peer})	f
11	0	Visto que é sobre aspectos de execução, a alteração\n    manifesta-se apenas através da alteração dos componentes e\n    conectores existentes no sistema	f
11	1	Esta alteração na forma de funcionamento das aplicações\n    não corresponde a nenhuma alteração da sua arquitectura, visto\n    que, a nível arquitectural, continuamos a ter os mesmos\n    componentes	f
11	2	A única alteração arquitectural é na vista de Instalação\n    (\\emph{Deployment}), uma vez que os componentes e conectores\n    continuam a ser os mesmos, mas executam em sítios diferentes	f
12	1	O estilo Utilização (\\emph{Uses})	f
12	2	O estilo Camadas (\\emph{Layers})	f
12	3	O estilo Par-a-Par (\\emph{Peer-to-Peer})	f
13	0	Vistas de Decomposição (\\emph{Decomposition}) e de Camadas (\\emph{Layers})	f
13	1	Vistas de Decomposição (\\emph{Decomposition}) e de\n    Atribuição de Trabalho (\\emph{Work assignment})	f
163	3	Permitiu satisfazer requisitos de usabilidade do sistema	f
13	3	Vistas de Decomposição (\\emph{Decomposition}) e de Generalização (\\emph{Generalization})	f
14	0	Vistas de Decomposição (\\emph{Decomposition}) e de Implementação (\\emph{Implementation})	f
14	2	Vistas de componente-e-conector	f
14	3	Nenhumas, visto que para efectuar os testes de caixa preta\n    não é necessário conhecer o código ou a estrutura interna da\n    aplicação a ser testada	f
15	0	O estilo Dados partilhados (\\emph{Shared data})	f
15	1	O estilo Repositório (\\emph{Repository})	f
15	3	O estilo Cliente-Servidor (\\emph{Client-Server})	f
16	0	Os estilos Decomposição (\\emph{Decompostion}) e Implementação (\\emph{Implementation})	f
16	1	Os estilos Instalação (\\emph{Deployment}) e Utilização (\\emph{Uses})	f
16	2	Os estilos Cliente-Servidor (\\emph{Client-Server}) e Generalização (\\emph{Generalization})	f
17	0	Vistas do tipo de vista componente-e-conector	f
17	2	Vistas do tipo de vista afectação (\\emph{Allocation})	f
17	3	Todas as anteriores	f
18	1	Permitir a existência de mais do que uma camada de lógica\n    de apresentação para a mesma aplicação (para providenciar, por\n    exemplo, uma interface de \\emph{web services})	f
18	2	Expor diferentes interfaces da camada de lógica de domínio\n    para permitir a existência de diferentes camadas de lógica de apresentação	f
18	3	Facilitar o utilização da camada de acesso a dados por\n    parte da camada de lógica de apresentação	f
19	0	Implementar cada um dos serviços que são executados sempre\n    que é feito um pedido do cliente ao servidor	f
19	1	Melhorar o desempenho do servidor por manter uma cache\n    dos objectos mais acedidos durante o processamento de um pedido\n    feito pelo cliente	f
19	2	Dividir a computação necessária para processar cada um dos\n    pedidos feitos pelo cliente em unidades de trabalho mais pequenas\n    e paralelizáveis	f
20	0	Melhorar o desempenho do servidor aplicacional porque se\n    mantém uma cache de entidades que reduz o número de operações\n    feitas sobre a base de dados	f
20	1	Evitar carregar muitos dados da base de dados quando uma\n    entidade que tem muitas relações com outras entidades é carregada	f
20	3	Conseguir associar a cada entidade carregada pelo servidor\n    aplicacional a identidade dessa entidade na base de dados, para\n    poder actualizar a base de dados mais tarde, se for necessário	f
21	0	Só é útil se for feito (ainda que apenas parcialmente)\n    antes de a implementação do sistema ter sido concluída, visto que\n    a arquitectura serve para restringir a implementação	f
21	1	Só é útil se for feito (ainda que apenas parcialmente)\n    antes de a implementação do sistema ter sido concluída, porque\n    se o sistema já está implementado, a sua implementação determina\n    univocamente a arquitectura do sistema	f
21	2	Só é útil se for feito (ainda que apenas parcialmente)\n    antes de o sistema passar todos os testes de aceitação por parte\n    do cliente, altura a partir da qual não vão existir mais\n    alterações de requisitos	f
22	0	Estes três tipos de vistas complementam-se, mas são\n    completamente independentes entre si, mostrando aspectos\n    diferentes de um sistema que não se relacionam de nenhuma forma	f
22	1	Os tipos de vista módulo e componente-e-conector\n    são independentes entre si, mas o tipo de vista afectação depende\n    dos dois primeiros	f
22	2	Cada tipo de vista utiliza elementos de software\n    diferentes, como módulos ou componentes, pelo que não faz sentido\n    falar em relações entre estes tipos de vistas	f
23	0	Um subconjunto dos requisitos que não entram em conflito\n    entre si e que correspondam aos objectivos de negócio mais importantes	f
23	1	Um subconjunto dos requisitos que mais entram em conflito e\n    para os quais é preciso encontrar compromissos cedo no processo de desenho	f
23	3	Um subconjunto dos requisitos que é escolhido\n    exclusivamente pelo arquitecto tendo em conta a sua influência na\n    arquitectura do sistema	f
24	0	Vistas de Decomposição (\\emph{Decomposition}) e de Camadas (\\emph{Layers})	f
24	1	Vistas de Decomposição (\\emph{Decomposition}) e de\n    Atribuição de Trabalho (\\emph{Work assignment})	f
24	3	Vistas de Decomposição (\\emph{Decomposition}) e de Generalização (\\emph{Generalization})	f
25	0	Influenciam o processo de desenvolvimento de software e a\n    gestão do mesmo, mas não a arquitectura de software do sistema a\n    desenvolver	f
25	2	São importantes para determinar a viabilidade do sistema,\n    mas uma vez que se chegue à conclusão de que o sistema pode ser\n    desenvolvido com essas restrições, a arquitectura de software já\n    não depende destes factores	f
25	3	Não são uma das influências da arquitectura de software no\n    ciclo de negócio da arquitectura	f
26	1	A camada 4	f
26	2	Numa arquitectura de camadas, qualquer camada é igualmente\n    modificável	f
26	3	A facilidade de modificação não é particularmente\n    facilitada por uma arquitectura de camadas	f
27	1	O estilo implementação (\\emph{implementation}), que nos\n    permite saber onde estão os artefactos que implementam um\n    determinado módulo	f
27	2	O estilo camadas (\\emph{layers}), que nos permite mostrar\n    que a estrutura do nosso sistema é composta por vários módulos que\n    podem ser facilmente reutilizados noutros sistemas	f
27	3	Os estilos cliente-servidor (\\emph{client-server}) e\n    instalação (\\emph{deployment}), que nos permitem isolar a\n    funcionalidade pretendida num componente que executa autonomamente\n    e, portanto, reutilizável noutros sistemas	f
28	0	Não faz sentido usar vistas do tipo de vista módulo, uma\n    vez que estas apenas descrevem o sistema do ponto de vista estático	f
28	1	Deve-se usar exclusivamente vistas do tipo de vista\n    componente-e-conector, que descrevem os aspectos dinâmicos do sistema	f
28	3	As únicas vistas que são relevantes para aspectos de\n    desempenho são vistas do estilo instalação (\\emph{deployment})	f
29	0	O estilo Dados partilhados (\\emph{Shared data})	f
29	1	O estilo Repositório (\\emph{Repository})	f
29	3	O estilo Cliente-Servidor (\\emph{Client-Server})	f
30	0	Vistas do tipo de vista componente-e-conector	f
30	2	Vistas do tipo de vista afectação (\\emph{Allocation})	f
30	3	Todas as anteriores	f
31	0	Os estilos Decomposição (\\emph{Decompostion}) e Implementação (\\emph{Implementation})	f
31	1	Os estilos Instalação (\\emph{Deployment}) e Utilização (\\emph{Uses})	f
31	2	Os estilos Cliente-Servidor (\\emph{Client-Server}) e Generalização (\\emph{Generalization})	f
32	1	O estilo Utilização (\\emph{Uses})	f
32	2	O estilo Camadas (\\emph{Layers})	f
32	3	O estilo Par-a-Par (\\emph{Peer-to-Peer})	f
33	0	Vistas de Decomposição (\\emph{Decomposition}) e de Implementação (\\emph{Implementation})	f
33	2	Vistas de componente-e-conector	f
33	3	Nenhumas, visto que para efectuar os testes de caixa preta\n    não é necessário conhecer o código ou a estrutura interna da\n    aplicação a ser testada	f
34	0	Manter a arquitectura actual do sistema e optimizar o\n    código de modo a alcançar os níveis de desempenho necessários actualmente	f
34	1	Alterar a vista de instalação do sistema, replicando o servidor por\n    mais máquinas	f
34	2	Rever a arquitectura do sistema de forma a passar parte da\n    computação actualmente feita no servidor para os clientes	f
35	0	Visto que é sobre aspectos de execução, a alteração\n    manifesta-se apenas através da alteração dos componentes e\n    conectores existentes no sistema	f
35	1	Esta alteração na forma de funcionamento das aplicações\n    não corresponde a nenhuma alteração da sua arquitectura, visto\n    que, a nível arquitectural, continuamos a ter os mesmos\n    componentes	f
35	2	A única alteração arquitectural é na vista de Instalação\n    (\\emph{Deployment}), uma vez que os componentes e conectores\n    continuam a ser os mesmos, mas executam em sítios diferentes	f
36	1	Permitir a existência de mais do que uma camada de lógica\n    de apresentação para a mesma aplicação (para providenciar, por\n    exemplo, uma interface de \\emph{web services})	f
36	2	Expor diferentes interfaces da camada de lógica de domínio\n    para permitir a existência de diferentes camadas de lógica de apresentação	f
36	3	Facilitar o utilização da camada de acesso a dados por\n    parte da camada de lógica de apresentação	f
37	1	O estilo Dados Partilhados (\\emph{Shared data})	f
37	2	O estilo Cliente-Servidor (\\emph{Client-Server})	f
37	3	O estilo Publicação-Subscrição (\\emph{Publish-subscribe})	f
38	0	O estilo Processos Comunicantes (\\emph{Communicating Processes})	f
38	1	O estilo Canais-e-filtros (\\emph{Pipes-and-filters})	f
38	2	O estilo Par-a-Par (\\emph{Peer-to-Peer})	f
39	0	Melhorar o desempenho do servidor aplicacional porque se\n    mantém uma cache de entidades que reduz o número de operações\n    feitas sobre a base de dados	f
39	1	Evitar carregar muitos dados da base de dados quando uma\n    entidade que tem muitas relações com outras entidades é carregada	f
39	3	Conseguir associar a cada entidade carregada pelo servidor\n    aplicacional a identidade dessa entidade na base de dados, para\n    poder actualizar a base de dados mais tarde, se for necessário	f
40	0	Implementar cada um dos serviços que são executados sempre\n    que é feito um pedido do cliente ao servidor	f
40	1	Melhorar o desempenho do servidor por manter uma cache\n    dos objectos mais acedidos durante o processamento de um pedido\n    feito pelo cliente	f
40	2	Dividir a computação necessária para processar cada um dos\n    pedidos feitos pelo cliente em unidades de trabalho mais pequenas\n    e paralelizáveis	f
41	0	É necessário ter exactamente uma vista de cada um destes\n    três tipos de vistas	f
41	1	Apenas se usa uma vista de um destes três tipos, embora\n    outros sistemas possam usar vistas de tipos diferentes	f
41	3	Podemos ter zero ou mais vistas de qualquer um dos três\n    tipos de vista	f
42	0	O arquitecto tem que descrever a arquitectura do sistema\n    de forma a que todos os stakeholders compreendam o funcionamento\n    do sistema	f
42	2	Os stakeholders são a fonte dos requisitos funcionais do sistema	f
42	3	Os stakeholders são a principal fonte dos requisitos\n    funcionais e de qualidade do sistema	f
43	0	Vistas de Decomposição (\\emph{Decomposition}) e de Camadas (\\emph{Layers})	f
43	1	Vistas de Decomposição (\\emph{Decomposition}) e de\n    Atribuição de Trabalho (\\emph{Work assignment})	f
43	3	Vistas de Decomposição (\\emph{Decomposition}) e de Generalização (\\emph{Generalization})	f
44	0	Porque assim se pode fazer o desenvolvimento do sistema de\n      forma incremental, em três etapas claramente separadas	f
44	2	Porque existem requisitos de desempenho diferentes para\n    cada um dos três tipos de funcionalidades, e esta solução permite\n    controlar melhor o desempenho de cada um	f
44	3	Porque esta solução permite o desenvolvimento do sistema\n    em paralelo por três equipas diferentes, que apenas precisam de\n    acordar entre si qual a interface de cada um dos componentes	f
45	1	O estilo Cliente-Servidor (\\emph{Client-Server})	f
45	2	O estilo Par-a-Par (\\emph{Peer-to-Peer})	f
45	3	O estilo Utilização (\\emph{Uses})	f
46	1	As vistas do tipo Componente-e-Conector 	f
46	2	A vista de Atribuição de Trabalho (\\emph{Work Assignment})	f
46	3	A vista de Utilização (\\emph{Uses})	f
47	0	O estilo Implementação (\\emph{Implementation})	f
47	1	O estilo Atribuição de Trabalho (\\emph{Work assignment})	f
47	2	O estilo Decomposição (\\emph{Decomposition})	f
48	0	Um módulo pode conter código de diferentes componentes	f
48	1	Um componente pode executar código de módulos diferentes	f
48	3	Um componente pode conter código de diferentes módulos	f
49	1	O padrão de interacção existente entre os MUAs corresponde\n    ao estilo arquitectural Cliente-Servidor (\\emph{Client-Server})	f
49	2	O padrão de interacção existente entre os MUAs corresponde\n    ao estilo arquitectural \\emph{Blackboard}	f
49	3	O padrão de interacção existente entre os MUAs corresponde\n    ao estilo arquitectural Publicação-Subscrição\n    (\\emph{Publish-subscribe}), sendo que os MTAs e DNS implementam o\n    conector 	f
50	0	A criação de um módulo na decomposição do sistema que\n    represente a plataforma escolhida, módulo este que poderá ser\n    alterado posteriormente quando se trocar de plataforma	f
50	1	A arquitectura padrão para aplicações empresariais,\n    composta pelas três camadas de ``Lógica de apresentação,''\n    ``Lógica de domínio,'' e ``Acesso a dados''	f
50	2	A criação de um módulo genérico com os serviços comuns a\n    todas as plataformas, módulo este que é depois especializado\n    por módulos específicos para cada plataforma	f
51	0	Em ambas as vistas componente-e-conector e Instalação\n    (\\emph{Deployment}), visto que cada uma delas aborda um aspecto\n    diferente da concretização da táctica de replicação	f
51	1	Apenas na vista de componente-e-conector que inclui o\n    servidor web	f
51	3	A utilização dessa táctica não altera nenhuma das vistas\n    da arquitectura de uma aplicação web, visto que a arquitectura\n    padrão para este tipo de aplicações já suporta, de raiz, a\n    replicação do servidor web	f
52	1	Utilizar uma táctica de introdução de concorrência de\n    forma a que possam existir mais servidores a processar pedidos	f
52	2	Utilizar uma táctica de replicação activa de forma a que\n    se consiga obter respostas com um tempo médio de resposta mais baixo	f
52	3	Substituir a máquina usada pelo servidor por uma máquina\n    mais poderosa que satisfaça os novos requisitos de desempenho,\n    mantendo apenas um componente servidor em funcionamento	f
53	0	Vistas do tipo de vista componente-e-conector	f
53	1	Vistas do tipo de vista módulo	f
53	2	Vistas do tipo de vista afectação (\\emph{Allocation})	f
54	0	O estilo Dados partilhados (\\emph{Shared data})	f
54	2	O estilo Camadas (\\emph{Layers})	f
54	3	O estilo Cliente-Servidor (\\emph{Client-Server})	f
406	3	Usabilidade	f
55	0	Criando mecanismos que permitam, em primeiro lugar,\n    detectar falhas numa caixa e, uma vez detectada uma falha, reparar a\n    falha rapidamente para que a caixa volte a operar normalmente	f
55	1	Prevendo nas vistas de componente-e-conector e na de\n    instalação (\\emph{deployment}) a execução de pelo menos um\n    componente redundante em cada caixa, para evitar que existam\n    falhas nas caixas	f
55	3	Replicando os servidores que são contactados pelas caixas,\n    e colocando um \\emph{load balancer} entre as caixas e os\n    servidores	f
56	1	Reflecte-se apenas ao nível da vista de instalação\n    (\\emph{deployment})	f
56	2	Reflecte-se apenas ao nível das vistas do tipo de vista módulo	f
56	3	Pode reflectir-se não só ao nível das funcionalidades do\n    sistema, como ainda ao nível das vistas componente-e-conector e instalação\n    (\\emph{deployment})	f
57	0	Eliminava algumas das relações de utilização para quebrar\n    os ciclos	f
57	1	Voltava ao estilo decomposição (\\emph{decomposition}) para\n    decompor o sistema de outra forma, de modo a que não surjam ciclos\n    no estilo de utilização	f
57	3	A existência de ciclos ou de muitas relações de utilização\n    não é um problema que precise de ser resolvido	f
58	0	O número de elementos de hardware tem que ser igual ao\n    número de componentes	f
58	1	O número de elementos de hardware tem que ser menor ou\n    igual ao número de componentes	f
58	2	O número de elementos de hardware tem que ser maior ou\n    igual ao número de componentes	f
59	0	Quando a lógica de domínio da aplicação é implementada\n    recorrendo ao padrão Transaction Script que acede aos dados persistentes através de Record Sets	f
59	1	Quando a lógica de domínio da aplicação é implementada\n    recorrendo ao padrão Domain Model 	f
59	3	Independentemente de qual é a forma usada para implementar\n    a lógica de domínio da aplicação	f
60	0	Uma vez que o padrão Unit of Work coordena as escritas na\n    base de dados, consegue detectar quando é que os dados podem ficar\n    incoerentes, e aborta a operação nesses casos	f
60	1	Cada Unit of Work utiliza um Identity Map para evitar este\n    problema	f
60	2	Visto que todas as operações de acesso a dados feitas no\n    contexto de uma Unit of Work são feitas na mesma transacção de\n    base de dados, a base de dados garante a coerência dos dados	f
61	1	Apenas se usa uma vista de um destes três tipos, embora\n    outros sistemas possam usar vistas de tipos diferentes	f
61	2	É necessário ter pelo menos uma vista de cada um destes\n    três tipos de vistas, mas podemos ter mais do que uma vista de\n    cada tipo	f
61	3	Podemos ter zero ou mais vistas de qualquer um dos três\n    tipos de vista	f
62	1	Porque assim é mais fácil modificar cada uma das três\n      funcionalidades sem afectar as outras funcionalidades do sistema	f
62	2	Porque existem requisitos de desempenho diferentes para\n    cada um dos três tipos de funcionalidades, e esta solução permite\n    controlar melhor o desempenho de cada um	f
62	3	Porque esta solução permite o desenvolvimento do sistema\n    em paralelo por três equipas diferentes, que apenas precisam de\n    acordar entre si qual a interface de cada um dos componentes	f
63	0	Vistas de Decomposição (\\emph{Decomposition}) e de Camadas (\\emph{Layers})	f
63	1	Vistas de Decomposição (\\emph{Decomposition}) e de\n    Atribuição de Trabalho (\\emph{Work assignment})	f
63	3	Vistas de Decomposição (\\emph{Decomposition}) e de Generalização (\\emph{Generalization})	f
64	0	O arquitecto tem que descrever a arquitectura do sistema\n    de forma a que todos os stakeholders compreendam o funcionamento\n    do sistema	f
64	1	Os stakeholders financiam o desenvolvimento do sistema e,\n    portanto, ao estabelecerem o orçamento disponível, influenciam a\n    arquitectura do sistema	f
64	3	Os stakeholders são a principal fonte dos requisitos\n    funcionais e de qualidade do sistema	f
65	0	A criação de um módulo na decomposição do sistema que\n    represente a plataforma escolhida, módulo este que poderá ser\n    alterado posteriormente quando se trocar de plataforma	f
65	1	A arquitectura padrão para aplicações empresariais,\n    composta pelas três camadas de ``Lógica de apresentação,''\n    ``Lógica de domínio,'' e ``Acesso a dados''	f
65	2	A criação de um módulo genérico com os serviços comuns a\n    todas as plataformas, módulo este que é depois especializado\n    por módulos específicos para cada plataforma	f
66	0	O padrão de interacção existente entre os MUAs corresponde\n    ao estilo arquitectural Par-a-Par (\\emph{Peer-to-Peer})	f
66	1	O padrão de interacção existente entre os MUAs corresponde\n    ao estilo arquitectural Cliente-Servidor (\\emph{Client-Server})	f
66	2	O padrão de interacção existente entre os MUAs corresponde\n    ao estilo arquitectural \\emph{Blackboard}	f
81	0	Os \\emph{stakeholders} requerem um sistema onde os\n      problemas de desempenho não sejam considerados como os mais\n      relevantes	f
67	0	O estilo Processos Comunicantes (\\emph{Communicating Processes})	f
67	2	O estilo Par-a-Par (\\emph{Peer-to-Peer})	f
67	3	O estilo Utilização (\\emph{Uses})	f
68	0	A vista de Decomposição (\\emph{Decomposition})	f
68	1	As vistas do tipo Componente-e-Conector 	f
68	2	A vista de Atribuição de Trabalho (\\emph{Work Assignment})	f
69	1	O estilo Atribuição de Trabalho (\\emph{Work assignment})	f
69	2	O estilo Decomposição (\\emph{Decomposition})	f
69	3	Nenhum, visto que esta descrição não tem nada a ver com a\n    arquitectura do sistema	f
70	0	Um módulo pode conter código de diferentes componentes	f
70	1	Um componente pode executar código de módulos diferentes	f
70	2	Um módulo pode executar código de componentes diferentes	f
71	0	O estilo Dados partilhados (\\emph{Shared data})	f
71	2	O estilo Camadas (\\emph{Layers})	f
71	3	O estilo Cliente-Servidor (\\emph{Client-Server})	f
72	0	Vistas do tipo de vista componente-e-conector	f
72	1	Vistas do tipo de vista módulo	f
72	3	Todas as anteriores	f
73	1	Utilizar uma táctica de introdução de concorrência de\n    forma a que possam existir mais servidores a processar pedidos	f
73	2	Utilizar uma táctica de replicação activa de forma a que\n    se consiga obter respostas com um tempo médio de resposta mais baixo	f
73	3	Substituir a máquina usada pelo servidor por uma máquina\n    mais poderosa que satisfaça os novos requisitos de desempenho,\n    mantendo apenas um componente servidor em funcionamento	f
74	0	Em ambas as vistas componente-e-conector e Instalação\n    (\\emph{Deployment}), visto que cada uma delas aborda um aspecto\n    diferente da concretização da táctica de replicação	f
74	2	Apenas na vista de Instalação (\\emph{Deployment}), visto\n    que a utilização desta táctica não altera os componentes, mas sim\n    onde é que eles executam	f
74	3	A utilização dessa táctica não altera nenhuma das vistas\n    da arquitectura de uma aplicação web, visto que a arquitectura\n    padrão para este tipo de aplicações já suporta, de raiz, a\n    replicação do servidor web	f
75	1	Prevendo nas vistas de componente-e-conector e na de\n    instalação (\\emph{deployment}) a execução de pelo menos um\n    componente redundante em cada caixa, para evitar que existam\n    falhas nas caixas	f
75	2	Mostrando na vista de instalação (\\emph{deployment}) que\n    num hipermercado existem várias caixas em funcionamento em cada\n    instante, pelo que já existe redundância ao nível do hardware para\n    satisfazer este requisito	f
75	3	Replicando os servidores que são contactados pelas caixas,\n    e colocando um \\emph{load balancer} entre as caixas e os\n    servidores	f
76	1	Reflecte-se apenas ao nível da vista de instalação\n    (\\emph{deployment})	f
76	2	Reflecte-se apenas ao nível das vistas do tipo de vista módulo	f
76	3	Pode reflectir-se não só ao nível das funcionalidades do\n    sistema, como ainda ao nível das vistas componente-e-conector e instalação\n    (\\emph{deployment})	f
77	0	O número de elementos de hardware tem que ser igual ao\n    número de componentes	f
77	1	O número de elementos de hardware tem que ser menor ou\n    igual ao número de componentes	f
77	2	O número de elementos de hardware tem que ser maior ou\n    igual ao número de componentes	f
78	0	Eliminava algumas das relações de utilização para quebrar\n    os ciclos	f
78	2	Substituía algumas das relações de utilização por relações\n    de generalização (\\emph{generalization}) de modo a quebrar os\n    ciclos	f
78	3	A existência de ciclos ou de muitas relações de utilização\n    não é um problema que precise de ser resolvido	f
79	0	Uma vez que o padrão Unit of Work coordena as escritas na\n    base de dados, consegue detectar quando é que os dados podem ficar\n    incoerentes, e aborta a operação nesses casos	f
79	2	Visto que todas as operações de acesso a dados feitas no\n    contexto de uma Unit of Work são feitas na mesma transacção de\n    base de dados, a base de dados garante a coerência dos dados	f
79	3	Este problema não é resolvido pelo Unit of Work, e é uma\n    das desvantagens da sua utilização, porque é o programador que tem\n    que lidar com o problema directamente no código que escreve	f
80	1	Quando a lógica de domínio da aplicação é implementada\n    recorrendo ao padrão Domain Model 	f
80	2	Quando a lógica de domínio da aplicação é implementada\n    recorrendo ao padrão Service Layer	f
80	3	Independentemente de qual é a forma usada para implementar\n    a lógica de domínio da aplicação	f
199	2	O estilo arquitectural Dados-Partilhados \\emph{Shared-Data}	f
81	2	Os \\emph{stakeholders} aceitam que duas leituras\n      simultâneas do mesmo ficheiro, efectuadas por aplicações\n      diferentes, possam retornar resultados diferentes	f
81	3	O sistema foi desenvolvido usando complexos algoritmos\n      distribuídos que garantem a escalabilidade	f
82	0	As qualidades de disponibilidade e de desempenho são\n       conflituosas	f
82	1	A qualidade de disponibilidade é a mais relevante, pelo\n       que o desempenho é tratado a posteriori e em função das\n       tácticas escolhidas para a disponibilidade	f
82	3	É ao nível da instalação que se garantem as qualidades\n       de disponibilidade e desempenho	f
83	1	Replicação activa, replicação passiva e \\emph{spare}	f
83	2	Replicação passiva e \\emph{spare}	f
83	3	Quorum, replicação activa e replicação passiva	f
84	1	Resincronização de estado	f
84	2	\\emph{Checkpoint/Rollback}	f
84	3	Todas as anteriores	f
85	0	Autenticar utilizadores e autorizar utilizadores	f
85	2	Autenticar utilizadores, autorizar utilizadores e limitar o acesso	f
85	3	Autenticar utilizadores, autorizar utilizadores, limitar o acesso e manter integridade	f
86	0	Porque esta táctica é aquela que não sobrecarrega o \\emph{NameNode}	f
86	1	Mas também poderiam usar a táctica de \\emph{ping} pois o\n      \\emph{overhead} desta táctica no \\emph{NameNode} seria idêntico	f
86	3	Para informarem os restantes \\emph{DataNodes} que estão disponíveis	f
87	0	Pois possui uma interface bem definida	f
87	1	Que agrega módulos de acordo com relações de utilização	f
87	2	Pois possui uma interface bem definida e esconde um comportamento interno	f
88	0	Pois é uma extensão natural dos casos de uso	f
88	2	Mas necessita de ser complementado, para cada relação de\n      utiliza, com informação sobre o nível de ligação associado	f
88	3	E fornece toda a informação suficiente para medir o impacto	f
89	1	O sucesso da invocação pode não ter impacto no correcto funcionamento do módulo invocado	f
89	2	A invocação pode não passar dados entre os módulos	f
89	3	A relação de utilização requer que as invocações devolvam o controlo ao módulo invocador	f
90	1	Se eles não fossem ordenados não saberíamos onde começar\n      o processo de desenho	f
90	2	Se um dos \\emph{stakeholders} se queixar que o seu\n      requisito não foi satisfeito, podemos explicar-lhe que há\n      outros mais importantes	f
90	3	Quando não é possível satisfazer todos os requisitos de\n      forma óptima, é importante conhecer a sua importância relativa\n      para que se procure uma solução que corresponda a um\n      compromisso satisfatório	f
91	0	O estilo Dados Partilhados (\\emph{Shared data})	f
91	1	O estilo Canais-e-filtros (\\emph{Pipes-and-filters})	f
91	3	O estilo Cliente-Servidor (\\emph{Client-Server})	f
92	1	Uma arquitectura Cliente-Servidor, em que o\n      \\emph{NameNode} é o Cliente e o \\emph{DataNode} é o Servidor	f
92	2	Uma arquitectura Par-a-Par	f
92	3	Uma arquitectura Processos Comunicantes	f
93	0	Essa vista estará sempre incompleta sem o\n      \\emph{NameNode}, visto que o \\emph{HDFS Client} precisa de\n      interagir com ele	f
93	1	Essa vista estará sempre incompleta sem o\n      \\emph{NameNode}, visto que o \\emph{DataNode} precisa de\n      interagir com ele	f
93	2	A vista não precisa de incluir o \\emph{NameNode}, mas\n      nesse caso não será possível raciocinar sobre a disponibilidade\n      do sistema	f
94	0	O estilo Dados Partilhados	f
94	1	O estilo Processos Comunicantes	f
94	3	O estilo Par-a-Par	f
95	0	O sistema passava a responder em menos tempo a todos os\n      pedidos dos clientes	f
95	1	O desempenho do sistema não seria alterado	f
95	2	O sistema passava a poder responder em menos tempo a\n      pedidos de localizações de ficheiros	f
96	0	Controlar e reduzir a interface exposta pela camada de\n      lógica de domínio, aumentando assim a modificabilidade dessa\n      camada	f
96	2	Permitir a existência de diferentes camadas de lógica de apresentação	f
96	3	Facilitar a utilização da camada de acesso a dados por\n      parte da camada de lógica de apresentação	f
97	0	Isso não deve ser permitido porque todas as interacções\n      entre componentes devem ser feitas através do \\emph{Repositório}	f
97	1	É uma solução aceitável se pretendermos reduzir as\n      dependências entre os vários componentes do sistema	f
469	3	Increase resource efficiency.	f
97	2	Essa é a solução recomendada se existir um fluxo de\n      controlo que envolva a coreografia dos dois componentes	f
98	0	Vistas de Atribuição de Trabalho (\\emph{Work Assignment})	f
98	1	Vistas de Generalização (\\emph{Generalization})	f
98	2	Vistas de Instalação (\\emph{Deployment})	f
99	0	As camadas de lógica de apresentação, lógica de domínio,\n      e acesso a dados	f
99	1	As aplicações web tradicionais, os \\emph{mashups}, e as\n      \\emph{rich internet applications} (RIAs)	f
99	3	As camadas de \\emph{web services}, lógica de domínio, e\n      acesso a dados	f
100	0	Do estilo Atribuição de Trabalho	f
100	1	Do estilo Cliente-Servidor	f
100	3	Do estilo Processos Comunicantes	f
101	1	Replicação activa, replicação passiva e \\emph{spare}	f
101	2	Replicação passiva e \\emph{spare}	f
101	3	Quorum, replicação activa e replicação passiva	f
102	0	Os \\emph{stakeholders} requerem um sistema onde os\n      problemas de desempenho não sejam considerados como os mais\n      relevantes	f
102	1	Os \\emph{stakeholders} mais importantes são uma pequena\n      equipa de desenvolvimento que tem elevadas competências\n      técnicas	f
102	2	Os \\emph{stakeholders} aceitam que duas leituras\n      simultâneas do mesmo ficheiro, efectuadas por aplicações\n      diferentes, possam retornar resultados diferentes	f
103	0	\\emph{Shadow operation}	f
103	1	Resincronização de estado	f
103	3	Todas as anteriores	f
104	0	As qualidades de disponibilidade e de desempenho são\n       conflituosas	f
104	1	A qualidade de disponibilidade é a mais relevante, pelo\n       que o desempenho é tratado a posteriori e em função das\n       tácticas escolhidas para a disponibilidade	f
104	3	É ao nível da instalação que se garantem as qualidades\n       de disponibilidade e desempenho	f
105	0	Porque esta táctica é aquela que não sobrecarrega o \\emph{NameNode}	f
105	1	Mas também poderiam usar a táctica de \\emph{ping} pois o\n      \\emph{overhead} desta táctica no \\emph{NameNode} seria idêntico	f
105	2	Mas também poderiam usar a táctica de excepções	f
106	1	Autenticar utilizadores, autorizar utilizadores e limitar exposição	f
106	2	Autenticar utilizadores, autorizar utilizadores e limitar o acesso	f
106	3	Autenticar utilizadores, autorizar utilizadores, limitar o acesso e manter integridade	f
107	0	Pois possui uma interface bem definida	f
107	2	Pois possui uma interface bem definida e esconde um comportamento interno	f
107	3	Que fornece um conjunto de serviços completo e coeso	f
108	0	O sucesso da invocação pode não ter impacto no correcto funcionamento do módulo invocador	f
108	1	O sucesso da invocação pode não ter impacto no correcto funcionamento do módulo invocado	f
108	2	A invocação pode não passar dados entre os módulos	f
109	0	Pois é uma extensão natural dos casos de uso	f
109	1	Mas necessita de informação sobre a estrutura interna dos módulos	f
109	2	Mas necessita de ser complementado, para cada relação de\n      utiliza, com informação sobre o nível de ligação associado	f
110	0	Uma arquitectura Cliente-Servidor, em que o\n      \\emph{DataNode} é o Cliente e o \\emph{NameNode} é o Servidor	f
110	1	Uma arquitectura Cliente-Servidor, em que o\n      \\emph{NameNode} é o Cliente e o \\emph{DataNode} é o Servidor	f
110	2	Uma arquitectura Par-a-Par	f
111	0	Devemos satisfazer primeiro os requisitos dos\n      \\emph{stakeholders} mais importantes, como por exemplo o\n      cliente	f
111	1	Se eles não fossem ordenados não saberíamos onde começar\n      o processo de desenho	f
111	3	Quando não é possível satisfazer todos os requisitos de\n      forma óptima, é importante conhecer a sua importância relativa\n      para que se procure uma solução que corresponda a um\n      compromisso satisfatório	f
112	1	O estilo Processos Comunicantes	f
112	2	O estilo Instalação (\\emph{Deployment})	f
112	3	O estilo Par-a-Par	f
113	1	O estilo Canais-e-filtros (\\emph{Pipes-and-filters})	f
113	2	O estilo Par-a-Par (\\emph{Peer-to-Peer})	f
113	3	O estilo Cliente-Servidor (\\emph{Client-Server})	f
114	1	Essa vista estará sempre incompleta sem o\n      \\emph{NameNode}, visto que o \\emph{DataNode} precisa de\n      interagir com ele	f
114	2	A vista não precisa de incluir o \\emph{NameNode}, mas\n      nesse caso não será possível raciocinar sobre a disponibilidade\n      do sistema	f
131	3	Usava uma vista do estilo arquitectural Instalação (\\emph{Deployment})	f
101	0	Replicação activa e replicação passiva	t
102	3	O sistema foi desenvolvido usando complexos algoritmos\n      distribuídos que garantem a escalabilidade	t
103	2	\\emph{Checkpoint/Rollback}	t
104	2	As qualidades de disponibilidade e de desempenho não são\n       conflituosas	t
114	3	A garantia de disponibilidade pode ser dada pela\n      utilização de um conector adequado entre o \\emph{HDFS Client} e os\n      \\emph{DataNodes}	f
115	0	O sistema passava a responder em menos tempo a todos os\n      pedidos dos clientes	f
115	2	O sistema passava a poder responder em menos tempo a\n      pedidos de localizações de ficheiros	f
115	3	O sistema passava a poder responder em menos tempo aos\n      pedidos de actualização dos metadados feitos pelos \\emph{DataNodes}	f
116	0	Isso não deve ser permitido porque todas as interacções\n      entre componentes devem ser feitas através do \\emph{Repositório}	f
116	2	Essa é a solução recomendada se existir um fluxo de\n      controlo que envolva a coreografia dos dois componentes	f
116	3	Essa interacção não pode ser representada nesta vista,\n      mas sim numa outra vista da arquitectura do sistema	f
117	0	Controlar e reduzir a interface exposta pela camada de\n      lógica de domínio, aumentando assim a modificabilidade dessa\n      camada	f
117	2	Permitir a existência de diferentes camadas de lógica de apresentação	f
117	3	Facilitar a utilização da camada de acesso a dados por\n      parte da camada de lógica de apresentação	f
118	0	Vistas de Atribuição de Trabalho (\\emph{Work Assignment})	f
118	1	Vistas de Generalização (\\emph{Generalization})	f
118	3	Vistas de Implementação (\\emph{Implementation})	f
119	1	Do estilo Cliente-Servidor	f
119	2	Do estilo Instalação	f
119	3	Do estilo Processos Comunicantes	f
120	0	As camadas de lógica de apresentação, lógica de domínio,\n      e acesso a dados	f
120	2	O \\emph{browser} web, o servidor web, e a base de dados	f
120	3	As camadas de \\emph{web services}, lógica de domínio, e\n      acesso a dados	f
121	0	Determinante para garantir a escalabilidade do sistema	f
121	1	Determinante para que os custos de falha de um elemento de hardware sejam reduzidos	f
121	3	Determinante para permitir a integração com sistemas legados	f
122	0	Permite a criação de \\emph{checkpoints} mas tem que pedir toda a informação de uma vez só ao \\emph{NameNode}	f
122	2	Permite a criação de \\emph{checkpoints} com a informação que recebe gradualmente do \\emph{NameNode}	f
122	3	Permite a criação de \\emph{checkpoints} sem necessitar de informação do \\emph{NameNode}	f
123	0	As qualidades de desempenho e disponibilidade	f
123	1	Apenas a qualidade de desempenho	f
123	3	As qualidades de desempenho e segurança	f
124	0	Aumenta a facilidade de modificação do sistema sempre que se pretenda mudar de política de localização	f
124	2	Aumenta a facilidade de modificação do sistema sempre que se altera a estrutura de instalação	f
124	3	Permite que as várias réplicas sejam colocadas em diferentes \\emph{DataNodes}	f
125	1	Mas levaria a um maior \\emph{overhead} no \\emph{NameNode}	f
125	2	Mas também poderia usar a táctica de excepções	f
125	3	Para informar os restantes \\emph{DataNodes} que estão disponíveis	f
126	1	Este \\emph{script} é um módulo do sistema e implementa uma táctica de segurança	f
126	2	Este \\emph{script} é um módulo do sistema e implementa uma táctica de facilidade de modificação	f
126	3	Este \\emph{script} não pode ser considerado como um módulo do sistema pois é apenas un \\emph{script}	f
127	0	Disponibilidade, segurança, e desempenho	f
127	1	Apenas de disponibilidade	f
127	2	Disponibilidade e desempenho	f
128	0	Apenas são necessárias vistas do tipo componente-conector	f
128	1	Todos os tipos vista podem ser necessários	f
128	3	Os tipos de vista módulo não são de certeza necessários	f
129	1	Indica que se pode seguir um processo de desenvolvimento incremental dos módulos	f
129	2	Indica que a os módulos que têm dependências circulares entre eles devem ser os primeiros a ser implementados	f
129	3	Sugere que as relações de usa devem ser substituídas por relações do tipo é-um	f
130	0	É que a relação \\emph{pode usar} define uma restrição para as possíveis relações \\emph{usa} entre módulos pertencentes a camadas diferentes	f
130	1	É que a relação \\emph{usa} apenas pode ocorrer entre módulos pertencentes à mesma camada	f
130	2	É que a relação \\emph{pode usar} não indica que o correcto funcionamento da camada acima depende da correcta implementação da camada abaixo	f
131	0	Não faz sentido usar uma vista arquitectural para isso,\n      visto que é um pormenor de implementação do sistema que não\n      afecta as suas qualidades	f
131	1	Usava uma vista do tipo módulo que mostrasse as\n      interfaces providenciadas para o cliente efectuar a escrita	f
132	1	Basta mostrar, através de vistas do tipo\n      componente-e-conector, que o sistema mantém réplicas dos dados\n      em diferentes componentes	f
132	2	Basta mostrar, através de vistas do estilo Instalação,\n      que o componente \\emph{DataNode} executa em mais do que uma\n      máquina do \\emph{cluster}	f
132	3	Basta mostrar, através de vistas do estilo Decomposição,\n      que existem módulos responsáveis por fazer a replicação dos\n      blocos de um ficheiro	f
133	0	O estilo Dados Partilhados (\\emph{Shared data})	f
133	1	O estilo Canais-e-filtros (\\emph{Pipes-and-filters})	f
133	2	O estilo Par-a-Par (\\emph{Peer-to-Peer})	f
134	0	A vista de componente-e-conector da aplicação tem\n      necessariamente que passar a incluir os componentes \\emph{NameNode} e\n      \\emph{DataNode} com os quais a aplicação web tem que interagir\n      para aceder aos seus dados	f
134	2	A aplicação continua a ter uma arquitectura de três\n      \\emph{tiers}, em que um deles é o sistema HDFS	f
134	3	A vista de Instalação do sistema tem que ser alterada\n      para passar a incluir os \\emph{racks} necessários para o\n      funcionamento do HDFS	f
135	0	O estilo Canais-e-Filtros (\\emph{Pipes-and-filters})	f
135	1	O estilo Publicação-Subscrição (\\emph{Publish-Subscribe})	f
135	3	O estilo Cliente-Servidor (\\emph{Client Server})	f
136	1	Pode afectar a camada de acesso a dados porque cada\n      padrão coloca requisitos diferentes na interface dessa camada	f
136	2	Não afecta a camada de lógica de apresentação porque não\n      a pode usar	f
136	3	Não afecta a camada de acesso a dados porque a camada de\n      acesso a dados não usa a camada de lógica de domínio	f
137	0	Uma máquina pode executar apenas um componente, mas um\n      componente pode executar em mais do que uma máquina	f
137	1	Um componente pode executar apenas numa máquina, mas uma\n      máquina pode executar mais do que um componente	f
137	3	Todos os componentes podem executar em todas as máquinas	f
138	0	Na vista de Instalação, visto que o componente\n      de apresentação passa a executar-se noutro sítio	f
138	1	Na vista de componente-e-conector, porque o\n      conector que liga o cliente web ao servidor web tem que mudar	f
138	2	Na vista de camadas, porque a ordem das camadas passa a\n      ser outra	f
139	0	Uma arquitectura de \\emph{web services}	f
139	1	Uma arquitectura Cliente-Servidor, em que o \\emph{mashup}\n      é o cliente e as várias fontes são os servidores	f
139	3	Uma arquitectura Publicação-Subscrição, em que as várias\n      fontes publicam eventos com as alterações efectuadas e o\n      \\emph{mashup} subscreve esses eventos	f
140	0	Apenas são necessárias vistas do tipo componente-e-conector	f
140	1	Apenas são necessárias vistas do estilo Instalação	f
140	2	Podem ser necessárias vistas do tipo componente-e-conector e do estilo Instalação	f
141	1	Não permite a criação de \\emph{checkpoints}	f
141	2	Permite a criação de \\emph{checkpoints} com a informação que recebe gradualmente do \\emph{NameNode}	f
141	3	Permite a criação de \\emph{checkpoints} sem necessitar de informação do \\emph{NameNode}	f
142	1	Apenas a qualidade de desempenho	f
142	2	Apenas a qualidade de disponibilidade	f
142	3	As qualidades de desempenho e segurança	f
143	0	Determinante para garantir a escalabilidade do sistema	f
143	1	Determinante para que os custos de falha de um elemento de hardware sejam reduzidos	f
143	3	Determinante para permitir a integração com sistemas legados	f
144	0	Porque esta táctica é aquela que não sobrecarrega o \\emph{NameNode}	f
144	1	Mas levaria a um maior \\emph{overhead} no \\emph{NameNode}	f
144	3	Para informar os restantes \\emph{DataNodes} que estão disponíveis	f
145	0	Aumenta a facilidade de modificação do sistema sempre que se pretenda mudar de política de localização	f
145	1	Permite que os \\emph{DataNodes} decidam que réplicas possuem	f
145	2	Aumenta a facilidade de modificação do sistema sempre que se altera a estrutura de instalação	f
146	0	Este \\emph{script} pertence ao módulo de instalação do sistema	f
146	1	Este \\emph{script} é um módulo do sistema e implementa uma táctica de segurança	f
146	2	Este \\emph{script} é um módulo do sistema e implementa uma táctica de facilidade de modificação	f
147	0	Disponibilidade, segurança, e desempenho	f
147	2	Disponibilidade e desempenho	f
147	3	Disponibilidade e segurança	f
148	0	Indica que pode haver problemas para desenvolver testes incrementais	f
163	2	Tornou a transformação para a linguagem Core mais simples	f
148	1	Indica que se pode seguir um processo de desenvolvimento incremental dos módulos	f
148	2	Indica que a os módulos que têm dependências circulares entre eles devem ser os primeiros a ser implementados	f
149	1	É que a relação \\emph{usa} apenas pode ocorrer entre módulos pertencentes à mesma camada	f
149	2	É que a relação \\emph{pode usar} não indica que o correcto funcionamento da camada acima depende da correcta implementação da camada abaixo	f
149	3	É que a relação \\emph{pode usar} é de facto uma relação \\emph{usa} entre camadas	f
150	0	É necessário recorrer a vários tipos de vistas\n      diferentes, dos tipos de vista componente-e-conector e afectação	f
150	1	Basta mostrar, através de vistas do tipo\n      componente-e-conector, que o sistema mantém réplicas dos dados\n      em diferentes componentes	f
150	2	Basta mostrar, através de vistas do estilo Instalação,\n      que o componente \\emph{DataNode} executa em mais do que uma\n      máquina do \\emph{cluster}	f
151	0	Apenas são necessárias vistas do tipo componente-conector	f
151	2	Apenas são necessárias vistas do tipo componente-conector e do tipo afectação	f
151	3	Os tipos de vista módulo não são de certeza necessários	f
152	0	Apenas são necessárias vistas do tipo componente-e-conector	f
152	1	Apenas são necessárias vistas do estilo Instalação	f
152	3	São sempre necessárias vistas do tipo componente-e-conector e do estilo Implementação	f
153	1	Usava uma vista do tipo módulo que mostrasse as\n      interfaces providenciadas para o cliente efectuar a escrita	f
153	2	Usava uma vista do tipo componente-e-conector	f
153	3	Usava uma vista do estilo arquitectural Instalação (\\emph{Deployment})	f
154	0	A vista de componente-e-conector da aplicação tem\n      necessariamente que passar a incluir os componentes \\emph{NameNode} e\n      \\emph{DataNode} com os quais a aplicação web tem que interagir\n      para aceder aos seus dados	f
154	2	A aplicação continua a ter uma arquitectura de três\n      \\emph{tiers}, em que um deles é o sistema HDFS	f
154	3	A vista de Instalação do sistema tem que ser alterada\n      para passar a incluir os \\emph{racks} necessários para o\n      funcionamento do HDFS	f
155	1	O estilo Canais-e-filtros (\\emph{Pipes-and-filters})	f
155	2	O estilo Par-a-Par (\\emph{Peer-to-Peer})	f
155	3	O estilo Processos Comunicantes (\\emph{Communicating Processes})	f
156	1	O estilo Publicação-Subscrição (\\emph{Publish-Subscribe})	f
156	2	O estilo Par-a-Par (\\emph{Peer-to-Peer})	f
156	3	O estilo Cliente-Servidor (\\emph{Client Server})	f
157	0	Uma máquina pode executar apenas um componente, mas um\n      componente pode executar em mais do que uma máquina	f
157	1	Um componente pode executar apenas numa máquina, mas uma\n      máquina pode executar mais do que um componente	f
157	2	Cada componente executa numa única máquina e cada máquina\n      executa apenas um componente	f
158	0	Apenas afecta a camada de lógica de domínio	f
158	2	Não afecta a camada de lógica de apresentação porque não\n      a pode usar	f
158	3	Não afecta a camada de acesso a dados porque a camada de\n      acesso a dados não usa a camada de lógica de domínio	f
159	0	Uma arquitectura de \\emph{web services}	f
159	2	Uma arquitectura de Camadas, em que o acesso às fontes\n      é a responsabilidade da camada mais abaixo	f
159	3	Uma arquitectura Publicação-Subscrição, em que as várias\n      fontes publicam eventos com as alterações efectuadas e o\n      \\emph{mashup} subscreve esses eventos	f
160	1	Na vista de componente-e-conector, porque o\n      conector que liga o cliente web ao servidor web tem que mudar	f
160	2	Na vista de camadas, porque a ordem das camadas passa a\n      ser outra	f
160	3	Na correspondência entre as camadas do sistema e os\n      componentes onde elas executam	f
161	0	O governo do Reino Unido, porque foi quem financiou o\n      projecto	f
161	2	O governo do Reino Unido, porque pretendia que o sistema\n      pudesse ser usado para desenvolver a indústria de software Britânica	f
161	3	Os investigadores, porque pretendiam usar o sistema para\n      validar as suas invenções	f
162	0	Como módulos do sistema	f
162	1	Como componentes do sistema	f
162	3	O compilador como componente e os outros dois como módulos	f
163	1	Permitiu satisfazer requisitos de desempenho do sistema	f
630	0	Maintain user model tactic.	f
164	1	O desempenho dos programas compilados, porque o RTS está\n      escrito de forma muito eficiente em C	f
164	2	A portabilidade, porque o RTS cria uma camada de\n      abstracção que esconde alguns detalhes do sistema operativo	f
164	3	A modificabilidade dos programas compilados, porque se\n      pode alterar o seu comportamento alterando apenas o RTS	f
165	0	Permitir a execução em paralelo das várias fases de\n      compilação, melhorando assim o desempenho do compilador	f
165	2	Permitir a fácil alteração das fases de compilação que se\n      usam no processo de compilação, tornando assim o compilador mais\n      modificável	f
165	3	Todas as outras opções	f
166	0	É um sistema com uma arquitectura Par-a-Par	f
166	1	É um sistema com uma arquitectura Cliente-Servidor	f
166	3	Permite a implementação de sistemas com arquitecturas\n      Par-a-Par, Cliente-Servidor, ou Publicação-Subscrição	f
167	0	O estilo Tiers	f
167	1	O estilo Processos Comunicantes (\\emph{Communicating Processes})	f
167	2	O estilo Instalação (\\emph{Deployment})	f
168	0	Aumenta a portabilidade para outros sistemas operativos	f
168	2	Torna o sistema mais escalável	f
168	3	Facilita a reutilização dos messaging patterns	f
169	1	Aumentar o \\emph{throughput} do sistema quando este está\n      sobrecarregado	f
169	2	Diminuir a quantidade de memória necessária para o envio\n      de um elevado número de mensagens	f
169	3	Reduzir a utilização do processador quando o sistema tem\n      poucas mensagens para enviar	f
170	1	O estilo Dados Partilhados (\\emph{Shared data})	f
170	2	O estilo Processos Comunicantes (\\emph{Communicating Processes})	f
170	3	O estilo Cliente-Servidor (\\emph{Client-Server})	f
171	0	Ter um \\emph{throughput} maior do que o Apache	f
171	1	Ter uma latência no processamento de um pedido\n      inferior à do Apache	f
171	3	Permitir um número simultâneo de ligações maior do que o\n      Apache	f
172	1	Se pretendia fazer um uso mais eficiente dos recursos\n      computacionais existentes	f
172	2	Os programas \\emph{event-driven} são mais fáceis de\n      modificar	f
172	3	Num sistema \\emph{event-driven} cada componente pode\n      funcionar independentemente dos restantes	f
173	0	O estilo Generalização	f
173	1	O estilo Utilização	f
173	2	O estilo Camadas	f
174	0	Tornar o sistema mais facilmente modificável	f
174	1	Tornar o sistema mais portável para diferentes sistemas operativos	f
174	3	Tornar o sistema mais tolerante a faltas	f
175	0	O estilo Dados Partilhados (\\emph{Shared data})	f
175	1	O estilo Processos Comunicantes (\\emph{Communicating Processes})	f
175	2	O estilo Par-a-Par (\\emph{Peer-to-Peer})	f
176	0	A disponibilidade aumente	f
176	2	A capacidade aumente mas a disponibilidade diminua	f
176	3	A disponibilidade e a capacidade aumentem	f
177	0	Apenas na vista de Instalação (\\emph{Deployment}), porque\n      apenas se altera o número de máquinas que vão conter as imagens	f
177	1	Na vista de Utilização (\\emph{Uses}), porque cada\n      \\emph{Image Write/Retrieval Service} vai usar um \\emph{Image\n        File Storage} diferente	f
177	2	Na vista de Componente-e-Conector, porque é preciso\n      alterar os componentes e os conectores do sistema	f
178	0	Aumentar o desempenho da operação de \\emph{Upload} de uma\n    imagem	f
178	1	Aumentar o desempenho da operação de pesquisa de uma imagem	f
178	2	Aumentar a escalabilidade do sistema	f
179	0	Passamos a ter quatro camadas, em que cada camada é\n      executada no \\emph{tier} correspondente, como anteriormente	f
179	1	Cada um dos dois \\emph{tiers} do meio executa as três\n      camadas já existentes anteriormente, não sendo necessário\n      alterar a vista de camadas	f
179	3	A execução das camadas anteriormente existente é separada\n      entre os dois novos \\emph{tiers}, podendo aparecer novas camadas\n      pelo meio	f
180	0	Com uma vista de componente-e-conector, em que o\n      \\emph{load balancer} é um dos componentes do sistema	f
180	1	Com uma vista de Instalação (\\emph{Deployment}), em que o\n      \\emph{load balancer} faz parte da infra-estrutura de comunicação\n      usada para executar o sistema	f
180	3	Com uma vista de Camadas (\\emph{Layers}), em que o\n      \\emph{load balancer} cria uma camada de abstracção entre quem\n      efectua o pedido e quem providencia o serviço	f
181	0	A camada de lógica de domínio era implementada seguindo\n      a abordagem do padrão Domain Model	f
181	2	A camada de lógica de domínio era implementada seguindo\n      a abordagem do padrão Service Layer	f
181	3	A camada de lógica de domínio era implementada como um\n      modelo de domínio rico, em cima do qual existia uma camada de\n      serviços fina	f
182	0	O estilo Decomposição	f
182	1	O estilo Generalização	f
182	3	O estilo SOA	f
183	1	Ter uma latência baixa	f
183	2	Ter a capacidade de suportar muitos utilizadores em simultâneo	f
183	3	Poderem ser facilmente alterados para aumentar o seu desempenho	f
184	1	Promover a utilização de um protocolo de comunicação\n      comum para todos os restantes componentes do sistema	f
184	2	Aumentar o desempenho na interacção entre componentes do\n      sistema	f
184	3	Criar uma ligação forte entre os vários serviços\n      disponibilizados na organização	f
185	0	A táctica \\emph{Ping/Echo}	f
185	2	A táctica de \\emph{Voting}	f
185	3	A táctica de \\emph{Removal from Service}	f
186	0	O estilo Processos Comunicantes (\\emph{Communicating Processes})	f
186	1	O estilo Cliente-Servidor (\\emph{Client-Server})	f
186	3	O estilo Decomposição (\\emph{Decomposition})	f
187	0	Na vista de Instalação	f
187	1	Na vista de Decomposição	f
187	2	Numa vista de componente-e-conector	f
188	0	Criar uma camada de abstracção entre a arquitectura do\n      sistema e as suas funcionalidades, de modo a poder-se alterar a\n      arquitectura mais tarde sem afectar as funcionalidades	f
188	2	Permitir testar e validar a arquitectura de software numa\n      fase inicial do desenvolvimento	f
188	3	Facilitar a atribuição de trabalho aos membros da equipa\n      de desenvolvimento que vão implementar as funcionalidades do sistema	f
189	1	O estilo arquitectural Cliente-Servidor (\\emph{Client-Server})	f
189	2	O estilo arquitectural Dados-Partilhados \\emph{Shared-Data}	f
189	3	O estilo arquitectural Publicação-Subscrição (\\emph{Publish-subscribe})	f
190	1	Cria restrições às relações de dependência existentes\n      entre módulos e representadas noutros estilos, tal como o estilo\n      camadas	f
190	2	Tipicamente dá origem à criação de mais módulos do que os\n      que existiriam se este estilo não fosse usado	f
190	3	Apenas introduz um novo tipo de relação entre os módulos\n      já existentes no sistema, que resultam da aplicação dos outros\n      estilos do tipo de vista módulo	f
191	1	A camada de lógica de domínio era implementada seguindo\n      a abordagem do padrão Transaction Script	f
191	2	A camada de lógica de domínio era implementada seguindo\n      a abordagem do padrão Service Layer	f
191	3	A camada de lógica de domínio era implementada como um\n      modelo de domínio rico, em cima do qual existia uma camada de\n      serviços fina	f
192	0	O estilo Decomposição	f
192	1	O estilo Generalização	f
192	2	O estilo Utilização	f
193	0	Ter um elevado \\emph{throughput}	f
193	1	Ter uma latência baixa	f
193	3	Poderem ser facilmente alterados para aumentar o seu desempenho	f
194	0	Facilitar a interacção entre componentes heterogéneos que\n      utilizam protocolos de comunicação distintos	f
194	1	Promover a utilização de um protocolo de comunicação\n      comum para todos os restantes componentes do sistema	f
194	3	Criar uma ligação forte entre os vários serviços\n      disponibilizados na organização	f
195	0	A táctica \\emph{Ping/Echo}	f
195	1	A táctica \\emph{Heartbeat}	f
195	2	A táctica de \\emph{Voting}	f
196	1	O estilo Cliente-Servidor (\\emph{Client-Server})	f
196	2	Um estilo qualquer do tipo de vista componente-e-conector	f
196	3	O estilo Decomposição (\\emph{Decomposition})	f
197	0	Na vista de Instalação	f
197	2	Numa vista de componente-e-conector	f
197	3	Na vista de Aspectos	f
198	0	Criar uma camada de abstracção entre a arquitectura do\n      sistema e as suas funcionalidades, de modo a poder-se alterar a\n      arquitectura mais tarde sem afectar as funcionalidades	f
198	1	Criar um artefacto que pode ser usado para explicar a\n      arquitectura de software do sistema aos vários \\emph{stakeholders}	f
198	2	Permitir testar e validar a arquitectura de software numa\n      fase inicial do desenvolvimento	f
199	0	O estilo arquitectural Par-a-Par (\\emph{Peer-to-Peer})	f
199	1	O estilo arquitectural Cliente-Servidor (\\emph{Client-Server})	f
182	2	O estilo Utilização	t
200	0	Não altera os módulos existentes no sistema, visto que\n      isso é determinado pela Decomposição do sistema, que não sofre\n      alterações	f
200	1	Cria restrições às relações de dependência existentes\n      entre módulos e representadas noutros estilos, tal como o estilo\n      camadas	f
200	2	Tipicamente dá origem à criação de mais módulos do que os\n      que existiriam se este estilo não fosse usado	f
201	0	É um sistema com uma arquitectura Par-a-Par	f
201	1	É um sistema com uma arquitectura Cliente-Servidor	f
201	3	Permite a implementação de sistemas com arquitecturas\n      Par-a-Par, Cliente-Servidor, ou Publicação-Subscrição	f
202	1	O estilo Processos Comunicantes (\\emph{Communicating Processes})	f
202	2	O estilo Instalação (\\emph{Deployment})	f
202	3	O estilo Atribuição de Trabalho (\\emph{Work Assignment})	f
203	1	Facilita a adição de novos messaging patterns	f
203	2	Torna o sistema mais escalável	f
203	3	Facilita a reutilização dos messaging patterns	f
204	1	Aumentar o \\emph{throughput} do sistema quando este está\n      sobrecarregado	f
204	2	Diminuir a quantidade de memória necessária para o envio\n      de um elevado número de mensagens	f
204	3	Reduzir a utilização do processador quando o sistema tem\n      poucas mensagens para enviar	f
205	0	O estilo Canais-e-Filtros (\\emph{Pipe-and-Filter})	f
205	2	O estilo Processos Comunicantes (\\emph{Communicating Processes})	f
205	3	O estilo Cliente-Servidor (\\emph{Client-Server})	f
206	0	Ter um \\emph{throughput} maior do que o Apache	f
206	2	Ser mais facilmente modificável do que o Apache	f
206	3	Permitir um número simultâneo de ligações maior do que o\n      Apache	f
207	0	O código é mais fácil de desenvolver por não ser concorrente	f
207	2	Os programas \\emph{event-driven} são mais fáceis de\n      modificar	f
207	3	Num sistema \\emph{event-driven} cada componente pode\n      funcionar independentemente dos restantes	f
208	0	O estilo Generalização	f
208	1	O estilo Utilização	f
208	3	O estilo Aspectos	f
209	1	O estilo Processos Comunicantes (\\emph{Communicating Processes})	f
209	2	O estilo Par-a-Par (\\emph{Peer-to-Peer})	f
209	3	O estilo Cliente-Servidor (\\emph{Client-Server})	f
210	0	Tornar o sistema mais facilmente modificável	f
210	2	Tornar o sistema mais rápido	f
210	3	Tornar o sistema mais tolerante a faltas	f
211	1	Os investigadores, porque foram eles que inventaram a\n      linguagem de programação Haskell	f
211	2	O governo do Reino Unido, porque pretendia que o sistema\n      pudesse ser usado para desenvolver a indústria de software Britânica	f
211	3	Os investigadores, porque pretendiam usar o sistema para\n      validar as suas invenções	f
212	0	Como módulos do sistema	f
212	1	Como componentes do sistema	f
212	2	O compilador e o RTS como componentes e as \\emph{boot\n         libraries} como módulo	f
213	0	Tornou a verificação de tipos muito mais simples	f
213	1	Permitiu satisfazer requisitos de desempenho do sistema	f
213	3	Permitiu satisfazer requisitos de usabilidade do sistema	f
214	0	O desempenho do compilador, porque o RTS está escrito de\n      forma muito eficiente em C	f
214	1	O desempenho dos programas compilados, porque o RTS está\n      escrito de forma muito eficiente em C	f
214	3	A modificabilidade dos programas compilados, porque se\n      pode alterar o seu comportamento alterando apenas o RTS	f
215	0	Permitir a execução em paralelo das várias fases de\n      compilação, melhorando assim o desempenho do compilador	f
215	1	Permitir a compilação de programas muito grandes, porque\n      cada fase pode executar de forma incremental sem ser necessário\n      ter o programa todo em memória ao mesmo tempo	f
215	2	Permitir a fácil alteração das fases de compilação que se\n      usam no processo de compilação, tornando assim o compilador mais\n      modificável	f
216	1	A capacidade aumente	f
216	2	A capacidade aumente mas a disponibilidade diminua	f
216	3	A disponibilidade e a capacidade aumentem	f
217	0	Apenas na vista de Instalação (\\emph{Deployment}), porque\n      apenas se altera o número de máquinas que vão conter as imagens	f
217	2	Na vista de Componente-e-Conector, porque é preciso\n      alterar os componentes e os conectores do sistema	f
201	2	Permite a implementação de sistemas com uma arquitectura Par-a-Par	t
202	0	O estilo Tiers	t
203	0	Aumenta a portabilidade para outros sistemas operativos	t
208	2	O estilo Camadas	t
217	3	Na vista de Decomposição, porque precisamos de mais\n      módulos para representar a divisão das imagens por diferentes\n      elementos da arquitectura	f
218	0	Aumentar o desempenho da operação de \\emph{Upload} de uma\n    imagem	f
218	1	Aumentar o desempenho da operação de pesquisa de uma imagem	f
218	2	Aumentar a escalabilidade do sistema	f
219	0	Passamos a ter quatro camadas, em que cada camada é\n      executada no \\emph{tier} correspondente, como anteriormente	f
219	1	Cada um dos dois \\emph{tiers} do meio executa as três\n      camadas já existentes anteriormente, não sendo necessário\n      alterar a vista de camadas	f
219	2	Não existe qualquer relação entre os \\emph{tiers} e as\n      camadas, pelo que a arquitectura de camadas não é alterada	f
220	0	Com uma vista de componente-e-conector, em que o\n      \\emph{load balancer} é um dos componentes do sistema	f
220	1	Com uma vista de Instalação (\\emph{Deployment}), em que o\n      \\emph{load balancer} faz parte da infra-estrutura de comunicação\n      usada para executar o sistema	f
220	2	Com uma vista de Utilização (\\emph{Uses}), representando\n      as dependências existentes entre o \\emph{load balancer} e os\n      serviços que ele usa	f
221	0	O estilo Decomposição (\\emph{Decomposition})	f
221	1	O estilo Cliente-Servidor (\\emph{Client-Server})	f
221	3	O estilo Processos Comunicantes (\\emph{Communicating Processes})	f
222	0	Aumentar o desempenho do RTS	f
222	2	Aumentar o desempenho dos programas que são compilados\n      pelo GHC	f
222	3	Tornar o RTS mais facilmente portável para outros\n      sistemas operativos	f
223	0	Não se manifesta, visto que isso corresponde apenas a\n      mais uma extensão à linguagem Haskell que o compilador tem que\n      processar	f
223	1	Na existência de um componente do compilador que é\n      responsável por interpretar e aplicar as \\emph{rewrite rules}\n      durante a compilação de um programa	f
223	3	Numa vista do estilo Canais-e-filtros, correspondendo ao\n      processo de compilação de um programa Haskell, em que se\n      adiciona um novo filtro sempre que uma nova \\emph{rewrite rule}\n      é definida	f
224	0	Um diagrama do tipo de vista componente-e-conector	f
224	2	Um diagrama do estilo Instalação (\\emph{deployment})	f
224	3	Um diagrama do estilo Implementação (\\emph{Implementation})	f
225	1	Um diagrama do tipo de vista módulo, onde se mostre a\n      decomposição do compilador nos vários módulos que são\n      responsáveis por cada uma das etapas do processo de compilação	f
225	2	Um diagrama do tipo de vista módulo, onde se mostre que\n      módulos usam que outros módulos	f
225	3	Um diagrama de camadas, onde exista uma camada\n      responsável pela geração do código	f
226	1	Lançar uma \\emph{worker thread} por cada \\emph{user\n        thread} para garantir que cada \\emph{user thread} pode enviar\n      mensagens independentemente do que as outras estejam a fazer	f
226	2	Lançar uma \\emph{worker thread} por cada core, para\n      maximizar a utilização dos cores e minimizar a necessidade de\n      sincronização entre \\emph{threads}	f
226	3	Lançar uma \\emph{worker thread} para processar o envio de\n      uma nova mensagem, para garantir o máximo de paralelismo no\n      envio de mensagens	f
227	0	É menos robusto, porque uma falta no \\emph{broker} causa\n      uma falha no sistema	f
227	1	É menos modificável, porque todos os componentes dependem\n      do \\emph{broker}	f
227	2	Tem menor desempenho, porque a existência do\n      \\emph{broker} introduz maior latência na comunicação	f
228	0	Apenas vistas do tipo módulo	f
228	1	Apenas vistas do tipo componente-e-conector	f
228	3	Vistas do tipo módulo e componente-e-conector	f
229	1	Vistas do estilo Camadas (\\emph{Layers})	f
229	2	Vistas do estilo Decomposição (\\emph{Decomposition})	f
229	3	Vistas do estilo Utilização (\\emph{Uses})	f
230	0	Usabilidade	f
230	1	Modificabilidade	f
230	2	Desempenho	f
231	0	O estilo Publicação-Subscrição (\\emph{Publish-Subscribe})	f
231	1	O estilo Cliente-Servidor (\\emph{Client-Server})	f
231	3	O estilo Processos Comunicantes (\\emph{Communicating Processes})	f
232	1	O estilo Utilização (\\emph{Uses})	f
232	2	O estilo Dados Partilhados (\\emph{Shared data})	f
232	3	O estilo Processos Comunicantes (\\emph{Communicating Processes})	f
233	0	É criado um \\emph{worker} de cada vez que é estabelecida\n      uma nova ligação ao servidor, e esse \\emph{worker} processa\n      todos os pedidos dessa ligação, sendo destruído no fim da ligação	f
269	0	O desempenho do sistema diminui	f
230	3	Segurança	t
233	1	Existe uma \\emph{pool} de \\emph{workers} que são\n      reutilizados entre ligações, mas cada \\emph{worker} apenas\n      processa pedidos de uma ligação de cada vez	f
233	2	Cada \\emph{worker} é responsável por várias ligações,\n      processando todos os pedidos dessas ligações	f
234	0	Intercalando as várias fases do processamento de cada\n      pedido num processo sequencial	f
234	2	Executando em paralelo o processamento de vários pedidos	f
234	3	Processando completamente cada pedido antes de passar\n      para o próximo, num processo sequencial	f
235	0	Tivesse um \\emph{throughput} maior do que o Apache	f
235	1	Conseguisse processar cada pedido mais rapidamente do que\n      o Apache	f
235	3	Conseguisse reduzir a quantidade de memória necessária\n      para cada ligação	f
236	1	São ambos componentes	f
236	2	O \\emph{Request Node} é um componente e a \\emph{Cache} é\n      um módulo	f
236	3	O \\emph{Request Node} é um módulo e a \\emph{Cache} é um\n      componente	f
237	0	Aumentar o desempenho e a disponibilidade	f
237	1	Aumentar a disponibilidade e diminuir o desempenho	f
237	3	Aumentar a escalabilidade e a disponibilidade	f
238	0	O estilo Dados-Partilhados \\emph{Shared-Data}	f
238	1	O estilo Cliente-Servidor (\\emph{Client-Server})	f
238	2	O estilo Par-a-par (\\emph{Peer-to-Peer})	f
239	0	O desempenho do sistema diminui	f
239	1	A disponibilidade dos dados do sistema diminui	f
239	3	O sistema não é afectado de forma nenhuma	f
240	0	Passar a usar o padrão Transaction Script na camada de lógica de domínio	f
240	1	Passar a usar o padrão Service Layer numa nova camada	f
240	2	Passar de um modelo de domínio anémico para um modelo de\n      domínio rico	f
241	0	Vistas do tipo módulo	f
241	1	Vistas do tipo componente-e-conector	f
241	3	Vistas do tipo componente-e-conector e afectação (\\emph{Allocation})	f
242	0	Uma vista do estilo \\emph{Data Model}	f
242	2	Uma vista do estilo Decomposição (\\emph{Decomposition})	f
242	3	Uma vista do estilo Utilização (\\emph{Uses})	f
243	0	O estilo Decomposição (\\emph{Decomposition}) e o estilo\n      Atribuição de Trabalho (\\emph{Work Assignment})	f
243	1	O estilo Decomposição (\\emph{Decomposition}) e o estilo\n      Camadas (\\emph{Layers})	f
243	3	O estilo Decomposição (\\emph{Decomposition}) e o estilo SOA	f
244	0	Estabelece restrições às relações de utilização\n      (\\emph{uses}) que podem existir entre os módulos do sistema	f
244	2	Isola em novos módulos responsabilidades que se\n      encontravam espalhadas por vários módulos do sistema	f
244	3	Permite decompor cada módulo do sistema em módulos de\n      grão mais fino	f
245	1	O estilo Cliente-Servidor (\\emph{Client-Server})	f
245	2	O estilo SOA (\\emph{Service Oriented Architecture})	f
245	3	O estilo Processos Comunicantes (\\emph{Communicating Processes})	f
246	1	Apenas na vista de Decomposição (\\emph{Decomposition})	f
246	2	Apenas numa vista de componente-e-conector	f
246	3	Numa vista de componente-e-conector e numa vista de\n      Instalação (\\emph{Deployment})	f
247	0	Utilizava HTTPS na comunicação entre o \\emph{browser} e o\n      servidor web	f
247	1	Utilizava mecanismos de autenticação robustos para\n      identificar os utilizadores do sistema com confiança	f
247	2	Cifrava a informação na base de dados com uma password\n      conhecida apenas pelo servidor web	f
248	0	Alterou-se a camada da lógica de apresentação e a forma\n      como ela se relaciona com a camada de baixo	f
248	1	Alterou-se o conector usado para representar a\n      interacção entre o \\emph{browser} e o \\emph{web server}	f
248	3	Esta evolução não teve consequências nenhumas na\n      arquitectura de software de uma aplicação web	f
249	1	Um agrupamento de componentes	f
249	2	Um módulo	f
249	3	Uma camada	f
250	0	O estilo arquitectural Par-a-Par (\\emph{Peer-to-Peer})	f
250	1	O estilo arquitectural Cliente-Servidor (\\emph{Client-Server})	f
250	2	O estilo arquitectural Dados-Partilhados \\emph{Shared-Data}	f
251	1	Lançar uma \\emph{worker thread} por cada \\emph{user\n        thread} para garantir que cada \\emph{user thread} pode enviar\n      mensagens independentemente do que as outras estejam a fazer	f
269	2	A disponibilidade dos serviços do sistema diminui	f
251	2	Lançar uma \\emph{worker thread} por cada core, para\n      maximizar a utilização dos cores e minimizar a necessidade de\n      sincronização entre \\emph{threads}	f
251	3	Lançar uma \\emph{worker thread} para processar o envio de\n      uma nova mensagem, para garantir o máximo de paralelismo no\n      envio de mensagens	f
252	1	Apenas vistas do tipo componente-e-conector	f
252	2	Apenas vistas do tipo afectação	f
252	3	Vistas do tipo módulo e componente-e-conector	f
253	0	É menos robusto, porque uma falta no \\emph{broker} causa\n      uma falha no sistema	f
253	1	É menos modificável, porque todos os componentes dependem\n      do \\emph{broker}	f
253	3	É mais caro, porque obriga à existência de\n      \\emph{hardware} adicional para executar o \\emph{broker}	f
254	0	Vistas do estilo Generalização (\\emph{Generalization})	f
254	1	Vistas do estilo Camadas (\\emph{Layers})	f
254	3	Vistas do estilo Utilização (\\emph{Uses})	f
255	0	Usabilidade	f
255	1	Modificabilidade	f
255	2	Desempenho	f
256	0	O estilo Publicação-Subscrição (\\emph{Publish-Subscribe})	f
256	1	O estilo Cliente-Servidor (\\emph{Client-Server})	f
256	2	O estilo Par-a-par (\\emph{Peer-to-Peer})	f
257	0	O estilo Camadas (\\emph{Layers})	f
257	2	O estilo Dados Partilhados (\\emph{Shared data})	f
257	3	O estilo Processos Comunicantes (\\emph{Communicating Processes})	f
258	0	É criado um \\emph{worker} de cada vez que é estabelecida\n      uma nova ligação ao servidor, e esse \\emph{worker} processa\n      todos os pedidos dessa ligação, sendo destruído no fim da ligação	f
258	1	Existe uma \\emph{pool} de \\emph{workers} que são\n      reutilizados entre ligações, mas cada \\emph{worker} apenas\n      processa pedidos de uma ligação de cada vez	f
258	2	Cada \\emph{worker} é responsável por várias ligações,\n      processando todos os pedidos dessas ligações	f
259	1	Executando em paralelo cada fase do pipeline do\n      processamento de um pedido	f
259	2	Executando em paralelo o processamento de vários pedidos	f
259	3	Processando completamente cada pedido antes de passar\n      para o próximo, num processo sequencial	f
260	0	Tivesse um \\emph{throughput} maior do que o Apache	f
260	1	Conseguisse processar cada pedido mais rapidamente do que\n      o Apache	f
260	2	Conseguisse lançar mais \\emph{threads} simultâneas do que\n      o Apache	f
261	0	O estilo Decomposição (\\emph{Decomposition})	f
261	2	O estilo Camadas (\\emph{Layers})	f
261	3	O estilo Processos Comunicantes (\\emph{Communicating Processes})	f
262	0	Aumentar o desempenho do RTS	f
262	1	Permitir mudar o algoritmo de GC sem afectar o resto do sistema	f
262	3	Tornar o RTS mais facilmente portável para outros\n      sistemas operativos	f
263	1	Na existência de um componente do compilador que é\n      responsável por interpretar e aplicar as \\emph{rewrite rules}\n      durante a compilação de um programa	f
263	2	Numa vista do estilo Generalização que inclui um módulo\n      que define a interface abstracta que todas as \\emph{rewrite\n        rules} devem implementar e do qual os módulos com as\n      \\emph{rewrite rules} são especializações	f
263	3	Numa vista do estilo Canais-e-filtros, correspondendo ao\n      processo de compilação de um programa Haskell, em que se\n      adiciona um novo filtro sempre que uma nova \\emph{rewrite rule}\n      é definida	f
264	0	Um diagrama do tipo de vista componente-e-conector	f
264	2	Um diagrama do estilo Instalação (\\emph{deployment})	f
264	3	Um diagrama do estilo Implementação (\\emph{Implementation})	f
265	1	Um diagrama do tipo de vista módulo, onde se mostre a\n      decomposição do compilador nos vários módulos que são\n      responsáveis por cada uma das etapas do processo de compilação	f
265	2	Um diagrama do tipo de vista módulo, onde se mostre que\n      módulos usam que outros módulos	f
265	3	Um diagrama de camadas, onde exista uma camada\n      responsável pela geração do código	f
266	1	São ambos componentes	f
266	2	O \\emph{Request Node} é um componente e a \\emph{Cache} é\n      um módulo	f
266	3	O \\emph{Request Node} é um módulo e a \\emph{Cache} é um\n      componente	f
267	0	Aumentar o desempenho e a disponibilidade	f
267	1	Aumentar a disponibilidade e diminuir o desempenho	f
267	2	Aumentar o desempenho e diminuir a disponibilidade	f
268	0	O estilo Dados-Partilhados \\emph{Shared-Data}	f
268	2	O estilo Par-a-par (\\emph{Peer-to-Peer})	f
268	3	O estilo Processos Comunicantes (\\emph{Communicating Processes})	f
255	3	Segurança	t
269	3	O sistema não é afectado de forma nenhuma	f
270	1	Uma vista do estilo Camadas (\\emph{Layers})	f
270	2	Uma vista do estilo Decomposição (\\emph{Decomposition})	f
270	3	Uma vista do estilo Utilização (\\emph{Uses})	f
271	1	Passar a usar o padrão Service Layer numa nova camada	f
271	2	Passar de um modelo de domínio anémico para um modelo de\n      domínio rico	f
271	3	Eliminar a camada de serviços	f
272	1	Vistas do tipo componente-e-conector	f
272	2	Vistas do tipo afectação (\\emph{Allocation})	f
272	3	Vistas do tipo componente-e-conector e afectação (\\emph{Allocation})	f
273	0	O estilo Decomposição (\\emph{Decomposition}) e o estilo\n      Atribuição de Trabalho (\\emph{Work Assignment})	f
273	1	O estilo Decomposição (\\emph{Decomposition}) e o estilo\n      Camadas (\\emph{Layers})	f
273	3	O estilo Decomposição (\\emph{Decomposition}) e o estilo SOA	f
274	0	Estabelece restrições às relações de utilização\n      (\\emph{uses}) que podem existir entre os módulos do sistema	f
274	1	Facilita a criação de relações de generalização\n      (\\emph{Generalization}) entre os módulos do sistema	f
274	3	Permite decompor cada módulo do sistema em módulos de\n      grão mais fino	f
275	0	O estilo Decomposição (\\emph{Decomposition})	f
275	1	O estilo Cliente-Servidor (\\emph{Client-Server})	f
275	2	O estilo SOA (\\emph{Service Oriented Architecture})	f
276	0	O estilo arquitectural Par-a-Par (\\emph{Peer-to-Peer})	f
276	1	O estilo arquitectural Cliente-Servidor (\\emph{Client-Server})	f
276	2	O estilo arquitectural Dados-Partilhados \\emph{Shared-Data}	f
277	0	Apenas na vista de Instalação (\\emph{Deployment})	f
277	2	Apenas numa vista de componente-e-conector	f
277	3	Numa vista de componente-e-conector e numa vista de\n      Instalação (\\emph{Deployment})	f
278	0	Utilizava HTTPS na comunicação entre o \\emph{browser} e o\n      servidor web	f
278	1	Utilizava mecanismos de autenticação robustos para\n      identificar os utilizadores do sistema com confiança	f
278	2	Cifrava a informação na base de dados com uma password\n      conhecida apenas pelo servidor web	f
279	1	Alterou-se o conector usado para representar a\n      interacção entre o \\emph{browser} e o \\emph{web server}	f
279	2	O \\emph{browser} passou a ser um componente de um tipo\n      diferente	f
279	3	Esta evolução não teve consequências nenhumas na\n      arquitectura de software de uma aplicação web	f
280	0	Um componente	f
280	1	Um agrupamento de componentes	f
280	2	Um módulo	f
281	0	Cliente-servidor	f
281	2	Repositório	f
281	3	Canais-e-filtros	f
282	0	Manter Múltiplas Cópias de Computação	f
282	1	Manter Múltiplas Cópias de Dados	f
282	3	Redundância Ativa	f
283	1	Usabilidade	f
283	2	Desempenho	f
283	3	Facilidade de teste	f
284	1	Desempenho, disponibilidade e facilidade de teste	f
284	2	Fiabilidade, desempenho e usabilidade	f
284	3	Desempenho e usabilidade	f
285	0	Cliente-Servidor e Repositório	f
285	2	Cliente-Servidor, Repositório, Processos-Comunicantes e Arquitetura Orientada aos Serviços	f
285	3	Cliente-Servidor, Repositório e Processos-Comunicantes	f
286	0	Através de uma tática de Marca de Tempo (\\emph{timestamp})	f
286	1	Através de uma tática de Reinvocação (\\emph{retry})	f
286	3	Através de uma tática de Transações	f
287	0	Pode deixar de aceitar leituras	f
287	1	Pode deixar de aceitar escritas	f
287	2	Pode deixar de aceitar leituras e escritas	f
288	0	Aumentar a Eficiência dos Recursos	f
288	2	Priorizar Eventos	f
288	3	Manter Múltiplas Cópias de Dados	f
289	1	Deteção de Intrusão	f
289	2	Limitar Acesso	f
289	3	Autorizar Atores	f
290	1	Manter Múltiplas Cópias de Computação	f
290	2	Limitar a Exposição	f
290	3	Redundância Ativa	f
291	0	Publicação-subscrição	f
291	1	Canais-e-filtros	f
291	3	Cliente-servidor	f
292	1	O \\emph{browser} ter que efetuar mais pedidos ao servidor	f
292	2	Utilizar técnicas de aprendizagem	f
292	3	Não depender de um serviço proprietário	f
293	0	É sempre o mesmo para todas as instâncias do \\ch{}	f
293	1	É definido em tempo de compilação do código do \\ch{}	f
293	2	É definido em tempo de inicialização de uma instância do \\ch{}	f
294	0	A tática de Manter Modelo de Utilizador	f
294	1	A tática de Manter Modelo de Tarefa	f
294	3	Táticas de Suportar a Iniciativa do Utilizador	f
295	0	A ser necessário descomprimir todo o ficheiro, mesmo que para obter apenas parte da sua informação	f
295	1	A deficiências do algoritmo de compressão e descompressão do \\emph{pickle}	f
295	2	A ser uma solução específica de Python	f
296	0	Aumentar a qualidade da facilidade de modificação pois a nova interface utilizador passou a usar a interface REST	f
296	2	Aumentar a qualidade da interoperabilidade pois aplicações externas podem passar a ler e enviar mensagens para o \\gm{}	f
296	3	Nenhuma das anteriores	f
297	0	Uma sequência de bytes para permitir independência entre os filtros	f
297	1	Um objeto estruturado em árvore para possibilitar a execução simultânea de diversos filtros	f
297	2	Uma sequência de bytes para permitir que a ordem de aplicação dos filtros não seja relevante	f
298	0	A solução proposta assegura efetivamente a entrega FIFO de mensagens e os vários processos não necessitam de se sincronizar	f
298	1	A solução proposta assegura a entrega FIFO de mensagens mas os vários processos necessitam de se sincronizar	f
298	2	A solução proposta não assegura a entrega FIFO de mensagens, podendo algumas mensagens ser entregues por outra ordem	f
299	0	Cliente-Servidor	f
299	1	Par-a-Par	f
299	3	\\emph{Tiers}	f
300	0	Pois cada mensagem não necessita de ser acedida simultaneamente por diversos processos	f
300	1	Pois \\emph{pickle} é eficiente a escrever e a ler mensagens	f
300	3	Todas as opções anteriores	f
301	0	Afetam módulos ao sistema de ficheiros	f
301	2	Aplicam-se a conjuntos completamente distintos de ficheiros	f
301	3	Aplicam-se ao mesmo conjunto de ficheiros	f
302	0	Interoperabilidade e Desempenho	f
302	1	Desempenho e Disponibilidade	f
302	3	Facilidade de Modificação e Desempenho	f
303	1	À tática de Redundância Passiva	f
303	2	À tática de Redundância Ativa	f
303	3	Às táticas de Redundância Passiva e Redundância Ativa	f
304	1	Apenas pode ser usada uma política pessimista de controlo de concorrência para evitar os frequentes conflitos nas transações	f
304	2	Podem ser usadas políticas pessimistas ou otimistas de controlo de concorrência	f
304	3	A gestão transacional é da inteira responsabilidade do repositório	f
305	0	Codificação, se os componentes executarem módulos desenvolvidos por diferentes equipas de desenvolvimento	f
305	2	Sistema Operativo, se componentes executarem em diferentes sistemas operativos	f
305	3	Todas as opções anteriores	f
306	0	Detetar e Recuperar do Ataque	f
306	1	Resistir ao Ataque	f
306	3	Resistir e Reagir ao Ataque	f
307	0	Se houver requisitos arquiteturais de desempenho relativos aos acessos aos dados então deve ser feito até ao nível físico	f
307	1	Deve ser sempre feito até ao nível físico	f
307	2	Só deve ser até ao nível lógico nos casos em que o alvo da implementação for uma base de dados relacional	f
308	0	Dependem dos tipos de componentes publicadores	f
308	2	São totalmente independentes entre si	f
308	3	Necessitam que seja suportada Ligação Diferida (\\emph{Defer Binding}) dinâmica dos componentes, publicadores e subscritores, ao conetor para serem totalmente independentes entre si	f
309	1	Dependem de táticas de desempenho	f
309	2	Dependem de táticas de disponibilidade	f
309	3	Não são implementadas por nenhuma tática de usabilidade	f
310	1	Apenas um conjunto restrito de funcionalidades é transacional	f
310	2	Não é necessário ter propriedades transacionais pois todos os dados estão em memória	f
310	3	Apenas a propriedade transacional do isolamento é assegurada	f
311	1	Diferem no ênfase dado à fase de produção e à fase de desenvolvimento do processo de software	f
311	2	Aplicam-se a conjuntos completamente distintos de ficheiros	f
301	1	Diferem no ênfase dado à fase de produção e à fase de desenvolvimento do processo de software	t
302	2	Facilidade de Desenvolvimento e Desempenho	t
303	0	À tática de Ligação Diferida (\\emph{Defer Binding})	t
304	0	Apenas pode ser usada uma política otimista de controlo de concorrência pois as transações não podem estar abertas durante muito tempo	t
305	1	Hardware, se houver redundância de hardware	t
306	2	Reagir ao Ataque	t
307	3	Apenas o nível conceptual é efetivamente necessário, sendo os restantes opcionais	t
308	1	Dependem apenas dos tipos de eventos	t
309	0	Apenas dizem respeito aos \\emph{web designers}	t
311	3	Aplicam-se ao mesmo conjunto de ficheiros	f
312	0	Interoperabilidade e Desempenho	f
312	1	Desempenho e Disponibilidade	f
312	2	Facilidade de Desenvolvimento e Desempenho	f
313	0	Desempenho, disponibilidade e usabilidade	f
313	1	Desempenho, disponibilidade e facilidade de teste	f
313	3	Desempenho e usabilidade	f
314	0	Cliente-Servidor e Repositório	f
314	1	Repositório e Arquitetura Orientada aos Serviços	f
314	3	Cliente-Servidor, Repositório e Processos-Comunicantes	f
315	0	Através de uma tática de Marca de Tempo (\\emph{timestamp})	f
315	1	Através de uma tática de Reinvocação (\\emph{retry})	f
315	2	Guardando a informação junto do cliente usando \\emph{cookies}	f
316	1	Pode deixar de aceitar escritas	f
316	2	Pode deixar de aceitar leituras e escritas	f
316	3	Pode ter de adicionar mais servidores ao \\emph{cluster}	f
317	0	Aumentar a Eficiência dos Recursos	f
317	2	Priorizar Eventos	f
317	3	Manter Múltiplas Cópias de Dados	f
318	0	Apenas pode ser usada uma política otimista de controlo de concorrência pois as transações não podem estar abertas durante muito tempo	f
318	1	Apenas pode ser usada uma política pessimista de controlo de concorrência para evitar os frequentes conflitos nas transações	f
318	2	Podem ser usadas políticas pessimistas ou otimistas de controlo de concorrência	f
319	0	Codificação, se os componentes executarem módulos desenvolvidos por diferentes equipas de desenvolvimento	f
319	1	Hardware, se houver redundância de hardware	f
319	2	Sistema Operativo, se componentes executarem em diferentes sistemas operativos	f
320	0	Encriptação dos Dados	f
320	1	Deteção de Intrusão	f
320	2	Limitar Acesso	f
321	0	Introduzir Concorrência	f
321	1	Manter Múltiplas Cópias de Computação	f
321	3	Redundância Ativa	f
322	1	Canais-e-filtros	f
322	2	Criação e destruição dinâmica	f
322	3	Cliente-servidor	f
323	1	O \\emph{browser} ter que efetuar mais pedidos ao servidor	f
323	2	Utilizar técnicas de aprendizagem	f
323	3	Não depender de um serviço proprietário	f
324	1	É definido em tempo de compilação do código do \\ch{}	f
324	2	É definido em tempo de inicialização de uma instância do \\ch{}	f
324	3	Pode variar durante a execução de cada instância do \\ch{}	f
325	0	A tática de Manter Modelo de Utilizador	f
325	2	A tática de Manter Modelo de Sistema	f
325	3	Táticas de Suportar a Iniciativa do Utilizador	f
326	0	Detetar e Recuperar do Ataque	f
326	2	Reagir ao Ataque	f
326	3	Resistir e Reagir ao Ataque	f
327	0	Se houver requisitos arquiteturais de desempenho relativos aos acessos aos dados então deve ser feito até ao nível físico	f
327	2	Só deve ser até ao nível lógico nos casos em que o alvo da implementação for uma base de dados relacional	f
327	3	Apenas o nível conceptual é efetivamente necessário, sendo os restantes opcionais	f
328	0	Cliente-servidor	f
328	1	Processos-comunicantes	f
328	3	Canais-e-filtros	f
329	1	Manter Múltiplas Cópias de Dados	f
329	2	Redundância Passiva	f
329	3	Redundância Ativa	f
330	0	Usabilidade e desempenho	f
330	2	Desempenho	f
330	3	Facilidade de teste	f
331	1	Dependem de táticas de desempenho	f
331	2	Dependem de táticas de disponibilidade	f
331	3	Não são implementadas por nenhuma tática de usabilidade	f
332	0	Todas as funcionalidades podem ser transacionais	f
332	1	Apenas um conjunto restrito de funcionalidades é transacional	f
332	2	Não é necessário ter propriedades transacionais pois todos os dados estão em memória	f
333	0	A ser necessário descomprimir todo o ficheiro, mesmo que para obter apenas parte da sua informação	f
333	1	A deficiências do algoritmo de compressão e descompressão do \\emph{pickle}	f
333	3	Às limitações de acesso concorrente a ficheiros 	f
334	0	Aumentar a qualidade da facilidade de modificação pois a nova interface utilizador passou a usar a interface REST	f
334	1	Aumentar a qualidade da facilidade de modificação pois as aplicações externas deixaram de usar as funcionalidade de administração	f
359	0	Segurança	f
359	1	Segurança e Facilidade de Teste	f
334	3	Nenhuma das anteriores	f
335	0	Uma sequência de bytes para permitir independência entre os filtros	f
335	1	Um objeto estruturado em árvore para possibilitar a execução simultânea de diversos filtros	f
335	2	Uma sequência de bytes para permitir que a ordem de aplicação dos filtros não seja relevante	f
336	1	A solução proposta assegura a entrega FIFO de mensagens mas os vários processos necessitam de se sincronizar	f
336	2	A solução proposta não assegura a entrega FIFO de mensagens, podendo algumas mensagens ser entregues por outra ordem	f
336	3	A solução proposta assegura a entrega FIFO de mensagens pois em cada \\emph{queue} apenas são colocadas mensagens com intervalos de tempo suficientemente espaçados	f
337	0	Cliente-Servidor	f
337	2	Criação e Destruição Dinâmica	f
337	3	\\emph{Tiers}	f
338	0	Pois cada mensagem não necessita de ser acedida simultaneamente por diversos processos	f
338	1	Pois \\emph{pickle} é eficiente a escrever e a ler mensagens	f
338	2	Pois cada mensagem é guardada como um ficheiro num diretório	f
339	0	Dependem dos tipos de componentes publicadores	f
339	1	Dependem apenas dos tipos de eventos	f
339	2	São totalmente independentes entre si	f
340	0	À tática de Ligação Diferida (\\emph{Defer Binding})	f
340	1	À tática de Redundância Passiva	f
340	2	À tática de Redundância Ativa	f
341	0	Desempenho	f
341	1	Fiabilidade e Desempenho	f
341	3	Segurança	f
342	0	Repositório e Processos-Comunicantes	f
342	2	\\emph{Tiers}	f
342	3	Cliente-Servidor e Repositório	f
343	0	Modelo de Tarefa	f
343	1	Modelo do Sistema	f
343	3	Modelo de Utilizador	f
344	0	Ter apenas um servidor para escrita	f
344	2	Dar prioridade ao desempenho e disponibilidade em detrimento da funcionalidade	f
344	3	Usar vários níveis de \\emph{cache}	f
345	1	Redundância Ativa e Aumento da Eficiência dos Recursos	f
345	2	Redundância Ativa e Manter Múltiplas Cópias de Computação	f
345	3	Redundância Passiva e Manter Múltiplas Cópias de Computação	f
346	1	Pelo distribuidor de carga (\\emph{load balancer})	f
346	2	Pelo repositório	f
346	3	No cliente	f
347	0	Reinício Escalonado	f
347	1	Votação	f
347	2	Funcionamento Degradado	f
348	0	Priorizar Eventos	f
348	1	Aumentar os Recursos	f
348	3	Manter Múltiplas Cópias de Dados	f
349	1	Desempenho, Segurança e Interoperabilidade	f
349	2	Segurança, Desempenho, Usabilidade, Interoperabilidade e Mobilidade	f
349	3	Segurança, Desempenho, Usabilidade e Mobilidade	f
350	0	Escalonamento de Recursos	f
350	1	Aumento de Recursos	f
350	2	Introdução de Concorrência	f
351	0	Separar o processo de \\emph{Renderer} dos restantes processos	f
351	1	O \\emph{browser} efetuar menos pedidos ao servidor	f
351	3	Fazer \\emph{prefetching}	f
352	1	Processos-comunicantes	f
352	2	Arquitetura orientada aos serviços	f
352	3	Cliente-servidor	f
353	0	Tática de Introduzir Concorrência	f
353	1	Página estar em \\emph{cache}	f
353	2	Tática de Manter Múltiplas Cópias de Computação	f
354	0	Usabilidade e Facilidade de Modificação	f
354	2	Disponibilidade e Usabilidade	f
354	3	Disponibilidade e Desempenho	f
355	0	A nova interface utilizador passou a usar a interface REST	f
355	1	Aplicações externas podem passar a fazer administração de listas de correio eletrónico residentes no GNU Mailman	f
355	3	A interface do \\gm{} ficou pública	f
356	1	Cliente-Servidor	f
356	2	Canais-e-Filtros	f
356	3	Publicação-Subscrição	f
357	0	Modelo de Dados	f
357	1	Decomposição	f
357	3	Canais-e-Filtros	f
358	0	A qualidade do desempenho	f
358	1	A qualidade da disponibilidade	f
358	2	A qualidade da fiabilidade	f
359	3	Fiabilidade e Facilidade de Teste	f
360	0	Módulo	f
360	1	Componente-e-Conetor	f
360	2	Módulo e Componente-e-Conetor	f
361	0	Facilidade de Modificação e Interoperabilidade	f
361	1	Desempenho e Interoperabilidade	f
361	3	Interoperabilidade	f
362	0	Decomposição	f
362	2	Utilização	f
362	3	Modelo de Dados	f
363	0	Modelo de Utilizador e \\emph{Undo}	f
363	1	Modelo de Utilizador	f
363	3	Modelo de Sistema	f
364	0	Não é possível suportar pesquisas SQL no servidor aplicacional	f
364	2	Todos os acessos aos objetos têm que ser feitos através das suas inter-referências	f
364	3	É necessário que cada objeto da base de dados possua um identificador único	f
365	1	Aumentar o Conjunto de Competências (\\emph{Increase Competence Set})	f
365	2	Prevenção de Exceções	f
365	3	Deteção de Exceções	f
366	1	O módulo Modelo usa o módulo Observador se forem passados dados na notificação	f
366	2	O módulo Modelo usa o módulo Observador se forem passados dados complexos na notificação	f
366	3	No que diz respeito à notificação, o módulo Modelo não usa o módulo Observador	f
367	0	Primeiro devem ser desenhadas vistas de Utilização e de seguida de Camadas	f
367	1	Primeiro devem ser desenhadas vistas de Camadas e depois de Utilização	f
367	2	As vistas de Camadas e de Utilização não necessitam de ser desenhadas por uma ordem pré-definida	f
368	0	Apenas pode possuir um único estilo arquitetural	f
368	1	Pode possuir vários estilos arquiteturais, mas apenas se forem dos tipos vista Componente-e-Conetor e Afetação	f
368	3	Pode possuir vários estilos arquiteturais, desde que essa seja a melhor forma de comunicar com um particular grupo de \\emph{stakeholders}	f
369	1	Pode ser aplicado antes de haver uma vista de decomposição	f
369	2	Uma vez aplicado numa vista pode levar à revisão da vista de decomposição	f
369	3	Deve ser sempre aplicado em pelo menos numa vista do sistema	f
370	0	O comportamento transacional suportado de uma forma transparente é uma vantagem para os programadores	f
370	1	Não é necessário ter comportamento transacional associado à lógica de negócio	f
370	2	A arquitetura componente-e-conetor tem que ter três \\emph{Tiers}	f
371	1	Guardar toda a informação de forma estática	f
371	2	Dar prioridade ao desempenho e disponibilidade em detrimento da funcionalidade	f
371	3	Usar vários níveis de \\emph{cache}	f
372	1	Redundância Ativa e Aumento da Eficiência dos Recursos	f
372	2	Redundância Ativa e Manter Múltiplas Cópias de Computação	f
372	3	Redundância Passiva e Manter Múltiplas Cópias de Computação	f
373	0	No servidor	f
373	1	Pelo distribuidor de carga (\\emph{load balancer})	f
373	3	No cliente	f
374	0	Reinício Escalonado	f
374	1	Votação	f
374	3	Tratamento de Exceções	f
375	0	Priorizar Eventos	f
375	1	Aumentar os Recursos	f
375	2	Aumentar a Eficiência dos Recursos	f
376	0	Modelo de Utilizador e \\emph{Undo}	f
376	1	Modelo de Utilizador	f
376	2	Modelo de Utilizador e Modelo de Sistema	f
377	0	Não é possível suportar pesquisas SQL no servidor aplicacional	f
377	2	Todos os acessos aos objetos têm que ser feitos através das suas inter-referências	f
377	3	É necessário que cada objeto da base de dados possua um identificador único	f
378	0	Desempenho	f
378	1	Fiabilidade e Desempenho	f
378	2	Fiabilidade	f
379	1	Processos-Comunicantes	f
379	2	\\emph{Tiers}	f
379	3	Cliente-Servidor e Repositório	f
380	0	Modelo de Tarefa	f
380	1	Modelo do Sistema	f
380	2	Desempenho	f
381	0	Tratamento de Exceções	f
381	2	Prevenção de Exceções	f
381	3	Deteção de Exceções	f
382	0	O módulo Modelo usa o módulo Observador	f
382	1	O módulo Modelo usa o módulo Observador se forem passados dados na notificação	f
406	2	Disponibilidade	t
382	3	No que diz respeito à notificação, o módulo Modelo não usa o módulo Observador	f
383	1	Primeiro devem ser desenhadas vistas de Camadas e depois de Utilização	f
383	2	As vistas de Camadas e de Utilização não necessitam de ser desenhadas por uma ordem pré-definida	f
383	3	Sempre que há vistas de Utilização tem que haver pelo menos uma vista de camadas	f
384	0	A nova interface utilizador passou a usar a interface REST	f
384	2	Aplicações externas podem passar a ler e enviar mensagens para o \\gm{}	f
384	3	A interface do \\gm{} ficou pública	f
385	1	Cliente-Servidor	f
385	2	Canais-e-Filtros	f
385	3	Publicação-Subscrição	f
386	1	Decomposição	f
386	2	Aspetos	f
386	3	Canais-e-Filtros	f
387	0	A qualidade do desempenho	f
387	1	A qualidade da disponibilidade	f
387	2	A qualidade da fiabilidade	f
388	0	Segurança	f
388	2	Fiabilidade e Facilidade de Modificação	f
388	3	Fiabilidade e Facilidade de Teste	f
389	0	Módulo	f
389	2	Módulo e Componente-e-Conetor	f
389	3	Módulo mas apenas para o estilo arquitetural Decomposição	f
390	1	Pode possuir vários estilos arquiteturais, mas apenas se forem dos tipos vista Componente-e-Conetor e Afetação	f
390	2	Pode possuir vários estilos arquiteturais, mas apenas se forem do mesmo tipo vista	f
390	3	Pode possuir vários estilos arquiteturais, desde que essa seja a melhor forma de comunicar com um particular grupo de \\emph{stakeholders}	f
391	1	Pode ser aplicado antes de haver uma vista de decomposição	f
391	2	Uma vez aplicado numa vista pode levar à revisão da vista de decomposição	f
391	3	Deve ser sempre aplicado em pelo menos numa vista do sistema	f
392	1	Desempenho, Segurança e Interoperabilidade	f
392	2	Segurança, Desempenho, Usabilidade, Interoperabilidade e Mobilidade	f
392	3	Segurança, Desempenho, Usabilidade e Mobilidade	f
393	0	Escalonamento de Recursos	f
393	1	Aumento de Recursos	f
393	3	Manter Múltiplas Cópias de Computação	f
394	0	Separar o processo de \\emph{Renderer} dos restantes processos	f
394	1	O \\emph{browser} efetuar menos pedidos ao servidor	f
394	3	Fazer \\emph{prefetching}	f
395	0	Repositório	f
395	1	Processos-comunicantes	f
395	2	Arquitetura orientada aos serviços	f
396	0	Tática de Introduzir Concorrência	f
396	1	Página estar em \\emph{cache}	f
396	2	Tática de Manter Múltiplas Cópias de Computação	f
397	0	Usabilidade e Facilidade de Modificação	f
397	2	Disponibilidade e Usabilidade	f
397	3	Disponibilidade e Desempenho	f
398	0	Facilidade de Modificação e Interoperabilidade	f
398	1	Desempenho e Interoperabilidade	f
398	2	Facilidade de Desenvolvimento e Desempenho	f
399	1	Aspetos	f
399	2	Utilização	f
399	3	Modelo de Dados	f
400	0	O comportamento transacional suportado de uma forma transparente é uma vantagem para os programadores	f
400	1	Não é necessário ter comportamento transacional associado à lógica de negócio	f
400	2	A arquitetura componente-e-conetor tem que ter três \\emph{Tiers}	f
401	0	mas penaliza a fiabilidade pois os componentes \\emph{webapp} não têm acesso aos dados mais recentes	f
401	2	e melhora a fiabilidade pois é fornecida uma interface para os componentes \\emph{webapp} acederem aos dados mais recentes	f
401	3	e melhora a segurança pois o \\emph{buffer} está protegido de ataques	f
402	0	desempenho	f
402	1	segurança	f
402	3	facilidade de utilização	f
403	1	generalização	f
403	2	modelo de dados	f
403	3	utilização	f
404	1	para guardar toda a informação de forma estática	f
404	2	devido a se pretender ter uma solução de baixo custo e reduzida complexidade	f
404	3	pois não há requisitos de disponibilidade	f
405	0	pode levar a que escritor receba uma exceção indicando que a informação ainda não está disponível	f
405	2	resulta em que os pedidos do escritor têm prioridade sobre os pedidos dos restantes leitores	f
405	3	resulta em que o escritor não possa fazer muitas escritas simultâneas	f
406	0	Desempenho	f
406	1	Facilidade de teste	f
401	1	mas ainda assim penaliza o desempenho pois os \\emph{buffer} facilmente enche	t
402	2	facilidade de modificação	t
403	0	decomposição	t
404	0	pois o desempenho não é muito relevante	t
405	1	obriga a associar uma marca de tempo a cada escrita	t
407	0	Os servidores de leitura tenham respondido a todos os pedidos de leitura	f
407	1	Até que os servidores de leitura se tenham sincronizado com o servidor de escrita	f
407	2	Até que o servidor de escrita tenha processado todas as escritas pendentes	f
408	0	Desempenho	f
408	2	Disponibilidade	f
408	3	Facilidade de manutenção	f
409	1	Desempenho, Segurança e Interoperabilidade	f
409	2	Segurança, Desempenho, Usabilidade, Interoperabilidade e Mobilidade	f
409	3	Segurança, Desempenho, Usabilidade e Mobilidade	f
410	1	Desempenho	f
410	2	Segurança	f
410	3	Mobilidade e Desempenho	f
411	0	Desempenho	f
411	1	Desempenho e Disponibilidade	f
411	3	Segurança e Disponibilidade	f
412	1	Segurança e Facilidade de Utilização	f
412	2	Desempenho e Segurança	f
412	3	Desempenho e Disponibilidade	f
413	0	Apenas um deles tira partido da concorrência	f
413	1	Apenas um deles utiliza técnicas de aprendizagem	f
413	2	Apenas um deles faz \\emph{prefetch}	f
414	0	Disponibilidade	f
414	1	Desempenho e Disponibilidade	f
414	3	Facilidade de modificação	f
415	0	Utilização	f
415	1	Aspetos	f
415	2	Decomposição	f
416	0	Introduzir concorrência	f
416	2	Aumentar recursos	f
416	3	Aumentar a eficiência dos recursos	f
417	0	Melhorar a qualidade da facilidade de modificação pois a nova interface REST esconde a estrutura das mensagens	f
417	1	Melhorar a qualidade de interoperabilidade pois as aplicações externas passaram a poder usar as funcionalidade de administração	f
417	2	Melhorar a qualidade da interoperabilidade pois aplicações externas podem passar a ler e enviar mensagens para o \\gm{}	f
418	0	Segurança	f
418	1	Desempenho	f
418	2	Disponibilidade	f
419	0	Pois cada mensagem não necessita de ser acedida simultaneamente por diversos processos	f
419	1	Pois a estrutura de dados de uma mensagem é mais facilmente implementada num ficheiro	f
419	3	Todas as opções anteriores	f
420	0	Cliente-Servidor	f
420	1	Par-a-Par	f
420	3	\\emph{Tiers}	f
421	0	É uma vista de alto nível do sistema com objetivo de perceber quais são os objetivos e as funcionalidades do sistema	f
421	2	É um conjunto de regras que a equipa de desenvolvimento deve seguir para desenvolver o sistema	f
421	3	É um conjunto de diagramas que mostram os elementos de execução do sistema e os seus relacionamentos	f
422	0	É necessária uma vista para cada \\emph{stakeholder} do sistema	f
422	1	Uma vista apenas pode ser muito simplista	f
422	3	Todas as anteriores	f
423	1	É sempre uma decisão arquitetural pois aplica-se a todo o programa	f
423	2	Pode ser uma decisão arquitetural, dependendo dos requisitos do sistema	f
423	3	Pode ser uma decisão arquitetural, dependendo da experiência do arquiteto	f
424	1	Utilizar uma arquitetura de 3 camadas com as seguintes camadas, de cima para baixo: Apresentação, Lógica de Domínio, Acesso a Dados	f
424	2	Utilizar uma arquitetura de camadas em que o nível mais baixo fornece uma interface para criar uma interface gráfica	f
424	3	Utilizar duas vistas de implantação, em que cada uma delas atribui diferentes componentes a diferentes máquinas com diferentes sistemas operativos	f
425	0	Devemos usar um estilo Utilização	f
425	2	Devemos identificar um módulo para escrever as pontuações num estilo Decomposição	f
425	3	Devemos atribuir a responsabilidade de escrever as pontuações para um outro módulo que já tenha essas responsabilidades	f
426	0	O estilo Decomposição	f
426	1	O estilo Implantação	f
426	3	O estilo Atribuição de trabalho	f
427	0	Um módulo pode conter código de diversos componentes	f
427	1	Um componente pode executar código de diversos módulos	f
427	2	Um módulo pode executar código de diversos componentes	f
428	0	Necessita de uma equipa mais capaz, pois é difícil de desenvolver	f
428	2	É melhor para domínios complexos, por causa de ser fácil de manter	f
428	3	Nenhum dos anteriores	f
630	1	Introduce concurrence tactic.	f
429	1	O padrão Modelo de Domínio para reduzir a interface da camada de lógica de negócio para um conjunto controlado de funcionalidades	f
429	2	A camada de acesso a dados para poder aceder aos dados que necessita em cada serviço	f
429	3	Nenhum dos anteriores	f
430	1	Para aumentar o desempenho da aplicação, porque faz cache dos valores previamente carregados em memória, desta forma reduzindo o número de acessos à base de dados	f
430	2	Para evitar carregar muitos dados da base de dados quando uma dada entidade que tem muitas relações com outras entidades é carregada	f
430	3	Nenhuma das anteriores	f
431	1	Depends more on the architect's experience than on anything\n    else.	f
431	2	Should not depend on the skills of the developing team.	f
431	3	Is driven by a trade-off among the stakeholders needs.	f
432	0	May be responsible for the Featuritis problems of architectures.	f
432	1	May be responsible for the Performitis problems of architectures.	f
432	2	Is focused on creating common generalizations of several systems.	f
433	0	Suffered from featuritis, because the architect decided to delay the difficult parts for latter in the development.	f
433	1	Did not suffer from featuritis.	f
433	3	Suffered from featuritis, but it had no impact on the final development.	f
434	0	Is a high-level view of the system with the purpose of\n  understanding what are the system's goals and features.	f
434	1	Is composed of things such as code units, runtime elements,\n  hardware, and people, together with the relationships among them.	f
434	3	Is a set of diagrams that show the runtime elements of the\n  system and their relationships.	f
435	0	A module may contain code from different components.	f
435	1	A component may execute code from different modules.	f
435	2	A module may execute code from different components.	f
436	1	The traffic monitoring system is the environment.	f
436	2	The Google Map is the artefact.	f
436	3	The location information is correctly included with a probability of 99.99\\% is the response measure.	f
437	0	A Condition Monitoring tactic for the Availability quality.	f
437	2	A Verify Message Integrity tactic to React to Attacks for the Security quality.	f
437	3	An Exception Prevention tactic to Prevent Faults for the Availability quality.	f
438	0	The source of stimulus for scenarios of the Availability quality.	f
438	1	The stimulus for scenarios of the Availability quality.	f
438	2	The stimulus for scenarios of the Security quality.	f
439	0	Manage sampling rate tactic.	f
439	1	Increase resource efficiency tactic.	f
439	2	Introduce concurrency tactic.	f
440	0	The source of stimulus is the ruleset.	f
440	1	The ruleset designer is the stimulus.	f
440	2	The environment is design time.	f
441	0	Schedule resources.	f
441	1	Condition monitoring.	f
441	3	Increase resource efficiency.	f
442	1	How the components manage the communication between the\n  remaining elements in the system.	f
442	2	The stakeholders that drive the development of the system.	f
442	3	The tactics that satisfy the most important requirements for\n  the system.	f
443	1	The Decomposition and Uses styles.	f
443	2	The Layered style.	f
443	3	The Generalization and Decomposition styles.	f
444	1	The Deployment style.	f
444	2	The Uses style.	f
444	3	The Work-assignment style.	f
445	0	Create a decomposition where there is a module corresponding\n  to the Windows OS and another one for the Mac OS X, each one\n  responsible for containing the OS-specific code.	f
445	2	Use an aspect-oriented architecture, where an aspect is used to generate a graphical interface.	f
445	3	Use two deployment views, each one allocating different\n  components to different machines with different operating systems.	f
446	0	It corresponds to a particular case of a specialization in a generalization view.	f
446	2	It represents a relation between a component's port and a port of one of its internal components.	f
446	3	It represent a relation between a component's port and a connector's role.	f
447	0	We have to use a Repository component-and-connector style.	f
447	2	We must identify a module for writing the scores in a\n  Decomposition style.	f
488	1	How the components manage the communication between the\n  remaining elements in the system.	f
447	3	We may assign the responsibility of writing the scores to\n  another module that already has other responsibilities.	f
448	0	Client-server in both cases.	f
448	1	Client-server in the first case and Peer-to-peer in the second.	f
448	3	Peer-to-peer in the first case and Client-Server in the second.	f
449	1	Pipe-and-Filter.	f
449	2	Client-Server.	f
449	3	Publish-Subscribe.	f
450	0	Work assignment view.	f
450	2	Implementation view.	f
450	3	Deployment view.	f
451	1	The Requirements function is not part of the RulesSet module.	f
451	2	The Requirements function is part of the Objects module.	f
451	3	The Requirements function is part of the Dynamic Design module.	f
452	0	A component-and-connector view using a shared-data style.	f
452	1	A data model view.	f
452	2	A service-oriented architecture view.	f
453	0	Peer-to-peer style.	f
453	1	Pipe-and-Filter style.	f
453	3	Publish-subscribe style.	f
454	0	The team did not know the FenixFramework.	f
454	1	The domain only needs CRUD (Create, Read, Update, and Delete) operations.	f
454	3	Most of the information is stored in the client.	f
455	0	It is necessary to design two deployment views, one for each deployment option.	f
455	1	It is necessary to design a single deployment view that contains all the variation, because only the hardware capabilities change.	f
455	2	Two different component-and-connector views are necessary to represent the same runtime behavior of the system.	f
456	1	Undo tactic for usability, because the server can undo the snapshot.	f
456	2	Increase resource efficiency tactic for performance, because it reduces the need of upfront calculus/computation on new clients.	f
456	3	Multiple copies of data tactic for performance, clients do not have to execute the commands.	f
457	0	The server propagates them to all the clients.	f
457	2	The server only propagates local commands to the clients and keeps cursor movements in a log and the snapshots in a repository.	f
457	3	The server propagates the snapshots and the cursor movements to the clients and store the local commands for the initialization of new clients.	f
458	0	Testability.	f
458	1	Modifiability.	f
458	2	Testability and Modifiability.	f
459	0	The Transaction Script pattern to help demarcate the\n  business transactions.	f
459	1	The Domain Model pattern to reduce the interface of the\n  Domain Logic layer to a controlled set.	f
459	2	The Data Access layer to be able to access the data that it\n  needs in each service.	f
460	0	The Transaction Script pattern.	f
460	1	The Table Module pattern.	f
460	2	The Domain Model pattern.	f
461	0	The Transaction Script pattern to help demarcate the\n  business transactions.	f
461	1	The Domain Model pattern to reduce the interface of the\n  Domain Logic layer to a controlled set.	f
461	3	The Table Module pattern to hide the details of the table\n  structure for the Presentation layer.	f
462	0	The Transaction Script pattern.	f
462	2	The Domain Model pattern.	f
462	3	The Service Layer pattern.	f
463	0	Work assignment view.	f
463	1	Install view.	f
463	3	Deployment view.	f
464	0	The Requirements function is part of the Design module.	f
464	2	The Requirements function is part of the Objects module.	f
464	3	The Requirements function is part of the Dynamic Design module.	f
465	1	An Encrypt Data tactic for the Security quality.	f
465	2	A Verify Message Integrity tactic to React to Attacks for the Security quality.	f
465	3	An Exception Prevention tactic to Prevent Faults for the Availability quality.	f
466	1	The stimulus for scenarios of the Availability quality.	f
466	2	The stimulus for scenarios of the Security quality.	f
466	3	The source of stimulus for scenarios of the Security quality.	f
467	0	Manage sampling rate tactic.	f
467	1	Increase resource efficiency tactic.	f
467	2	Introduce concurrency tactic.	f
468	0	The source of stimulus is the ruleset.	f
468	1	The ruleset designer is the stimulus.	f
468	3	The response is defer binding.	f
469	1	Condition monitoring.	f
469	2	Reduce overhead.	f
470	0	Create a decomposition where there is a module corresponding\n  to the Windows OS and another one for the Mac OS X, each one\n  responsible for containing the OS-specific code.	f
470	1	Use a classic 3-layer architecture with the following\n  layers, from top to bottom: Presentation, Domain Logic, and Data\n  Access.	f
470	2	Use an aspect-oriented architecture, where an aspect is used to generate a graphical interface.	f
471	0	It corresponds to a particular case of a specialization in a generalization view.	f
471	1	It represents a relation between a connector's role and a port of one of its internal components.	f
471	3	It represent a relation between a component's port and a connector's role.	f
472	1	It is not necessary to use a ``Data Access'' layer because the information is simple.	f
472	2	We must identify a module for writing the scores in a\n  Decomposition style.	f
472	3	We may assign the responsibility of writing the scores to\n  another module that already has other responsibilities.	f
473	0	Client-server in both cases.	f
473	1	Client-server in the first case and Peer-to-peer in the second.	f
473	2	Peer-to-peer in both cases.	f
474	0	Depends mostly on the system's functional requirements.	f
474	2	Should not depend on the skills of the developing team.	f
474	3	Is driven by a trade-off among the stakeholders needs.	f
475	0	May be responsible for the Featuritis problems of architectures.	f
475	1	May be responsible for the Performitis problems of architectures.	f
475	3	Is focused on the details of the architecture.	f
476	1	A component may execute code from different modules.	f
476	2	A module may execute code from different components.	f
476	3	A component may contain code from different modules.	f
477	0	The current location is the source of the stimulus.	f
477	1	The traffic monitoring system is the environment.	f
477	3	The location information is correctly included with a probability of 99.99\\% is the response measure.	f
478	0	Peer-to-Peer.	f
478	1	Pipe-and-Filter.	f
478	2	Client-Server.	f
479	0	A component-and-connector view using a shared-data style.	f
479	1	A data model view.	f
479	3	A data model view and a component-and-connector view using a shared-data style.	f
480	0	Peer-to-peer style.	f
480	1	Pipe-and-Filter style.	f
480	2	Shared-data style.	f
481	0	The team did not know the FenixFramework.	f
481	1	The domain only needs CRUD (Create, Read, Update, and Delete) operations.	f
481	3	Most of the information is stored in the client.	f
482	0	It is necessary to design two deployment views, one for each deployment option.	f
482	2	Two different component-and-connector views are necessary to represent the same runtime behavior of the system.	f
482	3	The deployment options have a large impact on the work assignment view.	f
483	0	Passive redundancy for availability, because it is possible to recover from the commands log.	f
483	1	Undo tactic for usability, because the server can undo the snapshot.	f
483	3	Multiple copies of data tactic for performance, clients do not have to execute the commands.	f
484	0	The server propagates them to all the clients.	f
484	2	The server only propagates local commands to the clients and keeps cursor movements in a log and the snapshots in a repository.	f
484	3	The server propagates the snapshots and the cursor movements to the clients and store the local commands for the initialization of new clients.	f
485	1	Modifiability.	f
485	2	Testability and Modifiability.	f
485	3	Performance.	f
486	1	Did not suffer from featuritis.	f
486	2	Suffered from some level of featuritis, but it allowed to have a pilot from which the team learned.	f
486	3	Suffered from featuritis, but it had no impact on the final development.	f
487	0	Is a high-level view of the system with the purpose of\n  understanding what are the system's goals and features.	f
487	1	Is composed of things such as code units, runtime elements,\n  hardware, and people, together with the relationships among them.	f
487	2	Is a set of guidelines that the developing team should\n  follow in the development of the system.	f
488	0	The most important requirements (both functional and\n  qualities) that the system must achieve.	f
488	3	The tactics that satisfy the most important requirements for\n  the system.	f
489	1	The Decomposition and Uses styles.	f
489	2	The Layered style.	f
489	3	The Generalization and Decomposition styles.	f
490	0	The Decomposition style.	f
490	1	The Deployment style.	f
490	2	The Uses style.	f
491	1	To analyse the system's functional requirements to see what\n  is the system supposed to do	f
491	2	To analyse the implemented set of features to see what is it\n  that the system actually does	f
491	3	To talk with the people that developed the system to know\n  what they did and why they did it	f
492	1	The main goal of an architect is to identify the quality attributes of system	f
492	2	Architecture is the design that gets harder to change as development progresses	f
492	3	The main goal of an architect is to design a detailed structure of the system that supports most of the requirements	f
493	0	It is not a good idea to consider performance when designing the architecture of the system	f
493	1	The performance of a system only depends on the global performance strategies	f
493	3	None of the above	f
494	0	Represent different architectural qualities and they may not be all represented in a single view	f
494	1	Have a view for each stakeholder	f
494	3	Have a view for each group of interconnected components, and very often a system has several groups of interconnected components	f
495	0	A module	f
495	1	A component	f
495	2	Both, a module and a component	f
496	0	Describing what are the qualities that the system should possess	f
496	1	Describing a set of steps that a user of the system must\n  perform to accomplish some task	f
496	2	Describing a use case for the system that makes clear what\n  should be the system's responses to each of the user's inputs	f
497	0	Ping-and-echo requires the availability monitor to know the addresses of the components it is monitoring	f
497	2	In Ping-and-echo the availability monitor should always send the same request	f
497	3	In Heartbeat, the monitored components can change the message rate	f
498	0	It is not possible to achieve this requirement. A non-architectural solution is to be careful when hiring system administrators	f
498	1	It is necessary to use the authenticate authors tactic to authenticate system administrators before they access to the database	f
498	2	It is necessary to use the encrypt data tactic to encrypt the information with a password that is in a configuration file	f
499	1	Maintain user model	f
499	2	Maintain system model	f
499	3	Aggregate	f
500	0	A scenario for performance associated with a multiple copies of computation tactic	f
500	1	A scenario for usability associated with a support system initiative tactic	f
500	2	A scenario for performance associated with a limit event response tactic	f
501	0	Multiple copies of computation	f
501	2	Increase resource efficiency	f
501	3	All of the above	f
502	0	We should always satisfy in the first place the requirements\n    of the more important stakeholders (such as the client)	f
502	1	If no order was established among them, we would not know\n    from where should we start the design process	f
502	3	When it is not possible to satisfy all of the requirements\n    optimally, we should be aware of their relative importance so that\n    we may find a solution that corresponds to a satisfactory trade-off	f
503	1	Data model view	f
503	2	Generalization view	f
503	3	Layered view	f
504	0	Peer-to-Peer to represent the communication between the components	f
504	2	Generalisation to represent an abstraction common to all interfaces and keep API-specific details in child modules	f
504	3	Layers to create a virtual machine that hides the internals of the application from its users interface code to allow the support of different user interfaces	f
505	1	Install because most of the modules need to be assigned to the same executable file	f
505	2	Development because it is not possible to do incremental development	f
505	3	Availability because if a module fails the failure easily propagates to all the other modules	f
506	1	A Allocation viewtype view	f
506	2	A Communicating processes view	f
506	3	A Install view	f
507	0	It is enough to show the load-balancer between the web clients machines and the servers machines using a deployment view	f
548	2	A data model architectural style	f
501	1	Active redundancy	t
502	2	If one of the stakeholders complains that her requirement\n    is not satisfied, we may explain to her that there were other more\n    important requirements first	t
503	0	Decomposition view	t
504	1	Client-Server to represent the request the application makes to the different new sources	t
505	0	Performance because there is an overhead of communication between the modules.	t
506	0	A Module viewtype view	t
528	1	A scenario for usability associated with a support system initiative tactic	t
507	1	It is necessary to change the connector between the web clients and the web servers, in the component-and-connector view, to show the semantics that is provided by the load-balancer	f
507	2	It is necessary to create a uses view to show how clients require the correct functioning of servers	f
508	0	They have many different use cases, corresponding to many\n    distinct user interfaces	f
508	2	They need to be able to process concurrent requests from\n    the users	f
508	3	They have a very complex domain logic that requires much\n    processing power for answering each request	f
509	0	The Shared Data style	f
509	2	The Publish-subscribe style	f
509	3	The Client-Server style	f
510	1	Planning incremental releases of the system	f
510	2	Estimating the effort needed to implement the system	f
510	3	Analysing the system's portability and reusability	f
511	1	An aspects architectural style	f
511	2	A data model architectural style	f
511	3	A shared-data architectural style	f
512	1	Subscribes to the same kind of events that the \\textsc{inputSub} port	f
512	2	Subscribes to cursor position events	f
512	3	It is unnecessary in the diagram because the \\textsc{:TableEditor} can use port \\textsc{sub2} through the \\textsc{:Sheet} component	f
513	0	The communicating processes architectural style	f
513	1	The client-server architectural style	f
513	3	All of the above	f
514	0	Ignore faulty behaviour tactic	f
514	1	Ping-and-echo tactic	f
514	3	Retry tactic	f
515	0	Performance, because it describes what is the response to REST API calls	f
515	1	Modifiability, because the jsdom code can not be reused by several threads	f
515	2	Security, because it describes a "queue overflow" attack	f
516	0	Reduce overhead tactic	f
516	1	Increase resource efficiency tactic	f
516	2	Increase resources tactic	f
517	0	Overall costs, because of deployment	f
517	2	Testability, because of the logic complexity	f
517	3	Performance, because there is not a significative improvement by using more CPUs	f
518	0	A publish-subscribe style	f
518	1	A peer-to-peer style	f
518	2	A client-server style	f
519	1	Is typically used with more complex data access code	f
519	2	Requires that we write more code when we have only a\n  couple of simple use cases	f
519	3	All of the above	f
520	0	The Service Layer pattern	f
520	1	The Active Record pattern	f
520	2	The Transaction Script pattern	f
521	0	Ignore faulty behaviour tactic	f
521	2	Active redundancy tactic	f
521	3	Retry tactic	f
522	0	Requires a more skilled team, because the object-oriented\n  paradigm is more complex than the procedural paradigm	f
522	1	Is typically used with more complex data access code	f
522	3	All of the above	f
523	1	The Active Record pattern	f
523	2	The Transaction Script pattern	f
523	3	The Data Mapper pattern	f
524	1	Describing a set of steps that a user of the system must\n  perform to accomplish some task	f
524	2	Describing a use case for the system that makes clear what\n  should be the system's responses to each of the user's inputs	f
524	3	Describing the system's features by way of different\n  usage scenarios for it, in which users play the role of actors	f
525	0	Ping-and-echo requires the availability monitor to know the addresses of the components it is monitoring	f
525	2	In Ping-and-echo the availability monitor should always send the same request	f
525	3	In Heartbeat, the monitored components can change the message rate	f
526	0	It is not possible to achieve this requirement. A non-architectural solution is to be careful when hiring system administrators	f
526	1	It is necessary to use the authenticate authors tactic to authenticate system administrators before they access to the database	f
526	3	It is necessary to use the encrypt data tactic to encrypt the information on the client web browser, before it is send to the web server	f
527	0	Maintain task model	f
527	1	Maintain user model	f
527	2	Maintain system model	f
528	0	A scenario for performance associated with a multiple copies of computation tactic	f
528	2	A scenario for performance associated with a limit event response tactic	f
528	3	A scenario for usability associated with a support user initiative tactic	f
529	1	Active redundancy	f
529	2	Increase resource efficiency	f
529	3	All of the above	f
530	1	Data model view	f
530	2	Generalization view	f
530	3	Layered view	f
531	0	To analyse the source code of the system to see how it is built	f
531	1	To analyse the system's functional requirements to see what\n  is the system supposed to do	f
531	3	To talk with the people that developed the system to know\n  what they did and why they did it	f
532	1	The main goal of an architect is to identify the quality attributes of system	f
532	2	Architecture is the design that gets harder to change as development progresses	f
532	3	The main goal of an architect is to design a detailed structure of the system that supports most of the requirements	f
533	0	It is not a good idea to consider performance when designing the architecture of the system	f
533	1	The performance of a system only depends on the global performance strategies	f
533	2	Testability and maintainability always conflict with performance	f
534	0	Represent different architectural qualities and they may not be all represented in a single view	f
534	1	Have a view for each stakeholder	f
534	3	Have a view for each group of interconnected components, and very often a system has several groups of interconnected components	f
535	0	We should always satisfy in the first place the requirements\n    of the more important stakeholders (such as the client)	f
535	1	If no order was established among them, we would not know\n    from where should we start the design process	f
535	2	If one of the stakeholders complains that her requirement\n    is not satisfied, we may explain to her that there were other more\n    important requirements first	f
536	0	A module	f
536	2	Both, a module and a component	f
536	3	An allocation element	f
537	0	Peer-to-Peer to represent the communication between the components	f
537	1	Client-Server to represent the request the application makes to the different new sources	f
537	2	Generalisation to represent an abstraction common to all interfaces and keep API-specific details in child modules	f
538	0	Performance because there is an overhead of communication between the modules.	f
538	1	Install because most of the modules need to be assigned to the same executable file	f
538	2	Development because it is not possible to do incremental development	f
539	0	Performance, because it describes what is the response to REST API calls	f
539	1	Modifiability, because the jsdom code can not be reused by several threads	f
539	3	Interoperability, because the REST API allow the exchange of information with external applications	f
540	0	Reduce overhead tactic	f
540	1	Increase resource efficiency tactic	f
540	3	Testability tactic	f
541	0	Overall costs, because of deployment	f
541	2	Testability, because of the logic complexity	f
541	3	Performance, because there is not a significative improvement by using more CPUs	f
542	0	A Module viewtype view	f
542	1	A Allocation viewtype view	f
542	3	A Install view	f
543	1	A peer-to-peer style	f
543	2	A client-server style	f
543	3	A communication processes style	f
544	1	It is necessary to change the connector between the web clients and the web servers, in the component-and-connector view, to show the semantics that is provided by the load-balancer	f
544	2	It is necessary to create a uses view to show how clients require the correct functioning of servers	f
544	3	It is necessary to change the component-and-connector view to show the communicating processes	f
545	0	They have many different use cases, corresponding to many\n    distinct user interfaces	f
545	2	They need to be able to process concurrent requests from\n    the users	f
545	3	They have a very complex domain logic that requires much\n    processing power for answering each request	f
546	0	The Shared Data style	f
546	1	The Pipes-and-filters style	f
546	3	The Client-Server style	f
547	0	Analysing the performance of the system	f
547	1	Planning incremental releases of the system	f
547	2	Estimating the effort needed to implement the system	f
548	0	A generalisation architectural style	f
548	3	A shared-data architectural style	f
549	1	Subscribes to the same kind of events that the \\textsc{inputSub} port	f
549	2	Subscribes to cursor position events	f
549	3	It is unnecessary in the diagram because the \\textsc{:TableEditor} can use port \\textsc{sub2} through the \\textsc{:Sheet} component	f
550	1	The client-server architectural style	f
550	2	The deployment architectural style	f
550	3	All of the above	f
551	1	Featuritis requires the performance quality because the end user needs to execute the features.	f
551	2	Featuritis may be a result of a requirement of the business context.	f
551	3	Featuritis requires the modifiability quality to allow a the system to be easily modified to support new features.	f
552	0	Such misunderstanding and mistrust occurs because the stakeholders have their own agendas	f
552	1	The cycle Frank Buschmann refers to is the Architectural Influence Cycle.	f
552	2	The cycle Frank Buschmann refers to allows the clarification of requirements.	f
553	0	Frank Buschmann is referring to some possible consequences of the modifiability quality.	f
553	1	Frank Buschmann are considering performance and security as the most important qualities.	f
553	3	Frank Buschmann is not considering modifiability as an important quality	f
554	0	A flexible architecture occurs when it is not possible to identify all the requirements.	f
554	1	A solution to this problem is to prioritize the system qualities.	f
554	3	A solution to this problem is to reduce the level of flexibility of a system.	f
555	0	Performance is a quality that you have to address at the end of the development process.	f
555	1	There is no system which can have good performance and be easily maintainable.	f
555	2	We have to distinguish architectural performance from opportunistic performance.	f
556	1	Modifiability, flexibility, should be the first quality to be addressed because it allows the delay of architectural decisions.	f
556	2	The lack of functionality results in a system without business value, therefore a rich set of features should be implemented first.	f
556	3	A solution for any quality in isolation may lead to a biased architecture.	f
557	0	Is a functional prototype, which tests the functionalities required by the business stakeholders.	f
557	2	Is a baseline architecture that allows to experiment with the most significant architectural requirements.	f
557	3	Is an object-oriented framework, which integrates functional and non-functional requirements of the system.	f
558	0	Project and Technical Contexts.	f
558	1	Project and Professional Contexts.	f
558	2	Business and Project Contexts.	f
559	0	The book definition does not consider relevant the externally visible properties.	f
559	1	The book definition also considers that the properties are externally visible because they are used for reasoning by the stakeholders.	f
559	2	The book definition also considers that the properties are externally visible because by definition an architectural property is externally visible.	f
560	0	A component.	f
560	1	A module.	f
560	2	Both, a component and a module, depending on the perspective.	f
561	0	A component.	f
561	1	A module.	f
561	3	An external element.	f
562	1	A component-and-connector view.	f
562	2	An allocation view.	f
562	3	They are not represented by a view.	f
563	1	Usability.	f
563	2	Security.	f
563	3	Availability.	f
564	1	Availability and Performance.	f
564	2	Testability.	f
564	3	Availability.	f
565	0	This is right because if you don't the project fails.	f
565	2	This is right but you cannot be completely sure whether the decisions are the right ones.	f
565	3	This is wrong because it is against agile way of thinking the software development process.	f
566	0	This shared understanding is what distinguishes architecture from design.	f
566	2	This shared understanding does not allow to define the architecture trade-offs because some of the stakeholders have their own goals.	f
566	3	This shared understanding does not allow to have a global perspective of the system, because stakeholders have different interests.	f
567	0	Are unable to understand the technology capabilities.	f
567	2	Are unable to distinguish architecture from design.	f
567	3	Are focused on the business context of the architecture.	f
568	0	Is unable to define a domain model of the system.	f
568	1	Is focused on the technology context of the architecture.	f
568	3	Is focused on the details of the architecture.	f
569	1	Understand the architecturally significant requirements.	f
569	2	The system design.	f
569	3	Documenting and communicating the architecture.	f
570	0	Tries to guarantee that the final system will have the qualities required by stakeholders.	f
570	2	Does not allow developers to define some of the design of the system	f
570	3	It requires automatic generation of code from the architecture.	f
571	0	Featuritis may result from a requirement of the technical context.	f
571	1	Featuritis requires the performance quality because the end user needs to execute the features.	f
571	3	Featuritis requires the modifiability quality to allow a the system to be easily modified to support new features.	f
572	0	Performance is a quality that you have to address at the end of the development process.	f
572	2	We have to distinguish architectural performance from opportunistic performance.	f
572	3	The system performance quality has impact on the performance of the execution of tests.	f
573	0	The book definition does not consider relevant the externally visible properties.	f
573	1	The book definition also considers that the properties are externally visible because they are used for reasoning by the stakeholders.	f
573	3	The book definition is not correct, as pointed out in the errata.	f
574	0	This shared understanding is what distinguishes architecture from design.	f
574	2	This shared understanding does not allow to define the architecture trade-offs because some of the stakeholders have their own goals.	f
574	3	This shared understanding does not allow to have a global perspective of the system, because stakeholders have different interests.	f
575	1	Understand the architecturally significant requirements.	f
575	2	The system design.	f
575	3	Documenting and communicating the architecture.	f
576	1	This shared understanding is necessary to define precise requirements.	f
576	2	This shared understanding does not allow to define the architecture trade-offs because some of the stakeholders have their own goals.	f
576	3	This shared understanding does not allow to have a global perspective of the system, because stakeholders have different interests.	f
577	1	Understand the architecturally significant requirements.	f
577	2	The system design.	f
577	3	Documenting and communicating the architecture.	f
578	0	Performance is a quality that you have to address at the end of the development process.	f
578	1	There is no system which can have good performance and be easily maintainable.	f
578	3	The system performance quality has impact on the performance of the execution of tests.	f
579	0	The book definition does not consider relevant the externally visible properties.	f
579	1	The book definition also considers that the properties are externally visible because they are used for reasoning by the stakeholders.	f
579	3	The book definition is not correct, as pointed out in the errata.	f
580	0	Featuritis may result from a requirement of the technical context.	f
580	1	Featuritis requires the performance quality because the end user needs to execute the features.	f
580	2	Featuritis may be a result of a requirement of the business context.	f
581	0	Frank Buschmann is referring to some possible consequences of the modifiability quality.	f
581	2	Frank Buschmann is referring that the consequences of a flexible system is poor performance and bad security.	f
581	3	Frank Buschmann is not considering modifiability as an important quality	f
582	0	Performance should be the last quality to be addressed because it is a local property of an architecture.	f
582	1	Modifiability, flexibility, should be the first quality to be addressed because it allows the delay of architectural decisions.	f
582	3	A solution for any quality in isolation may lead to a biased architecture.	f
583	1	A module.	f
583	2	Both, a component and a module, depending on the perspective.	f
583	3	An external element.	f
584	1	This is wrong because you can easily change these decisions during the project lifetime.	f
584	2	This is right but you cannot be completely sure whether the decisions are the right ones.	f
584	3	This is wrong because it is against agile way of thinking the software development process.	f
585	0	Is unable to define a domain model of the system.	f
585	2	Is focused on creating common generalizations of several systems.	f
585	3	Is focused on the details of the architecture.	f
586	1	A module.	f
586	2	Both, a component and a module, depending on the perspective.	f
586	3	An external element.	f
587	0	This is right because if you don't the project fails.	f
587	1	This is wrong because you can easily change these decisions during the project lifetime.	f
587	2	This is right but you cannot be completely sure whether the decisions are the right ones.	f
588	0	Is unable to define a domain model of the system.	f
588	1	Is focused on the technology context of the architecture.	f
588	3	Is focused on the details of the architecture.	f
589	0	Performance should be the last quality to be addressed because it is a local property of an architecture.	f
589	1	Modifiability, flexibility, should be the first quality to be addressed because it allows the delay of architectural decisions.	f
589	3	A solution for any quality in isolation may lead to a biased architecture.	f
590	0	Frank Buschmann is referring to some possible consequences of the modifiability quality.	f
590	1	Frank Buschmann are considering performance and security as the most important qualities.	f
590	2	Frank Buschmann is referring that the consequences of a flexible system is poor performance and bad security.	f
591	0	Such misunderstanding and mistrust occurs because the stakeholders have their own agendas	f
591	1	The cycle Frank Buschmann refers to is the Architectural Influence Cycle.	f
591	3	To break such misunderstanding and mistrust the architecture has to make explicit the stakeholders needs.	f
592	0	Is a functional prototype, which tests the functionalities required by the business stakeholders.	f
592	2	Is a baseline architecture that allows to experiment with the most significant architectural requirements.	f
592	3	Is an object-oriented framework, which integrates functional and non-functional requirements of the system.	f
593	0	A component.	f
593	1	A module.	f
593	3	An external element.	f
594	0	Modifiability.	f
594	2	Security.	f
594	3	Availability.	f
595	1	Are focused on the project context of the architecture.	f
595	2	Are unable to distinguish architecture from design.	f
595	3	Are focused on the business context of the architecture.	f
596	1	Are focused on the project context of the architecture.	f
596	2	Are unable to distinguish architecture from design.	f
596	3	Are focused on the business context of the architecture.	f
597	1	A module.	f
597	2	Both, a component and a module, depending on the perspective.	f
597	3	An external element.	f
598	0	Such misunderstanding and mistrust occurs because the stakeholders have their own agendas	f
598	1	The cycle Frank Buschmann refers to is the Architectural Influence Cycle.	f
598	3	To break such misunderstanding and mistrust the architecture has to make explicit the stakeholders needs.	f
599	0	Modifiability.	f
599	1	Usability.	f
599	3	Availability.	f
600	0	Is a functional prototype, which tests the functionalities required by the business stakeholders.	f
600	1	Is an architecture that demonstrates that the system will support the qualities raised by the stakeholders.	f
600	2	Is a baseline architecture that allows to experiment with the most significant architectural requirements.	f
601	0	A flexible architecture occurs when it is not possible to identify all the requirements.	f
601	2	Performance uncertainty about the system should be dealt with more flexibility.	f
601	3	A solution to this problem is to reduce the level of flexibility of a system.	f
602	0	Project and Technical Contexts.	f
602	1	Project and Professional Contexts.	f
602	3	Professional and Technical Contexts.	f
603	1	A component-and-connector view.	f
603	2	An allocation view.	f
603	3	They are not represented by a view.	f
604	1	Availability and Performance.	f
604	2	Testability.	f
604	3	Availability.	f
605	0	Tries to guarantee that the final system will have the qualities required by stakeholders.	f
629	3	Schedule resources tactic.	f
601	1	A solution to this problem is to prioritize the system qualities.	t
602	2	Business and Project Contexts.	t
603	0	A module view.	t
604	0	Modifiability.	t
605	1	Tries to guarantee that the final system will have the qualities aimed by the architecture.	t
605	2	Does not allow developers to define some of the design of the system	f
605	3	It requires automatic generation of code from the architecture.	f
606	1	Tries to guarantee that the final system will have the qualities aimed by the architecture.	f
606	2	Does not allow developers to define some of the design of the system	f
606	3	It requires automatic generation of code from the architecture.	f
607	0	Modifiability.	f
607	1	Availability and Performance.	f
607	2	Testability.	f
608	0	Project and Technical Contexts.	f
608	1	Project and Professional Contexts.	f
608	3	Professional and Technical Contexts.	f
609	0	A module view.	f
609	1	A component-and-connector view.	f
609	3	They are not represented by a view.	f
610	0	A flexible architecture occurs when it is not possible to identify all the requirements.	f
610	1	A solution to this problem is to prioritize the system qualities.	f
610	2	Performance uncertainty about the system should be dealt with more flexibility.	f
611	0	Performance.	f
611	1	Availability.	f
611	3	Fault-tolerance	f
612	0	The stimulus is a system input.	f
612	2	The artefact can be outside the system.	f
612	3	The stimulus and the response should be always present.	f
613	0	Is a mediator, an application of the mediator pattern, between the input stimulus and the output response.	f
613	1	May be associated to other tactics to deal with a single stimulus.	f
613	3	Is a system decomposition.	f
614	0	Performance.	f
614	2	Interoperability.	f
614	3	Testability.	f
615	1	Implements a tactic to prevent faults.	f
615	2	Can be used as the source of a stimulus in a scenario.	f
615	3	Can be used in a non-concurrent system.	f
616	1	Prevent a fault in software.	f
616	2	Prevent a fault in a process.	f
616	3	Detect a fault.	f
617	0	This situation corresponds to the use of the degradation availability tactic.	f
617	1	This situation corresponds to the use of the removal from service availability tactic.	f
617	2	This situation corresponds to the use of the limit access security tactic.	f
618	0	Ignore faulty behavior.	f
618	1	Transactions.	f
618	3	Exception prevention.	f
619	1	Is a maintain user model design tactic.	f
619	2	Is a design tactic for a scenario where the source of stimulus are technical users.	f
619	3	Is a design tactic for a scenario where the source of stimulus is the graph owner user.	f
620	0	The quality addressed is availability.	f
620	1	The quality addressed is performance.	f
620	2	The quality addressed is availability and a voting design tactic is required to solve the problem.	f
621	0	The quality addressed is availability.	f
621	1	The quality addressed is modifiability.	f
621	3	The quality addressed is modifiability and an increase cohesion design tactic is required to solve the problem.	f
622	1	A Maintain Multiple Copies of Computation design tactic in the WebApp such that reads do not compete with writes.	f
622	2	A Maintain Multiple Copies of Data design tactic in Carbon.	f
622	3	A Maintain Multiple Copies of Data design tactic in the WebApp such that reads do not compete with writes.	f
623	0	Detect intrusion.	f
623	1	Limit access.	f
623	2	Limit exposure.	f
624	0	Detect intrusion.	f
624	2	Verify message integrity.	f
624	3	Detect message delay.	f
625	0	Detect and Resist.	f
625	1	Detect and React.	f
625	3	Resist and React.	f
626	1	Limit exposure, locate the database system in the intranet.	f
626	2	Separate entities, to allow the use of more strict tactics on the sensitive data.	f
626	3	Change default settings, because default passwords are sensitive.	f
627	0	Limit access.	f
627	1	Increase resources.	f
627	3	Maintain multiple copies of data.	f
628	0	Increase resources.	f
628	1	Introduce concurrency.	f
628	2	Reduce overhead.	f
629	0	Maintain multiple copies of data tactic.	f
629	1	Introduce concurrence tactic.	f
630	2	Increase resource efficiency tactic.	f
631	1	Availability.	f
631	2	Reliability.	f
631	3	Fault-tolerance	f
632	1	The response can be omitted.	f
632	2	The artefact can be outside the system.	f
632	3	The stimulus and the response should be always present.	f
633	0	Is a mediator, an application of the mediator pattern, between the input stimulus and the output response.	f
633	1	May be associated to other tactics to deal with a single stimulus.	f
633	3	Is a system decomposition.	f
634	0	Performance.	f
634	1	Availability.	f
634	3	Testability.	f
635	0	Implements a tactic to recover from faults.	f
635	1	Implements a tactic to prevent faults.	f
635	2	Can be used as the source of a stimulus in a scenario.	f
636	0	Prevent a fault in hardware.	f
636	1	Prevent a fault in software.	f
636	2	Prevent a fault in a process.	f
637	0	This situation corresponds to the use of the degradation availability tactic.	f
637	2	This situation corresponds to the use of the limit access security tactic.	f
637	3	This situation corresponds to the use of the limit exposure security tactic.	f
638	0	Ignore faulty behavior.	f
638	1	Transactions.	f
638	2	Rollback.	f
639	1	Is a maintain user model design tactic.	f
639	2	Is a design tactic for a scenario where the source of stimulus are technical users.	f
639	3	Is a design tactic for a scenario where the source of stimulus is the graph owner user.	f
640	0	The quality addressed is availability.	f
640	1	The quality addressed is performance.	f
640	2	The quality addressed is availability and a voting design tactic is required to solve the problem.	f
641	0	The quality addressed is availability.	f
641	2	The quality addressed is availability and an active redundancy design tactic is required to solve the problem.	f
641	3	The quality addressed is modifiability and an increase cohesion design tactic is required to solve the problem.	f
642	0	A Maintain Multiple Copies of Computation design tactic in Carbon.	f
642	1	A Maintain Multiple Copies of Computation design tactic in the WebApp such that reads do not compete with writes.	f
642	3	A Maintain Multiple Copies of Data design tactic in the WebApp such that reads do not compete with writes.	f
643	1	Limit access.	f
643	2	Limit exposure.	f
643	3	Separate entities.	f
644	0	Detect intrusion.	f
644	2	Verify message integrity.	f
644	3	Detect message delay.	f
645	1	Detect and React.	f
645	2	Detect and Recover.	f
645	3	Resist and React.	f
646	1	Limit exposure, locate the database system in the intranet.	f
646	2	Separate entities, to allow the use of more strict tactics on the sensitive data.	f
646	3	Change default settings, because default passwords are sensitive.	f
647	0	Limit access.	f
647	1	Increase resources.	f
647	2	Increase resource efficiency.	f
648	0	Increase resources.	f
648	2	Reduce overhead.	f
648	3	Manage sample rate.	f
649	0	Maintain multiple copies of data tactic.	f
649	2	Increase resource efficiency tactic.	f
649	3	Schedule resources tactic.	f
650	1	Introduce concurrence tactic.	f
650	2	Increase resource efficiency tactic.	f
650	3	Maintain task model tactic.	f
651	0	The stimulus is a system input.	f
651	2	The artefact can be outside the system.	f
651	3	The stimulus and the response should be always present.	f
652	0	Is a mediator, an application of the mediator pattern, between the input stimulus and the output response.	f
652	1	May be associated to other tactics to deal with a single stimulus.	f
652	3	Is a system decomposition.	f
653	1	Availability.	f
653	2	Interoperability.	f
653	3	Testability.	f
654	1	Increase resources.	f
654	2	Increase resource efficiency.	f
654	3	Maintain multiple copies of data.	f
655	0	Prevent a fault in hardware.	f
655	2	Prevent a fault in a process.	f
655	3	Detect a fault.	f
656	0	This situation corresponds to the use of the degradation availability tactic.	f
656	1	This situation corresponds to the use of the removal from service availability tactic.	f
656	3	This situation corresponds to the use of the limit exposure security tactic.	f
657	0	Ignore faulty behavior.	f
657	1	Transactions.	f
657	2	Rollback.	f
658	0	The quality addressed is availability.	f
658	2	The quality addressed is availability and a voting design tactic is required to solve the problem.	f
658	3	The quality addressed is performance and a maintain multiple copies of data design tactic is required to solve the problem.	f
659	1	The quality addressed is modifiability.	f
659	2	The quality addressed is availability and an active redundancy design tactic is required to solve the problem.	f
659	3	The quality addressed is modifiability and an increase cohesion design tactic is required to solve the problem.	f
660	1	A Maintain Multiple Copies of Computation design tactic in the WebApp such that reads do not compete with writes.	f
660	2	A Maintain Multiple Copies of Data design tactic in Carbon.	f
660	3	A Maintain Multiple Copies of Data design tactic in the WebApp such that reads do not compete with writes.	f
661	0	Performance.	f
661	1	Availability.	f
661	3	Fault-tolerance	f
662	1	Limit access.	f
662	2	Limit exposure.	f
662	3	Separate entities.	f
663	0	Is an aggregate design tactic.	f
663	1	Is a maintain user model design tactic.	f
663	2	Is a design tactic for a scenario where the source of stimulus are technical users.	f
664	0	Implements a tactic to recover from faults.	f
664	1	Implements a tactic to prevent faults.	f
664	3	Can be used in a non-concurrent system.	f
665	0	Detect intrusion.	f
665	1	Detect service denial.	f
665	2	Verify message integrity.	f
666	0	Detect and Resist.	f
666	2	Detect and Recover.	f
666	3	Resist and React.	f
667	0	Limit access, to restrict the access to the database system.	f
667	1	Limit exposure, locate the database system in the intranet.	f
667	2	Separate entities, to allow the use of more strict tactics on the sensitive data.	f
668	0	Increase resources.	f
668	1	Introduce concurrency.	f
668	2	Reduce overhead.	f
669	0	Maintain multiple copies of data tactic.	f
669	1	Introduce concurrence tactic.	f
669	3	Schedule resources tactic.	f
670	0	Maintain user model tactic.	f
670	1	Introduce concurrence tactic.	f
670	3	Maintain task model tactic.	f
671	1	Availability.	f
671	2	Reliability.	f
671	3	Fault-tolerance	f
672	0	The stimulus is a system input.	f
672	1	The response can be omitted.	f
672	2	The artefact can be outside the system.	f
673	0	Is a mediator, an application of the mediator pattern, between the input stimulus and the output response.	f
673	1	May be associated to other tactics to deal with a single stimulus.	f
673	3	Is a system decomposition.	f
674	0	Performance.	f
674	1	Availability.	f
674	3	Testability.	f
675	0	Implements a tactic to recover from faults.	f
675	1	Implements a tactic to prevent faults.	f
675	2	Can be used as the source of a stimulus in a scenario.	f
676	1	Prevent a fault in software.	f
676	2	Prevent a fault in a process.	f
676	3	Detect a fault.	f
677	0	This situation corresponds to the use of the degradation availability tactic.	f
677	2	This situation corresponds to the use of the limit access security tactic.	f
677	3	This situation corresponds to the use of the limit exposure security tactic.	f
678	0	Ignore faulty behavior.	f
678	1	Transactions.	f
678	2	Rollback.	f
679	0	Is an aggregate design tactic.	f
679	1	Is a maintain user model design tactic.	f
679	2	Is a design tactic for a scenario where the source of stimulus are technical users.	f
680	0	The quality addressed is availability.	f
680	1	The quality addressed is performance.	f
730	0	Maintain user model tactic.	t
680	2	The quality addressed is availability and a voting design tactic is required to solve the problem.	f
681	0	The quality addressed is availability.	f
681	1	The quality addressed is modifiability.	f
681	3	The quality addressed is modifiability and an increase cohesion design tactic is required to solve the problem.	f
682	1	A Maintain Multiple Copies of Computation design tactic in the WebApp such that reads do not compete with writes.	f
682	2	A Maintain Multiple Copies of Data design tactic in Carbon.	f
682	3	A Maintain Multiple Copies of Data design tactic in the WebApp such that reads do not compete with writes.	f
683	1	Limit access.	f
683	2	Limit exposure.	f
683	3	Separate entities.	f
684	1	Detect service denial.	f
684	2	Verify message integrity.	f
684	3	Detect message delay.	f
685	0	Detect and Resist.	f
685	2	Detect and Recover.	f
685	3	Resist and React.	f
686	0	Limit access, to restrict the access to the database system.	f
686	2	Separate entities, to allow the use of more strict tactics on the sensitive data.	f
686	3	Change default settings, because default passwords are sensitive.	f
687	0	Limit access.	f
687	2	Increase resource efficiency.	f
687	3	Maintain multiple copies of data.	f
688	0	Increase resources.	f
688	1	Introduce concurrency.	f
688	3	Manage sample rate.	f
689	1	Introduce concurrence tactic.	f
689	2	Increase resource efficiency tactic.	f
689	3	Schedule resources tactic.	f
690	0	Maintain user model tactic.	f
690	2	Increase resource efficiency tactic.	f
690	3	Maintain task model tactic.	f
691	0	Performance.	f
691	1	Availability.	f
691	3	Fault-tolerance	f
692	0	Is a mediator, an application of the mediator pattern, between the input stimulus and the output response.	f
692	2	Is an architectural pattern.	f
692	3	Is a system decomposition.	f
693	0	Performance.	f
693	1	Availability.	f
693	3	Testability.	f
694	0	Implements a tactic to recover from faults.	f
694	2	Can be used as the source of a stimulus in a scenario.	f
694	3	Can be used in a non-concurrent system.	f
695	1	This situation corresponds to the use of the removal from service availability tactic.	f
695	2	This situation corresponds to the use of the limit access security tactic.	f
695	3	This situation corresponds to the use of the limit exposure security tactic.	f
696	1	Transactions.	f
696	2	Rollback.	f
696	3	Exception prevention.	f
697	0	Is an aggregate design tactic.	f
697	1	Is a maintain user model design tactic.	f
697	2	Is a design tactic for a scenario where the source of stimulus are technical users.	f
698	0	The quality addressed is availability.	f
698	1	The quality addressed is performance.	f
698	3	The quality addressed is performance and a maintain multiple copies of data design tactic is required to solve the problem.	f
699	1	The quality addressed is modifiability.	f
699	2	The quality addressed is availability and an active redundancy design tactic is required to solve the problem.	f
699	3	The quality addressed is modifiability and an increase cohesion design tactic is required to solve the problem.	f
700	0	A Maintain Multiple Copies of Computation design tactic in Carbon.	f
700	1	A Maintain Multiple Copies of Computation design tactic in the WebApp such that reads do not compete with writes.	f
700	2	A Maintain Multiple Copies of Data design tactic in Carbon.	f
701	0	Detect intrusion.	f
701	1	Limit access.	f
701	3	Separate entities.	f
702	1	Detect service denial.	f
702	2	Verify message integrity.	f
702	3	Detect message delay.	f
703	0	Detect and Resist.	f
703	1	Detect and React.	f
703	2	Detect and Recover.	f
704	0	Limit access, to restrict the access to the database system.	f
701	2	Limit exposure.	t
702	0	Detect intrusion.	t
703	3	Resist and React.	t
704	1	Limit exposure, locate the database system in the intranet.	t
704	2	Separate entities, to allow the use of more strict tactics on the sensitive data.	f
704	3	Change default settings, because default passwords are sensitive.	f
705	0	Limit access.	f
705	1	Increase resources.	f
705	3	Maintain multiple copies of data.	f
706	1	Introduce concurrency.	f
706	2	Reduce overhead.	f
706	3	Manage sample rate.	f
707	0	Prevent a fault in hardware.	f
707	1	Prevent a fault in software.	f
707	3	Detect a fault.	f
708	0	The stimulus is a system input.	f
708	1	The response can be omitted.	f
708	2	The artefact can be outside the system.	f
709	0	Maintain multiple copies of data tactic.	f
709	1	Introduce concurrence tactic.	f
709	3	Schedule resources tactic.	f
710	0	Maintain user model tactic.	f
710	1	Introduce concurrence tactic.	f
710	2	Increase resource efficiency tactic.	f
711	1	Availability.	f
711	2	Reliability.	f
711	3	Fault-tolerance	f
712	1	The response can be omitted.	f
712	2	The artefact can be outside the system.	f
712	3	The stimulus and the response should be always present.	f
713	0	Is a mediator, an application of the mediator pattern, between the input stimulus and the output response.	f
713	1	May be associated to other tactics to deal with a single stimulus.	f
713	3	Is a system decomposition.	f
714	0	Performance.	f
714	1	Availability.	f
714	3	Testability.	f
715	0	Implements a tactic to recover from faults.	f
715	1	Implements a tactic to prevent faults.	f
715	2	Can be used as the source of a stimulus in a scenario.	f
716	0	Prevent a fault in hardware.	f
716	1	Prevent a fault in software.	f
716	2	Prevent a fault in a process.	f
717	0	This situation corresponds to the use of the degradation availability tactic.	f
717	2	This situation corresponds to the use of the limit access security tactic.	f
717	3	This situation corresponds to the use of the limit exposure security tactic.	f
718	0	Ignore faulty behavior.	f
718	1	Transactions.	f
718	2	Rollback.	f
719	1	Is a maintain user model design tactic.	f
719	2	Is a design tactic for a scenario where the source of stimulus are technical users.	f
719	3	Is a design tactic for a scenario where the source of stimulus is the graph owner user.	f
720	0	The quality addressed is availability.	f
720	1	The quality addressed is performance.	f
720	2	The quality addressed is availability and a voting design tactic is required to solve the problem.	f
721	0	The quality addressed is availability.	f
721	2	The quality addressed is availability and an active redundancy design tactic is required to solve the problem.	f
721	3	The quality addressed is modifiability and an increase cohesion design tactic is required to solve the problem.	f
722	0	A Maintain Multiple Copies of Computation design tactic in Carbon.	f
722	1	A Maintain Multiple Copies of Computation design tactic in the WebApp such that reads do not compete with writes.	f
722	3	A Maintain Multiple Copies of Data design tactic in the WebApp such that reads do not compete with writes.	f
723	1	Limit access.	f
723	2	Limit exposure.	f
723	3	Separate entities.	f
724	0	Detect intrusion.	f
724	2	Verify message integrity.	f
724	3	Detect message delay.	f
725	1	Detect and React.	f
725	2	Detect and Recover.	f
725	3	Resist and React.	f
726	1	Limit exposure, locate the database system in the intranet.	f
726	2	Separate entities, to allow the use of more strict tactics on the sensitive data.	f
726	3	Change default settings, because default passwords are sensitive.	f
727	0	Limit access.	f
727	1	Increase resources.	f
727	2	Increase resource efficiency.	f
728	0	Increase resources.	f
728	2	Reduce overhead.	f
728	3	Manage sample rate.	f
729	0	Maintain multiple copies of data tactic.	f
729	2	Increase resource efficiency tactic.	f
729	3	Schedule resources tactic.	f
730	1	Introduce concurrence tactic.	f
730	2	Increase resource efficiency tactic.	f
730	3	Maintain task model tactic.	f
731	0	Performance.	f
731	2	Reliability.	f
731	3	Fault-tolerance	f
732	0	The stimulus is a system input.	f
732	1	The response can be omitted.	f
732	3	The stimulus and the response should be always present.	f
733	1	May be associated to other tactics to deal with a single stimulus.	f
733	2	Is an architectural pattern.	f
733	3	Is a system decomposition.	f
734	1	Implements a tactic to prevent faults.	f
734	2	Can be used as the source of a stimulus in a scenario.	f
734	3	Can be used in a non-concurrent system.	f
735	0	Prevent a fault in hardware.	f
735	2	Prevent a fault in a process.	f
735	3	Detect a fault.	f
736	0	This situation corresponds to the use of the degradation availability tactic.	f
736	1	This situation corresponds to the use of the removal from service availability tactic.	f
736	3	This situation corresponds to the use of the limit exposure security tactic.	f
737	0	Limit access, to restrict the access to the database system.	f
737	1	Limit exposure, locate the database system in the intranet.	f
737	2	Separate entities, to allow the use of more strict tactics on the sensitive data.	f
738	0	Maintain user model tactic.	f
738	2	Increase resource efficiency tactic.	f
738	3	Maintain task model tactic.	f
739	1	Transactions.	f
739	2	Rollback.	f
739	3	Exception prevention.	f
740	1	Is a maintain user model design tactic.	f
740	2	Is a design tactic for a scenario where the source of stimulus are technical users.	f
740	3	Is a design tactic for a scenario where the source of stimulus is the graph owner user.	f
741	0	The quality addressed is availability.	f
741	1	The quality addressed is performance.	f
741	3	The quality addressed is performance and a maintain multiple copies of data design tactic is required to solve the problem.	f
742	1	The quality addressed is modifiability.	f
742	2	The quality addressed is availability and an active redundancy design tactic is required to solve the problem.	f
742	3	The quality addressed is modifiability and an increase cohesion design tactic is required to solve the problem.	f
743	0	A Maintain Multiple Copies of Computation design tactic in Carbon.	f
743	1	A Maintain Multiple Copies of Computation design tactic in the WebApp such that reads do not compete with writes.	f
743	2	A Maintain Multiple Copies of Data design tactic in Carbon.	f
744	0	Detect intrusion.	f
744	1	Limit access.	f
744	3	Separate entities.	f
745	0	Detect intrusion.	f
745	1	Detect service denial.	f
745	2	Verify message integrity.	f
746	0	Detect and Resist.	f
746	2	Detect and Recover.	f
746	3	Resist and React.	f
747	0	Performance.	f
747	1	Availability.	f
747	2	Interoperability.	f
748	0	Limit access.	f
748	1	Increase resources.	f
748	2	Increase resource efficiency.	f
749	0	Increase resources.	f
749	1	Introduce concurrency.	f
749	3	Manage sample rate.	f
750	0	Maintain multiple copies of data tactic.	f
750	1	Introduce concurrence tactic.	f
750	3	Schedule resources tactic.	f
751	1	Availability.	f
751	2	Reliability.	f
751	3	Fault-tolerance	f
752	0	The stimulus is a system input.	f
752	1	The response can be omitted.	f
752	2	The artefact can be outside the system.	f
753	0	Is a mediator, an application of the mediator pattern, between the input stimulus and the output response.	f
753	1	May be associated to other tactics to deal with a single stimulus.	f
753	3	Is a system decomposition.	f
754	0	Performance.	f
754	1	Availability.	f
754	3	Testability.	f
755	0	Implements a tactic to recover from faults.	f
755	1	Implements a tactic to prevent faults.	f
755	2	Can be used as the source of a stimulus in a scenario.	f
756	1	Prevent a fault in software.	f
756	2	Prevent a fault in a process.	f
756	3	Detect a fault.	f
757	0	This situation corresponds to the use of the degradation availability tactic.	f
757	2	This situation corresponds to the use of the limit access security tactic.	f
757	3	This situation corresponds to the use of the limit exposure security tactic.	f
758	0	Ignore faulty behavior.	f
758	1	Transactions.	f
758	2	Rollback.	f
759	0	Is an aggregate design tactic.	f
759	1	Is a maintain user model design tactic.	f
759	2	Is a design tactic for a scenario where the source of stimulus are technical users.	f
760	0	The quality addressed is availability.	f
760	1	The quality addressed is performance.	f
760	2	The quality addressed is availability and a voting design tactic is required to solve the problem.	f
761	0	The quality addressed is availability.	f
761	1	The quality addressed is modifiability.	f
761	3	The quality addressed is modifiability and an increase cohesion design tactic is required to solve the problem.	f
762	1	A Maintain Multiple Copies of Computation design tactic in the WebApp such that reads do not compete with writes.	f
762	2	A Maintain Multiple Copies of Data design tactic in Carbon.	f
762	3	A Maintain Multiple Copies of Data design tactic in the WebApp such that reads do not compete with writes.	f
763	1	Limit access.	f
763	2	Limit exposure.	f
763	3	Separate entities.	f
764	1	Detect service denial.	f
764	2	Verify message integrity.	f
764	3	Detect message delay.	f
765	0	Detect and Resist.	f
765	2	Detect and Recover.	f
765	3	Resist and React.	f
766	0	Limit access, to restrict the access to the database system.	f
766	2	Separate entities, to allow the use of more strict tactics on the sensitive data.	f
766	3	Change default settings, because default passwords are sensitive.	f
767	0	Limit access.	f
767	2	Increase resource efficiency.	f
767	3	Maintain multiple copies of data.	f
768	0	Increase resources.	f
768	1	Introduce concurrency.	f
768	3	Manage sample rate.	f
769	1	Introduce concurrence tactic.	f
769	2	Increase resource efficiency tactic.	f
769	3	Schedule resources tactic.	f
770	0	Maintain user model tactic.	f
770	2	Increase resource efficiency tactic.	f
770	3	Maintain task model tactic.	f
771	0	Performance.	f
771	1	Availability.	f
771	3	Fault-tolerance	f
772	0	The stimulus is a system input.	f
772	2	The artefact can be outside the system.	f
772	3	The stimulus and the response should be always present.	f
773	0	Performance.	f
773	1	Availability.	f
773	3	Testability.	f
774	0	Implements a tactic to recover from faults.	f
774	2	Can be used as the source of a stimulus in a scenario.	f
774	3	Can be used in a non-concurrent system.	f
775	1	Prevent a fault in software.	f
775	2	Prevent a fault in a process.	f
775	3	Detect a fault.	f
776	1	Introduce concurrence tactic.	f
776	2	Increase resource efficiency tactic.	f
776	3	Schedule resources tactic.	f
777	0	Ignore faulty behavior.	f
777	1	Transactions.	f
777	2	Rollback.	f
778	0	Is an aggregate design tactic.	f
778	1	Is a maintain user model design tactic.	f
778	3	Is a design tactic for a scenario where the source of stimulus is the graph owner user.	f
779	1	The quality addressed is performance.	f
779	2	The quality addressed is availability and a voting design tactic is required to solve the problem.	f
779	3	The quality addressed is performance and a maintain multiple copies of data design tactic is required to solve the problem.	f
780	0	A Maintain Multiple Copies of Computation design tactic in Carbon.	f
780	1	A Maintain Multiple Copies of Computation design tactic in the WebApp such that reads do not compete with writes.	f
780	2	A Maintain Multiple Copies of Data design tactic in Carbon.	f
781	0	Detect intrusion.	f
781	1	Limit access.	f
781	3	Separate entities.	f
782	1	Detect service denial.	f
782	2	Verify message integrity.	f
782	3	Detect message delay.	f
783	0	Detect and Resist.	f
783	1	Detect and React.	f
783	2	Detect and Recover.	f
784	0	Limit access, to restrict the access to the database system.	f
784	2	Separate entities, to allow the use of more strict tactics on the sensitive data.	f
784	3	Change default settings, because default passwords are sensitive.	f
785	0	Limit access.	f
785	1	Increase resources.	f
785	3	Maintain multiple copies of data.	f
786	1	Introduce concurrency.	f
786	2	Reduce overhead.	f
786	3	Manage sample rate.	f
787	0	The quality addressed is availability.	f
787	1	The quality addressed is modifiability.	f
787	3	The quality addressed is modifiability and an increase cohesion design tactic is required to solve the problem.	f
788	0	Is a mediator, an application of the mediator pattern, between the input stimulus and the output response.	f
788	1	May be associated to other tactics to deal with a single stimulus.	f
788	2	Is an architectural pattern.	f
789	0	This situation corresponds to the use of the degradation availability tactic.	f
789	1	This situation corresponds to the use of the removal from service availability tactic.	f
789	3	This situation corresponds to the use of the limit exposure security tactic.	f
790	0	Maintain user model tactic.	f
790	1	Introduce concurrence tactic.	f
790	2	Increase resource efficiency tactic.	f
791	1	Do in-house development.	f
791	2	Integrate the development of the software system with the organization's business goals.	f
791	3	Reimplement all the information systems of the organization	f
792	1	Availability scenario.	f
792	2	Modifiability scenario.	f
792	3	Usability scenario.	f
793	0	Business scenario.	f
793	1	Availability scenario.	f
793	3	Usability scenario.	f
794	0	Only contains business qualities.	f
794	1	Cannot be defined for the security quality.	f
794	3	Contains the business value and the architectural impact of architecturally significant requirements.	f
795	0	Is driven by functional requirements.	f
795	1	Is done in a single step, after all the tactics were identified.	f
795	2	Is a top-down process where a initial decomposition is chosen and it is successively decomposed without changing the initial decisions.	f
796	0	This ASR can easily be supported by the architecture because it has little effect in the architecture.	f
796	1	This ASR requires a specific architectural design because it profoundly affects the architecture.	f
796	2	The cost of meeting the ASR after development starts is too high.	f
797	0	This ASR can easily be supported by the architecture.	f
797	2	The architect have to decide on the cost/benefit of designing an architecture that supports this ASR.	f
797	3	The architect should support this ASR after designing an architecture that supports all the ASRs with high business value.	f
798	0	Results from a utility tree for performance.	f
798	1	Results from a single availability scenario.	f
798	2	Results from the application of a single ADD iteration.	f
799	1	Support user initiative tactic.	f
799	2	Maintain multiple copies of data tactic.	f
799	3	Conflict detection tactic.	f
800	0	Testability.	f
800	1	Reliability.	f
800	2	Availability.	f
801	0	Performance.	f
801	2	Availability.	f
801	3	Usability.	f
802	0	Performance.	f
802	1	Modifiability.	f
802	3	Usability.	f
803	1	Interoperability.	f
803	2	Availability.	f
803	3	Usability.	f
804	0	Interoperability.	f
804	2	Availability.	f
804	3	Usability.	f
801	1	Reliability.	t
802	2	Availability.	t
803	0	Performance.	t
804	1	Performance.	t
805	1	Persistence.	f
805	2	Retry.	f
805	3	Passive redundancy.	f
806	1	Limit access.	f
806	2	Support user initiative.	f
806	3	Support system initiative.	f
807	0	Is applied only once at the beginning of the architectural design process.	f
807	1	Is applied at the begin of the architectural design process but may be necessary to redo it later.	f
807	2	Is mostly driven by the security attribute quality.	f
808	0	Results in a similar decomposition as if the criteria was not applied but some modules are identified to be outsourced.	f
808	2	Allows to increase the overall calendar development time of the project because there is a communication overhead with external teams.	f
808	3	Allows to identify modules for which the development team does not have the required implementation competences.	f
809	0	Incorporate in the organization's core business the goals of a software house.	f
809	2	Integrate the development of the software system with the organization's business goals.	f
809	3	Reimplement all the information systems of the organization	f
810	0	Is driven by functional requirements.	f
810	1	Is done in a single step, after all the tactics were identified.	f
810	3	Is an iterative process where architectural designs are proposed as hypothesis and tested.	f
811	1	Reliability.	f
811	2	Availability.	f
811	3	Usability.	f
812	1	Performance.	f
812	2	Availability.	f
812	3	Usability.	f
813	0	Results in a similar decomposition as if the criteria was not applied but some modules are identified to be outsourced.	f
813	2	Allows to increase the overall calendar development time of the project because there is a communication overhead with external teams.	f
813	3	Allows to identify modules for which the development team does not have the required implementation competences.	f
814	1	Reliability.	f
814	2	Availability.	f
814	3	Usability.	f
815	0	Interoperability.	f
815	1	Performance.	f
815	2	Availability.	f
816	0	Incorporate in the organization's core business the goals of a software house.	f
816	1	Do in-house development.	f
816	3	Reimplement all the information systems of the organization	f
817	0	Results in a similar decomposition as if the criteria was not applied but some modules are identified to be outsourced.	f
817	1	Results in a decomposition where each module may be implemented by a single developer.	f
817	3	Allows to identify modules for which the development team does not have the required implementation competences.	f
818	0	Is driven by functional requirements.	f
818	1	Is done in a single step, after all the tactics were identified.	f
818	2	Is a top-down process where a initial decomposition is chosen and it is successively decomposed without changing the initial decisions.	f
819	0	Business scenario.	f
819	1	Availability scenario.	f
819	3	Usability scenario.	f
820	0	This ASR can easily be supported by the architecture because it has little effect in the architecture.	f
820	2	The cost of meeting the ASR after development starts is too high.	f
820	3	Any ASR that has a high business value cannot have a low architecture impact because it needs to be supported by the architecture.	f
821	0	Performance.	f
821	1	Modifiability.	f
821	3	Usability.	f
822	0	Change default settings.	f
822	2	Support user initiative.	f
822	3	Support system initiative.	f
823	1	Results in a decomposition where each module may be implemented by a single developer.	f
823	2	Allows to increase the overall calendar development time of the project because there is a communication overhead with external teams.	f
823	3	Allows to identify modules for which the development team does not have the required implementation competences.	f
824	1	Modifiability.	f
824	2	Availability.	f
824	3	Usability.	f
825	1	Limit access.	f
825	2	Support user initiative.	f
825	3	Support system initiative.	f
826	0	Results in a similar decomposition as if the criteria was not applied but some modules are identified to be outsourced.	f
826	1	Results in a decomposition where each module may be implemented by a single developer.	f
805	0	Rollback.	t
826	3	Allows to identify modules for which the development team does not have the required implementation competences.	f
827	0	This ASR can easily be supported by the architecture because it has little effect in the architecture.	f
827	1	This ASR requires a specific architectural design because it profoundly affects the architecture.	f
827	3	Any ASR that has a high business value cannot have a low architecture impact because it needs to be supported by the architecture.	f
828	0	Business scenario.	f
828	1	Availability scenario.	f
828	2	Modifiability scenario.	f
829	0	Only contains business qualities.	f
829	2	Contains the architectural tactics associated with architecturally significant requirements.	f
829	3	Contains the business value and the architectural impact of architecturally significant requirements.	f
830	0	This ASR can easily be supported by the architecture.	f
830	1	This ASR should be supported by the architecture because of its high impact.	f
830	3	The architect should support this ASR after designing an architecture that supports all the ASRs with high business value.	f
831	1	Reliability.	f
831	2	Availability.	f
831	3	Usability.	f
832	1	Interoperability.	f
832	2	Availability.	f
832	3	Usability.	f
833	0	Is applied only once at the beginning of the architectural design process.	f
833	2	Is mostly driven by the security attribute quality.	f
833	3	Follows a bottom-up decomposition process of the system.	f
834	1	Is applied at the begin of the architectural design process but may be necessary to redo it later.	f
834	2	Is mostly driven by the security attribute quality.	f
834	3	Follows a bottom-up decomposition process of the system.	f
835	0	Performance.	f
835	1	Reliability.	f
835	2	Availability.	f
836	0	Only contains business qualities.	f
836	1	Cannot be defined for the security quality.	f
836	3	Contains the business value and the architectural impact of architecturally significant requirements.	f
837	0	Performance.	f
837	1	Interoperability.	f
837	3	Usability.	f
838	0	This ASR can easily be supported by the architecture.	f
838	1	This ASR should be supported by the architecture because of its high impact.	f
838	2	The architect have to decide on the cost/benefit of designing an architecture that supports this ASR.	f
839	0	Business scenario.	f
839	1	Availability scenario.	f
839	3	Usability scenario.	f
840	0	Results from a utility tree for performance.	f
840	2	Results from the application of a single ADD iteration.	f
840	3	Results from the application of several ADD iterations.	f
841	0	Maintain system model tactic.	f
841	1	Support user initiative tactic.	f
841	3	Conflict detection tactic.	f
842	0	Rollback.	f
842	2	Retry.	f
842	3	Passive redundancy.	f
843	1	Is applied at the begin of the architectural design process but may be necessary to redo it later.	f
843	2	Is mostly driven by the security attribute quality.	f
843	3	Follows a bottom-up decomposition process of the system.	f
844	1	Support user initiative tactic.	f
844	2	Maintain multiple copies of data tactic.	f
844	3	Conflict detection tactic.	f
845	1	Is applied at the begin of the architectural design process but may be necessary to redo it later.	f
845	2	Is mostly driven by the security attribute quality.	f
845	3	Follows a bottom-up decomposition process of the system.	f
846	0	Rollback.	f
846	1	Persistence.	f
846	3	Passive redundancy.	f
847	0	Results from a utility tree for performance.	f
847	1	Results from a single availability scenario.	f
847	3	Results from the application of several ADD iterations.	f
848	0	Business scenario.	f
848	1	Availability scenario.	f
848	2	Modifiability scenario.	f
849	0	Allows the analysis of the impact of changes because if a module uses another it will necessarily have to change whenever the used module changes.	f
1044	1	Layer 4	f
849	2	Allows incremental development because the possible increments of functionally can be inferred from use dependencies.	f
849	3	Improves testability because it informs the tester about which modules involved in circular use dependencies.	f
850	0	The correctness of the caller module may not depend on the correct implementation of the invoked function in the called module.	f
850	1	The invoked function may not have any input parameter.	f
850	3	The invoked function may not have both any input parameter nor any output parameter.	f
851	1	Applying the decomposition style to some of the modules in the loop chain.	f
851	2	Identifying which of the \\emph{uses} dependencies are actually generalization dependencies.	f
851	3	Decomposing a \\emph{uses} relation into different interfaces.	f
852	1	Because the \\emph{is-a} relation does not allow reuse of implementation.	f
852	2	By adding, removing, or changing children.	f
852	3	By changing a parent, which will automatically change all the children that inherit from it.	f
853	0	This means that the modules inside a layer cannot be loosely coupled.	f
853	2	This means that each module cannot use other modules inside the same layer.	f
853	3	This means that the modules inside a layer are likely to be ported to a new application together.	f
854	0	She should try to use a view of the Aspects style, assign this responsibility to a module such that the other modules can crosscut this responsibility.	f
854	1	She should try to use a view of the Aspects style, assign this responsibility to a module and bind it to the modules affected by it.	f
854	3	This means that in this software system it is not possible to modularize each responsibility in a cohesive module.	f
855	0	It is necessary design a CRUD matrix to show the dependencies between the persistent information.	f
855	1	It is enough to design a view of the Data Model architectural style at the conceptual level because Facebook information has a very simple structure.	f
855	2	It is not necessary to have any view of the Data Model architectural style because Facebook information has a very simple structure.	f
856	0	Relates a view of the Uses style with a view of the Data Model style.	f
856	2	Allows to avoid redundancy and inconsistency.	f
856	3	Describes the structure of the data used by the system.	f
857	1	Limit access.	f
857	2	Authorize actors.	f
857	3	Separate entities.	f
858	1	Exception detection.	f
858	2	Detect intrusion.	f
858	3	Condition monitoring.	f
859	0	Schedule resources.	f
859	1	Maintain multiple copies of data.	f
859	3	Reduce overhead.	f
860	1	Multiple copies of computation tactic.	f
860	2	Passive redundancy tactic.	f
860	3	Multiple copies of computation and Active redundancy tactics.	f
861	0	A module interface has to be attached to a single component port.	f
861	1	A module interface can be replicated but component ports cannot.	f
861	2	A module interface cannot be replicated but component ports can.	f
862	0	The type of a connector does not depend on the type of its roles.	f
862	1	The type of a component does not depend on the type of its ports.	f
862	3	The attachment between components and connectors only depends on their ports and roles types.	f
863	0	A module contains the code that executes in a single component and a component executes the code of a single module.	f
863	1	A module contains the code that can execute in several components and a component executes the code of a single module.	f
863	2	A module contains the code that executes in a single component and a component can execute the code of several modules.	f
864	0	She encapsulates the connector qualities inside a higher level component.	f
864	2	She does not want to clutter the view with details and trusts the development team to implement the connector according to the required quality level.	f
864	3	The required quality associated with the connector is supported by existing and well-know technology.	f
865	0	It is possible to integrate a new data accessor without changing the other data accessors.	f
865	1	It is possible to change the repository schema without changing the data accessors.	f
865	2	The integration of a new data accessor only implies changes in the data accessors that access the same type of data.	f
866	0	It implements a maintain multiple copies of computation tactic.	f
866	1	It supports the concurrent access of data accessors.	f
1141	0	Ping/Echo	f
866	2	It supports the access to persistent information.	f
867	0	It allows an undefined number of clients.	f
867	1	It is possible to have redundant servers.	f
867	3	Servers can send a heartbeat to clients.	f
868	0	She can define a variant of this style with asynchronous communication by allowing the client to register callbacks that the server calls at specific times.	f
868	1	She has to use another architectural style to describe asynchronous communication.	f
868	3	She can define a variant of this style with asynchronous communication by allowing the server to have the initiative to initiate the interaction.	f
869	1	Applying the decomposition style to some of the modules in the loop chain.	f
869	2	Identifying which of the \\emph{uses} dependencies are actually generalization dependencies.	f
869	3	Decomposing a \\emph{uses} relation into different interfaces.	f
870	0	She should try to use a view of the Aspects style, assign this responsibility to a module such that the other modules can crosscut this responsibility.	f
870	1	She should try to use a view of the Aspects style, assign this responsibility to a module and bind it to the modules affected by it.	f
870	2	She should define finer-grained modules where she splits the unassigned responsibility.	f
871	0	Limit exposure.	f
871	1	Limit access.	f
871	3	Separate entities.	f
872	0	The type of a connector does not depend on the type of its roles.	f
872	1	The type of a component does not depend on the type of its ports.	f
872	3	The attachment between components and connectors only depends on their ports and roles types.	f
873	0	It implements a maintain multiple copies of computation tactic.	f
873	1	It supports the concurrent access of data accessors.	f
873	2	It supports the access to persistent information.	f
874	0	Applying the generalization style to identify child modules of a module in the loop chain.	f
874	1	Applying the decomposition style to some of the modules in the loop chain.	f
874	3	Decomposing a \\emph{uses} relation into different interfaces.	f
875	0	She should try to use a view of the Aspects style, assign this responsibility to a module such that the other modules can crosscut this responsibility.	f
875	2	She should define finer-grained modules where she splits the unassigned responsibility.	f
875	3	This means that in this software system it is not possible to modularize each responsibility in a cohesive module.	f
876	0	Limit exposure.	f
876	1	Limit access.	f
876	3	Separate entities.	f
877	0	The type of a connector does not depend on the type of its roles.	f
877	2	The attachment is a runtime relation which dynamically manages type compliance.	f
877	3	The attachment between components and connectors only depends on their ports and roles types.	f
878	1	It supports the concurrent access of data accessors.	f
878	2	It supports the access to persistent information.	f
878	3	It implements a maintain multiple copies of data tactic.	f
879	1	Because the \\emph{is-a} relation does not allow reuse of implementation.	f
879	2	By adding, removing, or changing children.	f
879	3	By changing a parent, which will automatically change all the children that inherit from it.	f
880	1	It is enough to design a view of the Data Model architectural style at the conceptual level because Facebook information has a very simple structure.	f
880	2	It is not necessary to have any view of the Data Model architectural style because Facebook information has a very simple structure.	f
880	3	It is necessary to design a view of the Data Model architectural style at the physical level to deal with performance issues of the access to data.	f
881	0	Schedule resources.	f
881	1	Maintain multiple copies of data.	f
881	3	Reduce overhead.	f
882	0	She encapsulates the connector qualities inside a higher level component.	f
882	1	She delays the complete specification of the connector for development time to have human resources to prototype and measure different implementations.	f
882	3	The required quality associated with the connector is supported by existing and well-know technology.	f
883	0	She can define a variant of this style with asynchronous communication by allowing the client to register callbacks that the server calls at specific times.	f
883	1	She has to use another architectural style to describe asynchronous communication.	f
883	2	She can use the request/reply connector but the server should not return results to the client.	f
884	0	She encapsulates the connector qualities inside a higher level component.	f
884	2	She does not want to clutter the view with details and trusts the development team to implement the connector according to the required quality level.	f
884	3	The required quality associated with the connector is supported by existing and well-know technology.	f
885	0	She can define a variant of this style with asynchronous communication by allowing the client to register callbacks that the server calls at specific times.	f
885	1	She has to use another architectural style to describe asynchronous communication.	f
885	3	She can define a variant of this style with asynchronous communication by allowing the server to have the initiative to initiate the interaction.	f
886	1	Because the \\emph{is-a} relation does not allow reuse of implementation.	f
886	2	By adding, removing, or changing children.	f
886	3	By changing a parent, which will automatically change all the children that inherit from it.	f
887	1	Maintain multiple copies of data.	f
887	2	Increase resource efficiency.	f
887	3	Reduce overhead.	f
888	0	It is necessary design a CRUD matrix to show the dependencies between the persistent information.	f
888	2	It is not necessary to have any view of the Data Model architectural style because Facebook information has a very simple structure.	f
888	3	It is necessary to design a view of the Data Model architectural style at the physical level to deal with performance issues of the access to data.	f
889	1	Improves testability because if a module uses another then it is only possible to test them together.	f
889	2	Allows incremental development because the possible increments of functionally can be inferred from use dependencies.	f
889	3	Improves testability because it informs the tester about which modules involved in circular use dependencies.	f
890	0	Relates a view of the Uses style with a view of the Data Model style.	f
890	1	Is an extension of a view of the Data Model style.	f
890	2	Allows to avoid redundancy and inconsistency.	f
891	0	Multiple copies of computation and Passive redundancy tactics.	f
891	1	Multiple copies of computation tactic.	f
891	3	Multiple copies of computation and Active redundancy tactics.	f
892	0	A module interface has to be attached to a single component port.	f
892	1	A module interface can be replicated but component ports cannot.	f
892	3	A module interface may be attached to several component ports.	f
893	0	It allows an undefined number of clients.	f
893	1	It is possible to have redundant servers.	f
893	2	Servers can also be clients.	f
894	0	Multiple copies of computation and Passive redundancy tactics.	f
894	1	Multiple copies of computation tactic.	f
894	3	Multiple copies of computation and Active redundancy tactics.	f
895	0	A module interface has to be attached to a single component port.	f
895	2	A module interface cannot be replicated but component ports can.	f
895	3	A module interface may be attached to several component ports.	f
896	0	Relates a view of the Uses style with a view of the Data Model style.	f
896	1	Is an extension of a view of the Data Model style.	f
896	3	Describes the structure of the data used by the system.	f
897	0	It allows an undefined number of clients.	f
897	2	Servers can also be clients.	f
897	3	Servers can send a heartbeat to clients.	f
898	1	Improves testability because if a module uses another then it is only possible to test them together.	f
898	2	Allows incremental development because the possible increments of functionally can be inferred from use dependencies.	f
898	3	Improves testability because it informs the tester about which modules involved in circular use dependencies.	f
899	1	A module contains the code that can execute in several components and a component executes the code of a single module.	f
899	2	A module contains the code that executes in a single component and a component can execute the code of several modules.	f
899	3	A module contains the code that can execute in several components and a component can execute the code of several modules.	f
900	1	Exception detection.	f
900	2	Detect intrusion.	f
900	3	Condition monitoring.	f
901	0	It is possible to integrate a new data accessor without changing the other data accessors.	f
901	1	It is possible to change the repository schema without changing the data accessors.	f
901	3	The communication between data accessors does not occur through the repository.	f
902	0	The correctness of the caller module may not depend on the correct implementation of the invoked function in the called module.	f
902	1	The invoked function may not have any input parameter.	f
902	3	The invoked function may not have both any input parameter nor any output parameter.	f
903	0	This means that the modules inside a layer cannot be loosely coupled.	f
903	1	This means that this architectural style emphasizes the quality of performance.	f
903	2	This means that each module cannot use other modules inside the same layer.	f
904	0	This means that the modules inside a layer cannot be loosely coupled.	f
904	2	This means that each module cannot use other modules inside the same layer.	f
904	3	This means that the modules inside a layer are likely to be ported to a new application together.	f
905	0	It is possible to integrate a new data accessor without changing the other data accessors.	f
905	1	It is possible to change the repository schema without changing the data accessors.	f
905	3	The communication between data accessors does not occur through the repository.	f
906	1	A module contains the code that can execute in several components and a component executes the code of a single module.	f
906	2	A module contains the code that executes in a single component and a component can execute the code of several modules.	f
906	3	A module contains the code that can execute in several components and a component can execute the code of several modules.	f
907	1	Exception detection.	f
907	2	Detect intrusion.	f
907	3	Condition monitoring.	f
908	0	The correctness of the caller module may not depend on the correct implementation of the invoked function in the called module.	f
908	2	The invoked function may not have any output parameter.	f
908	3	The invoked function may not have both any input parameter nor any output parameter.	f
909	1	The peer initiating the request for a file needs to know where the file is located.	f
909	2	If a peer providing a file crashes it is necessary to restart to download the file from the begin.	f
909	3	The price for high scalability and availability is the need to have several replicas of the files to be shared.	f
910	0	When a peer connects to the network it establishes connections with all other peers in the network.	f
910	1	The behavior described in the sentence can be represented in a view where the dynamic reconfiguration architectural style is used.	f
910	2	When a peer receives a connection it sends all its files to the peer connecting it.	f
911	0	It applies layers to tiers.	f
911	1	Restrict the communication between components because, for instance, a group of components should be located in the same hardware.	f
911	3	Defines tiers as components.	f
912	0	A component can subscribe to events.	f
912	1	All the published events are received by their subscribing components.	f
912	3	The set of events types are predefined at initialization time.	f
913	0	It enforces the use of a single implementation language among all applications.	f
913	1	The orchestration is in charge of improving the transparent location of service providers.	f
913	2	The enterprise service bus coordinates the execution of several services.	f
914	1	It decouples the coordination of the interaction among applications from the applications themselves.	f
914	2	It improves transparency of location of service providers.	f
914	3	It encapsulates applications through well-defined interfaces, decouples the coordination of the interaction among applications from the applications themselves, and improves transparency of location of service providers.	f
915	0	Is a Client-Server style because consumers are clients and providers are servers.	f
915	2	Can use a Service Registry to improve transparency of location of service providers.	f
915	3	Is a Publish-subscriber style because consumers use an enterprise service bus.	f
916	0	But when the filters are executed sequentially the composition power is reduced.	f
916	1	Which improves modifiability, because filters are decoupled through pipes.	f
916	2	But the size of buffers may reduce the composition power.	f
917	0	Memcached can be considered a sub-module of the Store Graphs module.	f
917	1	Memcached can be considered a sub-module of the Present Graphs module.	f
917	2	Memcached can be considered a direct sub-module of the top Graphite module.	f
918	0	Buffering can be considered a sub-module of the Store Graphs module.	f
918	1	Buffering can be considered a sub-module of the Present Graphs module.	f
918	2	Buffering can be considered a direct sub-module of the top Graphite module.	f
919	0	In the view there are multiple instances of the \\texttt{Queue} component.	f
919	1	In the view there are multiple instances of the \\texttt{Writer} component.	f
919	3	In the view the \\texttt{produce} port of a \\texttt{Receiver} component is attached to the \\texttt{consume} port of a \\texttt{Writer} component.	f
920	1	There is a interface delegation relation between the \\texttt{read} port of \\texttt{Queue} and the \\texttt{query} port of \\texttt{Carbon}.	f
920	2	There is a connector between the \\texttt{producer} port of a \\texttt{Queue} component and the \\texttt{client} port of its \\texttt{Carbon} component.	f
920	3	The \\texttt{client} ports of \\texttt{Carbon} and \\texttt{WebApp} are connected to a \\texttt{Client} component through the same connector instance.	f
921	1	A work assignment view.	f
921	2	A deployment and a work assignment view.	f
921	3	A install view.	f
922	1	Implementation style.	f
922	2	Install style.	f
922	3	Work assignment style.	f
923	0	Deployment style.	f
923	2	Install style.	f
923	3	Work assignment style.	f
924	0	A work assignment view.	f
924	2	An install view.	f
924	3	An implementation view.	f
925	0	The layered view to support a new specific layer for the customization of the catalog.	f
925	2	The data model view in order to define entities for each kind of catalog.	f
925	3	The data model view in order to define generic entities that can be customized for different kinds of catalogs.	f
926	0	A change to the uses view to represent that friends can use each other catalog.	f
926	1	A change of the layered view to support different presentations, one for each friend.	f
926	3	A new aspect view to include the responsibilities associated with the access control.	f
927	1	The uses view to represent how the mobile device uses the Catalog application.	f
927	2	The layered view to include a layer for each type of device.	f
927	3	The domain layer of the layered view to represent the types of devices.	f
928	0	The layered view to deal with the aspects of portability.	f
928	2	The uses view to show the uses relationships between the different platforms.	f
928	3	The data model view to represent each one of the platforms.	f
929	0	The file transfers follows the same path of nodes used to identify where the file was located.	f
929	1	The peer initiating the request for a file needs to know where the file is located.	f
929	3	The price for high scalability and availability is the need to have several replicas of the files to be shared.	f
930	0	Is a Client-Server style because consumers are clients and providers are servers.	f
930	2	Can use a Service Registry to improve transparency of location of service providers.	f
930	3	Is a Publish-subscriber style because consumers use an enterprise service bus.	f
931	0	In the view there are multiple instances of the \\texttt{Queue} component.	f
931	1	In the view there are multiple instances of the \\texttt{Writer} component.	f
931	3	In the view the \\texttt{produce} port of a \\texttt{Receiver} component is attached to the \\texttt{consume} port of a \\texttt{Writer} component.	f
932	0	A deployment view.	f
932	2	A deployment and a work assignment view.	f
932	3	A install view.	f
933	1	The layered view to accommodate a new layer for which kind of catalog, which other layers may use.	f
933	2	The data model view in order to define entities for each kind of catalog.	f
933	3	The data model view in order to define generic entities that can be customized for different kinds of catalogs.	f
934	1	A work assignment view.	f
934	2	A deployment and a work assignment view.	f
934	3	A install view.	f
935	1	The peer initiating the request for a file needs to know where the file is located.	f
935	2	If a peer providing a file crashes it is necessary to restart to download the file from the begin.	f
935	3	The price for high scalability and availability is the need to have several replicas of the files to be shared.	f
936	0	The layered view to support a new specific layer for the customization of the catalog.	f
936	1	The layered view to accommodate a new layer for which kind of catalog, which other layers may use.	f
936	3	The data model view in order to define generic entities that can be customized for different kinds of catalogs.	f
937	0	Is a Client-Server style because consumers are clients and providers are servers.	f
937	1	Is a Peer-to-Peer style because consumers and providers are peers.	f
937	3	Is a Publish-subscriber style because consumers use an enterprise service bus.	f
938	0	In the view there are multiple instances of the \\texttt{Queue} component.	f
938	1	In the view there are multiple instances of the \\texttt{Writer} component.	f
938	2	In the view \\texttt{Receiver} component's \\texttt{client} port is not associated with an external port.	f
939	0	When a peer connects to the network it establishes connections with all other peers in the network.	f
939	2	When a peer receives a connection it sends all its files to the peer connecting it.	f
939	3	The behavior described in the sentence can be represented in a view where the tier architectural style is used.	f
940	0	It encapsulates applications through well-defined interfaces.	f
940	1	It decouples the coordination of the interaction among applications from the applications themselves.	f
940	3	It encapsulates applications through well-defined interfaces, decouples the coordination of the interaction among applications from the applications themselves, and improves transparency of location of service providers.	f
941	1	There is a interface delegation relation between the \\texttt{read} port of \\texttt{Queue} and the \\texttt{query} port of \\texttt{Carbon}.	f
941	2	There is a connector between the \\texttt{producer} port of a \\texttt{Queue} component and the \\texttt{client} port of its \\texttt{Carbon} component.	f
941	3	The \\texttt{client} ports of \\texttt{Carbon} and \\texttt{WebApp} are connected to a \\texttt{Client} component through the same connector instance.	f
942	1	Implementation style.	f
942	2	Install style.	f
942	3	Work assignment style.	f
943	0	A change to the uses view to represent that friends can use each other catalog.	f
943	2	A change of the decomposition view to include the responsibilities associated with the access control.	f
943	3	A new aspect view to include the responsibilities associated with the access control.	f
944	1	Implementation style.	f
944	2	Install style.	f
944	3	Work assignment style.	f
945	0	A change to the uses view to represent that friends can use each other catalog.	f
945	1	A change of the layered view to support different presentations, one for each friend.	f
945	2	A change of the decomposition view to include the responsibilities associated with the access control.	f
946	0	When a peer connects to the network it establishes connections with all other peers in the network.	f
946	1	The behavior described in the sentence can be represented in a view where the dynamic reconfiguration architectural style is used.	f
946	3	The behavior described in the sentence can be represented in a view where the tier architectural style is used.	f
947	0	It encapsulates applications through well-defined interfaces.	f
947	1	It decouples the coordination of the interaction among applications from the applications themselves.	f
947	3	It encapsulates applications through well-defined interfaces, decouples the coordination of the interaction among applications from the applications themselves, and improves transparency of location of service providers.	f
948	0	There is a message passing connector between the \\texttt{read} port of \\texttt{Queue} and the \\texttt{data points access} port of \\texttt{WebApp}.	f
948	1	There is a interface delegation relation between the \\texttt{read} port of \\texttt{Queue} and the \\texttt{query} port of \\texttt{Carbon}.	f
948	2	There is a connector between the \\texttt{producer} port of a \\texttt{Queue} component and the \\texttt{client} port of its \\texttt{Carbon} component.	f
949	0	It applies layers to tiers.	f
949	1	Restrict the communication between components because, for instance, a group of components should be located in the same hardware.	f
949	3	Defines tiers as components.	f
950	0	It enforces the use of a single implementation language among all applications.	f
950	2	The enterprise service bus coordinates the execution of several services.	f
950	3	It decouples applications developed for different organizations.	f
951	0	Deployment style.	f
951	1	Implementation style.	f
951	3	Work assignment style.	f
952	0	The decomposition view to include a module for the synchronization responsibilities.	f
952	2	The layered view to include a layer for each type of device.	f
952	3	The domain layer of the layered view to represent the types of devices.	f
953	1	Memcached can be considered a sub-module of the Present Graphs module.	f
953	2	Memcached can be considered a direct sub-module of the top Graphite module.	f
953	3	Memcached is not a module.	f
954	1	The uses view to represent how the mobile device uses the Catalog application.	f
954	2	The layered view to include a layer for each type of device.	f
954	3	The domain layer of the layered view to represent the types of devices.	f
955	1	The orchestration is in charge of improving the transparent location of service providers.	f
955	2	The enterprise service bus coordinates the execution of several services.	f
955	3	It decouples applications developed for different organizations.	f
956	0	Deployment style.	f
956	1	Implementation style.	f
956	3	Work assignment style.	f
957	0	Memcached can be considered a sub-module of the Store Graphs module.	f
957	1	Memcached can be considered a sub-module of the Present Graphs module.	f
957	3	Memcached is not a module.	f
958	0	It applies layers to tiers.	f
958	1	Restrict the communication between components because, for instance, a group of components should be located in the same hardware.	f
958	2	Is an extension of the Client-Server architectural style.	f
959	0	A component can subscribe to events.	f
959	2	The events should be delivered by the same order they are sent.	f
959	3	The set of events types are predefined at initialization time.	f
960	0	But when the filters are executed sequentially the composition power is reduced.	f
960	1	Which improves modifiability, because filters are decoupled through pipes.	f
960	3	And filters do not have to agree on the data formats.	f
961	1	Buffering can be considered a sub-module of the Present Graphs module.	f
961	2	Buffering can be considered a direct sub-module of the top Graphite module.	f
961	3	Buffering is not a module.	f
962	1	A deployment view.	f
962	2	An install view.	f
962	3	An implementation view.	f
963	0	The layered view to deal with the aspects of portability.	f
963	2	The uses view to show the uses relationships between the different platforms.	f
963	3	The data model view to represent each one of the platforms.	f
964	1	A deployment view.	f
964	2	An install view.	f
964	3	An implementation view.	f
965	0	The layered view to deal with the aspects of portability.	f
965	1	The uses view to show the coupling between the different platforms.	f
965	2	The uses view to show the uses relationships between the different platforms.	f
966	0	A component can subscribe to events.	f
966	1	All the published events are received by their subscribing components.	f
966	3	The set of events types are predefined at initialization time.	f
967	0	Buffering can be considered a sub-module of the Store Graphs module.	f
967	1	Buffering can be considered a sub-module of the Present Graphs module.	f
967	3	Buffering is not a module.	f
968	0	But when the filters are executed sequentially the composition power is reduced.	f
968	1	Which improves modifiability, because filters are decoupled through pipes.	f
968	2	But the size of buffers may reduce the composition power.	f
969	0	Amazon Silk is more convenient for mobile devices because it does most of the computation in the cloud.	f
969	1	Google Chrome is more convenient for mobile devices because it has an optimized network stack that runs in any kind device.	f
969	3	Google Chrome is more convenient for mobile devices because content delivery is optimized.	f
970	0	Amazon Silk predicts accesses based on the information gathered for all Silk users.	f
970	2	Amazon Silk predictions are constrained by the amount of information it can store about each user access.	f
970	3	Google Chrome predictions do not require storage in the client-side.	f
971	0	Amazon Silk explicitly caches pages on the browser to optimize accesses.	f
971	1	Google Chrome predictor takes into consideration the amount of available cache.	f
971	3	Google Chrome cache is shared among the different users of a desktop machine.	f
972	0	In Amazon Silk a request for a web page corresponds to a peer-to-peer interaction between all the web components containing the resources.	f
1025	2	Row Data Gateway and Data Mapper.	f
972	2	In Amazon Silk a request for a web page corresponds to requesting a service from the amazon cloud.	f
972	3	In Google Chrome a request for a web page aggregates the page on the background before it is sent to the client.	f
973	1	As a submodule of the RulesSet module.	f
973	2	As a module but not included in the RulesSet subtree.	f
973	3	As a specialization of the Design module.	f
974	1	Should be described as a submodule of but not included in the RulesSet subtree.	f
974	2	Should be described as a submodule of the Design module.	f
974	3	Should not be described as a module because it is a component.	f
975	0	There is a ThousandParsec connector.	f
975	1	There is a Request/Reply connector.	f
975	2	There is a ThousandParsec connector which can be decomposed into a set of components and Request/Reply connectors.	f
976	0	There is a ThousandParsec connector.	f
976	1	There is a Read/Write connector which encapsulates a redundant Repository.	f
976	3	There is a Read/Write connector which guarantees that only the turns of the last two players may be lost.	f
977	1	Was taken because Native applications provide better modifiability qualities.	f
977	2	Was taken because HTML5 provides better usability qualities.	f
977	3	Was taken because Native application provide better support for working offline.	f
978	0	Supports asynchronous communication to deal with disconnected mode.	f
978	1	Implements an event bus that allows the server to inform the client about new order recommendations.	f
978	2	May loose some of the changes done on the client component.	f
979	0	Two distinct unidirectional connectors.	f
979	1	A single bidirectional connector.	f
979	3	A single unidirectional connector.	f
980	1	An iterative development was followed, which allowed more time to develop a connector with good performance in the latter stages of the project.	f
980	2	Performance was traded for the modifiability quality.	f
980	3	An incremental development was followed, which allowed to have the system in production without being necessary to export all the information to the mainframe.	f
981	0	The \\textsc{: TableEditor} broadcasts the cursor position through the \\textsc{: Sheet}.	f
981	1	An interface delegation is missing in the picture to represent the \\textsc{: TableEditor} broadcasting the cursor position through the \\textsc{Pub} port.	f
981	2	The \\textsc{: Sheet} broadcasts the cursor position through the \\textsc{Pub} port.	f
982	0	The server implements the \\textsc{: Repository} component and the \\textsc{: Broadcast} connector.	f
982	2	The server implements the \\textsc{: Broadcast} connector.	f
982	3	The server implements the \\textsc{SpreadSheet} components	f
983	0	The \\textsc{Parser} module is part of the code executed by the \\textsc{: TableEditor} component.	f
983	1	The \\textsc{Parser} module is part of the code executed by the \\textsc{: Sheet} component.	f
983	3	The code of the \\textsc{Parser} module is executed by both, the \\textsc{: Sheet} and the repository components (the latter is not visible in the view).	f
984	1	The \\textsc{ConflictResolution} module is part of the code executed by the \\textsc{: Sheet} component.	f
984	2	The code of the \\textsc{ConflictResolution} module is executed by a broadcast connector that implements an eventbus between the \\textsc{SpreadSheet} components.	f
984	3	The code of the \\textsc{ConflictResolution} module is executed in a server component because it needs to be centralized.	f
985	0	Table Data Gateway and Row Data Gateway.	f
985	1	Row Data Gateway and Active Record.	f
985	3	Active Record and Data Mapper.	f
986	0	Table Data Gateway and Row Data Gateway.	f
986	1	Row Data Gateway and Active Record.	f
986	2	Row Data Gateway and Data Mapper.	f
987	0	Are responsible for loading the objects they refer to.	f
987	1	Are responsible for the management of transactions, begin and end of transactions.	f
987	3	May not even exist, only record sets are used.	f
988	0	An object oriented style is followed.	f
988	1	The business logic is organized around record sets.	f
988	2	Row Data Gateway is the most suitable data source pattern.	f
989	1	Google Chrome is more convenient for mobile devices because it has an optimized network stack that runs in any kind device.	f
989	2	Amazon Silk is more convenient for mobile devices because it customizes the number of threads that run in the device.	f
989	3	Google Chrome is more convenient for mobile devices because content delivery is optimized.	f
990	1	There is a Read/Write connector which encapsulates a redundant Repository.	f
990	2	There is a Read/Write connector which guarantees that players turns are not lost.	f
990	3	There is a Read/Write connector which guarantees that only the turns of the last two players may be lost.	f
991	0	Supports asynchronous communication to deal with disconnected mode.	f
991	1	Implements an event bus that allows the server to inform the client about new order recommendations.	f
991	3	Has reduced reliability qualities.	f
992	0	The \\textsc{ConflictResolution} module is part of the code executed by the \\textsc{: TableEditor} component.	f
992	1	The \\textsc{ConflictResolution} module is part of the code executed by the \\textsc{: Sheet} component.	f
992	3	The code of the \\textsc{ConflictResolution} module is executed in a server component because it needs to be centralized.	f
993	0	An object oriented style is followed.	f
993	1	The business logic is organized around record sets.	f
993	2	Row Data Gateway is the most suitable data source pattern.	f
994	0	The \\textsc{ConflictResolution} module is part of the code executed by the \\textsc{: TableEditor} component.	f
994	2	The code of the \\textsc{ConflictResolution} module is executed by a broadcast connector that implements an eventbus between the \\textsc{SpreadSheet} components.	f
994	3	The code of the \\textsc{ConflictResolution} module is executed in a server component because it needs to be centralized.	f
995	0	An object oriented style is followed.	f
995	1	The business logic is organized around record sets.	f
995	3	A Service Layer should be used to provide an interface for the presentation layer.	f
996	1	Google Chrome is more convenient for mobile devices because it has an optimized network stack that runs in any kind device.	f
996	2	Amazon Silk is more convenient for mobile devices because it customizes the number of threads that run in the device.	f
996	3	Google Chrome is more convenient for mobile devices because content delivery is optimized.	f
997	1	There is a Read/Write connector which encapsulates a redundant Repository.	f
997	2	There is a Read/Write connector which guarantees that players turns are not lost.	f
997	3	There is a Read/Write connector which guarantees that only the turns of the last two players may be lost.	f
998	0	Supports asynchronous communication to deal with disconnected mode.	f
998	2	May loose some of the changes done on the client component.	f
998	3	Has reduced reliability qualities.	f
999	1	In Google Chrome a request for a web page is accomplished by a single access to the internet.	f
999	2	In Amazon Silk a request for a web page corresponds to requesting a service from the amazon cloud.	f
999	3	In Google Chrome a request for a web page aggregates the page on the background before it is sent to the client.	f
1000	0	Should be described as a submodule of the RulesSet module.	f
1000	1	Should be described as a submodule of but not included in the RulesSet subtree.	f
1000	2	Should be described as a submodule of the Design module.	f
1001	0	Performance was traded for easy of development.	f
1001	1	An iterative development was followed, which allowed more time to develop a connector with good performance in the latter stages of the project.	f
1001	3	An incremental development was followed, which allowed to have the system in production without being necessary to export all the information to the mainframe.	f
1002	0	The \\textsc{: TableEditor} broadcasts the cursor position through the \\textsc{: Sheet}.	f
1002	1	An interface delegation is missing in the picture to represent the \\textsc{: TableEditor} broadcasting the cursor position through the \\textsc{Pub} port.	f
1002	3	The \\textsc{: TableEditor} broadcasts the cursor position through its \\textsc{: StatusCallback} port.	f
1003	0	Are responsible for loading the objects they refer to.	f
1003	1	Are responsible for the management of transactions, begin and end of transactions.	f
1003	2	Contain the business logic.	f
1004	0	Are responsible for loading the objects they refer to.	f
1004	1	Are responsible for the management of transactions, begin and end of transactions.	f
1004	3	May not even exist, only record sets are used.	f
1005	0	Performance was traded for easy of development.	f
1005	2	Performance was traded for the modifiability quality.	f
1005	3	An incremental development was followed, which allowed to have the system in production without being necessary to export all the information to the mainframe.	f
1006	0	In Amazon Silk a request for a web page corresponds to a peer-to-peer interaction between all the web components containing the resources.	f
1025	3	Active Record and Data Mapper.	f
1001	2	Performance was traded for the modifiability quality.	t
1002	2	The \\textsc{: Sheet} broadcasts the cursor position through the \\textsc{Pub} port.	t
1003	3	May not even exist, only record sets are used.	t
1004	2	Contain the business logic.	t
1005	1	An iterative development was followed, which allowed more time to develop a connector with good performance in the latter stages of the project.	t
1006	1	In Google Chrome a request for a web page is accomplished by a single access to the internet.	f
1006	3	In Google Chrome a request for a web page aggregates the page on the background before it is sent to the client.	f
1007	0	Should be described as a submodule of the RulesSet module.	f
1007	2	Should be described as a submodule of the Design module.	f
1007	3	Should not be described as a module because it is a component.	f
1008	1	An interface delegation is missing in the picture to represent the \\textsc{: TableEditor} broadcasting the cursor position through the \\textsc{Pub} port.	f
1008	2	The \\textsc{: Sheet} broadcasts the cursor position through the \\textsc{Pub} port.	f
1008	3	The \\textsc{: TableEditor} broadcasts the cursor position through its \\textsc{: StatusCallback} port.	f
1009	1	Google Chrome uses a usability maintain system model tactic.	f
1009	2	Amazon Silk predictions are constrained by the amount of information it can store about each user access.	f
1009	3	Google Chrome predictions do not require storage in the client-side.	f
1010	1	There is a Request/Reply connector.	f
1010	2	There is a ThousandParsec connector which can be decomposed into a set of components and Request/Reply connectors.	f
1010	3	There is an EventBus connector.	f
1011	0	Was taken because HTML5 provides better portability qualities.	f
1011	1	Was taken because Native applications provide better modifiability qualities.	f
1011	3	Was taken because Native application provide better support for working offline.	f
1012	0	The server implements the \\textsc{: Repository} component and the \\textsc{: Broadcast} connector.	f
1012	1	The server implements the \\textsc{: Repository} component.	f
1012	3	The server implements the \\textsc{SpreadSheet} components	f
1013	0	Table Data Gateway and Row Data Gateway.	f
1013	1	Row Data Gateway and Active Record.	f
1013	2	Row Data Gateway and Data Mapper.	f
1014	0	Table Data Gateway and Row Data Gateway.	f
1014	2	Row Data Gateway and Data Mapper.	f
1014	3	Active Record and Data Mapper.	f
1015	0	Was taken because HTML5 provides better portability qualities.	f
1015	1	Was taken because Native applications provide better modifiability qualities.	f
1015	3	Was taken because Native application provide better support for working offline.	f
1016	1	Google Chrome uses a usability maintain system model tactic.	f
1016	2	Amazon Silk predictions are constrained by the amount of information it can store about each user access.	f
1016	3	Google Chrome predictions do not require storage in the client-side.	f
1017	1	The server implements the \\textsc{: Repository} component.	f
1017	2	The server implements the \\textsc{: Broadcast} connector.	f
1017	3	The server implements the \\textsc{SpreadSheet} components	f
1018	0	There is a ThousandParsec connector.	f
1018	2	There is a ThousandParsec connector which can be decomposed into a set of components and Request/Reply connectors.	f
1018	3	There is an EventBus connector.	f
1019	1	Google Chrome predictor takes into consideration the amount of available cache.	f
1019	2	Amazon Silk cache is not shared between different users of the service to support confidentiality.	f
1019	3	Google Chrome cache is shared among the different users of a desktop machine.	f
1020	0	As a specialization of the RulesSet module.	f
1020	1	As a submodule of the RulesSet module.	f
1020	2	As a module but not included in the RulesSet subtree.	f
1021	0	Two distinct unidirectional connectors.	f
1021	1	A single bidirectional connector.	f
1021	3	A single unidirectional connector.	f
1022	0	The \\textsc{Parser} module is part of the code executed by the \\textsc{: TableEditor} component.	f
1022	1	The \\textsc{Parser} module is part of the code executed by the \\textsc{: Sheet} component.	f
1022	3	The code of the \\textsc{Parser} module is executed by both, the \\textsc{: Sheet} and the repository components (the latter is not visible in the view).	f
1023	0	Table Data Gateway and Row Data Gateway.	f
1023	1	Row Data Gateway and Active Record.	f
1023	2	Row Data Gateway and Data Mapper.	f
1024	0	Two distinct unidirectional connectors.	f
1024	1	A single bidirectional connector.	f
1024	3	A single unidirectional connector.	f
1025	0	Table Data Gateway and Row Data Gateway.	f
1026	0	Amazon Silk explicitly caches pages on the browser to optimize accesses.	f
1026	1	Google Chrome predictor takes into consideration the amount of available cache.	f
1026	3	Google Chrome cache is shared among the different users of a desktop machine.	f
1027	0	As a specialization of the RulesSet module.	f
1027	2	As a module but not included in the RulesSet subtree.	f
1027	3	As a specialization of the Design module.	f
1028	1	The \\textsc{Parser} module is part of the code executed by the \\textsc{: Sheet} component.	f
1028	2	The code of the \\textsc{Parser} module is executed by a repository component, which is not represented in the view.	f
1028	3	The code of the \\textsc{Parser} module is executed by both, the \\textsc{: Sheet} and the repository components (the latter is not visible in the view).	f
1029	1	This law can be seen as an example of the architecture influence cycle	f
1029	2	This law states that architectures impact on the structure of the organization	f
1029	3	This law does not apply to the design of architectures	f
1030	1	Becomes unavailable for clients if there is a fault in the hardware of database server (srv-db)	f
1030	2	Becomes unavailable for clients if there is a fault in the hardware of service server (srv-opc)	f
1030	3	Becomes unavailable for banks if there is a fault in the hardware of service server (srv-opc)	f
1031	1	There is no system which can have good performance and be easily maintainable	f
1031	2	We have to distinguish architectural performance from opportunistic performance	f
1031	3	The system performance quality has impact on the performance of the execution of tests	f
1032	1	Do not have a software architecture, because in agile\n\t      methodologies there is no architectural design phase	f
1032	2	Do not have a software architecture, because the practice of\n\t      refactoring allows changing every part of the system easily	f
1032	3	May have a software architecture, but that architecture is\n\t      not known because it was neither designed nor documented	f
1033	1	Describing a set of steps that a user of the system must\n  \tperform to accomplish some task	f
1033	2	Describing a use case for the system that makes clear what\n    should be the system's responses to each of the user's inputs	f
1033	3	Describing the system's features by way of different\n    usage scenarios for it, in which users play the role of actors	f
1034	1	They are both components	f
1034	2	The \\emph{Request Node} is a component and the\n      \\emph{Cache} is a module	f
1034	3	The \\emph{Request Node} is a module and the \\emph{Cache}\n      is a component	f
1035	1	Active redundancy	f
1035	2	Ignore faulty behaviour	f
1035	3	Ping/Echo	f
1036	1	Results in the creation of a third module that does not have to change when any of the original modules are changed.	f
1036	2	Increases the cohesion between the two modules.	f
1036	3	Cannot be used together with the Reduce Overhead performance tactic.	f
1037	1	Limit event response.	f
1037	2	Prioritize events.	f
1037	3	Bound execution time.	f
1038	1	Performance was the main concern of the design of the configuration strategy in Nginx	f
1038	2	Apache emphasizes the usability quality for system administrators by allowing to split the configuration by different files	f
1038	3	Nginx emphasizes the usability quality for system administrators by reducing the number or errors	f
1039	1	The response is JUnit XML standard	f
1039	2	The source of the stimulus is Sun	f
1039	3	The measure of the response is a robust open-source community associated with it	f
1040	1	Availability and Modifiability	f
1040	2	Performance and Reliability	f
1040	3	Reliability and Security	f
1041	1	If no order was established among them, we would not know\n      from where should we start the design process	f
1041	2	If one of the stakeholders complains that his requirement\n      is not satisfied, we may explain to him that there were other more\n      important requirements first	f
1041	3	When it is not possible to satisfy all of the requirements\n      optimally, we should be aware of their relative importance so that\n      we may find a solution that corresponds to a satisfactory trade-off	f
1042	1	Project managers are not interested in views that use this style because it lacks the necessary level of detail.	f
1042	2	Incremental development is a criteria that drives the design of views of this type.	f
1042	3	There should be at least one view of the system using this architectural style.	f
1043	1	The Deployment style	f
1043	2	The Uses style	f
1043	3	The Work-assignment style	f
1044	2	In a layered architecture all layers are equally modifiable	f
1044	3	Modifiability is not made easier by a layered architecture	f
1045	1	You should use only views of the component-and-connector\n    \tviewtype, which describe the dynamic aspects of the system	f
1045	2	You may need to use views of the three viewtypes	f
1045	3	The only views that are relevant to performance\n    \trequirements are views of the Deployment style	f
1046	1	The Client-Server style	f
1046	2	The Deployment style	f
1046	3	The Communicating Processes style	f
1047	1	The Pipes-and-filters style	f
1047	2	The Publish-subscribe style	f
1047	3	The Client-Server style	f
1048	1	The Pipes-and-filters style	f
1048	2	The Client-Server style	f
1048	3	The Publish-subscribe style	f
1049	1	It is useful for the project managers.	f
1049	2	It does not consider the software that is outsourced.	f
1049	3	It allows to estimate the cost of hardware.	f
1050	1	Using threads ensures that the processing of each request is\n  \tisolated from the remaining requests	f
1050	2	With this approach they may use all of the available cores\n  \tin multiprocessor machines	f
1050	3	They are used for implementing enterprise applications that\n  \ttypically have complex domain logic and, by using threads, it is\n  \teasier to reuse code from one request to another	f
1051	1	A schedule resources tactic	f
1051	2	A multiple copies of computation tactic	f
1051	3	A manage sampling rate tactic	f
1052	1	A client-server view with non-blocking connectors for the interaction between threads and core data structures	f
1052	2	A communicating-processes view with non-blocking connectors for the interaction between threads and core data structures	f
1052	3	A deployment view which allocate threads to the multi-cores	f
1053	1	In the component-and-connector view, because the\n      connector between the web client and the web server has to change	f
1053	2	In the Layer view, because the order of the layers will\n      have to change	f
1053	3	In the mapping between layers of the system and the\n      components where they execute	f
1054	1	The most relevant architectural style in the right part of the figure is shared-data	f
1054	2	The system represented in the left part of the figure tends to be non-transactional	f
1054	3	The system represented in the right part of the figure tends to have good modifiability	f
1055	1	Client-server to express how multiple clients can access the applications	f
1055	2	Tiers to express that different applications define their own contexts	f
1055	3	Decomposition to express the different responsibilities assigned to each application	f
1056	1	The solution where the cache is responsible for the eviction has better availability	f
1056	2	The solution where the application is responsible for the eviction has better modifiability	f
1056	3	The solution where the cache is responsible for the eviction has better performance	f
1057	1	Interoperability	f
1057	2	Reliability	f
1057	3	Security	f
1058	1	Communicating Processes	f
1058	2	Repository	f
1058	3	Pipes-and-Filters	f
1059	0	The stimulus is to integrate reports from a variety of test tools	f
1059	2	The source of the stimulus is Sun	f
1059	3	The measure of the response is a robust open-source community associated with it	f
1060	0	Modifiability and Performance	f
1060	2	Performance and Reliability	f
1060	3	Reliability and Security	f
1061	0	In the Deployment view, because the presentation\n      component is now executing in a different place	f
1061	2	In the Layer view, because the order of the layers will\n      have to change	f
1061	3	In the mapping between layers of the system and the\n      components where they execute	f
1062	0	The left part of the figure represents a three-layered architecture	f
1062	2	The system represented in the left part of the figure tends to be non-transactional	f
1062	3	The system represented in the right part of the figure tends to have good modifiability	f
1063	0	Service-oriented architecture to express how clients can access the services	f
1063	2	Tiers to express that different applications define their own contexts	f
1063	3	Decomposition to express the different responsibilities assigned to each application	f
1064	0	We should always satisfy in the first place the requirements\n      of more important stakeholders (such as the client)	f
1141	1	Heartbeat	f
1064	2	If one of the stakeholders complains that his requirement\n      is not satisfied, we may explain to him that there were other more\n      important requirements first	f
1064	3	When it is not possible to satisfy all of the requirements\n      optimally, we should be aware of their relative importance so that\n      we may find a solution that corresponds to a satisfactory trade-off	f
1065	0	Its main goal is to establish the reusability qualities of the architecture.	f
1065	2	Incremental development is a criteria that drives the design of views of this type.	f
1065	3	There should be at least one view of the system using this architectural style.	f
1066	0	The Decomposition style	f
1066	2	The Uses style	f
1066	3	The Work-assignment style	f
1067	0	Layer 1	f
1067	2	In a layered architecture all layers are equally modifiable	f
1067	3	Modifiability is not made easier by a layered architecture	f
1068	0	Retry	f
1068	2	Ignore faulty behaviour	f
1068	3	Ping/Echo	f
1069	0	Has as main goal the reduction of the modules' size.	f
1069	2	Increases the cohesion between the two modules.	f
1069	3	Cannot be used together with the Reduce Overhead performance tactic.	f
1070	0	Manage sampling rate.	f
1070	2	Prioritize events.	f
1070	3	Bound execution time.	f
1071	0	Due to its configuration strategy Apache has better performance	f
1071	2	Apache emphasizes the usability quality for system administrators by allowing to split the configuration by different files	f
1071	3	Nginx emphasizes the usability quality for system administrators by reducing the number or errors	f
1072	0	It makes no sense to use views of the module viewtype, as\n    \tthey give only a static view of the system	f
1072	2	You may need to use views of the three viewtypes	f
1072	3	The only views that are relevant to performance\n    \trequirements are views of the Deployment style	f
1073	0	The Work Assignment style	f
1073	2	The Deployment style	f
1073	3	The Communicating Processes style	f
1074	0	The Shared Data style	f
1074	2	The Publish-subscribe style	f
1074	3	The Client-Server style	f
1075	0	The Peer-to-Peer style	f
1075	2	The Client-Server style	f
1075	3	The Publish-subscribe style	f
1076	0	It assigns components and connectors to people and teams.	f
1076	2	It does not consider the software that is outsourced.	f
1076	3	It allows to estimate the cost of hardware.	f
1077	0	Launching a new process for processing each request is too expensive	f
1077	2	With this approach they may use all of the available cores\n  \tin multiprocessor machines	f
1077	3	They are used for implementing enterprise applications that\n  \ttypically have complex domain logic and, by using threads, it is\n  \teasier to reuse code from one request to another	f
1078	0	An increase resource efficiency tactic	f
1078	2	A multiple copies of computation tactic	f
1078	3	A manage sampling rate tactic	f
1079	0	A decomposition view which represent the module for compare-and-set	f
1079	2	A communicating-processes view with non-blocking connectors for the interaction between threads and core data structures	f
1079	3	A deployment view which allocate threads to the multi-cores	f
1080	0	The solution where the application is responsible for the eviction has better availability	f
1080	2	The solution where the application is responsible for the eviction has better modifiability	f
1080	3	The solution where the cache is responsible for the eviction has better performance	f
1081	0	Performance	f
1081	2	Reliability	f
1081	3	Security	f
1082	0	Client-server	f
1082	2	Repository	f
1082	3	Pipes-and-Filters	f
1083	0	This law highlights the impact of the business on the architecture	f
1083	2	This law states that architectures impact on the structure of the organization	f
1083	3	This law does not apply to the design of architectures	f
1084	0	Becomes unavailable for clients if there is a fault in the hardware of web server (srv-web)	f
1084	2	Becomes unavailable for clients if there is a fault in the hardware of service server (srv-opc)	f
1141	3	Removal from Service	f
1141	2	Voting	t
1084	3	Becomes unavailable for banks if there is a fault in the hardware of service server (srv-opc)	f
1085	0	Performance is a quality that you have to address at the end of the development process	f
1085	2	We have to distinguish architectural performance from opportunistic performance	f
1085	3	The system performance quality has impact on the performance of the execution of tests	f
1086	0	Typically have a software architecture that results\n\t      from the common knowledge about the system that is shared among\n\t      the team members	f
1086	2	Do not have a software architecture, because the practice of\n\t      refactoring allows changing every part of the system easily	f
1086	3	May have a software architecture, but that architecture is\n\t      not known because it was neither designed nor documented	f
1087	0	Describing what are the qualities that the system should possess	f
1087	2	Describing a use case for the system that makes clear what\n    should be the system's responses to each of the user's inputs	f
1087	3	Describing the system's features by way of different\n    usage scenarios for it, in which users play the role of actors	f
1088	0	They are both modules	f
1088	2	The \\emph{Request Node} is a component and the\n      \\emph{Cache} is a module	f
1088	3	The \\emph{Request Node} is a module and the \\emph{Cache}\n      is a component	f
1089	1	Is useful only if done (even if only partially) before the\n    \tsystem's implementation is concluded, because if the system is\n    \talready implemented, its implementation uniquely determines the\n    \tarchitecture	f
1089	2	Is useful only if done (even if only partially) before the\n    \tsystem passes all of the acceptance tests by the client, given\n    \tthat no more requirements changes will take place after that time	f
1089	3	Is useful even if the implementation is concluded and the\n    \tsystem has entered the maintenance phase	f
1090	1	The components that manage the communication between the\n  \tremaining elements in the system	f
1090	2	The stakeholders that drive the development of the system	f
1090	3	The tactics that satisfy the most important requirements for\n  \tthe system	f
1091	1	Depends more on the architect's experience than on anything else	f
1091	2	Should not depend on the skills of the developing team	f
1091	3	None of the above	f
1092	1	Communicating processes and shared-data	f
1092	2	Communicating processes, shared-data and service-oriented architecture	f
1092	3	Communicating processes, shared-data, service-oriented architecture, and peer-to-peer	f
1093	1	A component may execute code from different modules	f
1093	2	A module may execute code from different components	f
1093	3	A component may contain code from different modules	f
1094	1	They allow us to build a more robust architecture that satisfies less specific\n\t\trequirements, which address a wider range of situations that may happen in\n\t\tthe system	f
1094	2	They identify the most important requirements that the system should satisfy	f
1094	3	They guide us in the requirement elicitation process with the system's stakeholders	f
1095	1	Heartbeat	f
1095	2	Voting	f
1095	3	Removal from Service	f
1096	1	This is a modifiability scenario which has a defer binding tactic.	f
1096	2	This is not a modifiability scenario because the source of the stimulus cannot be a system administrator.	f
1096	3	This is a modifiability scenario and its environment design time.	f
1097	1	Spawn a new thread for processing each request	f
1097	2	Put the requests into a queue and schedule their processing	f
1097	3	Buy a server with high processing power	f
1098	1	Limit event response.	f
1098	2	Prioritize events.	f
1098	3	Maintain multiple copies of computation.	f
1099	1	Understand the architecturally significant requirements	f
1099	2	The system design	f
1099	3	Documenting and communicating the architecture	f
1100	1	Availability	f
1100	2	Testability	f
1100	3	Interoperability	f
1101	1	Modifiability	f
1101	2	Usability	f
1101	3	Security	f
1102	1	The project manager uses this view to get advice on the incremental development of the system.	f
1102	2	The uses relation should be applied to the coarse-grained modules, because it allows to identify circular dependences.	f
1102	3	There isn't any relation with the layered architectural style because the allowed-to-use relation is more generic.	f
1101	0	Performance	t
1102	0	Cycles in the uses relation between modules are a good sign, because it indicates that several modules should be tested together.	t
1103	0	There is a high level of communication between the several modules, and this\n\t\twill cause the system to have a low performance	t
1103	1	It is not possible to install the system in more than one machine	f
1103	2	It is not possible to develop and to test the system incrementally	f
1103	3	It is very hard to explain what the system does, because we need to understand\n\t\tall the execution fluxes	f
1104	1	Can use the operations defined in the lower layer, but not the ones defined in\n\t \tthe upper layer	f
1104	2	Can use the operations defined in the upper layer, but not the ones defined in\n\t \tthe lower layer	f
1104	3	Should use some operation defined in the lower layer	f
1105	1	May, on another view of the system, be represented by a set of components\n\t\tand connectors	f
1105	2	Represent the dependency relations that exist among the various components	f
1105	3	Represent the control flow during a execution of the system	f
1106	1	The Client-Server style	f
1106	2	The Shared-Data style	f
1106	3	The Publish-subscribe style	f
1107	1	The Pipes-and-filters style	f
1107	2	The Peer-to-Peer style	f
1107	3	The Communicating Processes style	f
1108	1	The Client-Server style	f
1108	2	The Service Oriented Architecture style	f
1108	3	The Communicating Processes style	f
1109	1	It cannot assign software elements to virtual servers because they are not hardware.	f
1109	2	For each set of software elements there is a single possible assignment to hardwre.	f
1109	3	It is useful for system administrators.	f
1110	1	By executing in parallel each of the phases of the\n      pipeline corresponding to the processing of a request	f
1110	2	By executing in parallel the processing of the various requests	f
1110	3	By processing completely each request before moving to\n      the next one, in a sequential process	f
1111	1	Communicating-Processes	f
1111	2	Tiers	f
1111	3	Client-Server and Shared-data	f
1112	1	You need to design a client-server view representing the interaction between the DSL and the servers that execute its commands	f
1112	2	You need to design an implementation view to allow system administrators configure the builds	f
1112	3	You do not need to change the views because the DSL does not have any architectural impact	f
1113	1	A client-server view which represent the byte stream for transmission across a network	f
1113	2	A connector that has the serialization and de-serialization speed qualities	f
1113	3	A decomposition view which contains the serialization/de-serilization modules	f
1114	1	A Client-Server architecture, where the \\emph{mashup}\n      is the client and the various sources are the servers	f
1114	2	A layered architecture, where the access to the various\n      sources is the responsibility of the bottommost layer	f
1114	3	A Publish-Subscribe architecture, where the various\n      sources publish events with the changes made and the\n      \\emph{mashup} subscribes those events	f
1115	1	The main quality of the system in the left part of the figure is scalability	f
1115	2	The main quality of the system in the right part of the figure is ease of development	f
1115	3	The main quality of the system in the left part of the figure is to promote cross-functional teams	f
1116	1	Decomposition to express the services interfaces	f
1116	2	Aspects to express the evolution of service interfaces	f
1116	3	Publish-subscribe to express how data is shared between services	f
1117	1	Performance because it allows the processing of more requests per unit of time	f
1117	2	Availability because even if PartB1 is not available partB2 can be provided	f
1117	3	Reliability because a single correct read is used to responde to several requests	f
1118	1	Usability	f
1118	2	Performance	f
1118	3	Testability	f
1119	0	The Decomposition style	f
1119	1	The Client-Server style	f
1119	3	The Communicating Processes style	f
1120	0	It assigns modules to the hardware.	f
1120	1	It cannot assign software elements to virtual servers because they are not hardware.	f
1120	3	It is useful for system administrators.	f
1121	0	By interleaving the various processing phases of each\n      request in a sequential process	f
1121	1	By executing in parallel each of the phases of the\n      pipeline corresponding to the processing of a request	f
1121	3	By processing completely each request before moving to\n      the next one, in a sequential process	f
1122	0	You need to change the decomposition view to represent modules with the responsibilities associated with the DSL	f
1122	1	You need to design a client-server view representing the interaction between the DSL and the servers that execute its commands	f
1163	1	The invoked function may not have any input parameter.	f
1122	3	You do not need to change the views because the DSL does not have any architectural impact	f
1123	0	A uses view which represent modules for the externalizers	f
1123	1	A client-server view which represent the byte stream for transmission across a network	f
1123	3	A decomposition view which contains the serialization/de-serilization modules	f
1124	0	A \\emph{web services} architecture	f
1124	1	A Client-Server architecture, where the \\emph{mashup}\n      is the client and the various sources are the servers	f
1124	3	A Publish-Subscribe architecture, where the various\n      sources publish events with the changes made and the\n      \\emph{mashup} subscribes those events	f
1125	0	The main quality of the system in the right part of the figure is scalability	f
1125	1	The main quality of the system in the left part of the figure is scalability	f
1125	3	The main quality of the system in the left part of the figure is to promote cross-functional teams	f
1126	0	Data model to express the stored data formats	f
1126	1	Decomposition to express the services interfaces	f
1126	3	Publish-subscribe to express how data is shared between services	f
1127	0	Performance because all requests will be processed faster	f
1127	1	Performance because it allows the processing of more requests per unit of time	f
1127	3	Reliability because a single correct read is used to responde to several requests	f
1128	0	Usability and Performance	f
1128	1	Usability	f
1128	3	Testability	f
1129	0	Shared-data and Communicating-Processes	f
1129	1	Communicating-Processes	f
1129	3	Client-Server and Shared-data	f
1130	0	Is useful only if done (even if only partially) before the\n\t \tsystem's implementation is concluded, given that the architecture\n    \tis used for restricting the implementation	f
1130	1	Is useful only if done (even if only partially) before the\n    \tsystem's implementation is concluded, because if the system is\n    \talready implemented, its implementation uniquely determines the\n    \tarchitecture	f
1130	3	Is useful even if the implementation is concluded and the\n    \tsystem has entered the maintenance phase	f
1131	0	The most important requirements (both functional and\n  \tqualities) that the system must achieve	f
1131	1	The components that manage the communication between the\n  \tremaining elements in the system	f
1131	3	The tactics that satisfy the most important requirements for\n  \tthe system	f
1132	0	Depends mostly on the system's functional requirements	f
1132	1	Depends more on the architect's experience than on anything else	f
1132	3	None of the above	f
1133	0	Communicating processes	f
1133	1	Communicating processes and shared-data	f
1133	3	Communicating processes, shared-data, service-oriented architecture, and peer-to-peer	f
1134	0	A module may contain code from different components	f
1134	1	A component may execute code from different modules	f
1134	3	A component may contain code from different modules	f
1135	0	They describe general requirements that all systems should try to satisfy	f
1135	1	They allow us to build a more robust architecture that satisfies less specific\n\t\trequirements, which address a wider range of situations that may happen in\n\t\tthe system	f
1135	3	They guide us in the requirement elicitation process with the system's stakeholders	f
1136	0	There is a high level of communication between the several modules, and this\n\t\twill cause the system to have a low performance	f
1136	1	It is not possible to install the system in more than one machine	f
1136	3	It is very hard to explain what the system does, because we need to understand\n\t\tall the execution fluxes	f
1137	0	Can use the operations defined in any of the system's modules	f
1137	1	Can use the operations defined in the lower layer, but not the ones defined in\n\t \tthe upper layer	f
1137	3	Should use some operation defined in the lower layer	f
1138	0	Represent the network infrastructure that allows components to communicate\n\t\twith each other	f
1138	1	May, on another view of the system, be represented by a set of components\n\t\tand connectors	f
1138	3	Represent the control flow during a execution of the system	f
1139	0	The Peer-to-Peer style	f
1139	1	The Client-Server style	f
1139	3	The Publish-subscribe style	f
1140	0	The Shared data style	f
1140	1	The Pipes-and-filters style	f
1140	3	The Communicating Processes style	f
1142	0	This is a performance scenario because the stimulus is an input, \\emph{launches several instances of the system}.	f
1142	1	This is a modifiability scenario which has a defer binding tactic.	f
1142	3	This is a modifiability scenario and its environment design time.	f
1143	0	Launch a new process for processing each request	f
1143	1	Spawn a new thread for processing each request	f
1143	3	Buy a server with high processing power	f
1144	0	Cycles in the uses relation between modules are a good sign, because it indicates that several modules should be tested together.	f
1144	1	The project manager uses this view to get advice on the incremental development of the system.	f
1144	3	There isn't any relation with the layered architectural style because the allowed-to-use relation is more generic.	f
1145	0	Manage sampling rate.	f
1145	1	Limit event response.	f
1145	3	Maintain multiple copies of computation.	f
1146	0	Make a business case for the system	f
1146	1	Understand the architecturally significant requirements	f
1146	3	Documenting and communicating the architecture	f
1147	0	Modifiability	f
1147	1	Availability	f
1147	3	Interoperability	f
1148	0	Performance	f
1148	1	Modifiability	f
1148	3	Security	f
1149	1	This is a case of an architectural influence cycle where the feedback cycle resulted in changes on the project.	f
1149	2	This is a case of an architectural influence cycle where the feedback cycle resulted in changes on the business and project.	f
1149	3	This is a case of an architectural influence cycle without feedback.	f
1150	1	The request to adapt an interface is the stimulus.	f
1150	2	The design of a reusable interface is the stimulus.	f
1150	3	The data input to the system is the stimulus.	f
1151	1	This shared understanding includes the architecturally significant requirements.	f
1151	2	The system algorithms should be part of the shared understanding.	f
1151	3	The shared understanding describes the system from a high-level perspective.	f
1152	1	A module.	f
1152	2	Both, a component and a module, depending on the perspective.	f
1152	3	An external element.	f
1153	1	Service-oriented architecture, and Shared-data.	f
1153	2	Service-oriented architecture, Shared-data, and Peer-to-peer.	f
1153	3	Service-oriented architecture, Shared-data, Peer-to-peer, and Client-server.	f
1154	1	Enumerates, for each kind of quality attribute, all the possible types of source of stimulus, stimulus, etc.	f
1154	2	Can omit some of the elements like, for instance, the environment, if they are not relevant for the general scenario.	f
1154	3	Is a very reusable scenario that can be used in many different concrete situations.	f
1155	1	Is useful to support scenarios where the stimulus is an omission.	f
1155	2	Guarantees that the system will not become unavailable.	f
1155	3	Reduces the availability scenario response time because the request occurs twice.	f
1156	1	Results in the creation of a third module that does not have to change when any of the original modules are changed.	f
1156	2	Increases the cohesion between the two modules.	f
1156	3	Cannot be used together with the Reduce Overhead performance tactic.	f
1157	1	A availability scenario because it allows the introduction of load balancers.	f
1157	2	A modifiability scenario where defer binding occurs at compile time.	f
1157	3	A usability scenario because developers can extend the system without having to modify the nginx core.	f
1158	1	Increase resources.	f
1158	2	Increase resource efficiency and Increase resources.	f
1158	3	Increase resources and Maintain multiple copies of computation.	f
1159	1	Is done in a single step, after all the tactics were identified.	f
1159	2	Is a top-down process where a initial decomposition is chosen and it is successively decomposed without changing the initial decisions.	f
1159	3	Is an iterative process where architectural designs are proposed as hypothesis and tested.	f
1160	1	Availability	f
1160	2	Testability	f
1160	3	Interoperability	f
1161	1	Availability.	f
1161	2	Performance.	f
1161	3	Scalability.	f
1162	1	Usability.	f
1162	2	Security.	f
1162	3	Availability.	f
1145	2	Prioritize events.	t
1163	2	The invoked function may not have any output parameter.	f
1163	3	The invoked function may not have both any input parameter nor any output parameter.	f
1164	1	Layer 4	f
1164	2	In a layered architecture all layers are equally modifiable	f
1164	3	Modifiability is not made easier by a layered architecture	f
1165	1	She delays the complete specification of the connector for development time to have human resources to prototype and measure different implementations.	f
1165	2	She does not want to clutter the view with details and trusts the development team to implement the connector according to the required quality level.	f
1165	3	The required quality associated with the connector is supported by existing and well-know technology.	f
1166	1	It is possible to have redundant servers.	f
1166	2	Servers can also be clients.	f
1166	3	Servers can send a heartbeat to clients.	f
1167	1	Any peer can access any other peer.	f
1167	2	Peers are only used to share files.	f
1167	3	The interaction between peers is symmetric.	f
1168	1	Which improves modifiability, because filters are decoupled through pipes.	f
1168	2	But the size of buffers may reduce the composition power.	f
1168	3	And filters do not have to agree on the data formats.	f
1169	1	Implementation style.	f
1169	2	Install style.	f
1169	3	Work assignment style.	f
1170	1	By executing in parallel each of the phases of the\n      pipeline corresponding to the processing of a request	f
1170	2	By executing in parallel the processing of the various requests	f
1170	3	By processing completely each request before moving to\n      the next one, in a sequential process	f
1171	1	Client-server.	f
1171	2	Shared-date.	f
1171	3	Generalization.	f
1172	1	Peer-to-peer.	f
1172	2	Master-slave.	f
1172	3	Pipe-and-filter.	f
1173	1	There is a interface delegation relation between the \\texttt{read} port of \\texttt{Queue} and the \\texttt{query} port of \\texttt{Carbon}.	f
1173	2	There is a connector between the \\texttt{producer} port of a \\texttt{Queue} component and the \\texttt{client} port of its \\texttt{Carbon} component.	f
1173	3	The \\texttt{client} ports of \\texttt{Carbon} and \\texttt{WebApp} are connected to a \\texttt{Client} component through the same connector instance.	f
1174	1	In the component-and-connector view, because the\n      connector between the web client and the web server has to change	f
1174	2	In the Layer view, because the order of the layers will\n      have to change	f
1174	3	In the mapping between layers of the system and the\n      components where they execute	f
1175	1	The sharing of data is done using a service-oriented architecture.	f
1175	2	Modifiability is not a concern of their architecture.	f
1175	3	The decouple of data formats does not support scalability because of the transactional properties.	f
1176	1	A view of the component-and-connector viewtype.	f
1176	2	A view of the component-and-connector viewtype and a deployment view.	f
1176	3	A decomposition view, a view of the component-and-connector viewtype and a deployment view.	f
1177	1	This view highlights the performance of the \\texttt{download} operations.	f
1177	2	This view highlights the performance of \\texttt{upload} operations.	f
1177	3	This view highlights the scalability of \\texttt{upload} and \\texttt{dowload} operations.	f
1178	1	The quality addressed is performance.	f
1178	2	The quality addressed is availability and a voting design tactic is required to solve the problem.	f
1178	3	The quality addressed is performance and a maintain multiple copies of data design tactic is required to solve the problem.	f
1179	0	The business aspects of the system are for business architects, not the software architects.	f
1179	2	The modeling of a system is not part of the software architect duties.	f
1179	3	The level of abstraction of the system an architect works may vary.	f
1180	0	Martin Fowler disagrees with this definition because we should delay the design decisions and focus on features first.	f
1180	1	Martin Fowler complains about this definition because the early decisions are not necessarily the right ones.	f
1180	3	Martin Fowler disagrees with this definition because to design an architecture it is not necessary to make any decision.	f
1181	1	This view highlights the performance of the \\texttt{Image File Storage}.	f
1181	2	This view highlights the different performance levels for \\texttt{upload} and \\texttt{dowload} operations.	f
1181	3	This view highlights the scalability of \\texttt{upload} and \\texttt{dowload} operations.	f
1182	1	Enumerates, for each kind of quality attribute, all the possible types of source of stimulus, stimulus, etc.	f
1182	2	Can omit some of the elements like, for instance, the environment, if they are not relevant for the general scenario.	f
1182	3	Is a very reusable scenario that can be used in many different concrete situations.	f
1183	0	Can be applied to any kind of availability scenario.	f
1183	2	Guarantees that the system will not become unavailable.	f
1183	3	Reduces the availability scenario response time because the request occurs twice.	f
1184	1	Enumerates, for each kind of quality attribute, all the possible types of source of stimulus, stimulus, etc.	f
1184	2	Can omit some of the elements like, for instance, the environment, if they are not relevant for the general scenario.	f
1184	3	Is a very reusable scenario that can be used in many different concrete situations.	f
1185	0	Can be applied to any kind of availability scenario.	f
1185	1	Is useful to support scenarios where the stimulus is an omission.	f
1185	2	Guarantees that the system will not become unavailable.	f
1186	0	The business aspects of the system are for business architects, not the software architects.	f
1186	1	Dealing with the technological aspects of the system should be delayed to the implementation stage of development.	f
1186	3	The level of abstraction of the system an architect works may vary.	f
1187	0	Martin Fowler disagrees with this definition because we should delay the design decisions and focus on features first.	f
1187	1	Martin Fowler complains about this definition because the early decisions are not necessarily the right ones.	f
1187	3	Martin Fowler disagrees with this definition because to design an architecture it is not necessary to make any decision.	f
1188	0	This view highlights the availability of the system.	f
1188	1	This view highlights the performance of the \\texttt{Image File Storage}.	f
1188	2	This view highlights the different performance levels for \\texttt{upload} and \\texttt{dowload} operations.	f
1189	0	This is a case of an architectural influence cycle where the feedback cycle resulted in changes on the business.	f
1189	1	This is a case of an architectural influence cycle where the feedback cycle resulted in changes on the project.	f
1189	3	This is a case of an architectural influence cycle without feedback.	f
1190	0	This shared understanding can be represented by a set of architectural views.	f
1190	2	The system algorithms should be part of the shared understanding.	f
1190	3	The shared understanding describes the system from a high-level perspective.	f
1191	0	This view highlights the security of the system.	f
1191	1	This view highlights the scalability of \\texttt{upload} and \\texttt{dowload} operations.	f
1191	3	This view highlights the scalability of \\texttt{upload} and \\texttt{dowload} operations, and of storage.	f
1192	0	The exchange of information is the stimulus.	f
1192	2	The design of a reusable interface is the stimulus.	f
1192	3	The data input to the system is the stimulus.	f
1193	1	These tactics are used to prevent the occurence of a fault.	f
1193	2	Heartbeat is more scalable than ping/echo because the monitor does not need to know in advance the addresses of the components.	f
1193	3	In ping/echo the components have the initiative to start the interaction.	f
1194	1	These tactics are used to prevent the occurence of a fault.	f
1194	2	Heartbeat is more scalable than ping/echo because the monitor does not need to know in advance the addresses of the components.	f
1194	3	In ping/echo the components have the initiative to start the interaction.	f
1195	1	This is a case of an architectural influence cycle where the feedback cycle resulted in changes on the project.	f
1195	2	This is a case of an architectural influence cycle where the feedback cycle resulted in changes on the business and project.	f
1195	3	This is a case of an architectural influence cycle without feedback.	f
1196	0	This view highlights the security of the system.	f
1196	1	This view highlights the scalability of \\texttt{upload} and \\texttt{dowload} operations.	f
1196	3	This view highlights the scalability of \\texttt{upload} and \\texttt{dowload} operations, and of storage.	f
1197	0	This shared understanding can be represented by a set of architectural views.	f
1197	1	This shared understanding includes the architecturally significant requirements.	f
1197	3	The shared understanding describes the system from a high-level perspective.	f
1198	0	The exchange of information is the stimulus.	f
1198	1	The request to adapt an interface is the stimulus.	f
1198	2	The design of a reusable interface is the stimulus.	f
1199	0	Design an architectural solution together with the stakeholders to be sure that everybody agrees on the resolution of conflits.	f
1199	2	Facilitate the communication among the stakeholders such that they can decide on what are the architecturally significant requirements.	f
1199	3	Design an architecture that supports all the conflicting requirements and present it to the stakeholders.	f
1200	0	The set of structures is needed to support different levels of performance for the system.	f
1200	1	To reason about a system is to verify whether the architecturally significant requirements are considered by the architecture.	f
1200	3	There isn't any relation between the properties of the software elements and the ability to reason about the system.	f
1201	1	This view highlights the performance of the \\texttt{download} operations.	f
1201	2	This view highlights the performance of \\texttt{upload} operations.	f
1201	3	This view highlights the scalability of \\texttt{upload} and \\texttt{dowload} operations.	f
1202	1	The functional requirements have a large impact on the definition of views of the component-and-connector viewtype because each component executes a functionality.	f
1202	2	The functional requirements have a large impact on the definition of views of the module viewtype because they are used to define the high cohesion and low coupling of modules.	f
1202	3	The functional requirements can be considered as constraints on the software architecture design.	f
1203	0	Active redundancy can be used together with a voting tactic to detect and recover from faults.	f
1203	2	Spare guarantees immediate recover.	f
1203	3	Passive redundancy does not work with non-deterministic behavior of request's execution.	f
1204	1	This view highlights the performance of the \\texttt{download} operations.	f
1204	2	This view highlights the performance of \\texttt{upload} operations.	f
1204	3	This view highlights the scalability of \\texttt{upload} and \\texttt{dowload} operations.	f
1205	0	However, functional requirements do not have any impact on the architecture because the systemic qualities of an architecture are non-functional.	f
1205	1	The functional requirements have a large impact on the definition of views of the component-and-connector viewtype because each component executes a functionality.	f
1205	2	The functional requirements have a large impact on the definition of views of the module viewtype because they are used to define the high cohesion and low coupling of modules.	f
1206	0	Design an architectural solution together with the stakeholders to be sure that everybody agrees on the resolution of conflits.	f
1206	1	Solve the conflicts between requirements by deciding on the best trad-offs the system should support.	f
1206	3	Design an architecture that supports all the conflicting requirements and present it to the stakeholders.	f
1207	0	The set of structures is needed to support different levels of performance for the system.	f
1207	1	To reason about a system is to verify whether the architecturally significant requirements are considered by the architecture.	f
1207	3	There isn't any relation between the properties of the software elements and the ability to reason about the system.	f
1208	0	Active redundancy can be used together with a voting tactic to detect and recover from faults.	f
1208	1	These tactics are used to prevent the occurence of a fault.	f
1208	2	Spare guarantees immediate recover.	f
1209	0	Manage sampling rate.	f
1209	1	Limit event response.	f
1209	3	Bound execution time.	f
1210	0	Has as main goal the reduction of the modules' size.	f
1210	2	Increases the cohesion between the two modules.	f
1210	3	Cannot be used together with the Reduce Overhead performance tactic.	f
1211	0	In each iteration one or more architecturally significant requirements are used to decompose a software element of the system design.	f
1211	1	The architect cannot backtrack the decomposition decisions she made.	f
1211	3	Contraints cannot be used as requirements for the decomposition process.	f
1212	0	It describes a performance scenario where the stimulus is the request of a custom graph.	f
1212	2	It describes a usability scenario where the source of stimulus is a non-technical user.	f
1212	3	A support user initiative tactic based on the definition of a language is used to achieve this scenario.	f
1213	1	It describes a scalability scenario because it is possible to increment the size of the configuration at a linear cost.	f
1213	2	It describes a usability scenario where the stimulus is reduce the number of errors when configuring the system.	f
1201	0	This view highlights the availability of the \\texttt{Image File Storage}.	t
1202	0	However, functional requirements do not have any impact on the architecture because the systemic qualities of an architecture are non-functional.	t
1213	3	It describes a modifiability scenario because of the cost associated with maintaining the configuration.	f
1214	1	It describes a scalability scenario because it is possible to increment the size of the configuration at a linear cost.	f
1214	2	It describes a usability scenario where the stimulus is reduce the number of errors when configuring the system.	f
1214	3	It describes a modifiability scenario because of the cost associated with maintaining the configuration.	f
1215	1	The architect cannot backtrack the decomposition decisions she made.	f
1215	2	During the design process the number of architecturally significant requirements cannot change.	f
1215	3	Contraints cannot be used as requirements for the decomposition process.	f
1216	0	Manage sampling rate.	f
1216	1	Limit event response.	f
1216	3	Bound execution time.	f
1217	0	It describes a performance scenario where the stimulus is the request of a custom graph.	f
1217	1	The scenario is supported by a manage sampling rate tactic because several requests to the same graph return the same result.	f
1217	3	A support user initiative tactic based on the definition of a language is used to achieve this scenario.	f
1218	0	Has as main goal the reduction of the modules' size.	f
1218	1	Results in the creation of a third module that does not have to change when any of the original modules are changed.	f
1218	2	Increases the cohesion between the two modules.	f
1219	0	Manage sampling rate.	f
1219	2	Prioritize events.	f
1219	3	Maintain multiple copies of computation.	f
1220	0	This is a performance scenario because the stimulus is an input, \\emph{launches several instances of the system}.	f
1220	1	This is a modifiability scenario which has a defer binding tactic.	f
1220	3	This is a modifiability scenario and its environment design time.	f
1221	1	A scenario for a power outage should have a low business value because the fault is temporary.	f
1221	2	A scenario for a 24 hours x 7 days availability of the system should appear as a leaf of the utility tree.	f
1221	3	The utility tree covers all the significant qualities the system has to address.	f
1222	1	Bound execution times, and increase resources.	f
1222	2	Manage sampling rate, bound queue sizes, and increase resources.	f
1222	3	Bound queue sizes, and increase resources.	f
1223	0	Introduce concurrency.	f
1223	2	Schedule resources.	f
1223	3	Maintain multiple copies of computation.	f
1224	1	Increase resources.	f
1224	2	Schedule resources.	f
1224	3	Maintain multiple copies of computation.	f
1225	0	This is a performance scenario because the stimulus is an input, \\emph{launches several instances of the system}.	f
1225	1	This is a modifiability scenario which has a defer binding tactic.	f
1225	2	This is not a modifiability scenario because the source of the stimulus cannot be a system administrator.	f
1226	0	Bound execution times, bound queue sizes, and increase resources.	f
1226	1	Bound execution times, and increase resources.	f
1226	3	Bound queue sizes, and increase resources.	f
1227	0	Only the scenarios that have high architectural impact and high business value should appear in the tree.	f
1227	1	A scenario for a power outage should have a low business value because the fault is temporary.	f
1227	3	The utility tree covers all the significant qualities the system has to address.	f
1228	0	Manage sampling rate.	f
1228	1	Limit event response.	f
1228	2	Prioritize events.	f
1229	0	Increase resource efficiency.	f
1229	1	Increase resources.	f
1229	3	Increase resources and Maintain multiple copies of computation.	f
1230	0	A low cost of change may imply a high cost of development.	f
1230	2	There is no relation between the cost of change and the cost of development.	f
1230	3	A high cost of change occurs if it is necessary to defer the binding of what needs to be changed.	f
1231	0	This decision does not have any impact on the architecture.	f
1231	1	This decision corresponds to a constraint requirement.	f
1231	3	This decision is not a consequence of the Fénix business case.	f
1232	0	It describes a reliability scenario because the data points for each metric will be split between a buffer and disk.	f
1275	1	It is useful for the project managers.	f
1232	2	The tactic used to solve the problem is based in the fact that data points are appended to the end of the metric file.	f
1232	3	The tactic used to solve the problem is not manage sampling rate because there isn't any loss of data points.	f
1233	1	A availability scenario because it allows the introduction of load balancers.	f
1233	2	A modifiability scenario where defer binding occurs at compile time.	f
1233	3	A usability scenario because developers can extend the system without having to modify the nginx core.	f
1234	1	This decision corresponds to a constraint requirement.	f
1234	2	This decision needs to be made concrete by an interoperability scenario.	f
1234	3	This decision is not a consequence of the Fénix business case.	f
1235	1	It describes a performance scenario for the execution of reads.	f
1235	2	The tactic used to solve the problem is based in the fact that data points are appended to the end of the metric file.	f
1235	3	The tactic used to solve the problem is not manage sampling rate because there isn't any loss of data points.	f
1236	0	Increase resource efficiency.	f
1236	1	Increase resources.	f
1236	3	Increase resources and Maintain multiple copies of computation.	f
1237	0	A security scenario because it allows the introduction of filters to encrypt the messages.	f
1237	1	A availability scenario because it allows the introduction of load balancers.	f
1237	3	A usability scenario because developers can extend the system without having to modify the nginx core.	f
1238	0	A low cost of change may imply a high cost of development.	f
1238	1	A low cost of change implies a low cost of development, because changing the code is part of development.	f
1238	2	There is no relation between the cost of change and the cost of development.	f
1239	0	Its main goal is to establish the reusability qualities of the architecture.	f
1239	2	Incremental development is a criteria that drives the design of views of this type.	f
1239	3	There should be at least one view of the system using this architectural style.	f
1240	0	Passive redundancy.	f
1240	1	Active redundancy.	f
1240	3	Maintain multiples copies of computation.	f
1241	1	The server approach can scale independently of the number of applications.	f
1241	2	The server approach implements a local cache.	f
1241	3	The library approach does not build a cluster.	f
1242	1	A connector cannot be decomposed into a set of components and connectors.	f
1242	2	A connector embodies a communication protocol.	f
1242	3	A component can only have a single type of port.	f
1243	0	A client-server style.	f
1243	2	Both, client-server and shared-data styles.	f
1243	3	A blackboard style.	f
1244	1	A shared-data style.	f
1244	2	Both, client-server and shared-data styles.	f
1244	3	A blackboard style.	f
1245	0	Passive redundancy.	f
1245	1	Active redundancy.	f
1245	2	Voting.	f
1246	0	Its main goal is to establish the reusability qualities of the architecture.	f
1246	1	Project managers are not interested in views that use this style because it lacks the necessary level of detail.	f
1246	3	There should be at least one view of the system using this architectural style.	f
1247	0	The library approach allows non-java applications.	f
1247	1	The server approach can scale independently of the number of applications.	f
1247	3	The library approach does not build a cluster.	f
1248	0	A component cannot be decomposed into a set of components and connectors.	f
1248	1	A connector cannot be decomposed into a set of components and connectors.	f
1248	2	A connector embodies a communication protocol.	f
1249	0	Cycles in the uses relation between modules are a good sign, because it indicates that several modules should be tested together.	f
1249	1	The project manager uses this view to get advice on the incremental development of the system.	f
1249	3	There isn't any relation with the layered architectural style because the allowed-to-use relation is more generic.	f
1250	0	Schedule resources.	f
1250	2	Tailor interface.	f
1250	3	Increase resources.	f
1251	0	Modifiability.	f
1251	1	Availability.	f
1251	3	Scalability.	f
1252	0	A component is an instance and a view can have several instances of the same component type.	f
1252	2	Only components can be associated with application-specific types.	f
1252	3	A component-and-connector view can only use a single architectural style.	f
1253	1	Any peer can access any other peer.	f
1253	2	Peers are only used to share files.	f
1253	3	The interaction between peers is symmetric.	f
1254	1	A component type is made of a single architectural style.	f
1254	2	Only components can be associated with application-specific types.	f
1254	3	A component-and-connector view can only use a single architectural style.	f
1255	1	Any peer can access any other peer.	f
1255	2	Peers are only used to share files.	f
1255	3	The interaction between peers is symmetric.	f
1256	0	Cycles in the uses relation between modules are a good sign, because it indicates that several modules should be tested together.	f
1256	1	The project manager uses this view to get advice on the incremental development of the system.	f
1256	3	There isn't any relation with the layered architectural style because the allowed-to-use relation is more generic.	f
1257	0	Schedule resources.	f
1257	1	Introduce concurrency.	f
1257	3	Increase resources.	f
1258	0	Modifiability.	f
1258	1	Availability.	f
1258	2	Performance.	f
1259	0	The modules inside a layer cannot use other modules in the same layer.	f
1259	2	Each layer defines a virtual machine because it provides a set of cohesive functionalities to the upper layer.	f
1259	3	It is possible to have a circular allowed-to-use relationship between several layers.	f
1260	0	Interoperability.	f
1260	1	Usability.	f
1260	3	Modifiability.	f
1261	1	Availability.	f
1261	2	Modifiability.	f
1261	3	Reliability.	f
1262	1	The Merge component executes the modules merge and stdio.	f
1262	2	The module main is executed in the Merge component.	f
1262	3	The Pipe connectors do not execute any module.	f
1263	0	Modifiability, because the Data Accessors do not depend on the data model.	f
1263	2	Scalability of write requests, because a transactional system will synchronize the writes among the several repositories.	f
1263	3	Confidentially of data, because it can be replicated in several repositories.	f
1264	1	The Merge component executes the modules merge and stdio.	f
1264	2	The module main is executed in the Merge component.	f
1264	3	The Pipe connectors do not execute any module.	f
1265	0	Performance.	f
1265	1	Availability.	f
1265	2	Modifiability.	f
1266	0	Modifiability, because the Data Accessors do not depend on the data model.	f
1266	1	Scalability of read requests, because it is easy add more repositories to where reads are distributed, though there may be some level of inconsistency.	f
1266	3	Confidentially of data, because it can be replicated in several repositories.	f
1267	0	Interoperability.	f
1267	1	Usability.	f
1267	3	Modifiability.	f
1268	0	The modules inside a layer cannot use other modules in the same layer.	f
1268	1	A layer cannot call the layer above.	f
1268	2	Each layer defines a virtual machine because it provides a set of cohesive functionalities to the upper layer.	f
1269	0	The main quality this style addresses is interoperability.	f
1269	1	It cannot be applied when the system includes legacy systems.	f
1269	3	The typical communication pattern is point-to-point.	f
1270	0	It assigns components and connectors to people and teams.	f
1270	2	It does not consider the software that is outsourced.	f
1270	3	It allows to estimate the cost of hardware.	f
1271	0	Client-server.	f
1271	1	Peer-to-peer.	f
1271	3	Pipe-and-filter.	f
1272	0	A decomposition view.	f
1272	2	A view of the component-and-connector viewtype and a deployment view.	f
1272	3	A decomposition view, a view of the component-and-connector viewtype and a deployment view.	f
1273	1	Shared-data where the Buildbot is the data accessor.	f
1273	2	Client-server where the Buildbot is the client.	f
1273	3	Client-server where the Buildbot is the server.	f
1274	1	A view of the component-and-connector viewtype.	f
1274	2	A view of the component-and-connector viewtype and a deployment view.	f
1274	3	A decomposition view, a view of the component-and-connector viewtype and a deployment view.	f
1258	3	Scalability.	t
1275	2	It does not consider the software that is outsourced.	f
1275	3	It allows to estimate the cost of hardware.	f
1276	0	Client-server.	f
1276	1	Peer-to-peer.	f
1276	3	Pipe-and-filter.	f
1277	0	Peer-to-peer.	f
1277	1	Shared-data where the Buildbot is the data accessor.	f
1277	3	Client-server where the Buildbot is the server.	f
1278	0	The main quality this style addresses is interoperability.	f
1278	1	It cannot be applied when the system includes legacy systems.	f
1278	2	Its enterprise service bus cannot support asynchronous communication between the components.	f
1279	0	Tiers.	f
1279	2	Tiers, Shared-data, and Service-oriented architecture.	f
1279	3	Tiers, Shared-data, Service-oriented architecture, and Client-server.	f
1280	0	Decomposition.	f
1280	1	Generalization.	f
1280	3	Peer-to-peer.	f
1281	1	It cannot assign software elements to virtual servers because they are not hardware.	f
1281	2	For each set of software elements there is a single possible assignment to hardwre.	f
1281	3	It is useful for system administrators.	f
1282	1	Tiers to represent scalability.	f
1282	2	Service-oriented architecture to represent interoperability.	f
1282	3	Shared-data to represent modifiability.	f
1283	0	Publish-subscribe.	f
1283	2	Shared-date.	f
1283	3	Generalization.	f
1284	1	Generalization.	f
1284	2	Decomposition and Generalization.	f
1284	3	Peer-to-peer.	f
1285	0	Tiers.	f
1285	1	Tiers, and Shared-data.	f
1285	2	Tiers, Shared-data, and Service-oriented architecture.	f
1286	0	It assigns modules to the hardware.	f
1286	1	It cannot assign software elements to virtual servers because they are not hardware.	f
1286	3	It is useful for system administrators.	f
1287	0	Publish-subscribe.	f
1287	1	Client-server.	f
1287	3	Generalization.	f
1288	0	Client-server to represent performance.	f
1288	1	Tiers to represent scalability.	f
1288	2	Service-oriented architecture to represent interoperability.	f
1289	0	Service-oriented architecture, and Client-server.	f
1289	1	Service-oriented architecture, and Shared-data.	f
1289	3	Service-oriented architecture, Shared-data, Peer-to-peer, and Client-server.	f
1290	0	The development team is the main stakeholder interesting in these views.	f
1290	2	It is completely independent of the deployment architectural style.	f
1290	3	It helps on the configuration of systems.	f
1291	0	Client-server.	f
1291	1	Communicating processes.	f
1291	3	Shared-data.	f
1292	0	The data-shared architectural style is not applied because data is encapsulated inside services.	f
1292	2	Modifiability is not a concern of their architecture.	f
1292	3	The decouple of data formats does not support scalability because of the transactional properties.	f
1293	1	Shared-data where the Dashboard is the repository.	f
1293	2	Client-server where the Dashboard is the client.	f
1293	3	Client-server where the Dashboard is the server.	f
1294	1	The sharing of data is done using a service-oriented architecture.	f
1294	2	Modifiability is not a concern of their architecture.	f
1294	3	The decouple of data formats does not support scalability because of the transactional properties.	f
1295	1	Shared-data where the Dashboard is the repository.	f
1295	2	Client-server where the Dashboard is the client.	f
1295	3	Client-server where the Dashboard is the server.	f
1296	0	Service-oriented architecture, and Client-server.	f
1296	1	Service-oriented architecture, and Shared-data.	f
1296	3	Service-oriented architecture, Shared-data, Peer-to-peer, and Client-server.	f
1297	0	The development team is the main stakeholder interesting in these views.	f
1297	1	It assigns modules to files.	f
1297	3	It helps on the configuration of systems.	f
1298	0	Client-server.	f
1298	1	Communicating processes.	f
1298	2	Peer-to-peer.	f
1299	0	Typically have a software architecture that results\n    from the common knowledge about the system that is shared among\n    the team members	f
1299	2	Do not have a software architecture, because the practice of\n    refactoring allows changing every part of the system easily	f
1299	3	May have a software architecture, but that architecture is\n    not known because it was neither designed nor documented	f
1300	0	However, functional requirements do not have any impact on the architecture because the systemic qualities of an architecture are non-functional	f
1300	1	The functional requirements have a large impact on the definition of views of the component-and-connector viewtype because each component executes a functionality	f
1300	3	The functional requirements can be considered as constraints on the software architecture design	f
1301	1	The artefact is the load balancer	f
1301	2	The response is not correctly stated	f
1301	3	The quality it addresses is interoperability	f
1302	1	Hardware, if there is hardware redundancy	f
1302	2	Operating Systems, if redundant components execute on top of different operating systems	f
1302	3	All the previous options	f
1303	0	Performance	f
1303	2	Availability	f
1303	3	Modifiability	f
1304	0	Manage sampling rate	f
1304	1	Limit event response	f
1304	3	Bound execution times	f
1305	0	Have high throughput	f
1305	1	Have low latency	f
1305	2	Allow many simultaneous users	f
1306	0	Split module	f
1306	2	Restrict dependencies	f
1306	3	Defer binding	f
1307	1	We just have to show, through component-and-connector\n      views, that the system maintains replicas of the data in\n      different components	f
1307	2	We just have to show, through Deployment views,\n      that the \\emph{DataNode} component executes in more than one\n      machine of the cluster	f
1307	3	We just have to show, through Decomposition views, that\n      there are modules responsible for the replication of file blocks	f
1308	1	Active replication, passive replication, and spare	f
1308	2	Passive replication and spare	f
1308	3	Quorum, active replication, and passive replication	f
1309	0	Different stakeholders are interested in different views of the system	f
1309	1	A single view would be too simplistic	f
1309	3	All of the above	f
1310	1	Usability	f
1310	2	Security	f
1310	3	Availability	f
1311	0	A view of the Data Model style	f
1311	1	A view of the Layers style	f
1311	2	A view of the Decomposition style	f
1312	0	It imposes restrictions on which uses relationships may\n      exist between the system's modules	f
1312	1	It makes it easier to create generalization relationships\n      between the system's modules	f
1312	3	It allows the decomposition of each of the system's\n      modules into finer grained modules	f
1313	0	Can use the operations defined in any of the system's modules	f
1313	1	Can use the operations defined in the lower layer, but not the ones defined in\n\t \tthe upper layer	f
1313	2	Can use the operations defined in the upper layer, but not the ones defined in\n\t \tthe lower layer	f
1314	0	Per-to-peer	f
1314	2	Communicating processes	f
1314	3	Publish-subscribe	f
1315	0	The stimulus is an omission and the tactic is retry	f
1315	1	The stimulus is a crash and the tactic is retry	f
1315	2	The stimulus is an incorrect timing and the tactic is ignore faulty behaviour	f
1316	0	The layered view to support a new specific layer for the customization of the catalog	f
1316	1	The layered view to accommodate a new layer for each kind of catalog, which other layers may use	f
1316	2	The data model view in order to define entities for each kind of catalog	f
1317	0	Only in the Deployment view	f
1317	1	Only in the Decomposition view	f
1317	3	Both in a component-and-connector and the Deployment\n      views	f
1318	0	When a peer connects to the network it establishes connections with all other peers in the network	f
1318	1	The behavior described in the sentence can be represented in a view where the dynamic reconfiguration architectural style is used	f
1318	3	The behavior described in the sentence can be represented in a view where the tier architectural style is used	f
1319	0	But when the filters are executed sequentially the composition power is reduced	f
1319	2	But the size of buffers may reduce the composition power	f
1319	3	And filters do not have to agree on the data formats	f
1301	0	The stimulus is incorrect response	t
1302	0	Programming, if the components execute modules developed by different teams	t
1303	1	Usability	t
1320	0	To facilitate the interaction among heterogeneous\n      components that use distinct communication protocols	f
1320	1	To promote the use of a common communication protocol for\n      all the remaining components of the system	f
1320	3	To create a strong coupling between the various services\n      provided by the organization	f
1321	1	Generalization views	f
1321	2	Deployment views	f
1321	3	Implementation views	f
1322	1	Client-Server	f
1322	2	Peer-to-Peer	f
1322	3	Uses	f
1323	0	The quality being addressed is performance and the tactic multiple copies of data	f
1323	2	The quality being addressed is performance and the tactics multiple copies of data and multiple copies of computation	f
1323	3	The quality being addressed is availability and the tactic passive redundancy	f
1324	0	Tiers style	f
1324	1	Client-server style	f
1324	3	Pipe-and-filter style	f
1325	0	Each service can be developed and deployed independently	f
1325	1	Easier to scale development	f
1325	2	Eliminates any long-term commitment to a technology stack	f
1326	0	The shared-data architectural style is not applied because data is encapsulated inside services	f
1326	2	Modifiability is not a concern of their architecture	f
1326	3	The decouple of data formats does not support scalability because of the transactional properties	f
1327	1	a two-phase commit protocol takes place between the involved applications	f
1327	2	a ACID transaction occurs in each of the involved applications, but we can not infer which transaction occurs first	f
1327	3	an ACID transaction occurs in the invoked application and ACID transactions in the other involved applications will eventually occur later	f
1328	1	This is the solution followed by Twitter client applications	f
1328	2	It describes the typical behavior of a microservices system	f
1328	3	To support high scalability the request of \\texttt{User 1} needs to be decomposed into a request to only one of the aggregate instances and the processing in the other aggregate occurs in the background	f
1329	1	Only in the Decomposition view	f
1329	2	Only in a component-and-connector view	f
1329	3	Both in a component-and-connector and the Deployment\n      views	f
1330	0	When a peer connects to the network it establishes connections with all other peers in the network	f
1330	1	The behavior described in the sentence can be represented in a view where the dynamic reconfiguration architectural style is used	f
1330	2	When a peer receives a connection it sends all its files to the peer connecting it	f
1331	0	But when the filters are executed sequentially the composition power is reduced	f
1331	1	Which improves modifiability, because filters are decoupled through pipes	f
1331	3	And filters do not have to agree on the data formats	f
1332	0	To facilitate the interaction among heterogeneous\n      components that use distinct communication protocols	f
1332	1	To promote the use of a common communication protocol for\n      all the remaining components of the system	f
1332	3	To create a strong coupling between the various services\n      provided by the organization	f
1333	0	Work Assignment views	f
1333	1	Generalization views	f
1333	2	Deployment views	f
1334	1	Client-Server	f
1334	2	Peer-to-Peer	f
1334	3	Uses	f
1335	0	Typically have a software architecture that results\n    from the common knowledge about the system that is shared among\n    the team members	f
1335	2	Do not have a software architecture, because the practice of\n    refactoring allows changing every part of the system easily	f
1335	3	May have a software architecture, but that architecture is\n    not known because it was neither designed nor documented	f
1336	0	However, functional requirements do not have any impact on the architecture because the systemic qualities of an architecture are non-functional	f
1336	1	The functional requirements have a large impact on the definition of views of the component-and-connector viewtype because each component executes a functionality	f
1336	2	The functional requirements have a large impact on the definition of views of the module viewtype because they are used to define the high cohesion and low coupling of modules	f
1337	0	The stimulus is incorrect response	f
1337	1	The artefact is the load balancer	f
1337	2	The response is not correctly stated	f
1338	0	Programming, if the components execute modules developed by different teams	f
1338	1	Hardware, if there is hardware redundancy	f
1338	2	Operating Systems, if redundant components execute on top of different operating systems	f
1339	0	Performance	f
1339	1	Usability	f
1339	3	Modifiability	f
1340	1	Limit event response	f
1340	2	Reduce overhead	f
1340	3	Bound execution times	f
1341	1	Have low latency	f
1341	2	Allow many simultaneous users	f
1341	3	May be easily changed to increase their performance	f
1342	1	Encapsulate	f
1342	2	Restrict dependencies	f
1342	3	Defer binding	f
1343	0	Per-to-peer	f
1343	2	Communicating processes	f
1343	3	Publish-subscribe	f
1344	0	The stimulus is an omission and the tactic is retry	f
1344	2	The stimulus is an incorrect timing and the tactic is ignore faulty behaviour	f
1344	3	The stimulus is incorrect response and the tactic is voting	f
1345	0	The layered view to support a new specific layer for the customization of the catalog	f
1345	2	The data model view in order to define entities for each kind of catalog	f
1345	3	The data model view in order to define generic entities that can be customized for different kinds of catalogs	f
1346	0	The quality being addressed is performance and the tactic multiple copies of data	f
1346	1	The quality being addressed is performance and the tactic multiple copies of computation	f
1346	3	The quality being addressed is availability and the tactic passive redundancy	f
1347	1	Client-server style	f
1347	2	Shared-data style	f
1347	3	Pipe-and-filter style	f
1348	0	Each service can be developed and deployed independently	f
1348	2	Eliminates any long-term commitment to a technology stack	f
1348	3	Testing is easier	f
1349	1	The sharing of data is done using a service-oriented architecture	f
1349	2	Modifiability is not a concern of their architecture	f
1349	3	The decouple of data formats does not support scalability because of the transactional properties	f
1350	0	an ACID transaction occurs in all the involved applications	f
1350	1	a two-phase commit protocol takes place between the involved applications	f
1350	2	a ACID transaction occurs in each of the involved applications, but we can not infer which transaction occurs first	f
1351	0	The access to two different aggregate instances in the context of the same request does not hinder scalability	f
1351	1	This is the solution followed by Twitter client applications	f
1351	3	To support high scalability the request of \\texttt{User 1} needs to be decomposed into a request to only one of the aggregate instances and the processing in the other aggregate occurs in the background	f
1352	0	We must use various different views, both of the\n      component-and-connector and the allocation viewtypes	f
1352	1	We just have to show, through component-and-connector\n      views, that the system maintains replicas of the data in\n      different components	f
1352	3	We just have to show, through Decomposition views, that\n      there are modules responsible for the replication of file blocks	f
1353	0	Active replication and passive replication	f
1353	1	Active replication, passive replication, and spare	f
1353	2	Passive replication and spare	f
1354	1	A single view would be too simplistic	f
1354	2	The views describe different aspects of the system	f
1354	3	All of the above	f
1355	0	Modifiability	f
1355	2	Security	f
1355	3	Availability	f
1356	0	A view of the Data Model style	f
1356	1	A view of the Layers style	f
1356	2	A view of the Decomposition style	f
1357	0	It imposes restrictions on which uses relationships may\n      exist between the system's modules	f
1357	1	It makes it easier to create generalization relationships\n      between the system's modules	f
1357	2	It separates in new modules responsibilities that were\n      spread over various of the system's modules	f
1358	0	Can use the operations defined in any of the system's modules	f
1358	1	Can use the operations defined in the lower layer, but not the ones defined in\n\t \tthe upper layer	f
1358	2	Can use the operations defined in the upper layer, but not the ones defined in\n\t \tthe lower layer	f
1359	0	Is a high-level view of the system with the purpose of\n  understanding what are the system's goals and features	f
1359	1	Is composed of things such as code units, runtime elements,\n  hardware, and people, together with the relationships among them	f
1359	3	Is a set of diagrams that show the runtime elements of the\n  system and their relationships	f
1360	0	Describing what are the qualities that the system should possess	f
1360	2	Describing a use case for the system that makes clear what\n  should be the system's responses to each of the user's inputs	f
1360	3	Describing the system's features by way of different\n  usage scenarios for it, in which users play the role of actors	f
1361	0	The scenario is not correct	f
1361	1	The scenario is correct but it does not describe whether the request the servers fails to respond to succeeds or fails	f
1361	3	The scenario is not completely correct because it contains two responses	f
1362	0	Only in the Deployment view	f
1362	2	Only in a component-and-connector view	f
1362	3	Both in a component-and-connector and the Deployment\n      views	f
1363	1	Availability	f
1363	2	Modifiability	f
1363	3	Reliability	f
1364	1	Limit event response	f
1364	2	Reduce overhead	f
1364	3	Bound execution times	f
1365	0	The stimulus is to port the system to a new browser	f
1365	1	The environment is build time	f
1365	2	The response is 5 person/month	f
1366	0	Split module	f
1366	1	Increase semantic coherence	f
1366	3	Defer binding	f
1367	1	Essential to reduce costs whenever there is a fault in a hardware element	f
1367	2	Essential to ensure the system portability	f
1367	3	Essential to facilitate the integration with legacy systems	f
1368	0	Because this tactic simplifies the addition and removal of DataNodes	f
1368	1	But they could have used the ping tactic instead without adding any overhead to the NameNode	f
1368	2	But the exceptions tactic could have been used as well	f
1369	0	Each view contains a single architectural style	f
1369	1	Views need to contain more than one architectural style	f
1369	3	None of the above	f
1370	1	A component-and-connector view	f
1370	2	An allocation view	f
1370	3	They are not represented by a view	f
1371	0	The Decomposition and the Work Assignment styles	f
1371	1	The Decomposition and the Layers styles	f
1371	2	The Decomposition and the Uses styles	f
1372	0	The Decomposition style	f
1372	2	The Uses style	f
1372	3	The Work-assignment style	f
1373	0	The Generalization style	f
1373	1	The Uses style	f
1373	3	The Aspects style	f
1374	1	Modifiability	f
1374	2	Performance	f
1374	3	Security	f
1375	0	Use a passive redundancy tactic in the OPC (Order Processing Center)	f
1375	1	Use a passive redundancy tactic in the Consumer Web site	f
1375	3	Use an active redundancy tactic in the Consumer Web site	f
1376	0	The decomposition view to include a module for the synchronization responsibilities	f
1376	1	The uses view to represent how the mobile device uses the Catalog application	f
1376	2	The layered view to include a layer for each type of device	f
1377	0	Only views of the component-and-connector viewtype are needed	f
1377	1	All viewtypes may be necessary	f
1377	3	Views of the module viewtype are not needed	f
1378	0	The file transfers follows the same path of nodes used to identify where the file was located	f
1378	1	The peer initiating the request for a file needs to know where the file is located	f
1378	2	If a peer providing a file crashes it is necessary to restart downloading the file from the begin	f
1379	0	The presentation logic layer, domain logic layer, and\n      data access layer	f
1379	1	The traditional web applications, the mashups, and the rich internet applications (RIAs)	f
1379	3	The web services layer, the domain logic layer, and the\n      data access layer	f
1380	0	Implementation	f
1380	2	Decomposition	f
1380	3	None, because this description does not describe any architectural aspect of the system	f
1381	0	It enforces the use of a single implementation language among all applications	f
1381	1	The orchestration is in charge of improving the transparent location of service providers	f
1381	3	It decouples applications developed for different organizations	f
1382	0	Work assignment view	f
1382	2	Implementation view	f
1382	3	Deployment view	f
1383	1	Write two scenarios on performance	f
1383	2	Write a scenario on performance and a scenario on interoperability	f
1383	3	Write a single scenario on interoperability	f
1384	1	Component-and-connector viewtype	f
1384	2	Install architectural style of the allocation viewtype	f
1384	3	It is not necessary to represent this behavior because it does not describe any qualities	f
1385	0	We do not need a view of the module viewtype because it is about the runtime properties of the system	f
1385	1	We do not need a view of the allocation viewtype because deployment is automated	f
1385	2	The component-and-connector view should emphasize the performance qualities of systems following the microservices architecture	f
1386	0	All functionalities can be transactional	f
1386	1	Only a small set of functionalities are transactional	f
1386	3	Only the isolation property of transactions is supported	f
1387	1	When two events are published to the distributed log they are delivered to the different subscribing applications in the same order	f
1387	2	The distributed log guarantees that events will be delivered only once	f
1387	3	The distributed log may not deliver some of the events that are published to their subscribers	f
1388	0	It allows high scalability because the data model has only four entities	f
1388	1	It allows high scalability because it is possible the implement transactions associated to each one of the aggregates	f
1388	2	It allows high scalability because the only synchronized access is to the \\texttt{ProductId}, so it requires a single contention point	f
1389	1	The environment is build time	f
1389	2	The response is 5 person/month	f
1389	3	To implement the above scenario it is necessary to apply a runtime defer binding tactic	f
1390	1	Increase semantic coherence	f
1390	2	Restrict dependencies	f
1390	3	Defer binding	f
1391	0	Essential to ensure the system scalability	f
1391	1	Essential to reduce costs whenever there is a fault in a hardware element	f
1391	3	Essential to facilitate the integration with legacy systems	f
1392	0	Because this tactic simplifies the addition and removal of DataNodes	f
1392	1	But they could have used the ping tactic instead without adding any overhead to the NameNode	f
1392	3	To inform other DataNodes about their availability	f
1393	0	Is a high-level view of the system with the purpose of\n  understanding what are the system's goals and features	f
1393	1	Is composed of things such as code units, runtime elements,\n  hardware, and people, together with the relationships among them	f
1393	2	Is a set of guidelines that the developing team should\n  follow in the development of the system	f
1394	0	Describing what are the qualities that the system should possess	f
1394	1	Describing a set of steps that a user of the system must\n  perform to accomplish some task	f
1394	2	Describing a use case for the system that makes clear what\n  should be the system's responses to each of the user's inputs	f
1395	0	The scenario is not correct	f
1395	2	The scenario is correct but it is not clear what is the artefact	f
1395	3	The scenario is not completely correct because it contains two responses	f
1396	0	Only in the Deployment view	f
1396	1	Only in the Decomposition view	f
1396	2	Only in a component-and-connector view	f
1397	1	Availability	f
1397	2	Modifiability	f
1397	3	Reliability	f
1398	0	Manage sampling rate	f
1398	1	Limit event response	f
1398	2	Reduce overhead	f
1399	0	The presentation logic layer, domain logic layer, and\n      data access layer	f
1399	2	The web browser, o web server, and the data base	f
1399	3	The web services layer, the domain logic layer, and the\n      data access layer	f
1400	0	It enforces the use of a single implementation language among all applications	f
1400	1	The orchestration is in charge of improving the transparent location of service providers	f
1400	3	It decouples applications developed for different organizations	f
1401	1	Install view	f
1401	2	Implementation view	f
1401	3	Deployment view	f
1402	0	Write a single scenario on performance	f
1402	2	Write a scenario on performance and a scenario on interoperability	f
1402	3	Write a single scenario on interoperability	f
1401	0	Work assignment view	t
1402	1	Write two scenarios on performance	t
1403	1	Component-and-connector viewtype	f
1403	2	Install architectural style of the allocation viewtype	f
1403	3	It is not necessary to represent this behavior because it does not describe any qualities	f
1404	1	Views need to contain more than one architectural style	f
1404	2	A view may not contain any architectural style	f
1404	3	None of the above	f
1405	0	A module view	f
1405	1	A component-and-connector view	f
1405	2	An allocation view	f
1406	0	The Decomposition and the Work Assignment styles	f
1406	2	The Decomposition and the Uses styles	f
1406	3	The Decomposition and the SOA styles	f
1407	0	The Decomposition style	f
1407	2	The Uses style	f
1407	3	The Work-assignment style	f
1408	1	The Uses style	f
1408	2	The Layers style	f
1408	3	The Aspects style	f
1409	1	Modifiability	f
1409	2	Performance	f
1409	3	Security	f
1410	1	Use a passive redundancy tactic in the Consumer Web site	f
1410	2	Use an active redundancy tactic in the OPC (Order Processing Center) 	f
1410	3	Use an active redundancy tactic in the Consumer Web site	f
1411	0	The decomposition view to include a module for the synchronization responsibilities	f
1411	1	The uses view to represent how the mobile device uses the Catalog application	f
1411	3	The domain layer of the layered style to represent the types of devices	f
1412	0	Only views of the component-and-connector viewtype are needed	f
1412	1	All viewtypes may be necessary	f
1412	3	Views of the module viewtype are not needed	f
1413	0	The file transfers follows the same path of nodes used to identify where the file was located	f
1413	1	The peer initiating the request for a file needs to know where the file is located	f
1413	2	If a peer providing a file crashes it is necessary to restart downloading the file from the begin	f
1414	0	We do not need a view of the module viewtype because it is about the runtime properties of the system	f
1414	1	We do not need a view of the allocation viewtype because deployment is automated	f
1414	2	The component-and-connector view should emphasize the performance qualities of systems following the microservices architecture	f
1415	0	All functionalities can be transactional	f
1415	2	It is not necessary to have transactional properties because all data is in memory	f
1415	3	Only the isolation property of transactions is supported	f
1416	0	When an event is published to the distributed log, the order of delivery to the different subscribing applications is predefined	f
1416	1	When two events are published to the distributed log they are delivered to the different subscribing applications in the same order	f
1416	2	The distributed log guarantees that events will be delivered only once	f
1417	1	It allows high scalability because it is possible the implement transactions associated to each one of the aggregates	f
1417	2	It allows high scalability because the only synchronized access is to the \\texttt{ProductId}, so it requires a single contention point	f
1417	3	It does not allow high scalability	f
1418	0	Implementation	f
1418	1	Work assignment	f
1418	2	Decomposition	f
1419	0	Depends mostly on the system's functional requirements	f
1419	2	Should not depend on the skills of the developing team	f
1419	3	None of the above	f
1420	0	The writing of a tweet is a synchronous process where different users have a consistent view of the sequence of tweets	f
1420	1	A tweet is written in each one of the Twitter's servers	f
1420	3	The tweet content is written in the home timeline of each one of the writer's followers	f
1421	1	Enumerates, for each kind of quality attribute, all the possible types of source of stimulus, stimulus, response, etc	f
1421	2	Can omit some of the elements like, for instance, the environment, if they are not relevant for the general scenario	f
1421	3	Is a very reusable scenario that can be effectively used in many different concrete situations	f
1422	1	This solution allows an "infinite"\\ increase of the number clients by allowing the inclusion of more Request Nodes	f
1422	2	This solution continues to provide service even if a crash occurs in the Data server	f
1422	3	This solution optimizes the performance in terms of the throughput of processed requests	f
1598	3	Schedule resources	t
1423	0	When a new block is created, the first replica is written in the node where the writer is located, to improve availability	f
1423	2	When a new block is created, the third replica is stored in the same rack than the second replica to improve the performance of reads	f
1423	3	When a read occurs, the client, if it is located in the cluster, receives a list of the DataNodes where the replicas are, ordered by its closeness to the client, to improve performance of reads	f
1424	1	When a new block is created, the second replica is not stored in the same rack than the first replica to increase the availability when a Data Node fails	f
1424	2	When a new block is created, the third replica is stored in the same rack than the second replica to improve the performance of reads	f
1424	3	When a read occurs, the client, if it is located in the cluster, receives a list of the DataNodes where the replicas are, ordered by its closeness to the client, to improve performance of reads	f
1425	0	Depends mostly on the system's functional requirements	f
1425	1	Depends more on the architect's experience than on anything else	f
1425	2	Should not depend on the skills of the developing team	f
1426	0	Describes a concrete quality that a particular system has to implement	f
1426	1	Enumerates, for each kind of quality attribute, all the possible types of source of stimulus, stimulus, response, etc	f
1426	3	Is a very reusable scenario that can be effectively used in many different concrete situations	f
1427	0	The writing of a tweet is a synchronous process where different users have a consistent view of the sequence of tweets	f
1427	1	A tweet is written in each one of the Twitter's servers	f
1427	3	The tweet content is written in the home timeline of each one of the writer's followers	f
1428	0	This solution optimizes the performance in terms of the latency of each request	f
1428	1	This solution allows an "infinite"\\ increase of the number clients by allowing the inclusion of more Request Nodes	f
1428	2	This solution continues to provide service even if a crash occurs in the Data server	f
1429	0	A non-functional requirement a system has to achieve	f
1429	1	How to control the response to one or more stimulus	f
1429	3	A decomposition of the system that fulfills an architectural quality	f
1430	0	This is right because if you don't the project fails	f
1430	2	This is right but you cannot be completely sure whether the decisions are the right ones	f
1430	3	This is wrong because it is against the agile way of thinking the software development process	f
1431	0	The search timeline is the most important business use case for Twitter	f
1431	1	The ingestion process includes tokenizing of the tweet to include in an index	f
1431	3	The write in the Early Bird server is synchronous, only when it finishes does the user receives the feedback of a successful post	f
1432	0	This solution assures a consistency view to the clients of the data that is written	f
1432	2	In this solution the tasks in the queue need to be sequentially processed, only when a task is finished can another start to be processed	f
1432	3	This solution allows the dimensioning of the number of activities (threads or processes) that run in the server, taking into consideration the server's hardware capacity, in order to have a efficient usage of the server's CPU	f
1433	1	The advantage of running the CheckpointNode in a different host is to not degrade the availability of the NameNode during checkpoint construction	f
1433	2	The periodic rebuild of the checkpoint improves the performance of the NameNode during normal operation	f
1433	3	The periodic rebuild of the checkpoint improves the performance of the NameNode during its initialization	f
1434	1	The advantage of running the CheckpointNode in a different host is to not degrade the availability of the NameNode during checkpoint construction	f
1434	2	The periodic rebuild of the checkpoint improves the performance of the NameNode during normal operation	f
1434	3	The periodic rebuild of the checkpoint improves the performance of the NameNode during its initialization	f
1435	1	How to control the response to one or more stimulus	f
1435	2	What should be the system response in the occurrence of a stimulus	f
1435	3	A decomposition of the system that fulfills an architectural quality	f
1436	0	The search timeline is the most important business use case for Twitter	f
1436	1	The ingestion process includes tokenizing of the tweet to include in an index	f
1436	3	The write in the Early Bird server is synchronous, only when it finishes does the user receives the feedback of a successful post	f
1437	0	This is right because if you don't the project fails	f
1437	1	This is wrong because you can easily change these decisions during the project lifetime	f
1437	3	This is wrong because it is against the agile way of thinking the software development process	f
1438	0	This solution assures a consistency view to the clients of the data that is written	f
1438	1	In this solution the clients invocations have to be synchronous	f
1438	2	In this solution the tasks in the queue need to be sequentially processed, only when a task is finished can another start to be processed	f
1439	0	Can be applied to any kind stimulus in availability scenarios	f
1439	2	Can guarantee that the system will not become unavailable	f
1439	3	When applied it increases the latency of the availability scenario's response time	f
1440	0	Have high throughput	f
1440	1	Have low latency	f
1440	3	May be easily changed to increase their storage capacity	f
1441	1	When the environment is build time it means that it is necessary to codify a new module that is added by rebuilding the system	f
1441	2	When the environment is initiation time it means that it is necessary to restart the system for the change to effect	f
1441	3	When the environment is runtime the cost of doing the change is higher than in the other environments	f
1442	1	Interoperability	f
1442	2	Availability (Reliability)	f
1442	3	Security	f
1443	0	Performance and availability qualities	f
1443	2	Availability qualities only	f
1443	3	Performance and security qualities	f
1444	1	When the environment is build time it means that it is necessary to codify a new module that is added by rebuilding the system	f
1444	2	When the environment is initiation time it means that it is necessary to restart the system for the change to effect	f
1444	3	When the environment is runtime the cost of doing the change is higher than in the other environments	f
1445	0	Performance	f
1445	1	Interoperability	f
1445	2	Availability (Reliability)	f
1446	0	Performance and availability qualities	f
1446	1	Performance qualities only	f
1446	3	Performance and security qualities	f
1447	0	Can be applied to any kind stimulus in availability scenarios	f
1447	1	Is useful to support scenarios where the stimulus is an omission	f
1447	3	When applied it increases the latency of the availability scenario's response time	f
1448	0	Have high throughput	f
1448	1	Have low latency	f
1448	2	Allow many simultaneous users	f
1449	0	The Ping/Echo tactic	f
1449	1	The Heartbeat tactic	f
1449	3	The Removal from Service tactic	f
1450	0	Manage sampling rate	f
1450	2	Prioritize events	f
1450	3	Bound execution time	f
1451	0	Encapsulate the module such that the clients of the module should not be aware of the remote invocations	f
1451	1	Use an intermediary that contains all the code associated with the remote invocation separating it from the modules' business logic	f
1451	3	Increase the semantic coherence between the business logic code and the remote invocation code	f
1452	0	Usability and Performance	f
1452	2	Performance	f
1452	3	Testability	f
1453	1	The performance of the system would not change	f
1453	2	The system would respond faster to requests about\n      file locations	f
1453	3	The system would respond faster to requests made by\n      DataNodes to update the metadata	f
1454	1	Use an intermediary that contains all the code associated with the remote invocation separating it from the modules' business logic	f
1454	2	Refactor the common parts between the business logic and the remote invocation	f
1454	3	Increase the semantic coherence between the business logic code and the remote invocation code	f
1455	1	Usability	f
1455	2	Performance	f
1455	3	Testability	f
1456	0	The system would respond faster to all the\n      clients' requests	f
1456	1	The performance of the system would not change	f
1456	3	The system would respond faster to requests made by\n      DataNodes to update the metadata	f
1457	0	Manage sampling rate	f
1457	1	Limit event response	f
1457	3	Bound execution time	f
1458	0	The Ping/Echo tactic	f
1458	1	The Heartbeat tactic	f
1458	2	The Voting tactic	f
1459	0	Cycles in the uses relation between modules are a good sign, because it indicates that several modules should be tested together	f
1459	2	The uses relation should be applied to the coarse-grained modules, because it allows to identify circular dependences	f
1459	3	There isn't any relation with the layered architectural style because the allowed-to-use relation is more generic	f
1460	0	The layered view to deal with the aspects of portability	f
1460	1	The uses view to show the coupling between the different platforms	f
1460	3	The data model view to represent each one of the platforms	f
1461	1	A module contains the code that can execute in several components and a component executes the code of a single module	f
1461	2	A module contains the code that executes in a single component and a component can execute the code of several modules	f
1461	3	A module contains the code that can execute in several components and a component can execute the code of several modules	f
1462	1	She should define finer-grained modules where she splits the unassigned responsibility	f
1462	2	She should try to use a view of the Aspects style, assign this responsibility to a single module and define where it crosscuts the other modules	f
1462	3	She should try to use a view of the Layered style and assign this responsibility to a module in the bottom layer that can be used by all the other modules	f
1463	0	The view does not address the scenario	f
1463	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement	f
1463	3	The view addresses the scenario because the \\texttt{Consumer Website} module does not use the interfaces a new business partner has to implement	f
1464	1	The uses view to show the coupling between the different platforms	f
1464	2	The uses view to show the uses relationships between the different platforms	f
1464	3	The data model view to represent each one of the platforms	f
1465	0	A module contains the code that executes in a single component and a component executes the code of a single module	f
1465	1	A module contains the code that can execute in several components and a component executes the code of a single module	f
1465	2	A module contains the code that executes in a single component and a component can execute the code of several modules	f
1466	0	Cycles in the uses relation between modules are a good sign, because it indicates that several modules should be tested together	f
1466	1	The project manager uses this view to get advice on the incremental development of the system	f
1466	3	There isn't any relation with the layered architectural style because the allowed-to-use relation is more generic	f
1467	0	The view does not address the scenario	f
1467	1	The view addresses the scenario because it separates the \\texttt{Consumer Website} module from the \\texttt{OpcApp} module	f
1467	3	The view addresses the scenario because the \\texttt{Consumer Website} module does not use the interfaces a new business partner has to implement	f
1468	0	This means that in this software system it is not possible to modularize each responsibility in a cohesive module	f
1468	1	She should define finer-grained modules where she splits the unassigned responsibility	f
1468	2	She should try to use a view of the Aspects style, assign this responsibility to a single module and define where it crosscuts the other modules	f
1469	0	A change to the uses view to represent that friends can use each other catalog	f
1469	1	A change of the layered view to support different presentations, one for each friend	f
1469	3	A new aspect view that includes a module with the responsibilities associated with the access control and that crosscuts some of the other modules	f
1470	0	The correctness of the caller module may not depend on the correct implementation of the invoked function in the called module	f
1470	2	The invoked function may not have any output parameter	f
1470	3	The invoked function may not have both any input parameter nor any output parameter	f
1471	0	The modules inside a layer cannot use other modules in the same layer	f
1471	1	A layer cannot call the layer above	f
1471	3	It is possible to have a circular allowed-to-use relationship between several layers	f
1472	0	It is not necessary to have any view of the Data Model architectural style because Facebook information has a very simple structure	f
1472	2	It is enough to design a view of the Data Model architectural style at the logical level because the information will be stored in a relational database	f
1472	3	It is necessary to design a view of the Data Model architectural style at the physical level to deal with performance and consistency issues of the access to data	f
1639	0	The Aspects style.	f
1473	1	The view addresses the scenario because it separates the \\texttt{Consumer Website} module from the \\texttt{OpcApp} module to allow the execution of the \\texttt{Consumer Website} module in a component that can have multiple copies of computation	f
1473	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement	f
1473	3	The view addresses the scenario because the \\texttt{Consumer Website} module uses the \\texttt{gwt} and \\texttt{waf} modules	f
1474	1	A layer cannot call the layer above	f
1474	2	Each layer defines a virtual machine because it provides a set of cohesive functionalities to the upper layer	f
1474	3	It is possible to have a circular allowed-to-use relationship between several layers	f
1475	1	A change of the layered view to support different presentations, one for each friend	f
1475	2	A change of the decomposition view to include a set of new modules with the responsibilities associated with the access control	f
1475	3	A new aspect view that includes a module with the responsibilities associated with the access control and that crosscuts some of the other modules	f
1476	0	The correctness of the caller module may not depend on the correct implementation of the invoked function in the called module	f
1476	1	The invoked function may not have any input parameter	f
1476	3	The invoked function may not have both any input parameter nor any output parameter	f
1477	0	The view does not address the scenario	f
1477	1	The view addresses the scenario because it separates the \\texttt{Consumer Website} module from the \\texttt{OpcApp} module to allow the execution of the \\texttt{Consumer Website} module in a component that can have multiple copies of computation	f
1477	3	The view addresses the scenario because the \\texttt{Consumer Website} module uses the \\texttt{gwt} and \\texttt{waf} modules	f
1478	0	It is not necessary to have any view of the Data Model architectural style because Facebook information has a very simple structure	f
1478	1	It is enough to design a view of the Data Model architectural style at the conceptual level because Facebook information has a very simple structure	f
1478	2	It is enough to design a view of the Data Model architectural style at the logical level because the information will be stored in a relational database	f
1479	0	Represent the hardware infrastructure that allows components to communicate\n\t\twith each other	f
1479	2	Represent the dependency relations that exist among the various components	f
1479	3	Represent the control flow during an execution of the system	f
1480	0	Peer-to-Peer	f
1480	1	Pipe-and-Filter	f
1480	3	Publish-Subscribe	f
1481	1	Restricts the communication between components because, for instance, a group of components should be located in the same hardware	f
1481	2	Is an extension of the Client-Server architectural style	f
1481	3	Defines tiers as components	f
1482	1	Communicating Processes	f
1482	2	Repository	f
1482	3	Pipes-and-Filters	f
1483	0	Service-oriented architecture, and Client-server	f
1483	2	Service-oriented architecture, Shared-data, and Peer-to-peer	f
1483	3	Service-oriented architecture, Shared-data, Peer-to-peer, and Client-server	f
1484	1	Service-oriented architecture, and Shared-data	f
1484	2	Service-oriented architecture, Shared-data, and Peer-to-peer	f
1484	3	Service-oriented architecture, Shared-data, Peer-to-peer, and Client-server	f
1485	0	Applies layers to tiers	f
1485	1	Restricts the communication between components because, for instance, a group of components should be located in the same hardware	f
1485	2	Is an extension of the Client-Server architectural style	f
1486	0	Represent the hardware infrastructure that allows components to communicate\n\t\twith each other	f
1486	1	May, on another view of the system, be represented by a set of components\n\t\tand connectors	f
1486	3	Represent the control flow during an execution of the system	f
1487	0	Peer-to-Peer	f
1487	1	Pipe-and-Filter	f
1487	3	Publish-Subscribe	f
1488	0	Client-server	f
1488	1	Communicating Processes	f
1488	2	Repository	f
1489	0	It corresponds to a particular case of a specialization in a generalization view	f
1489	1	It represents a relation between a connector's role and a port of one of its internal components	f
1489	3	It represent a relation between a component's port and a connector's role	f
1490	0	A Module viewtype view	f
1490	2	A Communicating processes view	f
1490	3	A Install view	f
1491	0	A component can subscribe to events	f
1491	1	It is always guaranteed that all the published events are received by their subscribing components	f
1639	1	The Generalisation style.	t
1491	3	The set of events types are predefined at initialization time	f
1492	0	Shared-data and Communicating-Processes	f
1492	2	Tiers	f
1492	3	Client-Server and Shared-data	f
1493	1	Tiers, and Shared-data	f
1493	2	Tiers, Shared-data, and Service-oriented architecture	f
1493	3	Tiers, Shared-data, Service-oriented architecture, and Client-server	f
1494	1	Tiers, and Shared-data	f
1494	2	Tiers, Shared-data, and Service-oriented architecture	f
1494	3	Tiers, Shared-data, Service-oriented architecture, and Client-server	f
1495	1	It is always guaranteed that all the published events are received by their subscribing components	f
1495	2	The events should be delivered by the same order they are sent	f
1495	3	The set of events types are predefined at initialization time	f
1496	0	Shared-data and Communicating-Processes	f
1496	1	Communicating-Processes	f
1496	3	Client-Server and Shared-data	f
1497	0	It corresponds to a particular case of a specialization in a generalization view	f
1497	1	It represents a relation between a connector's role and a port of one of its internal components	f
1497	3	It represent a relation between a component's port and a connector's role	f
1498	0	A Module viewtype view	f
1498	1	A Allocation viewtype view	f
1498	2	A Communicating processes view	f
1499	0	A failure.	f
1499	2	A fault.	f
1499	3	An input.	f
1500	0	Stochastic event.	f
1500	1	Overload.	f
1500	3	Throughput.	f
1501	1	Use an intermediary.	f
1501	2	Restrict dependencies.	f
1501	3	Refactor.	f
1502	1	Uses style.	f
1502	2	Generalization style.	f
1502	3	Layered style.	f
1503	0	The Decomposition style.	f
1503	2	The Layered style.	f
1503	3	The Generalization and Decomposition styles.	f
1504	0	Whenever complex connectors are used in architectural views it is necessary to also document their decomposition.	f
1504	1	It is preferable to only design views that do not use complex connectors to increase understandability.	f
1504	3	Whenever possible it should be avoided to use complex connectors because developers have difficult to know how to implement them.	f
1505	0	The Shared Data style.	f
1505	1	The Pipes-and-filters style.	f
1505	2	The Publish-subscribe style.	f
1506	0	This solution optimizes the performance in terms of the latency of each request.	f
1506	2	This solution continues to provide service even if a crash occurs in the Data server.	f
1506	3	This solution optimizes the performance in terms of the throughput of processed requests.	f
1507	1	Aspects.	f
1507	2	Layered.	f
1507	3	Data model.	f
1508	1	Maintain user model.	f
1508	2	Maintain task model.	f
1508	3	Maintain system model.	f
1509	0	This view shows that if is possible to scale differently the \\texttt{web tier} from the \\texttt{EJB tier}.	f
1509	1	This view shows that the \\texttt{Adventure Builder Catalog DB} and the \\texttt{OPC} components should be deployed in the same hardware.	f
1509	3	This view \\textbf{does not} show that the access to the \\texttt{web tier} has some security qualities.	f
1510	1	Maintain multiple copies of data.	f
1510	2	Maintain multiple copies of computation.	f
1510	3	Introduce concurrency.	f
1511	0	Ignore faulty behaviour tactic	f
1511	1	Ping-and-echo tactic	f
1511	2	Active redundancy tactic	f
1512	0	Cycles in the uses relation between modules are a good sign, because it indicates that several modules should be tested together.	f
1512	1	The project manager uses this view to get advice on the incremental development of the system.	f
1512	3	There isn't any relation with the layered architectural style because the allowed-to-use relation is more generic.	f
1513	0	When a peer connects to the network it establishes connections with all other peers in the network.	f
1513	1	The behavior described in the sentence can be represented in a view where the dynamic reconfiguration architectural style is used.	f
1513	2	When a peer receives a connection it sends all its files to the peer connecting it.	f
1514	0	Analysing the performance of the system.	f
1514	2	Estimating the effort needed to implement the system.	f
1501	0	Split module.	t
1502	0	Decomposition style.	t
1503	1	The Decomposition and Uses styles.	t
1504	2	If there is some technology available that implements the complex connectors it is not necessary to document their decomposition.	t
1505	3	The Client-Server style.	t
1506	1	This solution allows an "infinite"\\ increase of the number clients by allowing the inclusion of more Request Nodes.	t
1514	3	Analysing the system's portability and reusability.	f
1515	0	All layers are mapped to the application server component.	f
1515	1	The presentation and domain logic layers are mapped to the application server component and the data access layer to the repository component.	f
1515	2	The presentation layer is mapped to the browser component and the other two layers are mapped to the application server component.	f
1516	0	Incorporate in the organization's core business the goals of a software house.	f
1516	1	Do in-house development.	f
1516	2	Integrate the development of the software system with the organization's business goals.	f
1517	0	An aggregate can contain a large number of instances.	f
1517	1	An aggregate is usually loaded in its entirety from the database.	f
1517	3	An aggregate is cluster of domain classes.	f
1518	0	Each service can be developed and deployed independently	f
1518	1	Easier to scale development	f
1518	3	Testing is easier	f
1519	1	It is preferable to only design views that do not use complex connectors to increase understandability.	f
1519	2	If there is some technology available that implements the complex connectors it is not necessary to document their decomposition.	f
1519	3	Whenever possible it should be avoided to use complex connectors because developers have difficult to know how to implement them.	f
1520	0	The Shared Data style.	f
1520	1	The Pipes-and-filters style.	f
1520	2	The Publish-subscribe style.	f
1521	0	Decomposition.	f
1521	1	Aspects.	f
1521	3	Data model.	f
1522	0	This solution optimizes the performance in terms of the latency of each request.	f
1522	1	This solution allows an "infinite"\\ increase of the number clients by allowing the inclusion of more Request Nodes.	f
1522	3	This solution optimizes the performance in terms of the throughput of processed requests.	f
1523	0	Incorporate in the organization's core business the goals of a software house.	f
1523	1	Do in-house development.	f
1523	2	Integrate the development of the software system with the organization's business goals.	f
1524	1	An error.	f
1524	2	A fault.	f
1524	3	An input.	f
1525	0	Stochastic event.	f
1525	2	Change level of service.	f
1525	3	Throughput.	f
1526	0	Split module.	f
1526	1	Use an intermediary.	f
1526	2	Restrict dependencies.	f
1527	0	Decomposition style.	f
1527	1	Uses style.	f
1527	2	Generalization style.	f
1528	0	The Decomposition style.	f
1528	1	The Decomposition and Uses styles.	f
1528	2	The Layered style.	f
1529	0	An aggregate can contain a large number of instances.	f
1529	1	An aggregate is usually loaded in its entirety from the database.	f
1529	3	An aggregate is cluster of domain classes.	f
1530	1	Easier to scale development	f
1530	2	Eliminates any long-term commitment to a technology stack	f
1530	3	Testing is easier	f
1531	1	Maintain user model.	f
1531	2	Maintain task model.	f
1531	3	Maintain system model.	f
1532	1	This view shows that the \\texttt{Adventure Builder Catalog DB} and the \\texttt{OPC} components should be deployed in the same hardware.	f
1532	2	This view \\textbf{does not} show that the \\texttt{Adventure Builder Catalog DB} and the \\texttt{OPC} components can execute behind a firewall.	f
1532	3	This view \\textbf{does not} show that the access to the \\texttt{web tier} has some security qualities.	f
1533	0	Pipe-and-filter.	f
1533	2	Maintain multiple copies of computation.	f
1533	3	Introduce concurrency.	f
1534	0	Ignore faulty behaviour tactic	f
1534	2	Active redundancy tactic	f
1534	3	Retry tactic	f
1535	0	Cycles in the uses relation between modules are a good sign, because it indicates that several modules should be tested together.	f
1535	2	The uses relation should be applied to the coarse-grained modules, because it allows to identify circular dependences.	f
1535	3	There isn't any relation with the layered architectural style because the allowed-to-use relation is more generic.	f
1536	0	When a peer connects to the network it establishes connections with all other peers in the network.	f
1557	1	Two users would conflict if they attempt to edit different orders for the same customer.	f
1536	1	The behavior described in the sentence can be represented in a view where the dynamic reconfiguration architectural style is used.	f
1536	3	The behavior described in the sentence can be represented in a view where the tier architectural style is used.	f
1537	1	Planning incremental releases of the system.	f
1537	2	Estimating the effort needed to implement the system.	f
1537	3	Analysing the system's portability and reusability.	f
1538	0	All layers are mapped to the application server component.	f
1538	2	The presentation layer is mapped to the browser component and the other two layers are mapped to the application server component.	f
1538	3	All layers are mapped to the browser component where the data access layer will contains, besides a module to access a local repository, modules to access external services.	f
1539	0	Increase competence set.	f
1539	1	Shadow.	f
1539	3	Ignore faulty behavior.	f
1540	0	Increase resources.	f
1540	2	Bound queue sizes.	f
1540	3	Introduce concurrency.	f
1541	0	When the modification should occur.	f
1541	1	The features that will be implemented.	f
1541	3	Defer binding.	f
1542	0	The decomposition view to include a module for the synchronization responsibilities	f
1542	2	The layered view to include a layer for each type of device	f
1542	3	The domain layer of the layered style to represent the types of devices	f
1543	1	The \\emph{main} module is used in the implementation of all components.	f
1543	2	The connectors only use the \\emph{stdio} module for their implementation.	f
1543	3	The \\emph{Split} component uses the \\emph{to\\_lower} module for its implementation	f
1544	1	Abstract common services.	f
1544	2	Restrict dependencies.	f
1544	3	Encapsulation.	f
1545	0	Peer-to-Peer.	f
1545	1	Pipe-and-Filter.	f
1545	2	Client-Server.	f
1546	0	Performance.	f
1546	1	Availability for incorrect responses from the Image File Storage component.	f
1546	3	Performance and Availability for incorrect responses from the Image File Storage component.	f
1547	1	Usability.	f
1547	2	Performance.	f
1547	3	Modifiability.	f
1548	0	It assigns components and connectors to people and teams.	f
1548	1	It is useful for the project managers.	f
1548	2	It does not consider the software that is outsourced.	f
1549	0	One.	f
1549	1	Two.	f
1549	3	Four.	f
1550	1	That the integration of a new source will not have any impact on the other modules of the Catalog of DVDs.	f
1550	2	That the impact of integrating a new source is controlled by the interface of \\emph{Import DVD Info} Module.	f
1550	3	That the modification can occur at runtime.	f
1551	0	It is not necessary to have any view of the Data Model architectural style because Facebook information has a very simple structure.	f
1551	1	It is enough to design a view of the Data Model architectural style at the conceptual level because Facebook information has a very simple structure.	f
1551	2	It is enough to design a view of the Data Model architectural style at the logical level because the information will be stored in a relational database.	f
1552	0	The Decomposition style.	f
1552	2	The Service Oriented Architecture style.	f
1552	3	The Communicating Processes style.	f
1553	0	This view shows that the processing of orders is done synchronously.	f
1553	1	This view shows that the processing of tracking requests is done synchronously.	f
1553	3	This view shows that the responses from the providers are processed synchronously.	f
1554	1	Shared-data and publish-subscribe.	f
1554	2	Pipe-and-filter and publish-subscribe.	f
1554	3	Pipe-and-filter and shared-data.	f
1555	0	Guarantees that the redundant data in the client and the server is always synchronized.	f
1555	1	Implements an event bus that allows the server to inform the client about new order recommendations.	f
1555	3	It completely hides the server faults from the Pad user.	f
1556	0	Results from a utility tree for performance.	f
1556	1	Results from a single availability scenario.	f
1556	2	Results from the application of a single ADD iteration.	f
1557	0	It would reduce the scalability for updates of different orders for the same customer.	f
1598	2	Maintain multiple copies of data	f
1549	2	Three.	t
1557	3	All the above.	f
1558	0	We do not need a view of the module viewtype because it is about the runtime properties of the system.	f
1558	1	We do not need a view of the allocation viewtype because deployment is automated.	f
1558	2	The component-and-connector view should emphasize the performance qualities of systems following the microservices architecture.	f
1559	1	Two users would conflict if they attempt to edit different orders for the same customer.	f
1559	2	As the number of orders grows it will be increasingly expensive to load the aggregate.	f
1559	3	All the above.	f
1560	1	Shadow.	f
1560	2	Voting.	f
1560	3	Ignore faulty behavior.	f
1561	0	Increase resources.	f
1561	1	Reduce overhead.	f
1561	3	Introduce concurrency.	f
1562	0	We do not need a view of the module viewtype because it is about the runtime properties of the system.	f
1562	1	We do not need a view of the allocation viewtype because deployment is automated.	f
1562	3	It is necessary to use views of the three viewtypes.	f
1563	0	When the modification should occur.	f
1563	1	The features that will be implemented.	f
1563	2	The new defects introduced.	f
1564	0	The decomposition view to include a module for the synchronization responsibilities	f
1564	1	The uses view to represent how the mobile device uses the Catalog application	f
1564	2	The layered view to include a layer for each type of device	f
1565	0	Usability and Performance.	f
1565	2	Performance.	f
1565	3	Modifiability.	f
1566	0	It assigns components and connectors to people and teams.	f
1566	1	It is useful for the project managers.	f
1566	2	It does not consider the software that is outsourced.	f
1567	1	Availability for incorrect responses from the Image File Storage component.	f
1567	2	Performance and Availability for crashes of the Image File Storage component.	f
1567	3	Performance and Availability for incorrect responses from the Image File Storage component.	f
1568	0	One.	f
1568	1	Two.	f
1568	2	Three.	f
1569	0	The cost of the modification.	f
1569	2	That the impact of integrating a new source is controlled by the interface of \\emph{Import DVD Info} Module.	f
1569	3	That the modification can occur at runtime.	f
1570	0	It is not necessary to have any view of the Data Model architectural style because Facebook information has a very simple structure.	f
1570	1	It is enough to design a view of the Data Model architectural style at the conceptual level because Facebook information has a very simple structure.	f
1570	3	It is necessary to design a view of the Data Model architectural style at the physical level to deal with performance and consistency issues of the access to data.	f
1571	1	The Client-Server style.	f
1571	2	The Service Oriented Architecture style.	f
1571	3	The Communicating Processes style.	f
1572	0	This view shows that the processing of orders is done synchronously.	f
1572	2	This view shows that bank debits are done asynchronously.	f
1572	3	This view shows that the responses from the providers are processed synchronously.	f
1573	1	Results from a single availability scenario.	f
1573	2	Results from the application of a single ADD iteration.	f
1573	3	Results from the application of several ADD iterations.	f
1574	1	Shared-data and publish-subscribe.	f
1574	2	Pipe-and-filter and publish-subscribe.	f
1574	3	Pipe-and-filter and shared-data.	f
1575	0	Guarantees that the redundant data in the client and the server is always synchronized.	f
1575	1	Implements an event bus that allows the server to inform the client about new order recommendations.	f
1575	2	Do not loose the changes done on the client component if the server is not available.	f
1576	0	Split module.	f
1576	2	Restrict dependencies.	f
1576	3	Encapsulation.	f
1577	0	Peer-to-Peer.	f
1577	2	Client-Server.	f
1577	3	Publish-Subscribe.	f
1578	1	The \\emph{main} module is used in the implementation of all components.	f
1578	2	The connectors only use the \\emph{stdio} module for their implementation.	f
1578	3	The \\emph{Split} component uses the \\emph{to\\_lower} module for its implementation	f
1561	2	Bound queue sizes.	t
1579	0	Availability whenever the server running the tasks crashes, the tasks are restarted and eventually finished	f
1579	2	Performance of the services being executed by the clients, they can execute other actions while waiting for the response	f
1579	3	Simple programming model, the clients only need to concern about the business logic of the application, the remote services are transparent	f
1580	0	The result of decisions that are made at the "upper floors" of the organization	f
1580	1	The sole decision of an architect	f
1580	3	A set of software elements and their relations	f
1581	1	Technical	f
1581	2	Project	f
1581	3	Professional	f
1582	1	Scalability of the Image File Storage in terms of the storage capacity	f
1582	2	Availability of the Image File Storage, whenever the Image File Storage component crashes	f
1582	3	Performance of the Image Write Service	f
1583	0	The source of stimulus is the FenixEDU system	f
1583	2	The environment is overloaded	f
1583	3	The measure of the response is throughput	f
1584	1	The sole decision of an architect	f
1584	2	A common understanding to be achieve among all the system stakeholders	f
1584	3	A set of software elements and their relations	f
1585	0	The source of stimulus is the FenixEDU system	f
1585	1	The stimulus is periodic	f
1585	2	The environment is overloaded	f
1586	0	Commercial	f
1586	1	Technical	f
1586	3	Professional	f
1587	0	Availability of the Image Write Service, whenever one of the Image Write Service components crashes	f
1587	1	Scalability of the Image File Storage in terms of the storage capacity	f
1587	3	Performance of the Image Write Service	f
1588	0	Availability whenever the server running the tasks crashes, the tasks are restarted and eventually finished	f
1588	1	Performance of the tasks execution, scheduling of tasks can be optimized for the particular context of the system	f
1588	2	Performance of the services being executed by the clients, they can execute other actions while waiting for the response	f
1589	0	Interoperability is a quality that as lower priority than performance	f
1589	1	Scalability should be the quality to be achieved first by any architecture	f
1589	3	None of the above	f
1590	0	Performance	f
1590	2	Modifiability	f
1590	3	Time to market	f
1591	0	The number of Image Write Service components should be the same of the number Image Retrieval Service components	f
1591	1	The hardware where of Image Write Service components execute should have the same capabilities of the hardware where Image Retrieval Service components run	f
1591	3	The separation of write and retrieval services allows them do scale independently	f
1592	0	The synchronous solution requires less memory than asynchronous solution	f
1592	2	In the synchronous solution a task can be associated, during its execution, with different execution entities, e.g. thread	f
1592	3	In the asynchronous solution a task is always associated, during its execution, with the same execution entity, e.g. thread	f
1593	1	Limit event response	f
1593	2	Maintain multiple copies of data	f
1593	3	Schedule resources	f
1594	1	The asynchronous solution can support a larger number of simultaneous requests	f
1594	2	In the synchronous solution a task can be associated, during its execution, with different execution entities, e.g. thread	f
1594	3	In the asynchronous solution a task is always associated, during its execution, with the same execution entity, e.g. thread	f
1595	1	Scalability should be the quality to be achieved first by any architecture	f
1595	2	That the use of XML technology for interoperability is not a correct decision	f
1595	3	None of the above	f
1596	0	Performance	f
1596	1	Availability	f
1596	3	Time to market	f
1597	0	The number of Image Write Service components should be the same of the number Image Retrieval Service components	f
1597	1	The hardware where of Image Write Service components execute should have the same capabilities of the hardware where Image Retrieval Service components run	f
1597	3	The separation of write and retrieval services allows them do scale independently	f
1598	0	Introduce concurrency	f
1598	1	Limit event response	f
1599	0	Provides the quality of availability	f
1599	2	Provides the quality of modifiability	f
1599	3	Does not provide any additional quality	f
1600	0	The need to use a two-phase commit protocol	f
1600	1	The need to have a tight integration of the development teams	f
1600	3	The need to deploy all the microservices simultaneously	f
1601	1	Reduction of cost is the most important impact of cloud computing in an architecture	f
1601	2	Cloud computing has impact on the business but it is not an architectural aspect	f
1601	3	Using cloud computing we cannot delay some architectural decisions	f
1602	1	In the asynchronous solution the tasks that are being executed are lost and they have to be resubmitted by the client	f
1602	2	In the asynchronous solution it is possible to provide an implement where the tasks being executed are finished without requiring the client to resubmitted them	f
1602	3	In the synchronous solution the tasks being executed are finished without requiring the client to resubmitted them	f
1603	0	Manage sampling rate	f
1603	2	Maintain multiple copies of computation	f
1603	3	Increase resource efficiency	f
1604	1	In the asynchronous solution the tasks that are being executed are lost and they have to be resubmitted by the client	f
1604	2	In the asynchronous solution it is possible to provide an implement where the tasks being executed are finished without requiring the client to resubmitted them	f
1604	3	In the synchronous solution the tasks being executed are finished without requiring the client to resubmitted them	f
1605	0	Provides the quality of availability	f
1605	1	Provides the quality of performance	f
1605	2	Provides the quality of modifiability	f
1606	0	The need to use a two-phase commit protocol	f
1606	1	The need to have a tight integration of the development teams	f
1606	3	The need to deploy all the microservices simultaneously	f
1607	0	Manage sampling rate	f
1607	1	Bound execution times	f
1607	3	Increase resource efficiency	f
1608	0	Time to market is the most important impact of cloud computing in an architecture	f
1608	1	Reduction of cost is the most important impact of cloud computing in an architecture	f
1608	2	Cloud computing has impact on the business but it is not an architectural aspect	f
1609	0	Ping/Echo.	f
1609	1	Retry.	f
1609	3	Passive Redundancy.	f
1610	0	Has as main goal the reduction of the modules' size.	f
1610	2	Increases the cohesion between the two modules.	f
1610	3	May conflict with the Reduce Overhead performance tactic.	f
1611	0	Results from a utility tree for performance.	f
1611	1	Results from a single availability scenario.	f
1611	3	Results from the application of several ADD iterations.	f
1612	0	Its main goal is to establish the reusability qualities of the architecture.	f
1612	2	Views of this type are mostly useful to guide the testing of the system.	f
1612	3	There should be at least one view of the system using this architectural style.	f
1613	1	System Model tactics.	f
1613	2	performance tactics.	f
1613	3	User Model tactics.	f
1614	1	Project managers are not interested in views that use this style because it lacks the necessary level of detail.	f
1614	2	Views of this type are mostly useful to guide the testing of the system.	f
1614	3	There should be at least one view of the system using this architectural style.	f
1615	1	System Model tactics.	f
1615	2	performance tactics.	f
1615	3	User Model tactics.	f
1616	0	Ping/Echo.	f
1616	1	Retry.	f
1616	3	Passive Redundancy.	f
1617	0	Has as main goal the reduction of the modules' size.	f
1617	1	Results in the creation of a third module that makes the original modules independent.	f
1617	3	May conflict with the Reduce Overhead performance tactic.	f
1618	0	Results from a utility tree for performance.	f
1618	1	Results from a single availability scenario.	f
1618	2	Results from the application of a single ADD iteration.	f
1619	0	Programming, if the components execute modules developed by different teams.	f
1619	2	Operating Systems, if redundant components execute on top of different operating systems..	f
1619	3	All the previous options.	f
1601	0	Time to market is the most important impact of cloud computing in an architecture	t
1603	1	Bound execution times	t
1620	0	This is a performance scenario and the measure of the response is 10 minutes latency.	f
1620	1	This is a modifiability scenario which has a defer binding tactic.	f
1620	3	This is a modifiability scenario and its environment design time.	f
1621	1	This ASR requires a specific architectural design because it profoundly affects the architecture.	f
1621	2	The cost of meeting the ASR after development starts is too high.	f
1621	3	Any ASR that has a high business value cannot have a low architecture impact because it needs to be supported by the architecture.	f
1622	1	Is applied at the begin of the architectural design process but may be necessary to redo it later.	f
1622	2	Is mostly driven by the security attribute quality.	f
1622	3	Follows a bottom-up decomposition process of the system.	f
1623	0	Performance.	f
1623	2	Availability.	f
1623	3	Security.	f
1624	1	Interoperability.	f
1624	2	Availability.	f
1624	3	Security.	f
1625	0	Programming, if the components execute modules developed by different teams.	f
1625	1	Hardware, if there is hardware redundancy.	f
1625	2	Operating Systems, if redundant components execute on top of different operating systems..	f
1626	0	This ASR can easily be supported by the architecture because it has little effect in the architecture.	f
1626	1	This ASR requires a specific architectural design because it profoundly affects the architecture.	f
1626	3	Any ASR that has a high business value cannot have a low architecture impact because it needs to be supported by the architecture.	f
1627	0	This is a performance scenario and the measure of the response is 10 minutes latency.	f
1627	1	This is a modifiability scenario which has a defer binding tactic.	f
1627	3	This is a modifiability scenario and its environment design time.	f
1628	0	Is applied only once at the beginning of the architectural design process.	f
1628	1	Is applied at the begin of the architectural design process but may be necessary to redo it later.	f
1628	2	Is mostly driven by the security attribute quality.	f
1629	0	Prevent a fault in hardware.	f
1629	1	Prevent a fault in software.	f
1629	3	Detect a fault.	f
1630	0	A low cost of change may imply a high cost of development.	f
1630	2	There is no relation between the cost of change and the cost of development.	f
1630	3	The cost of change is higher if it occurs at runtime.	f
1631	0	Is driven by functional requirements.	f
1631	1	Is done in a single step, after all the tactics were identified.	f
1631	3	Is an iterative process where architectural designs are proposed as hypothesis and tested.	f
1632	0	Each view contains a single architectural style.	f
1632	2	A view may not contain any architectural style.	f
1632	3	None of the above.	f
1633	1	The quality addressed is performance and a limit event response is required to solve the problem.	f
1633	2	The quality addressed is availability and a voting design tactic is required to solve the problem.	f
1633	3	The quality addressed is performance and a maintain multiple copies of data design tactic is required to solve the problem.	f
1634	1	Is done in a single step, after all the tactics were identified.	f
1634	2	Is a top-down process where a initial decomposition is chosen and it is successively decomposed without changing the initial decisions.	f
1634	3	Is an iterative process where architectural designs are proposed as hypothesis and tested.	f
1635	1	Views need to contain more than one architectural style.	f
1635	2	A view may not contain any architectural style.	f
1635	3	None of the above.	f
1636	0	The quality addressed is availability and transactions tactic is required to solve the problem.	f
1636	1	The quality addressed is performance and a limit event response is required to solve the problem.	f
1636	3	The quality addressed is performance and a maintain multiple copies of data design tactic is required to solve the problem.	f
1637	0	Prevent a fault in hardware.	f
1637	1	Prevent a fault in software.	f
1637	3	Detect a fault.	f
1638	0	A low cost of change may imply a high cost of development.	f
1638	1	A low cost of change implies a low cost of development, because changing the code is part of development.	f
1638	2	There is no relation between the cost of change and the cost of development.	f
1624	0	Performance.	t
1639	2	The Decomposition style.	f
1639	3	The Shared-data style.	f
1640	0	Service-oriented architecture, and Client-server.	f
1640	1	Service-oriented architecture, and Shared-data.	f
1640	3	Service-oriented architecture, Shared-data, Client-server and Peer-to-peer.	f
1641	1	The view addresses the scenario because it separates the \\texttt{Consumer Website} module from the \\texttt{OpcApp} module.	f
1641	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement.	f
1641	3	The view addresses the scenario because the \\texttt{Consumer Website} module does not use the interfaces a new business partner has to implement.	f
1642	1	It represents a relation between a connector's role and a port of one of its internal components.	f
1642	2	It represents a relation between a component's port and a port of one of its internal components.	f
1642	3	It represents a relation between a component's port and a connector's role.	f
1643	0	But when the filters are executed sequentially the composition power is reduced.	f
1643	2	But the size of buffers may reduce the composition power.	f
1643	3	And filters do not have to agree on the data formats.	f
1644	1	Service-oriented architecture, and Shared-data.	f
1644	2	Service-oriented architecture, Shared-data, and Client-server.	f
1644	3	Service-oriented architecture, Shared-data, Client-server and Peer-to-peer.	f
1645	0	The Aspects style.	f
1645	1	The Generalisation style.	f
1645	2	The Decomposition style.	f
1646	0	It corresponds to a particular case of a specialization in a generalization view.	f
1646	1	It represents a relation between a connector's role and a port of one of its internal components.	f
1646	3	It represents a relation between a component's port and a connector's role.	f
1647	0	But when the filters are executed sequentially the composition power is reduced.	f
1647	1	Which improves modifiability, because filters are decoupled through pipes.	f
1647	3	And filters do not have to agree on the data formats.	f
1648	0	The view does not address the scenario	f
1648	1	The view addresses the scenario because it separates the \\texttt{Consumer Website} module from the \\texttt{OpcApp} module.	f
1648	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement.	f
1649	0	A component can subscribe to events.	f
1649	1	All the published events are received by their subscribing components.	f
1649	3	The set of events types are predefined at initialization time.	f
1650	0	If the OPC crashes the Consumer Website can continue to provide service in degraded mode.	f
1650	2	If the Adventure Catalog BD crashes the Consumer Website can continue to present the Adventure Builder offers.	f
1650	3	If a Bank component is not available the OPC cannot continue to provide service.	f
1651	0	The view does not address the scenario.	f
1651	1	The view addresses the scenario because it separates the \\texttt{Consumer Website} module from the \\texttt{OpcApp} module to allow the execution of the \\texttt{Consumer Website} module in a component that can have multiple copies of computation.	f
1651	3	The view addresses the scenario because the \\texttt{Consumer Website} module uses the \\texttt{gwt} and \\texttt{waf} modules.	f
1652	0	The type of a connector does not depend on the type of its roles.	f
1652	2	The attachment is a runtime relation which dynamically manages type compliance.	f
1652	3	The attachment between components and connectors only depends on their ports and roles types.	f
1653	1	The Generalisation style.	f
1653	2	The Uses style.	f
1653	3	The Aspects style.	f
1654	1	If the OPC crashes the Consumer Website can continue to provide service in normal mode.	f
1654	2	If the Adventure Catalog BD crashes the Consumer Website can continue to present the Adventure Builder offers.	f
1654	3	If a Bank component is not available the OPC cannot continue to provide service.	f
1655	1	All the published events are received by their subscribing components.	f
1655	2	The events should be received by the same order they are sent.	f
1655	3	The set of events types are predefined at initialization time.	f
1656	0	The Decomposition style.	f
1656	1	The Generalisation style.	f
1656	3	The Aspects style.	f
1657	0	The view does not address the scenario.	f
1676	3	Defines tiers as components.	f
1677	0	The decomposition was driven by a defer binding tactic.	f
619	0	Is an aggregate design tactic.	t
1657	1	The view addresses the scenario because it separates the \\texttt{Consumer Website} module from the \\texttt{OpcApp} module to allow the execution of the \\texttt{Consumer Website} module in a component that can have multiple copies of computation.	f
1657	3	The view addresses the scenario because the \\texttt{Consumer Website} module uses the \\texttt{gwt} and \\texttt{waf} modules.	f
1658	0	The type of a connector does not depend on the type of its roles.	f
1658	1	Components of different types may have ports of the same type.	f
1658	2	The attachment is a runtime relation which dynamically manages type compliance.	f
1659	0	Layer 1.	f
1659	2	In a layered architecture all layers are equally modifiable.	f
1659	3	Modifiability is not made easier by a layered architecture.	f
1660	0	Client-server.	f
1660	1	Publish-subscribe.	f
1660	3	Peer-to-peer.	f
1661	1	The view addresses the scenario because the uses relation between the \\texttt{Consumer Website} module and the \\texttt{OpcApp} module has the require properties.	f
1661	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement.	f
1661	3	The view addresses the scenario because the \\texttt{Consumer Website} module uses the \\texttt{gwt} and \\texttt{waf} modules.	f
1662	1	Availability and Performance.	f
1662	2	Testability and Modifiability.	f
1662	3	Maintainability and Availability.	f
1663	0	The file transfer has to follow the same path of nodes used to identify where the file was located.	f
1663	2	If a peer providing a file crashes the file will not be downloaded.	f
1663	3	The price for high scalability and availability is the need to have several replicas of the files to be shared.	f
1664	1	Publish-subscribe.	f
1664	2	Shared-data.	f
1664	3	Peer-to-peer.	f
1665	0	Layer 1.	f
1665	1	Layer 4.	f
1665	2	In a layered architecture all layers are equally modifiable.	f
1666	0	The view does not address the scenario	f
1666	1	The view addresses the scenario because the uses relation between the \\texttt{Consumer Website} module and the \\texttt{OpcApp} module has the require properties.	f
1666	3	The view addresses the scenario because the \\texttt{Consumer Website} module uses the \\texttt{gwt} and \\texttt{waf} modules.	f
1667	0	The file transfer has to follow the same path of nodes used to identify where the file was located.	f
1667	1	The peer initiating the request for a file needs to know where the file is located.	f
1667	3	The price for high scalability and availability is the need to have several replicas of the files to be shared.	f
1668	0	Modifiability.	f
1668	1	Availability and Performance.	f
1668	2	Testability and Modifiability.	f
1669	0	Applies layers to tiers.	f
1669	1	Restricts the communication between components because, for instance, a group of components should be located in the same hardware.	f
1669	3	Defines tiers as components.	f
1670	0	The decomposition was driven by a defer binding tactic.	f
1670	2	The decomposition was driven by a split module tactic.	f
1670	3	The decomposition was driven by a quality that is supported by an encapsulate tactic.	f
1671	0	A performance scenario associated with the throughput of writing data points to disk.	f
1671	1	A performance scenario associated with the latency of writing data points to disk.	f
1671	3	A usability scenario.	f
1672	0	HTML5 provides better portability qualities.	f
1672	2	HTML5 provides better usability qualities.	f
1672	3	Native applications provide better support for working offline.	f
1673	1	Simplifies the query operations in  the event store.	f
1673	2	Allows the querying of a past state.	f
1673	3	Provides a programming model developers are familiar with.	f
1674	1	A performance scenario associated with the latency of writing data points to disk.	f
1674	2	An availability scenario associated with a fault in the \\emph{Carbon} component.	f
1674	3	A usability scenario.	f
1675	1	Simplifies the query operations in  the event store.	f
1675	2	Allows the querying of a past state.	f
1675	3	Provides a programming model developers are familiar with.	f
1676	0	Applies layers to tiers.	f
1676	1	Restricts the communication between components because, for instance, a group of components should be located in the same hardware.	f
1659	1	Layer 4.	t
1677	1	The decomposition was driven by a quality that is supported by a restrict dependencies tactic.	f
1677	3	The decomposition was driven by a quality that is supported by an encapsulate tactic.	f
1678	0	HTML5 provides better portability qualities.	f
1678	1	Native applications provide better modifiability qualities.	f
1678	2	HTML5 provides better usability qualities.	f
1679	0	Dynamic Reconfiguration.	f
1679	2	Communicating Processes.	f
1679	3	Install.	f
1680	0	The view illustrates the achievement of a security scenario.	f
1680	1	The view illustrates the achievement of a performance scenario.	f
1680	3	The view results from the implementation of a support system initiative tactic.	f
1681	1	A usability scenario of the \\emph{Graphite} system.	f
1681	2	A performance scenario of the \\emph{Graphite} system.	f
1681	3	An availability scenario of the \\emph{Graphite} system.	f
1682	1	Web pages are explicitly cached on the browser to optimize accesses.	f
1682	2	A request for a web page corresponds to requesting a service from the amazon cloud.	f
1682	3	It is possible to customize the number of threads that run in the mobile device.	f
1683	0	She should decide to use a microservices architecture to improve the scalability of the system.	f
1683	2	She should try to split the system in parts in order to isolate the complex business logic and use the two architectural approaches accordingly.	f
1683	3	She should give up because it is not possible to have the two approaches in a singe architecture.	f
1684	1	A usability scenario of the \\emph{Graphite} system.	f
1684	2	A performance scenario of the \\emph{Graphite} system.	f
1684	3	An availability scenario of the \\emph{Graphite} system.	f
1685	0	A request for a web page corresponds to a peer-to-peer interaction between all the web components containing the resources.	f
1685	1	Web pages are explicitly cached on the browser to optimize accesses.	f
1685	2	A request for a web page corresponds to requesting a service from the amazon cloud.	f
1686	0	She should decide to use a microservices architecture to improve the scalability of the system.	f
1686	1	She should decide to use a modular monolith architecture to reduce the cost of development, because developers will not need to define intermediate states for the transactional execution of the business logic.	f
1686	3	She should give up because it is not possible to have the two approaches in a singe architecture.	f
1687	0	Dynamic Reconfiguration.	f
1687	1	Tiers.	f
1687	3	Install.	f
1688	0	The view illustrates the achievement of a security scenario.	f
1688	1	The view illustrates the achievement of a performance scenario.	f
1688	2	The view results from the implementation of a support user initiative tactic.	f
1689	0	A deployment view.	f
1689	1	A work assignment view.	f
1689	3	A install view.	f
1690	0	This generalization was driven by a split module tactic.	f
1690	2	This view fulfills a modifiability scenario, which states about the cost of adding a new source of information to the system.	f
1690	3	This view fulfills a modifiability scenario, which states that it should be easy to support the system in new software platforms, e.g. \\emph{Windows} or \\emph{OS X} .	f
1691	0	A modifiability scenario the \\emph{Graphite} system.	f
1691	1	A usability scenario of the \\emph{Graphite} system.	f
1691	3	At least two performance scenarios of the \\emph{Graphite} system.	f
1692	0	Performance was traded for easy of development to reduce the overall development costs.	f
1692	2	Performance was traded for the availability quality.	f
1692	3	An incremental development was followed, which allowed to have the system in production without being necessary to export all the information to the mainframe.	f
1693	1	Does not support independent scalability according to the type of operation.	f
1693	2	Reads may not be consistent with the most recent write.	f
1693	3	Querying the event sourcing becomes more complex.	f
1694	1	An iterative development was followed, which allowed more time to develop a connector with good performance in the latter stages of the project.	f
1694	2	Performance was traded for the availability quality.	f
176	1	A capacidade aumente	t
1679	1	Tiers.	t
1694	3	An incremental development was followed, which allowed to have the system in production without being necessary to export all the information to the mainframe.	f
1695	1	A work assignment view.	f
1695	2	A deployment and a work assignment view.	f
1695	3	A install view.	f
1696	0	This generalization was driven by a split module tactic.	f
1696	1	This view fulfills an availability scenario, which defines the expected behavior whenever an external source is not available.	f
1696	3	This view fulfills a modifiability scenario, which states that it should be easy to support the system in new software platforms, e.g. \\emph{Windows} or \\emph{OS X} .	f
1697	0	A modifiability scenario the \\emph{Graphite} system.	f
1697	1	A usability scenario of the \\emph{Graphite} system.	f
1697	3	At least two performance scenarios of the \\emph{Graphite} system.	f
1698	0	Does not allow optimizations according to the type of query.	f
1698	1	Does not support independent scalability according to the type of operation.	f
1698	2	Reads may not be consistent with the most recent write.	f
1	2	Pode ser necessário usar vistas dos três tipos de vistas	t
2	1	Devem ser capturados através de cenários, tais como os\n    requisitos de atributos de qualidade, e ser tidos em conta no\n    desenho da arquitectura de software	t
3	0	Os estilos decomposição (\\emph{decomposition}) e\n    utilização (\\emph{uses}), que nos permitem mostrar até que ponto\n    um determinado módulo depende de outras partes do sistema	t
4	3	Substituir a máquina usada pelo servidor por uma máquina\n    mais poderosa que satisfaça os novos requisitos de desempenho,\n    mantendo apenas um componente servidor em funcionamento	t
5	3	Apesar de cada tipo de vista apresentar aspectos\n    diferentes de um sistema, existem relações entre todos eles	t
6	0	A camada 1	t
7	3	É útil mesmo que a implementação já tenha sido concluída e\n    o sistema tenha entrado na fase de manutenção	t
8	2	Um subconjunto dos requisitos que correspondam aos\n    objectivos de negócio mais importantes, independentemente de\n    entrarem em conflito entre si	t
9	0	O estilo Par-a-Par (\\emph{Peer-to-Peer})	t
10	3	O estilo Dados Partilhados (\\emph{Shared data})	t
11	3	Esta alteração reflecte-se na relação existente entre\n    módulos e componentes do sistema	t
12	0	O estilo Processos Comunicantes (\\emph{Communicating Processes})	t
13	2	Vistas de Decomposição (\\emph{Decomposition}) e de Implementação (\\emph{Implementation})	t
14	1	Vistas de Decomposição (\\emph{Decomposition}) e de Utilização (\\emph{Uses})	t
15	2	O estilo Camadas (\\emph{Layers})	t
16	3	Os estilos Instalação (\\emph{Deployment}) e Camadas (\\emph{Layers})	t
17	1	Vistas do tipo de vista módulo	t
18	0	Controlar e reduzir a interface exposta pela camada de lógica de\n    domínio, aumentando assim a modificabilidade dessa camada	t
19	3	Manter um registo das alterações feitas aos dados durante\n    uma transacção de negócio e coordenar a escrita dessas alterações\n    para a base de dados	t
20	2	Evitar que os dados fiquem incoerentes quando existem\n    múltiplos acessos dentro da mesma operação de negócio à mesma\n    entidade	t
21	3	É útil mesmo que a implementação já tenha sido concluída e\n    o sistema tenha entrado na fase de manutenção	t
22	3	Apesar de cada tipo de vista apresentar aspectos\n    diferentes de um sistema, existem relações entre todos eles	t
23	2	Um subconjunto dos requisitos que correspondam aos\n    objectivos de negócio mais importantes, independentemente de\n    entrarem em conflito entre si	t
24	2	Vistas de Decomposição (\\emph{Decomposition}) e de Implementação (\\emph{Implementation})	t
25	1	Devem ser capturados através de cenários, tais como os\n    requisitos de atributos de qualidade, e ser tidos em conta no\n    desenho da arquitectura de software	t
26	0	A camada 1	t
27	0	Os estilos decomposição (\\emph{decomposition}) e\n    utilização (\\emph{uses}), que nos permitem mostrar até que ponto\n    um determinado módulo depende de outras partes do sistema	t
28	2	Pode ser necessário usar vistas dos três tipos de vistas	t
29	2	O estilo Camadas (\\emph{Layers})	t
30	1	Vistas do tipo de vista módulo	t
31	3	Os estilos Instalação (\\emph{Deployment}) e Camadas (\\emph{Layers})	t
32	0	O estilo Processos Comunicantes (\\emph{Communicating Processes})	t
33	1	Vistas de Decomposição (\\emph{Decomposition}) e de Utilização (\\emph{Uses})	t
34	3	Substituir a máquina usada pelo servidor por uma máquina\n    mais poderosa que satisfaça os novos requisitos de desempenho,\n    mantendo apenas um componente servidor em funcionamento	t
35	3	Esta alteração reflecte-se na relação existente entre\n    módulos e componentes do sistema	t
36	0	Controlar e reduzir a interface exposta pela camada de lógica de\n    domínio, aumentando assim a modificabilidade dessa camada	t
37	0	O estilo Par-a-Par (\\emph{Peer-to-Peer})	t
38	3	O estilo Dados Partilhados (\\emph{Shared data})	t
39	2	Evitar que os dados fiquem incoerentes quando existem\n    múltiplos acessos dentro da mesma operação de negócio à mesma\n    entidade	t
40	3	Manter um registo das alterações feitas aos dados durante\n    uma transacção de negócio e coordenar a escrita dessas alterações\n    para a base de dados	t
41	2	É necessário ter pelo menos uma vista de cada um destes\n    três tipos de vistas, mas podemos ter mais do que uma vista de\n    cada tipo	t
42	1	Os stakeholders financiam o desenvolvimento do sistema e,\n    portanto, ao estabelecerem o orçamento disponível, influenciam a\n    arquitectura do sistema	t
43	2	Vistas de Decomposição (\\emph{Decomposition}) e de Implementação (\\emph{Implementation})	t
345	0	Redundância Passiva e Aumento da Eficiência dos Recursos	t
44	1	Porque assim é mais fácil modificar cada uma das três\n      funcionalidades sem afectar as outras funcionalidades do sistema	t
45	0	O estilo Processos Comunicantes (\\emph{Communicating Processes})	t
46	0	A vista de Decomposição (\\emph{Decomposition})	t
47	3	Nenhum, visto que esta descrição não tem nada a ver com a\n    arquitectura do sistema	t
48	2	Um módulo pode executar código de componentes diferentes	t
49	0	O padrão de interacção existente entre os MUAs corresponde\n    ao estilo arquitectural Par-a-Par (\\emph{Peer-to-Peer})	t
50	3	Uma arquitectura de camadas em que a camada mais de baixo\n    providencia uma interface que é uma abstracção dos serviços\n    fornecidos pelas várias plataformas	t
51	2	Apenas na vista de Instalação (\\emph{Deployment}), visto\n    que a utilização desta táctica não altera os componentes, mas sim\n    onde é que eles executam	t
52	0	Manter a arquitectura actual do sistema e optimizar o\n    código de modo a alcançar os níveis de desempenho necessários actualmente	t
53	3	Todas as anteriores	t
54	1	O estilo Repositório (\\emph{Repository})	t
55	2	Mostrando na vista de instalação (\\emph{deployment}) que\n    num hipermercado existem várias caixas em funcionamento em cada\n    instante, pelo que já existe redundância ao nível do hardware para\n    satisfazer este requisito	t
56	0	Não tem nenhuma	t
57	2	Substituía algumas das relações de utilização por relações\n    de generalização (\\emph{generalization}) de modo a quebrar os\n    ciclos	t
58	3	Não existe qualquer restrição quanto ao número de\n    elementos de hardware	t
59	2	Quando a lógica de domínio da aplicação é implementada\n    recorrendo ao padrão Service Layer	t
60	3	Este problema não é resolvido pelo Unit of Work, e é uma\n    das desvantagens da sua utilização, porque é o programador que tem\n    que lidar com o problema directamente no código que escreve	t
61	0	É necessário ter exactamente uma vista de cada um destes\n    três tipos de vistas	t
62	0	Porque assim se pode fazer o desenvolvimento do sistema de\n      forma incremental, em três etapas claramente separadas	t
63	2	Vistas de Decomposição (\\emph{Decomposition}) e de Implementação (\\emph{Implementation})	t
64	2	Os stakeholders são a fonte dos requisitos funcionais do sistema	t
65	3	Uma arquitectura de camadas em que a camada mais de baixo\n    providencia uma interface que é uma abstracção dos serviços\n    fornecidos pelas várias plataformas	t
66	3	O padrão de interacção existente entre os MUAs corresponde\n    ao estilo arquitectural Publicação-Subscrição\n    (\\emph{Publish-subscribe}), sendo que os MTAs e DNS implementam o\n    conector 	t
67	1	O estilo Cliente-Servidor (\\emph{Client-Server})	t
68	3	A vista de Utilização (\\emph{Uses})	t
69	0	O estilo Implementação (\\emph{Implementation})	t
70	3	Um componente pode conter código de diferentes módulos	t
71	1	O estilo Repositório (\\emph{Repository})	t
72	2	Vistas do tipo de vista afectação (\\emph{Allocation})	t
73	0	Manter a arquitectura actual do sistema e optimizar o\n    código de modo a alcançar os níveis de desempenho necessários actualmente	t
74	1	Apenas na vista de componente-e-conector que inclui o\n    servidor web	t
75	0	Criando mecanismos que permitam, em primeiro lugar,\n    detectar falhas numa caixa e, uma vez detectada uma falha, reparar a\n    falha rapidamente para que a caixa volte a operar normalmente	t
76	0	Não tem nenhuma	t
77	3	Não existe qualquer restrição quanto ao número de\n    elementos de hardware	t
78	1	Voltava ao estilo decomposição (\\emph{decomposition}) para\n    decompor o sistema de outra forma, de modo a que não surjam ciclos\n    no estilo de utilização	t
79	1	Cada Unit of Work utiliza um Identity Map para evitar este\n    problema	t
80	0	Quando a lógica de domínio da aplicação é implementada\n    recorrendo ao padrão Transaction Script que acede aos dados persistentes através de Record Sets	t
81	1	Os \\emph{stakeholders} mais importantes são uma pequena\n      equipa de desenvolvimento que tem elevadas competências\n      técnicas	t
82	2	As qualidades de disponibilidade e de desempenho não são\n       conflituosas	t
83	0	Replicação activa e replicação passiva	t
84	0	\\emph{Shadow operation}	t
85	1	Autenticar utilizadores, autorizar utilizadores e limitar exposição	t
86	2	Mas também poderiam usar a táctica de excepções	t
87	3	Que fornece um conjunto de serviços completo e coeso	t
88	1	Mas necessita de informação sobre a estrutura interna dos módulos	t
89	0	O sucesso da invocação pode não ter impacto no correcto funcionamento do módulo invocador	t
90	0	Devemos satisfazer primeiro os requisitos dos\n      \\emph{stakeholders} mais importantes, como por exemplo o\n      cliente	t
91	2	O estilo Par-a-Par (\\emph{Peer-to-Peer})	t
92	0	Uma arquitectura Cliente-Servidor, em que o\n      \\emph{DataNode} é o Cliente e o \\emph{NameNode} é o Servidor	t
93	3	A garantia de disponibilidade pode ser dada pela\n      utilização de um conector adequado entre o \\emph{HDFS Client} e os\n      \\emph{DataNodes}	t
94	2	O estilo Instalação (\\emph{Deployment})	t
95	3	O sistema passava a poder responder em menos tempo aos\n      pedidos de actualização dos metadados feitos pelos \\emph{DataNodes}	t
96	1	Permitir a existência de mais do que uma interface para a\n      camada de lógica de domínio (para providenciar, por exemplo, uma\n      interface de \\emph{web services})	t
97	3	Essa interacção não pode ser representada nesta vista,\n      mas sim numa outra vista da arquitectura do sistema	t
98	3	Vistas de Implementação (\\emph{Implementation})	t
99	2	O \\emph{browser} web, o servidor web, e a base de dados	t
100	2	Do estilo Instalação	t
105	3	Para informarem os restantes \\emph{DataNodes} que estão disponíveis	t
106	0	Autenticar utilizadores e autorizar utilizadores	t
107	1	Que agrega módulos de acordo com relações de utilização	t
346	0	No servidor	t
347	3	Tratamento de Exceções	t
108	3	A relação de utilização requer que as invocações devolvam o controlo ao módulo invocador	t
109	3	E fornece toda a informação suficiente para medir o impacto	t
110	3	Uma arquitectura Processos Comunicantes	t
111	2	Se um dos \\emph{stakeholders} se queixar que o seu\n      requisito não foi satisfeito, podemos explicar-lhe que há\n      outros mais importantes	t
112	0	O estilo Dados Partilhados	t
113	0	O estilo Dados Partilhados (\\emph{Shared data})	t
114	0	Essa vista estará sempre incompleta sem o\n      \\emph{NameNode}, visto que o \\emph{HDFS Client} precisa de\n      interagir com ele	t
115	1	O desempenho do sistema não seria alterado	t
116	1	É uma solução aceitável se pretendermos reduzir as\n      dependências entre os vários componentes do sistema	t
117	1	Permitir a existência de mais do que uma interface para a\n      camada de lógica de domínio (para providenciar, por exemplo, uma\n      interface de \\emph{web services})	t
118	2	Vistas de Instalação (\\emph{Deployment})	t
119	0	Do estilo Atribuição de Trabalho	t
120	1	As aplicações web tradicionais, os \\emph{mashups}, e as\n      \\emph{rich internet applications} (RIAs)	t
121	2	Determinante para garantir a portabilidade do sistema	t
122	1	Não permite a criação de \\emph{checkpoints}	t
123	2	Apenas a qualidade de disponibilidade	t
124	1	Permite que os \\emph{DataNodes} decidam que réplicas possuem	t
125	0	Porque esta táctica é aquela que não sobrecarrega o \\emph{NameNode}	t
126	0	Este \\emph{script} pertence ao módulo de instalação do sistema	t
127	3	Disponibilidade e segurança	t
128	2	Apenas são necessárias vistas do tipo componente-conector e do tipo afectação	t
129	0	Indica que pode haver problemas para desenvolver testes incrementais	t
130	3	É que a relação \\emph{pode usar} é de facto uma relação \\emph{usa} entre camadas	t
131	2	Usava uma vista do tipo componente-e-conector	t
132	0	É necessário recorrer a vários tipos de vistas\n      diferentes, dos tipos de vista componente-e-conector e afectação	t
133	3	O estilo Processos Comunicantes (\\emph{Communicating Processes})	t
134	1	A vista de camadas da aplicação web passa a\n      incluir uma camada que corresponde à \\emph{framework} Hadoop\n      MapReduce	t
135	2	O estilo Par-a-Par (\\emph{Peer-to-Peer})	t
136	0	Apenas afecta a camada de lógica de domínio	t
137	2	Cada componente executa numa única máquina e cada máquina\n      executa apenas um componente	t
138	3	Na correspondência entre as camadas do sistema e os\n      componentes onde elas executam	t
139	2	Uma arquitectura de Camadas, em que o acesso às fontes\n      é a responsabilidade da camada mais abaixo	t
140	3	São sempre necessárias vistas do tipo componente-e-conector e do estilo Implementação	t
141	0	Permite a criação de \\emph{checkpoints} mas tem que pedir toda a informação de uma vez só ao \\emph{NameNode}	t
142	0	As qualidades de desempenho e disponibilidade	t
143	2	Determinante para garantir a portabilidade do sistema	t
144	2	Mas também poderia usar a táctica de excepções	t
145	3	Permite que as várias réplicas sejam colocadas em diferentes \\emph{DataNodes}	t
146	3	Este \\emph{script} não pode ser considerado como um módulo do sistema pois é apenas un \\emph{script}	t
147	1	Apenas de disponibilidade	t
148	3	Sugere que as relações de usa devem ser substituídas por relações do tipo é-um	t
149	0	É que a relação \\emph{pode usar} define uma restrição para as possíveis relações \\emph{usa} entre módulos pertencentes a camadas diferentes	t
150	3	Basta mostrar, através de vistas do estilo Decomposição,\n      que existem módulos responsáveis por fazer a replicação dos\n      blocos de um ficheiro	t
151	1	Todos os tipos vista podem ser necessários	t
152	2	Podem ser necessárias vistas do tipo componente-e-conector e do estilo Instalação	t
153	0	Não faz sentido usar uma vista arquitectural para isso,\n      visto que é um pormenor de implementação do sistema que não\n      afecta as suas qualidades	t
154	1	A vista de camadas da aplicação web passa a\n      incluir uma camada que corresponde à \\emph{framework} Hadoop\n      MapReduce	t
155	0	O estilo Dados Partilhados (\\emph{Shared data})	t
156	0	O estilo Canais-e-Filtros (\\emph{Pipes-and-filters})	t
157	3	Todos os componentes podem executar em todas as máquinas	t
158	1	Pode afectar a camada de acesso a dados porque cada\n      padrão coloca requisitos diferentes na interface dessa camada	t
159	1	Uma arquitectura Cliente-Servidor, em que o \\emph{mashup}\n      é o cliente e as várias fontes são os servidores	t
160	0	Na vista de Instalação, visto que o componente\n      de apresentação passa a executar-se noutro sítio	t
161	1	Os investigadores, porque foram eles que inventaram a\n      linguagem de programação Haskell	t
162	2	O compilador e o RTS como componentes e as \\emph{boot\n         libraries} como módulo	t
163	0	Tornou a verificação de tipos muito mais simples	t
164	0	O desempenho do compilador, porque o RTS está escrito de\n      forma muito eficiente em C	t
165	1	Permitir a compilação de programas muito grandes, porque\n      cada fase pode executar de forma incremental sem ser necessário\n      ter o programa todo em memória ao mesmo tempo	t
166	2	Permite a implementação de sistemas com uma arquitectura Par-a-Par	t
167	3	O estilo Atribuição de Trabalho (\\emph{Work Assignment})	t
168	1	Facilita a adição de novos messaging patterns	t
169	0	Diminuir a latência do envio de uma mensagem quando o\n      sistema está sobrecarregado	t
170	0	O estilo Canais-e-Filtros (\\emph{Pipe-and-Filter})	t
171	2	Ser mais facilmente modificável do que o Apache	t
172	0	O código é mais fácil de desenvolver por não ser concorrente	t
173	3	O estilo Aspectos	t
174	2	Tornar o sistema mais rápido	t
175	3	O estilo Cliente-Servidor (\\emph{Client-Server})	t
177	3	Na vista de Decomposição, porque precisamos de mais\n      módulos para representar a divisão das imagens por diferentes\n      elementos da arquitectura	t
178	3	Aumentar a tolerância a faltas do sistema	t
179	2	Não existe qualquer relação entre os \\emph{tiers} e as\n      camadas, pelo que a arquitectura de camadas não é alterada	t
180	2	Com uma vista de Utilização (\\emph{Uses}), representando\n      as dependências existentes entre o \\emph{load balancer} e os\n      serviços que ele usa	t
181	1	A camada de lógica de domínio era implementada seguindo\n      a abordagem do padrão Transaction Script	t
183	0	Ter um elevado \\emph{throughput}	t
184	0	Facilitar a interacção entre componentes heterogéneos que\n      utilizam protocolos de comunicação distintos	t
185	1	A táctica \\emph{Heartbeat}	t
186	2	Um estilo qualquer do tipo de vista componente-e-conector	t
187	3	Na vista de Aspectos	t
188	1	Criar um artefacto que pode ser usado para explicar a\n      arquitectura de software do sistema aos vários \\emph{stakeholders}	t
189	0	O estilo arquitectural Par-a-Par (\\emph{Peer-to-Peer})	t
190	0	Não altera os módulos existentes no sistema, visto que\n      isso é determinado pela Decomposição do sistema, que não sofre\n      alterações	t
191	0	A camada de lógica de domínio era implementada seguindo\n      a abordagem do padrão Domain Model	t
192	3	O estilo SOA	t
193	2	Ter a capacidade de suportar muitos utilizadores em simultâneo	t
194	2	Aumentar o desempenho na interacção entre componentes do\n      sistema	t
195	3	A táctica de \\emph{Removal from Service}	t
196	0	O estilo Processos Comunicantes (\\emph{Communicating Processes})	t
197	1	Na vista de Decomposição	t
198	3	Facilitar a atribuição de trabalho aos membros da equipa\n      de desenvolvimento que vão implementar as funcionalidades do sistema	t
199	3	O estilo arquitectural Publicação-Subscrição (\\emph{Publish-subscribe})	t
200	3	Apenas introduz um novo tipo de relação entre os módulos\n      já existentes no sistema, que resultam da aplicação dos outros\n      estilos do tipo de vista módulo	t
204	0	Diminuir a latência do envio de uma mensagem quando o\n      sistema está sobrecarregado	t
205	1	O estilo Dados Partilhados (\\emph{Shared data})	t
206	1	Ter uma latência no processamento de um pedido\n      inferior à do Apache	t
207	1	Se pretendia fazer um uso mais eficiente dos recursos\n      computacionais existentes	t
209	0	O estilo Dados Partilhados (\\emph{Shared data})	t
210	1	Tornar o sistema mais portável para diferentes sistemas operativos	t
211	0	O governo do Reino Unido, porque foi quem financiou o\n      projecto	t
212	3	O compilador como componente e os outros dois como módulos	t
213	2	Tornou a transformação para a linguagem Core mais simples	t
214	2	A portabilidade, porque o RTS cria uma camada de\n      abstracção que esconde alguns detalhes do sistema operativo	t
215	3	Todas as outras opções	t
216	0	A disponibilidade aumente	t
217	1	Na vista de Utilização (\\emph{Uses}), porque cada\n      \\emph{Image Write/Retrieval Service} vai usar um \\emph{Image\n        File Storage} diferente	t
218	3	Aumentar a tolerância a faltas do sistema	t
219	3	A execução das camadas anteriormente existente é separada\n      entre os dois novos \\emph{tiers}, podendo aparecer novas camadas\n      pelo meio	t
220	3	Com uma vista de Camadas (\\emph{Layers}), em que o\n      \\emph{load balancer} cria uma camada de abstracção entre quem\n      efectua o pedido e quem providencia o serviço	t
221	2	O estilo Camadas (\\emph{Layers})	t
222	1	Permitir mudar o algoritmo de GC sem afectar o resto do sistema	t
223	2	Numa vista do estilo Generalização que inclui um módulo\n      que define a interface abstracta que todas as \\emph{rewrite\n        rules} devem implementar e do qual os módulos com as\n      \\emph{rewrite rules} são especializações	t
224	1	Um diagrama do tipo de vista módulo	t
225	0	Um diagrama do tipo de vista componente-e-conector, onde\n      se mostre o fluxo de dados entre os vários componentes do\n      compilador	t
226	0	Processar todos os pedidos de envio de mensagens com uma\n      única \\emph{thread}, para libertar os restantes cores para as\n      \\emph{user threads}	t
227	3	É mais caro, porque obriga à existência de\n      \\emph{hardware} adicional para executar o \\emph{broker}	t
228	2	Apenas vistas do tipo afectação	t
229	0	Vistas do estilo Generalização (\\emph{Generalization})	t
231	2	O estilo Par-a-par (\\emph{Peer-to-Peer})	t
232	0	O estilo Camadas (\\emph{Layers})	t
233	3	Cada \\emph{worker} processa pedidos que obtém de uma\n      \\emph{pool de pedidos} partilhada por todos os \\emph{workers}	t
234	1	Executando em paralelo cada fase do pipeline do\n      processamento de um pedido	t
235	2	Conseguisse lançar mais \\emph{threads} simultâneas do que\n      o Apache	t
236	0	São ambos módulos	t
237	2	Aumentar o desempenho e diminuir a disponibilidade	t
238	3	O estilo Processos Comunicantes (\\emph{Communicating Processes})	t
239	2	A disponibilidade dos serviços do sistema diminui	t
240	3	Eliminar a camada de serviços	t
241	2	Vistas do tipo afectação (\\emph{Allocation})	t
242	1	Uma vista do estilo Camadas (\\emph{Layers})	t
243	2	O estilo Decomposição (\\emph{Decomposition}) e o estilo\n      Utilização (\\emph{Uses})	t
244	1	Facilita a criação de relações de generalização\n      (\\emph{Generalization}) entre os módulos do sistema	t
245	0	O estilo Decomposição (\\emph{Decomposition})	t
246	0	Apenas na vista de Instalação (\\emph{Deployment})	t
247	3	Nenhuma das outras opções apresentada resolve o problema	t
248	2	O \\emph{browser} passou a ser um componente de um tipo\n      diferente	t
249	0	Um componente	t
250	3	O estilo arquitectural Publicação-Subscrição (\\emph{Publish-subscribe})	t
618	2	Rollback.	t
251	0	Processar todos os pedidos de envio de mensagens com uma\n      única \\emph{thread}, para libertar os restantes cores para as\n      \\emph{user threads}	t
252	0	Apenas vistas do tipo módulo	t
253	2	Tem menor desempenho, porque a existência do\n      \\emph{broker} introduz maior latência na comunicação	t
254	2	Vistas do estilo Decomposição (\\emph{Decomposition})	t
256	3	O estilo Processos Comunicantes (\\emph{Communicating Processes})	t
257	1	O estilo Utilização (\\emph{Uses})	t
258	3	Cada \\emph{worker} processa pedidos que obtém de uma\n      \\emph{pool de pedidos} partilhada por todos os \\emph{workers}	t
259	0	Intercalando as várias fases do processamento de cada\n      pedido num processo sequencial	t
260	3	Conseguisse reduzir a quantidade de memória necessária\n      para cada ligação	t
261	1	O estilo Cliente-Servidor (\\emph{Client-Server})	t
262	2	Aumentar o desempenho dos programas que são compilados\n      pelo GHC	t
263	0	Não se manifesta, visto que isso corresponde apenas a\n      mais uma extensão à linguagem Haskell que o compilador tem que\n      processar	t
264	1	Um diagrama do tipo de vista módulo	t
265	0	Um diagrama do tipo de vista componente-e-conector, onde\n      se mostre o fluxo de dados entre os vários componentes do\n      compilador	t
266	0	São ambos módulos	t
267	3	Aumentar a escalabilidade e a disponibilidade	t
268	1	O estilo Cliente-Servidor (\\emph{Client-Server})	t
269	1	A disponibilidade dos dados do sistema diminui	t
270	0	Uma vista do estilo \\emph{Data Model}	t
271	0	Passar a usar o padrão Transaction Script na camada de lógica de domínio	t
272	0	Vistas do tipo módulo	t
273	2	O estilo Decomposição (\\emph{Decomposition}) e o estilo\n      Utilização (\\emph{Uses})	t
274	2	Isola em novos módulos responsabilidades que se\n      encontravam espalhadas por vários módulos do sistema	t
275	3	O estilo Processos Comunicantes (\\emph{Communicating Processes})	t
276	3	O estilo arquitectural Publicação-Subscrição (\\emph{Publish-subscribe})	t
277	1	Apenas na vista de Decomposição (\\emph{Decomposition})	t
278	3	Nenhuma das outras opções apresentada resolve o problema	t
279	0	Alterou-se a camada da lógica de apresentação e a forma\n      como ela se relaciona com a camada de baixo	t
280	3	Uma camada	t
281	1	Processos-comunicantes	t
282	2	Redundância Passiva	t
283	0	Usabilidade e desempenho	t
284	0	Desempenho, disponibilidade e usabilidade	t
285	1	Repositório e Arquitetura Orientada aos Serviços	t
286	2	Guardando a informação junto do cliente usando \\emph{cookies}	t
287	3	Pode ter de adicionar mais servidores ao \\emph{cluster}	t
288	1	Aumentar os Recursos	t
289	0	Encriptação dos Dados	t
290	0	Introduzir Concorrência	t
291	2	Criação e destruição dinâmica	t
292	0	Poder tirar partido da concorrência	t
293	3	Pode variar durante a execução de cada instância do \\ch{}	t
294	2	A tática de Manter Modelo de Sistema	t
295	3	Às limitações de acesso concorrente a ficheiros 	t
296	1	Aumentar a qualidade da facilidade de modificação pois as aplicações externas deixaram de usar as funcionalidade de administração	t
297	3	Um objeto estruturado em árvore para facilitar o processamento de cada um dos filtros	t
298	3	A solução proposta assegura a entrega FIFO de mensagens pois em cada \\emph{queue} apenas são colocadas mensagens com intervalos de tempo suficientemente espaçados	t
299	2	Criação e Destruição Dinâmica	t
300	2	Pois cada mensagem é guardada como um ficheiro num diretório	t
310	0	Todas as funcionalidades podem ser transacionais	t
311	0	Afetam módulos ao sistema de ficheiros	t
312	3	Facilidade de Modificação e Desempenho	t
313	2	Fiabilidade, desempenho e usabilidade	t
314	2	Cliente-Servidor, Repositório, Processos-Comunicantes e Arquitetura Orientada aos Serviços	t
315	3	Através de uma tática de Transações	t
316	0	Pode deixar de aceitar leituras	t
317	1	Aumentar os Recursos	t
318	3	A gestão transacional é da inteira responsabilidade do repositório	t
319	3	Todas as opções anteriores	t
320	3	Autorizar Atores	t
321	2	Limitar a Exposição	t
322	0	Publicação-subscrição	t
323	0	Poder tirar partido da concorrência	t
324	0	É sempre o mesmo para todas as instâncias do \\ch{}	t
325	1	A tática de Manter Modelo de Tarefa	t
326	1	Resistir ao Ataque	t
327	1	Deve ser sempre feito até ao nível físico	t
328	2	Repositório	t
329	0	Manter Múltiplas Cópias de Computação	t
330	1	Usabilidade	t
331	0	Apenas dizem respeito aos \\emph{web designers}	t
332	3	Apenas a propriedade transacional do isolamento é assegurada	t
333	2	A ser uma solução específica de Python	t
334	2	Aumentar a qualidade da interoperabilidade pois aplicações externas podem passar a ler e enviar mensagens para o \\gm{}	t
335	3	Um objeto estruturado em árvore para facilitar o processamento de cada um dos filtros	t
336	0	A solução proposta assegura efetivamente a entrega FIFO de mensagens e os vários processos não necessitam de se sincronizar	t
337	1	Par-a-Par	t
338	3	Todas as opções anteriores	t
339	3	Necessitam que seja suportada Ligação Diferida (\\emph{Defer Binding}) dinâmica dos componentes, publicadores e subscritores, ao conetor para serem totalmente independentes entre si	t
340	3	Às táticas de Redundância Passiva e Redundância Ativa	t
341	2	Fiabilidade	t
342	1	Processos-Comunicantes	t
343	2	Desempenho	t
344	1	Guardar toda a informação de forma estática	t
348	2	Aumentar a Eficiência dos Recursos	t
349	0	Segurança e Mobilidade	t
350	3	Manter Múltiplas Cópias de Computação	t
351	2	Utilizar técnicas de aprendizagem	t
352	0	Repositório	t
353	3	Tática de Manter Múltiplas Cópias de Dados	t
354	1	Desempenho e Usabilidade	t
355	2	Aplicações externas podem passar a ler e enviar mensagens para o \\gm{}	t
356	0	Processos-Comunicantes	t
357	2	Aspetos	t
358	3	A entrega FIFO de mensagens	t
359	2	Fiabilidade e Facilidade de Modificação	t
360	3	Módulo mas apenas para o estilo arquitetural Decomposição	t
361	2	Facilidade de Desenvolvimento e Desempenho	t
362	1	Aspetos	t
363	2	Modelo de Utilizador e Modelo de Sistema	t
364	1	É necessário fazer sempre uma pesquisa na base de dados antes de aceder a um objeto	t
365	0	Tratamento de Exceções	t
366	0	O módulo Modelo usa o módulo Observador	t
367	3	Sempre que há vistas de Utilização tem que haver pelo menos uma vista de camadas	t
368	2	Pode possuir vários estilos arquiteturais, mas apenas se forem do mesmo tipo vista	t
369	0	Deve ser aplicado apenas após a vista de decomposição estar terminada	t
370	3	A arquitetura módulo tem que ter três Camadas	t
371	0	Ter apenas um servidor para escrita	t
372	0	Redundância Passiva e Aumento da Eficiência dos Recursos	t
373	2	Pelo repositório	t
374	2	Funcionamento Degradado	t
375	3	Manter Múltiplas Cópias de Dados	t
376	3	Modelo de Sistema	t
377	1	É necessário fazer sempre uma pesquisa na base de dados antes de aceder a um objeto	t
378	3	Segurança	t
379	0	Repositório e Processos-Comunicantes	t
380	3	Modelo de Utilizador	t
381	1	Aumentar o Conjunto de Competências (\\emph{Increase Competence Set})	t
382	2	O módulo Modelo usa o módulo Observador se forem passados dados complexos na notificação	t
383	0	Primeiro devem ser desenhadas vistas de Utilização e de seguida de Camadas	t
384	1	Aplicações externas podem passar a fazer administração de listas de correio eletrónico residentes no GNU Mailman	t
385	0	Processos-Comunicantes	t
386	0	Modelo de Dados	t
387	3	A entrega FIFO de mensagens	t
388	1	Segurança e Facilidade de Teste	t
389	1	Componente-e-Conetor	t
390	0	Apenas pode possuir um único estilo arquitetural	t
391	0	Deve ser aplicado apenas após a vista de decomposição estar terminada	t
392	0	Segurança e Mobilidade	t
393	2	Introdução de Concorrência	t
394	2	Utilizar técnicas de aprendizagem	t
395	3	Cliente-servidor	t
396	3	Tática de Manter Múltiplas Cópias de Dados	t
397	1	Desempenho e Usabilidade	t
398	3	Interoperabilidade	t
399	0	Decomposição	t
400	3	A arquitetura módulo tem que ter três Camadas	t
407	3	Durante cerca de 30 segundos	t
408	1	Facilidade de utilização	t
409	0	Segurança e Mobilidade	t
410	0	Desempenho e Segurança	t
411	2	Disponibilidade	t
412	0	Desempenho e Facilidade de Utilização	t
413	3	Apenas um deles faz uso de um serviço proprietário	t
414	2	Segurança e Disponibilidade	t
415	3	Modelo de dados	t
416	1	Replicação ativa	t
417	3	Nenhuma das anteriores	t
418	3	Facilidade de utilização	t
419	2	Pois é menos eficiente guardar as mensagens numa base de dados relacional	t
420	2	Criação e Destruição Dinâmica	t
421	1	É composta de unidades de código, elementos de execução, hardware e pessoas, assim como os relacionamentos entre eles	t
422	2	As vistas descrevem diferentes aspetos do sistema	t
423	0	Nunca é uma decisão arquitetural pois é de demasiado baixo nível	t
424	0	Criar uma decomposição em que há um módulo correspondente ao Windows OS e outro ao Mac OS X, em que cada um destes módulos encapsula o comportamento dos respetivos sistemas operativos	t
425	1	Devemos usar uma arquitetura de camadas com uma camada de acesso a dados	t
426	2	O estilo Utilização	t
427	3	Um componente pode conter código de diversos módulos	t
428	1	Permite desenvolvimento independente com reduzida comunicação entre os membros da equipa	t
429	0	O padrão \\emph{Transaction Script} para ajudar a demarcar as transações de negócio	t
430	0	Para impedir os dados de ficarem incoerentes quando há múltiplos acessos dentro da mesma transação de negócio à mesma entidade	t
431	0	Depends mostly on the system's functional requirements.	t
432	3	Is focused on the details of the architecture.	t
433	2	Suffered from some level of featuritis, but it allowed to have a pilot from which the team learned.	t
434	2	Is a set of guidelines that the developing team should\n  follow in the development of the system.	t
435	3	A component may contain code from different modules.	t
436	0	The current location is the source of the stimulus.	t
437	1	An Encrypt Data tactic for the Security quality.	t
438	3	The source of stimulus for scenarios of the Security quality.	t
439	3	Schedule resources tactic.	t
440	3	The response is defer binding.	t
441	2	Reduce overhead.	t
442	0	The most important requirements (both functional and\n  qualities) that the system must achieve.	t
443	0	The Decomposition style.	t
444	0	The Decomposition style.	t
445	1	Use a classic 3-layer architecture with the following\n  layers, from top to bottom: Presentation, Domain Logic, and Data\n  Access.	t
446	1	It represents a relation between a connector's role and a port of one of its internal components.	t
447	1	It is not necessary to use a ``Data Access'' layer because the information is simple.	t
448	2	Peer-to-peer in both cases.	t
449	0	Peer-to-Peer.	t
450	1	Install view.	t
451	0	The Requirements function is part of the Design module.	t
452	3	A data model view and a component-and-connector view using a shared-data style.	t
453	2	Shared-data style.	t
454	2	A domain layer is absent from the architecture.	t
455	3	The deployment options have a large impact on the work assignment view.	t
456	0	Passive redundancy for availability, because it is possible to recover from the commands log.	t
457	1	The server propagates local commands and cursor movements to the clients, and keeps the snapshots for the initialization of new clients.	t
458	3	Performance.	t
459	3	The Table Module pattern to hide the details of the table\n  structure for the Presentation layer.	t
460	3	The Service Layer pattern.	t
461	2	The Data Access layer to be able to access the data that it\n  needs in each service.	t
462	1	The Table Module pattern.	t
463	2	Implementation view.	t
464	1	The Requirements function is not part of the RulesSet module.	t
465	0	A Condition Monitoring tactic for the Availability quality.	t
466	0	The source of stimulus for scenarios of the Availability quality.	t
467	3	Schedule resources tactic.	t
468	2	The environment is design time.	t
469	0	Schedule resources.	t
470	3	Use two deployment views, each one allocating different\n  components to different machines with different operating systems.	t
471	2	It represents a relation between a component's port and a port of one of its internal components.	t
472	0	We have to use a Repository component-and-connector style.	t
473	3	Peer-to-peer in the first case and Client-Server in the second.	t
474	1	Depends more on the architect's experience than on anything\n    else.	t
475	2	Is focused on creating common generalizations of several systems.	t
476	0	A module may contain code from different components.	t
477	2	The Google Map is the artefact.	t
478	3	Publish-Subscribe.	t
479	2	A service-oriented architecture view.	t
480	3	Publish-subscribe style.	t
481	2	A domain layer is absent from the architecture.	t
482	1	It is necessary to design a single deployment view that contains all the variation, because only the hardware capabilities change.	t
483	2	Increase resource efficiency tactic for performance, because it reduces the need of upfront calculus/computation on new clients.	t
484	1	The server propagates local commands and cursor movements to the clients, and keeps the snapshots for the initialization of new clients.	t
485	0	Testability.	t
486	0	Suffered from featuritis, because the architect decided to delay the difficult parts for latter in the development.	t
487	3	Is a set of diagrams that show the runtime elements of the\n  system and their relationships.	t
488	2	The stakeholders that drive the development of the system.	t
489	0	The Decomposition style.	t
490	3	The Work-assignment style.	t
491	0	To analyse the source code of the system to see how it is built	t
492	0	The architecture of a system cannot change	t
493	2	Testability and maintainability always conflict with performance	t
494	2	Have at least a view for each viewtype	t
495	3	An allocation element	t
496	3	Describing the system's features by way of different\n  usage scenarios for it, in which users play the role of actors	t
497	1	Heartbeat requires the availability monitor to confirm the reception of the signal	t
498	3	It is necessary to use the encrypt data tactic to encrypt the information on the client web browser, before it is send to the web server	t
499	0	Maintain task model	t
500	3	A scenario for usability associated with a support user initiative tactic	t
507	3	It is necessary to change the component-and-connector view to show the communicating processes	t
508	1	They have to process very large amounts of data in each request	t
509	1	The Pipes-and-filters style	t
510	0	Analysing the performance of the system	t
511	0	A generalisation architectural style	t
512	0	Subscribes to the same kind of events that the \\textsc{sub2} port	t
513	2	The deployment architectural style	t
514	2	Active redundancy tactic	t
515	3	Interoperability, because the REST API allow the exchange of information with external applications	t
516	3	Testability tactic	t
517	1	Availability, because of the interprocess communication	t
518	3	A communication processes style	t
519	0	Requires a more skilled team, because the object-oriented\n  paradigm is more complex than the procedural paradigm	t
520	3	The Data Mapper pattern	t
521	1	Ping-and-echo tactic	t
522	2	Requires that we write more code when we have only a\n  couple of simple use cases	t
523	0	The Service Layer pattern	t
524	0	Describing what are the qualities that the system should possess	t
525	1	Heartbeat requires the availability monitor to confirm the reception of the signal	t
526	2	It is necessary to use the encrypt data tactic to encrypt the information with a password that is in a configuration file	t
527	3	Aggregate	t
529	0	Multiple copies of computation	t
530	0	Decomposition view	t
531	2	To analyse the implemented set of features to see what is it\n  that the system actually does	t
532	0	The architecture of a system cannot change	t
533	3	None of the above	t
534	2	Have at least a view for each viewtype	t
535	3	When it is not possible to satisfy all of the requirements\n    optimally, we should be aware of their relative importance so that\n    we may find a solution that corresponds to a satisfactory trade-off	t
536	1	A component	t
537	3	Layers to create a virtual machine that hides the internals of the application from its users interface code to allow the support of different user interfaces	t
538	3	Availability because if a module fails the failure easily propagates to all the other modules	t
539	2	Security, because it describes a "queue overflow" attack	t
540	2	Increase resources tactic	t
541	1	Availability, because of the interprocess communication	t
542	2	A Communicating processes view	t
543	0	A publish-subscribe style	t
544	0	It is enough to show the load-balancer between the web clients machines and the servers machines using a deployment view	t
545	1	They have to process very large amounts of data in each request	t
546	2	The Publish-subscribe style	t
547	3	Analysing the system's portability and reusability	t
548	1	An aspects architectural style	t
549	0	Subscribes to the same kind of events that the \\textsc{sub2} port	t
550	0	The communicating processes architectural style	t
551	0	Featuritis may result from a requirement of the technical context.	t
552	3	To break such misunderstanding and mistrust the architecture has to make explicit the stakeholders needs.	t
553	2	Frank Buschmann is referring that the consequences of a flexible system is poor performance and bad security.	t
554	2	Performance uncertainty about the system should be dealt with more flexibility.	t
555	3	The system performance quality has impact on the performance of the execution of tests.	t
556	0	Performance should be the last quality to be addressed because it is a local property of an architecture.	t
557	1	Is an architecture that demonstrates that the system will support the qualities raised by the stakeholders.	t
558	3	Professional and Technical Contexts.	t
559	3	The book definition is not correct, as pointed out in the errata.	t
560	3	An external element.	t
561	2	Both, a component and a module, depending on the perspective.	t
562	0	A module view.	t
563	0	Modifiability.	t
564	0	Modifiability.	t
565	1	This is wrong because you can easily change these decisions during the project lifetime.	t
566	1	This shared understanding is necessary to define precise requirements.	t
567	1	Are focused on the project context of the architecture.	t
568	2	Is focused on creating common generalizations of several systems.	t
569	0	Make a business case for the system.	t
570	1	Tries to guarantee that the final system will have the qualities aimed by the architecture.	t
571	2	Featuritis may be a result of a requirement of the business context.	t
572	1	There is no system which can have good performance and be easily maintainable.	t
573	2	The book definition also considers that the properties are externally visible because by definition an architectural property is externally visible.	t
574	1	This shared understanding is necessary to define precise requirements.	t
575	0	Make a business case for the system.	t
576	0	This shared understanding is what distinguishes architecture from design.	t
577	0	Make a business case for the system.	t
578	2	We have to distinguish architectural performance from opportunistic performance.	t
579	2	The book definition also considers that the properties are externally visible because by definition an architectural property is externally visible.	t
580	3	Featuritis requires the modifiability quality to allow a the system to be easily modified to support new features.	t
581	1	Frank Buschmann are considering performance and security as the most important qualities.	t
582	2	The lack of functionality results in a system without business value, therefore a rich set of features should be implemented first.	t
583	0	A component.	t
584	0	This is right because if you don't the project fails.	t
585	1	Is focused on the technology context of the architecture.	t
586	0	A component.	t
587	3	This is wrong because it is against agile way of thinking the software development process.	t
588	2	Is focused on creating common generalizations of several systems.	t
589	2	The lack of functionality results in a system without business value, therefore a rich set of features should be implemented first.	t
590	3	Frank Buschmann is not considering modifiability as an important quality	t
591	2	The cycle Frank Buschmann refers to allows the clarification of requirements.	t
592	1	Is an architecture that demonstrates that the system will support the qualities raised by the stakeholders.	t
593	2	Both, a component and a module, depending on the perspective.	t
594	1	Usability.	t
595	0	Are unable to understand the technology capabilities.	t
596	0	Are unable to understand the technology capabilities.	t
597	0	A component.	t
598	2	The cycle Frank Buschmann refers to allows the clarification of requirements.	t
599	2	Security.	t
600	3	Is an object-oriented framework, which integrates functional and non-functional requirements of the system.	t
606	0	Tries to guarantee that the final system will have the qualities required by stakeholders.	t
607	3	Availability.	t
608	2	Business and Project Contexts.	t
609	2	An allocation view.	t
610	3	A solution to this problem is to reduce the level of flexibility of a system.	t
611	2	Reliability.	t
612	1	The response can be omitted.	t
613	2	Is an architectural pattern.	t
614	1	Availability.	t
615	0	Implements a tactic to recover from faults.	t
616	0	Prevent a fault in hardware.	t
617	3	This situation corresponds to the use of the limit exposure security tactic.	t
620	3	The quality addressed is performance and a maintain multiple copies of data design tactic is required to solve the problem.	t
621	2	The quality addressed is availability and an active redundancy design tactic is required to solve the problem.	t
622	0	A Maintain Multiple Copies of Computation design tactic in Carbon.	t
623	3	Separate entities.	t
624	1	Detect service denial.	t
625	2	Detect and Recover.	t
626	0	Limit access, to restrict the access to the database system.	t
627	2	Increase resource efficiency.	t
628	3	Manage sample rate.	t
629	2	Increase resource efficiency tactic.	t
630	3	Maintain task model tactic.	t
631	0	Performance.	t
632	0	The stimulus is a system input.	t
633	2	Is an architectural pattern.	t
634	2	Interoperability.	t
635	3	Can be used in a non-concurrent system.	t
636	3	Detect a fault.	t
637	1	This situation corresponds to the use of the removal from service availability tactic.	t
638	3	Exception prevention.	t
639	0	Is an aggregate design tactic.	t
640	3	The quality addressed is performance and a maintain multiple copies of data design tactic is required to solve the problem.	t
641	1	The quality addressed is modifiability.	t
642	2	A Maintain Multiple Copies of Data design tactic in Carbon.	t
643	0	Detect intrusion.	t
644	1	Detect service denial.	t
645	0	Detect and Resist.	t
646	0	Limit access, to restrict the access to the database system.	t
647	3	Maintain multiple copies of data.	t
648	1	Introduce concurrency.	t
649	1	Introduce concurrence tactic.	t
650	0	Maintain user model tactic.	t
651	1	The response can be omitted.	t
652	2	Is an architectural pattern.	t
653	0	Performance.	t
654	0	Limit access.	t
655	1	Prevent a fault in software.	t
656	2	This situation corresponds to the use of the limit access security tactic.	t
657	3	Exception prevention.	t
658	1	The quality addressed is performance.	t
659	0	The quality addressed is availability.	t
660	0	A Maintain Multiple Copies of Computation design tactic in Carbon.	t
661	2	Reliability.	t
662	0	Detect intrusion.	t
663	3	Is a design tactic for a scenario where the source of stimulus is the graph owner user.	t
664	2	Can be used as the source of a stimulus in a scenario.	t
665	3	Detect message delay.	t
666	1	Detect and React.	t
667	3	Change default settings, because default passwords are sensitive.	t
668	3	Manage sample rate.	t
669	2	Increase resource efficiency tactic.	t
670	2	Increase resource efficiency tactic.	t
671	0	Performance.	t
672	3	The stimulus and the response should be always present.	t
673	2	Is an architectural pattern.	t
674	2	Interoperability.	t
675	3	Can be used in a non-concurrent system.	t
676	0	Prevent a fault in hardware.	t
677	1	This situation corresponds to the use of the removal from service availability tactic.	t
678	3	Exception prevention.	t
679	3	Is a design tactic for a scenario where the source of stimulus is the graph owner user.	t
680	3	The quality addressed is performance and a maintain multiple copies of data design tactic is required to solve the problem.	t
681	2	The quality addressed is availability and an active redundancy design tactic is required to solve the problem.	t
682	0	A Maintain Multiple Copies of Computation design tactic in Carbon.	t
683	0	Detect intrusion.	t
684	0	Detect intrusion.	t
685	1	Detect and React.	t
686	1	Limit exposure, locate the database system in the intranet.	t
687	1	Increase resources.	t
688	2	Reduce overhead.	t
689	0	Maintain multiple copies of data tactic.	t
690	1	Introduce concurrence tactic.	t
691	2	Reliability.	t
692	1	May be associated to other tactics to deal with a single stimulus.	t
693	2	Interoperability.	t
694	1	Implements a tactic to prevent faults.	t
695	0	This situation corresponds to the use of the degradation availability tactic.	t
696	0	Ignore faulty behavior.	t
697	3	Is a design tactic for a scenario where the source of stimulus is the graph owner user.	t
698	2	The quality addressed is availability and a voting design tactic is required to solve the problem.	t
699	0	The quality addressed is availability.	t
700	3	A Maintain Multiple Copies of Data design tactic in the WebApp such that reads do not compete with writes.	t
705	2	Increase resource efficiency.	t
706	0	Increase resources.	t
707	2	Prevent a fault in a process.	t
708	3	The stimulus and the response should be always present.	t
709	2	Increase resource efficiency tactic.	t
710	3	Maintain task model tactic.	t
711	0	Performance.	t
712	0	The stimulus is a system input.	t
713	2	Is an architectural pattern.	t
714	2	Interoperability.	t
715	3	Can be used in a non-concurrent system.	t
716	3	Detect a fault.	t
717	1	This situation corresponds to the use of the removal from service availability tactic.	t
718	3	Exception prevention.	t
719	0	Is an aggregate design tactic.	t
720	3	The quality addressed is performance and a maintain multiple copies of data design tactic is required to solve the problem.	t
721	1	The quality addressed is modifiability.	t
821	2	Availability.	t
722	2	A Maintain Multiple Copies of Data design tactic in Carbon.	t
723	0	Detect intrusion.	t
724	1	Detect service denial.	t
725	0	Detect and Resist.	t
726	0	Limit access, to restrict the access to the database system.	t
727	3	Maintain multiple copies of data.	t
728	1	Introduce concurrency.	t
729	1	Introduce concurrence tactic.	t
731	1	Availability.	t
732	2	The artefact can be outside the system.	t
733	0	Is a mediator, an application of the mediator pattern, between the input stimulus and the output response.	t
734	0	Implements a tactic to recover from faults.	t
735	1	Prevent a fault in software.	t
736	2	This situation corresponds to the use of the limit access security tactic.	t
737	3	Change default settings, because default passwords are sensitive.	t
738	1	Introduce concurrence tactic.	t
739	0	Ignore faulty behavior.	t
740	0	Is an aggregate design tactic.	t
741	2	The quality addressed is availability and a voting design tactic is required to solve the problem.	t
742	0	The quality addressed is availability.	t
743	3	A Maintain Multiple Copies of Data design tactic in the WebApp such that reads do not compete with writes.	t
744	2	Limit exposure.	t
745	3	Detect message delay.	t
746	1	Detect and React.	t
747	3	Testability.	t
748	3	Maintain multiple copies of data.	t
749	2	Reduce overhead.	t
750	2	Increase resource efficiency tactic.	t
751	0	Performance.	t
752	3	The stimulus and the response should be always present.	t
753	2	Is an architectural pattern.	t
754	2	Interoperability.	t
755	3	Can be used in a non-concurrent system.	t
756	0	Prevent a fault in hardware.	t
757	1	This situation corresponds to the use of the removal from service availability tactic.	t
758	3	Exception prevention.	t
759	3	Is a design tactic for a scenario where the source of stimulus is the graph owner user.	t
760	3	The quality addressed is performance and a maintain multiple copies of data design tactic is required to solve the problem.	t
761	2	The quality addressed is availability and an active redundancy design tactic is required to solve the problem.	t
762	0	A Maintain Multiple Copies of Computation design tactic in Carbon.	t
763	0	Detect intrusion.	t
764	0	Detect intrusion.	t
765	1	Detect and React.	t
766	1	Limit exposure, locate the database system in the intranet.	t
767	1	Increase resources.	t
768	2	Reduce overhead.	t
769	0	Maintain multiple copies of data tactic.	t
770	1	Introduce concurrence tactic.	t
771	2	Reliability.	t
772	1	The response can be omitted.	t
773	2	Interoperability.	t
774	1	Implements a tactic to prevent faults.	t
775	0	Prevent a fault in hardware.	t
776	0	Maintain multiple copies of data tactic.	t
777	3	Exception prevention.	t
778	2	Is a design tactic for a scenario where the source of stimulus are technical users.	t
779	0	The quality addressed is availability.	t
780	3	A Maintain Multiple Copies of Data design tactic in the WebApp such that reads do not compete with writes.	t
781	2	Limit exposure.	t
782	0	Detect intrusion.	t
783	3	Resist and React.	t
784	1	Limit exposure, locate the database system in the intranet.	t
785	2	Increase resource efficiency.	t
786	0	Increase resources.	t
787	2	The quality addressed is availability and an active redundancy design tactic is required to solve the problem.	t
788	3	Is a system decomposition.	t
789	2	This situation corresponds to the use of the limit access security tactic.	t
790	3	Maintain task model tactic.	t
791	0	Incorporate in the organization's core business the goals of a software house.	t
792	0	Business scenario.	t
793	2	Modifiability scenario.	t
794	2	Contains the architectural tactics associated with architecturally significant requirements.	t
795	3	Is an iterative process where architectural designs are proposed as hypothesis and tested.	t
796	3	Any ASR that has a high business value cannot have a low architecture impact because it needs to be supported by the architecture.	t
797	1	This ASR should be supported by the architecture because of its high impact.	t
798	3	Results from the application of several ADD iterations.	t
799	0	Maintain system model tactic.	t
800	3	Usability.	t
806	0	Change default settings.	t
807	3	Follows a bottom-up decomposition process of the system.	t
808	1	Results in a decomposition where each module may be implemented by a single developer.	t
809	1	Do in-house development.	t
810	2	Is a top-down process where a initial decomposition is chosen and it is successively decomposed without changing the initial decisions.	t
811	0	Testability.	t
812	0	Interoperability.	t
813	1	Results in a decomposition where each module may be implemented by a single developer.	t
814	0	Testability.	t
815	3	Usability.	t
816	2	Integrate the development of the software system with the organization's business goals.	t
817	2	Allows to increase the overall calendar development time of the project because there is a communication overhead with external teams.	t
818	3	Is an iterative process where architectural designs are proposed as hypothesis and tested.	t
819	2	Modifiability scenario.	t
820	1	This ASR requires a specific architectural design because it profoundly affects the architecture.	t
822	1	Limit access.	t
823	0	Results in a similar decomposition as if the criteria was not applied but some modules are identified to be outsourced.	t
824	0	Performance.	t
825	0	Change default settings.	t
826	2	Allows to increase the overall calendar development time of the project because there is a communication overhead with external teams.	t
827	2	The cost of meeting the ASR after development starts is too high.	t
828	3	Usability scenario.	t
829	1	Cannot be defined for the security quality.	t
830	2	The architect have to decide on the cost/benefit of designing an architecture that supports this ASR.	t
831	0	Performance.	t
832	0	Performance.	t
833	1	Is applied at the begin of the architectural design process but may be necessary to redo it later.	t
834	0	Is applied only once at the beginning of the architectural design process.	t
835	3	Usability.	t
836	2	Contains the architectural tactics associated with architecturally significant requirements.	t
837	2	Availability.	t
838	3	The architect should support this ASR after designing an architecture that supports all the ASRs with high business value.	t
839	2	Modifiability scenario.	t
840	1	Results from a single availability scenario.	t
841	2	Maintain multiple copies of data tactic.	t
842	1	Persistence.	t
843	0	Is applied only once at the beginning of the architectural design process.	t
844	0	Maintain system model tactic.	t
845	0	Is applied only once at the beginning of the architectural design process.	t
846	2	Retry.	t
847	2	Results from the application of a single ADD iteration.	t
848	3	Usability scenario.	t
849	1	Improves testability because if a module uses another then it is only possible to test them together.	t
850	2	The invoked function may not have any output parameter.	t
851	0	Applying the generalization style to identify child modules of a module in the loop chain.	t
852	0	By changing the commonalities that are in the children.	t
853	1	This means that this architectural style emphasizes the quality of performance.	t
854	2	She should define finer-grained modules where she splits the unassigned responsibility.	t
855	3	It is necessary to design a view of the Data Model architectural style at the physical level to deal with performance issues of the access to data.	t
856	1	Is an extension of a view of the Data Model style.	t
857	0	Limit exposure.	t
858	0	Sanity checking.	t
859	2	Increase resource efficiency.	t
860	0	Multiple copies of computation and Passive redundancy tactics.	t
861	3	A module interface may be attached to several component ports.	t
862	2	The attachment is a runtime relation which dynamically manages type compliance.	t
863	3	A module contains the code that can execute in several components and a component can execute the code of several modules.	t
864	1	She delays the complete specification of the connector for development time to have human resources to prototype and measure different implementations.	t
865	3	The communication between data accessors does not occur through the repository.	t
866	3	It implements a maintain multiple copies of data tactic.	t
867	2	Servers can also be clients.	t
868	2	She can use the request/reply connector but the server should not return results to the client.	t
869	0	Applying the generalization style to identify child modules of a module in the loop chain.	t
870	3	This means that in this software system it is not possible to modularize each responsibility in a cohesive module.	t
871	2	Authorize actors.	t
872	2	The attachment is a runtime relation which dynamically manages type compliance.	t
873	3	It implements a maintain multiple copies of data tactic.	t
874	2	Identifying which of the \\emph{uses} dependencies are actually generalization dependencies.	t
875	1	She should try to use a view of the Aspects style, assign this responsibility to a module and bind it to the modules affected by it.	t
876	2	Authorize actors.	t
877	1	The type of a component does not depend on the type of its ports.	t
878	0	It implements a maintain multiple copies of computation tactic.	t
879	0	By changing the commonalities that are in the children.	t
880	0	It is necessary design a CRUD matrix to show the dependencies between the persistent information.	t
881	2	Increase resource efficiency.	t
882	2	She does not want to clutter the view with details and trusts the development team to implement the connector according to the required quality level.	t
883	3	She can define a variant of this style with asynchronous communication by allowing the server to have the initiative to initiate the interaction.	t
884	1	She delays the complete specification of the connector for development time to have human resources to prototype and measure different implementations.	t
885	2	She can use the request/reply connector but the server should not return results to the client.	t
886	0	By changing the commonalities that are in the children.	t
887	0	Schedule resources.	t
888	1	It is enough to design a view of the Data Model architectural style at the conceptual level because Facebook information has a very simple structure.	t
889	0	Allows the analysis of the impact of changes because if a module uses another it will necessarily have to change whenever the used module changes.	t
890	3	Describes the structure of the data used by the system.	t
891	2	Passive redundancy tactic.	t
892	2	A module interface cannot be replicated but component ports can.	t
893	3	Servers can send a heartbeat to clients.	t
894	2	Passive redundancy tactic.	t
895	1	A module interface can be replicated but component ports cannot.	t
896	2	Allows to avoid redundancy and inconsistency.	t
897	1	It is possible to have redundant servers.	t
898	0	Allows the analysis of the impact of changes because if a module uses another it will necessarily have to change whenever the used module changes.	t
899	0	A module contains the code that executes in a single component and a component executes the code of a single module.	t
900	0	Sanity checking.	t
901	2	The integration of a new data accessor only implies changes in the data accessors that access the same type of data.	t
902	2	The invoked function may not have any output parameter.	t
903	3	This means that the modules inside a layer are likely to be ported to a new application together.	t
904	1	This means that this architectural style emphasizes the quality of performance.	t
905	2	The integration of a new data accessor only implies changes in the data accessors that access the same type of data.	t
906	0	A module contains the code that executes in a single component and a component executes the code of a single module.	t
907	0	Sanity checking.	t
908	1	The invoked function may not have any input parameter.	t
909	0	The file transfers follows the same path of nodes used to identify where the file was located.	t
910	3	The behavior described in the sentence can be represented in a view where the tier architectural style is used.	t
911	2	Is an extension of the Client-Server architectural style.	t
912	2	The events should be delivered by the same order they are sent.	t
913	3	It decouples applications developed for different organizations.	t
914	0	It encapsulates applications through well-defined interfaces.	t
915	1	Is a Peer-to-Peer style because consumers and providers are peers.	t
916	3	And filters do not have to agree on the data formats.	t
917	3	Memcached is not a module.	t
918	3	Buffering is not a module.	t
919	2	In the view \\texttt{Receiver} component's \\texttt{client} port is not associated with an external port.	t
920	0	There is a message passing connector between the \\texttt{read} port of \\texttt{Queue} and the \\texttt{data points access} port of \\texttt{WebApp}.	t
921	0	A deployment view.	t
922	0	Deployment style.	t
923	1	Implementation style.	t
924	1	A deployment view.	t
925	1	The layered view to accommodate a new layer for which kind of catalog, which other layers may use.	t
926	2	A change of the decomposition view to include the responsibilities associated with the access control.	t
927	0	The decomposition view to include a module for the synchronization responsibilities.	t
928	1	The uses view to show the coupling between the different platforms.	t
929	2	If a peer providing a file crashes it is necessary to restart to download the file from the begin.	t
930	1	Is a Peer-to-Peer style because consumers and providers are peers.	t
931	2	In the view \\texttt{Receiver} component's \\texttt{client} port is not associated with an external port.	t
932	1	A work assignment view.	t
933	0	The layered view to support a new specific layer for the customization of the catalog.	t
934	0	A deployment view.	t
935	0	The file transfers follows the same path of nodes used to identify where the file was located.	t
936	2	The data model view in order to define entities for each kind of catalog.	t
937	2	Can use a Service Registry to improve transparency of location of service providers.	t
938	3	In the view the \\texttt{produce} port of a \\texttt{Receiver} component is attached to the \\texttt{consume} port of a \\texttt{Writer} component.	t
939	1	The behavior described in the sentence can be represented in a view where the dynamic reconfiguration architectural style is used.	t
940	2	It improves transparency of location of service providers.	t
941	0	There is a message passing connector between the \\texttt{read} port of \\texttt{Queue} and the \\texttt{data points access} port of \\texttt{WebApp}.	t
942	0	Deployment style.	t
943	1	A change of the layered view to support different presentations, one for each friend.	t
944	0	Deployment style.	t
945	3	A new aspect view to include the responsibilities associated with the access control.	t
946	2	When a peer receives a connection it sends all its files to the peer connecting it.	t
947	2	It improves transparency of location of service providers.	t
948	3	The \\texttt{client} ports of \\texttt{Carbon} and \\texttt{WebApp} are connected to a \\texttt{Client} component through the same connector instance.	t
949	2	Is an extension of the Client-Server architectural style.	t
950	1	The orchestration is in charge of improving the transparent location of service providers.	t
951	2	Install style.	t
952	1	The uses view to represent how the mobile device uses the Catalog application.	t
953	0	Memcached can be considered a sub-module of the Store Graphs module.	t
954	0	The decomposition view to include a module for the synchronization responsibilities.	t
955	0	It enforces the use of a single implementation language among all applications.	t
956	2	Install style.	t
957	2	Memcached can be considered a direct sub-module of the top Graphite module.	t
958	3	Defines tiers as components.	t
959	1	All the published events are received by their subscribing components.	t
960	2	But the size of buffers may reduce the composition power.	t
961	0	Buffering can be considered a sub-module of the Store Graphs module.	t
962	0	A work assignment view.	t
963	1	The uses view to show the coupling between the different platforms.	t
964	0	A work assignment view.	t
965	3	The data model view to represent each one of the platforms.	t
966	2	The events should be delivered by the same order they are sent.	t
967	2	Buffering can be considered a direct sub-module of the top Graphite module.	t
968	3	And filters do not have to agree on the data formats.	t
1050	0	Launching a new process for processing each request is too expensive	t
969	2	Amazon Silk is more convenient for mobile devices because it customizes the number of threads that run in the device.	t
970	1	Google Chrome uses a usability maintain system model tactic.	t
971	2	Amazon Silk cache is not shared between different users of the service to support confidentiality.	t
972	1	In Google Chrome a request for a web page is accomplished by a single access to the internet.	t
973	0	As a specialization of the RulesSet module.	t
974	0	Should be described as a submodule of the RulesSet module.	t
975	3	There is an EventBus connector.	t
976	2	There is a Read/Write connector which guarantees that players turns are not lost.	t
977	0	Was taken because HTML5 provides better portability qualities.	t
978	3	Has reduced reliability qualities.	t
979	2	Three distinct unidirectional connectors.	t
980	0	Performance was traded for easy of development.	t
981	3	The \\textsc{: TableEditor} broadcasts the cursor position through its \\textsc{: StatusCallback} port.	t
982	1	The server implements the \\textsc{: Repository} component.	t
983	2	The code of the \\textsc{Parser} module is executed by a repository component, which is not represented in the view.	t
984	0	The \\textsc{ConflictResolution} module is part of the code executed by the \\textsc{: TableEditor} component.	t
985	2	Row Data Gateway and Data Mapper.	t
986	3	Active Record and Data Mapper.	t
987	2	Contain the business logic.	t
988	3	A Service Layer should be used to provide an interface for the presentation layer.	t
989	0	Amazon Silk is more convenient for mobile devices because it does most of the computation in the cloud.	t
990	0	There is a ThousandParsec connector.	t
991	2	May loose some of the changes done on the client component.	t
992	2	The code of the \\textsc{ConflictResolution} module is executed by a broadcast connector that implements an eventbus between the \\textsc{SpreadSheet} components.	t
993	3	A Service Layer should be used to provide an interface for the presentation layer.	t
994	1	The \\textsc{ConflictResolution} module is part of the code executed by the \\textsc{: Sheet} component.	t
995	2	Row Data Gateway is the most suitable data source pattern.	t
996	0	Amazon Silk is more convenient for mobile devices because it does most of the computation in the cloud.	t
997	0	There is a ThousandParsec connector.	t
998	1	Implements an event bus that allows the server to inform the client about new order recommendations.	t
999	0	In Amazon Silk a request for a web page corresponds to a peer-to-peer interaction between all the web components containing the resources.	t
1000	3	Should not be described as a module because it is a component.	t
1006	2	In Amazon Silk a request for a web page corresponds to requesting a service from the amazon cloud.	t
1007	1	Should be described as a submodule of but not included in the RulesSet subtree.	t
1008	0	The \\textsc{: TableEditor} broadcasts the cursor position through the \\textsc{: Sheet}.	t
1009	0	Amazon Silk predicts accesses based on the information gathered for all Silk users.	t
1010	0	There is a ThousandParsec connector.	t
1011	2	Was taken because HTML5 provides better usability qualities.	t
1012	2	The server implements the \\textsc{: Broadcast} connector.	t
1013	3	Active Record and Data Mapper.	t
1014	1	Row Data Gateway and Active Record.	t
1015	2	Was taken because HTML5 provides better usability qualities.	t
1016	0	Amazon Silk predicts accesses based on the information gathered for all Silk users.	t
1017	0	The server implements the \\textsc{: Repository} component and the \\textsc{: Broadcast} connector.	t
1018	1	There is a Request/Reply connector.	t
1019	0	Amazon Silk explicitly caches pages on the browser to optimize accesses.	t
1020	3	As a specialization of the Design module.	t
1021	2	Three distinct unidirectional connectors.	t
1022	2	The code of the \\textsc{Parser} module is executed by a repository component, which is not represented in the view.	t
1023	3	Active Record and Data Mapper.	t
1024	2	Three distinct unidirectional connectors.	t
1025	1	Row Data Gateway and Active Record.	t
1026	2	Amazon Silk cache is not shared between different users of the service to support confidentiality.	t
1027	1	As a submodule of the RulesSet module.	t
1028	0	The \\textsc{Parser} module is part of the code executed by the \\textsc{: TableEditor} component.	t
1029	0	This law highlights the impact of the business on the architecture	t
1030	0	Becomes unavailable for clients if there is a fault in the hardware of web server (srv-web)	t
1031	0	Performance is a quality that you have to address at the end of the development process	t
1032	0	Typically have a software architecture that results\n\t      from the common knowledge about the system that is shared among\n\t      the team members	t
1033	0	Describing what are the qualities that the system should possess	t
1034	0	They are both modules	t
1035	0	Retry	t
1036	0	Has as main goal the reduction of the modules' size.	t
1037	0	Manage sampling rate.	t
1038	0	Due to its configuration strategy Apache has better performance	t
1039	0	The stimulus is to integrate reports from a variety of test tools	t
1040	0	Modifiability and Performance	t
1041	0	We should always satisfy in the first place the requirements\n      of more important stakeholders (such as the client)	t
1042	0	Its main goal is to establish the reusability qualities of the architecture.	t
1043	0	The Decomposition style	t
1044	0	Layer 1	t
1045	0	It makes no sense to use views of the module viewtype, as\n    \tthey give only a static view of the system	t
1046	0	The Work Assignment style	t
1047	0	The Shared Data style	t
1048	0	The Peer-to-Peer style	t
1049	0	It assigns components and connectors to people and teams.	t
1051	0	An increase resource efficiency tactic	t
1052	0	A decomposition view which represent the module for compare-and-set	t
1053	0	In the Deployment view, because the presentation\n      component is now executing in a different place	t
1054	0	The left part of the figure represents a three-layered architecture	t
1055	0	Service-oriented architecture to express how clients can access the services	t
1056	0	The solution where the application is responsible for the eviction has better availability	t
1057	0	Performance	t
1058	0	Client-server	t
1059	1	The response is JUnit XML standard	t
1060	1	Availability and Modifiability	t
1061	1	In the component-and-connector view, because the\n      connector between the web client and the web server has to change	t
1062	1	The most relevant architectural style in the right part of the figure is shared-data	t
1063	1	Client-server to express how multiple clients can access the applications	t
1064	1	If no order was established among them, we would not know\n      from where should we start the design process	t
1065	1	Project managers are not interested in views that use this style because it lacks the necessary level of detail.	t
1066	1	The Deployment style	t
1067	1	Layer 4	t
1068	1	Active redundancy	t
1069	1	Results in the creation of a third module that does not have to change when any of the original modules are changed.	t
1070	1	Limit event response.	t
1071	1	Performance was the main concern of the design of the configuration strategy in Nginx	t
1072	1	You should use only views of the component-and-connector\n    \tviewtype, which describe the dynamic aspects of the system	t
1073	1	The Client-Server style	t
1074	1	The Pipes-and-filters style	t
1075	1	The Pipes-and-filters style	t
1076	1	It is useful for the project managers.	t
1077	1	Using threads ensures that the processing of each request is\n  \tisolated from the remaining requests	t
1078	1	A schedule resources tactic	t
1079	1	A client-server view with non-blocking connectors for the interaction between threads and core data structures	t
1080	1	The solution where the cache is responsible for the eviction has better availability	t
1081	1	Interoperability	t
1082	1	Communicating Processes	t
1083	1	This law can be seen as an example of the architecture influence cycle	t
1084	1	Becomes unavailable for clients if there is a fault in the hardware of database server (srv-db)	t
1085	1	There is no system which can have good performance and be easily maintainable	t
1086	1	Do not have a software architecture, because in agile\n\t      methodologies there is no architectural design phase	t
1087	1	Describing a set of steps that a user of the system must\n  \tperform to accomplish some task	t
1088	1	They are both components	t
1089	0	Is useful only if done (even if only partially) before the\n\t \tsystem's implementation is concluded, given that the architecture\n    \tis used for restricting the implementation	t
1090	0	The most important requirements (both functional and\n  \tqualities) that the system must achieve	t
1091	0	Depends mostly on the system's functional requirements	t
1092	0	Communicating processes	t
1093	0	A module may contain code from different components	t
1094	0	They describe general requirements that all systems should try to satisfy	t
1095	0	Ping/Echo	t
1096	0	This is a performance scenario because the stimulus is an input, \\emph{launches several instances of the system}.	t
1097	0	Launch a new process for processing each request	t
1098	0	Manage sampling rate.	t
1099	0	Make a business case for the system	t
1100	0	Modifiability	t
1104	0	Can use the operations defined in any of the system's modules	t
1105	0	Represent the network infrastructure that allows components to communicate\n\t\twith each other	t
1106	0	The Peer-to-Peer style	t
1107	0	The Shared data style	t
1108	0	The Decomposition style	t
1109	0	It assigns modules to the hardware.	t
1110	0	By interleaving the various processing phases of each\n      request in a sequential process	t
1111	0	Shared-data and Communicating-Processes	t
1112	0	You need to change the decomposition view to represent modules with the responsibilities associated with the DSL	t
1113	0	A uses view which represent modules for the externalizers	t
1114	0	A \\emph{web services} architecture	t
1115	0	The main quality of the system in the right part of the figure is scalability	t
1116	0	Data model to express the stored data formats	t
1117	0	Performance because all requests will be processed faster	t
1118	0	Usability and Performance	t
1119	2	The Service Oriented Architecture style	t
1120	2	For each set of software elements there is a single possible assignment to hardwre.	t
1121	2	By executing in parallel the processing of the various requests	t
1122	2	You need to design an implementation view to allow system administrators configure the builds	t
1123	2	A connector that has the serialization and de-serialization speed qualities	t
1124	2	A layered architecture, where the access to the various\n      sources is the responsibility of the bottommost layer	t
1125	2	The main quality of the system in the right part of the figure is ease of development	t
1126	2	Aspects to express the evolution of service interfaces	t
1127	2	Availability because even if PartB1 is not available partB2 can be provided	t
1128	2	Performance	t
1129	2	Tiers	t
1130	2	Is useful only if done (even if only partially) before the\n    \tsystem passes all of the acceptance tests by the client, given\n    \tthat no more requirements changes will take place after that time	t
1131	2	The stakeholders that drive the development of the system	t
1132	2	Should not depend on the skills of the developing team	t
1133	2	Communicating processes, shared-data and service-oriented architecture	t
1134	2	A module may execute code from different components	t
1135	2	They identify the most important requirements that the system should satisfy	t
1136	2	It is not possible to develop and to test the system incrementally	t
1137	2	Can use the operations defined in the upper layer, but not the ones defined in\n\t \tthe lower layer	t
1138	2	Represent the dependency relations that exist among the various components	t
1139	2	The Shared-Data style	t
1140	2	The Peer-to-Peer style	t
1142	2	This is not a modifiability scenario because the source of the stimulus cannot be a system administrator.	t
1143	2	Put the requests into a queue and schedule their processing	t
1144	2	The uses relation should be applied to the coarse-grained modules, because it allows to identify circular dependences.	t
1146	2	The system design	t
1147	2	Testability	t
1148	2	Usability	t
1149	0	This is a case of an architectural influence cycle where the feedback cycle resulted in changes on the business.	t
1150	0	The exchange of information is the stimulus.	t
1151	0	This shared understanding can be represented by a set of architectural views.	t
1152	0	A component.	t
1153	0	Service-oriented architecture, and Client-server.	t
1154	0	Should be avoided because scenarios should describe very concrete situations.	t
1155	0	Can be applied to any kind of availability scenario.	t
1156	0	Has as main goal the reduction of the modules' size.	t
1157	0	A security scenario because it allows the introduction of filters to encrypt the messages.	t
1158	0	Increase resource efficiency.	t
1159	0	Is driven by functional requirements.	t
1160	0	Modifiability	t
1161	0	Modifiability.	t
1162	0	Modifiability.	t
1163	0	The correctness of the caller module may not depend on the correct implementation of the invoked function in the called module.	t
1164	0	Layer 1	t
1165	0	She encapsulates the connector qualities inside a higher level component.	t
1166	0	It allows an undefined number of clients.	t
1167	0	All the peers are equal.	t
1168	0	But when the filters are executed sequentially the composition power is reduced.	t
1169	0	Deployment style.	t
1170	0	By interleaving the various processing phases of each\n      request in a sequential process	t
1171	0	Publish-subscribe.	t
1172	0	Client-server.	t
1173	0	There is a message passing connector between the \\texttt{read} port of \\texttt{Queue} and the \\texttt{data points access} port of \\texttt{WebApp}.	t
1174	0	In the Deployment view, because the presentation\n      component is now executing in a different place	t
1175	0	The data-shared architectural style is not applied because data is encapsulated inside services.	t
1176	0	A decomposition view.	t
1177	0	This view highlights the availability of the \\texttt{Image File Storage}.	t
1178	0	The quality addressed is availability.	t
1179	1	Dealing with the technological aspects of the system should be delayed to the implementation stage of development.	t
1180	2	Martin Fowler complains about this definition because architecture should stress flexibility which can only be necessary later.	t
1181	0	This view highlights the availability of the system.	t
1182	0	Should be avoided because scenarios should describe very concrete situations.	t
1183	1	Is useful to support scenarios where the stimulus is an omission.	t
1184	0	Should be avoided because scenarios should describe very concrete situations.	t
1185	3	Reduces the availability scenario response time because the request occurs twice.	t
1186	2	The modeling of a system is not part of the software architect duties.	t
1187	2	Martin Fowler complains about this definition because architecture should stress flexibility which can only be necessary later.	t
1188	3	This view highlights the scalability of \\texttt{upload} and \\texttt{dowload} operations.	t
1189	2	This is a case of an architectural influence cycle where the feedback cycle resulted in changes on the business and project.	t
1190	1	This shared understanding includes the architecturally significant requirements.	t
1191	2	This view highlights the scalability of storage.	t
1192	1	The request to adapt an interface is the stimulus.	t
1193	0	These tactics cannot not be applied in conjunction with the self-test tactic.	t
1194	0	These tactics cannot not be applied in conjunction with the self-test tactic.	t
1195	0	This is a case of an architectural influence cycle where the feedback cycle resulted in changes on the business.	t
1196	2	This view highlights the scalability of storage.	t
1197	2	The system algorithms should be part of the shared understanding.	t
1198	3	The data input to the system is the stimulus.	t
1199	1	Solve the conflicts between requirements by deciding on the best trad-offs the system should support.	t
1200	2	The hardware is an example of a software element.	t
1203	1	These tactics are used to prevent the occurence of a fault.	t
1204	0	This view highlights the availability of the \\texttt{Image File Storage}.	t
1205	3	The functional requirements can be considered as constraints on the software architecture design.	t
1206	2	Facilitate the communication among the stakeholders such that they can decide on what are the architecturally significant requirements.	t
1207	2	The hardware is an example of a software element.	t
1208	3	Passive redundancy does not work with non-deterministic behavior of request's execution.	t
1209	2	Prioritize events.	t
1210	1	Results in the creation of a third module that does not have to change when any of the original modules are changed.	t
1211	2	During the design process the number of architecturally significant requirements cannot change.	t
1297	2	It is completely independent of the deployment architectural style.	t
1212	1	The scenario is supported by a manage sampling rate tactic because several requests to the same graph return the same result.	t
1213	0	It describes an availability scenario because the configuration allows to define redundant virtual servers.	t
1214	0	It describes an availability scenario because the configuration allows to define redundant virtual servers.	t
1215	0	In each iteration one or more architecturally significant requirements are used to decompose a software element of the system design.	t
1216	2	Prioritize events.	t
1217	2	It describes a usability scenario where the source of stimulus is a non-technical user.	t
1218	3	Cannot be used together with the Reduce Overhead performance tactic.	t
1219	1	Limit event response.	t
1220	2	This is not a modifiability scenario because the source of the stimulus cannot be a system administrator.	t
1221	0	Only the scenarios that have high architectural impact and high business value should appear in the tree.	t
1222	0	Bound execution times, bound queue sizes, and increase resources.	t
1223	1	Increase resources.	t
1224	0	Introduce concurrency.	t
1225	3	This is a modifiability scenario and its environment design time.	t
1226	2	Manage sampling rate, bound queue sizes, and increase resources.	t
1227	2	A scenario for a 24 hours x 7 days availability of the system should appear as a leaf of the utility tree.	t
1228	3	Maintain multiple copies of computation.	t
1229	2	Increase resource efficiency and Increase resources.	t
1230	1	A low cost of change implies a low cost of development, because changing the code is part of development.	t
1231	2	This decision needs to be made concrete by an interoperability scenario.	t
1232	1	It describes a performance scenario for the execution of reads.	t
1233	0	A security scenario because it allows the introduction of filters to encrypt the messages.	t
1234	0	This decision does not have any impact on the architecture.	t
1235	0	It describes a reliability scenario because the data points for each metric will be split between a buffer and disk.	t
1236	2	Increase resource efficiency and Increase resources.	t
1237	2	A modifiability scenario where defer binding occurs at compile time.	t
1238	3	A high cost of change occurs if it is necessary to defer the binding of what needs to be changed.	t
1239	1	Project managers are not interested in views that use this style because it lacks the necessary level of detail.	t
1240	2	Voting.	t
1241	0	The library approach allows non-java applications.	t
1242	0	A component cannot be decomposed into a set of components and connectors.	t
1243	1	A shared-data style.	t
1244	0	A client-server style.	t
1245	3	Maintain multiples copies of computation.	t
1246	2	Incremental development is a criteria that drives the design of views of this type.	t
1247	2	The server approach implements a local cache.	t
1248	3	A component can only have a single type of port.	t
1249	2	The uses relation should be applied to the coarse-grained modules, because it allows to identify circular dependences.	t
1250	1	Introduce concurrency.	t
1251	2	Performance.	t
1252	1	A component type is made of a single architectural style.	t
1253	0	All the peers are equal.	t
1254	0	A component is an instance and a view can have several instances of the same component type.	t
1255	0	All the peers are equal.	t
1256	2	The uses relation should be applied to the coarse-grained modules, because it allows to identify circular dependences.	t
1257	2	Tailor interface.	t
1259	1	A layer cannot call the layer above.	t
1260	2	Performance.	t
1261	0	Performance.	t
1262	0	The Merge component executes the module merge.	t
1263	1	Scalability of read requests, because it is easy add more repositories to where reads are distributed, though there may be some level of inconsistency.	t
1264	0	The Merge component executes the module merge.	t
1265	3	Reliability.	t
1266	2	Scalability of write requests, because a transactional system will synchronize the writes among the several repositories.	t
1267	2	Performance.	t
1268	3	It is possible to have a circular allowed-to-use relationship between several layers.	t
1269	2	Its enterprise service bus cannot support asynchronous communication between the components.	t
1270	1	It is useful for the project managers.	t
1271	2	Master-slave.	t
1272	1	A view of the component-and-connector viewtype.	t
1273	0	Peer-to-peer.	t
1274	0	A decomposition view.	t
1275	0	It assigns components and connectors to people and teams.	t
1276	2	Master-slave.	t
1277	2	Client-server where the Buildbot is the client.	t
1278	3	The typical communication pattern is point-to-point.	t
1279	1	Tiers, and Shared-data.	t
1280	2	Decomposition and Generalization.	t
1281	0	It assigns modules to the hardware.	t
1282	0	Client-server to represent performance.	t
1283	1	Client-server.	t
1284	0	Decomposition.	t
1285	3	Tiers, Shared-data, Service-oriented architecture, and Client-server.	t
1286	2	For each set of software elements there is a single possible assignment to hardwre.	t
1287	2	Shared-date.	t
1288	3	Shared-data to represent modifiability.	t
1289	2	Service-oriented architecture, Shared-data, and Peer-to-peer.	t
1290	1	It assigns modules to files.	t
1291	2	Peer-to-peer.	t
1292	1	The sharing of data is done using a service-oriented architecture.	t
1293	0	Peer-to-peer.	t
1294	0	The data-shared architectural style is not applied because data is encapsulated inside services.	t
1295	0	Peer-to-peer.	t
1296	2	Service-oriented architecture, Shared-data, and Peer-to-peer.	t
1298	3	Shared-data.	t
1299	1	Do not have a software architecture, because in agile\n    methodologies there is no architectural design phase	t
1300	2	The functional requirements have a large impact on the definition of views of the module viewtype because they are used to define the high cohesion and low coupling of modules	t
1304	2	Reduce overhead	t
1305	3	May be easily changed to increase their performance	t
1306	1	Encapsulate	t
1307	0	We must use various different views, both of the\n      component-and-connector and the allocation viewtypes	t
1308	0	Active replication and passive replication	t
1309	2	The views describe different aspects of the system	t
1310	0	Modifiability	t
1311	3	A view of the Uses style	t
1312	2	It separates in new modules responsibilities that were\n      spread over various of the system's modules	t
1313	3	Should use some operation defined in the lower layer	t
1314	1	Shared-data	t
1315	3	The stimulus is incorrect response and the tactic is voting	t
1316	3	The data model view in order to define generic entities that can be customized for different kinds of catalogs	t
1317	2	Only in a component-and-connector view	t
1318	2	When a peer receives a connection it sends all its files to the peer connecting it	t
1319	1	Which improves modifiability, because filters are decoupled through pipes	t
1320	2	To increase the performance of the interaction between\n      the components of the system	t
1321	0	Work Assignment views	t
1322	0	Communicating Processes	t
1323	1	The quality being addressed is performance and the tactic multiple copies of computation	t
1324	2	Shared-data style	t
1325	3	Testing is easier	t
1326	1	The sharing of data is done using a service-oriented architecture	t
1327	0	an ACID transaction occurs in all the involved applications	t
1328	0	The access to two different aggregate instances in the context of the same request does not hinder scalability	t
1329	0	Only in the Deployment view	t
1330	3	The behavior described in the sentence can be represented in a view where the tier architectural style is used	t
1331	2	But the size of buffers may reduce the composition power	t
1332	2	To increase the performance of the interaction between\n      the components of the system	t
1333	3	Implementation views	t
1334	0	Communicating Processes	t
1335	1	Do not have a software architecture, because in agile\n    methodologies there is no architectural design phase	t
1336	3	The functional requirements can be considered as constraints on the software architecture design	t
1337	3	The quality it addresses is interoperability	t
1338	3	All the previous options	t
1339	2	Availability	t
1340	0	Manage sampling rate	t
1341	0	Have high throughput	t
1342	0	Split module	t
1343	1	Shared-data	t
1344	1	The stimulus is a crash and the tactic is retry	t
1345	1	The layered view to accommodate a new layer for each kind of catalog, which other layers may use	t
1346	2	The quality being addressed is performance and the tactics multiple copies of data and multiple copies of computation	t
1347	0	Tiers style	t
1348	1	Easier to scale development	t
1349	0	The shared-data architectural style is not applied because data is encapsulated inside services	t
1350	3	an ACID transaction occurs in the invoked application and ACID transactions in the other involved applications will eventually occur later	t
1351	2	It describes the typical behavior of a microservices system	t
1352	2	We just have to show, through Deployment views,\n      that the \\emph{DataNode} component executes in more than one\n      machine of the cluster	t
1353	3	Quorum, active replication, and passive replication	t
1354	0	Different stakeholders are interested in different views of the system	t
1355	1	Usability	t
1356	3	A view of the Uses style	t
1357	3	It allows the decomposition of each of the system's\n      modules into finer grained modules	t
1358	3	Should use some operation defined in the lower layer	t
1359	2	Is a set of guidelines that the developing team should\n  follow in the development of the system	t
1360	1	Describing a set of steps that a user of the system must\n  perform to accomplish some task	t
1361	2	The scenario is correct but it is not clear what is the artefact	t
1362	1	Only in the Decomposition view	t
1363	0	Performance	t
1364	0	Manage sampling rate	t
1365	3	To implement the above scenario it is necessary to apply a runtime defer binding tactic	t
1366	2	Restrict dependencies	t
1367	0	Essential to ensure the system scalability	t
1368	3	To inform other DataNodes about their availability	t
1369	2	A view may not contain any architectural style	t
1370	0	A module view	t
1371	3	The Decomposition and the SOA styles	t
1372	1	The Deployment style	t
1373	2	The Layers style	t
1374	0	Interoperability	t
1375	2	Use an active redundancy tactic in the OPC (Order Processing Center) 	t
1376	3	The domain layer of the layered style to represent the types of devices	t
1377	2	Only views of the component-and-connector viewtype and allocation viewtype are needed	t
1378	3	The price for high scalability and availability is the need to have several replicas of the files to be shared	t
1379	2	The web browser, o web server, and the data base	t
1380	1	Work assignment	t
1381	2	The enterprise service bus coordinates the execution of several services	t
1382	1	Install view	t
1383	0	Write a single scenario on performance	t
1384	0	Module viewtype	t
1385	3	It is necessary to use views of the three viewtypes	t
1386	2	It is not necessary to have transactional properties because all data is in memory	t
1387	0	When an event is published to the distributed log, the order of delivery to the different subscribing applications is predefined	t
1388	3	It does not allow high scalability	t
1389	0	The stimulus is to port the system to a new browser	t
1390	0	Split module	t
1391	2	Essential to ensure the system portability	t
1392	2	But the exceptions tactic could have been used as well	t
1393	3	Is a set of diagrams that show the runtime elements of the\n  system and their relationships	t
1394	3	Describing the system's features by way of different\n  usage scenarios for it, in which users play the role of actors	t
1395	1	The scenario is correct but it does not describe whether the request the servers fails to respond to succeeds or fails	t
1396	3	Both in a component-and-connector and the Deployment\n      views	t
1397	0	Performance	t
1398	3	Bound execution times	t
1399	1	The traditional web applications, the mashups, and the rich internet applications (RIAs)	t
1400	2	The enterprise service bus coordinates the execution of several services	t
1403	0	Module viewtype	t
1404	0	Each view contains a single architectural style	t
1405	3	They are not represented by a view	t
1406	1	The Decomposition and the Layers styles	t
1407	1	The Deployment style	t
1408	0	The Generalization style	t
1409	0	Interoperability	t
1410	0	Use a passive redundancy tactic in the OPC (Order Processing Center)	t
1411	2	The layered view to include a layer for each type of device	t
1412	2	Only views of the component-and-connector viewtype and allocation viewtype are needed	t
1413	3	The price for high scalability and availability is the need to have several replicas of the files to be shared	t
1414	3	It is necessary to use views of the three viewtypes	t
1415	1	Only a small set of functionalities are transactional	t
1416	3	The distributed log may not deliver some of the events that are published to their subscribers	t
1417	0	It allows high scalability because the data model has only four entities	t
1418	3	None, because this description does not describe any architectural aspect of the system	t
1419	1	Depends more on the architect's experience than on anything else	t
1420	2	The tweet unique ID is written in the home timeline of each one of the writer's followers	t
1421	0	Describes a concrete quality that a particular system has to implement	t
1422	0	This solution optimizes the performance in terms of the latency of each request	t
1423	1	When a new block is created, the second replica is not stored in the same rack than the first replica to increase the availability when a Data Node fails	t
1424	0	When a new block is created, the first replica is written in the node where the writer is located, to improve availability	t
1425	3	None of the above	t
1426	2	Can omit some of the elements like, for instance, the environment, if they are not relevant for the general scenario	t
1427	2	The tweet unique ID is written in the home timeline of each one of the writer's followers	t
1428	3	This solution optimizes the performance in terms of the throughput of processed requests	t
1429	2	What should be the system response in the occurrence of a stimulus	t
1430	1	This is wrong because you can easily change these decisions during the project lifetime	t
1431	2	The Early Bird server contains the tweet content	t
1432	1	In this solution the clients invocations have to be synchronous	t
1433	0	The periodic rebuild of the checkpoint is done to increase the availability of the NameNode	t
1434	0	The periodic rebuild of the checkpoint is done to increase the availability of the NameNode	t
1435	0	A non-functional requirement a system has to achieve	t
1436	2	The Early Bird server contains the tweet content	t
1437	2	This is right but you cannot be completely sure whether the decisions are the right ones	t
1438	3	This solution allows the dimensioning of the number of activities (threads or processes) that run in the server, taking into consideration the server's hardware capacity, in order to have a efficient usage of the server's CPU	t
1439	1	Is useful to support scenarios where the stimulus is an omission	t
1440	2	Allow many simultaneous users	t
1441	0	When the environment is design time it means that the change should be done before the system enters into production	t
1442	0	Performance	t
1443	1	Performance qualities only	t
1444	0	When the environment is design time it means that the change should be done before the system enters into production	t
1445	3	Security	t
1446	2	Availability qualities only	t
1447	2	Can guarantee that the system will not become unavailable	t
1448	3	May be easily changed to increase their storage capacity	t
1449	2	The Voting tactic	t
1450	1	Limit event response	t
1451	2	Refactor the common parts between the business logic and the remote invocation	t
1452	1	Usability	t
1453	0	The system would respond faster to all the\n      clients' requests	t
1454	0	Encapsulate the module such that the clients of the module should not be aware of the remote invocations	t
1455	0	Usability and Performance	t
1456	2	The system would respond faster to requests about\n      file locations	t
1457	2	Prioritize events	t
1458	3	The Removal from Service tactic	t
1459	1	The project manager uses this view to get advice on the incremental development of the system	t
1460	2	The uses view to show the uses relationships between the different platforms	t
1461	0	A module contains the code that executes in a single component and a component executes the code of a single module	t
1462	0	This means that in this software system it is not possible to modularize each responsibility in a cohesive module	t
1463	1	The view addresses the scenario because it separates the \\texttt{Consumer Website} module from the \\texttt{OpcApp} module	t
1464	0	The layered view to deal with the aspects of portability	t
1465	3	A module contains the code that can execute in several components and a component can execute the code of several modules	t
1466	2	The uses relation should be applied to the coarse-grained modules, because it allows to identify circular dependences	t
1467	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement	t
1468	3	She should try to use a view of the Layered style and assign this responsibility to a module in the bottom layer that can be used by all the other modules	t
1469	2	A change of the decomposition view to include a set of new modules with the responsibilities associated with the access control	t
1470	1	The invoked function may not have any input parameter	t
1471	2	Each layer defines a virtual machine because it provides a set of cohesive functionalities to the upper layer	t
1472	1	It is enough to design a view of the Data Model architectural style at the conceptual level because Facebook information has a very simple structure	t
1473	0	The view does not address the scenario	t
1474	0	The modules inside a layer cannot use other modules in the same layer	t
1475	0	A change to the uses view to represent that friends can use each other catalog	t
1476	2	The invoked function may not have any output parameter	t
1477	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement	t
1478	3	It is necessary to design a view of the Data Model architectural style at the physical level to deal with performance and consistency issues of the access to data	t
1479	1	May, on another view of the system, be represented by a set of components\n\t\tand connectors	t
1480	2	Client-Server	t
1481	0	Applies layers to tiers	t
1482	0	Client-server	t
1483	1	Service-oriented architecture, and Shared-data	t
1484	0	Service-oriented architecture, and Client-server	t
1485	3	Defines tiers as components	t
1486	2	Represent the dependency relations that exist among the various components	t
1487	2	Client-Server	t
1488	3	Pipes-and-Filters	t
1489	2	It represents a relation between a component's port and a port of one of its internal components	t
1490	1	A Allocation viewtype view	t
1491	2	The events should be delivered by the same order they are sent	t
1492	1	Communicating-Processes	t
1493	0	Tiers	t
1494	0	Tiers	t
1495	0	A component can subscribe to events	t
1496	2	Tiers	t
1497	2	It represents a relation between a component's port and a port of one of its internal components	t
1498	3	A Install view	t
1499	1	An error.	t
1500	2	Change level of service.	t
1507	0	Decomposition.	t
1508	0	Aggregate.	t
1509	2	This view \\textbf{does not} show that the \\texttt{Adventure Builder Catalog DB} and the \\texttt{OPC} components can execute behind a firewall.	t
1510	0	Pipe-and-filter.	t
1511	3	Retry tactic	t
1512	2	The uses relation should be applied to the coarse-grained modules, because it allows to identify circular dependences.	t
1513	3	The behavior described in the sentence can be represented in a view where the tier architectural style is used.	t
1514	1	Planning incremental releases of the system.	t
1515	3	All layers are mapped to the browser component where the data access layer will contains, besides a module to access a local repository, modules to access external services.	t
1516	3	Reimplement all the information systems of the organization	t
1517	2	An aggregate has runtime references to other aggregates.	t
1518	2	Eliminates any long-term commitment to a technology stack	t
1519	0	Whenever complex connectors are used in architectural views it is necessary to also document their decomposition.	t
1520	3	The Client-Server style.	t
1521	2	Layered.	t
1522	2	This solution continues to provide service even if a crash occurs in the Data server.	t
1523	3	Reimplement all the information systems of the organization	t
1524	0	A failure.	t
1525	1	Overload.	t
1526	3	Refactor.	t
1527	3	Layered style.	t
1528	3	The Generalization and Decomposition styles.	t
1529	2	An aggregate has runtime references to other aggregates.	t
1530	0	Each service can be developed and deployed independently	t
1531	0	Aggregate.	t
1532	0	This view shows that if is possible to scale differently the \\texttt{web tier} from the \\texttt{EJB tier}.	t
1533	1	Maintain multiple copies of data.	t
1534	1	Ping-and-echo tactic	t
1535	1	The project manager uses this view to get advice on the incremental development of the system.	t
1536	2	When a peer receives a connection it sends all its files to the peer connecting it.	t
1537	0	Analysing the performance of the system.	t
1538	1	The presentation and domain logic layers are mapped to the application server component and the data access layer to the repository component.	t
1539	2	Voting.	t
1540	1	Reduce overhead.	t
1541	2	The new defects introduced.	t
1542	1	The uses view to represent how the mobile device uses the Catalog application	t
1543	0	The \\emph{config} module is not used in the implementation of any component.	t
1544	0	Split module.	t
1545	3	Publish-Subscribe.	t
1546	2	Performance and Availability for crashes of the Image File Storage component.	t
1547	0	Usability and Performance.	t
1548	3	It allows to estimate the cost of hardware.	t
1550	0	The cost of the modification.	t
1551	3	It is necessary to design a view of the Data Model architectural style at the physical level to deal with performance and consistency issues of the access to data.	t
1552	1	The Client-Server style.	t
1553	2	This view shows that bank debits are done asynchronously.	t
1554	0	Pipe-and-filter and tiers.	t
1555	2	Do not loose the changes done on the client component if the server is not available.	t
1556	3	Results from the application of several ADD iterations.	t
1557	2	As the number of orders grows it will be increasingly expensive to load the aggregate.	t
1558	3	It is necessary to use views of the three viewtypes.	t
1559	0	It would reduce the scalability for updates of different orders for the same customer.	t
1560	0	Increase competence set.	t
1562	2	The component-and-connector view should emphasize the performance qualities of systems following the microservices architecture.	t
1563	3	Defer binding.	t
1564	3	The domain layer of the layered style to represent the types of devices	t
1565	1	Usability.	t
1566	3	It allows to estimate the cost of hardware.	t
1567	0	Performance.	t
1568	3	Four.	t
1569	1	That the integration of a new source will not have any impact on the other modules of the Catalog of DVDs.	t
1570	2	It is enough to design a view of the Data Model architectural style at the logical level because the information will be stored in a relational database.	t
1571	0	The Decomposition style.	t
1572	1	This view shows that the processing of tracking requests is done synchronously.	t
1573	0	Results from a utility tree for performance.	t
1574	0	Pipe-and-filter and tiers.	t
1575	3	It completely hides the server faults from the Pad user.	t
1576	1	Abstract common services.	t
1577	1	Pipe-and-Filter.	t
1578	0	The \\emph{config} module is not used in the implementation of any component.	t
1579	1	Performance of the tasks execution, scheduling of tasks can be optimized for the particular context of the system	t
1580	2	A common understanding to be achieve among all the system stakeholders	t
1581	0	Commercial	t
1582	0	Availability of the Image Write Service, whenever one of the Image Write Service components crashes	t
1583	1	The stimulus is periodic	t
1584	0	The result of decisions that are made at the "upper floors" of the organization	t
1585	3	The measure of the response is throughput	t
1586	2	Project	t
1587	2	Availability of the Image File Storage, whenever the Image File Storage component crashes	t
1588	3	Simple programming model, the clients only need to concern about the business logic of the application, the remote services are transparent	t
1589	2	That the use of XML technology for interoperability is not a correct decision	t
1590	1	Availability	t
1591	2	Both components, the Image Write Service and the Image Retrieval Service, should be designed using an synchronous model of interactions, where a thread is associated with each request	t
1592	1	The asynchronous solution can support a larger number of simultaneous requests	t
1593	0	Introduce concurrency	t
1594	0	The synchronous solution requires less memory than asynchronous solution	t
1595	0	Interoperability is a quality that as lower priority than performance	t
1596	2	Modifiability	t
1597	2	Both components, the Image Write Service and the Image Retrieval Service, should be designed using an synchronous model of interactions, where a thread is associated with each request	t
1599	1	Provides the quality of performance	t
1600	2	The need to have eventual consistency and compensating operations	t
1602	0	In the synchronous solution only some of the tasks that are being executed are lost and they have to be resubmitted by the client	t
1604	0	In the synchronous solution only some of the tasks that are being executed are lost and they have to be resubmitted by the client	t
1605	3	Does not provide any additional quality	t
1606	2	The need to have eventual consistency and compensating operations	t
1607	2	Maintain multiple copies of computation	t
1608	3	Using cloud computing we cannot delay some architectural decisions	t
1609	2	Voting.	t
1610	1	Results in the creation of a third module that makes the original modules independent.	t
1611	2	Results from the application of a single ADD iteration.	t
1612	1	Project managers are not interested in views that use this style because it lacks the necessary level of detail.	t
1613	0	Task Model tactics.	t
1614	0	Its main goal is to establish the reusability qualities of the architecture.	t
1615	0	Task Model tactics.	t
1616	2	Voting.	t
1617	2	Increases the cohesion between the two modules.	t
1618	3	Results from the application of several ADD iterations.	t
1619	1	Hardware, if there is hardware redundancy.	t
1620	2	This is not a modifiability scenario because the source of the stimulus cannot be a system administrator.	t
1621	0	This ASR can easily be supported by the architecture because it has little effect in the architecture.	t
1622	0	Is applied only once at the beginning of the architectural design process.	t
1623	1	Interoperability.	t
1625	3	All the previous options.	t
1626	2	The cost of meeting the ASR after development starts is too high.	t
1627	2	This is not a modifiability scenario because the source of the stimulus cannot be a system administrator.	t
1628	3	Follows a bottom-up decomposition process of the system.	t
1629	2	Prevent a fault in a process.	t
1630	1	A low cost of change implies a low cost of development, because changing the code is part of development.	t
1631	2	Is a top-down process where a initial decomposition is chosen and it is successively decomposed without changing the initial decisions.	t
1632	1	Views need to contain more than one architectural style.	t
1633	0	The quality addressed is availability and transactions tactic is required to solve the problem.	t
1634	0	Is driven by functional requirements.	t
1635	0	Each view contains a single architectural style.	t
1636	2	The quality addressed is availability and a voting design tactic is required to solve the problem.	t
1637	2	Prevent a fault in a process.	t
1638	3	The cost of change is higher if it occurs at runtime.	t
1640	2	Service-oriented architecture, Shared-data, and Client-server.	t
1641	0	The view does not address the scenario	t
1642	0	It corresponds to a particular case of a specialization in a generalization view.	t
1643	1	Which improves modifiability, because filters are decoupled through pipes.	t
1644	0	Service-oriented architecture, and Client-server.	t
1645	3	The Shared-data style.	t
1646	2	It represents a relation between a component's port and a port of one of its internal components.	t
1647	2	But the size of buffers may reduce the composition power.	t
1648	3	The view addresses the scenario because the \\texttt{Consumer Website} module does not use the interfaces a new business partner has to implement.	t
1649	2	The events should be received by the same order they are sent.	t
1650	1	If the OPC crashes the Consumer Website can continue to provide service in normal mode.	t
1651	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement.	t
1652	1	Components of different types may have ports of the same type.	t
1653	0	The Decomposition style.	t
1654	0	If the OPC crashes the Consumer Website can continue to provide service in degraded mode.	t
1655	0	A component can subscribe to events.	t
1656	2	The Uses style.	t
1657	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement.	t
1658	3	The attachment between components and connectors only depends on their ports and roles types.	t
1660	2	Shared-data.	t
1661	0	The view does not address the scenario	t
1662	0	Modifiability.	t
1663	1	The peer initiating the request for a file needs to know where the file is located.	t
1664	0	Client-server.	t
1665	3	Modifiability is not made easier by a layered architecture.	t
1666	2	The view addresses the scenario because it separates the modules that represent the interfaces a new business partner has to implement.	t
1667	2	If a peer providing a file crashes the file will not be downloaded.	t
1668	3	Maintainability and Availability.	t
1669	2	Is an extension of the Client-Server architectural style.	t
1670	1	The decomposition was driven by a quality that is supported by a restrict dependencies tactic.	t
1671	2	An availability scenario associated with a fault in the \\emph{Carbon} component.	t
1672	1	Native applications provide better modifiability qualities.	t
1673	0	Simplifies the evolution of the event schema.	t
1674	0	A performance scenario associated with the throughput of writing data points to disk.	t
1675	0	Simplifies the evolution of the event schema.	t
1676	2	Is an extension of the Client-Server architectural style.	t
1677	2	The decomposition was driven by a split module tactic.	t
1678	3	Native applications provide better support for working offline.	t
1680	2	The view results from the implementation of a support user initiative tactic.	t
1681	0	A modifiability scenario the \\emph{Graphite} system.	t
1682	0	A request for a web page corresponds to a peer-to-peer interaction between all the web components containing the resources.	t
1683	1	She should decide to use a modular monolith architecture to reduce the cost of development, because developers will not need to define intermediate states for the transactional execution of the business logic.	t
1684	0	A modifiability scenario the \\emph{Graphite} system.	t
1685	3	It is possible to customize the number of threads that run in the mobile device.	t
1686	2	She should try to split the system in parts in order to isolate the complex business logic and use the two architectural approaches accordingly.	t
1687	2	Communicating Processes.	t
1688	3	The view results from the implementation of a support system initiative tactic.	t
1689	2	A deployment and a work assignment view.	t
1690	1	This view fulfills an availability scenario, which defines the expected behavior whenever an external source is not available.	t
1691	2	A single performance scenario of the \\emph{Graphite} system.	t
1692	1	An iterative development was followed, which allowed more time to develop a connector with good performance in the latter stages of the project.	t
1693	0	Does not allow optimizations according to the type of query.	t
1694	0	Performance was traded for easy of development to reduce the overall development costs.	t
1695	0	A deployment view.	t
1696	2	This view fulfills a modifiability scenario, which states about the cost of adding a new source of information to the system.	t
1697	2	A single performance scenario of the \\emph{Graphite} system.	t
1698	3	Querying the event sourcing becomes more complex.	t
\.


--
-- Data for Name: question_has_topic; Type: TABLE DATA; Schema: public; Owner: pedro
--

COPY public.question_has_topic (topic_id, question_id, votes, score) FROM stdin;
\.


--
-- Data for Name: questions; Type: TABLE DATA; Schema: public; Owner: pedro
--

COPY public.questions (id, new_id, lang, content, difficulty) FROM stdin;
21	\N	\N	\n  O desenho da arquitectura de software de um sistema complexo\n\n    	\N
22	\N	\N	\n  De acordo com o modelo do SEI, existem três tipos diferentes de\n  vistas arquitecturais que são normalmente necessárias para descrever\n  completamente uma arquitectura de software.\n\n    	\N
23	\N	\N	\n  Os requisitos para sistemas complexos são normalmente muito\n  numerosos e conflituosos entre si, tornando impossível satisfazer\n  todos os requisitos completamente numa implementação do sistema.\n  Por isso, o processo recomendado para se fazer o desenho da\n  arquitectura de software de um sistema passa pela identificação dos\n  \\emph{architectural drivers}, que irão moldar o desenho da\n  arquitectura.  Estes \\emph{architectural drivers} devem ser\n  escolhidos de forma a que sejam\n\n    	\N
24	\N	\N	\n  Suponha que vai trabalhar para a equipa de desenvolvimento de um\n  sistema de software de grandes dimensões, e que lhe são atribuídas\n  tarefas de alteração de funcionalidades já existentes.  Quais das\n  seguintes vistas arquitecturais lhe seriam, em princípio, mais úteis\n  para desempenhar rapidamente essas tarefas?\n\n    	\N
25	\N	\N	\n  Existem outros factores que afectam o desenvolvimento de um sistema\n  de software, para além dos seus requisitos funcionais e de atributos\n  de qualidade.  Por exemplo, factores como o orçamento ou o tempo\n  disponível.  Estes factores\n\n    	\N
26	\N	\N	\n  Numa arquitectura de camadas composta por quatro camadas, em que a\n  camada mais de cima é a camada número 1 e a de mais de baixo é a\n  camada número 4, qual das camadas é mais facilmente modificável?\n\n    	\N
27	\N	\N	\n  Suponha que vai desenvolver um novo sistema de software e que\n  pretende que uma parte da funcionalidade deste novo sistema possa\n  ser facilmente reutilizada em sistemas a desenvolver no futuro.\n  Quais dos seguintes estilos arquitecturais são mais adequados para\n  mostrar que a arquitectura do sistema satisfaz este requisito.\n\n    	\N
28	\N	\N	\n  Suponha que existem determinados requisitos de desempenho para um\n  sistema, e que pretende mostrar aos stakeholders desse sistema que a\n  arquitectura de software que concebeu satisfaz esses requisitos.\n  Para isso\n\n    	\N
29	\N	\N	\n  Considere uma aplicação empresarial que necessita de guardar os seus\n  dados de forma persistente, mas para a qual não se sabe ainda qual\n  será o volume de informação que esta terá que suportar.  Por isso,\n  pretende-se desenvolver o sistema de forma a que seja possível\n  alterar facilmente o componente de bases de dados relacional (RDBMS)\n  usado para armazenar os dados da aplicação, substituindo-o por um\n  RDBMS de outro fabricante.  Visto que este é um requisito comum, a\n  arquitectura de software recomendada para este tipo de aplicações\n  satisfaz este requisito através da utilização de um determinado\n  estilo arquitectural.  Que estilo é esse?\n\n    	\N
30	\N	\N	\n  O IDE Eclipse é uma aplicação \\emph{open source} escrita em Java, e\n  é extensível através da utilização de \\emph{plug-ins}.  No documento\n  que descreve a arquitectura de plug-ins existente no Eclipse,\n  podemos ler o seguinte:\n\n  \\begin{quote}\n    A plug-in in Eclipse is a component that provides a certain type\n    of service within the context of the Eclipse workbench. [...]  The\n    plug-in class provides configuration and management support for\n    the plug-in.  A plug-in class in Eclipse must extend\n    \\texttt{org.eclipse.core.runtime.Plugin}, which is an abstract\n    class that provides generic facilities for managing plug-ins.\n  \\end{quote}\n\n  Tendo em conta o modelo e a nomenclatura usados na cadeira para a\n  descrição de uma arquitectura de software, que tipo de vistas lhe\n  parecem mais adequadas para representar a arquitectura de plug-ins\n  do Eclipse descrita acima?\n\n    	\N
353	396	\N	\n\t  O \\ch{} faz em algumas situações \\emph{prerender} de páginas. Para isso tira partido da\n\t      \n    	\N
31	\N	\N	\n  Suponha que decidiu usar o Google App Engine (GAE) no\n  desenvolvimento de uma aplicação web.\n\n  O GAE é descrito na Wikipedia da seguinte forma:\n  \\begin{quote}\n    Google App Engine is a platform for developing and hosting web\n    applications in Google-managed data centers.\n\n    Google App Engine is cloud computing technology.  It virtualizes\n    applications across multiple servers and data centers. [...]\n\n    Google App Engine is free up to a certain level of used resources.\n    Fees are charged for additional storage, bandwidth, or CPU cycles\n    required by the application.\n  \\end{quote}\n  \n  Por outro lado a documentação do GAE diz o seguinte:\n  \\begin{quote}\n    With App Engine, you can build web applications using standard\n    Java technologies and run them on Google's scalable\n    infrastructure.  The Java environment provides a Java 6 JVM, a\n    Java Servlets interface, and support for standard interfaces to\n    the App Engine scalable datastore and services, such as JDO, JPA,\n    JavaMail, and JCache.  Standards support makes developing your\n    application easy and familiar, and also makes porting your\n    application to and from your own servlet environment\n    straightforward.\n  \\end{quote}\n\n  Tendo em conta estas duas perspectivas sobre o GAE, que estilos\n  arquitecturais são mais indicados para representar a sua utilização\n  na arquitectura de software da sua aplicação web?\n\n    	\N
32	\N	\N	\n  Dada a complexidade de construir um bom jogador automático de\n  Xadrez, é normal que os programas para jogar Xadrez recorram a\n  motores de Xadrez (\\emph{chess engines}) já existentes, como mostra\n  o seguinte excerto da Wikipedia:\n  \\begin{quote}\n    A chess engine is a computer program that can play the game of\n    chess.\n\n    Most chess engines do not have their own graphical user interface\n    (GUI) but are rather console applications that communicate with a\n    GUI such as XBoard (Linux) and WinBoard (Windows) via a standard\n    protocol.\n  \\end{quote}\n\n  Na página web do XBoard, podemos ler o seguinte:\n  \\begin{quote}\n    XBoard is a graphical user interface for chess [...]. It displays\n    a chessboard on the screen, accepts moves made with the mouse, and\n    loads and saves games in Portable Game Notation (PGN). It serves\n    as a front-end for many different chess services, including:\n\n    \\begin{itemize}\n    \\item Chess engines that will run on your machine and play a game\n      against you or help you analyze, such as GNU Chess, Crafty, or\n      many others.\n    \\item [...]\n    \\end{itemize}\n  \\end{quote}\n \n  Tendo em conta a informação acima sobre o XBoard, os motores de\n  Xadrez, e a forma como eles interagem em tempo de execução, qual dos\n  seguintes estilos arquitecturais melhor representa a arquitectura de\n  software de um sistema baseado no XBoard e num dos motores?\n\n    	\N
33	\N	\N	\n  Considere o seguinte excerto da página da Wikipedia sobre testes de\n  caixa preta (\\emph{black-box testing}):\n  \\begin{quote}\n    Black-box testing is a method of software testing that tests the\n    functionality of an application as opposed to its internal\n    structures or workings.  Specific knowledge of the application's\n    code/internal structure and programming knowledge in general is\n    not required.  Test cases are built around specifications and\n    requirements, i.e., what the application is supposed to do.\n  \\end{quote}\n  \n  Supondo que pertence à equipa de testes de um sistema complexo e que\n  é responsável por efectuar testes de caixa preta sobre o sistema,\n  quais das seguintes vistas da arquitectura de software do sistema\n  lhe seriam mais úteis?\n\n    	\N
34	\N	\N	\n  Suponha que tem um sistema com uma arquitectura cliente-servidor que\n  foi concebido para suportar a existência simultânea de no máximo 100\n  clientes, sem requisitos especiais de disponibilidade.  A solução\n  adoptada e posta em funcionamento há 4 anos consiste num único\n  componente do tipo servidor ao qual se ligam todos os clientes.\n  Esta solução satisfazia os requisitos iniciais mas com o aumento\n  recente do número máximo de clientes para 200, o sistema deixou de\n  ter um desempenho aceitável.  Não sabendo mais nada sobre a\n  arquitectura do sistema, que solução propõe para resolver os\n  problemas de desempenho do sistema?\n\n    	\N
35	\N	\N	\n  A evolução registada nas aplicações web no sentido de providenciar\n  uma interface com o utilizador mais rica levou a uma mudança na sua\n  arquitectura: parte da computação da aplicação passou a ser feita no\n  \\emph{browser} web usado pelos utilizadores para aceder à aplicação.\n  Como é que esta alteração na arquitectura se manifesta nos\n  diferentes tipos de vista que descrevem a arquitectura de software\n  de uma aplicação web?\n\n    	\N
36	\N	\N	\n  Quando se utiliza o padrão Domain Model na implementação da camada\n  de lógica de domínio de uma aplicação empresarial, é comum\n  utilizar-se também o padrão Service Layer.  O padrão Service Layer é\n  usado nestes casos para\n\n    	\N
37	\N	\N	\n  O sistema de email é composto por vários tipos de componentes\n que desempenham diferentes funções.  Por exemplo, para\n  enviar um email, um utilizador pode utilizar um programa como o\n  Microsoft Outlook ou o Mozilla Thunderbird, genericamente designado\n  por \\emph{mail user agent} (MUA), para compor a sua mensagem e\n  enviá-la.  Para enviar a mensagem, tipicamente o MUA liga-se a um\n  \\emph{mail transfer agent} (MTA), que recebe a mensagem, analisa os\n  cabeçalhos da mesma para determinar os vários destinatários e, após\n  consulta do sistema DNS para determinar quais os MTA responsáveis\n  por cada um dos destinatários, liga-se aos MTAs responsáveis pelos\n  endereços de destino para entregar a mensagem.  Cada um desses MTAs\n  recebe a mensagem e armazena-a localmente ou reenvia-a para outros\n  MTAs (por exemplo, quando existem \\emph{forwards} ou \\emph{aliases}\n  configurados, ou quando o MTA que recebe a mensagem não é o\n  responsável final pelo endereço de email do destinatário).\n\n Tendo em conta esta descrição simplificada do funcionamento do\n  sistema de email, qual dos seguintes estilos arquitecturais lhe\n  parece mais adequado para representar o padrão de interacção\n  existente entre os MTAs?\n\n    	\N
38	\N	\N	\n  Considerando ainda o exemplo do sistema de email, os MUAs servem não\n  só para compor e enviar mensagens, mas também para os utilizadores\n  lerem as mensagens de email que lhe foram enviadas.  Para isso os\n  MUAs têm que obter essas mensagens do componente que as armazena\n  para as mostrar ao utilizador.  Duas formas diferentes de o fazer é\n  usando os protocolos POP e IMAP.  No primeiro caso, as mensagens são\n  movidas do servidor de POP para o computador do utilizador.  No\n  segundo caso, as mensagens continuam armazenadas no servidor de\n  IMAP, permitindo assim que o utilizador possa aceder ao seu email a\n  partir de computadores diferentes, desde que todos eles se consigam\n  ligar ao mesmo servidor de IMAP.\n\n  Qual dos seguintes estilos arquitecturais lhe parece mais adequado\n  para representar o padrão de interacção existente entre os MUAs e um\n  servidor de IMAP?\n\n   	\N
39	\N	\N	\n  O padrão Identity Map é normalmente usado nas aplicações\n  empresariais para\n \n    	\N
40	\N	\N	\n  O padrão Unif of Work é normalmente usado nas aplicações\n  empresariais para\n\n    	\N
707	1637	\N	\n\tA voting tactic can be used to\n\n    	\N
459	461	\N	\n  The Service Layer pattern is typically used in conjunction with\n \n  	\N
61	\N	\N	\n  De acordo com o modelo do SEI, existem apenas três tipos diferentes\n  de vistas arquitecturais que são suficientes para descrever qualquer\n  arquitectura de software.  Isto significa que, para se descrever a\n  arquitectura de software de um sistema, qualquer que ele seja\n\n  \n    	\N
62	\N	\N	\n  Suponha que ao conceber a arquitectura de software de um sistema, um\n  arquitecto decidiu particionar o sistema em três componentes, cada\n  um dos quais com um conjunto de funcionalidades diferentes.  Qual\n  das seguintes razões lhe parece mais adequada para justificar esta\n  decisão?\n\n\n    	\N
460	462	\N	\n  The Active Record pattern is best used when we are also using\n \n  	\N
63	\N	\N	\n  Após o desenvolvimento de todas as funcionalidades pedidas para um\n  sistema de software e da sua entrada em produção, é normal que a\n  maior parte da equipa envolvida no desenvolvimento desse sistema\n  seja posta a trabalhar no desenvolvimento de outros sistemas.  No\n  entanto, é normal que surjam com alguma frequência pedidos de\n  alteração de funcionalidades do sistema em produção (correspondendo\n  à sua fase de manutenção evolutiva).\n  \n  Suponha que foi contratado para fazer a gestão desses pedidos de\n  alteração, planeando a sua execução (que será feita pelos\n  programadores da equipa de desenvolvimento e não por si) tendo em\n  conta, entre outros factores, a disponibilidade dos membros da\n  equipa de desenvolvimento.  Quais das seguintes vistas\n  arquitecturais lhe seriam, em princípio, mais úteis para desempenhar\n  o seu trabalho?\n\n  \n    	\N
64	\N	\N	\n  No Ciclo de Negócio da Arquitectura uma das principais influências\n  na arquitectura de um sistema de software são os seus\n  \\emph{stakeholders}, porque\n\n  \n    	\N
65	\N	\N	\n  Suponha que vai desenvolver uma aplicação web que pretende alojar\n  numa das várias plataformas de \\emph{Cloud Computing} actualmente\n  existentes.  Para isso, analisou as várias ofertas disponíveis, e\n  seleccionou um subconjunto de plataformas que providenciam um\n  conjunto de serviços semelhantes (por exemplo, serviços de\n  armazenamento de dados, serviços de mensagens, etc), mas que o fazem\n  usando interfaces diferentes.  Por isso, para desenvolver o seu\n  sistema acaba por escolher uma dessas plataformas, mas, para evitar\n  ficar preso a essa escolha, coloca como requisito para o seu sistema\n  que este seja facilmente portável para outra plataforma semelhante à\n  que escolheu.  Que solução arquitectural melhor satisfaz este\n  requisito?\n\n   \n    	\N
66	\N	\N	\n  O sistema de email é composto por vários tipos de componentes que\n  desempenham diferentes funções.  Por exemplo, para enviar um email,\n  um utilizador pode utilizar um programa como o Microsoft Outlook ou\n  o Mozilla Thunderbird, genericamente designado por \\emph{mail user\n    agent} (MUA), para compor a sua mensagem e enviá-la.  Para enviar\n  a mensagem, tipicamente o MUA liga-se a um \\emph{mail transfer\n    agent} (MTA), que recebe a mensagem, analisa os cabeçalhos da\n  mesma para determinar os vários destinatários e, após consulta do\n  sistema DNS para determinar quais os MTA responsáveis por cada um\n  dos destinatários, liga-se aos MTAs responsáveis pelos endereços de\n  destino para entregar a mensagem.  Cada um desses MTAs recebe a\n  mensagem e armazena-a localmente ou reenvia-a para outros MTAs até\n  que a mensagem chegue ao MTA do destino.  O utilizador destinatário\n  da mensagem irá depois usar o seu MUA para ver as mensagens que lhe\n  foram enviadas.\n\n  Tendo em conta esta descrição simplificada do funcionamento do\n  sistema de email, qual das seguintes descrições lhe parece mais\n  adequada para representar a arquitectura de software do sistema de\n  email, se apenas estivermos interessados no padrão de interacção\n  existente entre os MUAs?\n\n\n    	\N
67	\N	\N	\n  O Chromium é um navegador da web (\\emph{web browser}), que\n  introduziu uma arquitectura inovadora na forma como lida com a\n  navegação simultânea de várias páginas, cada uma das quais numa\n  \\emph{tab} diferente do navegador.  No documento que descreve a\n  arquitectura do Chromium, podemos ler o seguinte:\n\n  \\begin{quote}\n    We use separate processes for browser tabs to protect the overall\n    application from bugs and glitches in the rendering engine.  We\n    also restrict access from each rendering engine process to others\n    and to the rest of the system.  In some ways, this brings to web\n    browsing the benefits that memory protection and access control\n    brought to operating systems.\n\n    We refer to the main process that runs the UI and manages tab and\n    plugin processes as the "browser process" or "browser."  Likewise,\n    the tab-specific processes are called "render processes" or\n    "renderers."  The renderers use the WebKit open-source layout\n    engine for interpreting and laying out HTML.\n  \\end{quote}\n\n  Tendo em conta esta breve descrição da arquitectura de software do\n  Chromium, que estilo arquitectural lhe parece mais adequado para a\n  representar?\n\n\n    	\N
68	\N	\N	\n  Na descrição da arquitectura do Chromium é dito que os\n  \\emph{renderers} usam o WebKit, que é descrito na Wikipedia da\n  seguinte forma:\n\n  \\begin{quote}\n    WebKit is a layout engine designed to allow web browsers to render\n    web pages.  WebKit powers Google Chrome and Apple's Safari, the\n    third and fourth most widely used web browsers respectively.  The\n    WebKit engine provides a set of classes to display web content in\n    windows, and implements browser features such as following links\n    when clicked by the user, managing a back-forward list, and\n    managing a history of pages recently visited.  \n  \n    WebKit was originally created as a fork of KHTML as the layout\n    engine for Apple's Safari; it is portable to many other computing\n    platforms.  Mac OS X and Windows are supported by the project.\n\n    WebKit's WebCore and JavaScriptCore components are available under\n    the GNU Lesser General Public License, and the rest of WebKit is\n    available under a BSD-style license.\n  \\end{quote}\n  \n  Suponha que vai desenvolver um novo \\emph{browser} e que decidiu\n  usar o WebKit para suportar o \\emph{rendering} das páginas de HTML,\n  à semelhança do que é feito no Chromium e no Safari.  Qual das\n  seguintes vistas arquitecturais é mais adequada para representar\n  esta decisão?\n\n\n    	\N
69	\N	\N	\n  Considerando ainda o exemplo do Chromium, encontra-se na página do\n  projecto um outro documento intitulado ``Conventions and patterns\n  for multi-platform development,'' onde se pode ler o seguinte:\n\n  \\begin{quote}\n    Chromium is a large and complex cross-platform product.  We try to\n    share as much code as possible between platforms, while\n    implementing the UI and OS integration in the most appropriate way\n    for each.  While this gives a better user experience, it adds\n    extra complexity to the code.  This document describes the\n    recommended practices for keeping such cross-platform code clean.\n\n    We use a variety of different file naming suffixes to indicate\n    when a file should be used:\n    \\begin{itemize}\n    \\item Windows files use the \\texttt{\\_win} suffix.\n    \\item Cocoa (Mac UI) files use the \\texttt{\\_cocoa} suffix, and lower-level Mac files use the \\texttt{\\_mac} suffix.\n    \\item Linux files use \\texttt{\\_linux} for lower-level files, \\texttt{\\_gtk} for GTK-specific files, and \\texttt{\\_x} for X Windows (with no GTK) specific files.\n    \\item Posix files shared between Mac and Linux use the \\texttt{\\_posix} suffix.\n    \\item Files for Chrome's ``Views'' UI (on Windows and experimental GTK) layout system use the \\texttt{\\_views} suffix.\n   \\end{itemize}\n\n    The separate front-ends of the browser are contained in their own directories:\n    \\begin{itemize}\n    \\item Windows Views (and the experimental GTK-views): \\\\\n      \\texttt{chrome/browser/ui/views}\n    \\item Linux GTK: \\texttt{chrome/browser/gtk}\n    \\item Mac: \\texttt{chrome/browser/cocoa}\n    \\end{itemize}\n  \\end{quote}\n  \n  Novamente, tendo em conta esta breve descrição, que estilo\n  arquitectural lhe parece mais adequado para a representar?\n\n\n    	\N
70	\N	\N	\n  Qual das seguintes frases descreve melhor a relação existente entre\n  módulos e componentes?\n\n  	\N
198	\N	\N	\n    Uma das boas práticas na concepção de uma arquitectura de software\n    é a criação de um sistema esqueleto.  Qual o seu objectivo?\n\n    	\N
71	\N	\N	\n  Uma das evoluções no desenvolvimento de aplicações web foi a criação\n  de \\emph{mashups}, que são descritas na Wikipedia da seguinte forma:\n\n  \\begin{quote}\n    In web development, a mashup is a web page or application that\n    uses and combines data, presentation or functionality from two or\n    more sources to create new services.\n  \\end{quote}\n\n  Embora existam várias formas de implementar e providenciar estes\n  mashups, uma abordagem comum é passar para o \\emph{browser} a\n  responsabilidade de contactar os vários serviços que se pretende\n  combinar e de processar as suas respostas, implementando assim o\n  \\emph{mashup}.\n\n  Que estilo arquitectural melhor descreve o funcionamento deste tipo\n  de aplicações?\n\n  \n    	\N
72	\N	\N	\n  O IDE Eclipse é uma aplicação \\emph{open source} escrita em Java, e\n  é extensível através da utilização de \\emph{plug-ins}.  No documento\n  que descreve a arquitectura de plug-ins existente no Eclipse,\n  podemos ler o seguinte:\n\n  \\begin{quote}\n    A plug-in in Eclipse is a component that provides a certain type\n    of service within the context of the Eclipse workbench. [...] The\n    Eclipse runtime provides an infrastructure to support the\n    activation and operation of a set of plug-ins working together to\n    provide a seamless environment for development activities. Within\n    a running Eclipse instance, a plug-in is embodied in an instance\n    of some plug-in runtime class, or plug-in class, for short. \n    \n    [...]\n\n    Such a plug-in can then be activated by the Eclipse runtime when\n    it is required to perform some function.  Activating a plug-in\n    means loading its runtime class and instantiating and initializing\n    its instance.\n\n    The main function of a plug-in class is to do special processing\n    during plug-in activation and deactivation, e.g., to allocate and\n    release resources.\n  \\end{quote}\n\n  Tendo em conta o modelo e a nomenclatura usados na cadeira para a\n  descrição de uma arquitectura de software, que tipo de vistas lhe\n  parecem mais adequadas para representar a arquitectura de plug-ins\n  do Eclipse descrita acima?\n\n  \n    	\N
73	\N	\N	\n  Suponha que desenvolveu uma aplicação web que permite aos seus\n  utilizadores jogarem Xadrez uns contra os outros.  A aplicação\n  permite que os jogadores se juntem em pares para realizarem um jogo,\n  após o que o jogo decorre entre esses dois jogadores durante algum\n  tempo até ao fim do jogo.  Um jogo completo pode demorar desde cerca\n  de 1 hora, até vários dias, dependendo do tempo que cada jogador\n  demora a realizar uma jogada.  Este sistema foi concebido como uma\n  aplicação web tradicional, e tem estado a funcionar já há alguns\n  meses com um único componente do tipo servidor ao qual se ligam\n  todos os clientes web.  No entanto, dada a recente exposição\n  mediática do seu jogo, o número de utilizadores da sua aplicação\n  aumentou substancialmente nos últimos tempos.  De facto, viu o seu\n  sistema passar rapidamente dos habituais 10 pedidos simultâneos que\n  eram processados com um tempo médio de resposta inferior a 300 ms,\n  para 100 pedidos a serem processados simultaneamente com um tempo\n  médio de resposta de cerca de 5 segundos.  Na realidade, o número de\n  pedidos simultâneos não aumentou mais porque o seu servidor rejeita\n  pedidos adicionais assim que atinge os 100 pedidos em processamento.\n\n  Visto que as expectativas é que a utilização do sistema continue a\n  aumentar, podendo mesmo chegar aos 10000 pedidos simultâneos, e que\n  o sistema só é utilizável se tiver tempos médios de resposta abaixo\n  dos 2 segundos, que solução propõe para resolver os problemas de\n  desempenho do sistema?\n\n  \n    	\N
74	\N	\N	\n  A replicação é uma das tácticas mais usadas para satisfazer\n  requisitos de disponibilidade como, por exemplo, o requisito de que\n  uma aplicação web deve continuar a funcionar normalmente, mesmo\n  quando existe uma falta ao nível do seu servidor web.  A utilização\n  da táctica de replicação do servidor web reflecte-se em que vistas\n  da arquitectura de software?\n\n  \n    	\N
75	\N	\N	\n  O sistema Retalhix é um sistema que permite fazer a gestão dos\n  produtos e das vendas dos hipermercados, incluindo o funcionamento\n  das caixas por onde os clientes passam para registar e pagar as suas\n  compras.  Considere o seguinte requisito de disponibilidade para o\n  Retalhix\n\n  \\begin{quote}\n    O aspecto mais crítico para o funcionamento de uma loja é a\n    correcta operação das caixas, visto que o não funcionamento das\n    caixas afecta directamente os clientes e a sua possibilidade de\n    comprar produtos.\n  \\end{quote}\n\n Supondo que o que se pretende é que, em caso de falta (qualquer que\n  ela seja) de uma só caixa, o cliente que estava a ser atendido nessa\n  caixa possa à mesma pagar as suas compras e sair da loja com elas,\n  como é que a arquitectura do sistema pode dar resposta a este\n  requisito?\n\n  \n    	\N
76	\N	\N	\n  Considerando ainda o sistema Retalhix da pergunta anterior, imagine\n  a situação em que um cliente tem dois carrinhos de supermercado\n  cheios de compras e vai a meio do registo das suas compras na caixa\n  quando esta falha.  Suponha que o que se pretende neste cenário é\n  que se possa continuar a registar os produtos do cliente sem ter que\n  voltar a registar os produtos já registados.  Que consequências é\n  que este novo requisito tem na arquitectura do sistema?\n\n  \n    	\N
77	\N	\N	\n  Qual é a relação existente entre os elementos de hardware\n  correspondentes a unidades de processamento (máquinas) numa vista do\n  estilo Instalação (\\emph{Deployment}) e os componentes de um\n  sistema, considerando que réplicas do mesmo componente contam como\n  componentes diferentes?\n\n  \n    	\N
78	\N	\N	\n  Suponha que no processo de desenho da arquitectura de software de um\n  sistema chega à conclusão de que existem ciclos na relação de\n  utilização (\\emph{uses}) entre os módulos do sistema, fazendo com\n  que quase todos os módulos do sistema dependam da maior parte dos\n  restantes módulos.  Como é que resolveria este problema?\n\n  \n    	\N
79	\N	\N	\n  O padrão Unit of Work é normalmente usado em aplicações empresariais\n  para agrupar uma série de operações de acesso a dados que pertencem\n  a uma única operação de negócio.  Visto que o código executado no\n  contexto de uma Unit of Work pode estar espalhado por diferentes\n  módulos do sistema, pode acontecer que durante a mesma Unit of Work\n  se leia da base de dados os mesmos dados mais do que uma vez, o que\n  pode trazer problemas de coerência da informação se não forem\n  tomadas as precauções devidas.  Como é que este problema é resolvido\n  quando se está a usar o padrão Unit of Work?\n\n  \n    	\N
80	\N	\N	\n  O padrão Identity Map é usado em aplicações empresariais\n\n  \n    	\N
101	\N	\N	\n    No sistema Hadoop as tácticas de recuperação de faltas usadas são:\n\n    	\N
102	\N	\N	\n    A qualidade de escalabilidade do sistema Hadoop apenas é possível\n    porque?\n\n    	\N
103	\N	\N	\n    No sistema Hadoop quando um \\emph{DataNode} que falhou é\n    reintroduzido são usadas as seguintes tácticas:\n\n    	\N
104	\N	\N	\n    No sistema Hadoop:\n\n     	\N
105	\N	\N	\n    Durante a operação normal os \\emph{DataNodes} usam a táctica de\n    \\emph{heartbeat}\n\n    	\N
106	\N	\N	\n    No sistema Hadoop instalado no Yahoo! as tácticas de segurança\n    utilizadas são:\n\n    	\N
107	\N	\N	\n    Uma camada, do estilo arquitectural camadas, é um módulo:\n\n    	\N
108	\N	\N	\n    No estilo arquitectural Utilização diz-se que uma invocação entre\n    dois módulos não implica uma relação de utilização pois:\n\n    	\N
109	\N	\N	\n    O estilo arquitectural Utilização permite aferir do impacto de\n    alterações aos módulos\n\n    	\N
110	\N	\N	\n    Conforme descrito na secção 8.2.3., o componente \\emph{NameNode}\n    dá comandos aos \\emph{DataNodes} para que eles procedam a algumas\n    operações sobre os seus blocos, ao passo que os \\emph{DataNodes}\n    têm que enviar relatórios regulares para o \\emph{NameNode}.  A\n    arquitectura que melhor descreve a forma como no sistema HDFS\n    estes dois tipos de componentes interagem é como\n\n    	\N
111	\N	\N	\n    De acordo com as técnicas de desenho orientadas aos atributos, uma\n    arquitectura de software deve ser desenhada com base numa lista de\n    requisitos, chamados de \\emph{architectural drivers}. Estes\n    \\emph{architectural drivers} devem ser ordenados de acordo com a\n    sua importância para os \\emph{stakeholders} pois\n\t\n    	\N
112	\N	\N	\n    No último parágrafo da secção 8.2.2 descreve-se qual foi a solução\n    adoptada pelo \\emph{NameNode} para obter um determinado nível de\n    desempenho na escrita para disco.  Que estilo arquitectural é mais\n    adequado para representar a solução adoptada?\n\n    	\N
113	\N	\N	\n    No sistema HDFS o componente \\emph{DataNode} tem como principal\n    responsabilidade guardar os blocos de dados correspondentes aos\n    ficheiros dos clientes, existindo tipicamente várias instâncias\n    deste componente num sistema.  O estilo arquitectural que melhor\n    descreve o padrão de interacção existente entre as várias\n    instâncias de \\emph{DataNode} é\n    \n    	\N
114	\N	\N	\n    Suponha que pretende descrever como é que um cliente lê um\n    ficheiro de um sistema HDFS suportando falhas esporádicas no\n    hardware de alguns \\emph{DataNodes}, sem que isso afecte a\n    disponibilidade do sistema.  Para isso pretende usar uma vista do\n    tipo componente-e-conector, mas em que os únicos componentes são o\n    \\emph{HDFS Client} e o \\emph{DataNode}.\n\n    	\N
461	\N	\N	\n  The Service Layer pattern is typically used in conjunction with\n \n  	\N
115	\N	\N	\n    A arquitectura do sistema HDFS apenas prevê a existência de um\n    \\emph{NameNode}.  Tendo em conta as responsabilidades deste\n    componente e a actual arquitectura do HDFS, quais seriam as\n    consequências de adicionarmos a possibilidade de termos réplicas\n    de \\emph{NameNode} no sistema?\n\n    	\N
116	\N	\N	\n    Suponha que está a desenvolver uma vista arquitectural onde\n    utiliza o estilo de Dados Partilhados (\\emph{Shared Data}) e que\n    um dos membros da sua equipa propõe que dois dos componentes com o\n    papel de \\emph{data accessors} comuniquem directamente entre si.\n    Na sua opinião\n\n    	\N
117	\N	\N	\n    Quando se utiliza o padrão Domain Model na implementação da camada\n    de lógica de domínio de uma aplicação empresarial, é comum\n    utilizar-se também o padrão Service Layer.  O padrão Service Layer\n    é usado nestes casos para\n    \n    	\N
118	\N	\N	\n    Considere o seguinte excerto da página da Wikipedia sobre testes\n    de caixa branca (\\emph{white-box testing}):\n    \\begin{quote}\n      White-box testing is a method of testing software that tests\n      internal structures or workings of an application, as opposed to\n      its functionality. In white-box testing an internal perspective\n      of the system (including the module's code), as well as\n      programming skills, are required and used to design test\n      cases. The tester chooses inputs to exercise paths through the\n      code and determine the appropriate outputs.\n    \\end{quote}\n  \n    Supondo que pertence à equipa de testes de um sistema complexo e\n    que é responsável por efectuar testes de caixa branca sobre o\n    sistema, quais das seguintes vistas da arquitectura de software do\n    sistema lhe seriam mais úteis?\n\n    	\N
119	\N	\N	\n    Suponha que está a desenhar a arquitectura de software para uma\n    aplicação empresarial que tem requisitos sobre o tempo máximo que\n    o sistema deve demorar a responder a um determinado tipo de\n    pedidos por parte dos utilizadores.  Suponha ainda que a\n    frequência desses pedidos é previsível, mas que os restantes\n    pedidos ao sistema podem variar significativamente.  Finalmente,\n    suponha que o seu sistema vai ter apenas um único servidor que se\n    executará numa máquina pré-definida com um processador AMD de 12\n    cores.  Para mostrar aos \\emph{stakeholders} que o seu sistema\n    satisfaz os requisitos de desempenho terá que usar vistas de que\n    estilo arquitectural?\n\n    	\N
120	\N	\N	\n    Actualmente, a arquitectura mais popular para uma aplicação\n    empresarial é constituída por 3 \\emph{tiers}.  Esses três\n    \\emph{tiers} são\n\n    	\N
462	\N	\N	\n  The Active Record pattern is best used when we are also using\n \n  	\N
128	151	\N	\n    Para analisar o desempenho de um sistema\n\n    	\N
141	\N	\N	\n    No sistema Hadoop a utilização de um \\emph{BackupNode} em vez de\n    um \\emph{CheckpointNode}:\n\n    	\N
142	\N	\N	\n    No sistema Hadoop o \\emph{CheckpointNode}, quando executa num nó\n    diferente do nó onde executa o \\emph{NameNode}, suporta:\n\n    	\N
143	\N	\N	\n    Para os \\emph{stakeholders} do sistema Hadoop a solução de\n    construir um \\emph{cluster} de servidores usando muitas máquinas\n    de baixo custo foi:\n\n    	\N
144	\N	\N	\n    No sistema Hadoop, durante a operação normal, o \\emph{NameNode}\n    poderia usar a táctica de \\emph{ping} para saber se os \\emph{DataNodes} estão disponíveis\n\n    	\N
145	\N	\N	\n    No sistema Hadoop a possibilidade de ter várias políticas de localização de réplicas:\n\n    	\N
146	\N	\N	\n    O conhecimento da estrutura de instalação no sistema Hadoop é\n    relevante para o funcionamento eficaz do sistema.  Para isso o\n    administrador pode configurar, para cada instalação do sistema, um\n    \\emph{script} que retorna a identificação do \\emph{rack} onde se\n    encontra um nó (ver secção 8.3.2).\n\n    	\N
147	\N	\N	\n    A táctica de \\emph{Checkpoint/rollback} é uma táctica de\n\n    	\N
148	\N	\N	\n    Uma vista onde seja utilizado o estilo Utilização e que possua uma\n    circularidade entre relações usa\n\n    	\N
149	\N	\N	\n    A diferença entre a relação \\emph{usa} do estilo Utilização e a\n    relação \\emph{pode usar} do estilo Camadas\n\n    	\N
150	\N	\N	\n    Um dos principais requisitos para o sistema HDFS é a garantia de\n    disponibilidade dos dados armazenados no sistema, mesmo na\n    presença de vários tipos de falhas (não simultâneas) no\n    \\emph{hardware} em que o sistema executa.  Para mostrar que o\n    sistema satisfaz este requisito\n\n    	\N
151	\N	\N	\n    Para analisar o desempenho de um sistema\n\n    	\N
152	\N	\N	\n    Suponha que está a desenhar a arquitectura de software para uma\n    aplicação empresarial que tem requisitos de segurança sobre a\n    confidencialidade de parte dos seus dados.  Para mostrar aos\n    \\emph{stakeholders} que o seu sistema satisfaz os requisitos de\n    segurança terá de usar que vistas arquitecturais?\n\n    	\N
153	\N	\N	\n    No terceiro parágrafo da secção 8.3.1 descreve-se o mecanismo de\n    \\emph{buffering} usado pelo cliente de um sistema HDFS durante a\n    escrita de um ficheiro.  Suponha que quer descrever este mecanismo\n    recorrendo a uma vista arquitectural.  Como é que o faria?\n    \n    	\N
154	\N	\N	\n    Suponha que está a implementar uma aplicação web e que decidiu\n    usar um sistema HDFS para armazenar os dados da sua aplicação.  Ou\n    seja, a sua aplicação web irá ser um cliente do sistema HDFS.\n    Como é que esta decisão afecta a arquitectura da sua aplicação web?\n\n    	\N
155	\N	\N	\n    Considere o seguinte excerto do tutorial sobre o Hadoop MapReduce:\n\n    \\begin{quote}\n      Hadoop MapReduce is a software framework for easily writing\n      applications which process vast amounts of data (multi-terabyte\n      data-sets) in-parallel on large clusters (thousands of nodes) of\n      commodity hardware in a reliable, fault-tolerant manner.\n\n      A MapReduce job usually splits the input data-set into\n      independent chunks which are processed by the map tasks in a\n      completely parallel manner.  The framework sorts the outputs of\n      the maps, which are then input to the reduce tasks. Typically\n      both the input and the output of the job are stored in a\n      file-system.  The framework takes care of scheduling tasks,\n      monitoring them and re-executes the failed tasks.\n    \\end{quote}\n\n    Que estilo arquitectural do tipo de vista componente-e-conector\n    lhe parece mais adequado para descrever o funcionamento do\n    MapReduce, tendo em conta as suas principais vantagens na\n    resolução de um problema?\n\n    	\N
156	\N	\N	\n    Tendo em conta a descrição do \\emph{CheckpointNode} feita na\n    secção 8.2.5, qual é o estilo arquitectural que melhor representa\n    a interacção existente entre os componentes \\emph{CheckpointNode}\n    e \\emph{NameNode}?\n\n    	\N
157	\N	\N	\n    Qual das seguintes frases captura melhor as restrições existentes\n    relativamente a que componentes podem executar em que máquinas no\n    estilo Instalação?\n\n    	\N
158	\N	\N	\n    Dois dos padrões existentes para implementar a camada de lógica de\n    domínio de uma aplicação empresarial são o Domain Model e o\n    Transaction Script.  A escolha de um ou outro\n    \n    	\N
159	\N	\N	\n    Uma das evoluções no desenvolvimento de aplicações web foi a\n    criação de \\emph{mashups}, que são descritas na Wikipedia da\n    seguinte forma:\n\n    \\begin{quote}\n      In web development, a mashup is a web page or application that\n      uses and combines data, presentation or functionality from two\n      or more sources to create new services.\n    \\end{quote}\n\n    Sabendo que as fontes usadas pelos \\emph{mashups} não têm\n    conhecimento da existência dos \\emph{mashups} e mudam com\n    frequência, obrigando a alterações nos \\emph{mashups} para\n    acomodar essas mudanças, qual é a melhor arquitectura para\n    minimizar o efeito dessas alterações?\n \n    	\N
160	\N	\N	\n    Com a evolução das tecnologias para o desenvolvimento de\n    aplicações web, passou a ser possível desenvolver aplicações web\n    com uma interface com o utilizador muito mais parecida com a das\n    tradicionais aplicações de \\emph{desktop}.  No entanto, para isto\n    acontecer, foi necessário que parte do código que executava no\n    servidor web passasse a ser agora executado no browser.  Como é\n    que esta mudança se manifesta ao nível da arquitectura do sistema?\n\n    	\N
161	211	\N	\n    Dois dos \\emph{stakeholders} identificados para o \\ghc{} foram o\n    governo do Reino Unido e os investigadores que pretendem fazer\n    investigação em linguagens de programação funcionais.  Qual destes\n    \\emph{stakeholders} teve uma maior influência na arquitectura de\n    software do sistema?\n\n    	\N
162	212	\N	\n    No documento que descreve o \\ghc{} pode ler-se o seguinte:\n    \\begin{quote}\n      At the highest level, GHC can be divided into three distinct\n      chunks:\n      \\begin{itemize}\n      \\item The compiler itself.\n      \\item The Boot Libraries.\n      \\item The Runtime System (RTS). \n      \\end{itemize}\n    \\end{quote}\n    Qual a forma mais correcta de caracterizar arquitecturalmente os\n    três \\emph{chunks} a que este texto se refere?\n\n     	\N
197	\N	\N	\n    Suponha que para satisfazer um requisito de segurança relacionado\n    com a possibilidade de ataques por parte de utilizadores que\n    acedem ao seu sistema pela Internet, pretende utilizar a táctica\n    designada por \\emph{Limit Exposure}.  Como é que a utilização\n    dessa táctica se manifesta nas vistas da arquitectura do seu\n    sistema?\n\n    	\N
163	213	\N	\n    Uma das decisões importantes no desenvolvimento do \\ghc{} foi a de\n    se fazer a verificação de tipos antes da transformação de um\n    programa em Haskell para um programa na linguagem Core\n    (\\emph{type-check-before-desugar}).  Esta decisão de desenho\n\n    	\N
164	214	\N	\n    No documento que descreve o \\ghc{} pode ler-se o seguinte:\n    \\begin{quote}\n      The Runtime System is a library of mostly C code that is linked\n      into every Haskell program. It provides the support\n      infrastructure needed for running the compiled Haskell code,\n      including the following main components:\n      \\begin{itemize}\n      \\item Memory management, including a parallel, generational, garbage collector;\n      \\item Thread management and scheduling;\n      \\item The primitive operations provided by GHC;\n      \\item A bytecode interpreter and dynamic linker for GHCi.\n      \\end{itemize}\n    \\end{quote}\n    Que qualidades do sistema são melhoradas pela decisão de criar\n    o \\emph{Runtime System} indicado acima?\n\n    	\N
165	215	\N	\n    Tal como muitos outros compiladores, a compilação de um programa\n    Haskell com o \\ghc{} utiliza o estilo \\emph{pipe-and-filter},\n    criando um \\emph{pipeline} composto por várias fases de\n    compilação.  A utilização deste estilo arquitectural no GHC tem\n    como objectivo\n\n    	\N
176	216	\N	\n    No documento que descreve a arquitectura de um serviço web (em\n    anexo), uma das abordagens introduzidas na Secção~1.2 é a de\n    \\emph{partitioning}, ilustrada na Figura~1.4.  A utilização de\n    \\emph{partitioning} faz com que\n\n    	\N
177	217	\N	\n    Considerando ainda o caso da pergunta anterior, compare as\n    arquitecturas esboçadas nas Figura~1.3 e Figura~1.4.  A diferença\n    entre as duas arquitecturas manifesta-se\n\n    	\N
178	218	\N	\n    Considere a arquitectura apresentada na Figura~1.3 do caso das\n    perguntas anteriores, em que se introduziu redundância no sistema.\n    Neste caso particular, a introdução de redundância na arquitectura\n    tem como objectivo\n\n    	\N
179	219	\N	\n    A arquitectura de software típica de uma aplicação empresarial é\n    composta por três \\emph{tiers} e por três camadas.  No entanto,\n    podemos ter variações a esta arquitectura.  Por exemplo, separando\n    o \\emph{tier} do meio em dois \\emph{tiers}.  Neste caso, que\n    alterações é que existem ao nível da arquitectura de camadas?\n\n    	\N
1105	1486	\N	\n\tThe connectors on component-and-connector view\n\t\n\t	\N
191	\N	\N	\n    A primeira arquitectura do sistema Fénix, correspondendo aos seus\n    primeiros anos de desenvolvimento, podia ser descrita como uma\n    arquitectura de três camadas, típica de uma aplicação empresarial.\n    Uma dessas camadas era a camada de lógica de domínio (\\emph{Domain\n      Logic}).  Qual das seguintes afirmações melhor caracteriza a\n    arquitectura do Fénix no que diz respeito a essa camada?\n    \n    	\N
192	\N	\N	\n    Para colocar um produto mais rapidamente no mercado, as empresas\n    de desenvolvimento de software estão cada vez mais a usar uma\n    estratégia incremental de desenvolvimento, lançando periodicamente\n    novas versões do produto com novas funcionalidades.  Qual dos\n    estilos arquitecturais é melhor para analizar se a arquitectura de\n    software do sistema é adequada para o lançamento incremental das\n    várias versões?\n\n    	\N
193	\N	\N	\n    Vários dos casos estudados na cadeira tinham requisitos de\n    escalabilidade.  Isso significa que os sistemas em causa\n    devem ser construídos de forma a\n\n    	\N
194	\N	\N	\n    No estilo arquitectural \\emph{Service Oriented Architecture} é\n    comum a existência de um componente especializado, designado por\n    \\emph{Enterprise Service Bus} (ESB).  A utilização de um ESB num\n    sistema tem como objectivo\n\n    	\N
195	\N	\N	\n    Para satisfazer requisitos de disponibilidade existem diferentes\n    tácticas, que podem ser aplicadas dependendo do tipo concreto de\n    requisito que pretendemos satisfazer.  Supondo que pretende\n    detectar faltas do tipo \\emph{resposta} no seu sistema, que\n    táctica é mais adequada?\n\n    	\N
196	\N	\N	\n    A página que descreve a arquitectura do Chromium OS (um projecto\n    \\emph{open source} para a implementação de um novo sistema\n    operativo) começa da seguinte forma:\n    \\begin{quote}\n      Chromium OS consists of three major components: \n      \\begin{itemize}\n      \\item The Chromium-based browser and the window manager\n      \\item System-level software and user-land services: the kernel, drivers, connection manager, and so on\n      \\item Firmware \n      \\end{itemize}\n    \\end{quote}\n\n    Tendo em conta esta breve descrição da arquitectura de software do\n    Chromium OS, que estilo arquitectural lhe parece mais adequado\n    para a representar?\n\n    	\N
180	220	\N	\n    No documento que descreve a arquitectura de serviços web pode\n    ler-se o seguinte:\n    \\begin{quote}\n      Another critical piece of any distributed system is a load\n      balancer.  Load balancers are a principal part of any\n      architecture, as their role is to distribute load across a set\n      of nodes responsible for servicing requests.  This allows\n      multiple nodes to transparently service the same function in a\n      system.  Their main purpose is to handle a lot of simultaneous\n      connections and route those connections to one of the request\n      nodes, allowing the system to scale to service more requests by\n      just adding nodes.\n    \\end{quote}\n    Com base na descrição acima, qual lhe parece ser a melhor forma de\n    representar a arquitectura de um sistema que esteja a usar um\n    \\emph{load balancer}?\n\n    	\N
199	\N	\N	\n    O sistema de email é composto por vários tipos de componentes que\n    desempenham diferentes funções.  Por exemplo, para enviar um\n    email, um utilizador usa um \\emph{mail user agent} (MUA), para\n    compor a sua mensagem e enviá-la.  Para enviar a mensagem,\n    tipicamente o MUA liga-se a um \\emph{mail transfer agent} (MTA),\n    que recebe a mensagem, analisa os cabeçalhos da mesma para\n    determinar os vários destinatários e, após consulta do sistema DNS\n    para determinar quais os MTA responsáveis por cada um dos\n    destinatários, liga-se aos MTAs responsáveis pelos endereços de\n    destino para entregar a mensagem.  Cada um desses MTAs recebe a\n    mensagem e armazena-a localmente ou reenvia-a para outros MTAs até\n    que a mensagem chegue ao MTA do destino.  O utilizador\n    destinatário da mensagem irá depois usar o seu MUA para ver as\n    mensagens que lhe foram enviadas.  Para isso o MUA liga-se a um\n    servidor IMAP ou POP para obter as mensagens que lhe foram\n    destinadas.  Esses servidores IMAP e POP obtêm as mensagens de um\n    utilizador consultando as mensagens armazenadas pelo MTA.\n\n    Tendo em conta esta descrição simplificada do funcionamento do\n    sistema de email, qual dos estilos arquitecturais lhe parece mais\n    adequada para representar o padrão de interacção existente entre o\n    MTA e os servidores de IMAP e POP?\n\n    	\N
200	\N	\N	\n    O estilo arquitectural Aspectos (\\emph{Aspects}) foi mais\n    recentemente introduzido como um estilo do tipo de vista módulo.\n    A utilização deste estilo na arquitectura de software de um sistema\n\n    	\N
201	\N	\N	\n    Qual das seguintes frases melhor caracteriza o sistema ZeroMQ\n    \n    	\N
202	\N	\N	\n    No documento que descreve o ZeroMQ pode ler-se o seguinte:\n    \\begin{quote}\n      The idea was to launch one worker thread per CPU core---having\n      two threads sharing the same core would only mean a lot of\n      context switching for no particular advantage.\n    \\end{quote}\n    Qual é o estilo arquitectural mais adequado para representar esta\n    decisão de desenho?\n\n    	\N
203	\N	\N	\n    No documento que descreve o ZeroMQ pode ler-se o seguinte:\n    \\begin{quote}\n      Messaging patterns form a layer (the so-called "scalability\n      layer") on top of the transport layer (TCP and friends).\n      Individual messaging patterns are implementations of this layer.\n    \\end{quote}\n    Qual é a principal vantagem da adopção desta arquitectura de\n    camadas pelo ZeroMQ?\n\n    	\N
204	\N	\N	\n    O ZeroMQ usa \\emph{batching} dinâmico para controlar o desempenho\n    do sistema.  A utilização desta abordagem tem como objectivo\n\n    	\N
205	\N	\N	\n    No documento que descreve o ZeroMQ pode ler-se o seguinte:\n    \\begin{quote}\n      ØMQ uses a lock-free queue in pipe objects to pass messages\n      between the user's threads and ØMQ's worker threads.  There are\n      two interesting aspects to how ØMQ uses the lock-free queue.\n      First, each queue has exactly one writer thread and exactly one\n      reader thread.  If there's a need for 1-to-N communication,\n      multiple queues are created.  Given that this way the queue\n      doesn't have to take care of synchronising the writers (there's\n      only one writer) or readers (there's only one reader) it can be\n      implemented in an extra-efficient way.\n    \\end{quote}\n    O estilo arquitectural que melhor representa o padrão de\n    interacção descrito acima é\n\n    	\N
206	\N	\N	\n    O principal \\emph{architectural driver} para o sistema nginx foi\n\n    	\N
207	\N	\N	\n    No documento que descreve o nginx pode ler-se o seguinte:\n    \\begin{quote}\n      Traditional process- or thread-based models of handling\n      concurrent connections involve handling each connection with a\n      separate process or thread, and blocking on network or\n      input/output operations.  nginx followed a different model.  It\n      was actually inspired by the ongoing development of advanced\n      event-based mechanisms in a variety of operating systems.  What\n      resulted is a modular, event-driven, asynchronous,\n      single-threaded, non-blocking architecture which became the\n      foundation of nginx code.\n    \\end{quote}\n    A decisão de fazer o nginx como um sistema \\emph{event-driven},\n    \\emph{asynchronous}, \\emph{single-threaded}, e \\emph{non-blocking}\n    foi porque\n\n    	\N
208	\N	\N	\n    No documento que descreve o nginx pode ler-se o seguinte:\n    \\begin{quote}\n      nginx's modular architecture generally allows developers to\n      extend the set of web server features without modifying the\n      nginx core.  nginx modules come in slightly different\n      incarnations, namely core modules, event modules, phase\n      handlers, protocols, variable handlers, filters, upstreams and\n      load balancers.  [...]  Event modules provide a particular\n      OS-dependent event notification mechanism like kqueue or epoll.\n      Protocol modules allow nginx to communicate through HTTPS,\n      TLS/SSL, SMTP, POP3 and IMAP.\n    \\end{quote}\n    Que estilo arquitectural é mais adequado para representar a\n    informação acima?\n\n    	\N
209	\N	\N	\n    No documento que descreve o nginx pode ler-se o seguinte:\n    \\begin{quote}\n      Traditional process- or thread-based models of handling\n      concurrent connections involve handling each connection with a\n      separate process or thread, and blocking on network or\n      input/output operations.\n    \\end{quote}\n    O estilo arquitectural que melhor descreve o modelo descrito acima\n    para o processamento de pedidos é\n\t\n    	\N
210	\N	\N	\n    No documento que descreve o nginx pode ler-se o seguinte:\n    \\begin{quote}\n      While handling a variety of actions associated with accepting,\n      processing and managing network connections and content\n      retrieval, nginx uses event notification mechanisms and a number\n      of disk I/O performance enhancements in Linux, Solaris and\n      BSD-based operating systems, like kqueue, epoll, and event\n      ports.  The goal is to provide as many hints to the operating\n      system as possible, in regards to obtaining timely asynchronous\n      feedback for inbound and outbound traffic, disk operations,\n      reading from or writing to sockets, timeouts and so on.\n    \\end{quote}\n    Esta abordagem usada no desenvolvimento do nginx tem como objectivo\n\n    	\N
211	\N	\N	\n    Dois dos \\emph{stakeholders} identificados para o \\ghc{} foram o\n    governo do Reino Unido e os investigadores que pretendem fazer\n    investigação em linguagens de programação funcionais.  Qual destes\n    \\emph{stakeholders} teve uma maior influência na arquitectura de\n    software do sistema?\n\n    	\N
212	\N	\N	\n    No documento que descreve o \\ghc{} pode ler-se o seguinte:\n    \\begin{quote}\n      At the highest level, GHC can be divided into three distinct\n      chunks:\n      \\begin{itemize}\n      \\item The compiler itself.\n      \\item The Boot Libraries.\n      \\item The Runtime System (RTS). \n      \\end{itemize}\n    \\end{quote}\n    Qual a forma mais correcta de caracterizar arquitecturalmente os\n    três \\emph{chunks} a que este texto se refere?\n\n     	\N
213	\N	\N	\n    Uma das decisões importantes no desenvolvimento do \\ghc{} foi a de\n    se fazer a verificação de tipos antes da transformação de um\n    programa em Haskell para um programa na linguagem Core\n    (\\emph{type-check-before-desugar}).  Esta decisão de desenho\n\n    	\N
324	\N	\N	\n\t  Uma das qualidades do \\ch{} é executar o código JavaScript dentro de um processo, permitindo isolar possíveis interferências entre a execução de JavaScripts com diferentes origens. O grau de isolamento\n\t      \n    	\N
214	\N	\N	\n    No documento que descreve o \\ghc{} pode ler-se o seguinte:\n    \\begin{quote}\n      The Runtime System is a library of mostly C code that is linked\n      into every Haskell program. It provides the support\n      infrastructure needed for running the compiled Haskell code,\n      including the following main components:\n      \\begin{itemize}\n      \\item Memory management, including a parallel, generational, garbage collector;\n      \\item Thread management and scheduling;\n      \\item The primitive operations provided by GHC;\n      \\item A bytecode interpreter and dynamic linker for GHCi.\n      \\end{itemize}\n    \\end{quote}\n    Que qualidades do sistema são melhoradas pela decisão de criar\n    o \\emph{Runtime System} indicado acima?\n\n    	\N
215	\N	\N	\n    Tal como muitos outros compiladores, a compilação de um programa\n    Haskell com o \\ghc{} utiliza o estilo \\emph{pipe-and-filter},\n    criando um \\emph{pipeline} composto por várias fases de\n    compilação.  A utilização deste estilo arquitectural no GHC tem\n    como objectivo\n\n    	\N
216	\N	\N	\n    No documento que descreve a arquitectura de um serviço web (em\n    anexo), uma das abordagens introduzidas na Secção~1.2 é a de\n    \\emph{partitioning}, ilustrada na Figura~1.4.  A utilização de\n    \\emph{partitioning} faz com que\n\n    	\N
217	\N	\N	\n    Considerando ainda o caso da pergunta anterior, compare as\n    arquitecturas esboçadas nas Figura~1.3 e Figura~1.4.  A diferença\n    entre as duas arquitecturas manifesta-se\n\n    	\N
218	\N	\N	\n    Considere a arquitectura apresentada na Figura~1.3 do caso das\n    perguntas anteriores, em que se introduziu redundância no sistema.\n    Neste caso particular, a introdução de redundância na arquitectura\n    tem como objectivo\n\n    	\N
219	\N	\N	\n    A arquitectura de software típica de uma aplicação empresarial é\n    composta por três \\emph{tiers} e por três camadas.  No entanto,\n    podemos ter variações a esta arquitectura.  Por exemplo, separando\n    o \\emph{tier} do meio em dois \\emph{tiers}.  Neste caso, que\n    alterações é que existem ao nível da arquitectura de camadas?\n\n    	\N
220	\N	\N	\n    No documento que descreve a arquitectura de serviços web pode\n    ler-se o seguinte:\n    \\begin{quote}\n      Another critical piece of any distributed system is a load\n      balancer.  Load balancers are a principal part of any\n      architecture, as their role is to distribute load across a set\n      of nodes responsible for servicing requests.  This allows\n      multiple nodes to transparently service the same function in a\n      system.  Their main purpose is to handle a lot of simultaneous\n      connections and route those connections to one of the request\n      nodes, allowing the system to scale to service more requests by\n      just adding nodes.\n    \\end{quote}\n    Com base na descrição acima, qual lhe parece ser a melhor forma de\n    representar a arquitectura de um sistema que esteja a usar um\n    \\emph{load balancer}?\n\n    	\N
258	\N	\N	\n    Tal como mencionado nas perguntas anteriores, a utilização de\n    \\emph{workers} é um dos elementos cruciais na arquitectura de\n    software do nginx.  Qual das seguintes afirmações melhor descreve\n    o funcionamento dos \\emph{workers} no nginx?\n\n    	\N
259	\N	\N	\n    Uma vez que um \\emph{worker} processa vários pedidos ao longo da\n    sua vida, como é que o faz?\n\t\n    	\N
251	\N	\N	\n    No documento que descreve o ZeroMQ pode ler-se o seguinte:\n    \\begin{quote}\n      One of the requirements for ØMQ was to take advantage of\n      multi-core boxes; in other words, to scale the throughput\n      linearly with the number of available CPU cores.\n    \\end{quote}\n    Para satisfazer este requisito, a solução adoptada pelo ZeroMQ foi\n\n    	\N
252	\N	\N	\n    Sabendo que no documento que descreve o ZeroMQ se encontra a\n    seguinte afirmação:\n    \\begin{quote}\n      ØMQ is a library, not a messaging server.\n    \\end{quote}\n    Que tipo de vistas são necessárias para descrever a arquitectura\n    de software do ZeroMQ?\n\n    	\N
253	\N	\N	\n    No documento que descreve o ZeroMQ pode ler-se o seguinte:\n    \\begin{quote}\n      It took us several years working on AMQP protocol [...] to\n      realise that there's something wrong with the classic\n      client/server model of smart messaging server (broker) and dumb\n      messaging clients.\n    \\end{quote}\n    Qual é o principal problema, segundo os autores, do modelo baseado\n    num \\emph{broker}?\n    \n    	\N
254	\N	\N	\n    No documento que descreve o ZeroMQ pode ler-se o seguinte:\n    \\begin{quote}\n      The objects that handle data transfer are composed of two parts:\n      the session object is responsible for interacting with the ØMQ\n      socket, and the engine object is responsible for communication\n      with the network.  There's only one kind of the session object,\n      but there's a different engine type for each underlying protocol\n      ØMQ supports.  Thus, we have TCP engines, IPC engines, PGM\n      engines, etc.  The set of engines is extensible---in the future\n      we may choose to implement, say, a WebSocket engine or an SCTP\n      engine.\n    \\end{quote}\n    Supondo que o código que implementa o \\emph{session object} não\n    precisa ser modificado quando um novo tipo de \\emph{engine} é\n    adicionado ao sistema, que vistas arquitecturais são mais\n    indicadas para mostrar este aspecto de extensibilidade do sistema?\n\n    	\N
255	\N	\N	\n    No documento que descreve o ZeroMQ pode ler-se o seguinte:\n    \\begin{quote}\n      In early versions of ØMQ the API was based on AMQP's model of\n      exchanges and queues.  I spent the end of 2009 rewriting it\n      almost from scratch to use the BSD Socket API instead.\n    \\end{quote}\n    Esta mudança no sistema teve como objectivo satisfazer que tipo de\n    requisitos?\n\n    	\N
256	\N	\N	\n    No documento que descreve o nginx pode ler-se o seguinte:\n    \\begin{quote}\n      nginx runs several processes in memory; there is a single master\n      process and several worker processes.  There are also a couple\n      of special purpose processes, specifically a cache loader and\n      cache manager.  All processes are single-threaded in version 1.x\n      of nginx.  All processes primarily use shared-memory mechanisms\n      for inter-process communication.\n    \\end{quote}\n    Supondo que pretende dar ênfase à forma como os vários processos\n    do nginx comunicam entre si, que estilo arquitectural lhe parece\n    mais adequado para representar a informação acima?\n\n    	\N
257	\N	\N	\n    Na continuação da descrição apresentada na pergunta anterior, mais\n    abaixo no documento pode ler-se o seguinte:\n    \\begin{quote}\n      Caching in nginx is implemented in the form of hierarchical data\n      storage on a filesystem.  Cache keys are configurable, and\n      different request-specific parameters can be used to control\n      what gets into the cache.  Cache keys and cache metadata are\n      stored in the shared memory segments, which the cache loader,\n      cache manager and workers can access.\n    \\end{quote}\n    Que estilo arquitectural lhe parece mais adequado para representar\n    a utilização da \\emph{cache} no nginx?\n\n    	\N
534	\N	\N	\n\tThe software architecture of a system is usually represented through several views because we need to\n\n  	\N
260	\N	\N	\n    O principal \\emph{architectural driver} para o sistema nginx foi\n    conseguir resolver o \\emph{problema C10K}: conseguir manter 10.000\n    ligações simultâneas num único servidor a executar em\n    \\emph{hardware} convencional.  Para isso acontecer, foi preciso\n    que o nginx\n\n    	\N
261	\N	\N	\n    O documento que descreve o \\ghc{} apresenta duas decisões de\n    desenho relativamente ao desenvolvimento do \\emph{Runtime System}.\n    A primeira dessas decisões é descrita da seguinte forma:\n    \\begin{quote}\n      The garbage collector is built on top of a block layer that\n      manages memory in units of blocks, where a block is a multiple\n      of 4 KB in size. The block layer has a very simple API: [...].\n      This is the only API used by the garbage collector for\n      allocating and deallocating memory.  Blocks of memory are\n      allocated with \\texttt{allocGroup} and freed with\n      \\texttt{freeGroup}.\n    \\end{quote}\n    Que estilo arquitectural lhe parece mais adequado para representar\n    esta decisão de desenho?\n\n    	\N
262	\N	\N	\n    Qual foi o principal objectivo dos autores do GHC ao tomar a\n    decisão de desenho descrita na pergunta anterior?\n    \n    	\N
263	\N	\N	\n    Alguns dos \\emph{architectural drivers} do \\ghc{} estão\n    relacionados com a extensibilidade do sistema, e uma das soluções\n    adoptadas pelos autores do GHC para providenciar essa\n    extensibilidade foi a introdução de \\emph{user-defined rewrite\n      rules}, descrita no documento da seguinte forma:\n    \\begin{quote}\n      The core of GHC is a long sequence of optimisation passes, each\n      of which performs some semantics-preserving transformation,\n      \\texttt{Core} into \\texttt{Core}.  But the author of a library\n      defines functions that often have some non-trivial,\n      domain-specific transformations of their own, ones that cannot\n      possibly be predicted by GHC.  So GHC allows library authors to\n      define rewrite rules that are used to rewrite the program during\n      optimisation.  In this way, programmers can, in effect, extend\n      GHC with domain-specific optimisations.\n    \\end{quote}\n    Como é que esta solução se manifesta ao nível da arquitectura do\n    sistema?\n\n    	\N
264	\N	\N	\n    No documento que descreve o \\ghc{} pode ler-se o seguinte:\n    \\begin{quote}\n      As the popularity of the Haskell language has grown, there has\n      been an increasing need for tools and infrastructure that\n      understand Haskell source code, and GHC of course contains a lot\n      of the functionality necessary for building these tools: a\n      Haskell parser, abstract syntax, type checker and so on.  With\n      this in mind, we made a simple change to GHC: rather than\n      building GHC as a monolithic program, we build GHC as a library,\n      that is then linked with a small Main module to make the GHC\n      executable itself, but also shipped in library form so that\n      users can call it from their own programs.  At the same time we\n      built an API to expose GHC's functionality to clients.\n    \\end{quote}\n    Supondo que quer apresentar um diagrama arquitectural para\n    representar a descrição apresentada acima, qual lhe parece mais\n    adequado?\n    \n    	\N
265	\N	\N	\n    No documento que descreve o \\ghc{} pode ler-se o seguinte:\n    \\begin{quote}\n      Once the \\texttt{Core} program has been optimised, the process\n      of code generation begins.  The code generator first converts\n      the \\texttt{Core} into a language called \\texttt{STG}, which is\n      essentially just \\texttt{Core} annotated with more information\n      required by the code generator.  Then, \\texttt{STG} is\n      translated to \\texttt{Cmm}, a low-level imperative language with\n      an explicit stack.  From here, the code takes one of three\n      routes:\n      \\begin{itemize}\n      \\item Native code generation: [...]\n      \\item LLVM code generation: [...]\n      \\item C code generation: [...]\n      \\end{itemize}\n    \\end{quote}\n    Ou seja, o GHC pode usar um de três geradores de código\n    alternativos, que têm qualidades diferentes (omitidas no excerto\n    apresentado acima).  Supondo que quer apresentar um diagrama\n    arquitectural para representar a descrição apresentada acima, qual\n    lhe parece mais adequado?\n\n    	\N
266	\N	\N	\n    Considere a figura 1.8 no documento que descreve a utilização de\n    caches em serviços web (em anexo).  Nessa figura, aparece um\n    rectângulo com a designação \\emph{Cache} dentro de um rectângulo\n    designado \\emph{Request Node}.  Tendo em conta a descrição feita\n    no texto e o objectivo dessa figura, esses rectângulos\n    correspondem a que tipo de elementos de software na arquitectura\n    de software apresentada?\n\n    	\N
267	\N	\N	\n    Considere a alteração na arquitectura introduzida com a passagem\n    da figura 1.9 para a figura 1.10 no documento que descreve a\n    utilização de caches em serviços web (em anexo).  Essa alteração\n    tem como objectivo e consequência, respectivamente\n\n    	\N
268	\N	\N	\n    Considere o parágrafo assinalado com o número 1 no documento que\n    descreve a utilização de caches em serviços web (em anexo), onde\n    se introduz o conceito de \\emph{distributed cache}.  Que estilo\n    arquitectural melhor representa o padrão de interacção existente\n    entre os vários \\emph{request nodes}?\n    \n    	\N
269	\N	\N	\n    Considere o parágrafo assinalado com o número 2 no documento que\n    descreve a utilização de caches em serviços web (em anexo), onde\n    se fala sobre a falha de um dos nós da \\emph{cache} distribuída.\n    Quando isso acontece, que consequências existem para o serviço\n    web?\n\n    	\N
270	\N	\N	\n    Considere a seguinte descrição do \\emph{Memcached}, que é uma\n    adaptação do que aparece no seu Wiki:\n    \\begin{quote}\n      Memcached is an in-memory key-value store for small chunks of\n      arbitrary data from results of database calls, API calls, or\n      page rendering.  It is made up of:\n      \\begin{itemize}\n      \\item Client software, which is given a list of available memcached servers.\n      \\item A client-based hashing algorithm, which chooses a server\n        based on the "key" input.\n      \\item Server software, which stores your values with their keys\n        into an internal hash table.\n      \\item Server algorithms, which determine when to throw out old\n        data (if out of memory), or reuse memory.\n      \\end{itemize}\n    \\end{quote}\n    Suponha que pretendia apresentar uma vista arquitectural para o\n    \\emph{Memcached} que represente a informação acima.  Que vista é\n    mais adequada?\n\n    	\N
271	\N	\N	\n    Uma das principais mudanças introduzidas na arquitectura do\n    sistema Fénix, relativamente à sua primeira arquitectura foi\n    \n    	\N
272	\N	\N	\n    Vários dos casos estudados na cadeira tinham requisitos de\n    desempenho.  Que vistas arquitecturais são normalmente necessárias\n    para mostrar a satisfação desses requisitos?\n\n    	\N
273	\N	\N	\n    Suponha que está a desenvolver uma arquitectura de software para\n    um novo sistema de grandes dimensões e que no desenvolvimento se\n    pretende recorrer extensivamente a empresas subcontratadas para o\n    desenvolvimento de várias partes do sistema.  Que estilos\n    arquitecturais são mais úteis para planear o desenvolvimento do\n    sistema neste cenário?\n\n    	\N
274	\N	\N	\n    A utilização do estilo arquitectural Aspectos (\\emph{Aspects})\n    promove a modificabilidade de um sistema porque\n\n    	\N
275	\N	\N	\n    Suponha que está a desenvolver a arquitectura de software de um\n    novo sistema para uma organização que tem várias unidades\n    organizacionais, cada uma das quais com os seus sistemas de\n    informação, que foram desenvolvidos independentemente uns dos\n    outros ao longo de vários anos e dependendo das necessidades\n    particulares de cada unidade.  O seu sistema tem como objectivo\n    integrar os vários sistemas existentes, providenciando desta forma\n    não só uma visão consolidada do funcionamento da organização, mas\n    também permitir a criação de novos processos dentro da organização\n    que envolvam mais do que uma unidade.  Que estilo arquitectural\n    lhe parece mais adequado para desenhar o seu sistema?\n    \n    	\N
276	\N	\N	\n    O sistema de email é composto por vários tipos de componentes que\n    desempenham diferentes funções.  Por exemplo, para enviar um\n    email, um utilizador usa um \\emph{mail user agent} (MUA), para\n    compor a sua mensagem e enviá-la.  Para enviar a mensagem,\n    tipicamente o MUA liga-se a um \\emph{mail transfer agent} (MTA),\n    que recebe a mensagem, analisa os cabeçalhos da mesma para\n    determinar os vários destinatários e, após consulta do sistema DNS\n    para determinar quais os MTA responsáveis por cada um dos\n    destinatários, liga-se aos MTAs responsáveis pelos endereços de\n    destino para entregar a mensagem.  Cada um desses MTAs recebe a\n    mensagem e armazena-a localmente ou reenvia-a para outros MTAs até\n    que a mensagem chegue ao MTA do destino.  O utilizador\n    destinatário da mensagem irá depois usar o seu MUA para ver as\n    mensagens que lhe foram enviadas.  Para isso o MUA liga-se a um\n    servidor IMAP ou POP para obter as mensagens que lhe foram\n    destinadas.  Esses servidores IMAP e POP obtêm as mensagens de um\n    utilizador consultando as mensagens armazenadas pelo MTA.\n\n    Tendo em conta esta descrição simplificada do funcionamento do\n    sistema de email, qual dos estilos arquitecturais lhe parece mais\n    adequada para representar o padrão de interacção existente entre o\n    MUA e o MTA?\n\n    	\N
277	\N	\N	\n    Suponha que para satisfazer um requisito de disponibilidade\n    relacionado com a existência de faltas ao nível da infraestrutura\n    de rede usada pelo seu sistema, pretende utilizar a táctica\n    designada por \\emph{Ping/Echo}.  Como é que a utilização dessa\n    táctica se manifesta nas vistas da arquitectura do seu sistema?\n\n    	\N
278	\N	\N	\n    Suponha que está a desenvolver uma aplicação web que mantém numa\n    base de dados alguma informação introduzida pelos utilizadores, e\n    que um dos requisitos é que essa informação seja mantida\n    confidencial, não podendo ser vista por ninguém para além do\n    utilizador que a produziu (e que deve poder aceder a essa\n    informação novamente sempre que quiser).  Como é que satisfazia\n    este requisito?\n\n    	\N
279	\N	\N	\n    As aplicações web têm sofrido várias evoluções ao longo dos\n    últimos anos.  Uma dessas evoluções foi o enriquecimento da sua\n    interface com o utilizador, que tira partida de novas tecnologias\n    existentes nos \\emph{browsers}, como, por exemplo, o Javascript,\n    para providenciar uma experiência de utilização mais rica.  Quais\n    foram as consequências mais visíveis desta evolução na típica\n    arquitectura de software de uma aplicação web?\n\n    	\N
280	\N	\N	\n    Um dos termos frequentemente utilizado para descrever a\n    arquitectura de software de um sistema é o termo \\emph{tier},\n    sendo comum, por exemplo, falar-se em sistemas \\emph{multi-tier}.\n    Tendo em conta os vários tipos de elementos de software que\n    compõem uma arquitectura de software, um \\emph{tier} é \n\n    	\N
311	\N	\N	\n\t  Os estilos arquiteturais Instalação (\\emph{Install}) e Implementação (\\emph{Implementation})\n\t      \n      	\N
312	\N	\N	\n\t  As qualidades arquiteturalmente significativas da segunda arquitetura do sistema Fénix são\n\t      \n      	\N
313	\N	\N	\n\t  Quais são as principais qualidades do sistema \\mw{}?\n    \n    	\N
314	\N	\N	\n\t  Os estilos arquiteturais que melhor descrevem o sistema \\mw{} do ponto de vista do utilizador final são\n    \n    	\N
315	\N	\N	\n\t  O sistema \\mw{} procura manter um critério de fiabilidade segundo o qual as alterações efetuadas por um escritor são consistentemente visualizadas nas suas subsequentes leituras\n    \n    	\N
316	\N	\N	\n\t  O sistema \\mw{} procura assegurar um critério de fiabilidade segundo o qual a informação escrita há mais de 30 segundos está disponível para leitura para todos os leitores, para se alcançar este critério o distribuidor de carga  \n    \n    	\N
317	\N	\N	\n\t  Na descrição do sistema \\mw{} indica-se que:\n\t  \\newline\n\t  \n\t  \\emph{To optimize the delivery of JavaScript and CSS assets, the ResourceLoader module was developed to optimize delivery of JS and CSS. Started in 2009, it was completed in 2011 and has been a core feature of MediaWiki since version 1.17. ResourceLoader works by loading JS and CSS assets on demand, thus reducing loading and parsing time when features are unused, for example by older browsers. It also minifies the code, groups resources to save requests, and can embed images as data URIs.}\n\t  \\newline\n\t  \n\t  O \\emph{ResourceLoader} implementa uma tática de \n    \n    	\N
318	\N	\N	\n\t  O padrão Unidade de Trabalho (\\emph{Unit of Work}) pode ser implementado no servidor aplicacional, enquanto que no repositório continua a ser necessário usar transações para aceder aos dados. Neste caso\n\t      \n      	\N
319	\N	\N	\n\t  A qualidade da disponibilidade pode ser suportada pela tática de votação de forma a identificar faltas de \n\t      \n      	\N
320	\N	\N	\n\t  No \\ch{}, para se atingir a qualidade da segurança, o processo \\emph{Browser} implementa uma tática de\n    \n    	\N
321	\N	\N	\n\t  No \\ch{} pode-se associar um processo \\emph{Renderer} a cada \\emph{Tab}, o que resulta no aumento do desempenho através de uma tática de \n    \n    	\N
322	\N	\N	\n\t  \n\t  Na descrição do caso \\ch{} pode-se ler:\n\t  \\newline\n\t  \n\t  \\emph{On Android devices, Chrome leverages the same multi-process architecture as the desktop version - there is a browser process, and one or more renderer processes. The one difference is that due to memory constraints of the mobile device, Chrome may not be able to run a dedicated renderer for each open tab. Instead, Chrome determines the optimal number of renderer processes based on available memory, and other constraints of the device, and shares the renderer process between the multiple tabs.} \n\t  \\newline\n\t  \n\t  A descrição acima pode ser representada numa vista do tipo Componente-e-Conetor utilizando o estilo arquitetural\t  \n\t  \n    	\N
323	\N	\N	\n\t  Uma vantagem do \\ch{} relativamente ao Amazon Silk está relacionada com \n\t      \n    	\N
325	\N	\N	\n\t  Na descrição do caso \\ch{} pode-se ler:\n\t  \\newline\n\t  \n\t  \\emph{Typing in the Omnibox (URL) bar triggers high-likelihood suggestions, which may similarly kick off a DNS lookup, TCP pre-connect, and even prerender the page in a hidden tab.} \n\t  \\newline\n\t  \n\t  A descrição acima refere\n\t      \n    	\N
326	\N	\N	\n\t  Nos casos em que a fonte dos ataques é interna à organização as táticas mais eficazes são\n\t      \n      	\N
327	\N	\N	\n\t  O detalhe em que se aplica o estilo arquitetural Modelo de Dados pode ser ao nível conceptual, lógico ou físico.\n\t  \n      	\N
328	\N	\N	\n    No sistema \\gp{} as \\emph{receiver} e as \\emph{writer threads} suportam a escrita assíncrona de métricas de forma a otimizar os acessos a disco. A interação entre estes dois componentes segue o estilo arquitetural\n\n    	\N
329	\N	\N	\n    No sistema \\gp{} o componente \\emph{carbon-relay} implementa uma tática de\n\n    	\N
330	\N	\N	\n    Que qualidade, ou qualidades, do sistema \\gp{} é(são) expressa(s) na frase: \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL.}\n\n    	\N
331	\N	\N	\n\t  Algumas qualidades de usabilidade não são arquiteturais pois\n\t  \n      	\N
332	\N	\N	\n\t  Num sistema \\emph{world-wide}, como o Facebook ou o Amazon\n\t  \n      	\N
333	\N	\N	\n\t  Na descrição do \\gm{} indica-se que:\n  \\newline\n  \n  \\emph{In Mailman 2, the MailList object's state is stored in a file called config.pck, which is just the pickled representation of the MailList object's dictionary. Every Python object has an attribute dictionary called \\_\\_dict\\_\\_. So saving a mailing list object then is simply a matter of pickling its \\_\\_dict\\_\\_ to a file, and loading it just involves reading the pickle from the file and reconstituting its \\_\\_dict\\_\\_.}\n  \\newline\n\t  \n\t  Esta solução, não obstante simples, trouxe diversos problemas pois a qualidade do desempenho é penalizada devido:\n\t  \n\t      \n    	\N
334	\N	\N	\n\t  Na descrição do \\gm{} indica-se que:\n  \\newline\n  \n  \\emph{Mailman 3 has adopted the Representational State Transfer (REST) model for external administrative control. REST is based on HTTP, and Mailman's default object representation is JSON. These protocols are ubiquitous and well-supported in a large variety of programming languages and environments, making it fairly easy to integrate Mailman with third party systems. REST was the perfect fit for Mailman 3, and now much of its functionality is exposed through a REST API.}\n  \\newline\n\t  \n\t  Esta solução permitiu:\n\t      \n    	\N
335	\N	\N	\n\t  Na descrição do \\gm{} indica-se que:\n  \\newline\n  \n  \\emph{Once a message has made its way through the chains and rules and is accepted for posting, the message must be further processed before it can be delivered to the final recipients. For example, some headers may get added or deleted, and some messages may get some extra decorations that provide important disclaimers or information, such as how to leave the mailing list.}\n  \\newline\n\t  \n\t  Em que o estilo arquitetural Canais-e-Filtros é usado no tratamento das mensagens. Neste contexto o tipo de dados que é passado entre os filtros é\n\t      \n    	\N
336	\N	\N	\n\t  Na descrição do \\gm{} propõe-se uma solução para garantir que nas situações em que vários \\emph{queue runners} executam sobre a mesma \\emph{queue} a entrega de mensagens é feita por ordem de chegada.\n  \\newline\n  \n  \\emph{There's another side effect of this algorithm that did cause problems during the early design of this system. Despite the unpredictability of email delivery in general, the best user experience is provided by processing the queue files in FIFO order, so that replies to a mailing list get sent out in roughly chronological order.}\n\t      \n    	\N
339	\N	\N	\n\t  No estilo arquitetural Publicação-Subscrição os componentes, do ponto de vista da facilidade de modificação dos módulos que executam\n\t  \n      	\N
340	\N	\N	\n\t  A elasticidade de um sistema, entendida como a capacidade do sistema se adaptar com facilidade a alterações de carga, é muitas vezes apresentada como uma característica necessária para a qualidade da escalabilidade. Para o grau dessa facilidade de adaptação contribuem soluções arquiteturais associadas\n\t      \n      	\N
337	420	\N	\n\t  A função do componente \\emph{Master Runner} do \\gm{} pode ser representada usando o estilo arquitetural\n\t      \n    	\N
338	419	\N	\n\t  No Mailman 3 as mensagens continuam a ser guardadas persistentemente usando \\emph{pickle} pois\n\t      \n    	\N
371	\N	\N	\n\t  O desenho da arquitetura do sistema \\mw{} foi condicionado por uma restrição associada à necessidade de ter uma solução de baixo custo. Para isso foi tomada a decisão arquitetural de\n    \n    	\N
372	\N	\N	\n\t  Considere uma vista arquitetural do tipo Componente-e-Conetor do sistema \\mw{} em que todos os clientes estão ligados a um servidor através de um conetor de pedido-resposta que suporta as qualidades de disponibilidade e desempenho. Este conetor implementa uma tática de \n    \n    	\N
373	\N	\N	\n\t  O critério de fiabilidade do sistema \\mw{}, segundo o qual as alterações efetuadas por um escritor são consistentemente preservadas nas suas subsequentes leituras, é implementado \n    \n    	\N
374	\N	\N	\n\t  O sistema \\mw{} procura assegurar um critério de fiabilidade segundo o qual a informação escrita há mais de 30 segundos deverá estar disponível para leitura para todos os leitores. Para se alcançar este critério é implementada uma tática de  \n    \n    	\N
375	\N	\N	\n\t  Na descrição do sistema \\mw{} indica-se que:\n\t  \\newline\n\t  \n\t  \\emph{The first revision of the blob is stored in full, and following revisions to the same page are stored as diffs relative to the previous revision; the blobs are then gzipped. Because the revisions are grouped per page, they tend to be similar, so the diffs are relatively small and gzip works well. The compression ratio achieved on Wikimedia sites nears 98\\%.}\n\t  \\newline\n\t  \n\t  A transcrição refere uma tática de \n    \n    	\N
376	\N	\N	\n\t  A internacionalização da interface utilizador é suportada pela(s) tática(s)\n\t      \n      	\N
377	\N	\N	\n\t  Para se poder implementar o padrão Mapa de Identidades (\\emph{Identity Map}) \n\t      \n      	\N
378	\N	\N	\n    No sistema \\gp{} o componente \\emph{carbon} fornece aos componentes \\emph{webapp} uma interface de acesso aos \\emph{buffers} com o objetivo de melhorar a(s) qualidade(s) de\n\n    	\N
379	\N	\N	\n    Uma vista arquitetural de mais alto nível do tipo Componente-e-Conetor do sistema \\gp{} pode ser desenhada usando apenas o(s) estilo(s) arquitetural(ais)\n\n    	\N
532	\N	\N	\n  Ralph Johnson says that\n  \n  \\begin{quote}\n\t  Architecture is the decisions that you wish you could get right early in a project.\n  \\end{quote}\n  \n  This sentence reflects the fact that\n\n  	\N
380	\N	\N	\n    O componente \\emph{Composer UI} do sistema \\gp{}, descrito como - \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL} - para ser eficaz necessita de mostrar ao utilizador as alterações que efetua ao gráfico de modo a que este obtenha retorno imediato sobre o resultado de cada uma das alterações que acaba de fazer. Para isso o sistema deve implementar táticas de\n\n    	\N
381	\N	\N	\n\t  Na programação defensiva o programador verifica se todos as condições em que os módulos são invocados estão de acordo com a sua especificação, devendo, caso contrário, lançar uma exceção por forma a evitar a propagação da falta. Quando a programação defensiva é aplicada no contexto da qualidade da disponibilidade está-se a usar uma tática de\n\t      \n      	\N
382	\N	\N	\n\t  No padrão de desenho Observador, em que o modelo invoca um método de notificação nos seus observadores sempre que sofre alterações, pode-se afirmar em termos da relação de Usa do estilo arquitetural Utilização que\n\t      \n      	\N
383	\N	\N	\n\t  Considere os estilos arquiteturais Utilização e Camadas.\n\t  \n      	\N
384	\N	\N	\n\t  Na descrição do \\gm{} indica-se que:\n  \\newline\n  \n  \\emph{Mailman 3 has adopted the Representational State Transfer (REST) model for external administrative control. REST is based on HTTP, and Mailman's default object representation is JSON. These protocols are ubiquitous and well-supported in a large variety of programming languages and environments, making it fairly easy to integrate Mailman with third party systems. REST was the perfect fit for Mailman 3, and now much of its functionality is exposed through a REST API.}\n  \\newline\n\t  \n\t  Esta solução permitiu aumentar a qualidade da interoperabilidade pois \n\t      \n    	\N
385	\N	\N	\n\t  Na descrição do \\gm{} indica-se que:\n  \\newline\n  \n  \\emph{Once a message has made its way through the chains and rules and is accepted for posting, the message must be further processed before it can be delivered to the final recipients. For example, some headers may get added or deleted, and some messages may get some extra decorations that provide important disclaimers or information, such as how to leave the mailing list.}\n  \\newline\n\t  \n\t  O estilo arquitetural que se adequa a um processamento flexível das mensagens é\n\t      \n    	\N
386	\N	\N	\n\t  Na descrição do \\gm{} indica-se que:\n  \\newline\n  \n  \\emph{Email messages can act as containers for other types of data, as defined in the various MIME standards. A container message part can encode an image, some audio, or just about any type of binary or text data, including other container parts.}\n  \\newline\n\t  \n\t  O estilo arquitetural que mais se adequa à representação da transcrição acima é\n\t      \n    	\N
387	\N	\N	\n\t  Na descrição do \\gm{} indica-se que:\n  \\newline\n  \n  \\emph{...Mailman supports running more than one runner process per queue directory...}\n  \\newline\n  \n  Com o objetivo de assegurar\n\t      \n    	\N
388	\N	\N	\n\t  Na descrição do \\gm{} indica-se que:\n  \\newline\n  \n  \\emph{VERP stands for Variable Envelope Return Path, and it is a well-known technique that mailing lists use to unambiguously determine bouncing recipient addresses. When an address on a mailing list is no longer active, the recipient's mail server will send a notification back to the sender. In the case of a mailing list, you want this bounce to go back to the mailing list, not to the original author of the message; the author can't do anything about the bounce, and worse, sending the bounce back to the author can leak information about who is subscribed to the mailing list. When the mailing list gets the bounce, however, it can do something useful, such as disable the bouncing address or remove it from the list's membership.}\n  \\newline\n  \n  Esta transcrição descreve qualidade(s) de\n\t      \n    	\N
389	\N	\N	\n\t  Na descrição do \\gm{} indica-se que:\n  \\newline\n  \n  \\emph{There is a core Mailman class called Switchboard which provides an interface for enqueuing (i.e., writing) and dequeuing (i.e., reading) the message object tree and metadata dictionary to files in a specific queue directory. Every queue directory has at least one switchboard instance, and every queue runner instance has exactly one switchboard.}\n  \\newline\n  \n  Esta transcrição contém informação útil para vistas do tipo\n\t      \n      	\N
390	\N	\N	\n\t  Uma vista arquitetural\n\t  \n      	\N
391	\N	\N	\n\t  O estilo arquitetural Utilização\n\t  \n      	\N
393	\N	\N	\n\t  Na descrição do caso \\ch{} pode-se ler:\n\t  \\newline\n\t  \n\t  \\emph{Chrome maintains a single instance of the resource dispatcher, which is shared across all render processes, and runs within the browser kernel process.}\n\t  \\newline\n\t  \n\t  O \\emph{Resource Dispatcher} contribui para aumentar a qualidade do desempenho pois implementa uma tática de\n\t      \n    	\N
394	\N	\N	\n\t  Uma vantagem do Amazon Silk relativamente ao \\ch{} está relacionada com \n\t      \n    	\N
395	\N	\N	\n\t  Uma vista arquitetural do tipo Componente-e-Conetor que descreva as interações dentro do componente \\emph{Renderer Process} do \\ch{} utiliza um estilo arquitetural\n\t      \n    	\N
396	\N	\N	\n\t  O \\ch{} faz em algumas situações \\emph{prerender} de páginas. Para isso tira partido da\n\t      \n    	\N
398	\N	\N	\n\t  Os requisitos arquiteturalmente significativos da terceira arquitetura do sistema Fénix são\n\t      \n      	\N
399	\N	\N	\n\t  Na primeira arquitetura do sistema Fénix era frequente os programadores esquecerem-se de reservar (\\emph{lock}) um objeto no contexto de uma transação. Uma solução para esta situação pode ser arquiteturalmente descrita usando uma vista com o estilo arquitetural\n\t      \n      	\N
400	\N	\N	\n\t  Num sistema \\emph{enterprise-wide}, como o sistema Fénix,\n\t  \n      	\N
401	\N	\N	\n    No sistema \\gp{}, com vista a se melhorar o desempenho, o componente \\emph{carbon} não escreve imediatamente em disco, usando um \\emph{buffer}:\n\n    	\N
402	\N	\N	\n    No sistema \\gp{} o componente \\emph{carbon-relay} implementa uma tática de manter múltiplas cópias de computação, com vista a melhorar a qualidade de\n\n    	\N
403	\N	\N	\n    Para descrever a estrutura de um ficheiro \\emph{whisper} do sistema \\gp{} deve-se usar uma vista do tipo vista \n\n    	\N
404	\N	\N	\n\t  No desenho da arquitetura do sistema \\mw{} foi decidido ter apenas um servidor de escrita\n    \n    	\N
405	\N	\N	\n\t  O critério de fiabilidade do sistema \\mw{}, segundo o qual as alterações efetuadas por um escritor são consistentemente preservadas nas suas subsequentes leituras, \n    \n    	\N
406	\N	\N	\n\t  Qual das seguintes qualidades não é relevante para o sistema \\mw{}?\n    \n    	\N
397	412	\N	\n\t  Na descrição do caso \\ch{} pode-se ler:\n\t  \\newline\n\t  \n\t  \\emph{Typing in the Omnibox (URL) bar triggers high-likelihood suggestions, which may similarly kick off a DNS lookup, TCP pre-connect, and even prerender the page in a hidden tab.} \n\t  \\newline\n\t  \n\t  A descrição acima refere qualidades de\n\t      \n    	\N
407	\N	\N	\n\t  O sistema \\mw{} procura assegurar um critério de fiabilidade segundo o qual a informação escrita há mais de 30 segundos está disponível, para leitura, para todos os leitores. Para se alcançar este critério o distribuidor de carga pode deixar de aceitar escritas até que\n    \n    	\N
408	\N	\N	\n\t  Na descrição do sistema \\mw{} indica-se que:\n\t  \\newline\n\t  \n\t  \\emph{To optimize the delivery of JavaScript and CSS assets, the ResourceLoader module was developed to optimize delivery of JS and CSS. Started in 2009, it was completed in 2011 and has been a core feature of MediaWiki since version 1.17. ResourceLoader works by loading JS and CSS assets on demand, thus reducing loading and parsing time when features are unused, for example by older browsers. It also minifies the code, groups resources to save requests, and can embed images as data URIs.}\n\t  \\newline\n\t  \n\t  O \\emph{ResourceLoader} suporta a qualidade de\n    \n    	\N
409	\N	\N	\n\t  O \\ch{}, tal como descrito no caso estudado durante o semestre, foi desenhado para suportar as seguintes qualidades arquiteturais:\n    \n    	\N
410	\N	\N	\n\t  No \\ch{}, ao se associar um processo \\emph{Renderer} a cada \\emph{Tab}, alcançam-se as qualidades de\n    \n    	\N
411	\N	\N	\n\t  O \\ch{} faz em algumas situações \\emph{prerender} de páginas. Com isso consegue alcançar qualidades de\n\t      \n    	\N
412	\N	\N	\n\t  Na descrição do caso \\ch{} pode-se ler:\n\t  \\newline\n\t  \n\t  \\emph{Typing in the Omnibox (URL) bar triggers high-likelihood suggestions, which may similarly kick off a DNS lookup, TCP pre-connect, and even prerender the page in a hidden tab.} \n\t  \\newline\n\t  \n\t  A descrição acima refere qualidade de \n\t      \n    	\N
413	\N	\N	\n\t  Arquiteturalmente o \\ch{} e o Amazon Silk diferem pois\n\t      \n    	\N
414	\N	\N	\n\t  \n\t  Na descrição do caso \\ch{} pode-se ler:\n\t  \\newline\n\t  \n\t  \\emph{On Android devices, Chrome leverages the same multi-process architecture as the desktop version - there is a browser process, and one or more renderer processes. The one difference is that due to memory constraints of the mobile device, Chrome may not be able to run a dedicated renderer for each open tab. Instead, Chrome determines the optimal number of renderer processes based on available memory, and other constraints of the device, and shares the renderer process between the multiple tabs.} \n\t  \\newline\n\t  \n\t  A descrição acima refere uma qualidade, por vezes referida como mobilidade, devido à adaptação às caraterísticas do dispositivo. Devido a esta qualidade que outras qualidades podem ser comprometidas.\t  \n\t  \n    	\N
415	\N	\N	\n\t  Na descrição do \\gm{} indica-se que:\n  \\newline\n  \n  \\emph{In Mailman 2, the MailList object's state is stored in a file called config.pck, which is just the pickled representation of the MailList object's dictionary. Every Python object has an attribute dictionary called \\_\\_dict\\_\\_. So saving a mailing list object then is simply a matter of pickling its \\_\\_dict\\_\\_ to a file, and loading it just involves reading the pickle from the file and reconstituting its \\_\\_dict\\_\\_.}\n  \\newline\n\t  \n\t  Para descrever a estrutura interna do ficheiro config.pck deve-se usar uma vista do estilo arquitetural:\n\t  \n\t      \n    	\N
416	\N	\N	\n\t  Na descrição do \\gm{} indica-se que:\n  \\newline\n  \n  \\emph{...Mailman supports running more than one runner process per queue directory...}\n  \\newline\n  \n  A qual corresponde a uma tática de \n\t      \n    	\N
417	\N	\N	\n\t  Na descrição do \\gm{} indica-se que:\n  \\newline\n  \n  \\emph{Mailman 3 has adopted the Representational State Transfer (REST) model for external administrative control. REST is based on HTTP, and Mailman's default object representation is JSON. These protocols are ubiquitous and well-supported in a large variety of programming languages and environments, making it fairly easy to integrate Mailman with third party systems. REST was the perfect fit for Mailman 3, and now much of its functionality is exposed through a REST API.}\n  \\newline\n\t  \n\t  Esta solução permitiu:\n\t      \n    	\N
418	\N	\N	\n\t  Na descrição do \\gm{} refere-se:\n  \\newline\n  \n  \\emph{There's another side effect of this algorithm that did cause problems during the early design of this system. Despite the unpredictability of email delivery in general, the best user experience is provided by processing the queue files in FIFO order, so that replies to a mailing list get sent out in roughly chronological order.}\n  \\newline\n  \n  A qualidade que se pretende tratar é:\n\t      \n    	\N
419	\N	\N	\n\t  No Mailman 3 as mensagens continuam a ser guardadas persistentemente usando \\emph{pickle}\n\t      \n    	\N
420	\N	\N	\n\t  A função do componente \\emph{Master Runner} do \\gm{} pode ser representada usando o estilo arquitetural\n\t      \n    	\N
421	\N	\N	\n    A arquitetura de software de um sistema\n\n    	\N
422	\N	\N	\n\tA dcumentação da arquitetura de software de um sistema é frequentemente composta de diferentes vistas, pois\n\n  	\N
423	\N	\N	\n\tEstabecer uma convenção de programação como \n  \\begin{quote}\n\t  Todas as variáveis globais do sistema devem começar pelo prefixo\n    \\textsc{g\\_}, enquanto que as variáveis não-globais não possuem \\emph{underscores} no nome\n  \\end{quote}\n\n  	\N
424	\N	\N	\n\tConsidere que um dos requisitos de um jogo de xadrez com um interface gráfica é que seja possível executar nos sistemas operativos Microsoft Windows e \n  Apple Mac OS X. Uma boa solução para este sistema deveria:\n\n  	\N
425	\N	\N	\n\tUm outro requisito do jogo de xadrez da pergunta anterior é que mantem uma tabela com as melhores pontuações do jogo. Naturalmente, esta informação deve ser mantida entre duas diferentes execuções do sistema. Assumindo que o jogo é uma aplicação de \\emph{desktop}\n\n  	\N
426	\N	\N	\n\tPara se obter um rápido \\emph{time-to-market}, as companhias de software estão a usar cada vez mais estratégias de entregas incrementais, em que cada nova entrega contém novas funcionalidades. Que estilo arquitetural é melhor para analisar se a arquitetura de software do sistema se adequa à entrega incremental de versões do sistema?\n \n  	\N
427	\N	\N	\n\tQual das seguintes frases melhor descreve o relação entre módulos e componentes?\n\n  	\N
428	\N	\N	\n\tO padrão \\emph{Transaction Script}\n\n  	\N
429	\N	\N	\n\tO padrão \\emph{Service Layer} é frequentemente usado em conjuntamente com\n \n  	\N
430	\N	\N	\n\tO padrão \\emph{Identity Map} é usado\n \n  	\N
785	\N	\N	\n\tIn the Chrome system the use of a process per tab results form the application of a tactic of\n\t\n    	\N
628	786	\N	\n\tIn the Chrome system the following tactic is used to improve performance\n\t\n    	\N
438	466	\N	\n\tAn attack is\n\t\t\n    	\N
464	\N	\N	\n\tConsider the architectural views for the ThousandParsec system. In the case description can be read:\n\t\n\t\\begin{quote}\n\t\tThe Requirements function verifies that each component added to the design conforms to the rules of other previously added components.\n\t\\end{quote}\n\t\n\tThe following diagram depicts a fragment of a proposal for the decomposition view of the system.\n\t\n\t\\centering\n\t\\includegraphics[width=100mm]{x-ThousandParsec-ruleset}\n\n    	\N
465	\N	\N	\n\tChecksum is a technic that it is often used in architectural design. It can be used as\n\t\t\n    	\N
466	\N	\N	\n\tAn attack is\n\t\t\n    	\N
467	\N	\N	\n\tIn the description of the SocialCalc case study can be read:\n\t\n\t\\begin{quote}\n\t\tAs the user scrolls the spreadsheet through our custom-drawn scroll bars, we dynamically update the innerHTML of the pre-drawn \\textsc{<td>} elements. This means we don't need to create or destroy any \\textsc{<tr>} or \\textsc{<td>} elements in many common cases, which greatly speeds up response time.\n\t\\end{quote} \n\t\n\tThis corresponds to the application of\n\n    	\N
468	\N	\N	\n\tIn the description of the Thousand Parsec case study can be read:\n\t\n\t\\begin{quote}\n\t\tA ruleset designer thus has the ability to create new object types or store additional information in the existing object types as required by the ruleset, allowing for virtually unlimited extensibility in terms of the available physical objects in the game.\n\t\\end{quote} \n\t\n\tThis excerpt can be represented as a modifiability scenario where\n\n    	\N
469	\N	\N	\n\tIn the description of the Git case study can be read:\n\t\n\t\\begin{quote}\n\t\tGit tackles the storage space problem by packing objects in a compressed format, using an index file which points to offsets to locate specific objects in the corresponding packed file.\n\t\\end{quote}\n\t\n\tThe tactic addressed in this fragments is:\n\t\n    	\N
470	\N	\N	\n  Assume that one of the requirements for a graphical chess game is\n  that it should be able to run both in Microsoft's Windows and\n  Apple's Mac OS X operating systems.  A good solution for this system\n  would:\n\n  	\N
472	\N	\N	\n  A requirement for a chess game is that it keeps a table with the best scores obtained in the game.\n  Naturally, this information should be kept between two different\n  executions of the system.  Assuming that the game is a web-based application, then\n\n  	\N
473	\N	\N	\n  An email client such as Mozilla's Thunderbird or Microsoft's Outlook\n  allows a user both to read the emails that were sent to him and to\n  send new emails to other people.  To do that, the email client\n  connects to other components (one or more): some of these components\n  keep the user's mailboxes with all the emails that were sent to him,\n  whereas other components know how to forward the emails sent by the\n  user to their final destinations (associated with a new set of destinations).  In either case, it is always the\n  email client that makes a request to the other components, but\n  whereas in the first case the email client receives all the\n  information about the user's emails, in the second case only a\n  success or failure error code is returned.  The architectural\n  patterns that best describe the interactions between the components from the client to the final destinations\n\n  	\N
475	\N	\N	\n\tFrank Buschmann, \\emph{Introducing the Pragmatic Architect}, defines the \\emph{techno-geeks} architects. This kind of architect\n\t\n    	\N
477	\N	\N	\n\tConsider the following scenario\n\t\n\t\\begin{quote}\n\t\tOur vehicle information system send our current location to the traffic monitoring system. The traffic monitoring system combines our location with other information, overlays this information on a Google Map, and broadcasts it. Our location information is correctly included with a probability of 99.99\\%.\n\t\\end{quote}\n\t\n    	\N
479	\N	\N	\n\tConsider the architectural views for the SocialCalc system. In the case description can be read:\n\t\n\t\\begin{quote}\n\t\tThe save format is in standard MIME multipart/mixed format, consisting of four text/plain; charset=UTF-8 parts, each part containing newline-delimited text with colon-delimited data fields. The parts are...\n\t\t\n\t\tThis format is designed to be human-readable, as well as being relatively easy to generate programmatically. This makes it possible for Drupal's Sheetnode plugin to use PHP to convert between this format and other popular spreadsheet formats, such as Excel (.xls) and OpenDocument (.ods).\n\t\\end{quote}\n\t\n\tFrom the above excerpt can be inferred the need to have\n\t\n    	\N
480	\N	\N	\n\tThe architectural style that best represents the runtime execution of a system Git installed for a small group of developers is\n\t\t\t\n    	\N
481	\N	\N	\n  In the OrderPad system they have decided to use a Row Data Gateway data access pattern because\n \n  	\N
482	\N	\N	\n  Consider the architectural views of EtherCalc system. In the case study description can be read\n  \n  \\begin{quote}\n\t  The Socialtext platform has both behind-the-firewall and on-the-cloud deployment options, imposing unique constraints on EtherCalc's resource and performance requirements.\n  \\end{quote} \n \n  	\N
483	\N	\N	\n  In EtherCalc initial prototype clients send their local commands and snapshots to the server, which result on redundant information on the server about the state of the spreadsheet. This redundancy is an application of\n \n  	\N
484	\N	\N	\n  In EtherCalc initial prototype clients send their local commands, cursor movements and snapshots to the server.\n \n  	\N
485	\N	\N	\n  In the EtherCalc case description can be read\n \n  \\begin{quote}\n\t  The in-browser SocialCalc engine is written in JavaScript. We considered translating that logic into Perl, but that would have carried the steep cost of maintaining two code bases. \n  \\end{quote} \n  \n  The excerpt is referring to a quality of\n \n  	\N
486	\N	\N	\n\tFrank Buschmann states that:\n\t\t\n\t\\begin{quote}\n\t\tFeaturitis is the tendency to trade functional coverage for quality - the more functions the earlier they're delivered, the better.\n\t\\end{quote}\n\t\n\tIn the OrderPad system the architect regretted not getting performance tests going earlier. The OrderPad system\n\n    	\N
488	\N	\N	\n  The architectural significant requirements are important in the process of creating\n  the software architecture for a system because they define\n \n  	\N
487	1393	\N	\n  The software architecture of a system\n\n  	\N
474	1425	\N	\n  The software architecture of a system\n\n    	\N
533	\N	\N	\n\tMarquardt characterizes performitis as:\n\t\n\t\\begin{quote}\n\t\tEach part of the system is directly influenced by local performance tuning measures. There is no global performance strategy, or it ignores other qualities of the system such as testability and maintainability.\n\t\\end{quote}\n\t\n\tThis means that\n\n  	\N
490	1407	\N	\n  To achieve a faster time-to-market, software companies are\n  increasingly using a strategy of incremental releases of their\n  software, where each new release has a set of new features.  Which\n  architectural style is better to analyse whether the system's\n  software architecture is adequate for the planned incremental\n  releases?\n \n  	\N
489	1528	\N	\n  Consider that a chess game should\n  provide an automatic and intelligent chess player, and that to\n  implement that player we will use some of the many chess engines\n  already available in the market.  Moreover, the system should allow\n  the user to choose which engine to use for each new game.  Given\n  these requirements, which of the architectural styles from the\n  module viewtype are best suited to satisfy them?\n \n  	\N
522	\N	\N	\n  Compared to the Transaction Script pattern, the Domain Logic pattern\n  has a higher initial cost of adoption.  That is, it is harder to\n  start with the Domain Logic pattern than with the Transaction Script\n  pattern.  The reason for this is that the Domain Logic pattern\n\n  	\N
523	\N	\N	\n  Ruby on Rails is a popular full-stack framework for building web\n  applications.  One of the elements of this framework is the\n  \\textbf{model}, which is described in the Rails documentation in the\n  following way:\n  \\begin{quote}\n    A model represents the information (data) of the application and\n    the rules to manipulate that data. In the case of Rails, models\n    are primarily used for managing the rules of interaction with a\n    corresponding database table. In most cases, one table in your\n    database will correspond to one model in your application. The\n    bulk of your application's business logic will be concentrated in\n    the models.\n  \\end{quote}\n  Given this description, the Rails' model is best described as an\n  instance of\n \n  	\N
525	\N	\N	\n\tPing-and-echo and Heartbeat are two availability tactics to detect faults.\n\n    	\N
526	\N	\N	\n\tConsider that when designing the architecture of a web application, the architect intends to guarantee of the confidentiality of persistent data in face of an attack from a system administrator.\n\n    	\N
527	\N	\N	\n\tIn the description of the SocialCalc case study can be read:\n\t\n\t\\begin{quote}\n\t\tA simple improvement is for each client to broadcast its cursor position to other users, so everyone can see which cells are being worked on.\n\t\\end{quote}\n\t\n\tThis sentence describes a tactic for usability which is\n\n    	\N
528	\N	\N	\n\tIn the description of the ThousandParsec case study can be read:\n\t\n\t\\begin{quote}\n\t\tThe Thousand Parsec Component Language (TPCL) exists to allow clients to create designs locally without server interaction - allowing for instant feedback about the properties, makeup, and validity of the designs. \n\t\\end{quote}\n\t\n\tFrom this sentence can be written\n\n    	\N
529	\N	\N	\n\tIn the description of GitHub case study can be read\n\t\n\t\\begin{quote}\n\t\tOnce the Smoke proxy has determined the user's route, it establishes a transparent proxy to the proper file server. We have four pairs of fileservers. Their names are fs1a, fs1b, ..., fs4a, fs4b. These are 8 core, 16GB RAM bare metal servers, each with six 300GB 15K RPM SAS drives arranged in RAID 10. At any given time one server in each pair is active and the other is waiting to take over should there be a fatal failure in the master. All repository data is constantly replicated from the master to the slave via DRBD.\n\t\\end{quote}\n\t\n\tIn this description we can find the application of tactics like \n\n  	\N
530	\N	\N	\n\tViews of the module viewtype can be used to support requirements traceability analysis, determine how the functional requirements of a system are supported. This is represented by\n\t\n    	\N
531	\N	\N	\n  Assuming that you were asked to document the software architecture\n  of an existing (and already developed) system, the best thing for\n  you to do would be\n\n  	\N
524	1394	\N	\n  As part of the process of creating an architecture, we talked about\n  a framework for capturing some of the requirements for a system.  In\n  this context, \\textbf{concrete scenarios} are used for\n\n  	\N
521	1534	\N	\n\tIn the description of architecture of the OrderPad case study, it can be read that the updates the user does on the OrderPad when it is offline are not lost. This availability quality is achieved through a\t\n\n  	\N
535	\N	\N	\n  According to the attribute-driven design process, we should design\n  the software architecture for a system based on a selected list of\n  requirements, which are called the \\textit{architecturally significant requirements}.\n  These architecturally significant requirements should be sorted according to their\n  importance for the system's stakeholders because\n \n    	\N
536	\N	\N	\n  On the web page of Memcached can be read:\n  \n  \\begin{quote}\n\t  ..., high-performance, distributed memory object caching system, generic in nature, but intended for use in speeding up dynamic web applications by alleviating database load.\n  \\end{quote}\n  \n  According to this information, Memcached is\n\n  	\N
537	\N	\N	\n\tYou have to develop an application that collects news from different web sources and process that information to present a digest to the application users. The different sources provide similar information through different interfaces (APIs). Additionally, the new sources may change the interfaces, for instance to enhance their service. Which architectural style can be used to represent this requirements?\n\t\n    	\N
538	\N	\N	\n  When designing the architecture for a system the architect realises that most of the modules have bidirectional uses relationships. This has impact on\n\n    	\N
539	\N	\N	\n\tIn the description of EtherCalc case study can be read\n\t\n\t\\begin{quote}\n\t\tBecause all jsdom code runs in a single thread, subsequent REST API calls are blocked until the previous command's rendering completes. Under high concurrency, this queue eventually triggered a latent bug that ultimately resulted in server lock-up.\n\t\\end{quote}\t\n\t\n\tThe above sentence is related to a quality for\n\n  	\N
540	\N	\N	\n\tIn the description of EtherCalc case study can be read\n\t\n\t\\begin{quote}\n\t\tSo, we removed jsdom from the RenderSheet function, re-implemented a minimal DOM in 20 lines of LiveScript for HTML export, then ran the profiler again. Much better! We have improved throughput by a factor of 4, HTML exporting is 20 times faster, and the lock-up problem is gone.\n\t\\end{quote}\t\n\t\n\tThe above sentence describes a\n\n  	\N
541	\N	\N	\n\tIn the description of EtherCalc case study can be read how the architect tried to increase the performance in a multi-core context\n\t\n\t\\begin{quote}\n\tIs there a way to make use of all those spare CPUs in the multi-tenant server?\n\n\tFor other Node.js services running on multi-core hosts, we utilized a pre-forking cluster server that creates a process for each CPU.\n\t\n\t\tHowever, while EtherCalc does support multi-server scaling with Redis, the interplay of Socket.io clustering with RedisStore in a single server would have massively complicated the logic, making debugging much more difficult.\n\t\\end{quote}\t\n\t\n\tThis possible solution has impact on the\n\n  	\N
543	\N	\N	\n\tIn the description of EtherCalc case study can be read how the architect increased the performance in a multi-core context\n\t\n\t\\begin{quote}\n\tInstead of pre-forking a fixed number of processes, we sought a way to create one background thread for each server-side spreadsheet, thereby distributing the work of command execution among all CPU cores.\n\t\\end{quote}\t\n\t\n\tWhich is represented by the diagram\n\t\\newline\n\t\n\t\\centering\n\t\\includegraphics[width=120mm]{x-EtherCalc-multi-tenant}\n\t\n\t\\begin{flushleft}\n\t\tThe above diagram, describing a server spreadsheet, can be represented using \n\t\\end{flushleft}\n\n  	\N
544	\N	\N	\n\tTo increase the availability of a web application it is possible to use a load-balancer between the clients and the servers that detects server failures and transparently redirects the requests to the servers that are functioning properly. To represent this architecture\n\n    	\N
545	\N	\N	\n  One way to increase the performance of a 3-tier enterprise\n  application (with the standard separation in the web client, web\n  server, and database tiers) is to replicate the web server tier and\n  to add a load-balancer between the web clients and the web servers.\n  Unfortunately, for some enterprise applications that option is not\n  enough (or does not work at all), because\n\n    	\N
547	\N	\N	\n  In the software architecture of a system, the Deployment view is\n  best suited for\n\n    	\N
548	\N	\N	\n  In the description of ThousandParsec case study can be read\n  \n  \\begin{quote}\n\t  The flagship server, \\textsc{tpserver-cpp}, provides an abstract persistence interface and a modular plugin system to allow for various database back ends. \n  \\end{quote}\n  \n\tThis above sentence can be diagrammatically represented using\n\t  \n    	\N
549	\N	\N	\n  Consider the (partial) component-and-connector view for the \\textsc{:SpreasdSheet} component of the SocialCalc system\n  \n\t\\centering\n\t\\includegraphics[width=70mm]{x-SocialCalc-spreadsheet-component}\n\t\n    \\begin{flushleft}\n  \t  The \\textsc{sub1} port\n    \\end{flushleft}\n\n    	\N
550	\N	\N	\n\tIn the description of GitHub case study can be read\n\t\n\t\\begin{quote}\n\t\tFor requests to the main website, the load balancer ships your request off to one of the four frontend machines. Each of these is an 8 core, 16GB RAM bare metal server. Their names are fe1, ..., fe4. Nginx accepts the connection and sends it to a Unix domain socket upon which sixteen Unicorn worker processes are selecting. One of these workers grabs the request and runs the Rails code necessary to fulfill it.\n\t\\end{quote}\n\t\n\tTo represent the above description it is necessary to use\t\n\n  	\N
554	610	\N	\n\tFrank Buschmann states that:\n\t\n\t\\begin{quote}\n\t\tArchitects use flexibility as a cover for uncertainty.\n\t\\end{quote}\n\n    	\N
542	1498	\N	\n\tThe Java web servers, like Tomcat, use threads to process requests. For each request they create (or reuse) a thread to process it.\n\tTo draw a architectural view that describes this behaviour we should use \n\t\n    	\N
546	1520	\N	\n  Typically, Instant Messaging clients have a window to list the contacts of the user, and\n  show in that window the status of each contact (whether it is available, unavailable, busy,\n  etc). Given that the status of a contact may be changed at any time, and that the contact's\n  status is given by the Instant Messaging application of that contact, which architectural\n  style represents best the interaction pattern between these components?\n\n    	\N
576	\N	\N	\n\tMartin Fowler, \\emph{Who Needs and Architect?}, cites Ralph Johnson sentence:\n\t\n\t\\begin{quote}\n\t\tIn most successful software projects, the expert developers working on that project have a shared understanding of the system design. This shared understanding is called architecture.\n\t\\end{quote}\n\t\t\t\n    	\N
579	\N	\N	\n\tOn the course slides you can find the following definition of architecture:\n\t\n\t\\begin{quote}\n\t\tThe software architecture of a program or computing system is the structure or structures of the system, which comprise software elements, the externally visible properties of those elements, and the relationships among them.\n\t\\end{quote}\n\t\n\tHowever, in the book you can find another definition:\n\t\n\t\\begin{quote}\n\t\tThe software architecture of a system is the set of structures needed to reason about the system, which comprise the software elements, relations among them, and the properties of both.\n\t\\end{quote}\n\n    	\N
580	\N	\N	\n\tFrank Buschmann states that:\n\t\t\n\t\\begin{quote}\n\t\tFeaturitis is the tendency to trade functional coverage for quality - the more functions the earlier they're delivered, the better.\n\t\\end{quote}\n\n    	\N
570	606	\N	\n\tThe \\emph{Ensuring that the implementation conforms to the architecture} step of how to create an architecture\n\t\n    	\N
668	786	\N	\n\tIn the Chrome system the following tactic is used to improve performance\n\t\n    	\N
578	1085	\N	\n\tFrank Buschmann cites the characterization Marquardt does of Performitis:\n\t\t\n\t\\begin{quote}\n\t\tEach part of the system is directly influenced by local performance tuning measures. There is no global performance strategy, or it ignores other qualities of the system as testability and maintainability.\n\t\\end{quote}\n\t\n\tFrom this problem you can conclude that:\n\n    	\N
577	1146	\N	\n\tDuring the different steps on how to create an architecture, the precise specification of architecture quality attributes is initially relevant to\n\t\n    	\N
562	1405	\N	\n\tWhen designing an architecture requirements can be split into functional, quality attributes, and constraints. Functional requirements have impact on:\n\t\t\n    	\N
564	1668	\N	\n\tThe quality(ies) that is(are) more relevant to views of the component-and-connector viewtype is(are):\n\t\t\n    	\N
588	\N	\N	\n\tFrank Buschmann, \\emph{Introducing the Pragmatic Architect}, defines the \\emph{architecture astronauts}. This kind of architect\n\t\n    	\N
589	\N	\N	\n\tIn his article, \\emph{Featuritis, Performitis, and Other Deseases}, Frank Buschmann claims that:\n\n    	\N
590	\N	\N	\n\tFrank Buschmann states that:\n\t\n\t\\begin{quote}\n\t\tOverly flexible systems are hard to configure, and when they're finally configured, they lack qualities like performance or security.\n\t\\end{quote}\n\n    	\N
596	\N	\N	\n\tFrank Buschmann, \\emph{Introducing the Pragmatic Architect}, defines the \\emph{architecture dwarves}. These kind of architects\n\t\n    	\N
597	\N	\N	\n\tIn the Java documentation you can find:\n\t\n\\begin{quote}\n\\texttt{public abstract class Component} \\\\*\n\\texttt{extends Object} \\\\*\n\\texttt{implements ImageObserver, MenuContainer, Serializable}\n\\end{quote}\n\n\tClass \\texttt{Component} is:\n\n    	\N
598	\N	\N	\n\tFrank Buschmann states that:\n\t\n\t\\begin{quote}\n\t\tThere's only one escape from such situations: architects must actively break the cycle of mutual misunderstanding and mistrust!\n\t\\end{quote}\n\n    	\N
600	\N	\N	\n\tThe \\emph{Walking Skeleton} referred in Frank Buschmann's article, \\emph{Featuritis, Performitis, and Other Deseases}:\n\n    	\N
606	\N	\N	\n\tThe \\emph{Ensuring that the implementation conforms to the architecture} step of how to create an architecture\n\t\n    	\N
608	\N	\N	\n\tIn his article \\emph{On Hammers and Nails, and Falling in Love with Technology and Design} what is the main type of influence on the architecture?\n\n    	\N
610	\N	\N	\n\tFrank Buschmann states that:\n\t\n\t\\begin{quote}\n\t\tArchitects use flexibility as a cover for uncertainty.\n\t\\end{quote}\n\n    	\N
586	1152	\N	\n\tIn wikipedia you can find the following fragment of a definition:\n\t\n\t\\begin{quote}\n\t\tAn individual software component is a software package, or a module that encapsulates a set of related functions.\n\t\\end{quote}\n\t\n\tAccording to the definitions taught in the course the above \\emph{individual software component} corresponds to:\n\n    	\N
599	1355	\N	\n\tThe quality that is more relevant to views of the module viewtype is:\n\t\t\n    	\N
609	1405	\N	\n\tWhen designing an architecture requirements can be split into functional, quality attributes, and constraints. Functional requirements have impact on:\n\t\t\n    	\N
587	1437	\N	\n\tIn his article, \\emph{Who Needs and Architect?}, Martin Fowler cites Ralph Johnson definition:\n\t\n\t\\begin{quote}\n\t\tArchitecture is the set of decisions that must be made early in a project.\n\t\\end{quote}\n\t\n\tIn his opinion:\n\t\t\n    	\N
607	1668	\N	\n\tThe quality(ies) that is(are) more relevant to views of the component-and-connector viewtype is(are):\n\t\t\n    	\N
654	785	\N	\n\tIn the Chrome system the use of a process per tab results form the application of a tactic of\n\t\n    	\N
659	787	\N	\n\tIn the Graphite system description can be read:\n\t\n\t\\begin{quote}\n\t\tMaking multiple Graphite servers appear to be a single system from a user perspective isn't terribly difficult, at least for a naive implementation.\n\t\\end{quote}\n\n    	\N
656	789	\N	\n\tConsider a enterprise web system, which provides services both on the company's intranet and to the company's clients on the internet, that when under a denial of service attack decides to stop providing internet services.\n\n    	\N
658	1178	\N	\n\tIn the Graphite system description can be read:\n\t\n\t\\begin{quote}\n\t\tWe've got 600,000 metrics that update every minute and we're assuming our storage can only keep up with 60,000 write operations per minute. This means we will have approximately 10 minutes worth of data sitting in carbon's queues at any given time. To a user this means that the graphs they request from the Graphite webapp will be missing the most recent 10 minutes of data.\n\t\\end{quote}\n\n    	\N
657	777	\N	\n\tIn wikipedia you can find the following definition:\n\t\n\t\\begin{quote}\n\t\tThe garbage collector, or just collector, attempts to reclaim garbage, or memory occupied by objects that are no longer in use by the program.\n\t\\end{quote}\n\t\n\tThe garbage collector is a component that implements an availability tactic of\n\n    	\N
663	778	\N	\n\tHuman-editable URL API for creating graphs is a usability design tactic used in the Graphite system. This tactic\n\n    	\N
660	780	\N	\n\tTo reduce the backend load (writes) the Graphite system uses\n\t\n    	\N
662	781	\N	\n\tHaving a single point of access to an intranet is a security tactic of\n\t\n    	\N
665	782	\N	\n\tIn the Fenix system a checksum is associated to a set of grades. This is an application of the tactic\n\t\n    	\N
666	783	\N	\n\tIn a system where the source of attacks can be internal, from authorized users, the appropriate tactics to be used are\n\t\n    	\N
655	1637	\N	\n\tA voting tactic can be used to\n\n    	\N
667	784	\N	\n\tIn a system where there are sensitive data an appropriate tactic to be used is\n\t\n    	\N
697	778	\N	\n\tHuman-editable URL API for creating graphs is a usability design tactic used in the Graphite system. This tactic\n\n    	\N
698	1178	\N	\n\tIn the Graphite system description can be read:\n\t\n\t\\begin{quote}\n\t\tWe've got 600,000 metrics that update every minute and we're assuming our storage can only keep up with 60,000 write operations per minute. This means we will have approximately 10 minutes worth of data sitting in carbon's queues at any given time. To a user this means that the graphs they request from the Graphite webapp will be missing the most recent 10 minutes of data.\n\t\\end{quote}\n\n    	\N
700	780	\N	\n\tTo reduce the backend load (writes) the Graphite system uses\n\t\n    	\N
704	784	\N	\n\tIn a system where there are sensitive data an appropriate tactic to be used is\n\t\n    	\N
687	785	\N	\n\tIn the Chrome system the use of a process per tab results form the application of a tactic of\n\t\n    	\N
705	785	\N	\n\tIn the Chrome system the use of a process per tab results form the application of a tactic of\n\t\n    	\N
688	786	\N	\n\tIn the Chrome system the following tactic is used to improve performance\n\t\n    	\N
706	786	\N	\n\tIn the Chrome system the following tactic is used to improve performance\n\t\n    	\N
676	1637	\N	\n\tA voting tactic can be used to\n\n    	\N
691	771	\N	\n\tConsider the following scenario\n\t\n\t\\begin{quote}\n\t\tWhen writing to the database the system receives an exception about a write failure. The system should stop interacting with data base and write a log message. \n\t\\end{quote}\n\t\n\tThe quality addressed by this scenario is\n\n    	\N
672	772	\N	\n\tIn a quality scenario\n\n    	\N
693	773	\N	\n\tConsider the following scenario\n\t\n\t\\begin{quote}\n\t\tOur vehicle information system send our current location to the traffic monitoring system. The traffic monitoring system combines our location with other information, overlays this information on a Google Map, and broadcasts it. Our location information is correctly included with a probability of 99.99\\%.\n\t\\end{quote}\n\t\n\tThe quality addressed by this scenario is\n\n    	\N
694	774	\N	\n\tA heartbeat monitor\n\n    	\N
689	776	\N	\n\tIn the description of the Chrome system can be read\n\t\n\t\\begin{quote}\n\t\tThe goal of the predictor is to evaluate the likelihood of its success, and then to trigger the activity if resources are available. \n\t\\end{quote}\n\t\n\tThe above sentence refer to\n\t\n    	\N
673	788	\N	\n\tAn architectural tactic\n\n    	\N
692	788	\N	\n\tAn architectural tactic\n\n    	\N
696	777	\N	\n\tIn wikipedia you can find the following definition:\n\t\n\t\\begin{quote}\n\t\tThe garbage collector, or just collector, attempts to reclaim garbage, or memory occupied by objects that are no longer in use by the program.\n\t\\end{quote}\n\t\n\tThe garbage collector is a component that implements an availability tactic of\n\n    	\N
695	789	\N	\n\tConsider a enterprise web system, which provides services both on the company's intranet and to the company's clients on the internet, that when under a denial of service attack decides to stop providing internet services.\n\n    	\N
690	790	\N	\n\tIn the description of the Chrome system can be read\n\t\n\t\\begin{quote}\n\t\tAs the user types, the Omnibox automatically proposes an action, which is either a URL based on your navigation history, or a search query.\n\t\\end{quote}\n\t\n\tThe above sentence refers to\n\t\n    	\N
786	\N	\N	\n\tIn the Chrome system the following tactic is used to improve performance\n\t\n    	\N
714	773	\N	\n\tConsider the following scenario\n\t\n\t\\begin{quote}\n\t\tOur vehicle information system send our current location to the traffic monitoring system. The traffic monitoring system combines our location with other information, overlays this information on a Google Map, and broadcasts it. Our location information is correctly included with a probability of 99.99\\%.\n\t\\end{quote}\n\t\n\tThe quality addressed by this scenario is\n\n    	\N
734	774	\N	\n\tA heartbeat monitor\n\n    	\N
729	776	\N	\n\tIn the description of the Chrome system can be read\n\t\n\t\\begin{quote}\n\t\tThe goal of the predictor is to evaluate the likelihood of its success, and then to trigger the activity if resources are available. \n\t\\end{quote}\n\t\n\tThe above sentence refer to\n\t\n    	\N
727	785	\N	\n\tIn the Chrome system the use of a process per tab results form the application of a tactic of\n\t\n    	\N
740	778	\N	\n\tHuman-editable URL API for creating graphs is a usability design tactic used in the Graphite system. This tactic\n\n    	\N
722	780	\N	\n\tTo reduce the backend load (writes) the Graphite system uses\n\t\n    	\N
743	780	\N	\n\tTo reduce the backend load (writes) the Graphite system uses\n\t\n    	\N
723	781	\N	\n\tHaving a single point of access to an intranet is a security tactic of\n\t\n    	\N
744	781	\N	\n\tHaving a single point of access to an intranet is a security tactic of\n\t\n    	\N
728	786	\N	\n\tIn the Chrome system the following tactic is used to improve performance\n\t\n    	\N
742	787	\N	\n\tIn the Graphite system description can be read:\n\t\n\t\\begin{quote}\n\t\tMaking multiple Graphite servers appear to be a single system from a user perspective isn't terribly difficult, at least for a naive implementation.\n\t\\end{quote}\n\n    	\N
733	788	\N	\n\tAn architectural tactic\n\n    	\N
736	789	\N	\n\tConsider a enterprise web system, which provides services both on the company's intranet and to the company's clients on the internet, that when under a denial of service attack decides to stop providing internet services.\n\n    	\N
738	790	\N	\n\tIn the description of the Chrome system can be read\n\t\n\t\\begin{quote}\n\t\tAs the user types, the Omnibox automatically proposes an action, which is either a URL based on your navigation history, or a search query.\n\t\\end{quote}\n\t\n\tThe above sentence refers to\n\t\n    	\N
741	1178	\N	\n\tIn the Graphite system description can be read:\n\t\n\t\\begin{quote}\n\t\tWe've got 600,000 metrics that update every minute and we're assuming our storage can only keep up with 60,000 write operations per minute. This means we will have approximately 10 minutes worth of data sitting in carbon's queues at any given time. To a user this means that the graphs they request from the Graphite webapp will be missing the most recent 10 minutes of data.\n\t\\end{quote}\n\n    	\N
845	1628	\N	\n\tThe Decomposition architectural style of the Module viewtype \n\t\n\n    	\N
735	1637	\N	\n\tA voting tactic can be used to\n\n    	\N
731	771	\N	\n\tConsider the following scenario\n\t\n\t\\begin{quote}\n\t\tWhen writing to the database the system receives an exception about a write failure. The system should stop interacting with data base and write a log message. \n\t\\end{quote}\n\t\n\tThe quality addressed by this scenario is\n\n    	\N
724	782	\N	\n\tIn the Fenix system a checksum is associated to a set of grades. This is an application of the tactic\n\t\n    	\N
745	782	\N	\n\tIn the Fenix system a checksum is associated to a set of grades. This is an application of the tactic\n\t\n    	\N
725	783	\N	\n\tIn a system where the source of attacks can be internal, from authorized users, the appropriate tactics to be used are\n\t\n    	\N
746	783	\N	\n\tIn a system where the source of attacks can be internal, from authorized users, the appropriate tactics to be used are\n\t\n    	\N
737	784	\N	\n\tIn a system where there are sensitive data an appropriate tactic to be used is\n\t\n    	\N
771	\N	\N	\n\tConsider the following scenario\n\t\n\t\\begin{quote}\n\t\tWhen writing to the database the system receives an exception about a write failure. The system should stop interacting with data base and write a log message. \n\t\\end{quote}\n\t\n\tThe quality addressed by this scenario is\n\n    	\N
772	\N	\N	\n\tIn a quality scenario\n\n    	\N
773	\N	\N	\n\tConsider the following scenario\n\t\n\t\\begin{quote}\n\t\tOur vehicle information system send our current location to the traffic monitoring system. The traffic monitoring system combines our location with other information, overlays this information on a Google Map, and broadcasts it. Our location information is correctly included with a probability of 99.99\\%.\n\t\\end{quote}\n\t\n\tThe quality addressed by this scenario is\n\n    	\N
774	\N	\N	\n\tA heartbeat monitor\n\n    	\N
776	\N	\N	\n\tIn the description of the Chrome system can be read\n\t\n\t\\begin{quote}\n\t\tThe goal of the predictor is to evaluate the likelihood of its success, and then to trigger the activity if resources are available. \n\t\\end{quote}\n\t\n\tThe above sentence refer to\n\t\n    	\N
777	\N	\N	\n\tIn wikipedia you can find the following definition:\n\t\n\t\\begin{quote}\n\t\tThe garbage collector, or just collector, attempts to reclaim garbage, or memory occupied by objects that are no longer in use by the program.\n\t\\end{quote}\n\t\n\tThe garbage collector is a component that implements an availability tactic of\n\n    	\N
778	\N	\N	\n\tHuman-editable URL API for creating graphs is a usability design tactic used in the Graphite system. This tactic\n\n    	\N
780	\N	\N	\n\tTo reduce the backend load (writes) the Graphite system uses\n\t\n    	\N
781	\N	\N	\n\tHaving a single point of access to an intranet is a security tactic of\n\t\n    	\N
782	\N	\N	\n\tIn the Fenix system a checksum is associated to a set of grades. This is an application of the tactic\n\t\n    	\N
783	\N	\N	\n\tIn a system where the source of attacks can be internal, from authorized users, the appropriate tactics to be used are\n\t\n    	\N
784	\N	\N	\n\tIn a system where there are sensitive data an appropriate tactic to be used is\n\t\n    	\N
752	772	\N	\n\tIn a quality scenario\n\n    	\N
754	773	\N	\n\tConsider the following scenario\n\t\n\t\\begin{quote}\n\t\tOur vehicle information system send our current location to the traffic monitoring system. The traffic monitoring system combines our location with other information, overlays this information on a Google Map, and broadcasts it. Our location information is correctly included with a probability of 99.99\\%.\n\t\\end{quote}\n\t\n\tThe quality addressed by this scenario is\n\n    	\N
755	774	\N	\n\tA heartbeat monitor\n\n    	\N
769	776	\N	\n\tIn the description of the Chrome system can be read\n\t\n\t\\begin{quote}\n\t\tThe goal of the predictor is to evaluate the likelihood of its success, and then to trigger the activity if resources are available. \n\t\\end{quote}\n\t\n\tThe above sentence refer to\n\t\n    	\N
759	778	\N	\n\tHuman-editable URL API for creating graphs is a usability design tactic used in the Graphite system. This tactic\n\n    	\N
748	785	\N	\n\tIn the Chrome system the use of a process per tab results form the application of a tactic of\n\t\n    	\N
767	785	\N	\n\tIn the Chrome system the use of a process per tab results form the application of a tactic of\n\t\n    	\N
749	786	\N	\n\tIn the Chrome system the following tactic is used to improve performance\n\t\n    	\N
768	786	\N	\n\tIn the Chrome system the following tactic is used to improve performance\n\t\n    	\N
761	787	\N	\n\tIn the Graphite system description can be read:\n\t\n\t\\begin{quote}\n\t\tMaking multiple Graphite servers appear to be a single system from a user perspective isn't terribly difficult, at least for a naive implementation.\n\t\\end{quote}\n\n    	\N
753	788	\N	\n\tAn architectural tactic\n\n    	\N
757	789	\N	\n\tConsider a enterprise web system, which provides services both on the company's intranet and to the company's clients on the internet, that when under a denial of service attack decides to stop providing internet services.\n\n    	\N
770	790	\N	\n\tIn the description of the Chrome system can be read\n\t\n\t\\begin{quote}\n\t\tAs the user types, the Omnibox automatically proposes an action, which is either a URL based on your navigation history, or a search query.\n\t\\end{quote}\n\t\n\tThe above sentence refers to\n\t\n    	\N
779	1178	\N	\n\tIn the Graphite system description can be read:\n\t\n\t\\begin{quote}\n\t\tWe've got 600,000 metrics that update every minute and we're assuming our storage can only keep up with 60,000 write operations per minute. This means we will have approximately 10 minutes worth of data sitting in carbon's queues at any given time. To a user this means that the graphs they request from the Graphite webapp will be missing the most recent 10 minutes of data.\n\t\\end{quote}\n\n    	\N
756	1637	\N	\n\tA voting tactic can be used to\n\n    	\N
775	1637	\N	\n\tA voting tactic can be used to\n\n    	\N
787	\N	\N	\n\tIn the Graphite system description can be read:\n\t\n\t\\begin{quote}\n\t\tMaking multiple Graphite servers appear to be a single system from a user perspective isn't terribly difficult, at least for a naive implementation.\n\t\\end{quote}\n\n    	\N
788	\N	\N	\n\tAn architectural tactic\n\n    	\N
789	\N	\N	\n\tConsider a enterprise web system, which provides services both on the company's intranet and to the company's clients on the internet, that when under a denial of service attack decides to stop providing internet services.\n\n    	\N
790	\N	\N	\n\tIn the description of the Chrome system can be read\n\t\n\t\\begin{quote}\n\t\tAs the user types, the Omnibox automatically proposes an action, which is either a URL based on your navigation history, or a search query.\n\t\\end{quote}\n\t\n\tThe above sentence refers to\n\t\n    	\N
814	\N	\N	\n\tIn the description of the SocialCalc case study can be read:\n\t\n\t\\begin{quote}\n\t\tEven with race conditions resolved, it is still suboptimal to accidentally overwrite the cell another user is currently editing. A simple improvement is for each client to broadcast its cursor position to other users, so everyone can see which cells are being worked on.\n\t\\end{quote} \n\t\n\tFrom this fragment can be identified a scenario for\n\n    	\N
815	\N	\N	\n\tIn the description of the Thousand Parsec case study can be read:\n\t\n\t\\begin{quote}\n\t\tFinding a public Thousand Parsec server to play on is much like locating a lone stealth scout in deep space - a daunting prospect if one doesn't know where to look. Fortunately, public servers can announce themselves to a metaserver, whose location, as a central hub, should ideally be well-known to players.\n\t\\end{quote} \n\t\n\tFrom this fragment can be identified a scenario for\n\n    	\N
824	\N	\N	\n\tIn the description of the SocialCalc case study can be read:\n\t\n\t\\begin{quote}\n\t\tTo make this work across browsers and operating systems, we use the Web::Hippie4 framework, a high-level abstraction of JSON-over-WebSocket with convenient jQuery bindings.\n\t\\end{quote} \n\t\n\tFrom this fragment can be identified a scenario for\n\n    	\N
825	\N	\N	\n\tIn the description of the Thousand Parsec case study can be read:\n\t\n\t\\begin{quote}\n\t\tNext, the player is prompted to configure options for the ruleset and server, with sane defaults pulled from the metadata. Finally, if any compatible AI clients are installed, the player is prompted to configure one or more of them to play against.\n\t\\end{quote} \n\t\n\tThe tactic referred in the fragments is\n\n    	\N
826	\N	\N	\n\tA criteria for the the application of the Decomposition architectural style of the Module viewtype is Build-vs-Buy decisions. The application of the criteria\n\t\n\n    	\N
828	\N	\N	\n\tIn the context of the FenixEdu case study the following scenario was identified.\n\t\n\t\\begin{quote}\n\t\tThe school management pretends that all the members of the school, students, administrative staff, faculty and management should be able to use the system to perform their activities efficiently without requiring the installation of any client software or a long learning process.\n\t\\end{quote}\n\t\n\tThis is a \n\n    	\N
835	\N	\N	\n\tIn the description of the SocialCalc case study can be read:\n\t\n\t\\begin{quote}\n\t\tIf users A and B simultaneously perform an operation affecting the same cells, then receive and execute commands broadcast from the other user, they will end up in different states.\n\t\\end{quote} \n\t\n\tFrom this fragment can be identified a scenario for\n\n    	\N
836	\N	\N	\n\tA utility tree\n\n    	\N
837	\N	\N	\n\tIn the description of the Thousand Parsec case study can be read:\n\t\n\t\\begin{quote}\n\t\tTurns also have a time limit imposed by the server, so that slow or unresponsive players cannot hold up a game.\n\t\\end{quote} \n\t\n\tFrom this fragment can be identified a scenario for\n\n    	\N
838	\N	\N	\n\tConsider an architecturally significant requirement (ASR) that has a high impact on the architecture but a low business value\n\n    	\N
844	\N	\N	\n\tIn the description of the SocialCalc case study can be read:\n\t\n\t\\begin{quote}\n\t\tTherefore, on browsers with support for CSS3, we use the box-shadow property to represent multiple peer cursors in the same cell.\n\t\\end{quote} \n\t\n\tThis corresponds to the application of\n\n    	\N
841	844	\N	\n\tIn the description of the SocialCalc case study can be read:\n\t\n\t\\begin{quote}\n\t\tTherefore, on browsers with support for CSS3, we use the box-shadow property to represent multiple peer cursors in the same cell.\n\t\\end{quote} \n\t\n\tThis corresponds to the application of\n\n    	\N
842	846	\N	\n\tIn the description of the Thousand Parsec case study can be read:\n\t\n\t\\begin{quote}\n\t\tBesides often running far longer than the circadian rhythms of the players' species, during this extended period the server process might be prematurely terminated for any number of reasons. To allow players to pick up a game where they left off, Thousand Parsec servers provide persistence by storing the entire state of the universe (or even multiple universes) in a database.\n\t\\end{quote} \n\t\n\tThe tactic referred in the fragments is\n\n    	\N
839	848	\N	\n\tIn the context of the FenixEdu case study the following scenario was identified.\n\t\n\t\\begin{quote}\n\t\tThe management intends that the system should be available to all users, even after offices close and classes finish because students may need courses material to study 24X7 and faculty and administrative staff may want to work from home.\n\t\\end{quote}\n\t\n\tThis is a \n\n    	\N
816	1523	\N	\n\tIn the context of the FenixEdu case study, the business case was to\n\n    	\N
840	1618	\N	\n\tWhen applying Attribute-Driven Design (ADD) to the FenixEdu system the creation of a view where there are redundant web servers, load balancers and database servers \n\n    	\N
827	1626	\N	\n\tConsider an architecturally significant requirement (ASR) that has a low impact on the architecture but a high business value\n\n    	\N
843	1628	\N	\n\tThe Decomposition architectural style of the Module viewtype \n\t\n\n    	\N
818	1634	\N	\n\tDesigning an architecture\n\n    	\N
846	\N	\N	\n\tIn the description of the Thousand Parsec case study can be read:\n\t\n\t\\begin{quote}\n\t\tBesides often running far longer than the circadian rhythms of the players' species, during this extended period the server process might be prematurely terminated for any number of reasons. To allow players to pick up a game where they left off, Thousand Parsec servers provide persistence by storing the entire state of the universe (or even multiple universes) in a database.\n\t\\end{quote} \n\t\n\tThe tactic referred in the fragments is\n\n    	\N
848	\N	\N	\n\tIn the context of the FenixEdu case study the following scenario was identified.\n\t\n\t\\begin{quote}\n\t\tThe management intends that the system should be available to all users, even after offices close and classes finish because students may need courses material to study 24X7 and faculty and administrative staff may want to work from home.\n\t\\end{quote}\n\t\n\tThis is a \n\n    	\N
874	\N	\N	\n\tConsider a view of the module viewtype where there is a uses loop, a cycle of uses dependences between several modules. It may be possible to break the dependence cycle by\n\t\n\n    	\N
875	\N	\N	\n\tAn architect is decomposing a system into a set of responsibilities using a view of the Decomposition style. However, she had already to backtrack several times and try new decompositions because she end up with some responsibility that can not be within a single module.\n\t\n    	\N
847	1618	\N	\n\tWhen applying Attribute-Driven Design (ADD) to the FenixEdu system the creation of a view where there are redundant web servers, load balancers and database servers \n\n    	\N
876	\N	\N	\n\tIn the description of the GitHub case study can be read:\n\t\n\t\\begin{quote}\n\t\tOf course, allowing arbitrary execution of commands is unsafe, so SSH includes the ability to restrict what commands can be executed. In a very simple case, you can restrict execution to git-shell which is included with Git. All this script does is check the command that you're trying to execute and ensure that it's one of git upload-pack, git receive-pack, or git upload-archive.\n\t\\end{quote}\n\t\n\tThe tactic addressed in this fragments is:\n\t\n    	\N
877	\N	\N	\n\tA connector may be attached to components of different types because\n\t\t\n    	\N
878	\N	\N	\n\tThe repository architectural style provides performance because\n\n    	\N
885	\N	\N	\n\tIn the client-server architectural style the request/reply connector is synchronous. Consider an architect that wants to describe an asynchronous interaction between clients and servers. \n\t\n    	\N
886	\N	\N	\n\tThe Generalization architectural style of the module viewtype can be use to support the evolution of a system \n\t\n\n    	\N
887	\N	\N	\n\tIn the description of the Git case study can be read how it efficiently compares content:\n\t\n\t\\begin{quote}\n\t\tWhen a content (i.e., file or directory) node in the graph has the same reference identity (the SHA in Git) as that in a different commit, the two nodes are guaranteed to contain the same content, allowing Git to short-circuit content diffing efficiently.\n\t\\end{quote}\n\t\n\tThe performance tactic addressed in this fragments is:\n\t\n    	\N
888	\N	\N	\n\tIn Facebook it is not possible to have the information about more that one bilion users in a single disk. Therefore, a sharding technique is applied, where the persistent information is split between several database servers, and applications are routed to the right servers for queries and updates. To describe this architecture\n\t\n    	\N
894	\N	\N	\n\tIn the description of the GitHub case study can be read:\n\t\n\t\\begin{quote}\n\t\tOnce the Smoke proxy has determined the user's route, it establishes a transparent proxy to the proper file server. We have four pairs of file servers. Their names are fs1a, fs1b, ..., fs4a, fs4b. These are 8 core, 16GB RAM bare metal servers, each with six 300GB 15K RPM SAS drives arranged in RAID 10. At any given time one server in each pair is active and the other is waiting to take over should there be a fatal failure in the master. All repository data is constantly replicated from the master to the slave via DRBD.\n\t\\end{quote}\n\t\n\tThe four pairs of file servers implement:\n\t\n    	\N
895	\N	\N	\n\tConsider the concepts of module interface and component port. \n\t\t\n    	\N
896	\N	\N	\n\tA CRUD matrix, which indicates whether each module creates, reads, updates, or deletes data (CRUD, for short) from each data entity. The CRUD matrix\n\t\n    	\N
898	\N	\N	\n\tThe Uses architectural style of the Module viewtype \n\t\n\n    	\N
904	\N	\N	\n\tAccording to the definition of the Layered architectural style, each layer represents a grouping of modules that offers a cohesive set of services.\n\t\n    	\N
905	\N	\N	\n\tThe repository architectural style provides modifiability because\n\n    	\N
907	\N	\N	\n\tIn the description of the Git case study can be read how to deal with the corruption of pack files in the context of the availability quality:\n\t\n\t\\begin{quote}\n\t\tIf an object was only copied partially or another form of data corruption occurred, recalculating the SHA of the current object will identify such corruption.\n\t\\end{quote}\n\t\n\tThe tactic addressed in this fragments is:\n\t\n    	\N
884	1165	\N	\n\tConsider an architect that is designing a component-and-connector view. In some point the architect decides that she does not need to decompose a connector with a demanding quality level. This may occur because\n\t\t\n    	\N
897	1166	\N	\n\tThe client-server architectural style provides availability because\n\t\n    	\N
906	1465	\N	\n\tConsider the kind of relations between components and modules.\n\t\t\n    	\N
937	\N	\N	\n\tThe Service-Oriented Architecture style\n\t\n\n    	\N
938	\N	\N	\n\tConsider the following application-specific types that were defined for a component-and-connector view that depicts the components within \\texttt{Carbon} component. \n\t\n\t\\centering\n\t\\includegraphics[width=100mm]{x-carbon-buffering}\n\n    	\N
923	1169	\N	\n\tAn important stage of the development of any system is its build into the set of executable files. A suitable architectural style which helps on the definition of the build process is\n\n    	\N
941	1173	\N	\n\tConsider the following application-specific types. Note that \\texttt{Queue} components are within the \\texttt{Carbon} components. In a view that contains components of these three types \n\t\n\t\\centering\n\t\\includegraphics[width=120mm]{x-datapoint-access}\n\n    	\N
911	1676	\N	\n\tThe Tiers architectural style\n\t\n\n    	\N
913	1400	\N	\n\tThe Service-Oriented Architecture style improves interoperability because\n\t\n\n    	\N
917	957	\N	\n\tConsider the following decomposition view of the Graphite system where module \\textsc{Store Graphs} is responsible for managing the storage of datapoints and graphs and module \\textsc{Present Graphs} for graphs generation and presentation. Memcache is a library that maintains datapoints in memory to reduce the overhead of obtaining them from the file system.\n\t\n\t\\centering\n\t\\includegraphics[width=100mm]{x-top-decomposition}\n\n    	\N
908	1476	\N	\n\tA function call is not necessarily a uses relation of the Uses architectural style of the Module viewtype because\n\t\n\n    	\N
934	1695	\N	\n\tConsider a stakeholder that is particularly concerned about the total cost of the project. When it comes to describing the system using allocation viewtypes is interested in\n\n    	\N
936	1345	\N	\n\tConsider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n\t\n\t\\begin{quote}\n\t\tThe application should support other kinds of catalogs (CDs, games, books, ...). \n\t\\end{quote}\n\t\n\tThis requirement requires a change of\n\t\n    	\N
927	1411	\N	\n\tConsider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n\t\n\t\\begin{quote}\n\t\tTo support iPhone/iPad/Android version with sync, which allows offline use of the application in the mobile device and data synchronization to occur when a connection is available\n\t\\end{quote}\n\t\n\tThis requirement requires a change of\n\t\n    	\N
912	1495	\N	\n\tIn the Publish-Subscribe architectural style \n\t\n\n    	\N
935	1667	\N	\n\tThe Peer-to-Peer architectural style provides high scalability and availability. In the context of a file sharing system  \n\t\n\n    	\N
944	\N	\N	\n\tAn architecture can also be represented by the set of files which contains its modules code. A suitable architectural style to represent this set of files is\n\n    	\N
947	\N	\N	\n\tThe Service-Oriented Architecture style improves modifiability because\n\t\n\n    	\N
957	\N	\N	\n\tConsider the following decomposition view of the Graphite system where module \\textsc{Store Graphs} is responsible for managing the storage of datapoints and graphs and module \\textsc{Present Graphs} for graphs generation and presentation. Memcache is a library that maintains datapoints in memory to reduce the overhead of obtaining them from the file system.\n\t\n\t\\centering\n\t\\includegraphics[width=100mm]{x-top-decomposition}\n\n    	\N
964	\N	\N	\n\tAn architect needs to show that a security tactic of limit exposure will be effectively provided by the executing system. Therefore, she decides to design\n\t\n    	\N
967	\N	\N	\n\tConsider the following decomposition view of the Graphite system where module \\textsc{Store Graphs} is responsible for managing the storage of datapoints and graphs and module \\textsc{Present Graphs} for graphs generation and presentation. Buffering is a library used to temporarily store incoming data point.\n\t\n\t\\centering\n\t\\includegraphics[width=100mm]{x-top-decomposition}\n\n    	\N
956	1169	\N	\n\tAn important stage of the development of any system is its build into the set of executable files. A suitable architectural style which helps on the definition of the build process is\n\n    	\N
948	1173	\N	\n\tConsider the following application-specific types. Note that \\texttt{Queue} components are within the \\texttt{Carbon} components. In a view that contains components of these three types \n\t\n\t\\centering\n\t\\includegraphics[width=120mm]{x-datapoint-access}\n\n    	\N
966	1495	\N	\n\tIn the Publish-Subscribe architectural style \n\t\n\n    	\N
955	1400	\N	\n\tThe Service-Oriented Architecture style improves interoperability because\n\t\n\n    	\N
965	1464	\N	\n\tConsider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n\t\n\t\\begin{quote}\n\t\tTo support multi-platform (Mac, Windows, Linux)\n\t\\end{quote}\n\t\n\tThis requirement requires a change of\n\t\n    	\N
958	1676	\N	\n\tThe Tiers architectural style\n\t\n\n    	\N
946	1536	\N	\n\tIn the description of the Gnutella system can be read:\n\t\n\t\\begin{quote}\n\t\tThe topology of the system changes at runtime as peer components connect and disconnect to the network.\n\t\\end{quote}\n\t\n\n    	\N
1632	1635	\N	\n  A software system is usually described using different architectural views\n\n  	\N
968	1647	\N	\n\tThe Pipe-and-Filter style allows composition of filters \n\t\n\n    	\N
945	1475	\N	\n\tConsider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n\t\n\t\\begin{quote}\n\t\tTo allow the share of catalogs with family and friends, including some access control. \n\t\\end{quote}\n\t\n\tThis requirement requires \n\t\n    	\N
954	1411	\N	\n\tConsider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n\t\n\t\\begin{quote}\n\t\tTo support iPhone/iPad/Android version with sync, which allows offline use of the application in the mobile device and data synchronization to occur when a connection is available\n\t\\end{quote}\n\t\n\tThis requirement requires a change of\n\t\n    	\N
994	\N	\N	\n\tConsider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the client Spreadsheet. A \\textsc{ConflictResolution} module is used when local commands conflict with remote commands.\n\t\n\t\\centering\n\t\\includegraphics[width=80mm]{x-SocialCalc-cc-client}\n\n    	\N
995	\N	\N	\n\tWhen the domain logic is organized using a Table Module pattern \n\n    	\N
996	\N	\N	\n\tWhen comparing Amazon Silk with Google Chrome in the context of mobile devices\n\n    	\N
997	\N	\N	\n\tConsider the architectural views for the ThousandParsec system. The following diagram depicts a proposal of application-specific types for the architectural components, where the names of the ports are missing. Between the GameServer and Repository component\n\t\n\t\\centering\n\t\\includegraphics[width=80mm]{x-ThousandParsec-cc}\n\n    	\N
998	\N	\N	\n\tConsider the architecture of the Morrison's OrderPad. The connector between the client component, executing in the Pad, and the server component, executing in the OrderPadDatabase\n\t\n    	\N
1004	\N	\N	\n\tWhen the domain logic is organized using a Transaction Script pattern the domain objects\n\n    	\N
1005	\N	\N	\n\tConsider the architecture of the Morrison's OrderPad. In the description of the system can be read:\n\t\n\t\\begin{quote}\n\t\tOne of these was using a file-transfer to send data to the mainframe rather than MQ, which wouldn't perform well once many stores were active.\n\t\\end{quote}\n\t\n\tThis approach means that\n\t\n    	\N
1006	\N	\N	\n\tWhen comparing Amazon Silk with Google Chrome  \n\t\n    	\N
1007	\N	\N	\n\tConsider the architectural views for the ThousandParsec system. The following diagram depicts a fragment of a proposal for the decomposition view of the system. The ThousandParsec protocol\n\t\n\t\\centering\n\t\\includegraphics[width=100mm]{x-ThousandParsec-ruleset}\n\n    	\N
1008	\N	\N	\n\tConsider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the client Spreadsheet. It can be read in the case description: \\emph{A simple improvement is for each client to broadcast its cursor position to other users, so everyone can see which cells are being worked on.}\n\t\n\t\\centering\n\t\\includegraphics[width=80mm]{x-SocialCalc-cc-client}\n\n    	\N
999	1006	\N	\n\tWhen comparing Amazon Silk with Google Chrome  \n\t\n    	\N
1014	\N	\N	\n\tWhen the domain logic is organized using a Transaction Script pattern the most suitable data source patterns are\n\n    	\N
1015	\N	\N	\n\tConsider the architecture of the Morrison's OrderPad. The decision between the use of a Native application or HTML5 on the implementation of the client in the Pad\n\t\n    	\N
1016	\N	\N	\n\tWhen comparing Amazon Silk with Google Chrome in the context of the prediction of pages the user is going to access\n\t\n    	\N
1017	\N	\N	\n\tConsider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the system. According to this representation\n\t\n\t\\centering\n\t\\includegraphics[width=80mm]{x-SocialCalc-cc}\n\n    	\N
1018	\N	\N	\n\tConsider the architectural views for the ThousandParsec system. The following diagram depicts a proposal of application-specific types for the architectural components, where the names of the ports are missing. Between the GameClient and GameServer components\n\t\n\t\\centering\n\t\\includegraphics[width=80mm]{x-ThousandParsec-cc}\n\n    	\N
1024	\N	\N	\n\tConsider the architecture of the Morrison's OrderPad. The final interaction between the OrderPadDatabase component and Mainframe component is supported by \n\t\n    	\N
1025	\N	\N	\n\tWhen the domain logic is organized using a Domain Model pattern the most suitable data source patterns are\n\n    	\N
1026	\N	\N	\n\tWhen comparing Amazon Silk with Google Chrome  \n\n    	\N
1027	\N	\N	\n\tConsider the architectural views for the ThousandParsec system. The following diagram depicts a fragment of a proposal for the decomposition view of the system. The AI players should be described\n\t\n\t\\centering\n\t\\includegraphics[width=100mm]{x-ThousandParsec-ruleset}\n\n    	\N
1028	\N	\N	\n\tConsider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the client Spreadsheet. A \\textsc{Parser} module is used when loading a file\n\t\n\t\\centering\n\t\\includegraphics[width=80mm]{x-SocialCalc-cc-client}\n\n    	\N
1035	1068	\N	\n    There are several tactics to satisfy availability requirements,\n    which may be applied depending on the concrete requirement that we\n    want to satisfy.  Assuming that you want to deal with faults of type\n    \\emph{omission} in your system, which tactic is more adequate?\n\n    	\N
1038	1071	\N	\n\tConsider the following excerpt from Nginx case study\n\n\t\\begin{quote}\n\t\tnginx configuration is kept in a number of plain text files which typically reside in /usr/local/etc/nginx or /etc/nginx. The main configuration file is usually called nginx.conf. \t\tTo keep it uncluttered, parts of the configuration can be put in separate files which can be automatically included in the main one. However, it should be noted here that nginx \t\tdoes not currently support Apache-style distributed configurations (i.e., .htaccess files). All of the configuration relevant to nginx web server behavior should reside in a \t\tcentralized set of configuration files.\n\t\\end{quote}\n\t\n\tWhen comparing the configuration in Nginx with the configuration in Apache we can say that\n\t\n\t  	\N
1032	1335	\N	\n\t    Consider that a software development team uses an agile methodology\n\t    such as XP (Extreme Programming), where no documentation is\n\t    produced.  Then, the systems developed by that team\n\n\t    	\N
1037	1457	\N	\n\tConsider a scenario for performance where the arrival of events is stochastic with a distribution where there are peeks of events but the arrival of events over a long period is uniform. The best tactic to apply is\n\t\t\n    	\N
1058	1488	\N	\n    In Graphite system  the \\emph{receiver} and the \\emph{writer threads} support asynchronous writing of metrics to optimize disk accesses. The interaction between these two components follow the architectural style\n\n    	\N
1059	\N	\N	\n\t  In the Continous integration case study can be read about Jenkins\n\t  \n\t  \\begin{quote}\n\t\t  It takes advantage of the JUnit XML standard for unit test and code coverage reporting to integrate reports from a variety of test tools. Jenkins originated with Sun, but is very widely used and has a robust open-source community associated with it.\n\t  \\end{quote}\n\t  \n\t  Consider that a scenario is written from the above sentence\n    \n    	\N
1060	\N	\N	\n\t  In the Infinispan case study can be read\n\t  \n\t  \\begin{quote}\n\t\t  When persisting for durability, persistence can either be online, where the application thread is blocked until data is safely written to disk, or offline, where data is flushed to disk periodically and asynchronously. In the latter case, the application thread is not blocked on the process of persistence, in exchange for uncertainty as to whether the data was successfully persisted to disk at all.\n\t  \\end{quote}\n\t  \n\t  From the description we can infer a trade-off between the qualities of\n    \n    	\N
1062	\N	\N	\n    Consider the following figure depicting two different architectures for web applications\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=100mm]{../Microservices}\n\t\\end{center}\n\t\n    	\N
1063	\N	\N	\n    Consider the following excerpt about the Amazon system\n\t\n\t\\begin{quote}\n\t\tOver time, this grew into hundreds of services and a number of application servers that aggregate the information from the services. The application that renders the Amazon.com Web pages is one such application server, but so are the applications that serve the Web-services interface, the customer service application, the seller interface, and the many third-party Web sites that run on our platform.\n\t\\end{quote}\n\t\n\tThe architectural style that better represents these aspects of the Amazon architecture is\n\t\n    	\N
1064	\N	\N	\n    According to the attribute-driven design process, we should design\n    the software architecture for a system based on a selected list of\n    requirements, which are called the \\textit{architecture significant requirements}.\n    These requirements should be sorted according to their\n    importance for the system's stakeholders because\n\n    	\N
1068	\N	\N	\n    There are several tactics to satisfy availability requirements,\n    which may be applied depending on the concrete requirement that we\n    want to satisfy.  Assuming that you want to deal with faults of type\n    \\emph{omission} in your system, which tactic is more adequate?\n\n    	\N
1071	\N	\N	\n\tConsider the following excerpt from Nginx case study\n\n\t\\begin{quote}\n\t\tnginx configuration is kept in a number of plain text files which typically reside in /usr/local/etc/nginx or /etc/nginx. The main configuration file is usually called nginx.conf. \t\tTo keep it uncluttered, parts of the configuration can be put in separate files which can be automatically included in the main one. However, it should be noted here that nginx \t\tdoes not currently support Apache-style distributed configurations (i.e., .htaccess files). All of the configuration relevant to nginx web server behavior should reside in a \t\tcentralized set of configuration files.\n\t\\end{quote}\n\t\n\tWhen comparing the configuration in Nginx with the configuration in Apache we can say that\n\t\n\t  	\N
1072	\N	\N	\n  Suppose that there are certain performance requirements for a\n  system, and that you want to show to the stakeholders of the system\n  that the software architecture that you designed meet those\n  requirements. To do this\n\n    	\N
1073	\N	\N	\n    Suppose that you are designing the software architecture for an\n    enterprise application that has requirements about the maximum\n    response time for a certain type of requests.  Moreover, assume\n    that those requests arrive at the system periodically, whereas the\n    remaining requests have an unpredictable frequency.  Finally,\n    assume that your system will have a single server that will be\n    executing on a predefined machine with a 12-core AMD processor.\n    To show to the stakeholders that your system satisfies the\n    performance requirements you have to use views of which\n    architectural style?\n\n    	\N
1075	\N	\N	\n\t  Imagine that you want to develop a system that is to be used in email servers, whose goal\n\t  is to allow changing the emails that are received by the server (for example, to remove\n\t  potential viruses or URLs linking to phishing sites). The goal is that the server feeds each\n\t  received email through this system before processing it (e.g., forward it to another server,\n\t  or store it locally). The system is supposed to be easily modifiable, to support new types\n\t  of email transformations. Which architectural style is the most adequate to satisfy these\n\t  requirements?\n\n\t   	\N
1077	\N	\N	\n  Web servers implemented in Java, such as the Tomcat web server,\n  typically use a thread-based model for processing requests.  That\n  is, they process each request on a different thread within the same\n  JVM process, rather than on a different process.  One of the reasons\n  for this is that\n\n  	\N
1078	\N	\N	\n\t Consider the following architectural view of the Pony-Build system as described in the Continous integration case study\n\t  \n\t\\begin{center}\n\t\t\\includegraphics[width=100mm]{../PonyBuildArchitecture}\n\t\\end{center}\n\t\n\tAccording to this view the quality of performance is achieved through\n    \n    	\N
1061	1174	\N	\n    With the evolution of the web application technologies, it is now\n    possible to develop web applications with a user interface similar\n    to the interface of desktop applications.  Yet, for this to\n    happen, part of the code that was executing in the web server is\n    now executing in the web browser.  How does this change manifests\n    in the software architecture of the system?\n\n    	\N
1066	1407	\N	\n  To achieve a faster time-to-market, software companies are\n  increasingly using a strategy of incremental releases of their\n  software, where each new release has a set of new features.  Which\n  architectural style is better to analyse whether the system's\n  software architecture is adequate for the planned incremental\n  releases?\n\n  	\N
1076	1566	\N	\n\tConsider the work assignment architectural style of the allocation viewtype.\n\t\t\t\n    	\N
1079	\N	\N	\n\t  In the Infinispan case study can be read\n\t  \n\t  \\begin{quote}\n\t\t Infinispan's core data structures make use of software transactional memory techniques for concurrent access to shared data. This minimizes the need for explicit locks, mutexes and other forms of synchronization, preferring techniques like compare-and-set operations within a loop to achieve correctness when updating shared data structures. Such techniques have been proven to improve CPU utilization in multi-core and SMP systems, and despite the increased code complexity, has paid off in overall performance when under load.\n\t  \\end{quote}\n\t  \n\t  These properties of Infinispan can be represented by\n    \n    	\N
1080	\N	\N	\n    Consider the following excerpt about the Scalable web architecture and distributed systems case study about two different possible implementations of a global cache\n\t\n\t\\begin{quote}\n\t\t The majority of applications leveraging global caches tend to use the first type, where the cache itself manages eviction and fetching data to prevent a flood of requests for the same data from the clients. However, there are some cases where the second implementation makes more sense. For example, if the cache is being used for very large files, a low cache hit percentage would cause the cache buffer to become overwhelmed with cache misses; in this situation it helps to have a large percentage of the total data set (or hot data set) in the cache. \t\\end{quote}\n\t\n    	\N
1083	\N	\N	\n\tConsider the following sentence by Melvin Conways, also known as Conway's Law\n\t\n\t\\begin{quote}\n\t\torganizations which design systems ... are constrained to produce designs which are copies of the communication structures of these organizations\n\t\\end{quote}\n\t\t\n    	\N
1084	\N	\N	\n  \tConsider the following architectural view of the Adventure Builder system\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=80mm]{../AdventureBuilderDeployment}\n\t\\end{center}\n\t\n\tAccording to this view the stakeholders can see that the Adventure Builder system\n\n   \t	\N
1085	\N	\N	\n\tFrank Buschmann cites the characterization Marquardt does of Performitis:\n\t\t\n\t\\begin{quote}\n\t\tEach part of the system is directly influenced by local performance tuning measures. There is no global performance strategy, or it ignores other qualities of the system as testability and maintainability.\n\t\\end{quote}\n\t\n\tFrom this problem you can conclude that:\n\n    	\N
1088	\N	\N	\n    Consider the Figure that describes the use of\n    caches in web services.  \n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=80mm]{../RequestNodeCache}\n\t\\end{center}\n\t\n\tIn that Figure, there is a\n    rectangle with the name \\emph{Cache} within another rectangle with\n    the name \\emph{Request Node}.  Taking into account the description\n    made in the text and the goal of that Figure, those rectangles\n    correspond to which type of software elements?\n\n    	\N
1086	1335	\N	\n\t    Consider that a software development team uses an agile methodology\n\t    such as XP (Extreme Programming), where no documentation is\n\t    produced.  Then, the systems developed by that team\n\n\t    	\N
1087	1394	\N	\n  As part of the process of creating an architecture, we talked about\n  a framework for capturing some of the requirements for a system.  In\n  this context, \\textbf{concrete scenarios} are used for\n\n  	\N
1091	1425	\N	\n\t \tThe software architecture of a system\n\n    \t	\N
1082	1488	\N	\n    In Graphite system  the \\emph{receiver} and the \\emph{writer threads} support asynchronous writing of metrics to optimize disk accesses. The interaction between these two components follow the architectural style\n\n    	\N
1081	1445	\N	\n    In the Graphite system the component \\emph{carbon} provides to \\emph{webapp} components an access interface to the \\emph{buffers} in order to improve the quality of\n\n    	\N
1122	\N	\N	\n\t  In the Continous integration case study can be read about future features for Pony-Build\n\t  \n\t  \\begin{quote}\n\t\t  Currently, each continuous integration system reinvents the wheel by providing its own build configuration language, which is manifestly ridiculous; there are fewer than a dozen commonly used build systems, and probably only a few dozen test runners. Nonetheless, each CI system has a new and different way of specifying the build and test commands to be run. In fact, this seems to be one of the reasons why so many basically identical CI systems exist: each language and community implements their own configuration system, tailored to their own build and test systems, and then layers on the same set of features above that system. Therefore, building a domain-specific language (DSL) capable of representing the options used by the few dozen commonly used build and test tool chains would go a long way toward simplifying the CI landscape.\n\t  \\end{quote}\n\t  \n\t  Suppose that you are the architect that has to change the architecture to accomodate this new feature. Therefore, as an architect\n    \n    	\N
1123	\N	\N	\n\t  In the Infinispan case study can be read\n\t  \n\t  \\begin{quote}\n\t\t Infinispan uses its own serialization scheme, where full class definitions are not written to the stream. Instead, magic numbers are used for known types where each known type is represented by a single byte. This greatly improves not just serialization and de-serialization speed qualities, but also produces a much more compact byte stream for transmission across a network. An externalizer is registered for each known data type, registered against a magic number. This externalizer contains the logic to convert object to bytes and vice versa.\n\t  \\end{quote}\n\t  \n\t  These properties of Infinispan can be represented by\n    \n    	\N
1124	\N	\N	\n    One of the evolutions in the development of web applications was\n    the appearance of \\emph{mashups}, which are described in Wikipedia\n    as follows:\n\n    \\begin{quote}\n      In web development, a mashup is a web page or application that\n      uses and combines data, presentation or functionality from two\n      or more sources to create new services.\n    \\end{quote}\n\n    Knowing that the sources used by \\emph{mashups} do not know about\n    the existence of the \\emph{mashups} and that they change\n    frequently, forcing the adaptation of the \\emph{mashups} to\n    accomodate those changes, what is the best architecture to\n    minimize the effects of those changes?\n\n    	\N
1125	\N	\N	\n    Consider the following figure depicting two different architectures for web applications\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=140mm]{../Microservices}\n\t\\end{center}\n\t\n    	\N
1126	\N	\N	\n    Consider the following excerpt about the Amazon system\n\t\n\t\\begin{quote}\n\t\tMainly, I think service orientation has helped us there. The stored data formats are decoupled from the format in which you communicate data items. If there is no need for sharing schemas of the actual storage layout, you can focus on making sure that the service interfaces can evolve in a way that allows you to handle variations of data formats. You could dictate a rigorous single format, but that would not be realistic if you are in Amazon's platform business. We have to make sure that the platform can be extended by our customers to meet their needs.\n\t\\end{quote}\n\t\n\tThe architectural style that better represents these aspects of the Amazon architecture is\n\t\n    	\N
1127	\N	\N	\n    Consider the following excerpt about the Scalable web architecture and distributed systems case study\n\t\n\t\\begin{quote}\n\t\t Employing such a strategy maximizes data locality for the requests, which can result in decreased request latency. For example, let's say a bunch of nodes request parts of B: partB1, partB2, etc. We can set up our proxy to recognize the spatial locality of the individual requests, collapsing them into a single request and returning only bigB, greatly minimizing the reads from the data origin.\n\t\\end{quote}\n\t\n\tThe quality that is achieved with this tactic is\n\t\n    	\N
1130	\N	\N	\n  \t  Designing the software architecture for a complex system\n\n   \t 	\N
1131	\N	\N	\n  The architecturally significant requirements are important in the process of creating\n  the software architecture for a system because they are\n\n  	\N
1133	\N	\N	\n  \tConsider the following architectural view of the Adventure Builder system\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=120mm]{../AdventureBuilderComponentConector}\n\t\\end{center}\n\t\n\tIn this component-and-connector view the interactions the interactions between components follow the architectural style(s)\n\n   \t	\N
1134	\N	\N	\n    Which of the following phrases best describe the relationship\n    between modules and components?\n\n    	\N
1135	\N	\N	\n\tGeneral scenarios play an important role in the development of a software architecture\n\tbecause\n\t\n\t	\N
1136	\N	\N	\n\tSuppose that in the process of designing a system's software architecture you come to\n\tthe conclusion that there are uses relations in both directions in almost all of the system's\n\tmodules. This means that\n\t\n\t	\N
1160	\N	\N	\n\t  In the Continous integration case study can be read about Jenkins\n\t  \n\t  \\begin{quote}\n\t\t  It takes advantage of the JUnit XML standard for unit test and code coverage reporting to integrate reports from a variety of test tools. Jenkins originated with Sun, but is very widely used and has a robust open-source community associated with it.\n\t  \\end{quote}\n\t  \n\t  The quality of Jenkins that is emphasized in the above sentence is\n    \n    	\N
1132	1425	\N	\n\t \tThe software architecture of a system\n\n    \t	\N
1119	1571	\N	\n    Suppose that you are developing the software architecture of a new\n    system for an organization composed of several organizational\n    units, each one with its own information systems, which have been\n    developed independently of each other over the course of several\n    years and depending on the particular needs of each unit.  Your\n    system has the goal of integrating the various existing systems,\n    providing in this way not only a unified view of how the\n    organization works, but also allowing the creation of new\n    processes within the organization that involve more than one unit.\n    Which architectural style is better suited to design such a\n    system?\n\n    	\N
1129	1496	\N	\n\t  A high-level component-and-connect view of Graphite system can be designed using only the architectural style(s)\n\n    	\N
1138	1486	\N	\n\tThe connectors on component-and-connector view\n\t\n\t	\N
1128	1565	\N	\n\t  Which quality, or qualities, of the Graphite system are described by the sentence: \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL.}\n\n    	\N
1139	\N	\N	\n    The email system is composed of various types of components\n    playing different roles.  For example, to send an email, a user\n    uses a \\emph{mail user agent} (MUA), to compose his message and\n    send it.  To send the message, the MUA typically connects to a\n    \\emph{mail transfer agent} (MTA) that receives the message,\n    analyzes the message's headers to determine the recipients and,\n    after querying the DNS system to determine the MTA responsible for\n    each recipient, it connects to the MTAs responsible for the\n    destination addresses to deliver the message.  Each of these MTAs\n    receives the message and stores it locally or forwards it to\n    others MTAs until the message reaches its destination MTA.\n    The recipient user of the message will then use his MUA to see the\n    messages that were sent to him.  To do it, the MUA connects to an\n    IMAP or POP server to obtain the user's messages.  Those IMAP and\n    POP servers obtain the messages for a user by reading the messages\n    stored by the MTA.\n\n    Given this simplified description of the operation of the email\n    system, which of the following architectural styles is more\n    appropriate to represent the pattern of interaction between the\n    MTA and the servers IMAP and POP?\n\n    	\N
1140	\N	\N	\n    Consider the following excerpt from the tutorial on the Hadoop\n    MapReduce:\n\n    \\begin{quote}\n      Hadoop MapReduce is a software framework for easily writing\n      applications which process vast amounts of data (multi-terabyte\n      data-sets) in-parallel on large clusters (thousands of nodes) of\n      commodity hardware in a reliable, fault-tolerant manner.\n\n      A MapReduce job usually splits the input data-set into\n      independent chunks which are processed by the map tasks in a\n      completely parallel manner.  The framework sorts the outputs of\n      the maps, which are then input to the reduce tasks. Typically\n      both the input and the output of the job are stored in a\n      file-system.  The framework takes care of scheduling tasks,\n      monitoring them and re-executes the failed tasks.\n    \\end{quote}\n\n    Which architectural style of the component-and-connector viewtype\n    is more adequate to describe how the MapReduce works, taking into\n    account its main advantages in solving a problem?\n\n    	\N
1143	\N	\N	\n  Web servers typically receive requests from different users\n  concurrently (that is, either different users make requests\n  simultaneously or they make them fast enough that it is not possible\n  for the web server to answer one request from one user before\n  receiving another request from another user).  To process all the\n  requests, web servers may use different implementation strategies.\n  Assuming that we want to develop a web server to serve only static\n  pages with more or less the same size to a set of clients on the\n  same LAN network as the server, which of the following strategies\n  would be better?\n\n  	\N
1146	\N	\N	\n\tDuring the different steps on how to create an architecture, the precise specification of architecture quality attributes is initially relevant to\n\n    	\N
1148	\N	\N	\n\t  In the Infinispan case study can be read\n\t  \n\t  \\begin{quote}\n\t\t  Infinispan supports several pluggable cache stores-adapters that can be used to persist data to disk or any form of secondary storage. The current default implementation is a simplistic hash bucket and linked list implementation, where each hash bucket is represented by a file on the filesystem. While easy to use and configure, this isn't the best-performing implementation.\n\t  \\end{quote}\n\t  \n\t  The main architectural quality addressed in the above excerpt is \n\t  \n    	\N
1152	\N	\N	\n\tIn wikipedia you can find the following fragment of a definition:\n\t\n\t\\begin{quote}\n\t\tAn individual software component is a software package, or a module that encapsulates a set of related functions.\n\t\\end{quote}\n\t\n\tAccording to the definitions taught in the course the above \\emph{individual software component} corresponds to:\n\n    	\N
1153	1484	\N	\n\tConsider the following view of the Adventure Builder system\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=80mm]{AdventureBuilder-SOA}\n\t\\end{center}\n\t\n\tIn this view the following architectural styles are used\n\t\n\t\t\n    	\N
1154	1184	\N	\n\tA general scenario for a quality attribute\n\n    	\N
1150	1198	\N	\n\tIn a scenario for interoperability\n\n    	\N
1141	1458	\N	\n    There are several tactics to satisfy availability requirements,\n    which may be applied depending on the concrete requirement that we\n    want to satisfy.  Assuming that you want to detect faults of type\n    \\emph{response} in your system, which tactic is more adequate?\n\n    	\N
1144	1535	\N	\n\tConsider the Uses architectural style of the Module viewtype\n\t\t\n    	\N
1162	1355	\N	\n\tThe quality that is more relevant to views of the module viewtype is:\n\t\t\n    	\N
1155	1447	\N	\n\tConsidering the availability architectural quality, the tactic of retry\n\n    	\N
1163	1476	\N	\n\tA function call is not necessarily a uses relation of the Uses architectural style of the Module viewtype because\n\t\n\n    	\N
1159	1634	\N	\n\tDesigning an architecture\n\n    	\N
1165	\N	\N	\n\tConsider an architect that is designing a component-and-connector view. In some point the architect decides that she does not need to decompose a connector with a demanding quality level. This may occur because\n\t\t\n    	\N
1166	\N	\N	\n\tThe client-server architectural style provides availability because\n\t\n    	\N
1169	\N	\N	\n\tAn important stage of the development of any system is its build into the set of executable files. A suitable architectural style which helps on the definition of the build process is\n\n    	\N
1170	\N	\N	\n    In Nginx, given that a \\emph{worker} processes various requests during its\n    life, how does it do it?\n\n    	\N
1173	\N	\N	\n\tConsider the following application-specific types. Note that \\texttt{Queue} components are within the \\texttt{Carbon} components. In a view that contains components of these three types \n\t\n\t\\centering\n\t\\includegraphics[width=120mm]{x-datapoint-access}\n\n    	\N
1174	\N	\N	\n    With the evolution of the web application technologies, it is now\n    possible to develop web applications with a user interface similar\n    to the interface of desktop applications.  Yet, for this to\n    happen, part of the code that was executing in the web server is\n    now executing in the web browser.  How does this change manifests\n    in the software architecture of the system?\n\n    	\N
1178	\N	\N	\n\tIn the Graphite system description can be read:\n\t\n\t\\begin{quote}\n\t\tWe've got 600,000 metrics that update every minute and we're assuming our storage can only keep up with 60,000 write operations per minute. This means we will have approximately 10 minutes worth of data sitting in carbon's queues at any given time. To a user this means that the graphs they request from the Graphite webapp will be missing the most recent 10 minutes of data.\n\t\\end{quote}\n\n    	\N
1184	\N	\N	\n\tA general scenario for a quality attribute\n\n    	\N
1186	\N	\N	\n\tAccording to Frank Buschmann in the article \\emph{Introducing the Pragmatic Architect}\n\t\t\n    	\N
1187	\N	\N	\n\tIn his article \\emph{Who Needs an Architect?} Martin Fowler refers to the following architecture definition\n\t\t\n\t\\begin{quote}\n\t\t\\emph{architecture is the set of design decisions that must be made early in a project}\n\t\\end{quote}\n\n    	\N
1188	\N	\N	\n\tConsider the following informal view of an Image Hosting System\n\t\n\\begin{center}\n\t\\includegraphics[width=100mm]{ImageHostingPerformance}\n\\end{center}\n\n    	\N
1194	\N	\N	\n\tConsidering the availability architectural quality and the tactics of ping/echo and heartbeat\n\n    	\N
1195	\N	\N	\n\tSuppose that after designing a successful architecture for a particular client the software house management decides to create a cross-functional internal department to start providing products for this particular segment of the market.\n\t\t\n    	\N
1196	\N	\N	\n\tConsider the following informal view of an Image Hosting System\n\t\n\\begin{center}\n\t\\includegraphics[width=100mm]{ImageHostingScalability}\n\\end{center}\n\n    	\N
1197	\N	\N	\n\tIn his article \\emph{Who Needs an Architect?} Martin Fowler refers to the following architecture definition\n\t\t\n\t\\begin{quote}\n\t\t\\emph{the expert developers working on that project have a shared understanding of the system design}\n\t\\end{quote}\n\n    	\N
1198	\N	\N	\n\tIn a scenario for interoperability\n\n    	\N
1405	\N	\N	\n\tWhen designing an architecture requirements can be split into functional, quality attributes, and constraints. Functional requirements have impact on:\n\t\t\n    	\N
1167	1255	\N	\n\tConsider the peer-to-peer architectural style\n\t\t\n    	\N
1164	1665	\N	\n  In a layered architecture composed by four layers, where the topmost\n  layer is the layer number 1 and the bottommost layer is the layer\n  number 4, which of the layers is more modifiable?\n\n    	\N
1176	1274	\N	\n\tConsider the following distinction between Monoliths and Microservices made by Matin Fowler\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=100mm]{MonolithsVsMicroservices}\n\t\\end{center}\n\t\n\tIf we try to map this figure into a set of views we will need.\n\t\t\t\n    	\N
1172	1276	\N	\n\tConsider the Infinispan system when it is configured as a remote data grid. The relation between the Applications and the Grid is\n\t\t\t\n    	\N
1185	1447	\N	\n\tConsidering the availability architectural quality, the tactic of retry\n\n    	\N
1171	1287	\N	\n\tIn the Continuous Integration case can be read\n\t\\begin{quote}\n\t\tBuild notification: The outcomes of builds generally need to be communicated to interested clients, either via pull (Web, RSS, RPC, etc.) or push notification (e-mail, Twitter, etc.) This can include notification of all builds, or only failed builds, or builds that haven't been executed within a certain period.\n\t\\end{quote}\n\t\tThe architectural style used in push notifications is\n\t\t\t\n    	\N
1204	\N	\N	\n\tConsider the following informal view of an Image Hosting System\n\t\n\\begin{center}\n\t\\includegraphics[width=100mm]{ImageHostingReads}\n\\end{center}\n\n    	\N
1206	\N	\N	\n\tVery often, when a software architecture is being designed, conflicting requirements are identified, like between security and availability. The role of the software architect is to\n\t\t\n    	\N
1207	\N	\N	\n\tThe definition of software architecture, on the course book, is\n\t\\begin{quote}\n\t\t\\emph{The software architecture of a system is the set of structures needed to reason about the system, which comprise software elements, relations among them, and properties of both.}\n\t\\end{quote}\n\t\n\tAccording to this definition\n\n    	\N
1208	\N	\N	\n\tConsidering the availability architectural quality and the tactics of active redundancy, passive redundancy, and spare\n\n    	\N
1214	\N	\N	\n\tConsider the following fragment in the description of the nginx case study.\n\t\n\t\\begin{quote}\n\t\tnginx's configuration system was inspired by Igor Sysoev's experiences with Apache. His main insight was that a scalable configuration system is essential for a web server. The main scaling problem was encountered when maintaining large complicated configurations with lots of virtual servers, directories, locations and datasets. In a relatively big web setup it can be a nightmare if not done properly both at the application level and by the system engineer himself.\n\t\\end{quote}\n\t\t\t\n    	\N
1215	\N	\N	\n\tThe Attribute-Driven Design method is characterized by \n\t\t\n    	\N
1217	\N	\N	\n\tConsider the following fragment in the description of the Graphite system:\n\t\n\t\\begin{quote}\n\t\tThe Graphite webapp allows users to request custom graphs with a simple URL-based API. Graphing parameters are specified in the query-string of an HTTP GET request, and a PNG image is returned in response. \n\t\\end{quote}\n\t\t\n    	\N
1218	\N	\N	\n\tThe modifiability tactic Use an Intermediary between two modules\n\t\t\n    	\N
1224	\N	\N	\n\tIn the description of the nginx case study we can read:\n\t\n\t\\begin{quote}\n\t\tnginx is event-based, so it does not follow Apache's style of spawning new processes or threads for each web page request. The end result is that even as load increases, memory and CPU usage remain manageable. nginx can now deliver tens of thousands of concurrent connections on a server with typical hardware.\n\t\\end{quote}\n\t\n\tThe tactic nginx follows to achieve tens of thousands of concurrent connections is\n\t\t\t\n    	\N
1225	\N	\N	\n\tConsider the following scenario: \\emph{A system administrator simultaneously launches several instances of the system, each one using a different database, and is able to do it in less than 10 minutes.}\n\t\t\n    	\N
1250	1257	\N	\n\tIn the Continuous Integration case study can be read\n\t\n\t\\begin{quote}\n\t\tExternal resource coordination: Integration tests may depend on non-local resources such as a staging database or a remote web service. The CI system may therefore need to coordinate builds between multiple machines to organize access to these resources.\n\t\\end{quote}\n\t\n\tThe referred tactic is\n\t\t\n    	\N
1205	1336	\N	\n\tThe requirements impact on how an architecture is designed\n\n    	\N
1216	1457	\N	\n\tConsider a scenario for performance where the arrival of events is stochastic with a distribution where there are peeks of events but the arrival of events over a long period is uniform. The best tactic to apply is\n\t\t\n    	\N
1461	1465	\N	\n\tConsider the kind of relations between components and modules.\n\t\t\n    	\N
1226	\N	\N	\n\tConsider the following fragment in the description of the Graphite system:\n\t\n\t\\begin{quote}\n\t\tTo avoid this kind of catastrophe, I added several features to carbon including configurable limits on how many data points can be queued and rate-limits on how quickly various whisper operations can be performed. These features can protect carbon from spiraling out of control and instead impose less harsh effects like dropping some data points or refusing to accept more data points. However, proper values for those settings are system-specific and require a fair amount of testing to tune. They are useful but they do not fundamentally solve the problem. For that, we'll need more hardware.\n\t\\end{quote}\n\t\n\tThe performance tactics referred in the above description are:\n\t\t\n    	\N
1227	\N	\N	\n\tArchitecturally significant requirements (ASR) are captured in a utility tree where each one of the ASRs are classified in terms of its architectural impact and business value.\n\t\t\n    	\N
1228	\N	\N	\n\tThe two basic contributors for the response time are the processing time and the blocking time. Which tactic for performance may reduce the blocking time\n\t\t\n    	\N
1234	\N	\N	\n\tIt was decided that the Fénix system should be based on open-source software.\n\t\t\n    	\N
1235	\N	\N	\n\tConsider the following fragment in the description of the Graphite system:\n\t\n\t\\begin{quote}\n\t\tImagine that you have 60,000 metrics that you send to your Graphite server, and each of these metrics has one data point per minute. Remember that each metric has its own whisper file on the filesystem. This means carbon must do one write operation to 60,000 different files each minute. As long as carbon can write to one file each millisecond, it should be able to keep up. This isn't too far fetched, but let's say you have 600,000 metrics updating each minute, or your metrics are updating every second, or perhaps you simply cannot afford fast enough storage. Whatever the case, assume the rate of incoming data points exceeds the rate of write operations that your storage can keep up with. How should this situation be handled?\n\t\\end{quote}\n\t\t\t\n    	\N
1236	\N	\N	\n\tJeff Atwood wrote an article in its blog about performance of software systems that is entitled, \\emph{Hardware is Cheap, Programmers are Expensive}. Which performance tactic(s) is he suggesting\n\t\t\n    	\N
1237	\N	\N	\n\tIn the description of the nginx case study we can read:\n\t\n\t\\begin{quote}\n\t\tnginx's modular architecture generally allows developers to extend the set of web server features without modifying the nginx core. nginx modules come in slightly different incarnations, namely core modules, event modules, phase handlers, protocols, variable handlers, filters, upstreams and load balancers. At this time, nginx doesn't support dynamically loaded modules; i.e., modules are compiled along with the core at build stage.\n\t\\end{quote}\n\t\n\tThe above sentence corresponds to\n\t\t\t\n    	\N
1238	\N	\N	\n\tConsider the modifiability quality and the cost of change.\n\t\t\n    	\N
1244	\N	\N	\n\tWhen describing their system people refer to a part of it as containing a database server. Applying the component-and-connector styles learned in the course we can say that this system uses\n\n    	\N
1245	\N	\N	\n\tIn the Continuous Integration case study can be read\n\t\n\t\\begin{quote}\n\t\tThe space of architectures for continuous integration systems seems to be dominated by two extremes: master/slave architectures, in which a central server directs and controls remote builds; and reporting architectures, in which a central server aggregates build reports contributed by clients. All of the continuous integration systems of which we are aware have chosen some combination of features from these two architectures.\n\t\\end{quote}\n\t\n\tThe tactic that is referred in both architectures is\n\t\t\n    	\N
1246	\N	\N	\n\tConsider the Decomposition architectural style of the Module viewtype\n\t\t\n    	\N
1247	\N	\N	\n\tThe Infinispan system can be used as a library, in which case it is embedded into a Java application, or as a server, in which case it is a remote data grid.\n\t\t\n    	\N
1248	\N	\N	\n\tConsider the Component-and-Connector viewtype\n\t\t\n    	\N
1231	1234	\N	\n\tIt was decided that the Fénix system should be based on open-source software.\n\t\t\n    	\N
1249	1535	\N	\n\tConsider the Uses architectural style of the Module viewtype\n\t\t\n    	\N
1331	1647	\N	\n\tThe Pipe-and-Filter style allows composition of filters \n\t\n    	\N
1254	\N	\N	\n\tConsider the Component-and-Connector viewtype\n\t\t\n    	\N
1255	\N	\N	\n\tConsider the peer-to-peer architectural style\n\t\t\n    	\N
1257	\N	\N	\n\tIn the Continuous Integration case study can be read\n\t\n\t\\begin{quote}\n\t\tExternal resource coordination: Integration tests may depend on non-local resources such as a staging database or a remote web service. The CI system may therefore need to coordinate builds between multiple machines to organize access to these resources.\n\t\\end{quote}\n\t\n\tThe referred tactic is\n\t\t\n    	\N
1258	\N	\N	\n\tIn the Infinispan case study can be read\n\t\n\t\\begin{quote}\n\t\tThis allows applications to theoretically address an unlimited amount of in-memory storage as nodes are added to the cluster, increasing overall capacity.\n\t\\end{quote}\n\t\n\tThe quality that is referred is\n\t\t\n    	\N
1264	\N	\N	\n\tConsider the two following views\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=100mm]{pipes-and-filters}\n\t\\end{center}\n\t\n\t\t\n    	\N
1265	\N	\N	\n\tIn the Infinispan case study can be read\n\t\n\t\\begin{quote}\n\t\tBefore putting data on the network, application objects need to be serialized into bytes so that they can be pushed across a network, into the grid, and then again between peers. The bytes then need to be de-serialized back into application objects, when read by the application. In most common configurations, about 20\\% of the time spent in processing a request is spent in serialization and de-serialization.\n\t\\end{quote}\n\t\n\tThe above description can motivate a scenario for\n\t\t\n    	\N
1266	\N	\N	\n\tConsider the shared-data style. Which of the following qualities does it support?\n\n    	\N
1267	\N	\N	\n\tIn the Continuous Integration case study can be read\n\t\n\t\\begin{quote}\n\t\tIt takes advantage of the JUnit XML standard for unit test and code coverage reporting to integrate reports from a variety of test tools.\n\t\\end{quote}\n\t\n\tThe referred quality is\n\t\t\n    	\N
1274	\N	\N	\n\tConsider the following distinction between Monoliths and Microservices made by Matin Fowler\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=100mm]{MonolithsVsMicroservices}\n\t\\end{center}\n\t\n\tIf we try to map this figure into a set of views we will need.\n\t\t\t\n    	\N
1276	\N	\N	\n\tConsider the Infinispan system when it is configured as a remote data grid. The relation between the Applications and the Grid is\n\t\t\t\n    	\N
1277	\N	\N	\n\tConsider the following representation of the Buildbot system.\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=80mm]{BuildbotArchitecture}\n\t\\end{center}\n\t\n\tThe architecture style between the Buildbot Master and the Clients is:\n\t\t\t\n    	\N
1278	\N	\N	\n\tConsider the Service-Oriented Architecture architectural style\n\t\t\n    	\N
1332	\N	\N	\n    In the Service Oriented Architecture style it is common to have a\n    specialized component, named \\emph{Enterprise Service Bus} (ESB).\n    The goal of using of an ESB in a system is\n\n    	\N
1252	1254	\N	\n\tConsider the Component-and-Connector viewtype\n\t\t\n    	\N
1268	1474	\N	\n\tConsider the Layered architectural style of the Module viewtype\n\t\t\n    	\N
1256	1535	\N	\n\tConsider the Uses architectural style of the Module viewtype\n\t\t\n    	\N
1275	1566	\N	\n\tConsider the work assignment architectural style of the allocation viewtype.\n\t\t\t\n    	\N
1284	\N	\N	\n\tIn the description of Infinispan system can be read\n\t\n\t\\begin{quote}\n\t\tInfinispan supports several pluggable cache stores-adapters that can be used to persist data to disk or any form of secondary storage. The current default implementation is a simplistic hash bucket and linked list implementation, where each hash bucket is represented by a file on the filesystem. While easy to use and configure, this isn't the best-performing implementation.\n\t\\end{quote}\n\t\n\tThe architectural style(s) that should be used to illustrate the sentence is (are)\n\t\t\t\n    	\N
1286	\N	\N	\n\tConsider the deployment architectural style of the allocation viewtype.\n\t\t\t\n    	\N
1287	\N	\N	\n\tIn the Continuous Integration case can be read\n\t\\begin{quote}\n\t\tBuild notification: The outcomes of builds generally need to be communicated to interested clients, either via pull (Web, RSS, RPC, etc.) or push notification (e-mail, Twitter, etc.) This can include notification of all builds, or only failed builds, or builds that haven't been executed within a certain period.\n\t\\end{quote}\n\t\tThe architectural style used in push notifications is\n\t\t\t\n    	\N
1288	\N	\N	\n\tConsider the following representation of Amazon's architecture (sorry for the figure's layout: \\textbf{save trees})\n\t\t\t\n\t\\begin{center}\n\t\t\\includegraphics[width=80mm]{AmazonArchitecture}\n\t\\end{center}\n\t\n\tWhat is the most relevant architecture style that is used in this figure?\n\t\n    	\N
1294	\N	\N	\n\tIn the interview Werner Vogels from Amazon gives to Jim Gray, Werner Vogels says that\n\t\n\t\\begin{quote}\n\t\tThe stored data formats are decoupled from the format in which you communicate data items. If there is no need for sharing schemas of the actual storage layout, you can focus on making sure that the service interfaces can evolve in a way that allows you to handle variations of data formats. \n\t\\end{quote}\n\t\n\tWhich means that in the software architecture of Amazon's systems\n\t\t\t\n    	\N
1295	\N	\N	\n\tConsider the following representation of the CDash system\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=80mm]{DashArchitecture}\n\t\\end{center}\n\t\n\tThe architecture style between the Dashboard and the Clients is:\n\t\t\t\n    	\N
1297	\N	\N	\n\tConsider the install architectural style of the allocation viewtype.\n\t\t\t\n    	\N
1298	\N	\N	\n\tIn the description of Infinispan system can be read\n\t\n\t\\begin{quote}\n\t\tWhen dealing with thread pools to process such asynchronous tasks, there is always a context switching overhead. That threads are not cheap resources is also noteworthy. Allocating appropriately sized and configured thread pools is important to any installation making use of any of the asynchronous features of Infinispan.\n\t\\end{quote}\n\t\n\tThe architectural style that should be used to illustrate the sentence is\n\t\t\t\n    	\N
1307	1352	\N	\n    One of the key requirements for the HDFS system is that the data\n    stored in the system remains available, even in the presence of\n    various types of failures (non simultaneous) in the hardware in\n    which the system executes.  To show that the system satisfies this\n    requirement\n\n    	\N
1308	1353	\N	\n    In the HDFS system the fault recovery tactics are:\n\n    	\N
1309	1354	\N	\n  The documentation of the software architecture for a system is often\n  composed of several views, because\n\n  	\N
1310	1355	\N	\n\tThe quality that is more relevant to views of the module viewtype is:\n\t\t\n    	\N
1462	1468	\N	\n\tAn architect is decomposing a system into a set of responsibilities using a view of the Decomposition style. However, she had already to backtrack several times and try new decompositions because she always end up with some responsibility that cannot fit within a single module.\n\t\n    	\N
1296	1484	\N	\n\tConsider the following view of the Adventure Builder system\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=80mm]{AdventureBuilder-SOA}\n\t\\end{center}\n\t\n\tIn this view the following architectural styles are used\n\t\n\t\t\n    	\N
1285	1494	\N	\n\tConsider the following view of the Adventure Builder system\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=100mm]{AdventureBuilder-Tiers}\n\t\\end{center}\n\t\n\tIn this view the following architectural styles are used\n\t\t\n    	\N
1328	1351	\N	\n\t  Consider the following figure\n\t  \n  \t\\begin{center}\n  \t\t\\includegraphics[width=70mm]{../ProductDomainModelTwo}\n  \t\\end{center}\n\t  \n      	\N
1311	1356	\N	\n    Consider the following description of \\emph{Memcached}, which is\n    adapted from its Wiki:\n    \\begin{quote}\n      Memcached is an in-memory key-value store for small chunks of\n      arbitrary data from results of database calls, API calls, or\n      page rendering.  It is made up of:\n      \\begin{itemize}\n      \\item Client software, which is given a list of available memcached servers.\n      \\item A client-based hashing algorithm, which chooses a server\n        based on the "key" input.\n      \\item Server software, which stores your values with their keys\n        into an internal hash table.\n      \\item Server algorithms, which determine when to throw out old\n        data (if out of memory), or reuse memory.\n      \\end{itemize}\n    \\end{quote}\n    Suppose that you want to present an architectural view for\n    \\emph{Memcached} that represents the above information.  Which\n    view is more adequate?\n\n    	\N
1312	1357	\N	\n    Using the Aspects architectural style promotes the modifiability\n    of a system because\n    \n    	\N
1313	1358	\N	\n\t Suppose that you are implementing a module in a system that has a two layered architecture.\n\t Knowing that your module belongs to the upper layer (assuming the usual notation\n\t for the layer style), this means that you\n\t \n\t 	\N
1329	1396	\N	\n    Suppose that, to satisfy an availability requirement related with\n    the occurrence of faults at the network infrastructure used by\n    your system, you want to use the tactic named \\emph{Ping/Echo}.\n    How does the use of that tactic manifests in the architectural\n    views of your system?\n\n    	\N
1330	1536	\N	\n\tIn the description of the Gnutella system can be read:\n\t\n\t\\begin{quote}\n\t\tThe topology of the system changes at runtime as peer components connect and disconnect to the network.\n\t\\end{quote}\n\t\n    	\N
1333	\N	\N	\n    Consider the following excerpt from the Wikipedia page on\n    \\emph{white-box testing}:\n    \\begin{quote}\n      White-box testing is a method of testing software that tests\n      internal structures or workings of an application, as opposed to\n      its functionality. In white-box testing an internal perspective\n      of the system (including the module's code), as well as\n      programming skills, are required and used to design test\n      cases. The tester chooses inputs to exercise paths through the\n      code and determine the appropriate outputs.\n    \\end{quote}\n  \n    Assuming that you belong to the team testing a complex system and\n    that you are responsible for performing white box tests on the\n    system, which of the following architectural views of the system\n    would be most useful to you?\n\n    	\N
1334	\N	\N	\n\tThe Chromium is a web browser that introduced an innovative architecture. In the Chromium description we can read:\n \n  \\begin{quote}\n    We use separate processes for browser tabs to protect the overall\n    application from bugs and glitches in the rendering engine.  We\n    also restrict access from each rendering engine process to others\n    and to the rest of the system.  In some ways, this brings to web\n    browsing the benefits that memory protection and access control\n    brought to operating systems.\n\n    We refer to the main process that runs the UI and manages tab and\n    plugin processes as the "browser process" or "browser."  Likewise,\n    the tab-specific processes are called "render processes" or\n    "renderers."  The renderers use the WebKit open-source layout\n    engine for interpreting and laying out HTML.\n  \\end{quote}\n  \n  Which architectural style should we use to represent this aspect of Chromium?\n\n    	\N
1335	\N	\N	\n  Consider that a software development team uses an agile methodology\n  such as XP (Extreme Programming), where no documentation is\n  produced.  Then, the systems developed by that team\n\n    	\N
1336	\N	\N	\n\tThe requirements impact on how an architecture is designed\n\n    	\N
1337	\N	\N	\n\t  Consider the following scenario\n\t  \n\t  \\begin{quote}\n\t\t  If one of the application servers fails to respond when the system is in its normal operation state, the load balancer should redirect requests to another application server.\n\t  \\end{quote}\n\t  \n      	\N
1339	\N	\N	\n\t  Consider the following fragment of the \\emph{MediaWiki} system description:\n\t  \\newline\n\t  \n\t  \\emph{To optimize the delivery of JavaScript and CSS assets, the ResourceLoader module was developed to optimize delivery of JS and CSS. Started in 2009, it was completed in 2011 and has been a core feature of MediaWiki since version 1.17. ResourceLoader works by loading JS and CSS assets on demand, thus reducing loading and parsing time when features are unused, for example by older browsers. It also minifies the code, groups resources to save requests, and can embed images as data URIs}\n\t  \\newline\n\t  \n\t  The \\emph{ResourceLoader} supports a quality\n    \n    	\N
1340	\N	\N	\n   In which performance tactic it may occur that not all the inputs are processed\n\n    	\N
1342	\N	\N	\n    The main tactic associated with the layered architectural style is:\n\n    	\N
1343	\N	\N	\n  \tConsider the following architectural view of the Adventure Builder system, designed around the Order Processing Center\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=120mm]{../AdventureBuilderCandC}\n\t\\end{center}\n\t\n\tThe views \\textbf{does not} use the architectural style\n\n   \t	\N
1344	\N	\N	\n  \tConsider the following requirement for availability of the Adventure Builder system\n\t\n\t\\begin{quote}\n\t\tThe Consumer Web site sent a purchase order request to the order processing center (OPC). The OPC processed that request but didn't reply to Consumer Web site within five seconds, so the Consumer Web site resends the request to the OPC.\n\t\\end{quote}\n\t\n\tIf we represent this requirement as a scenario\n\n   \t	\N
1345	\N	\N	\n\tConsider the module viewtype views of the DVD Catalog application. The architect knows about a new requirement \n\t\n\t\\begin{quote}\n\t\tThe application should support other kinds of catalogs (CDs, games, books, ...). \n\t\\end{quote}\n\t\n\tThis requirement requires a change of\n\t\n    	\N
1346	\N	\N	\n\tConsider the following description of the behavior of Twitter ingestion mechanisms\n\t\n\t\\begin{quote}\n\t\tWrite. when a tweet  comes in there's an O(n) process to write to Redis clusters, where n is the number of people following you. Painful for Lady Gaga and Barack Obama where they are doing 10s of millions of inserts across the cluster. All the Redis clusters are backing disk, the Flock cluster stores the user timeline to disk, but usually timelines are found in RAM in the Redis cluster.\n\t\\end{quote}\n\t\n\t	\N
1347	\N	\N	\n\tConsider the following description of the behavior of Twitter\n\t\n\t\\begin{quote}\n\t\tSolution is a write based fanout approach. Do a lot of processing when tweets arrive to figure out where tweets should go. This makes read time access fast and easy. Don't do any computation on reads. With all the work being performed on the write path ingest rates are slower than the read path, on the order of 4000 QPS.\n\t\\end{quote}\n\t\n\tTo describe the performance quality of this behavior, and considering that the number of reads is much higher than the number of writes, we need to have a view that includes\n\t\n\t	\N
1349	\N	\N	\n\tIn the interview Werner Vogels from Amazon gives to Jim Gray, Werner Vogels says that\n\t\n\t\\begin{quote}\n\t\tThe stored data formats are decoupled from the format in which you communicate data items. If there is no need for sharing schemas of the actual storage layout, you can focus on making sure that the service interfaces can evolve in a way that allows you to handle variations of data formats. \n\t\\end{quote}\n\t\n\tWhich means that in the software architecture of Amazon's systems\n\t\t\t\n    	\N
1350	\N	\N	\n\t  Consider the following representation of a system following a microservices architecture,\n\t  \n  \t\\begin{center}\n  \t\t\\includegraphics[width=140mm]{../MicroservicesArchitecture}\n  \t\\end{center}\n\t  \n\t  After an invocation through the REST API\n\t  \n      	\N
1351	\N	\N	\n\t  Consider the following figure\n\t  \n  \t\\begin{center}\n  \t\t\\includegraphics[width=70mm]{../ProductDomainModelTwo}\n  \t\\end{center}\n\t  \n      	\N
1352	\N	\N	\n    One of the key requirements for the HDFS system is that the data\n    stored in the system remains available, even in the presence of\n    various types of failures (non simultaneous) in the hardware in\n    which the system executes.  To show that the system satisfies this\n    requirement\n\n    	\N
1353	\N	\N	\n    In the HDFS system the fault recovery tactics are:\n\n    	\N
1354	\N	\N	\n  The documentation of the software architecture for a system is often\n  composed of several views, because\n\n  	\N
1355	\N	\N	\n\tThe quality that is more relevant to views of the module viewtype is:\n\t\t\n    	\N
1338	1625	\N	\n\t  The availability quality can be supported by a voting tactic in order to identify faults of\n\n      	\N
1356	\N	\N	\n    Consider the following description of \\emph{Memcached}, which is\n    adapted from its Wiki:\n    \\begin{quote}\n      Memcached is an in-memory key-value store for small chunks of\n      arbitrary data from results of database calls, API calls, or\n      page rendering.  It is made up of:\n      \\begin{itemize}\n      \\item Client software, which is given a list of available memcached servers.\n      \\item A client-based hashing algorithm, which chooses a server\n        based on the "key" input.\n      \\item Server software, which stores your values with their keys\n        into an internal hash table.\n      \\item Server algorithms, which determine when to throw out old\n        data (if out of memory), or reuse memory.\n      \\end{itemize}\n    \\end{quote}\n    Suppose that you want to present an architectural view for\n    \\emph{Memcached} that represents the above information.  Which\n    view is more adequate?\n\n    	\N
1357	\N	\N	\n    Using the Aspects architectural style promotes the modifiability\n    of a system because\n    \n    	\N
1358	\N	\N	\n\t Suppose that you are implementing a module in a system that has a two layered architecture.\n\t Knowing that your module belongs to the upper layer (assuming the usual notation\n\t for the layer style), this means that you\n\t \n\t 	\N
1403	\N	\N	\n\tConsider the following description of the behavior of Twitter ingestion mechanisms\n\t\n\t\\begin{quote}\n\t\tWrite. when a tweet  comes in there's an O(n) process to write to Redis clusters, where n is the number of people following you. Painful for Lady Gaga and Barack Obama where they are doing 10s of millions of inserts across the cluster. All the Redis clusters are backing disk, the Flock cluster stores the user timeline to disk, but usually timelines are found in RAM in the Redis cluster.\n\t\\end{quote}\n\t\n\tThe view that represents this behavior should be of the\n\t\n\t	\N
1359	1393	\N	\n  The software architecture of a system\n\n  	\N
1404	1635	\N	\n  A software system is usually described using different architectural views\n\n  	\N
1389	\N	\N	\n    Consider the following modifiability scenario\n\t\n\t\\begin{quote}\n\t\tThe effort necessary to successfully port the system to execute in a new browser should not be higher than 5 person/month.\n\t\\end{quote}\n\n    	\N
1390	\N	\N	\n    The main tactic associated with the aspects architectural style is:\n\n    	\N
1391	\N	\N	\n    In the HDFS system, in the stakeholders perspective, the use of low cost servers to build the clusters is:\n\n    	\N
1392	\N	\N	\n    In HDFS, during normal operation DataNodes use the heartbeat tactic\n\n    	\N
1393	\N	\N	\n  The software architecture of a system\n\n  	\N
1394	\N	\N	\n  As part of the process of creating an architecture, we talked about\n  a framework for capturing some of the requirements for a system.  In\n  this context, \\textbf{concrete scenarios} are used for\n\n  	\N
1395	\N	\N	\n\t  Consider the following availability scenario\n\t  \n\t  \\begin{quote}\n\t\t If one of the application servers fails to respond to a request when the system is in its normal operation state, the system should notify the operator and continue to operate normally.\n\t  \\end{quote}\n\t  \n      	\N
1396	\N	\N	\n    Suppose that, to satisfy an availability requirement related with\n    the occurrence of faults at the network infrastructure used by\n    your system, you want to use the tactic named \\emph{Ping/Echo}.\n    How does the use of that tactic manifests in the architectural\n    views of your system?\n\n    	\N
1397	\N	\N	\n\tConsider the following description of the \\emph{Infinispan} system:\n\t\n\t\\begin{quote}\n\t\tBefore putting data on the network, application objects need to be serialized into bytes so that they can be pushed across a network, into the grid, and then again between peers. The bytes then need to be de-serialized back into application objects, when read by the application. In most common configurations, about 20\\% of the time spent in processing a request is spent in serialization and de-serialization.\n\t\\end{quote}\n\t\n\tThe above description can motivate a scenario for\n\t\t\n    	\N
1398	\N	\N	\n   In which performance tactic it can occur that the inputs are not completely processed, even though they always start being processed\n\n    	\N
1399	\N	\N	\n    Currently, the most popular architecture for an enterprise\n    application is composed of 3 tiers.  The three tiers are\n\n    	\N
1400	\N	\N	\n\tThe Service-Oriented Architecture style improves interoperability because\n\t\n    	\N
1401	\N	\N	\n  Consider a system that will require a significative configuration effort during deployment, because it provides several variations of the same functionalities and it is necessary to choose which functionalities better fit in each case. The most helpful architectural view for this situation is\n \n  	\N
1402	\N	\N	\n\tConsider the following description of the behavior of Twitter\n\t\n\t\\begin{quote}\n\t\tSolution is a write based fanout approach. Do a lot of processing when tweets arrive to figure out where tweets should go. This makes read time access fast and easy. Don't do any computation on reads. With all the work being performed on the write path ingest rates are slower than the read path, on the order of 4000 QPS.\n\t\\end{quote}\n\t\n\tTo describe this behavior we need to \n\t\n\t	\N
1386	1415	\N	\n\t  In world-wide systems like Facebook or Amazon,\n\t  \n      	\N
1406	\N	\N	\n    Suppose that you are developing a software architecture for a new\n    large scale system and that you intend to resort extensively to\n    third party subcontractors for the development of various parts of\n    the system.  Which architectural styles are most useful to plan\n    the development of the system in this case?\n\n    	\N
1407	\N	\N	\n  To achieve a faster time-to-market, software companies are\n  increasingly using a strategy of incremental releases of their\n  software, where each new release has a set of new features.  Which\n  architectural style is better to analyse whether the system's\n  software architecture is adequate for the planned incremental\n  releases?\n \n  	\N
1408	\N	\N	\n    According to the document that describes nginx:\n    \\begin{quote}\n      nginx's modular architecture generally allows developers to\n      extend the set of web server features without modifying the\n      nginx core.  nginx modules come in slightly different\n      incarnations, namely core modules, event modules, phase\n      handlers, protocols, variable handlers, filters, upstreams and\n      load balancers.  [...]  Event modules provide a particular\n      OS-dependent event notification mechanism like kqueue or epoll.\n      Protocol modules allow nginx to communicate through HTTPS,\n      TLS/SSL, SMTP, POP3 and IMAP.\n    \\end{quote}\n    Which architectural style is more adequate to represent the\n    information presented above?\n\n    	\N
1409	\N	\N	\n  \tConsider the following architectural view of the Adventure Builder system, designed around the Order Processing Center\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=120mm]{../AdventureBuilderCandC}\n\t\\end{center}\n\t\n\tThe views \\textbf{does not} allow the reason about the quality of\n\n   \t	\N
1410	\N	\N	\n  \tConsider the following requirement for availability of the Adventure Builder system\n\t\n\t\\begin{quote}\n\t\tThe Consumer Web site is available to the user 24x7. If an instance of OPC application fails, the fault is detected and the system administrator is notified in 30 seconds; the system continues taking order requests; another OPC instance is automatically created; and data remains in consistent state.\n\t\\end{quote}\n\t\n\tIn order to support this quality it is necessary to \n\n   \t	\N
1411	\N	\N	\n\tConsider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n\t\n\t\\begin{quote}\n\t\tTo support iPhone/iPad/Android version with sync, which allows offline use of the application in the mobile device and data synchronization to occur when a connection is available\n\t\\end{quote}\n\t\n\tThis requirement requires a change of\n\t\n    	\N
1412	\N	\N	\n    To analyse the performance of a system\n\n    	\N
1415	\N	\N	\n\t  In world-wide systems like Facebook or Amazon,\n\t  \n      	\N
1416	\N	\N	\n\t  Consider the following representation of a system following a microservices architecture,\n\t  \n  \t\\begin{center}\n  \t\t\\includegraphics[width=140mm]{../MicroservicesArchitecture}\n  \t\\end{center}\n\t  \n      	\N
1417	\N	\N	\n\t  Consider the following data model\n\t  \n  \t\\begin{center}\n  \t\t\\includegraphics[width=80mm]{../ProductDomainModel}\n  \t\\end{center}\n\t  \n      	\N
1418	\N	\N	\n\tThe Chromium is a web browser that introduced an innovative architecture. In the Chromium description we can read:\n\n  \\begin{quote}\n    Chromium is a large and complex cross-platform product.  We try to\n    share as much code as possible between platforms, while\n    implementing the UI and OS integration in the most appropriate way\n    for each.  While this gives a better user experience, it adds\n    extra complexity to the code.  This document describes the\n    recommended practices for keeping such cross-platform code clean.\n\n    We use a variety of different file naming suffixes to indicate\n    when a file should be used:\n    \\begin{itemize}\n    \\item Windows files use the \\texttt{\\_win} suffix.\n    \\item Cocoa (Mac UI) files use the \\texttt{\\_cocoa} suffix, and lower-level Mac files use the \\texttt{\\_mac} suffix.\n    \\item Linux files use \\texttt{\\_linux} for lower-level files, \\texttt{\\_gtk} for GTK-specific files, and \\texttt{\\_x} for X Windows (with no GTK) specific files.\n    \\item Posix files shared between Mac and Linux use the \\texttt{\\_posix} suffix.\n    \\item Files for Chrome's ``Views'' UI (on Windows and experimental GTK) layout system use the \\texttt{\\_views} suffix.\n   \\end{itemize}\n\n    The separate front-ends of the browser are contained in their own directories:\n    \\begin{itemize}\n    \\item Windows Views (and the experimental GTK-views): \\\\\n      \\texttt{chrome/browser/ui/views}\n    \\item Linux GTK: \\texttt{chrome/browser/gtk}\n    \\item Mac: \\texttt{chrome/browser/cocoa}\n    \\end{itemize}\n  \\end{quote}\n  \n  Which architectural style should we use to represent this aspect of Chromium?\n\n    	\N
1424	\N	\N	\n\tConsider the following figure that presents the Hadoop cluster topology.\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=100mm]{HadoopClusterTopology}\n\t\\end{center}\n\t\n    	\N
1425	\N	\N	\n  The software architecture of a system\n\n    	\N
1426	\N	\N	\n\tA general scenario for a quality attribute\n\n    	\N
1427	\N	\N	\n\tIn the description of the Twitter system we can read:\n\t\n\t\\begin{quote}\n\t\t Twitter is optimized to be highly available on the read path on the home timeline. Read path is in the 10s of milliseconds.\n\t\\end{quote}\n\t\n\tThis is achieved because:\n\n    	\N
1428	\N	\N	\n\tConsider the following figure that presents a Proxy Server, which collapses requests from different users.\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=120mm]{ProxyServer}\n\t\\end{center}\n\t\n\t\n    	\N
1413	1667	\N	\n\tThe Peer-to-Peer architectural style provides high scalability and availability. In the context of a file sharing system  \n\t\n    	\N
1434	\N	\N	\n\tIn the description of Hadoop we can red.\n\t\n\t\\begin{quote}\n\t\tThe CheckpointNode periodically combines the existing checkpoint and journal to create a new checkpoint and an empty journal. The CheckpointNode usually runs on a different host from the NameNode since it has the same memory requirements as the NameNode.\n\t\\end{quote}\n\t\n    	\N
1435	\N	\N	\n\tAn architectural tactic for a system describes\n\n    	\N
1436	\N	\N	\n\tIn the description of the Twitter system we can read:\n\t\n\t\\begin{quote}\n\t\tOn the search timeline:\n\t\t Write. when a tweet comes in and hits the Ingester only one Early Bird machine is hit. Write time path is O(1). A single tweet is ingested in under 5 seconds between the queuing and processing to find the one Early Bird to write it to.\n\t\\end{quote}\n\t\n    	\N
1437	\N	\N	\n\tIn his article, \\emph{Who Needs and Architect?}, Martin Fowler cites Ralph Johnson definition:\n\t\n\t\\begin{quote}\n\t\tArchitecture is the set of decisions that must be made early in a project.\n\t\\end{quote}\n\t\n\tIn his opinion:\n\t\t\n    	\N
1438	\N	\N	\n\tConsider the following figure that presents a Queue where client applications write their requests to be served by a server.\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=130mm]{Queues}\n\t\\end{center}\n\t\n\t\n    	\N
1444	\N	\N	\n\tIn a modifiability scenario the environment can be characterized as design time, compile time, build time, initiation time, and runtime.\n\t\n    	\N
1446	\N	\N	\n    In the HDFS system when the \\emph{CheckpointNode} and the \\emph{NameNode} are deployed in different nodes, the \\emph{CheckpointNode} provides:\n    	\N
1447	\N	\N	\n\tConsidering the availability architectural quality, the tactic of retry\n\n    	\N
1448	\N	\N	\n    Several of the cases studied in this course have scalability\n    requirements.  That means that those systems should be designed in\n    such a way that they\n\n    	\N
1454	\N	\N	\n\tConsider that a module, that contains a complex business logic, needs to invoke a remote entity using a particular communication protocol and it is needs to manage the invocation, like deal with the possible errors, delays and omissions in the invocation, transform the data before sending it, etc. Which tactic should be applied for a scenario where there will be changes in the communication protocol. Note that the business logic comprises a set of functionalities that is independent of the remote invocation technological aspects. \n\t\t\t\n    	\N
1456	\N	\N	\n    The architecture of the HDFS system only allows the existence of\n    one NameNode.  Given the responsibilities of this component and\n    the current architecture of HDFS, what would be the consequences\n    of adding the possibility of having replicas of the NameNode in\n    the system?\n\n    	\N
1457	\N	\N	\n\tConsider a scenario for performance where the arrival of events is stochastic with a distribution where there are peeks of events but the arrival of events over a long period is uniform. The best tactic to apply is\n\t\t\n    	\N
1443	1446	\N	\n    In the HDFS system when the \\emph{CheckpointNode} and the \\emph{NameNode} are deployed in different nodes, the \\emph{CheckpointNode} provides:\n    	\N
1439	1447	\N	\n\tConsidering the availability architectural quality, the tactic of retry\n\n    	\N
1440	1448	\N	\n    Several of the cases studied in this course have scalability\n    requirements.  That means that those systems should be designed in\n    such a way that they\n\n    	\N
1451	1454	\N	\n\tConsider that a module, that contains a complex business logic, needs to invoke a remote entity using a particular communication protocol and it is needs to manage the invocation, like deal with the possible errors, delays and omissions in the invocation, transform the data before sending it, etc. Which tactic should be applied for a scenario where there will be changes in the communication protocol. Note that the business logic comprises a set of functionalities that is independent of the remote invocation technological aspects. \n\t\t\t\n    	\N
1445	1624	\N	\n    In the Graphite system the component \\emph{carbon} provides to \\emph{webapp} components an access interface to the \\emph{buffers} in order to improve the quality of\n\n    	\N
1452	1565	\N	\n\t  Which quality, or qualities, of the Graphite system are described by the sentence: \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL}\n\n    	\N
1455	1565	\N	\n\t  Which quality, or qualities, of the Graphite system are described by the sentence: \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL}\n\n    	\N
1458	1616	\N	\n    There are several tactics to satisfy availability requirements,\n    which may be applied depending on the concrete requirement that we\n    want to satisfy.  Assuming that you want to detect faults of type\n    \\emph{response} in your system, which tactic is more adequate?\n\n    	\N
1464	\N	\N	\n\tConsider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n\t\n\t\\begin{quote}\n\t\tTo support multi-platform (Mac, Windows, Linux)\n\t\\end{quote}\n\t\n\tThis requirement requires a change of\n\t\n    	\N
1465	\N	\N	\n\tConsider the kind of relations between components and modules.\n\t\t\n    	\N
1467	\N	\N	\n\tConsider the following modifiability scenario for the Adventure Builder system \n\t\n\t\\begin{quote}\n\t\tA new business partner (airline, lodging, or activity provider) that uses its own web services interface is added to the system in no more than 10 person-days of effort for the implementation. The business goal is easy integration with new business partners.\n\t\\end{quote}\n\t\n\tand the following architectural view\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=120mm]{AdventureBuilderHighLevelVIew}\n\t\\end{center}\n\t\n    	\N
1468	\N	\N	\n\tAn architect is decomposing a system into a set of responsibilities using a view of the Decomposition style. However, she had already to backtrack several times and try new decompositions because she always end up with some responsibility that cannot fit within a single module.\n\t\n    	\N
1474	\N	\N	\n\tConsider the Layered architectural style of the Module viewtype\n\t\t\n    	\N
1475	\N	\N	\n\tConsider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n\t\n\t\\begin{quote}\n\t\tTo allow the share of catalogs with family and friends, including some access control. \n\t\\end{quote}\n\t\n\tThis requirement requires \n\t\n    	\N
1476	\N	\N	\n\tA function call is not necessarily a uses relation of the Uses architectural style of the Module viewtype because\n\t\n    	\N
1477	\N	\N	\n\tConsider the following performance/scalability scenario for the Adventure Builder system \n\t\n\t\\begin{quote}\n\t\tUp to 500 users click to see the catalog of adventure packages following a random distribution over 1 minute; the system is under normal operating conditions; the maximal latency to serve the first page of content is under 5 seconds; average latency for same is less than 2 seconds. If required, the system should easily support an increase in the number of simultaneous requests while maintaining the same latency per request.\n\t\\end{quote}\n\t\n\tand the following architectural view\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=105mm]{AdventureBuilderHighLevelVIew}\n\t\\end{center}\n\t\n    	\N
1478	\N	\N	\n\tIn Facebook it is not possible to have the information about more that one bilion users in a single disk. Therefore, a sharding technique is applied, where the persistent information is split between several database servers, and applications are routed to the right servers for queries and updates. To describe this architecture\n\t\n    	\N
1484	\N	\N	\n\tConsider the following view of the Adventure Builder system\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=120mm]{AdventureBuilder-SOA}\n\t\\end{center}\n\t\n\tIn this view the following architectural styles are used\n\t\n\t\t\n    	\N
1486	\N	\N	\n\tThe connectors on component-and-connector view\n\t\n\t	\N
1488	\N	\N	\n    In Graphite system  the \\emph{receiver} and the \\emph{writer threads} support asynchronous writing of metrics to optimize disk accesses. The interaction between these two components follow the architectural style\n\n    	\N
1490	1498	\N	\n\tThe Java web servers, like Tomcat, use threads to process requests. For each request they create (or reuse) a thread to process it.\n\tTo draw a architectural view that describes this behaviour we should use \n\t\n    	\N
1466	1535	\N	\n\tConsider the Uses architectural style of the Module viewtype\n\t\t\n    	\N
1487	1577	\N	\n\tConsider that you intend to develop a system where it is necessary to change the emails received by the server (for instance, to remove potential virus or URLs for phishing sites). The goal is that each email is processed by this system before it is sent to other servers or it is stored locally. Additionally, the system should be easily modified to support new kinds of transformations. Which style is more suitable to satisfy these requirements? \n\n    	\N
1485	1676	\N	\n\tThe Tiers architectural style\n\t\n    	\N
1494	\N	\N	\n\tConsider the following view of the Adventure Builder system\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=140mm]{AdventureBuilder-Tiers}\n\t\\end{center}\n\t\n\tIn this view the following architectural styles are used\n\t\t\n    	\N
1496	\N	\N	\n\t  A high-level component-and-connect view of Graphite system can be designed using only the architectural style(s)\n\n    	\N
1498	\N	\N	\n\tThe Java web servers, like Tomcat, use threads to process requests. For each request they create (or reuse) a thread to process it.\n\tTo draw a architectural view that describes this behaviour we should use \n\t\n    	\N
1519	\N	\N	\n\tIn the component-and-connector viewtype connectors can be complex, which means that they provide a rich set of qualities to the interaction between the components that they connect. These complex connectors can be documented in another view using a set of components interacting through simpler connectors.\n\t\t\n    	\N
1520	\N	\N	\n\t  Typically, Instant Messaging clients have a window to list the contacts of the user, and\n\t  show in that window the status of each contact (whether it is available, unavailable, busy,\n\t  etc). Given that the status of a contact may be changed at any time, and that the contact's\n\t  status is given by the Instant Messaging application of that contact, which architectural\n\t  style represents best the interaction pattern between these components?\n\n\t   	\N
1521	\N	\N	\n\tConsider the following fragment in the description of the Graphite system.\n\t\n\t\\begin{quote}\n\t\tThe Graphite webapp allows users to request custom graphs with a simple URL-based API. Graphing parameters are specified in the query-string of an HTTP GET request, and a PNG image is returned in response. \n\t\\end{quote}\n\t\n\tTo describe this scenario it should be designed a view that applies the following architectural style\n\t\t\n    	\N
1522	\N	\N	\n\tConsider the following figure that presents a Proxy Server that collapses requests from different users.\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=120mm]{1-proxy-server}\n\t\\end{center}\n\t\n\t\n    	\N
1523	\N	\N	\n\tIn the context of the FenixEdu case study, the business case was to\n\n    	\N
1524	\N	\N	\n\tThe stimulus of an availability scenario is\n\t\t\n    	\N
1525	\N	\N	\n\tA response measure of a performance scenario is \n\t\t\n    	\N
1526	\N	\N	\n\tThe layered architectural style applies the modifiability architectural tactic of\n\t\t\n    	\N
1504	1519	\N	\n\tIn the component-and-connector viewtype connectors can be complex, which means that they provide a rich set of qualities to the interaction between the components that they connect. These complex connectors can be documented in another view using a set of components interacting through simpler connectors.\n\t\t\n    	\N
1497	1646	\N	\n\tConsider the concept of interface delegation \n\t\t\n    	\N
1495	1655	\N	\n\tIn the Publish-Subscribe architectural style \n\t\n    	\N
1527	\N	\N	\n\tOne of the advantages of having views of the module viewtype is that they allow to do an impact analysis to predict the effect of modifying the system. The architectural style of the module viewtype which provides richer information for this impact analysis is\n\t\t\n    	\N
1528	\N	\N	\n  Consider that a chess game should\n  provide an automatic and intelligent chess player, and that to\n  implement that player we will use some of the many chess engines\n  already available in the market.  Moreover, the system should allow\n  the user to choose which engine to use for each new game.  Given\n  these requirements, which of the architectural styles from the\n  module viewtype are best suited to satisfy them?\n \n  	\N
1529	\N	\N	\n\tIn a microservices architecture, aggregates are used as a unit of processing\n\n    	\N
1530	\N	\N	\n\tConsider the Microservice architectural style. Which of the following sentences \\textbf{does not} describe an advantage of microservices?\n\t\t\t\n    	\N
1531	\N	\N	\n\tConsider the following usability scenario of the Catalog of DVDs case study\n\t\n\t\\begin{quote}\n\t\tThe user intends to have up-to-date info about the movies and the system informs the user that the existing sources have new information about one of his DVDs, which helps to maintain an up-to-date catalog. \n\t\\end{quote}\n\t\n\tThe tactic used to fulfill this scenario is\n\t\t\n    	\N
1532	\N	\N	\n\tConsider the following view of the Adventure Builder case study that applies the tiers architectural style \n\t\n\t\\centering\n\t\\includegraphics[width=100mm]{1-adventure-tiers}\n\t\t\n    	\N
1533	\N	\N	\n\tConsider the following view of the Pulse case study \n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=120mm]{1-pulse-multiple-copies-computation}\n\t\\end{center}\n\t\n\tThis view provides a solution that uses the following tactic\n\t\t\t\n    	\N
1534	\N	\N	\n\tIn the description of architecture of the OrderPad case study it can be read that the updates the user does on the OrderPad when it is offline are not lost. This availability quality is achieved through a\t\n\n  	\N
1535	\N	\N	\n\tConsider the Uses architectural style of the Module viewtype\n\t\t\n    	\N
1536	\N	\N	\n\tIn the description of the Gnutella system can be read:\n\t\n\t\\begin{quote}\n\t\tThe topology of the system changes at runtime as peer components connect and disconnect to the network.\n\t\\end{quote}\n\t\n    	\N
1537	\N	\N	\n  In the software architecture of a system, the Deployment architectural style of the allocation viewtype is\n  best suited for\n\n    	\N
1538	\N	\N	\n\tConsider a web application that was implemented using three layers: presentation, domain logic, and data access. How are these layers mapped into the components if it is a rich interface application.\n\t\t\t\n    	\N
1549	1568	\N	\n\tConsider a web application that supports several types of user interface, e.g., web, mobile, etc. If it has to process a high volume of requests, which depend on the type of user interface, and a multi-tier architecture is followed. How many tiers should be used?\n\t\t\t\n    	\N
1550	1569	\N	\n\tConsider the following generalization view of the Catalog of DVD case study to fulfill a modifiability scenario\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=60mm]{1-dvd-generalization}\n\t\\end{center}\n\t\n\tFrom this view the stakeholders can infer\n\t\t\t\n    	\N
1551	1570	\N	\n\tIn Facebook it is not possible to have the information about more that one bilion users in a single disk. Therefore, a sharding technique is applied, where the persistent information is split between several database servers, and requests are routed to the right servers for queries and updates. Additionally, due to performance requirements, the information needs to be replicated in several servers. To describe this architecture\n\t\n    	\N
1553	1572	\N	\n\tConsider the following view of the Adventure Builder case study \n\t\n\t\\centering\n\t\\includegraphics[width=120mm]{1-adventure-com-proc}\n\t\t\n    	\N
1554	1574	\N	\n\tConsider the following view of the Pulse case study \n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=120mm]{1-pulse-multiple-copies-computation}\n\t\\end{center}\n\t\n\tThis view applies the following architectural styles\n\t\t\t\n    	\N
1559	\N	\N	\n\tConsider the following decomposition of a domain model into 3 aggregates. If, instead of this decomposition, \\texttt{Customer} and \\texttt{Order} were in the same aggregate  \n\t\n\t\\centering\n\t\\includegraphics[width=120mm]{1-aggregate}\n\n    	\N
1560	\N	\N	\n\tAn availability tactic to prevent faults is \n\t\t\n    	\N
1561	\N	\N	\n\tA performance tactic to control resource demand is \n\t\t\n    	\N
1562	\N	\N	\n\tConsider the following definition of Microservice architectural style by Martin Fowler\n\t\n\t\\begin{quote}\n\t\tThe microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies.\n\t\\end{quote}\n\t\n\tTo represent an architecture based on Microservices \n\t\t\t\n    	\N
1563	\N	\N	\n\tA response measure of a modifiability scenario is\n\t\t\n    	\N
1564	\N	\N	\n\tConsider the module viewtype views of the Catalog of DVD application. The architect knows about a new requirement \n\t\n\t\\begin{quote}\n\t\tTo support iPhone/iPad/Android version with sync, which allows offline use of the application in the mobile device and data synchronization to occur when a connection is available\n\t\\end{quote}\n\t\n\tThis requirement requires a change of\n\t\n    	\N
1565	\N	\N	\n\t  Which quality, or qualities, of the Graphite system are described by the sentence: \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL.}\n\n    	\N
1566	\N	\N	\n\tConsider the Work Assignment architectural style of the allocation viewtype.\n\t\t\t\n    	\N
1567	\N	\N	\n    Consider the following figure that presents a Image Hosting System.\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=120mm]{1-image-hosting}\n\t\\end{center}\n\t\n\tBy adding another Image File Storage component, which contains a redundant copy of the data and provides read access to the clients, but without guaranteeing a ACID transactional behavior between reads and writes, it improves the quality(ies) of\n\t\n    	\N
1568	\N	\N	\n\tConsider a web application that supports several types of user interface, e.g., web, mobile, etc. If it has to process a high volume of requests, which depend on the type of user interface, and a multi-tier architecture is followed. How many tiers should be used?\n\t\t\t\n    	\N
1569	\N	\N	\n\tConsider the following generalization view of the Catalog of DVD case study to fulfill a modifiability scenario\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=60mm]{1-dvd-generalization}\n\t\\end{center}\n\t\n\tFrom this view the stakeholders can infer\n\t\t\t\n    	\N
1570	\N	\N	\n\tIn Facebook it is not possible to have the information about more that one bilion users in a single disk. Therefore, a sharding technique is applied, where the persistent information is split between several database servers, and requests are routed to the right servers for queries and updates. Additionally, due to performance requirements, the information needs to be replicated in several servers. To describe this architecture\n\t\n    	\N
1571	\N	\N	\n    Suppose that you are developing the software architecture of a new\n    system for an organization composed of several organizational\n    units, each one with its own information systems, which have been\n    developed independently of each other over the course of several\n    years and depending on the particular needs of each unit.  Your\n    system has the goal of integrating the various existing systems,\n    providing in this way not only a unified view of how the\n    organization works, but also allowing the creation of new\n    processes within the organization that involve more than one unit.\n    Which architectural style is better suited to design such a\n    system?\n\n    	\N
1572	\N	\N	\n\tConsider the following view of the Adventure Builder case study \n\t\n\t\\centering\n\t\\includegraphics[width=120mm]{1-adventure-com-proc}\n\t\t\n    	\N
1574	\N	\N	\n\tConsider the following view of the Pulse case study \n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=120mm]{1-pulse-multiple-copies-computation}\n\t\\end{center}\n\t\n\tThis view applies the following architectural styles\n\t\t\t\n    	\N
1575	\N	\N	\n\tConsider the architecture of the Morrison's OrderPad. The connector between the client component, executing in the Pad, and the server component, executing in the OrderPadDatabase\n\t\n    	\N
1576	\N	\N	\n\tOne of the advantages of having views of the module viewtype is that they allow to do a traceability analysis of requirements, how the functional requirements of the system are supported by module responsibilities. The modifiability tactic that is involved in this mapping is\n\t\t\n    	\N
1577	\N	\N	\n\tConsider that you intend to develop a system where it is necessary to change the emails received by the server (for instance, to remove potential virus or URLs for phishing sites). The goal is that each email is processed by this system before it is sent to other servers or it is stored locally. Additionally, the system should be easily modified to support new kinds of transformations. Which style is more suitable to satisfy these requirements? \n\n    	\N
1578	\N	\N	\n\tConsidered the following two views of a system that receive a stream of character and produce the same stream where the characters are alternately uppercase and lowercase.\n\t\n\t\\centering\n\t\\includegraphics[width=120mm]{1-module-and-cc}\n\t\t\n    	\N
1628	\N	\N	\n\tThe Decomposition architectural style of the Module viewtype \n\t\n    	\N
1629	1637	\N	\n\tA voting tactic can be used to\n\n    	\N
1579	1588	\N	\n\tConsider the following figure that presents a Queue where client applications write their requests to be processed by a server.\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=100mm]{Queues}\n\t\\end{center}\n\t\n\tThis solution \\textbf{does not} provide the following quality:\n\t\n    	\N
1584	\N	\N	\n\tIn the Architect Elevator article by Gregor Hohpe can be read:\n\t\n\t\\begin{quote}\n\t\tFinding the appropriate context requires the architect to visit many floors of the organization.\n\t\\end{quote}\n\t\n\tThis sentence reflects the fact that an architecture is\n\n    	\N
1585	\N	\N	\n\tConsider the following scenario for performance\n\t\n\t\\begin{quote}\n\t\tDuring the enrollment period the FenixEDU system should be able to completely enroll 5.000 students in less than 30 minutes.\n\t\\end{quote}\n\t\n    	\N
1586	\N	\N	\n\tIn the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:\n\t\n\t\\begin{quote}\n\t\tThe microservice approach to division ..., splitting up into services organized around business capability. Such services take a broad-stack implementation of software for that business area, including user-interface, persistent storage, and any external collaborations. Consequently the teams are cross-functional, including the full range of skills required for the development: user-experience, database, and project management.\n\t\\end{quote}\n\t\n\tConsidering the architecture influence cycle, which influence factor it is being considered?\n\n    	\N
1587	\N	\N	\n\tConsider the following figure that presents an architectural view of an \\emph{Image Hosting Application} which resulted from the enrichment of another architectural view by adding another \\emph{Image File Storage} pair, in the figure they are distinguished by 1 and 2. \n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=100mm]{ScalablePartitioning}\n\t\\end{center}\n\t\n\tWhich quality results from this enrichment, that was not provided by the previous version of the architecture?\n\t\n    	\N
1588	\N	\N	\n\tConsider the following figure that presents a Queue where client applications write their requests to be processed by a server.\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=100mm]{Queues}\n\t\\end{center}\n\t\n\tThis solution \\textbf{does not} provide the following quality:\n\t\n    	\N
1594	\N	\N	\n\tConsider the following figure that presents a Queue where client applications write their requests to be processed by a server (asynchronous) and compare with another architectural design (synchronous) where a thread is associated with each request.\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=100mm]{Queues}\n\t\\end{center}\n\t\t\n    	\N
1595	\N	\N	\n\tIn the Architect Elevator article by Gregor Hohpe can be read:\n\t\n\t\\begin{quote}\n\t\tOnce a developer approached our architecture team with an application that had "significant scalability demands". A quick look at the architecture diagram revealed numerous components communicating via XML messages. When I pointed out that this may be the very reason for the performance concerns, I was quickly informed that this was an architecture decision and couldn't be changed. Assuming the architects are smart and well-intentioned, they may have thought about interoperability when they made this decision but may be unaware of the negative impact on run-time performance and development velocity.\n\t\\end{quote}\n\t\n\tFrom this sentence we can conclude that\n\t\t\n    	\N
1596	\N	\N	\n\tIn the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:\n\t\n\t\\begin{quote}\n\t\tAs well as the fact that services are independently deployable and scalable, each service also provides a firm module boundary, even allowing for different services to be written in different programming languages. They can also be managed by different teams.\n\t\\end{quote}\n\t\n\tWhich is not necessarily an advantage of being independently deployable and scalable?\n\n    	\N
1597	\N	\N	\n\tConsider the following figure that presents an architectural view of an \\emph{Image Hosting Application}. \n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=100mm]{ScalablePartitioning}\n\t\\end{center}\n\t\t\n    	\N
1598	\N	\N	\n\tWhich of the following tactics is not related with the management of resources\n\t\n    	\N
1630	1638	\N	\n\tConsider the modifiability quality and the cost of change.\n\t\t\n    	\N
1604	\N	\N	\n\tConsider the following figure that presents a Queue where client applications write their requests to be processed by a server (asynchronous) and compare with another architectural design (synchronous) where a thread is associated with each request.\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=100mm]{Queues}\n\t\\end{center}\n\t\n\tConsider a situation where the server that processes the tasks crashes\n\t\t\n    	\N
1605	\N	\N	\n\tConsider the following figure that presents an architectural view of an \\emph{Image Hosting Application}. \n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=100mm]{ScalablePartitioning}\n\t\\end{center}\n\t\n\tThe replication between the Image File Storage \\emph{n} and Image File Storage \\emph{nb}\n\t\t\n    	\N
1606	\N	\N	\n\tIn the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:\n\t\n\t\\begin{quote}\n\t\tDecentralizing responsibility for data across microservices has implications for managing updates. The common approach to dealing with updates has been to use transactions to guarantee consistency when updating multiple resources. This approach is often used within monoliths.\n\t\\end{quote}\n\t\n\tWhat is the impact of decentralizing responsibility for data across microservices?\n\n    	\N
1607	\N	\N	\n\tWhich of the following tactics is not related with the control of resource demand\n\t\n    	\N
1608	\N	\N	\n\tIn the Architect Elevator article by Gregor Hohpe can be read:\n\t\n\t\\begin{quote}\n\t\tA lot of large companies have discovered the benefits of cloud computing but see it mainly as an infrastructure topic. I feel that's misguided: being able to get compute resources more quickly and cheaply is useful, but the real business benefit lies in a fully automated tool chain that minimizes the time in which a normal code change can go into production. Not quite coincidentally, this is my favorite definition of DevOps.\n\t\\end{quote}\n\t\n\tIn the author's opinion\n\t\t\n    	\N
1614	\N	\N	\n\tConsider the Decomposition architectural style of the Module viewtype\n\t\t\n    	\N
1615	\N	\N	\n\t  The \\emph{Composer UI} component of Graphite system, described as - \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL} - to be effective needs to show to the user the changes she performs in the graph such that she has immediate feedback whenever she clicks on a option. To do so, the architecture needs to include\n\n    	\N
1616	\N	\N	\n    There are several tactics to satisfy availability requirements,\n    which may be applied depending on the concrete requirement that we\n    want to satisfy.  Assuming that you want to detect faults of type\n    \\emph{response} in your system, which tactic is more adequate?\n\n    	\N
1617	\N	\N	\n\tThe modifiability tactic Use an Intermediary between two modules\n\t\t\n    	\N
1618	\N	\N	\n\tWhen applying Attribute-Driven Design (ADD) to the FenixEdu system the creation of a view where there are redundant web servers, load balancers and database servers \n\n    	\N
1624	\N	\N	\n    In the Graphite system the component \\emph{carbon} provides to \\emph{webapp} components an access interface to the \\emph{buffers} in order to improve the quality of\n\n    	\N
1625	\N	\N	\n\t  The availability quality can be supported by a voting tactic in order to identify faults of\n\n      	\N
1626	\N	\N	\n\tConsider an architecturally significant requirement (ASR) that has a low impact on the architecture but a high business value\n\n    	\N
1627	\N	\N	\n\tConsider the following scenario: \\emph{A system administrator adds more copies of computation of the system, each one using a different database, and is able to do it in less than 10 minutes.}\n\t\t\n    	\N
1634	\N	\N	\n\tDesigning an architecture\n\n    	\N
1635	\N	\N	\n  A software system is usually described using different architectural views\n\n  	\N
1636	\N	\N	\n\tIn the Graphite system description can be read:\n\t\n\t\\begin{quote}\n\t\tWe've got 600,000 metrics that update every minute and we're assuming our storage can only keep up with 60,000 write operations per minute. This means we will have approximately 10 minutes worth of data sitting in carbon's queues at any given time. To a user this means that the graphs they request from the Graphite webapp will be missing the most recent 10 minutes of data.\n\t\\end{quote}\n\n    	\N
1637	\N	\N	\n\tA voting tactic can be used to\n\n    	\N
1638	\N	\N	\n\tConsider the modifiability quality and the cost of change.\n\t\t\n    	\N
1644	\N	\N	\n\tConsider the following view of the Adventure Builder system\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=95mm]{AdventureBuilderComponentAndConnector}\n\t\\end{center}\n\t\n\tIn this view the following architectural styles are used\n\t\n\t\t\n    	\N
1645	\N	\N	\n\t  Suppose that in the development of an enterprise application (which needs to access a\n\t  database) it was decided to use the FenixFramework library to simplify the development\n\t  of the data access code. Which architectural style is the most adequate to represent this\n\t  decision?\n\t  \n\t  	\N
1646	\N	\N	\n\tConsider the concept of interface delegation \n\t\t\n    	\N
1647	\N	\N	\n\tThe Pipe-and-Filter style allows composition of filters \n\n    	\N
1648	\N	\N	\n\tConsider the following modifiability scenario for the Adventure Builder system \n\t\n\t\\begin{quote}\n\t\tA new business partner (airline, lodging, or activity provider) that uses its own web services interface is added to the system in no more than 10 person-days of effort for the implementation. The business goal is easy integration with new business partners.\n\t\\end{quote}\n\t\n\tand the following architectural view\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=95mm]{AdventureBuilderModule}\n\t\\end{center}\n\t\n    	\N
1654	\N	\N	\n\tConsider the following view of the Adventure Builder system\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=95mm]{AdventureBuilderComponentAndConnector}\n\t\\end{center}\n\t\n\tIn this view it is possible to reason that\n\t\n    	\N
1655	\N	\N	\n\tIn the Publish-Subscribe architectural style \n\t\n    	\N
1656	\N	\N	\n  Which\n  architectural style is \n  adequate for planning incremental\n  releases?\n\n  	\N
1657	\N	\N	\n\tConsider the following performance/scalability scenario for the Adventure Builder system \n\t\n\t\\begin{quote}\n\t\tUp to 500 users click to see the catalog of adventure packages following a random distribution over 1 minute; the system is under normal operating conditions; the maximal latency to serve the first page of content is under 5 seconds; average latency for same is less than 2 seconds. If required, the system should easily support an increase in the number of simultaneous requests while maintaining the same latency per request.\n\t\\end{quote}\n\t\n\tand the following architectural view\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=95mm]{AdventureBuilderModule}\n\t\\end{center}\n\t\n    	\N
1658	\N	\N	\n\tA connector may be attached to components of different types because\n\t\t\n    	\N
1640	1644	\N	\n\tConsider the following view of the Adventure Builder system\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=95mm]{AdventureBuilderComponentAndConnector}\n\t\\end{center}\n\t\n\tIn this view the following architectural styles are used\n\t\n\t\t\n    	\N
1642	1646	\N	\n\tConsider the concept of interface delegation \n\t\t\n    	\N
1643	1647	\N	\n\tThe Pipe-and-Filter style allows composition of filters \n\n    	\N
1649	1655	\N	\n\tIn the Publish-Subscribe architectural style \n\t\n    	\N
1664	\N	\N	\n\tConsider the following view of the Adventure Builder system\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=95mm]{AdventureBuilderComponentAndConnector}\n\t\\end{center}\n\t\n\tThis view \\textbf{does not} apply the architectural style\n\t\n\t\t\n    	\N
1665	\N	\N	\n  In a layered architecture composed by four layers, where the topmost\n  layer is the layer number 1 and the bottommost layer is the layer\n  number 4, which of the layers is more modifiable?\n\n    	\N
1666	\N	\N	\n\tConsider the following availability scenario for the Adventure Builder system \n\t\n\t\\begin{quote}\n\t\tThe Consumer Web site is available to the user 24x7. If an instance of OPC application fails, the fault is detected and the system administrator is notified in 30 seconds; the system continues taking order requests; another OPC instance is created; and data remains in consistent state.\n\t\\end{quote}\n\t\n\tand the following architectural view\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=95mm]{AdventureBuilderModule}\n\t\\end{center}\n\t\n    	\N
1667	\N	\N	\n\tThe Peer-to-Peer architectural style provides high scalability and availability. In the context of a file sharing system  \n\t\n    	\N
1668	\N	\N	\n\tThe quality(ies) that is(are) more relevant to views of the component-and-connector viewtype is(are):\n\t\t\n    	\N
1674	\N	\N	\n\tIn the context of the \\emph{Graphite} case study, consider the following view that represents the internal behavior of the \\emph{Carbon} component, where the components \\texttt{r1,... , rn, w} are threads and \\texttt{q1, ..., qn} are buffers. This view shows the Graphite's architecture support of\n\t\n\t\\centering\n\t\\includegraphics[width=120mm]{graphite-carbon}\n\n    	\N
1675	\N	\N	\n\tConsider the architectural solutions for microservices architectures that use the event sourcing technique. This technique has the following advantage \n\t\t\t\n    	\N
1676	\N	\N	\n\tThe Tiers architectural style\n\t\n    	\N
1677	\N	\N	\n\tConsider the following decomposition view of the Catalog of DVD case study.\n\t\n\t\\centering\n\t\\includegraphics[width=100mm]{dvd-top-decomposition}\n\n    	\N
1678	\N	\N	\n\tConsider the architecture of the Morrison's OrderPad. The decision whether use a Native application or HTML5 for the implementation of the client in the Pad was taken because\n\t\n    	\N
1684	\N	\N	\n\tIn the context of the \\emph{Graphite} case study, consider the following view that represents the internal behavior of the \\emph{Carbon} component, where the components \\texttt{r1,... , rn, w} are threads and \\texttt{q1, ..., qn} are buffers. The port \\emph{read}, which provides an interface to read the data points stored in the queue, can be used, in an enrichment of the view, to illustrate\n\t\n\t\\centering\n\t\\includegraphics[width=120mm]{graphite-carbon}\n\n    	\N
1685	\N	\N	\n\tIn the Amazon Silk browser  \n\t\n    	\N
1686	\N	\N	\n\tSuppose that an architect needs to decide whether to follow a modular monolith architecture or a microservices architecture for a new large system. The system to be developed has a complex logic and high volume of requests. \n\t\t\t\n    	\N
1687	\N	\N	\n\tIn the web page of the NGINX HTTP server can be read\n\t\n\t\\begin{quote}\n\t\tNGINX is a free, open-source, high-performance HTTP server and reverse proxy, as well as an IMAP/POP3 proxy server. (...)\n\t\tUnlike traditional servers, NGINX doesn't rely on threads to handle requests. Instead it uses a much more scalable event-driven (asynchronous) architecture. This architecture uses small, but more importantly, predictable amounts of memory under load.\n\t\\end{quote}\n\t\n\tAccording to the above description the most adequate architectural style to represent the performance qualities of NGINX is\n\t\n    	\N
1688	\N	\N	\n\tConsider the following decomposition views of the Catalog of DVD case study were the \\emph{Autocomplete} module is implemented in javascript and executes in a browser.\n\t\n\t\\centering\n\t\\includegraphics[width=120mm]{dvd-autocomplete}\n\n    	\N
1673	1675	\N	\n\tConsider the architectural solutions for microservices architectures that use the event sourcing technique. This technique has the following advantage \n\t\t\t\n    	\N
1669	1676	\N	\n\tThe Tiers architectural style\n\t\n    	\N
1694	\N	\N	\n\tConsider the architecture of the Morrison's OrderPad. In the description of the system can be read:\n\t\n\t\\begin{quote}\n\t\tThe pilot version included some architectural short-cuts that would not work with the full complement of stores. One of these was using a file-transfer to send data to the mainframe rather than MQ, which wouldn't perform well once many stores were active.\n\t\\end{quote}\n\t\n\tThis approach means that\n\t\n    	\N
1695	\N	\N	\n\tConsider a stakeholder that is particularly concerned about the total cost of the project. When it comes to describing the system using allocation viewtypes is interested in\n\n    	\N
1696	\N	\N	\n\tConsider the following generalization view of the Catalog of DVD case study.\n\t\n\t\\centering\n\t\\includegraphics[width=60mm]{dvd-generalization}\n\n    	\N
1697	\N	\N	\n\tIn the context of the \\emph{Graphite} case study, consider the following application-specific types that are used in a view to represent the internal behavior of the \\emph{Webapp} component. \n\t\n\t\\centering\n\t\\includegraphics[width=120mm]{graphite-webapp}\n\t\n\tThis view can show that the architecture fulfills  \n\n    	\N
1698	\N	\N	\n\tConsider the architectural solutions for microservices architectures that use the Command Query Responsibility Segregation (CQRS) technique in the context of Event Sourcing. This technique has the following disadvantage \n\t\t\t\n    	\N
7	21	\N	\n  O desenho da arquitectura de software de um sistema complexo\n\n    	\N
5	22	\N	\n  De acordo com o modelo do SEI, existem três tipos diferentes de\n  vistas arquitecturais que são normalmente necessárias para descrever\n  completamente uma arquitectura de software.\n\n    	\N
8	23	\N	\n  Os requisitos para sistemas complexos são normalmente muito\n  numerosos e conflituosos entre si, tornando impossível satisfazer\n  todos os requisitos completamente numa implementação do sistema.\n  Por isso, o processo recomendado para se fazer o desenho da\n  arquitectura de software de um sistema passa pela identificação dos\n  \\emph{architectural drivers}, que irão moldar o desenho da\n  arquitectura.  Estes \\emph{architectural drivers} devem ser\n  escolhidos de forma a que sejam\n\n    	\N
13	24	\N	\n  Suponha que vai trabalhar para a equipa de desenvolvimento de um\n  sistema de software de grandes dimensões, e que lhe são atribuídas\n  tarefas de alteração de funcionalidades já existentes.  Quais das\n  seguintes vistas arquitecturais lhe seriam, em princípio, mais úteis\n  para desempenhar rapidamente essas tarefas?\n\n    	\N
2	25	\N	\n  Existem outros factores que afectam o desenvolvimento de um sistema\n  de software, para além dos seus requisitos funcionais e de atributos\n  de qualidade.  Por exemplo, factores como o orçamento ou o tempo\n  disponível.  Estes factores\n\n    	\N
6	26	\N	\n  Numa arquitectura de camadas composta por quatro camadas, em que a\n  camada mais de cima é a camada número 1 e a de mais de baixo é a\n  camada número 4, qual das camadas é mais facilmente modificável?\n\n    	\N
3	27	\N	\n  Suponha que vai desenvolver um novo sistema de software e que\n  pretende que uma parte da funcionalidade deste novo sistema possa\n  ser facilmente reutilizada em sistemas a desenvolver no futuro.\n  Quais dos seguintes estilos arquitecturais são mais adequados para\n  mostrar que a arquitectura do sistema satisfaz este requisito.\n\n    	\N
1	28	\N	\n  Suponha que existem determinados requisitos de desempenho para um\n  sistema, e que pretende mostrar aos stakeholders desse sistema que a\n  arquitectura de software que concebeu satisfaz esses requisitos.\n  Para isso\n\n    	\N
15	29	\N	\n  Considere uma aplicação empresarial que necessita de guardar os seus\n  dados de forma persistente, mas para a qual não se sabe ainda qual\n  será o volume de informação que esta terá que suportar.  Por isso,\n  pretende-se desenvolver o sistema de forma a que seja possível\n  alterar facilmente o componente de bases de dados relacional (RDBMS)\n  usado para armazenar os dados da aplicação, substituindo-o por um\n  RDBMS de outro fabricante.  Visto que este é um requisito comum, a\n  arquitectura de software recomendada para este tipo de aplicações\n  satisfaz este requisito através da utilização de um determinado\n  estilo arquitectural.  Que estilo é esse?\n\n    	\N
17	30	\N	\n  O IDE Eclipse é uma aplicação \\emph{open source} escrita em Java, e\n  é extensível através da utilização de \\emph{plug-ins}.  No documento\n  que descreve a arquitectura de plug-ins existente no Eclipse,\n  podemos ler o seguinte:\n\n  \\begin{quote}\n    A plug-in in Eclipse is a component that provides a certain type\n    of service within the context of the Eclipse workbench. [...]  The\n    plug-in class provides configuration and management support for\n    the plug-in.  A plug-in class in Eclipse must extend\n    \\texttt{org.eclipse.core.runtime.Plugin}, which is an abstract\n    class that provides generic facilities for managing plug-ins.\n  \\end{quote}\n\n  Tendo em conta o modelo e a nomenclatura usados na cadeira para a\n  descrição de uma arquitectura de software, que tipo de vistas lhe\n  parecem mais adequadas para representar a arquitectura de plug-ins\n  do Eclipse descrita acima?\n\n    	\N
16	31	\N	\n  Suponha que decidiu usar o Google App Engine (GAE) no\n  desenvolvimento de uma aplicação web.\n\n  O GAE é descrito na Wikipedia da seguinte forma:\n  \\begin{quote}\n    Google App Engine is a platform for developing and hosting web\n    applications in Google-managed data centers.\n\n    Google App Engine is cloud computing technology.  It virtualizes\n    applications across multiple servers and data centers. [...]\n\n    Google App Engine is free up to a certain level of used resources.\n    Fees are charged for additional storage, bandwidth, or CPU cycles\n    required by the application.\n  \\end{quote}\n  \n  Por outro lado a documentação do GAE diz o seguinte:\n  \\begin{quote}\n    With App Engine, you can build web applications using standard\n    Java technologies and run them on Google's scalable\n    infrastructure.  The Java environment provides a Java 6 JVM, a\n    Java Servlets interface, and support for standard interfaces to\n    the App Engine scalable datastore and services, such as JDO, JPA,\n    JavaMail, and JCache.  Standards support makes developing your\n    application easy and familiar, and also makes porting your\n    application to and from your own servlet environment\n    straightforward.\n  \\end{quote}\n\n  Tendo em conta estas duas perspectivas sobre o GAE, que estilos\n  arquitecturais são mais indicados para representar a sua utilização\n  na arquitectura de software da sua aplicação web?\n\n    	\N
94	112	\N	\n    No último parágrafo da secção 8.2.2 descreve-se qual foi a solução\n    adoptada pelo \\emph{NameNode} para obter um determinado nível de\n    desempenho na escrita para disco.  Que estilo arquitectural é mais\n    adequado para representar a solução adoptada?\n\n    	\N
12	32	\N	\n  Dada a complexidade de construir um bom jogador automático de\n  Xadrez, é normal que os programas para jogar Xadrez recorram a\n  motores de Xadrez (\\emph{chess engines}) já existentes, como mostra\n  o seguinte excerto da Wikipedia:\n  \\begin{quote}\n    A chess engine is a computer program that can play the game of\n    chess.\n\n    Most chess engines do not have their own graphical user interface\n    (GUI) but are rather console applications that communicate with a\n    GUI such as XBoard (Linux) and WinBoard (Windows) via a standard\n    protocol.\n  \\end{quote}\n\n  Na página web do XBoard, podemos ler o seguinte:\n  \\begin{quote}\n    XBoard is a graphical user interface for chess [...]. It displays\n    a chessboard on the screen, accepts moves made with the mouse, and\n    loads and saves games in Portable Game Notation (PGN). It serves\n    as a front-end for many different chess services, including:\n\n    \\begin{itemize}\n    \\item Chess engines that will run on your machine and play a game\n      against you or help you analyze, such as GNU Chess, Crafty, or\n      many others.\n    \\item [...]\n    \\end{itemize}\n  \\end{quote}\n \n  Tendo em conta a informação acima sobre o XBoard, os motores de\n  Xadrez, e a forma como eles interagem em tempo de execução, qual dos\n  seguintes estilos arquitecturais melhor representa a arquitectura de\n  software de um sistema baseado no XBoard e num dos motores?\n\n    	\N
14	33	\N	\n  Considere o seguinte excerto da página da Wikipedia sobre testes de\n  caixa preta (\\emph{black-box testing}):\n  \\begin{quote}\n    Black-box testing is a method of software testing that tests the\n    functionality of an application as opposed to its internal\n    structures or workings.  Specific knowledge of the application's\n    code/internal structure and programming knowledge in general is\n    not required.  Test cases are built around specifications and\n    requirements, i.e., what the application is supposed to do.\n  \\end{quote}\n  \n  Supondo que pertence à equipa de testes de um sistema complexo e que\n  é responsável por efectuar testes de caixa preta sobre o sistema,\n  quais das seguintes vistas da arquitectura de software do sistema\n  lhe seriam mais úteis?\n\n    	\N
4	34	\N	\n  Suponha que tem um sistema com uma arquitectura cliente-servidor que\n  foi concebido para suportar a existência simultânea de no máximo 100\n  clientes, sem requisitos especiais de disponibilidade.  A solução\n  adoptada e posta em funcionamento há 4 anos consiste num único\n  componente do tipo servidor ao qual se ligam todos os clientes.\n  Esta solução satisfazia os requisitos iniciais mas com o aumento\n  recente do número máximo de clientes para 200, o sistema deixou de\n  ter um desempenho aceitável.  Não sabendo mais nada sobre a\n  arquitectura do sistema, que solução propõe para resolver os\n  problemas de desempenho do sistema?\n\n    	\N
11	35	\N	\n  A evolução registada nas aplicações web no sentido de providenciar\n  uma interface com o utilizador mais rica levou a uma mudança na sua\n  arquitectura: parte da computação da aplicação passou a ser feita no\n  \\emph{browser} web usado pelos utilizadores para aceder à aplicação.\n  Como é que esta alteração na arquitectura se manifesta nos\n  diferentes tipos de vista que descrevem a arquitectura de software\n  de uma aplicação web?\n\n    	\N
18	36	\N	\n  Quando se utiliza o padrão Domain Model na implementação da camada\n  de lógica de domínio de uma aplicação empresarial, é comum\n  utilizar-se também o padrão Service Layer.  O padrão Service Layer é\n  usado nestes casos para\n\n    	\N
9	37	\N	\n  O sistema de email é composto por vários tipos de componentes\n que desempenham diferentes funções.  Por exemplo, para\n  enviar um email, um utilizador pode utilizar um programa como o\n  Microsoft Outlook ou o Mozilla Thunderbird, genericamente designado\n  por \\emph{mail user agent} (MUA), para compor a sua mensagem e\n  enviá-la.  Para enviar a mensagem, tipicamente o MUA liga-se a um\n  \\emph{mail transfer agent} (MTA), que recebe a mensagem, analisa os\n  cabeçalhos da mesma para determinar os vários destinatários e, após\n  consulta do sistema DNS para determinar quais os MTA responsáveis\n  por cada um dos destinatários, liga-se aos MTAs responsáveis pelos\n  endereços de destino para entregar a mensagem.  Cada um desses MTAs\n  recebe a mensagem e armazena-a localmente ou reenvia-a para outros\n  MTAs (por exemplo, quando existem \\emph{forwards} ou \\emph{aliases}\n  configurados, ou quando o MTA que recebe a mensagem não é o\n  responsável final pelo endereço de email do destinatário).\n\n Tendo em conta esta descrição simplificada do funcionamento do\n  sistema de email, qual dos seguintes estilos arquitecturais lhe\n  parece mais adequado para representar o padrão de interacção\n  existente entre os MTAs?\n\n    	\N
10	38	\N	\n  Considerando ainda o exemplo do sistema de email, os MUAs servem não\n  só para compor e enviar mensagens, mas também para os utilizadores\n  lerem as mensagens de email que lhe foram enviadas.  Para isso os\n  MUAs têm que obter essas mensagens do componente que as armazena\n  para as mostrar ao utilizador.  Duas formas diferentes de o fazer é\n  usando os protocolos POP e IMAP.  No primeiro caso, as mensagens são\n  movidas do servidor de POP para o computador do utilizador.  No\n  segundo caso, as mensagens continuam armazenadas no servidor de\n  IMAP, permitindo assim que o utilizador possa aceder ao seu email a\n  partir de computadores diferentes, desde que todos eles se consigam\n  ligar ao mesmo servidor de IMAP.\n\n  Qual dos seguintes estilos arquitecturais lhe parece mais adequado\n  para representar o padrão de interacção existente entre os MUAs e um\n  servidor de IMAP?\n\n   	\N
20	39	\N	\n  O padrão Identity Map é normalmente usado nas aplicações\n  empresariais para\n \n    	\N
19	40	\N	\n  O padrão Unif of Work é normalmente usado nas aplicações\n  empresariais para\n\n    	\N
41	61	\N	\n  De acordo com o modelo do SEI, existem apenas três tipos diferentes\n  de vistas arquitecturais que são suficientes para descrever qualquer\n  arquitectura de software.  Isto significa que, para se descrever a\n  arquitectura de software de um sistema, qualquer que ele seja\n\n  \n    	\N
44	62	\N	\n  Suponha que ao conceber a arquitectura de software de um sistema, um\n  arquitecto decidiu particionar o sistema em três componentes, cada\n  um dos quais com um conjunto de funcionalidades diferentes.  Qual\n  das seguintes razões lhe parece mais adequada para justificar esta\n  decisão?\n\n\n    	\N
43	63	\N	\n  Após o desenvolvimento de todas as funcionalidades pedidas para um\n  sistema de software e da sua entrada em produção, é normal que a\n  maior parte da equipa envolvida no desenvolvimento desse sistema\n  seja posta a trabalhar no desenvolvimento de outros sistemas.  No\n  entanto, é normal que surjam com alguma frequência pedidos de\n  alteração de funcionalidades do sistema em produção (correspondendo\n  à sua fase de manutenção evolutiva).\n  \n  Suponha que foi contratado para fazer a gestão desses pedidos de\n  alteração, planeando a sua execução (que será feita pelos\n  programadores da equipa de desenvolvimento e não por si) tendo em\n  conta, entre outros factores, a disponibilidade dos membros da\n  equipa de desenvolvimento.  Quais das seguintes vistas\n  arquitecturais lhe seriam, em princípio, mais úteis para desempenhar\n  o seu trabalho?\n\n  \n    	\N
42	64	\N	\n  No Ciclo de Negócio da Arquitectura uma das principais influências\n  na arquitectura de um sistema de software são os seus\n  \\emph{stakeholders}, porque\n\n  \n    	\N
50	65	\N	\n  Suponha que vai desenvolver uma aplicação web que pretende alojar\n  numa das várias plataformas de \\emph{Cloud Computing} actualmente\n  existentes.  Para isso, analisou as várias ofertas disponíveis, e\n  seleccionou um subconjunto de plataformas que providenciam um\n  conjunto de serviços semelhantes (por exemplo, serviços de\n  armazenamento de dados, serviços de mensagens, etc), mas que o fazem\n  usando interfaces diferentes.  Por isso, para desenvolver o seu\n  sistema acaba por escolher uma dessas plataformas, mas, para evitar\n  ficar preso a essa escolha, coloca como requisito para o seu sistema\n  que este seja facilmente portável para outra plataforma semelhante à\n  que escolheu.  Que solução arquitectural melhor satisfaz este\n  requisito?\n\n   \n    	\N
49	66	\N	\n  O sistema de email é composto por vários tipos de componentes que\n  desempenham diferentes funções.  Por exemplo, para enviar um email,\n  um utilizador pode utilizar um programa como o Microsoft Outlook ou\n  o Mozilla Thunderbird, genericamente designado por \\emph{mail user\n    agent} (MUA), para compor a sua mensagem e enviá-la.  Para enviar\n  a mensagem, tipicamente o MUA liga-se a um \\emph{mail transfer\n    agent} (MTA), que recebe a mensagem, analisa os cabeçalhos da\n  mesma para determinar os vários destinatários e, após consulta do\n  sistema DNS para determinar quais os MTA responsáveis por cada um\n  dos destinatários, liga-se aos MTAs responsáveis pelos endereços de\n  destino para entregar a mensagem.  Cada um desses MTAs recebe a\n  mensagem e armazena-a localmente ou reenvia-a para outros MTAs até\n  que a mensagem chegue ao MTA do destino.  O utilizador destinatário\n  da mensagem irá depois usar o seu MUA para ver as mensagens que lhe\n  foram enviadas.\n\n  Tendo em conta esta descrição simplificada do funcionamento do\n  sistema de email, qual das seguintes descrições lhe parece mais\n  adequada para representar a arquitectura de software do sistema de\n  email, se apenas estivermos interessados no padrão de interacção\n  existente entre os MUAs?\n\n\n    	\N
45	67	\N	\n  O Chromium é um navegador da web (\\emph{web browser}), que\n  introduziu uma arquitectura inovadora na forma como lida com a\n  navegação simultânea de várias páginas, cada uma das quais numa\n  \\emph{tab} diferente do navegador.  No documento que descreve a\n  arquitectura do Chromium, podemos ler o seguinte:\n\n  \\begin{quote}\n    We use separate processes for browser tabs to protect the overall\n    application from bugs and glitches in the rendering engine.  We\n    also restrict access from each rendering engine process to others\n    and to the rest of the system.  In some ways, this brings to web\n    browsing the benefits that memory protection and access control\n    brought to operating systems.\n\n    We refer to the main process that runs the UI and manages tab and\n    plugin processes as the "browser process" or "browser."  Likewise,\n    the tab-specific processes are called "render processes" or\n    "renderers."  The renderers use the WebKit open-source layout\n    engine for interpreting and laying out HTML.\n  \\end{quote}\n\n  Tendo em conta esta breve descrição da arquitectura de software do\n  Chromium, que estilo arquitectural lhe parece mais adequado para a\n  representar?\n\n\n    	\N
46	68	\N	\n  Na descrição da arquitectura do Chromium é dito que os\n  \\emph{renderers} usam o WebKit, que é descrito na Wikipedia da\n  seguinte forma:\n\n  \\begin{quote}\n    WebKit is a layout engine designed to allow web browsers to render\n    web pages.  WebKit powers Google Chrome and Apple's Safari, the\n    third and fourth most widely used web browsers respectively.  The\n    WebKit engine provides a set of classes to display web content in\n    windows, and implements browser features such as following links\n    when clicked by the user, managing a back-forward list, and\n    managing a history of pages recently visited.  \n  \n    WebKit was originally created as a fork of KHTML as the layout\n    engine for Apple's Safari; it is portable to many other computing\n    platforms.  Mac OS X and Windows are supported by the project.\n\n    WebKit's WebCore and JavaScriptCore components are available under\n    the GNU Lesser General Public License, and the rest of WebKit is\n    available under a BSD-style license.\n  \\end{quote}\n  \n  Suponha que vai desenvolver um novo \\emph{browser} e que decidiu\n  usar o WebKit para suportar o \\emph{rendering} das páginas de HTML,\n  à semelhança do que é feito no Chromium e no Safari.  Qual das\n  seguintes vistas arquitecturais é mais adequada para representar\n  esta decisão?\n\n\n    	\N
47	69	\N	\n  Considerando ainda o exemplo do Chromium, encontra-se na página do\n  projecto um outro documento intitulado ``Conventions and patterns\n  for multi-platform development,'' onde se pode ler o seguinte:\n\n  \\begin{quote}\n    Chromium is a large and complex cross-platform product.  We try to\n    share as much code as possible between platforms, while\n    implementing the UI and OS integration in the most appropriate way\n    for each.  While this gives a better user experience, it adds\n    extra complexity to the code.  This document describes the\n    recommended practices for keeping such cross-platform code clean.\n\n    We use a variety of different file naming suffixes to indicate\n    when a file should be used:\n    \\begin{itemize}\n    \\item Windows files use the \\texttt{\\_win} suffix.\n    \\item Cocoa (Mac UI) files use the \\texttt{\\_cocoa} suffix, and lower-level Mac files use the \\texttt{\\_mac} suffix.\n    \\item Linux files use \\texttt{\\_linux} for lower-level files, \\texttt{\\_gtk} for GTK-specific files, and \\texttt{\\_x} for X Windows (with no GTK) specific files.\n    \\item Posix files shared between Mac and Linux use the \\texttt{\\_posix} suffix.\n    \\item Files for Chrome's ``Views'' UI (on Windows and experimental GTK) layout system use the \\texttt{\\_views} suffix.\n   \\end{itemize}\n\n    The separate front-ends of the browser are contained in their own directories:\n    \\begin{itemize}\n    \\item Windows Views (and the experimental GTK-views): \\\\\n      \\texttt{chrome/browser/ui/views}\n    \\item Linux GTK: \\texttt{chrome/browser/gtk}\n    \\item Mac: \\texttt{chrome/browser/cocoa}\n    \\end{itemize}\n  \\end{quote}\n  \n  Novamente, tendo em conta esta breve descrição, que estilo\n  arquitectural lhe parece mais adequado para a representar?\n\n\n    	\N
48	70	\N	\n  Qual das seguintes frases descreve melhor a relação existente entre\n  módulos e componentes?\n\n  	\N
54	71	\N	\n  Uma das evoluções no desenvolvimento de aplicações web foi a criação\n  de \\emph{mashups}, que são descritas na Wikipedia da seguinte forma:\n\n  \\begin{quote}\n    In web development, a mashup is a web page or application that\n    uses and combines data, presentation or functionality from two or\n    more sources to create new services.\n  \\end{quote}\n\n  Embora existam várias formas de implementar e providenciar estes\n  mashups, uma abordagem comum é passar para o \\emph{browser} a\n  responsabilidade de contactar os vários serviços que se pretende\n  combinar e de processar as suas respostas, implementando assim o\n  \\emph{mashup}.\n\n  Que estilo arquitectural melhor descreve o funcionamento deste tipo\n  de aplicações?\n\n  \n    	\N
90	111	\N	\n    De acordo com as técnicas de desenho orientadas aos atributos, uma\n    arquitectura de software deve ser desenhada com base numa lista de\n    requisitos, chamados de \\emph{architectural drivers}. Estes\n    \\emph{architectural drivers} devem ser ordenados de acordo com a\n    sua importância para os \\emph{stakeholders} pois\n\t\n    	\N
437	465	\N	\n\tChecksum is a technic that it is often used in architectural design. It can be used as\n\t\t\n    	\N
53	72	\N	\n  O IDE Eclipse é uma aplicação \\emph{open source} escrita em Java, e\n  é extensível através da utilização de \\emph{plug-ins}.  No documento\n  que descreve a arquitectura de plug-ins existente no Eclipse,\n  podemos ler o seguinte:\n\n  \\begin{quote}\n    A plug-in in Eclipse is a component that provides a certain type\n    of service within the context of the Eclipse workbench. [...] The\n    Eclipse runtime provides an infrastructure to support the\n    activation and operation of a set of plug-ins working together to\n    provide a seamless environment for development activities. Within\n    a running Eclipse instance, a plug-in is embodied in an instance\n    of some plug-in runtime class, or plug-in class, for short. \n    \n    [...]\n\n    Such a plug-in can then be activated by the Eclipse runtime when\n    it is required to perform some function.  Activating a plug-in\n    means loading its runtime class and instantiating and initializing\n    its instance.\n\n    The main function of a plug-in class is to do special processing\n    during plug-in activation and deactivation, e.g., to allocate and\n    release resources.\n  \\end{quote}\n\n  Tendo em conta o modelo e a nomenclatura usados na cadeira para a\n  descrição de uma arquitectura de software, que tipo de vistas lhe\n  parecem mais adequadas para representar a arquitectura de plug-ins\n  do Eclipse descrita acima?\n\n  \n    	\N
52	73	\N	\n  Suponha que desenvolveu uma aplicação web que permite aos seus\n  utilizadores jogarem Xadrez uns contra os outros.  A aplicação\n  permite que os jogadores se juntem em pares para realizarem um jogo,\n  após o que o jogo decorre entre esses dois jogadores durante algum\n  tempo até ao fim do jogo.  Um jogo completo pode demorar desde cerca\n  de 1 hora, até vários dias, dependendo do tempo que cada jogador\n  demora a realizar uma jogada.  Este sistema foi concebido como uma\n  aplicação web tradicional, e tem estado a funcionar já há alguns\n  meses com um único componente do tipo servidor ao qual se ligam\n  todos os clientes web.  No entanto, dada a recente exposição\n  mediática do seu jogo, o número de utilizadores da sua aplicação\n  aumentou substancialmente nos últimos tempos.  De facto, viu o seu\n  sistema passar rapidamente dos habituais 10 pedidos simultâneos que\n  eram processados com um tempo médio de resposta inferior a 300 ms,\n  para 100 pedidos a serem processados simultaneamente com um tempo\n  médio de resposta de cerca de 5 segundos.  Na realidade, o número de\n  pedidos simultâneos não aumentou mais porque o seu servidor rejeita\n  pedidos adicionais assim que atinge os 100 pedidos em processamento.\n\n  Visto que as expectativas é que a utilização do sistema continue a\n  aumentar, podendo mesmo chegar aos 10000 pedidos simultâneos, e que\n  o sistema só é utilizável se tiver tempos médios de resposta abaixo\n  dos 2 segundos, que solução propõe para resolver os problemas de\n  desempenho do sistema?\n\n  \n    	\N
51	74	\N	\n  A replicação é uma das tácticas mais usadas para satisfazer\n  requisitos de disponibilidade como, por exemplo, o requisito de que\n  uma aplicação web deve continuar a funcionar normalmente, mesmo\n  quando existe uma falta ao nível do seu servidor web.  A utilização\n  da táctica de replicação do servidor web reflecte-se em que vistas\n  da arquitectura de software?\n\n  \n    	\N
55	75	\N	\n  O sistema Retalhix é um sistema que permite fazer a gestão dos\n  produtos e das vendas dos hipermercados, incluindo o funcionamento\n  das caixas por onde os clientes passam para registar e pagar as suas\n  compras.  Considere o seguinte requisito de disponibilidade para o\n  Retalhix\n\n  \\begin{quote}\n    O aspecto mais crítico para o funcionamento de uma loja é a\n    correcta operação das caixas, visto que o não funcionamento das\n    caixas afecta directamente os clientes e a sua possibilidade de\n    comprar produtos.\n  \\end{quote}\n\n Supondo que o que se pretende é que, em caso de falta (qualquer que\n  ela seja) de uma só caixa, o cliente que estava a ser atendido nessa\n  caixa possa à mesma pagar as suas compras e sair da loja com elas,\n  como é que a arquitectura do sistema pode dar resposta a este\n  requisito?\n\n  \n    	\N
56	76	\N	\n  Considerando ainda o sistema Retalhix da pergunta anterior, imagine\n  a situação em que um cliente tem dois carrinhos de supermercado\n  cheios de compras e vai a meio do registo das suas compras na caixa\n  quando esta falha.  Suponha que o que se pretende neste cenário é\n  que se possa continuar a registar os produtos do cliente sem ter que\n  voltar a registar os produtos já registados.  Que consequências é\n  que este novo requisito tem na arquitectura do sistema?\n\n  \n    	\N
58	77	\N	\n  Qual é a relação existente entre os elementos de hardware\n  correspondentes a unidades de processamento (máquinas) numa vista do\n  estilo Instalação (\\emph{Deployment}) e os componentes de um\n  sistema, considerando que réplicas do mesmo componente contam como\n  componentes diferentes?\n\n  \n    	\N
57	78	\N	\n  Suponha que no processo de desenho da arquitectura de software de um\n  sistema chega à conclusão de que existem ciclos na relação de\n  utilização (\\emph{uses}) entre os módulos do sistema, fazendo com\n  que quase todos os módulos do sistema dependam da maior parte dos\n  restantes módulos.  Como é que resolveria este problema?\n\n  \n    	\N
60	79	\N	\n  O padrão Unit of Work é normalmente usado em aplicações empresariais\n  para agrupar uma série de operações de acesso a dados que pertencem\n  a uma única operação de negócio.  Visto que o código executado no\n  contexto de uma Unit of Work pode estar espalhado por diferentes\n  módulos do sistema, pode acontecer que durante a mesma Unit of Work\n  se leia da base de dados os mesmos dados mais do que uma vez, o que\n  pode trazer problemas de coerência da informação se não forem\n  tomadas as precauções devidas.  Como é que este problema é resolvido\n  quando se está a usar o padrão Unit of Work?\n\n  \n    	\N
59	80	\N	\n  O padrão Identity Map é usado em aplicações empresariais\n\n  \n    	\N
83	101	\N	\n    No sistema Hadoop as tácticas de recuperação de faltas usadas são:\n\n    	\N
81	102	\N	\n    A qualidade de escalabilidade do sistema Hadoop apenas é possível\n    porque?\n\n    	\N
84	103	\N	\n    No sistema Hadoop quando um \\emph{DataNode} que falhou é\n    reintroduzido são usadas as seguintes tácticas:\n\n    	\N
82	104	\N	\n    No sistema Hadoop:\n\n     	\N
86	105	\N	\n    Durante a operação normal os \\emph{DataNodes} usam a táctica de\n    \\emph{heartbeat}\n\n    	\N
85	106	\N	\n    No sistema Hadoop instalado no Yahoo! as tácticas de segurança\n    utilizadas são:\n\n    	\N
87	107	\N	\n    Uma camada, do estilo arquitectural camadas, é um módulo:\n\n    	\N
89	108	\N	\n    No estilo arquitectural Utilização diz-se que uma invocação entre\n    dois módulos não implica uma relação de utilização pois:\n\n    	\N
88	109	\N	\n    O estilo arquitectural Utilização permite aferir do impacto de\n    alterações aos módulos\n\n    	\N
92	110	\N	\n    Conforme descrito na secção 8.2.3., o componente \\emph{NameNode}\n    dá comandos aos \\emph{DataNodes} para que eles procedam a algumas\n    operações sobre os seus blocos, ao passo que os \\emph{DataNodes}\n    têm que enviar relatórios regulares para o \\emph{NameNode}.  A\n    arquitectura que melhor descreve a forma como no sistema HDFS\n    estes dois tipos de componentes interagem é como\n\n    	\N
91	113	\N	\n    No sistema HDFS o componente \\emph{DataNode} tem como principal\n    responsabilidade guardar os blocos de dados correspondentes aos\n    ficheiros dos clientes, existindo tipicamente várias instâncias\n    deste componente num sistema.  O estilo arquitectural que melhor\n    descreve o padrão de interacção existente entre as várias\n    instâncias de \\emph{DataNode} é\n    \n    	\N
93	114	\N	\n    Suponha que pretende descrever como é que um cliente lê um\n    ficheiro de um sistema HDFS suportando falhas esporádicas no\n    hardware de alguns \\emph{DataNodes}, sem que isso afecte a\n    disponibilidade do sistema.  Para isso pretende usar uma vista do\n    tipo componente-e-conector, mas em que os únicos componentes são o\n    \\emph{HDFS Client} e o \\emph{DataNode}.\n\n    	\N
95	115	\N	\n    A arquitectura do sistema HDFS apenas prevê a existência de um\n    \\emph{NameNode}.  Tendo em conta as responsabilidades deste\n    componente e a actual arquitectura do HDFS, quais seriam as\n    consequências de adicionarmos a possibilidade de termos réplicas\n    de \\emph{NameNode} no sistema?\n\n    	\N
97	116	\N	\n    Suponha que está a desenvolver uma vista arquitectural onde\n    utiliza o estilo de Dados Partilhados (\\emph{Shared Data}) e que\n    um dos membros da sua equipa propõe que dois dos componentes com o\n    papel de \\emph{data accessors} comuniquem directamente entre si.\n    Na sua opinião\n\n    	\N
96	117	\N	\n    Quando se utiliza o padrão Domain Model na implementação da camada\n    de lógica de domínio de uma aplicação empresarial, é comum\n    utilizar-se também o padrão Service Layer.  O padrão Service Layer\n    é usado nestes casos para\n    \n    	\N
98	118	\N	\n    Considere o seguinte excerto da página da Wikipedia sobre testes\n    de caixa branca (\\emph{white-box testing}):\n    \\begin{quote}\n      White-box testing is a method of testing software that tests\n      internal structures or workings of an application, as opposed to\n      its functionality. In white-box testing an internal perspective\n      of the system (including the module's code), as well as\n      programming skills, are required and used to design test\n      cases. The tester chooses inputs to exercise paths through the\n      code and determine the appropriate outputs.\n    \\end{quote}\n  \n    Supondo que pertence à equipa de testes de um sistema complexo e\n    que é responsável por efectuar testes de caixa branca sobre o\n    sistema, quais das seguintes vistas da arquitectura de software do\n    sistema lhe seriam mais úteis?\n\n    	\N
100	119	\N	\n    Suponha que está a desenhar a arquitectura de software para uma\n    aplicação empresarial que tem requisitos sobre o tempo máximo que\n    o sistema deve demorar a responder a um determinado tipo de\n    pedidos por parte dos utilizadores.  Suponha ainda que a\n    frequência desses pedidos é previsível, mas que os restantes\n    pedidos ao sistema podem variar significativamente.  Finalmente,\n    suponha que o seu sistema vai ter apenas um único servidor que se\n    executará numa máquina pré-definida com um processador AMD de 12\n    cores.  Para mostrar aos \\emph{stakeholders} que o seu sistema\n    satisfaz os requisitos de desempenho terá que usar vistas de que\n    estilo arquitectural?\n\n    	\N
99	120	\N	\n    Actualmente, a arquitectura mais popular para uma aplicação\n    empresarial é constituída por 3 \\emph{tiers}.  Esses três\n    \\emph{tiers} são\n\n    	\N
122	141	\N	\n    No sistema Hadoop a utilização de um \\emph{BackupNode} em vez de\n    um \\emph{CheckpointNode}:\n\n    	\N
123	142	\N	\n    No sistema Hadoop o \\emph{CheckpointNode}, quando executa num nó\n    diferente do nó onde executa o \\emph{NameNode}, suporta:\n\n    	\N
121	143	\N	\n    Para os \\emph{stakeholders} do sistema Hadoop a solução de\n    construir um \\emph{cluster} de servidores usando muitas máquinas\n    de baixo custo foi:\n\n    	\N
125	144	\N	\n    No sistema Hadoop, durante a operação normal, o \\emph{NameNode}\n    poderia usar a táctica de \\emph{ping} para saber se os \\emph{DataNodes} estão disponíveis\n\n    	\N
124	145	\N	\n    No sistema Hadoop a possibilidade de ter várias políticas de localização de réplicas:\n\n    	\N
126	146	\N	\n    O conhecimento da estrutura de instalação no sistema Hadoop é\n    relevante para o funcionamento eficaz do sistema.  Para isso o\n    administrador pode configurar, para cada instalação do sistema, um\n    \\emph{script} que retorna a identificação do \\emph{rack} onde se\n    encontra um nó (ver secção 8.3.2).\n\n    	\N
127	147	\N	\n    A táctica de \\emph{Checkpoint/rollback} é uma táctica de\n\n    	\N
129	148	\N	\n    Uma vista onde seja utilizado o estilo Utilização e que possua uma\n    circularidade entre relações usa\n\n    	\N
130	149	\N	\n    A diferença entre a relação \\emph{usa} do estilo Utilização e a\n    relação \\emph{pode usar} do estilo Camadas\n\n    	\N
132	150	\N	\n    Um dos principais requisitos para o sistema HDFS é a garantia de\n    disponibilidade dos dados armazenados no sistema, mesmo na\n    presença de vários tipos de falhas (não simultâneas) no\n    \\emph{hardware} em que o sistema executa.  Para mostrar que o\n    sistema satisfaz este requisito\n\n    	\N
140	152	\N	\n    Suponha que está a desenhar a arquitectura de software para uma\n    aplicação empresarial que tem requisitos de segurança sobre a\n    confidencialidade de parte dos seus dados.  Para mostrar aos\n    \\emph{stakeholders} que o seu sistema satisfaz os requisitos de\n    segurança terá de usar que vistas arquitecturais?\n\n    	\N
131	153	\N	\n    No terceiro parágrafo da secção 8.3.1 descreve-se o mecanismo de\n    \\emph{buffering} usado pelo cliente de um sistema HDFS durante a\n    escrita de um ficheiro.  Suponha que quer descrever este mecanismo\n    recorrendo a uma vista arquitectural.  Como é que o faria?\n    \n    	\N
134	154	\N	\n    Suponha que está a implementar uma aplicação web e que decidiu\n    usar um sistema HDFS para armazenar os dados da sua aplicação.  Ou\n    seja, a sua aplicação web irá ser um cliente do sistema HDFS.\n    Como é que esta decisão afecta a arquitectura da sua aplicação web?\n\n    	\N
133	155	\N	\n    Considere o seguinte excerto do tutorial sobre o Hadoop MapReduce:\n\n    \\begin{quote}\n      Hadoop MapReduce is a software framework for easily writing\n      applications which process vast amounts of data (multi-terabyte\n      data-sets) in-parallel on large clusters (thousands of nodes) of\n      commodity hardware in a reliable, fault-tolerant manner.\n\n      A MapReduce job usually splits the input data-set into\n      independent chunks which are processed by the map tasks in a\n      completely parallel manner.  The framework sorts the outputs of\n      the maps, which are then input to the reduce tasks. Typically\n      both the input and the output of the job are stored in a\n      file-system.  The framework takes care of scheduling tasks,\n      monitoring them and re-executes the failed tasks.\n    \\end{quote}\n\n    Que estilo arquitectural do tipo de vista componente-e-conector\n    lhe parece mais adequado para descrever o funcionamento do\n    MapReduce, tendo em conta as suas principais vantagens na\n    resolução de um problema?\n\n    	\N
135	156	\N	\n    Tendo em conta a descrição do \\emph{CheckpointNode} feita na\n    secção 8.2.5, qual é o estilo arquitectural que melhor representa\n    a interacção existente entre os componentes \\emph{CheckpointNode}\n    e \\emph{NameNode}?\n\n    	\N
137	157	\N	\n    Qual das seguintes frases captura melhor as restrições existentes\n    relativamente a que componentes podem executar em que máquinas no\n    estilo Instalação?\n\n    	\N
136	158	\N	\n    Dois dos padrões existentes para implementar a camada de lógica de\n    domínio de uma aplicação empresarial são o Domain Model e o\n    Transaction Script.  A escolha de um ou outro\n    \n    	\N
139	159	\N	\n    Uma das evoluções no desenvolvimento de aplicações web foi a\n    criação de \\emph{mashups}, que são descritas na Wikipedia da\n    seguinte forma:\n\n    \\begin{quote}\n      In web development, a mashup is a web page or application that\n      uses and combines data, presentation or functionality from two\n      or more sources to create new services.\n    \\end{quote}\n\n    Sabendo que as fontes usadas pelos \\emph{mashups} não têm\n    conhecimento da existência dos \\emph{mashups} e mudam com\n    frequência, obrigando a alterações nos \\emph{mashups} para\n    acomodar essas mudanças, qual é a melhor arquitectura para\n    minimizar o efeito dessas alterações?\n \n    	\N
138	160	\N	\n    Com a evolução das tecnologias para o desenvolvimento de\n    aplicações web, passou a ser possível desenvolver aplicações web\n    com uma interface com o utilizador muito mais parecida com a das\n    tradicionais aplicações de \\emph{desktop}.  No entanto, para isto\n    acontecer, foi necessário que parte do código que executava no\n    servidor web passasse a ser agora executado no browser.  Como é\n    que esta mudança se manifesta ao nível da arquitectura do sistema?\n\n    	\N
181	191	\N	\n    A primeira arquitectura do sistema Fénix, correspondendo aos seus\n    primeiros anos de desenvolvimento, podia ser descrita como uma\n    arquitectura de três camadas, típica de uma aplicação empresarial.\n    Uma dessas camadas era a camada de lógica de domínio (\\emph{Domain\n      Logic}).  Qual das seguintes afirmações melhor caracteriza a\n    arquitectura do Fénix no que diz respeito a essa camada?\n    \n    	\N
182	192	\N	\n    Para colocar um produto mais rapidamente no mercado, as empresas\n    de desenvolvimento de software estão cada vez mais a usar uma\n    estratégia incremental de desenvolvimento, lançando periodicamente\n    novas versões do produto com novas funcionalidades.  Qual dos\n    estilos arquitecturais é melhor para analizar se a arquitectura de\n    software do sistema é adequada para o lançamento incremental das\n    várias versões?\n\n    	\N
183	193	\N	\n    Vários dos casos estudados na cadeira tinham requisitos de\n    escalabilidade.  Isso significa que os sistemas em causa\n    devem ser construídos de forma a\n\n    	\N
184	194	\N	\n    No estilo arquitectural \\emph{Service Oriented Architecture} é\n    comum a existência de um componente especializado, designado por\n    \\emph{Enterprise Service Bus} (ESB).  A utilização de um ESB num\n    sistema tem como objectivo\n\n    	\N
185	195	\N	\n    Para satisfazer requisitos de disponibilidade existem diferentes\n    tácticas, que podem ser aplicadas dependendo do tipo concreto de\n    requisito que pretendemos satisfazer.  Supondo que pretende\n    detectar faltas do tipo \\emph{resposta} no seu sistema, que\n    táctica é mais adequada?\n\n    	\N
186	196	\N	\n    A página que descreve a arquitectura do Chromium OS (um projecto\n    \\emph{open source} para a implementação de um novo sistema\n    operativo) começa da seguinte forma:\n    \\begin{quote}\n      Chromium OS consists of three major components: \n      \\begin{itemize}\n      \\item The Chromium-based browser and the window manager\n      \\item System-level software and user-land services: the kernel, drivers, connection manager, and so on\n      \\item Firmware \n      \\end{itemize}\n    \\end{quote}\n\n    Tendo em conta esta breve descrição da arquitectura de software do\n    Chromium OS, que estilo arquitectural lhe parece mais adequado\n    para a representar?\n\n    	\N
187	197	\N	\n    Suponha que para satisfazer um requisito de segurança relacionado\n    com a possibilidade de ataques por parte de utilizadores que\n    acedem ao seu sistema pela Internet, pretende utilizar a táctica\n    designada por \\emph{Limit Exposure}.  Como é que a utilização\n    dessa táctica se manifesta nas vistas da arquitectura do seu\n    sistema?\n\n    	\N
188	198	\N	\n    Uma das boas práticas na concepção de uma arquitectura de software\n    é a criação de um sistema esqueleto.  Qual o seu objectivo?\n\n    	\N
189	199	\N	\n    O sistema de email é composto por vários tipos de componentes que\n    desempenham diferentes funções.  Por exemplo, para enviar um\n    email, um utilizador usa um \\emph{mail user agent} (MUA), para\n    compor a sua mensagem e enviá-la.  Para enviar a mensagem,\n    tipicamente o MUA liga-se a um \\emph{mail transfer agent} (MTA),\n    que recebe a mensagem, analisa os cabeçalhos da mesma para\n    determinar os vários destinatários e, após consulta do sistema DNS\n    para determinar quais os MTA responsáveis por cada um dos\n    destinatários, liga-se aos MTAs responsáveis pelos endereços de\n    destino para entregar a mensagem.  Cada um desses MTAs recebe a\n    mensagem e armazena-a localmente ou reenvia-a para outros MTAs até\n    que a mensagem chegue ao MTA do destino.  O utilizador\n    destinatário da mensagem irá depois usar o seu MUA para ver as\n    mensagens que lhe foram enviadas.  Para isso o MUA liga-se a um\n    servidor IMAP ou POP para obter as mensagens que lhe foram\n    destinadas.  Esses servidores IMAP e POP obtêm as mensagens de um\n    utilizador consultando as mensagens armazenadas pelo MTA.\n\n    Tendo em conta esta descrição simplificada do funcionamento do\n    sistema de email, qual dos estilos arquitecturais lhe parece mais\n    adequada para representar o padrão de interacção existente entre o\n    MTA e os servidores de IMAP e POP?\n\n    	\N
190	200	\N	\n    O estilo arquitectural Aspectos (\\emph{Aspects}) foi mais\n    recentemente introduzido como um estilo do tipo de vista módulo.\n    A utilização deste estilo na arquitectura de software de um sistema\n\n    	\N
166	201	\N	\n    Qual das seguintes frases melhor caracteriza o sistema ZeroMQ\n    \n    	\N
167	202	\N	\n    No documento que descreve o ZeroMQ pode ler-se o seguinte:\n    \\begin{quote}\n      The idea was to launch one worker thread per CPU core---having\n      two threads sharing the same core would only mean a lot of\n      context switching for no particular advantage.\n    \\end{quote}\n    Qual é o estilo arquitectural mais adequado para representar esta\n    decisão de desenho?\n\n    	\N
168	203	\N	\n    No documento que descreve o ZeroMQ pode ler-se o seguinte:\n    \\begin{quote}\n      Messaging patterns form a layer (the so-called "scalability\n      layer") on top of the transport layer (TCP and friends).\n      Individual messaging patterns are implementations of this layer.\n    \\end{quote}\n    Qual é a principal vantagem da adopção desta arquitectura de\n    camadas pelo ZeroMQ?\n\n    	\N
169	204	\N	\n    O ZeroMQ usa \\emph{batching} dinâmico para controlar o desempenho\n    do sistema.  A utilização desta abordagem tem como objectivo\n\n    	\N
170	205	\N	\n    No documento que descreve o ZeroMQ pode ler-se o seguinte:\n    \\begin{quote}\n      ØMQ uses a lock-free queue in pipe objects to pass messages\n      between the user's threads and ØMQ's worker threads.  There are\n      two interesting aspects to how ØMQ uses the lock-free queue.\n      First, each queue has exactly one writer thread and exactly one\n      reader thread.  If there's a need for 1-to-N communication,\n      multiple queues are created.  Given that this way the queue\n      doesn't have to take care of synchronising the writers (there's\n      only one writer) or readers (there's only one reader) it can be\n      implemented in an extra-efficient way.\n    \\end{quote}\n    O estilo arquitectural que melhor representa o padrão de\n    interacção descrito acima é\n\n    	\N
171	206	\N	\n    O principal \\emph{architectural driver} para o sistema nginx foi\n\n    	\N
172	207	\N	\n    No documento que descreve o nginx pode ler-se o seguinte:\n    \\begin{quote}\n      Traditional process- or thread-based models of handling\n      concurrent connections involve handling each connection with a\n      separate process or thread, and blocking on network or\n      input/output operations.  nginx followed a different model.  It\n      was actually inspired by the ongoing development of advanced\n      event-based mechanisms in a variety of operating systems.  What\n      resulted is a modular, event-driven, asynchronous,\n      single-threaded, non-blocking architecture which became the\n      foundation of nginx code.\n    \\end{quote}\n    A decisão de fazer o nginx como um sistema \\emph{event-driven},\n    \\emph{asynchronous}, \\emph{single-threaded}, e \\emph{non-blocking}\n    foi porque\n\n    	\N
173	208	\N	\n    No documento que descreve o nginx pode ler-se o seguinte:\n    \\begin{quote}\n      nginx's modular architecture generally allows developers to\n      extend the set of web server features without modifying the\n      nginx core.  nginx modules come in slightly different\n      incarnations, namely core modules, event modules, phase\n      handlers, protocols, variable handlers, filters, upstreams and\n      load balancers.  [...]  Event modules provide a particular\n      OS-dependent event notification mechanism like kqueue or epoll.\n      Protocol modules allow nginx to communicate through HTTPS,\n      TLS/SSL, SMTP, POP3 and IMAP.\n    \\end{quote}\n    Que estilo arquitectural é mais adequado para representar a\n    informação acima?\n\n    	\N
175	209	\N	\n    No documento que descreve o nginx pode ler-se o seguinte:\n    \\begin{quote}\n      Traditional process- or thread-based models of handling\n      concurrent connections involve handling each connection with a\n      separate process or thread, and blocking on network or\n      input/output operations.\n    \\end{quote}\n    O estilo arquitectural que melhor descreve o modelo descrito acima\n    para o processamento de pedidos é\n\t\n    	\N
174	210	\N	\n    No documento que descreve o nginx pode ler-se o seguinte:\n    \\begin{quote}\n      While handling a variety of actions associated with accepting,\n      processing and managing network connections and content\n      retrieval, nginx uses event notification mechanisms and a number\n      of disk I/O performance enhancements in Linux, Solaris and\n      BSD-based operating systems, like kqueue, epoll, and event\n      ports.  The goal is to provide as many hints to the operating\n      system as possible, in regards to obtaining timely asynchronous\n      feedback for inbound and outbound traffic, disk operations,\n      reading from or writing to sockets, timeouts and so on.\n    \\end{quote}\n    Esta abordagem usada no desenvolvimento do nginx tem como objectivo\n\n    	\N
226	251	\N	\n    No documento que descreve o ZeroMQ pode ler-se o seguinte:\n    \\begin{quote}\n      One of the requirements for ØMQ was to take advantage of\n      multi-core boxes; in other words, to scale the throughput\n      linearly with the number of available CPU cores.\n    \\end{quote}\n    Para satisfazer este requisito, a solução adoptada pelo ZeroMQ foi\n\n    	\N
228	252	\N	\n    Sabendo que no documento que descreve o ZeroMQ se encontra a\n    seguinte afirmação:\n    \\begin{quote}\n      ØMQ is a library, not a messaging server.\n    \\end{quote}\n    Que tipo de vistas são necessárias para descrever a arquitectura\n    de software do ZeroMQ?\n\n    	\N
227	253	\N	\n    No documento que descreve o ZeroMQ pode ler-se o seguinte:\n    \\begin{quote}\n      It took us several years working on AMQP protocol [...] to\n      realise that there's something wrong with the classic\n      client/server model of smart messaging server (broker) and dumb\n      messaging clients.\n    \\end{quote}\n    Qual é o principal problema, segundo os autores, do modelo baseado\n    num \\emph{broker}?\n    \n    	\N
229	254	\N	\n    No documento que descreve o ZeroMQ pode ler-se o seguinte:\n    \\begin{quote}\n      The objects that handle data transfer are composed of two parts:\n      the session object is responsible for interacting with the ØMQ\n      socket, and the engine object is responsible for communication\n      with the network.  There's only one kind of the session object,\n      but there's a different engine type for each underlying protocol\n      ØMQ supports.  Thus, we have TCP engines, IPC engines, PGM\n      engines, etc.  The set of engines is extensible---in the future\n      we may choose to implement, say, a WebSocket engine or an SCTP\n      engine.\n    \\end{quote}\n    Supondo que o código que implementa o \\emph{session object} não\n    precisa ser modificado quando um novo tipo de \\emph{engine} é\n    adicionado ao sistema, que vistas arquitecturais são mais\n    indicadas para mostrar este aspecto de extensibilidade do sistema?\n\n    	\N
230	255	\N	\n    No documento que descreve o ZeroMQ pode ler-se o seguinte:\n    \\begin{quote}\n      In early versions of ØMQ the API was based on AMQP's model of\n      exchanges and queues.  I spent the end of 2009 rewriting it\n      almost from scratch to use the BSD Socket API instead.\n    \\end{quote}\n    Esta mudança no sistema teve como objectivo satisfazer que tipo de\n    requisitos?\n\n    	\N
231	256	\N	\n    No documento que descreve o nginx pode ler-se o seguinte:\n    \\begin{quote}\n      nginx runs several processes in memory; there is a single master\n      process and several worker processes.  There are also a couple\n      of special purpose processes, specifically a cache loader and\n      cache manager.  All processes are single-threaded in version 1.x\n      of nginx.  All processes primarily use shared-memory mechanisms\n      for inter-process communication.\n    \\end{quote}\n    Supondo que pretende dar ênfase à forma como os vários processos\n    do nginx comunicam entre si, que estilo arquitectural lhe parece\n    mais adequado para representar a informação acima?\n\n    	\N
232	257	\N	\n    Na continuação da descrição apresentada na pergunta anterior, mais\n    abaixo no documento pode ler-se o seguinte:\n    \\begin{quote}\n      Caching in nginx is implemented in the form of hierarchical data\n      storage on a filesystem.  Cache keys are configurable, and\n      different request-specific parameters can be used to control\n      what gets into the cache.  Cache keys and cache metadata are\n      stored in the shared memory segments, which the cache loader,\n      cache manager and workers can access.\n    \\end{quote}\n    Que estilo arquitectural lhe parece mais adequado para representar\n    a utilização da \\emph{cache} no nginx?\n\n    	\N
233	258	\N	\n    Tal como mencionado nas perguntas anteriores, a utilização de\n    \\emph{workers} é um dos elementos cruciais na arquitectura de\n    software do nginx.  Qual das seguintes afirmações melhor descreve\n    o funcionamento dos \\emph{workers} no nginx?\n\n    	\N
234	259	\N	\n    Uma vez que um \\emph{worker} processa vários pedidos ao longo da\n    sua vida, como é que o faz?\n\t\n    	\N
235	260	\N	\n    O principal \\emph{architectural driver} para o sistema nginx foi\n    conseguir resolver o \\emph{problema C10K}: conseguir manter 10.000\n    ligações simultâneas num único servidor a executar em\n    \\emph{hardware} convencional.  Para isso acontecer, foi preciso\n    que o nginx\n\n    	\N
221	261	\N	\n    O documento que descreve o \\ghc{} apresenta duas decisões de\n    desenho relativamente ao desenvolvimento do \\emph{Runtime System}.\n    A primeira dessas decisões é descrita da seguinte forma:\n    \\begin{quote}\n      The garbage collector is built on top of a block layer that\n      manages memory in units of blocks, where a block is a multiple\n      of 4 KB in size. The block layer has a very simple API: [...].\n      This is the only API used by the garbage collector for\n      allocating and deallocating memory.  Blocks of memory are\n      allocated with \\texttt{allocGroup} and freed with\n      \\texttt{freeGroup}.\n    \\end{quote}\n    Que estilo arquitectural lhe parece mais adequado para representar\n    esta decisão de desenho?\n\n    	\N
222	262	\N	\n    Qual foi o principal objectivo dos autores do GHC ao tomar a\n    decisão de desenho descrita na pergunta anterior?\n    \n    	\N
223	263	\N	\n    Alguns dos \\emph{architectural drivers} do \\ghc{} estão\n    relacionados com a extensibilidade do sistema, e uma das soluções\n    adoptadas pelos autores do GHC para providenciar essa\n    extensibilidade foi a introdução de \\emph{user-defined rewrite\n      rules}, descrita no documento da seguinte forma:\n    \\begin{quote}\n      The core of GHC is a long sequence of optimisation passes, each\n      of which performs some semantics-preserving transformation,\n      \\texttt{Core} into \\texttt{Core}.  But the author of a library\n      defines functions that often have some non-trivial,\n      domain-specific transformations of their own, ones that cannot\n      possibly be predicted by GHC.  So GHC allows library authors to\n      define rewrite rules that are used to rewrite the program during\n      optimisation.  In this way, programmers can, in effect, extend\n      GHC with domain-specific optimisations.\n    \\end{quote}\n    Como é que esta solução se manifesta ao nível da arquitectura do\n    sistema?\n\n    	\N
224	264	\N	\n    No documento que descreve o \\ghc{} pode ler-se o seguinte:\n    \\begin{quote}\n      As the popularity of the Haskell language has grown, there has\n      been an increasing need for tools and infrastructure that\n      understand Haskell source code, and GHC of course contains a lot\n      of the functionality necessary for building these tools: a\n      Haskell parser, abstract syntax, type checker and so on.  With\n      this in mind, we made a simple change to GHC: rather than\n      building GHC as a monolithic program, we build GHC as a library,\n      that is then linked with a small Main module to make the GHC\n      executable itself, but also shipped in library form so that\n      users can call it from their own programs.  At the same time we\n      built an API to expose GHC's functionality to clients.\n    \\end{quote}\n    Supondo que quer apresentar um diagrama arquitectural para\n    representar a descrição apresentada acima, qual lhe parece mais\n    adequado?\n    \n    	\N
225	265	\N	\n    No documento que descreve o \\ghc{} pode ler-se o seguinte:\n    \\begin{quote}\n      Once the \\texttt{Core} program has been optimised, the process\n      of code generation begins.  The code generator first converts\n      the \\texttt{Core} into a language called \\texttt{STG}, which is\n      essentially just \\texttt{Core} annotated with more information\n      required by the code generator.  Then, \\texttt{STG} is\n      translated to \\texttt{Cmm}, a low-level imperative language with\n      an explicit stack.  From here, the code takes one of three\n      routes:\n      \\begin{itemize}\n      \\item Native code generation: [...]\n      \\item LLVM code generation: [...]\n      \\item C code generation: [...]\n      \\end{itemize}\n    \\end{quote}\n    Ou seja, o GHC pode usar um de três geradores de código\n    alternativos, que têm qualidades diferentes (omitidas no excerto\n    apresentado acima).  Supondo que quer apresentar um diagrama\n    arquitectural para representar a descrição apresentada acima, qual\n    lhe parece mais adequado?\n\n    	\N
236	266	\N	\n    Considere a figura 1.8 no documento que descreve a utilização de\n    caches em serviços web (em anexo).  Nessa figura, aparece um\n    rectângulo com a designação \\emph{Cache} dentro de um rectângulo\n    designado \\emph{Request Node}.  Tendo em conta a descrição feita\n    no texto e o objectivo dessa figura, esses rectângulos\n    correspondem a que tipo de elementos de software na arquitectura\n    de software apresentada?\n\n    	\N
237	267	\N	\n    Considere a alteração na arquitectura introduzida com a passagem\n    da figura 1.9 para a figura 1.10 no documento que descreve a\n    utilização de caches em serviços web (em anexo).  Essa alteração\n    tem como objectivo e consequência, respectivamente\n\n    	\N
238	268	\N	\n    Considere o parágrafo assinalado com o número 1 no documento que\n    descreve a utilização de caches em serviços web (em anexo), onde\n    se introduz o conceito de \\emph{distributed cache}.  Que estilo\n    arquitectural melhor representa o padrão de interacção existente\n    entre os vários \\emph{request nodes}?\n    \n    	\N
239	269	\N	\n    Considere o parágrafo assinalado com o número 2 no documento que\n    descreve a utilização de caches em serviços web (em anexo), onde\n    se fala sobre a falha de um dos nós da \\emph{cache} distribuída.\n    Quando isso acontece, que consequências existem para o serviço\n    web?\n\n    	\N
242	270	\N	\n    Considere a seguinte descrição do \\emph{Memcached}, que é uma\n    adaptação do que aparece no seu Wiki:\n    \\begin{quote}\n      Memcached is an in-memory key-value store for small chunks of\n      arbitrary data from results of database calls, API calls, or\n      page rendering.  It is made up of:\n      \\begin{itemize}\n      \\item Client software, which is given a list of available memcached servers.\n      \\item A client-based hashing algorithm, which chooses a server\n        based on the "key" input.\n      \\item Server software, which stores your values with their keys\n        into an internal hash table.\n      \\item Server algorithms, which determine when to throw out old\n        data (if out of memory), or reuse memory.\n      \\end{itemize}\n    \\end{quote}\n    Suponha que pretendia apresentar uma vista arquitectural para o\n    \\emph{Memcached} que represente a informação acima.  Que vista é\n    mais adequada?\n\n    	\N
240	271	\N	\n    Uma das principais mudanças introduzidas na arquitectura do\n    sistema Fénix, relativamente à sua primeira arquitectura foi\n    \n    	\N
241	272	\N	\n    Vários dos casos estudados na cadeira tinham requisitos de\n    desempenho.  Que vistas arquitecturais são normalmente necessárias\n    para mostrar a satisfação desses requisitos?\n\n    	\N
243	273	\N	\n    Suponha que está a desenvolver uma arquitectura de software para\n    um novo sistema de grandes dimensões e que no desenvolvimento se\n    pretende recorrer extensivamente a empresas subcontratadas para o\n    desenvolvimento de várias partes do sistema.  Que estilos\n    arquitecturais são mais úteis para planear o desenvolvimento do\n    sistema neste cenário?\n\n    	\N
244	274	\N	\n    A utilização do estilo arquitectural Aspectos (\\emph{Aspects})\n    promove a modificabilidade de um sistema porque\n\n    	\N
245	275	\N	\n    Suponha que está a desenvolver a arquitectura de software de um\n    novo sistema para uma organização que tem várias unidades\n    organizacionais, cada uma das quais com os seus sistemas de\n    informação, que foram desenvolvidos independentemente uns dos\n    outros ao longo de vários anos e dependendo das necessidades\n    particulares de cada unidade.  O seu sistema tem como objectivo\n    integrar os vários sistemas existentes, providenciando desta forma\n    não só uma visão consolidada do funcionamento da organização, mas\n    também permitir a criação de novos processos dentro da organização\n    que envolvam mais do que uma unidade.  Que estilo arquitectural\n    lhe parece mais adequado para desenhar o seu sistema?\n    \n    	\N
250	276	\N	\n    O sistema de email é composto por vários tipos de componentes que\n    desempenham diferentes funções.  Por exemplo, para enviar um\n    email, um utilizador usa um \\emph{mail user agent} (MUA), para\n    compor a sua mensagem e enviá-la.  Para enviar a mensagem,\n    tipicamente o MUA liga-se a um \\emph{mail transfer agent} (MTA),\n    que recebe a mensagem, analisa os cabeçalhos da mesma para\n    determinar os vários destinatários e, após consulta do sistema DNS\n    para determinar quais os MTA responsáveis por cada um dos\n    destinatários, liga-se aos MTAs responsáveis pelos endereços de\n    destino para entregar a mensagem.  Cada um desses MTAs recebe a\n    mensagem e armazena-a localmente ou reenvia-a para outros MTAs até\n    que a mensagem chegue ao MTA do destino.  O utilizador\n    destinatário da mensagem irá depois usar o seu MUA para ver as\n    mensagens que lhe foram enviadas.  Para isso o MUA liga-se a um\n    servidor IMAP ou POP para obter as mensagens que lhe foram\n    destinadas.  Esses servidores IMAP e POP obtêm as mensagens de um\n    utilizador consultando as mensagens armazenadas pelo MTA.\n\n    Tendo em conta esta descrição simplificada do funcionamento do\n    sistema de email, qual dos estilos arquitecturais lhe parece mais\n    adequada para representar o padrão de interacção existente entre o\n    MUA e o MTA?\n\n    	\N
246	277	\N	\n    Suponha que para satisfazer um requisito de disponibilidade\n    relacionado com a existência de faltas ao nível da infraestrutura\n    de rede usada pelo seu sistema, pretende utilizar a táctica\n    designada por \\emph{Ping/Echo}.  Como é que a utilização dessa\n    táctica se manifesta nas vistas da arquitectura do seu sistema?\n\n    	\N
247	278	\N	\n    Suponha que está a desenvolver uma aplicação web que mantém numa\n    base de dados alguma informação introduzida pelos utilizadores, e\n    que um dos requisitos é que essa informação seja mantida\n    confidencial, não podendo ser vista por ninguém para além do\n    utilizador que a produziu (e que deve poder aceder a essa\n    informação novamente sempre que quiser).  Como é que satisfazia\n    este requisito?\n\n    	\N
248	279	\N	\n    As aplicações web têm sofrido várias evoluções ao longo dos\n    últimos anos.  Uma dessas evoluções foi o enriquecimento da sua\n    interface com o utilizador, que tira partida de novas tecnologias\n    existentes nos \\emph{browsers}, como, por exemplo, o Javascript,\n    para providenciar uma experiência de utilização mais rica.  Quais\n    foram as consequências mais visíveis desta evolução na típica\n    arquitectura de software de uma aplicação web?\n\n    	\N
249	280	\N	\n    Um dos termos frequentemente utilizado para descrever a\n    arquitectura de software de um sistema é o termo \\emph{tier},\n    sendo comum, por exemplo, falar-se em sistemas \\emph{multi-tier}.\n    Tendo em conta os vários tipos de elementos de software que\n    compõem uma arquitectura de software, um \\emph{tier} é \n\n    	\N
301	311	\N	\n\t  Os estilos arquiteturais Instalação (\\emph{Install}) e Implementação (\\emph{Implementation})\n\t      \n      	\N
302	312	\N	\n\t  As qualidades arquiteturalmente significativas da segunda arquitetura do sistema Fénix são\n\t      \n      	\N
284	313	\N	\n\t  Quais são as principais qualidades do sistema \\mw{}?\n    \n    	\N
285	314	\N	\n\t  Os estilos arquiteturais que melhor descrevem o sistema \\mw{} do ponto de vista do utilizador final são\n    \n    	\N
286	315	\N	\n\t  O sistema \\mw{} procura manter um critério de fiabilidade segundo o qual as alterações efetuadas por um escritor são consistentemente visualizadas nas suas subsequentes leituras\n    \n    	\N
287	316	\N	\n\t  O sistema \\mw{} procura assegurar um critério de fiabilidade segundo o qual a informação escrita há mais de 30 segundos está disponível para leitura para todos os leitores, para se alcançar este critério o distribuidor de carga  \n    \n    	\N
288	317	\N	\n\t  Na descrição do sistema \\mw{} indica-se que:\n\t  \\newline\n\t  \n\t  \\emph{To optimize the delivery of JavaScript and CSS assets, the ResourceLoader module was developed to optimize delivery of JS and CSS. Started in 2009, it was completed in 2011 and has been a core feature of MediaWiki since version 1.17. ResourceLoader works by loading JS and CSS assets on demand, thus reducing loading and parsing time when features are unused, for example by older browsers. It also minifies the code, groups resources to save requests, and can embed images as data URIs.}\n\t  \\newline\n\t  \n\t  O \\emph{ResourceLoader} implementa uma tática de \n    \n    	\N
304	318	\N	\n\t  O padrão Unidade de Trabalho (\\emph{Unit of Work}) pode ser implementado no servidor aplicacional, enquanto que no repositório continua a ser necessário usar transações para aceder aos dados. Neste caso\n\t      \n      	\N
305	319	\N	\n\t  A qualidade da disponibilidade pode ser suportada pela tática de votação de forma a identificar faltas de \n\t      \n      	\N
289	320	\N	\n\t  No \\ch{}, para se atingir a qualidade da segurança, o processo \\emph{Browser} implementa uma tática de\n    \n    	\N
290	321	\N	\n\t  No \\ch{} pode-se associar um processo \\emph{Renderer} a cada \\emph{Tab}, o que resulta no aumento do desempenho através de uma tática de \n    \n    	\N
291	322	\N	\n\t  \n\t  Na descrição do caso \\ch{} pode-se ler:\n\t  \\newline\n\t  \n\t  \\emph{On Android devices, Chrome leverages the same multi-process architecture as the desktop version - there is a browser process, and one or more renderer processes. The one difference is that due to memory constraints of the mobile device, Chrome may not be able to run a dedicated renderer for each open tab. Instead, Chrome determines the optimal number of renderer processes based on available memory, and other constraints of the device, and shares the renderer process between the multiple tabs.} \n\t  \\newline\n\t  \n\t  A descrição acima pode ser representada numa vista do tipo Componente-e-Conetor utilizando o estilo arquitetural\t  \n\t  \n    	\N
292	323	\N	\n\t  Uma vantagem do \\ch{} relativamente ao Amazon Silk está relacionada com \n\t      \n    	\N
293	324	\N	\n\t  Uma das qualidades do \\ch{} é executar o código JavaScript dentro de um processo, permitindo isolar possíveis interferências entre a execução de JavaScripts com diferentes origens. O grau de isolamento\n\t      \n    	\N
294	325	\N	\n\t  Na descrição do caso \\ch{} pode-se ler:\n\t  \\newline\n\t  \n\t  \\emph{Typing in the Omnibox (URL) bar triggers high-likelihood suggestions, which may similarly kick off a DNS lookup, TCP pre-connect, and even prerender the page in a hidden tab.} \n\t  \\newline\n\t  \n\t  A descrição acima refere\n\t      \n    	\N
306	326	\N	\n\t  Nos casos em que a fonte dos ataques é interna à organização as táticas mais eficazes são\n\t      \n      	\N
307	327	\N	\n\t  O detalhe em que se aplica o estilo arquitetural Modelo de Dados pode ser ao nível conceptual, lógico ou físico.\n\t  \n      	\N
281	328	\N	\n    No sistema \\gp{} as \\emph{receiver} e as \\emph{writer threads} suportam a escrita assíncrona de métricas de forma a otimizar os acessos a disco. A interação entre estes dois componentes segue o estilo arquitetural\n\n    	\N
282	329	\N	\n    No sistema \\gp{} o componente \\emph{carbon-relay} implementa uma tática de\n\n    	\N
283	330	\N	\n    Que qualidade, ou qualidades, do sistema \\gp{} é(são) expressa(s) na frase: \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL.}\n\n    	\N
309	331	\N	\n\t  Algumas qualidades de usabilidade não são arquiteturais pois\n\t  \n      	\N
310	332	\N	\n\t  Num sistema \\emph{world-wide}, como o Facebook ou o Amazon\n\t  \n      	\N
295	333	\N	\n\t  Na descrição do \\gm{} indica-se que:\n  \\newline\n  \n  \\emph{In Mailman 2, the MailList object's state is stored in a file called config.pck, which is just the pickled representation of the MailList object's dictionary. Every Python object has an attribute dictionary called \\_\\_dict\\_\\_. So saving a mailing list object then is simply a matter of pickling its \\_\\_dict\\_\\_ to a file, and loading it just involves reading the pickle from the file and reconstituting its \\_\\_dict\\_\\_.}\n  \\newline\n\t  \n\t  Esta solução, não obstante simples, trouxe diversos problemas pois a qualidade do desempenho é penalizada devido:\n\t  \n\t      \n    	\N
296	334	\N	\n\t  Na descrição do \\gm{} indica-se que:\n  \\newline\n  \n  \\emph{Mailman 3 has adopted the Representational State Transfer (REST) model for external administrative control. REST is based on HTTP, and Mailman's default object representation is JSON. These protocols are ubiquitous and well-supported in a large variety of programming languages and environments, making it fairly easy to integrate Mailman with third party systems. REST was the perfect fit for Mailman 3, and now much of its functionality is exposed through a REST API.}\n  \\newline\n\t  \n\t  Esta solução permitiu:\n\t      \n    	\N
297	335	\N	\n\t  Na descrição do \\gm{} indica-se que:\n  \\newline\n  \n  \\emph{Once a message has made its way through the chains and rules and is accepted for posting, the message must be further processed before it can be delivered to the final recipients. For example, some headers may get added or deleted, and some messages may get some extra decorations that provide important disclaimers or information, such as how to leave the mailing list.}\n  \\newline\n\t  \n\t  Em que o estilo arquitetural Canais-e-Filtros é usado no tratamento das mensagens. Neste contexto o tipo de dados que é passado entre os filtros é\n\t      \n    	\N
298	336	\N	\n\t  Na descrição do \\gm{} propõe-se uma solução para garantir que nas situações em que vários \\emph{queue runners} executam sobre a mesma \\emph{queue} a entrega de mensagens é feita por ordem de chegada.\n  \\newline\n  \n  \\emph{There's another side effect of this algorithm that did cause problems during the early design of this system. Despite the unpredictability of email delivery in general, the best user experience is provided by processing the queue files in FIFO order, so that replies to a mailing list get sent out in roughly chronological order.}\n\t      \n    	\N
308	339	\N	\n\t  No estilo arquitetural Publicação-Subscrição os componentes, do ponto de vista da facilidade de modificação dos módulos que executam\n\t  \n      	\N
303	340	\N	\n\t  A elasticidade de um sistema, entendida como a capacidade do sistema se adaptar com facilidade a alterações de carga, é muitas vezes apresentada como uma característica necessária para a qualidade da escalabilidade. Para o grau dessa facilidade de adaptação contribuem soluções arquiteturais associadas\n\t      \n      	\N
344	371	\N	\n\t  O desenho da arquitetura do sistema \\mw{} foi condicionado por uma restrição associada à necessidade de ter uma solução de baixo custo. Para isso foi tomada a decisão arquitetural de\n    \n    	\N
345	372	\N	\n\t  Considere uma vista arquitetural do tipo Componente-e-Conetor do sistema \\mw{} em que todos os clientes estão ligados a um servidor através de um conetor de pedido-resposta que suporta as qualidades de disponibilidade e desempenho. Este conetor implementa uma tática de \n    \n    	\N
346	373	\N	\n\t  O critério de fiabilidade do sistema \\mw{}, segundo o qual as alterações efetuadas por um escritor são consistentemente preservadas nas suas subsequentes leituras, é implementado \n    \n    	\N
347	374	\N	\n\t  O sistema \\mw{} procura assegurar um critério de fiabilidade segundo o qual a informação escrita há mais de 30 segundos deverá estar disponível para leitura para todos os leitores. Para se alcançar este critério é implementada uma tática de  \n    \n    	\N
348	375	\N	\n\t  Na descrição do sistema \\mw{} indica-se que:\n\t  \\newline\n\t  \n\t  \\emph{The first revision of the blob is stored in full, and following revisions to the same page are stored as diffs relative to the previous revision; the blobs are then gzipped. Because the revisions are grouped per page, they tend to be similar, so the diffs are relatively small and gzip works well. The compression ratio achieved on Wikimedia sites nears 98\\%.}\n\t  \\newline\n\t  \n\t  A transcrição refere uma tática de \n    \n    	\N
363	376	\N	\n\t  A internacionalização da interface utilizador é suportada pela(s) tática(s)\n\t      \n      	\N
364	377	\N	\n\t  Para se poder implementar o padrão Mapa de Identidades (\\emph{Identity Map}) \n\t      \n      	\N
341	378	\N	\n    No sistema \\gp{} o componente \\emph{carbon} fornece aos componentes \\emph{webapp} uma interface de acesso aos \\emph{buffers} com o objetivo de melhorar a(s) qualidade(s) de\n\n    	\N
342	379	\N	\n    Uma vista arquitetural de mais alto nível do tipo Componente-e-Conetor do sistema \\gp{} pode ser desenhada usando apenas o(s) estilo(s) arquitetural(ais)\n\n    	\N
299	420	\N	\n\t  A função do componente \\emph{Master Runner} do \\gm{} pode ser representada usando o estilo arquitetural\n\t      \n    	\N
300	419	\N	\n\t  No Mailman 3 as mensagens continuam a ser guardadas persistentemente usando \\emph{pickle} pois\n\t      \n    	\N
343	380	\N	\n    O componente \\emph{Composer UI} do sistema \\gp{}, descrito como - \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL} - para ser eficaz necessita de mostrar ao utilizador as alterações que efetua ao gráfico de modo a que este obtenha retorno imediato sobre o resultado de cada uma das alterações que acaba de fazer. Para isso o sistema deve implementar táticas de\n\n    	\N
365	381	\N	\n\t  Na programação defensiva o programador verifica se todos as condições em que os módulos são invocados estão de acordo com a sua especificação, devendo, caso contrário, lançar uma exceção por forma a evitar a propagação da falta. Quando a programação defensiva é aplicada no contexto da qualidade da disponibilidade está-se a usar uma tática de\n\t      \n      	\N
366	382	\N	\n\t  No padrão de desenho Observador, em que o modelo invoca um método de notificação nos seus observadores sempre que sofre alterações, pode-se afirmar em termos da relação de Usa do estilo arquitetural Utilização que\n\t      \n      	\N
367	383	\N	\n\t  Considere os estilos arquiteturais Utilização e Camadas.\n\t  \n      	\N
355	384	\N	\n\t  Na descrição do \\gm{} indica-se que:\n  \\newline\n  \n  \\emph{Mailman 3 has adopted the Representational State Transfer (REST) model for external administrative control. REST is based on HTTP, and Mailman's default object representation is JSON. These protocols are ubiquitous and well-supported in a large variety of programming languages and environments, making it fairly easy to integrate Mailman with third party systems. REST was the perfect fit for Mailman 3, and now much of its functionality is exposed through a REST API.}\n  \\newline\n\t  \n\t  Esta solução permitiu aumentar a qualidade da interoperabilidade pois \n\t      \n    	\N
356	385	\N	\n\t  Na descrição do \\gm{} indica-se que:\n  \\newline\n  \n  \\emph{Once a message has made its way through the chains and rules and is accepted for posting, the message must be further processed before it can be delivered to the final recipients. For example, some headers may get added or deleted, and some messages may get some extra decorations that provide important disclaimers or information, such as how to leave the mailing list.}\n  \\newline\n\t  \n\t  O estilo arquitetural que se adequa a um processamento flexível das mensagens é\n\t      \n    	\N
357	386	\N	\n\t  Na descrição do \\gm{} indica-se que:\n  \\newline\n  \n  \\emph{Email messages can act as containers for other types of data, as defined in the various MIME standards. A container message part can encode an image, some audio, or just about any type of binary or text data, including other container parts.}\n  \\newline\n\t  \n\t  O estilo arquitetural que mais se adequa à representação da transcrição acima é\n\t      \n    	\N
358	387	\N	\n\t  Na descrição do \\gm{} indica-se que:\n  \\newline\n  \n  \\emph{...Mailman supports running more than one runner process per queue directory...}\n  \\newline\n  \n  Com o objetivo de assegurar\n\t      \n    	\N
359	388	\N	\n\t  Na descrição do \\gm{} indica-se que:\n  \\newline\n  \n  \\emph{VERP stands for Variable Envelope Return Path, and it is a well-known technique that mailing lists use to unambiguously determine bouncing recipient addresses. When an address on a mailing list is no longer active, the recipient's mail server will send a notification back to the sender. In the case of a mailing list, you want this bounce to go back to the mailing list, not to the original author of the message; the author can't do anything about the bounce, and worse, sending the bounce back to the author can leak information about who is subscribed to the mailing list. When the mailing list gets the bounce, however, it can do something useful, such as disable the bouncing address or remove it from the list's membership.}\n  \\newline\n  \n  Esta transcrição descreve qualidade(s) de\n\t      \n    	\N
360	389	\N	\n\t  Na descrição do \\gm{} indica-se que:\n  \\newline\n  \n  \\emph{There is a core Mailman class called Switchboard which provides an interface for enqueuing (i.e., writing) and dequeuing (i.e., reading) the message object tree and metadata dictionary to files in a specific queue directory. Every queue directory has at least one switchboard instance, and every queue runner instance has exactly one switchboard.}\n  \\newline\n  \n  Esta transcrição contém informação útil para vistas do tipo\n\t      \n      	\N
368	390	\N	\n\t  Uma vista arquitetural\n\t  \n      	\N
369	391	\N	\n\t  O estilo arquitetural Utilização\n\t  \n      	\N
350	393	\N	\n\t  Na descrição do caso \\ch{} pode-se ler:\n\t  \\newline\n\t  \n\t  \\emph{Chrome maintains a single instance of the resource dispatcher, which is shared across all render processes, and runs within the browser kernel process.}\n\t  \\newline\n\t  \n\t  O \\emph{Resource Dispatcher} contribui para aumentar a qualidade do desempenho pois implementa uma tática de\n\t      \n    	\N
351	394	\N	\n\t  Uma vantagem do Amazon Silk relativamente ao \\ch{} está relacionada com \n\t      \n    	\N
352	395	\N	\n\t  Uma vista arquitetural do tipo Componente-e-Conetor que descreva as interações dentro do componente \\emph{Renderer Process} do \\ch{} utiliza um estilo arquitetural\n\t      \n    	\N
361	398	\N	\n\t  Os requisitos arquiteturalmente significativos da terceira arquitetura do sistema Fénix são\n\t      \n      	\N
362	399	\N	\n\t  Na primeira arquitetura do sistema Fénix era frequente os programadores esquecerem-se de reservar (\\emph{lock}) um objeto no contexto de uma transação. Uma solução para esta situação pode ser arquiteturalmente descrita usando uma vista com o estilo arquitetural\n\t      \n      	\N
370	400	\N	\n\t  Num sistema \\emph{enterprise-wide}, como o sistema Fénix,\n\t  \n      	\N
349	409	\N	\n\t  O \\ch{}, tal como descrito no caso estudado durante o semestre, foi desenhado para suportar as seguintes qualidades arquiteturais:\n    \n    	\N
392	409	\N	\n\t  O \\ch{}, tal como descrito no caso estudado durante o semestre, foi desenhado para suportar as seguintes qualidades arquiteturais:\n    \n    	\N
451	464	\N	\n\tConsider the architectural views for the ThousandParsec system. In the case description can be read:\n\t\n\t\\begin{quote}\n\t\tThe Requirements function verifies that each component added to the design conforms to the rules of other previously added components.\n\t\\end{quote}\n\t\n\tThe following diagram depicts a fragment of a proposal for the decomposition view of the system.\n\t\n\t\\centering\n\t\\includegraphics[width=100mm]{x-ThousandParsec-ruleset}\n\n    	\N
354	412	\N	\n\t  Na descrição do caso \\ch{} pode-se ler:\n\t  \\newline\n\t  \n\t  \\emph{Typing in the Omnibox (URL) bar triggers high-likelihood suggestions, which may similarly kick off a DNS lookup, TCP pre-connect, and even prerender the page in a hidden tab.} \n\t  \\newline\n\t  \n\t  A descrição acima refere qualidades de\n\t      \n    	\N
439	467	\N	\n\tIn the description of the SocialCalc case study can be read:\n\t\n\t\\begin{quote}\n\t\tAs the user scrolls the spreadsheet through our custom-drawn scroll bars, we dynamically update the innerHTML of the pre-drawn \\textsc{<td>} elements. This means we don't need to create or destroy any \\textsc{<tr>} or \\textsc{<td>} elements in many common cases, which greatly speeds up response time.\n\t\\end{quote} \n\t\n\tThis corresponds to the application of\n\n    	\N
440	468	\N	\n\tIn the description of the Thousand Parsec case study can be read:\n\t\n\t\\begin{quote}\n\t\tA ruleset designer thus has the ability to create new object types or store additional information in the existing object types as required by the ruleset, allowing for virtually unlimited extensibility in terms of the available physical objects in the game.\n\t\\end{quote} \n\t\n\tThis excerpt can be represented as a modifiability scenario where\n\n    	\N
441	469	\N	\n\tIn the description of the Git case study can be read:\n\t\n\t\\begin{quote}\n\t\tGit tackles the storage space problem by packing objects in a compressed format, using an index file which points to offsets to locate specific objects in the corresponding packed file.\n\t\\end{quote}\n\t\n\tThe tactic addressed in this fragments is:\n\t\n    	\N
445	470	\N	\n  Assume that one of the requirements for a graphical chess game is\n  that it should be able to run both in Microsoft's Windows and\n  Apple's Mac OS X operating systems.  A good solution for this system\n  would:\n\n  	\N
447	472	\N	\n  A requirement for a chess game is that it keeps a table with the best scores obtained in the game.\n  Naturally, this information should be kept between two different\n  executions of the system.  Assuming that the game is a web-based application, then\n\n  	\N
448	473	\N	\n  An email client such as Mozilla's Thunderbird or Microsoft's Outlook\n  allows a user both to read the emails that were sent to him and to\n  send new emails to other people.  To do that, the email client\n  connects to other components (one or more): some of these components\n  keep the user's mailboxes with all the emails that were sent to him,\n  whereas other components know how to forward the emails sent by the\n  user to their final destinations (associated with a new set of destinations).  In either case, it is always the\n  email client that makes a request to the other components, but\n  whereas in the first case the email client receives all the\n  information about the user's emails, in the second case only a\n  success or failure error code is returned.  The architectural\n  patterns that best describe the interactions between the components from the client to the final destinations\n\n  	\N
432	475	\N	\n\tFrank Buschmann, \\emph{Introducing the Pragmatic Architect}, defines the \\emph{techno-geeks} architects. This kind of architect\n\t\n    	\N
436	477	\N	\n\tConsider the following scenario\n\t\n\t\\begin{quote}\n\t\tOur vehicle information system send our current location to the traffic monitoring system. The traffic monitoring system combines our location with other information, overlays this information on a Google Map, and broadcasts it. Our location information is correctly included with a probability of 99.99\\%.\n\t\\end{quote}\n\t\n    	\N
452	479	\N	\n\tConsider the architectural views for the SocialCalc system. In the case description can be read:\n\t\n\t\\begin{quote}\n\t\tThe save format is in standard MIME multipart/mixed format, consisting of four text/plain; charset=UTF-8 parts, each part containing newline-delimited text with colon-delimited data fields. The parts are...\n\t\t\n\t\tThis format is designed to be human-readable, as well as being relatively easy to generate programmatically. This makes it possible for Drupal's Sheetnode plugin to use PHP to convert between this format and other popular spreadsheet formats, such as Excel (.xls) and OpenDocument (.ods).\n\t\\end{quote}\n\t\n\tFrom the above excerpt can be inferred the need to have\n\t\n    	\N
453	480	\N	\n\tThe architectural style that best represents the runtime execution of a system Git installed for a small group of developers is\n\t\t\t\n    	\N
454	481	\N	\n  In the OrderPad system they have decided to use a Row Data Gateway data access pattern because\n \n  	\N
455	482	\N	\n  Consider the architectural views of EtherCalc system. In the case study description can be read\n  \n  \\begin{quote}\n\t  The Socialtext platform has both behind-the-firewall and on-the-cloud deployment options, imposing unique constraints on EtherCalc's resource and performance requirements.\n  \\end{quote} \n \n  	\N
456	483	\N	\n  In EtherCalc initial prototype clients send their local commands and snapshots to the server, which result on redundant information on the server about the state of the spreadsheet. This redundancy is an application of\n \n  	\N
457	484	\N	\n  In EtherCalc initial prototype clients send their local commands, cursor movements and snapshots to the server.\n \n  	\N
458	485	\N	\n  In the EtherCalc case description can be read\n \n  \\begin{quote}\n\t  The in-browser SocialCalc engine is written in JavaScript. We considered translating that logic into Perl, but that would have carried the steep cost of maintaining two code bases. \n  \\end{quote} \n  \n  The excerpt is referring to a quality of\n \n  	\N
433	486	\N	\n\tFrank Buschmann states that:\n\t\t\n\t\\begin{quote}\n\t\tFeaturitis is the tendency to trade functional coverage for quality - the more functions the earlier they're delivered, the better.\n\t\\end{quote}\n\t\n\tIn the OrderPad system the architect regretted not getting performance tests going earlier. The OrderPad system\n\n    	\N
442	488	\N	\n  The architectural significant requirements are important in the process of creating\n  the software architecture for a system because they define\n \n  	\N
435	1134	\N	\n  Which of the following phrases best describe the relationship\n  between modules and components?\n\n  	\N
434	1393	\N	\n  The software architecture of a system\n\n  	\N
443	1528	\N	\n  Consider that a chess game should\n  provide an automatic and intelligent chess player, and that to\n  implement that player we will use some of the many chess engines\n  already available in the market.  Moreover, the system should allow\n  the user to choose which engine to use for each new game.  Given\n  these requirements, which of the architectural styles from the\n  module viewtype are best suited to satisfy them?\n \n  	\N
431	1425	\N	\n  The software architecture of a system\n\n    	\N
519	522	\N	\n  Compared to the Transaction Script pattern, the Domain Logic pattern\n  has a higher initial cost of adoption.  That is, it is harder to\n  start with the Domain Logic pattern than with the Transaction Script\n  pattern.  The reason for this is that the Domain Logic pattern\n\n  	\N
520	523	\N	\n  Ruby on Rails is a popular full-stack framework for building web\n  applications.  One of the elements of this framework is the\n  \\textbf{model}, which is described in the Rails documentation in the\n  following way:\n  \\begin{quote}\n    A model represents the information (data) of the application and\n    the rules to manipulate that data. In the case of Rails, models\n    are primarily used for managing the rules of interaction with a\n    corresponding database table. In most cases, one table in your\n    database will correspond to one model in your application. The\n    bulk of your application's business logic will be concentrated in\n    the models.\n  \\end{quote}\n  Given this description, the Rails' model is best described as an\n  instance of\n \n  	\N
497	525	\N	\n\tPing-and-echo and Heartbeat are two availability tactics to detect faults.\n\n    	\N
498	526	\N	\n\tConsider that when designing the architecture of a web application, the architect intends to guarantee of the confidentiality of persistent data in face of an attack from a system administrator.\n\n    	\N
499	527	\N	\n\tIn the description of the SocialCalc case study can be read:\n\t\n\t\\begin{quote}\n\t\tA simple improvement is for each client to broadcast its cursor position to other users, so everyone can see which cells are being worked on.\n\t\\end{quote}\n\t\n\tThis sentence describes a tactic for usability which is\n\n    	\N
500	528	\N	\n\tIn the description of the ThousandParsec case study can be read:\n\t\n\t\\begin{quote}\n\t\tThe Thousand Parsec Component Language (TPCL) exists to allow clients to create designs locally without server interaction - allowing for instant feedback about the properties, makeup, and validity of the designs. \n\t\\end{quote}\n\t\n\tFrom this sentence can be written\n\n    	\N
501	529	\N	\n\tIn the description of GitHub case study can be read\n\t\n\t\\begin{quote}\n\t\tOnce the Smoke proxy has determined the user's route, it establishes a transparent proxy to the proper file server. We have four pairs of fileservers. Their names are fs1a, fs1b, ..., fs4a, fs4b. These are 8 core, 16GB RAM bare metal servers, each with six 300GB 15K RPM SAS drives arranged in RAID 10. At any given time one server in each pair is active and the other is waiting to take over should there be a fatal failure in the master. All repository data is constantly replicated from the master to the slave via DRBD.\n\t\\end{quote}\n\t\n\tIn this description we can find the application of tactics like \n\n  	\N
503	530	\N	\n\tViews of the module viewtype can be used to support requirements traceability analysis, determine how the functional requirements of a system are supported. This is represented by\n\t\n    	\N
491	531	\N	\n  Assuming that you were asked to document the software architecture\n  of an existing (and already developed) system, the best thing for\n  you to do would be\n\n  	\N
492	532	\N	\n  Ralph Johnson says that\n  \n  \\begin{quote}\n\t  Architecture is the decisions that you wish you could get right early in a project.\n  \\end{quote}\n  \n  This sentence reflects the fact that\n\n  	\N
493	533	\N	\n\tMarquardt characterizes performitis as:\n\t\n\t\\begin{quote}\n\t\tEach part of the system is directly influenced by local performance tuning measures. There is no global performance strategy, or it ignores other qualities of the system such as testability and maintainability.\n\t\\end{quote}\n\t\n\tThis means that\n\n  	\N
494	534	\N	\n\tThe software architecture of a system is usually represented through several views because we need to\n\n  	\N
502	535	\N	\n  According to the attribute-driven design process, we should design\n  the software architecture for a system based on a selected list of\n  requirements, which are called the \\textit{architecturally significant requirements}.\n  These architecturally significant requirements should be sorted according to their\n  importance for the system's stakeholders because\n \n    	\N
495	536	\N	\n  On the web page of Memcached can be read:\n  \n  \\begin{quote}\n\t  ..., high-performance, distributed memory object caching system, generic in nature, but intended for use in speeding up dynamic web applications by alleviating database load.\n  \\end{quote}\n  \n  According to this information, Memcached is\n\n  	\N
504	537	\N	\n\tYou have to develop an application that collects news from different web sources and process that information to present a digest to the application users. The different sources provide similar information through different interfaces (APIs). Additionally, the new sources may change the interfaces, for instance to enhance their service. Which architectural style can be used to represent this requirements?\n\t\n    	\N
505	538	\N	\n  When designing the architecture for a system the architect realises that most of the modules have bidirectional uses relationships. This has impact on\n\n    	\N
515	539	\N	\n\tIn the description of EtherCalc case study can be read\n\t\n\t\\begin{quote}\n\t\tBecause all jsdom code runs in a single thread, subsequent REST API calls are blocked until the previous command's rendering completes. Under high concurrency, this queue eventually triggered a latent bug that ultimately resulted in server lock-up.\n\t\\end{quote}\t\n\t\n\tThe above sentence is related to a quality for\n\n  	\N
516	540	\N	\n\tIn the description of EtherCalc case study can be read\n\t\n\t\\begin{quote}\n\t\tSo, we removed jsdom from the RenderSheet function, re-implemented a minimal DOM in 20 lines of LiveScript for HTML export, then ran the profiler again. Much better! We have improved throughput by a factor of 4, HTML exporting is 20 times faster, and the lock-up problem is gone.\n\t\\end{quote}\t\n\t\n\tThe above sentence describes a\n\n  	\N
517	541	\N	\n\tIn the description of EtherCalc case study can be read how the architect tried to increase the performance in a multi-core context\n\t\n\t\\begin{quote}\n\tIs there a way to make use of all those spare CPUs in the multi-tenant server?\n\n\tFor other Node.js services running on multi-core hosts, we utilized a pre-forking cluster server that creates a process for each CPU.\n\t\n\t\tHowever, while EtherCalc does support multi-server scaling with Redis, the interplay of Socket.io clustering with RedisStore in a single server would have massively complicated the logic, making debugging much more difficult.\n\t\\end{quote}\t\n\t\n\tThis possible solution has impact on the\n\n  	\N
496	1394	\N	\n  As part of the process of creating an architecture, we talked about\n  a framework for capturing some of the requirements for a system.  In\n  this context, \\textbf{concrete scenarios} are used for\n\n  	\N
518	543	\N	\n\tIn the description of EtherCalc case study can be read how the architect increased the performance in a multi-core context\n\t\n\t\\begin{quote}\n\tInstead of pre-forking a fixed number of processes, we sought a way to create one background thread for each server-side spreadsheet, thereby distributing the work of command execution among all CPU cores.\n\t\\end{quote}\t\n\t\n\tWhich is represented by the diagram\n\t\\newline\n\t\n\t\\centering\n\t\\includegraphics[width=120mm]{x-EtherCalc-multi-tenant}\n\t\n\t\\begin{flushleft}\n\t\tThe above diagram, describing a server spreadsheet, can be represented using \n\t\\end{flushleft}\n\n  	\N
507	544	\N	\n\tTo increase the availability of a web application it is possible to use a load-balancer between the clients and the servers that detects server failures and transparently redirects the requests to the servers that are functioning properly. To represent this architecture\n\n    	\N
508	545	\N	\n  One way to increase the performance of a 3-tier enterprise\n  application (with the standard separation in the web client, web\n  server, and database tiers) is to replicate the web server tier and\n  to add a load-balancer between the web clients and the web servers.\n  Unfortunately, for some enterprise applications that option is not\n  enough (or does not work at all), because\n\n    	\N
510	547	\N	\n  In the software architecture of a system, the Deployment view is\n  best suited for\n\n    	\N
511	548	\N	\n  In the description of ThousandParsec case study can be read\n  \n  \\begin{quote}\n\t  The flagship server, \\textsc{tpserver-cpp}, provides an abstract persistence interface and a modular plugin system to allow for various database back ends. \n  \\end{quote}\n  \n\tThis above sentence can be diagrammatically represented using\n\t  \n    	\N
512	549	\N	\n  Consider the (partial) component-and-connector view for the \\textsc{:SpreasdSheet} component of the SocialCalc system\n  \n\t\\centering\n\t\\includegraphics[width=70mm]{x-SocialCalc-spreadsheet-component}\n\t\n    \\begin{flushleft}\n  \t  The \\textsc{sub1} port\n    \\end{flushleft}\n\n    	\N
513	550	\N	\n\tIn the description of GitHub case study can be read\n\t\n\t\\begin{quote}\n\t\tFor requests to the main website, the load balancer ships your request off to one of the four frontend machines. Each of these is an 8 core, 16GB RAM bare metal server. Their names are fe1, ..., fe4. Nginx accepts the connection and sends it to a Unix domain socket upon which sixteen Unicorn worker processes are selecting. One of these workers grabs the request and runs the Rails code necessary to fulfill it.\n\t\\end{quote}\n\t\n\tTo represent the above description it is necessary to use\t\n\n  	\N
566	576	\N	\n\tMartin Fowler, \\emph{Who Needs and Architect?}, cites Ralph Johnson sentence:\n\t\n\t\\begin{quote}\n\t\tIn most successful software projects, the expert developers working on that project have a shared understanding of the system design. This shared understanding is called architecture.\n\t\\end{quote}\n\t\t\t\n    	\N
574	576	\N	\n\tMartin Fowler, \\emph{Who Needs and Architect?}, cites Ralph Johnson sentence:\n\t\n\t\\begin{quote}\n\t\tIn most successful software projects, the expert developers working on that project have a shared understanding of the system design. This shared understanding is called architecture.\n\t\\end{quote}\n\t\t\t\n    	\N
559	579	\N	\n\tOn the course slides you can find the following definition of architecture:\n\t\n\t\\begin{quote}\n\t\tThe software architecture of a program or computing system is the structure or structures of the system, which comprise software elements, the externally visible properties of those elements, and the relationships among them.\n\t\\end{quote}\n\t\n\tHowever, in the book you can find another definition:\n\t\n\t\\begin{quote}\n\t\tThe software architecture of a system is the set of structures needed to reason about the system, which comprise the software elements, relations among them, and the properties of both.\n\t\\end{quote}\n\n    	\N
551	580	\N	\n\tFrank Buschmann states that:\n\t\t\n\t\\begin{quote}\n\t\tFeaturitis is the tendency to trade functional coverage for quality - the more functions the earlier they're delivered, the better.\n\t\\end{quote}\n\n    	\N
509	1520	\N	\n  Typically, Instant Messaging clients have a window to list the contacts of the user, and\n  show in that window the status of each contact (whether it is available, unavailable, busy,\n  etc). Given that the status of a contact may be changed at any time, and that the contact's\n  status is given by the Instant Messaging application of that contact, which architectural\n  style represents best the interaction pattern between these components?\n\n    	\N
555	1085	\N	\n\tFrank Buschmann cites the characterization Marquardt does of Performitis:\n\t\t\n\t\\begin{quote}\n\t\tEach part of the system is directly influenced by local performance tuning measures. There is no global performance strategy, or it ignores other qualities of the system as testability and maintainability.\n\t\\end{quote}\n\t\n\tFrom this problem you can conclude that:\n\n    	\N
572	1085	\N	\n\tFrank Buschmann cites the characterization Marquardt does of Performitis:\n\t\t\n\t\\begin{quote}\n\t\tEach part of the system is directly influenced by local performance tuning measures. There is no global performance strategy, or it ignores other qualities of the system as testability and maintainability.\n\t\\end{quote}\n\t\n\tFrom this problem you can conclude that:\n\n    	\N
616	1637	\N	\n\tA voting tactic can be used to\n\n    	\N
615	774	\N	\n\tA heartbeat monitor\n\n    	\N
573	579	\N	\n\tOn the course slides you can find the following definition of architecture:\n\t\n\t\\begin{quote}\n\t\tThe software architecture of a program or computing system is the structure or structures of the system, which comprise software elements, the externally visible properties of those elements, and the relationships among them.\n\t\\end{quote}\n\t\n\tHowever, in the book you can find another definition:\n\t\n\t\\begin{quote}\n\t\tThe software architecture of a system is the set of structures needed to reason about the system, which comprise the software elements, relations among them, and the properties of both.\n\t\\end{quote}\n\n    	\N
571	580	\N	\n\tFrank Buschmann states that:\n\t\t\n\t\\begin{quote}\n\t\tFeaturitis is the tendency to trade functional coverage for quality - the more functions the earlier they're delivered, the better.\n\t\\end{quote}\n\n    	\N
604	1668	\N	\n\tThe quality(ies) that is(are) more relevant to views of the component-and-connector viewtype is(are):\n\t\t\n    	\N
568	588	\N	\n\tFrank Buschmann, \\emph{Introducing the Pragmatic Architect}, defines the \\emph{architecture astronauts}. This kind of architect\n\t\n    	\N
585	588	\N	\n\tFrank Buschmann, \\emph{Introducing the Pragmatic Architect}, defines the \\emph{architecture astronauts}. This kind of architect\n\t\n    	\N
556	589	\N	\n\tIn his article, \\emph{Featuritis, Performitis, and Other Deseases}, Frank Buschmann claims that:\n\n    	\N
582	589	\N	\n\tIn his article, \\emph{Featuritis, Performitis, and Other Deseases}, Frank Buschmann claims that:\n\n    	\N
553	590	\N	\n\tFrank Buschmann states that:\n\t\n\t\\begin{quote}\n\t\tOverly flexible systems are hard to configure, and when they're finally configured, they lack qualities like performance or security.\n\t\\end{quote}\n\n    	\N
581	590	\N	\n\tFrank Buschmann states that:\n\t\n\t\\begin{quote}\n\t\tOverly flexible systems are hard to configure, and when they're finally configured, they lack qualities like performance or security.\n\t\\end{quote}\n\n    	\N
567	596	\N	\n\tFrank Buschmann, \\emph{Introducing the Pragmatic Architect}, defines the \\emph{architecture dwarves}. These kind of architects\n\t\n    	\N
595	596	\N	\n\tFrank Buschmann, \\emph{Introducing the Pragmatic Architect}, defines the \\emph{architecture dwarves}. These kind of architects\n\t\n    	\N
561	597	\N	\n\tIn the Java documentation you can find:\n\t\n\\begin{quote}\n\\texttt{public abstract class Component} \\\\*\n\\texttt{extends Object} \\\\*\n\\texttt{implements ImageObserver, MenuContainer, Serializable}\n\\end{quote}\n\n\tClass \\texttt{Component} is:\n\n    	\N
593	597	\N	\n\tIn the Java documentation you can find:\n\t\n\\begin{quote}\n\\texttt{public abstract class Component} \\\\*\n\\texttt{extends Object} \\\\*\n\\texttt{implements ImageObserver, MenuContainer, Serializable}\n\\end{quote}\n\n\tClass \\texttt{Component} is:\n\n    	\N
552	598	\N	\n\tFrank Buschmann states that:\n\t\n\t\\begin{quote}\n\t\tThere's only one escape from such situations: architects must actively break the cycle of mutual misunderstanding and mistrust!\n\t\\end{quote}\n\n    	\N
591	598	\N	\n\tFrank Buschmann states that:\n\t\n\t\\begin{quote}\n\t\tThere's only one escape from such situations: architects must actively break the cycle of mutual misunderstanding and mistrust!\n\t\\end{quote}\n\n    	\N
565	1437	\N	\n\tIn his article, \\emph{Who Needs and Architect?}, Martin Fowler cites Ralph Johnson definition:\n\t\n\t\\begin{quote}\n\t\tArchitecture is the set of decisions that must be made early in a project.\n\t\\end{quote}\n\t\n\tIn his opinion:\n\t\t\n    	\N
557	600	\N	\n\tThe \\emph{Walking Skeleton} referred in Frank Buschmann's article, \\emph{Featuritis, Performitis, and Other Deseases}:\n\n    	\N
592	600	\N	\n\tThe \\emph{Walking Skeleton} referred in Frank Buschmann's article, \\emph{Featuritis, Performitis, and Other Deseases}:\n\n    	\N
605	606	\N	\n\tThe \\emph{Ensuring that the implementation conforms to the architecture} step of how to create an architecture\n\t\n    	\N
558	608	\N	\n\tIn his article \\emph{On Hammers and Nails, and Falling in Love with Technology and Design} what is the main type of influence on the architecture?\n\n    	\N
602	608	\N	\n\tIn his article \\emph{On Hammers and Nails, and Falling in Love with Technology and Design} what is the main type of influence on the architecture?\n\n    	\N
601	610	\N	\n\tFrank Buschmann states that:\n\t\n\t\\begin{quote}\n\t\tArchitects use flexibility as a cover for uncertainty.\n\t\\end{quote}\n\n    	\N
560	1152	\N	\n\tIn wikipedia you can find the following fragment of a definition:\n\t\n\t\\begin{quote}\n\t\tAn individual software component is a software package, or a module that encapsulates a set of related functions.\n\t\\end{quote}\n\t\n\tAccording to the definitions taught in the course the above \\emph{individual software component} corresponds to:\n\n    	\N
583	1152	\N	\n\tIn wikipedia you can find the following fragment of a definition:\n\t\n\t\\begin{quote}\n\t\tAn individual software component is a software package, or a module that encapsulates a set of related functions.\n\t\\end{quote}\n\t\n\tAccording to the definitions taught in the course the above \\emph{individual software component} corresponds to:\n\n    	\N
584	1437	\N	\n\tIn his article, \\emph{Who Needs and Architect?}, Martin Fowler cites Ralph Johnson definition:\n\t\n\t\\begin{quote}\n\t\tArchitecture is the set of decisions that must be made early in a project.\n\t\\end{quote}\n\t\n\tIn his opinion:\n\t\t\n    	\N
563	1355	\N	\n\tThe quality that is more relevant to views of the module viewtype is:\n\t\t\n    	\N
594	1355	\N	\n\tThe quality that is more relevant to views of the module viewtype is:\n\t\t\n    	\N
603	1405	\N	\n\tWhen designing an architecture requirements can be split into functional, quality attributes, and constraints. Functional requirements have impact on:\n\t\t\n    	\N
612	772	\N	\n\tIn a quality scenario\n\n    	\N
622	780	\N	\n\tTo reduce the backend load (writes) the Graphite system uses\n\t\n    	\N
627	785	\N	\n\tIn the Chrome system the use of a process per tab results form the application of a tactic of\n\t\n    	\N
647	785	\N	\n\tIn the Chrome system the use of a process per tab results form the application of a tactic of\n\t\n    	\N
617	789	\N	\n\tConsider a enterprise web system, which provides services both on the company's intranet and to the company's clients on the internet, that when under a denial of service attack decides to stop providing internet services.\n\n    	\N
637	789	\N	\n\tConsider a enterprise web system, which provides services both on the company's intranet and to the company's clients on the internet, that when under a denial of service attack decides to stop providing internet services.\n\n    	\N
636	1637	\N	\n\tA voting tactic can be used to\n\n    	\N
630	790	\N	\n\tIn the description of the Chrome system can be read\n\t\n\t\\begin{quote}\n\t\tAs the user types, the Omnibox automatically proposes an action, which is either a URL based on your navigation history, or a search query.\n\t\\end{quote}\n\t\n\tThe above sentence refers to\n\t\n    	\N
650	790	\N	\n\tIn the description of the Chrome system can be read\n\t\n\t\\begin{quote}\n\t\tAs the user types, the Omnibox automatically proposes an action, which is either a URL based on your navigation history, or a search query.\n\t\\end{quote}\n\t\n\tThe above sentence refers to\n\t\n    	\N
670	790	\N	\n\tIn the description of the Chrome system can be read\n\t\n\t\\begin{quote}\n\t\tAs the user types, the Omnibox automatically proposes an action, which is either a URL based on your navigation history, or a search query.\n\t\\end{quote}\n\t\n\tThe above sentence refers to\n\t\n    	\N
611	771	\N	\n\tConsider the following scenario\n\t\n\t\\begin{quote}\n\t\tWhen writing to the database the system receives an exception about a write failure. The system should stop interacting with data base and write a log message. \n\t\\end{quote}\n\t\n\tThe quality addressed by this scenario is\n\n    	\N
631	771	\N	\n\tConsider the following scenario\n\t\n\t\\begin{quote}\n\t\tWhen writing to the database the system receives an exception about a write failure. The system should stop interacting with data base and write a log message. \n\t\\end{quote}\n\t\n\tThe quality addressed by this scenario is\n\n    	\N
661	771	\N	\n\tConsider the following scenario\n\t\n\t\\begin{quote}\n\t\tWhen writing to the database the system receives an exception about a write failure. The system should stop interacting with data base and write a log message. \n\t\\end{quote}\n\t\n\tThe quality addressed by this scenario is\n\n    	\N
632	772	\N	\n\tIn a quality scenario\n\n    	\N
651	772	\N	\n\tIn a quality scenario\n\n    	\N
629	776	\N	\n\tIn the description of the Chrome system can be read\n\t\n\t\\begin{quote}\n\t\tThe goal of the predictor is to evaluate the likelihood of its success, and then to trigger the activity if resources are available. \n\t\\end{quote}\n\t\n\tThe above sentence refer to\n\t\n    	\N
649	776	\N	\n\tIn the description of the Chrome system can be read\n\t\n\t\\begin{quote}\n\t\tThe goal of the predictor is to evaluate the likelihood of its success, and then to trigger the activity if resources are available. \n\t\\end{quote}\n\t\n\tThe above sentence refer to\n\t\n    	\N
669	776	\N	\n\tIn the description of the Chrome system can be read\n\t\n\t\\begin{quote}\n\t\tThe goal of the predictor is to evaluate the likelihood of its success, and then to trigger the activity if resources are available. \n\t\\end{quote}\n\t\n\tThe above sentence refer to\n\t\n    	\N
648	786	\N	\n\tIn the Chrome system the following tactic is used to improve performance\n\t\n    	\N
613	788	\N	\n\tAn architectural tactic\n\n    	\N
633	788	\N	\n\tAn architectural tactic\n\n    	\N
634	773	\N	\n\tConsider the following scenario\n\t\n\t\\begin{quote}\n\t\tOur vehicle information system send our current location to the traffic monitoring system. The traffic monitoring system combines our location with other information, overlays this information on a Google Map, and broadcasts it. Our location information is correctly included with a probability of 99.99\\%.\n\t\\end{quote}\n\t\n\tThe quality addressed by this scenario is\n\n    	\N
653	773	\N	\n\tConsider the following scenario\n\t\n\t\\begin{quote}\n\t\tOur vehicle information system send our current location to the traffic monitoring system. The traffic monitoring system combines our location with other information, overlays this information on a Google Map, and broadcasts it. Our location information is correctly included with a probability of 99.99\\%.\n\t\\end{quote}\n\t\n\tThe quality addressed by this scenario is\n\n    	\N
674	773	\N	\n\tConsider the following scenario\n\t\n\t\\begin{quote}\n\t\tOur vehicle information system send our current location to the traffic monitoring system. The traffic monitoring system combines our location with other information, overlays this information on a Google Map, and broadcasts it. Our location information is correctly included with a probability of 99.99\\%.\n\t\\end{quote}\n\t\n\tThe quality addressed by this scenario is\n\n    	\N
623	781	\N	\n\tHaving a single point of access to an intranet is a security tactic of\n\t\n    	\N
643	781	\N	\n\tHaving a single point of access to an intranet is a security tactic of\n\t\n    	\N
683	781	\N	\n\tHaving a single point of access to an intranet is a security tactic of\n\t\n    	\N
708	772	\N	\n\tIn a quality scenario\n\n    	\N
614	773	\N	\n\tConsider the following scenario\n\t\n\t\\begin{quote}\n\t\tOur vehicle information system send our current location to the traffic monitoring system. The traffic monitoring system combines our location with other information, overlays this information on a Google Map, and broadcasts it. Our location information is correctly included with a probability of 99.99\\%.\n\t\\end{quote}\n\t\n\tThe quality addressed by this scenario is\n\n    	\N
719	778	\N	\n\tHuman-editable URL API for creating graphs is a usability design tactic used in the Graphite system. This tactic\n\n    	\N
791	1523	\N	\n\tIn the context of the FenixEdu case study, the business case was to\n\n    	\N
624	782	\N	\n\tIn the Fenix system a checksum is associated to a set of grades. This is an application of the tactic\n\t\n    	\N
644	782	\N	\n\tIn the Fenix system a checksum is associated to a set of grades. This is an application of the tactic\n\t\n    	\N
684	782	\N	\n\tIn the Fenix system a checksum is associated to a set of grades. This is an application of the tactic\n\t\n    	\N
800	814	\N	\n\tIn the description of the SocialCalc case study can be read:\n\t\n\t\\begin{quote}\n\t\tEven with race conditions resolved, it is still suboptimal to accidentally overwrite the cell another user is currently editing. A simple improvement is for each client to broadcast its cursor position to other users, so everyone can see which cells are being worked on.\n\t\\end{quote} \n\t\n\tFrom this fragment can be identified a scenario for\n\n    	\N
869	874	\N	\n\tConsider a view of the module viewtype where there is a uses loop, a cycle of uses dependences between several modules. It may be possible to break the dependence cycle by\n\t\n\n    	\N
854	875	\N	\n\tAn architect is decomposing a system into a set of responsibilities using a view of the Decomposition style. However, she had already to backtrack several times and try new decompositions because she end up with some responsibility that can not be within a single module.\n\t\n    	\N
870	875	\N	\n\tAn architect is decomposing a system into a set of responsibilities using a view of the Decomposition style. However, she had already to backtrack several times and try new decompositions because she end up with some responsibility that can not be within a single module.\n\t\n    	\N
857	876	\N	\n\tIn the description of the GitHub case study can be read:\n\t\n\t\\begin{quote}\n\t\tOf course, allowing arbitrary execution of commands is unsafe, so SSH includes the ability to restrict what commands can be executed. In a very simple case, you can restrict execution to git-shell which is included with Git. All this script does is check the command that you're trying to execute and ensure that it's one of git upload-pack, git receive-pack, or git upload-archive.\n\t\\end{quote}\n\t\n\tThe tactic addressed in this fragments is:\n\t\n    	\N
871	876	\N	\n\tIn the description of the GitHub case study can be read:\n\t\n\t\\begin{quote}\n\t\tOf course, allowing arbitrary execution of commands is unsafe, so SSH includes the ability to restrict what commands can be executed. In a very simple case, you can restrict execution to git-shell which is included with Git. All this script does is check the command that you're trying to execute and ensure that it's one of git upload-pack, git receive-pack, or git upload-archive.\n\t\\end{quote}\n\t\n\tThe tactic addressed in this fragments is:\n\t\n    	\N
862	877	\N	\n\tA connector may be attached to components of different types because\n\t\t\n    	\N
872	877	\N	\n\tA connector may be attached to components of different types because\n\t\t\n    	\N
866	878	\N	\n\tThe repository architectural style provides performance because\n\n    	\N
873	878	\N	\n\tThe repository architectural style provides performance because\n\n    	\N
619	778	\N	\n\tHuman-editable URL API for creating graphs is a usability design tactic used in the Graphite system. This tactic\n\n    	\N
639	778	\N	\n\tHuman-editable URL API for creating graphs is a usability design tactic used in the Graphite system. This tactic\n\n    	\N
679	778	\N	\n\tHuman-editable URL API for creating graphs is a usability design tactic used in the Graphite system. This tactic\n\n    	\N
702	782	\N	\n\tIn the Fenix system a checksum is associated to a set of grades. This is an application of the tactic\n\t\n    	\N
626	784	\N	\n\tIn a system where there are sensitive data an appropriate tactic to be used is\n\t\n    	\N
646	784	\N	\n\tIn a system where there are sensitive data an appropriate tactic to be used is\n\t\n    	\N
686	784	\N	\n\tIn a system where there are sensitive data an appropriate tactic to be used is\n\t\n    	\N
726	784	\N	\n\tIn a system where there are sensitive data an appropriate tactic to be used is\n\t\n    	\N
766	784	\N	\n\tIn a system where there are sensitive data an appropriate tactic to be used is\n\t\n    	\N
652	788	\N	\n\tAn architectural tactic\n\n    	\N
710	790	\N	\n\tIn the description of the Chrome system can be read\n\t\n\t\\begin{quote}\n\t\tAs the user types, the Omnibox automatically proposes an action, which is either a URL based on your navigation history, or a search query.\n\t\\end{quote}\n\t\n\tThe above sentence refers to\n\t\n    	\N
730	790	\N	\n\tIn the description of the Chrome system can be read\n\t\n\t\\begin{quote}\n\t\tAs the user types, the Omnibox automatically proposes an action, which is either a URL based on your navigation history, or a search query.\n\t\\end{quote}\n\t\n\tThe above sentence refers to\n\t\n    	\N
620	1178	\N	\n\tIn the Graphite system description can be read:\n\t\n\t\\begin{quote}\n\t\tWe've got 600,000 metrics that update every minute and we're assuming our storage can only keep up with 60,000 write operations per minute. This means we will have approximately 10 minutes worth of data sitting in carbon's queues at any given time. To a user this means that the graphs they request from the Graphite webapp will be missing the most recent 10 minutes of data.\n\t\\end{quote}\n\n    	\N
640	1178	\N	\n\tIn the Graphite system description can be read:\n\t\n\t\\begin{quote}\n\t\tWe've got 600,000 metrics that update every minute and we're assuming our storage can only keep up with 60,000 write operations per minute. This means we will have approximately 10 minutes worth of data sitting in carbon's queues at any given time. To a user this means that the graphs they request from the Graphite webapp will be missing the most recent 10 minutes of data.\n\t\\end{quote}\n\n    	\N
680	1178	\N	\n\tIn the Graphite system description can be read:\n\t\n\t\\begin{quote}\n\t\tWe've got 600,000 metrics that update every minute and we're assuming our storage can only keep up with 60,000 write operations per minute. This means we will have approximately 10 minutes worth of data sitting in carbon's queues at any given time. To a user this means that the graphs they request from the Graphite webapp will be missing the most recent 10 minutes of data.\n\t\\end{quote}\n\n    	\N
747	773	\N	\n\tConsider the following scenario\n\t\n\t\\begin{quote}\n\t\tOur vehicle information system send our current location to the traffic monitoring system. The traffic monitoring system combines our location with other information, overlays this information on a Google Map, and broadcasts it. Our location information is correctly included with a probability of 99.99\\%.\n\t\\end{quote}\n\t\n\tThe quality addressed by this scenario is\n\n    	\N
635	774	\N	\n\tA heartbeat monitor\n\n    	\N
664	774	\N	\n\tA heartbeat monitor\n\n    	\N
675	774	\N	\n\tA heartbeat monitor\n\n    	\N
715	774	\N	\n\tA heartbeat monitor\n\n    	\N
618	777	\N	\n\tIn wikipedia you can find the following definition:\n\t\n\t\\begin{quote}\n\t\tThe garbage collector, or just collector, attempts to reclaim garbage, or memory occupied by objects that are no longer in use by the program.\n\t\\end{quote}\n\t\n\tThe garbage collector is a component that implements an availability tactic of\n\n    	\N
638	777	\N	\n\tIn wikipedia you can find the following definition:\n\t\n\t\\begin{quote}\n\t\tThe garbage collector, or just collector, attempts to reclaim garbage, or memory occupied by objects that are no longer in use by the program.\n\t\\end{quote}\n\t\n\tThe garbage collector is a component that implements an availability tactic of\n\n    	\N
678	777	\N	\n\tIn wikipedia you can find the following definition:\n\t\n\t\\begin{quote}\n\t\tThe garbage collector, or just collector, attempts to reclaim garbage, or memory occupied by objects that are no longer in use by the program.\n\t\\end{quote}\n\t\n\tThe garbage collector is a component that implements an availability tactic of\n\n    	\N
718	777	\N	\n\tIn wikipedia you can find the following definition:\n\t\n\t\\begin{quote}\n\t\tThe garbage collector, or just collector, attempts to reclaim garbage, or memory occupied by objects that are no longer in use by the program.\n\t\\end{quote}\n\t\n\tThe garbage collector is a component that implements an availability tactic of\n\n    	\N
739	777	\N	\n\tIn wikipedia you can find the following definition:\n\t\n\t\\begin{quote}\n\t\tThe garbage collector, or just collector, attempts to reclaim garbage, or memory occupied by objects that are no longer in use by the program.\n\t\\end{quote}\n\t\n\tThe garbage collector is a component that implements an availability tactic of\n\n    	\N
713	788	\N	\n\tAn architectural tactic\n\n    	\N
677	789	\N	\n\tConsider a enterprise web system, which provides services both on the company's intranet and to the company's clients on the internet, that when under a denial of service attack decides to stop providing internet services.\n\n    	\N
717	789	\N	\n\tConsider a enterprise web system, which provides services both on the company's intranet and to the company's clients on the internet, that when under a denial of service attack decides to stop providing internet services.\n\n    	\N
716	1637	\N	\n\tA voting tactic can be used to\n\n    	\N
671	771	\N	\n\tConsider the following scenario\n\t\n\t\\begin{quote}\n\t\tWhen writing to the database the system receives an exception about a write failure. The system should stop interacting with data base and write a log message. \n\t\\end{quote}\n\t\n\tThe quality addressed by this scenario is\n\n    	\N
711	771	\N	\n\tConsider the following scenario\n\t\n\t\\begin{quote}\n\t\tWhen writing to the database the system receives an exception about a write failure. The system should stop interacting with data base and write a log message. \n\t\\end{quote}\n\t\n\tThe quality addressed by this scenario is\n\n    	\N
751	771	\N	\n\tConsider the following scenario\n\t\n\t\\begin{quote}\n\t\tWhen writing to the database the system receives an exception about a write failure. The system should stop interacting with data base and write a log message. \n\t\\end{quote}\n\t\n\tThe quality addressed by this scenario is\n\n    	\N
712	772	\N	\n\tIn a quality scenario\n\n    	\N
732	772	\N	\n\tIn a quality scenario\n\n    	\N
709	776	\N	\n\tIn the description of the Chrome system can be read\n\t\n\t\\begin{quote}\n\t\tThe goal of the predictor is to evaluate the likelihood of its success, and then to trigger the activity if resources are available. \n\t\\end{quote}\n\t\n\tThe above sentence refer to\n\t\n    	\N
750	776	\N	\n\tIn the description of the Chrome system can be read\n\t\n\t\\begin{quote}\n\t\tThe goal of the predictor is to evaluate the likelihood of its success, and then to trigger the activity if resources are available. \n\t\\end{quote}\n\t\n\tThe above sentence refer to\n\t\n    	\N
758	777	\N	\n\tIn wikipedia you can find the following definition:\n\t\n\t\\begin{quote}\n\t\tThe garbage collector, or just collector, attempts to reclaim garbage, or memory occupied by objects that are no longer in use by the program.\n\t\\end{quote}\n\t\n\tThe garbage collector is a component that implements an availability tactic of\n\n    	\N
642	780	\N	\n\tTo reduce the backend load (writes) the Graphite system uses\n\t\n    	\N
682	780	\N	\n\tTo reduce the backend load (writes) the Graphite system uses\n\t\n    	\N
762	780	\N	\n\tTo reduce the backend load (writes) the Graphite system uses\n\t\n    	\N
701	781	\N	\n\tHaving a single point of access to an intranet is a security tactic of\n\t\n    	\N
763	781	\N	\n\tHaving a single point of access to an intranet is a security tactic of\n\t\n    	\N
764	782	\N	\n\tIn the Fenix system a checksum is associated to a set of grades. This is an application of the tactic\n\t\n    	\N
625	783	\N	\n\tIn a system where the source of attacks can be internal, from authorized users, the appropriate tactics to be used are\n\t\n    	\N
645	783	\N	\n\tIn a system where the source of attacks can be internal, from authorized users, the appropriate tactics to be used are\n\t\n    	\N
685	783	\N	\n\tIn a system where the source of attacks can be internal, from authorized users, the appropriate tactics to be used are\n\t\n    	\N
703	783	\N	\n\tIn a system where the source of attacks can be internal, from authorized users, the appropriate tactics to be used are\n\t\n    	\N
765	783	\N	\n\tIn a system where the source of attacks can be internal, from authorized users, the appropriate tactics to be used are\n\t\n    	\N
621	787	\N	\n\tIn the Graphite system description can be read:\n\t\n\t\\begin{quote}\n\t\tMaking multiple Graphite servers appear to be a single system from a user perspective isn't terribly difficult, at least for a naive implementation.\n\t\\end{quote}\n\n    	\N
641	787	\N	\n\tIn the Graphite system description can be read:\n\t\n\t\\begin{quote}\n\t\tMaking multiple Graphite servers appear to be a single system from a user perspective isn't terribly difficult, at least for a naive implementation.\n\t\\end{quote}\n\n    	\N
681	787	\N	\n\tIn the Graphite system description can be read:\n\t\n\t\\begin{quote}\n\t\tMaking multiple Graphite servers appear to be a single system from a user perspective isn't terribly difficult, at least for a naive implementation.\n\t\\end{quote}\n\n    	\N
699	787	\N	\n\tIn the Graphite system description can be read:\n\t\n\t\\begin{quote}\n\t\tMaking multiple Graphite servers appear to be a single system from a user perspective isn't terribly difficult, at least for a naive implementation.\n\t\\end{quote}\n\n    	\N
721	787	\N	\n\tIn the Graphite system description can be read:\n\t\n\t\\begin{quote}\n\t\tMaking multiple Graphite servers appear to be a single system from a user perspective isn't terribly difficult, at least for a naive implementation.\n\t\\end{quote}\n\n    	\N
720	1178	\N	\n\tIn the Graphite system description can be read:\n\t\n\t\\begin{quote}\n\t\tWe've got 600,000 metrics that update every minute and we're assuming our storage can only keep up with 60,000 write operations per minute. This means we will have approximately 10 minutes worth of data sitting in carbon's queues at any given time. To a user this means that the graphs they request from the Graphite webapp will be missing the most recent 10 minutes of data.\n\t\\end{quote}\n\n    	\N
760	1178	\N	\n\tIn the Graphite system description can be read:\n\t\n\t\\begin{quote}\n\t\tWe've got 600,000 metrics that update every minute and we're assuming our storage can only keep up with 60,000 write operations per minute. This means we will have approximately 10 minutes worth of data sitting in carbon's queues at any given time. To a user this means that the graphs they request from the Graphite webapp will be missing the most recent 10 minutes of data.\n\t\\end{quote}\n\n    	\N
811	814	\N	\n\tIn the description of the SocialCalc case study can be read:\n\t\n\t\\begin{quote}\n\t\tEven with race conditions resolved, it is still suboptimal to accidentally overwrite the cell another user is currently editing. A simple improvement is for each client to broadcast its cursor position to other users, so everyone can see which cells are being worked on.\n\t\\end{quote} \n\t\n\tFrom this fragment can be identified a scenario for\n\n    	\N
804	815	\N	\n\tIn the description of the Thousand Parsec case study can be read:\n\t\n\t\\begin{quote}\n\t\tFinding a public Thousand Parsec server to play on is much like locating a lone stealth scout in deep space - a daunting prospect if one doesn't know where to look. Fortunately, public servers can announce themselves to a metaserver, whose location, as a central hub, should ideally be well-known to players.\n\t\\end{quote} \n\t\n\tFrom this fragment can be identified a scenario for\n\n    	\N
812	815	\N	\n\tIn the description of the Thousand Parsec case study can be read:\n\t\n\t\\begin{quote}\n\t\tFinding a public Thousand Parsec server to play on is much like locating a lone stealth scout in deep space - a daunting prospect if one doesn't know where to look. Fortunately, public servers can announce themselves to a metaserver, whose location, as a central hub, should ideally be well-known to players.\n\t\\end{quote} \n\t\n\tFrom this fragment can be identified a scenario for\n\n    	\N
802	824	\N	\n\tIn the description of the SocialCalc case study can be read:\n\t\n\t\\begin{quote}\n\t\tTo make this work across browsers and operating systems, we use the Web::Hippie4 framework, a high-level abstraction of JSON-over-WebSocket with convenient jQuery bindings.\n\t\\end{quote} \n\t\n\tFrom this fragment can be identified a scenario for\n\n    	\N
821	824	\N	\n\tIn the description of the SocialCalc case study can be read:\n\t\n\t\\begin{quote}\n\t\tTo make this work across browsers and operating systems, we use the Web::Hippie4 framework, a high-level abstraction of JSON-over-WebSocket with convenient jQuery bindings.\n\t\\end{quote} \n\t\n\tFrom this fragment can be identified a scenario for\n\n    	\N
806	825	\N	\n\tIn the description of the Thousand Parsec case study can be read:\n\t\n\t\\begin{quote}\n\t\tNext, the player is prompted to configure options for the ruleset and server, with sane defaults pulled from the metadata. Finally, if any compatible AI clients are installed, the player is prompted to configure one or more of them to play against.\n\t\\end{quote} \n\t\n\tThe tactic referred in the fragments is\n\n    	\N
822	825	\N	\n\tIn the description of the Thousand Parsec case study can be read:\n\t\n\t\\begin{quote}\n\t\tNext, the player is prompted to configure options for the ruleset and server, with sane defaults pulled from the metadata. Finally, if any compatible AI clients are installed, the player is prompted to configure one or more of them to play against.\n\t\\end{quote} \n\t\n\tThe tactic referred in the fragments is\n\n    	\N
808	826	\N	\n\tA criteria for the the application of the Decomposition architectural style of the Module viewtype is Build-vs-Buy decisions. The application of the criteria\n\t\n\n    	\N
813	826	\N	\n\tA criteria for the the application of the Decomposition architectural style of the Module viewtype is Build-vs-Buy decisions. The application of the criteria\n\t\n\n    	\N
817	826	\N	\n\tA criteria for the the application of the Decomposition architectural style of the Module viewtype is Build-vs-Buy decisions. The application of the criteria\n\t\n\n    	\N
823	826	\N	\n\tA criteria for the the application of the Decomposition architectural style of the Module viewtype is Build-vs-Buy decisions. The application of the criteria\n\t\n\n    	\N
863	1465	\N	\n\tConsider the kind of relations between components and modules.\n\t\t\n    	\N
809	1523	\N	\n\tIn the context of the FenixEdu case study, the business case was to\n\n    	\N
796	1626	\N	\n\tConsider an architecturally significant requirement (ASR) that has a low impact on the architecture but a high business value\n\n    	\N
820	1626	\N	\n\tConsider an architecturally significant requirement (ASR) that has a low impact on the architecture but a high business value\n\n    	\N
795	1634	\N	\n\tDesigning an architecture\n\n    	\N
810	1634	\N	\n\tDesigning an architecture\n\n    	\N
792	828	\N	\n\tIn the context of the FenixEdu case study the following scenario was identified.\n\t\n\t\\begin{quote}\n\t\tThe school management pretends that all the members of the school, students, administrative staff, faculty and management should be able to use the system to perform their activities efficiently without requiring the installation of any client software or a long learning process.\n\t\\end{quote}\n\t\n\tThis is a \n\n    	\N
819	828	\N	\n\tIn the context of the FenixEdu case study the following scenario was identified.\n\t\n\t\\begin{quote}\n\t\tThe school management pretends that all the members of the school, students, administrative staff, faculty and management should be able to use the system to perform their activities efficiently without requiring the installation of any client software or a long learning process.\n\t\\end{quote}\n\t\n\tThis is a \n\n    	\N
851	874	\N	\n\tConsider a view of the module viewtype where there is a uses loop, a cycle of uses dependences between several modules. It may be possible to break the dependence cycle by\n\t\n\n    	\N
801	835	\N	\n\tIn the description of the SocialCalc case study can be read:\n\t\n\t\\begin{quote}\n\t\tIf users A and B simultaneously perform an operation affecting the same cells, then receive and execute commands broadcast from the other user, they will end up in different states.\n\t\\end{quote} \n\t\n\tFrom this fragment can be identified a scenario for\n\n    	\N
831	835	\N	\n\tIn the description of the SocialCalc case study can be read:\n\t\n\t\\begin{quote}\n\t\tIf users A and B simultaneously perform an operation affecting the same cells, then receive and execute commands broadcast from the other user, they will end up in different states.\n\t\\end{quote} \n\t\n\tFrom this fragment can be identified a scenario for\n\n    	\N
794	836	\N	\n\tA utility tree\n\n    	\N
829	836	\N	\n\tA utility tree\n\n    	\N
803	837	\N	\n\tIn the description of the Thousand Parsec case study can be read:\n\t\n\t\\begin{quote}\n\t\tTurns also have a time limit imposed by the server, so that slow or unresponsive players cannot hold up a game.\n\t\\end{quote} \n\t\n\tFrom this fragment can be identified a scenario for\n\n    	\N
832	837	\N	\n\tIn the description of the Thousand Parsec case study can be read:\n\t\n\t\\begin{quote}\n\t\tTurns also have a time limit imposed by the server, so that slow or unresponsive players cannot hold up a game.\n\t\\end{quote} \n\t\n\tFrom this fragment can be identified a scenario for\n\n    	\N
797	838	\N	\n\tConsider an architecturally significant requirement (ASR) that has a high impact on the architecture but a low business value\n\n    	\N
830	838	\N	\n\tConsider an architecturally significant requirement (ASR) that has a high impact on the architecture but a low business value\n\n    	\N
1036	1218	\N	\n\tThe modifiability tactic Use an Intermediary between two modules\n\t\t\n    	\N
799	844	\N	\n\tIn the description of the SocialCalc case study can be read:\n\t\n\t\\begin{quote}\n\t\tTherefore, on browsers with support for CSS3, we use the box-shadow property to represent multiple peer cursors in the same cell.\n\t\\end{quote} \n\t\n\tThis corresponds to the application of\n\n    	\N
805	846	\N	\n\tIn the description of the Thousand Parsec case study can be read:\n\t\n\t\\begin{quote}\n\t\tBesides often running far longer than the circadian rhythms of the players' species, during this extended period the server process might be prematurely terminated for any number of reasons. To allow players to pick up a game where they left off, Thousand Parsec servers provide persistence by storing the entire state of the universe (or even multiple universes) in a database.\n\t\\end{quote} \n\t\n\tThe tactic referred in the fragments is\n\n    	\N
793	848	\N	\n\tIn the context of the FenixEdu case study the following scenario was identified.\n\t\n\t\\begin{quote}\n\t\tThe management intends that the system should be available to all users, even after offices close and classes finish because students may need courses material to study 24X7 and faculty and administrative staff may want to work from home.\n\t\\end{quote}\n\t\n\tThis is a \n\n    	\N
1203	1208	\N	\n\tConsidering the availability architectural quality and the tactics of active redundancy, passive redundancy, and spare\n\n    	\N
1069	1218	\N	\n\tThe modifiability tactic Use an Intermediary between two modules\n\t\t\n    	\N
1156	1218	\N	\n\tThe modifiability tactic Use an Intermediary between two modules\n\t\t\n    	\N
1314	1343	\N	\n  \tConsider the following architectural view of the Adventure Builder system, designed around the Order Processing Center\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=120mm]{../AdventureBuilderCandC}\n\t\\end{center}\n\t\n\tThe views \\textbf{does not} use the architectural style\n\n   \t	\N
1315	1344	\N	\n  \tConsider the following requirement for availability of the Adventure Builder system\n\t\n\t\\begin{quote}\n\t\tThe Consumer Web site sent a purchase order request to the order processing center (OPC). The OPC processed that request but didn't reply to Consumer Web site within five seconds, so the Consumer Web site resends the request to the OPC.\n\t\\end{quote}\n\t\n\tIf we represent this requirement as a scenario\n\n   \t	\N
1316	1345	\N	\n\tConsider the module viewtype views of the DVD Catalog application. The architect knows about a new requirement \n\t\n\t\\begin{quote}\n\t\tThe application should support other kinds of catalogs (CDs, games, books, ...). \n\t\\end{quote}\n\t\n\tThis requirement requires a change of\n\t\n    	\N
1323	1346	\N	\n\tConsider the following description of the behavior of Twitter ingestion mechanisms\n\t\n\t\\begin{quote}\n\t\tWrite. when a tweet  comes in there's an O(n) process to write to Redis clusters, where n is the number of people following you. Painful for Lady Gaga and Barack Obama where they are doing 10s of millions of inserts across the cluster. All the Redis clusters are backing disk, the Flock cluster stores the user timeline to disk, but usually timelines are found in RAM in the Redis cluster.\n\t\\end{quote}\n\t\n\t	\N
1070	1457	\N	\n\tConsider a scenario for performance where the arrival of events is stochastic with a distribution where there are peeks of events but the arrival of events over a long period is uniform. The best tactic to apply is\n\t\t\n    	\N
798	1618	\N	\n\tWhen applying Attribute-Driven Design (ADD) to the FenixEdu system the creation of a view where there are redundant web servers, load balancers and database servers \n\n    	\N
868	885	\N	\n\tIn the client-server architectural style the request/reply connector is synchronous. Consider an architect that wants to describe an asynchronous interaction between clients and servers. \n\t\n    	\N
883	885	\N	\n\tIn the client-server architectural style the request/reply connector is synchronous. Consider an architect that wants to describe an asynchronous interaction between clients and servers. \n\t\n    	\N
852	886	\N	\n\tThe Generalization architectural style of the module viewtype can be use to support the evolution of a system \n\t\n\n    	\N
879	886	\N	\n\tThe Generalization architectural style of the module viewtype can be use to support the evolution of a system \n\t\n\n    	\N
859	887	\N	\n\tIn the description of the Git case study can be read how it efficiently compares content:\n\t\n\t\\begin{quote}\n\t\tWhen a content (i.e., file or directory) node in the graph has the same reference identity (the SHA in Git) as that in a different commit, the two nodes are guaranteed to contain the same content, allowing Git to short-circuit content diffing efficiently.\n\t\\end{quote}\n\t\n\tThe performance tactic addressed in this fragments is:\n\t\n    	\N
881	887	\N	\n\tIn the description of the Git case study can be read how it efficiently compares content:\n\t\n\t\\begin{quote}\n\t\tWhen a content (i.e., file or directory) node in the graph has the same reference identity (the SHA in Git) as that in a different commit, the two nodes are guaranteed to contain the same content, allowing Git to short-circuit content diffing efficiently.\n\t\\end{quote}\n\t\n\tThe performance tactic addressed in this fragments is:\n\t\n    	\N
855	888	\N	\n\tIn Facebook it is not possible to have the information about more that one bilion users in a single disk. Therefore, a sharding technique is applied, where the persistent information is split between several database servers, and applications are routed to the right servers for queries and updates. To describe this architecture\n\t\n    	\N
880	888	\N	\n\tIn Facebook it is not possible to have the information about more that one bilion users in a single disk. Therefore, a sharding technique is applied, where the persistent information is split between several database servers, and applications are routed to the right servers for queries and updates. To describe this architecture\n\t\n    	\N
860	894	\N	\n\tIn the description of the GitHub case study can be read:\n\t\n\t\\begin{quote}\n\t\tOnce the Smoke proxy has determined the user's route, it establishes a transparent proxy to the proper file server. We have four pairs of file servers. Their names are fs1a, fs1b, ..., fs4a, fs4b. These are 8 core, 16GB RAM bare metal servers, each with six 300GB 15K RPM SAS drives arranged in RAID 10. At any given time one server in each pair is active and the other is waiting to take over should there be a fatal failure in the master. All repository data is constantly replicated from the master to the slave via DRBD.\n\t\\end{quote}\n\t\n\tThe four pairs of file servers implement:\n\t\n    	\N
891	894	\N	\n\tIn the description of the GitHub case study can be read:\n\t\n\t\\begin{quote}\n\t\tOnce the Smoke proxy has determined the user's route, it establishes a transparent proxy to the proper file server. We have four pairs of file servers. Their names are fs1a, fs1b, ..., fs4a, fs4b. These are 8 core, 16GB RAM bare metal servers, each with six 300GB 15K RPM SAS drives arranged in RAID 10. At any given time one server in each pair is active and the other is waiting to take over should there be a fatal failure in the master. All repository data is constantly replicated from the master to the slave via DRBD.\n\t\\end{quote}\n\t\n\tThe four pairs of file servers implement:\n\t\n    	\N
861	895	\N	\n\tConsider the concepts of module interface and component port. \n\t\t\n    	\N
892	895	\N	\n\tConsider the concepts of module interface and component port. \n\t\t\n    	\N
856	896	\N	\n\tA CRUD matrix, which indicates whether each module creates, reads, updates, or deletes data (CRUD, for short) from each data entity. The CRUD matrix\n\t\n    	\N
890	896	\N	\n\tA CRUD matrix, which indicates whether each module creates, reads, updates, or deletes data (CRUD, for short) from each data entity. The CRUD matrix\n\t\n    	\N
849	898	\N	\n\tThe Uses architectural style of the Module viewtype \n\t\n\n    	\N
889	898	\N	\n\tThe Uses architectural style of the Module viewtype \n\t\n\n    	\N
864	1165	\N	\n\tConsider an architect that is designing a component-and-connector view. In some point the architect decides that she does not need to decompose a connector with a demanding quality level. This may occur because\n\t\t\n    	\N
882	1165	\N	\n\tConsider an architect that is designing a component-and-connector view. In some point the architect decides that she does not need to decompose a connector with a demanding quality level. This may occur because\n\t\t\n    	\N
867	1166	\N	\n\tThe client-server architectural style provides availability because\n\t\n    	\N
893	1166	\N	\n\tThe client-server architectural style provides availability because\n\t\n    	\N
853	904	\N	\n\tAccording to the definition of the Layered architectural style, each layer represents a grouping of modules that offers a cohesive set of services.\n\t\n    	\N
903	904	\N	\n\tAccording to the definition of the Layered architectural style, each layer represents a grouping of modules that offers a cohesive set of services.\n\t\n    	\N
865	905	\N	\n\tThe repository architectural style provides modifiability because\n\n    	\N
901	905	\N	\n\tThe repository architectural style provides modifiability because\n\n    	\N
858	907	\N	\n\tIn the description of the Git case study can be read how to deal with the corruption of pack files in the context of the availability quality:\n\t\n\t\\begin{quote}\n\t\tIf an object was only copied partially or another form of data corruption occurred, recalculating the SHA of the current object will identify such corruption.\n\t\\end{quote}\n\t\n\tThe tactic addressed in this fragments is:\n\t\n    	\N
900	907	\N	\n\tIn the description of the Git case study can be read how to deal with the corruption of pack files in the context of the availability quality:\n\t\n\t\\begin{quote}\n\t\tIf an object was only copied partially or another form of data corruption occurred, recalculating the SHA of the current object will identify such corruption.\n\t\\end{quote}\n\t\n\tThe tactic addressed in this fragments is:\n\t\n    	\N
909	1667	\N	\n\tThe Peer-to-Peer architectural style provides high scalability and availability. In the context of a file sharing system  \n\t\n\n    	\N
926	1475	\N	\n\tConsider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n\t\n\t\\begin{quote}\n\t\tTo allow the share of catalogs with family and friends, including some access control. \n\t\\end{quote}\n\t\n\tThis requirement requires \n\t\n    	\N
915	937	\N	\n\tThe Service-Oriented Architecture style\n\t\n\n    	\N
930	937	\N	\n\tThe Service-Oriented Architecture style\n\t\n\n    	\N
919	938	\N	\n\tConsider the following application-specific types that were defined for a component-and-connector view that depicts the components within \\texttt{Carbon} component. \n\t\n\t\\centering\n\t\\includegraphics[width=100mm]{x-carbon-buffering}\n\n    	\N
931	938	\N	\n\tConsider the following application-specific types that were defined for a component-and-connector view that depicts the components within \\texttt{Carbon} component. \n\t\n\t\\centering\n\t\\includegraphics[width=100mm]{x-carbon-buffering}\n\n    	\N
922	944	\N	\n\tAn architecture can also be represented by the set of files which contains its modules code. A suitable architectural style to represent this set of files is\n\n    	\N
942	944	\N	\n\tAn architecture can also be represented by the set of files which contains its modules code. A suitable architectural style to represent this set of files is\n\n    	\N
914	947	\N	\n\tThe Service-Oriented Architecture style improves modifiability because\n\t\n\n    	\N
921	1695	\N	\n\tConsider a stakeholder that is particularly concerned about the total cost of the project. When it comes to describing the system using allocation viewtypes is interested in\n\n    	\N
932	1695	\N	\n\tConsider a stakeholder that is particularly concerned about the total cost of the project. When it comes to describing the system using allocation viewtypes is interested in\n\n    	\N
920	1173	\N	\n\tConsider the following application-specific types. Note that \\texttt{Queue} components are within the \\texttt{Carbon} components. In a view that contains components of these three types \n\t\n\t\\centering\n\t\\includegraphics[width=120mm]{x-datapoint-access}\n\n    	\N
899	1465	\N	\n\tConsider the kind of relations between components and modules.\n\t\t\n    	\N
925	1345	\N	\n\tConsider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n\t\n\t\\begin{quote}\n\t\tThe application should support other kinds of catalogs (CDs, games, books, ...). \n\t\\end{quote}\n\t\n\tThis requirement requires a change of\n\t\n    	\N
933	1345	\N	\n\tConsider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n\t\n\t\\begin{quote}\n\t\tThe application should support other kinds of catalogs (CDs, games, books, ...). \n\t\\end{quote}\n\t\n\tThis requirement requires a change of\n\t\n    	\N
850	1476	\N	\n\tA function call is not necessarily a uses relation of the Uses architectural style of the Module viewtype because\n\t\n\n    	\N
902	1476	\N	\n\tA function call is not necessarily a uses relation of the Uses architectural style of the Module viewtype because\n\t\n\n    	\N
940	947	\N	\n\tThe Service-Oriented Architecture style improves modifiability because\n\t\n\n    	\N
953	957	\N	\n\tConsider the following decomposition view of the Graphite system where module \\textsc{Store Graphs} is responsible for managing the storage of datapoints and graphs and module \\textsc{Present Graphs} for graphs generation and presentation. Memcache is a library that maintains datapoints in memory to reduce the overhead of obtaining them from the file system.\n\t\n\t\\centering\n\t\\includegraphics[width=100mm]{x-top-decomposition}\n\n    	\N
924	964	\N	\n\tAn architect needs to show that a security tactic of limit exposure will be effectively provided by the executing system. Therefore, she decides to design\n\t\n    	\N
962	964	\N	\n\tAn architect needs to show that a security tactic of limit exposure will be effectively provided by the executing system. Therefore, she decides to design\n\t\n    	\N
918	967	\N	\n\tConsider the following decomposition view of the Graphite system where module \\textsc{Store Graphs} is responsible for managing the storage of datapoints and graphs and module \\textsc{Present Graphs} for graphs generation and presentation. Buffering is a library used to temporarily store incoming data point.\n\t\n\t\\centering\n\t\\includegraphics[width=100mm]{x-top-decomposition}\n\n    	\N
961	967	\N	\n\tConsider the following decomposition view of the Graphite system where module \\textsc{Store Graphs} is responsible for managing the storage of datapoints and graphs and module \\textsc{Present Graphs} for graphs generation and presentation. Buffering is a library used to temporarily store incoming data point.\n\t\n\t\\centering\n\t\\includegraphics[width=100mm]{x-top-decomposition}\n\n    	\N
984	994	\N	\n\tConsider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the client Spreadsheet. A \\textsc{ConflictResolution} module is used when local commands conflict with remote commands.\n\t\n\t\\centering\n\t\\includegraphics[width=80mm]{x-SocialCalc-cc-client}\n\n    	\N
992	994	\N	\n\tConsider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the client Spreadsheet. A \\textsc{ConflictResolution} module is used when local commands conflict with remote commands.\n\t\n\t\\centering\n\t\\includegraphics[width=80mm]{x-SocialCalc-cc-client}\n\n    	\N
988	995	\N	\n\tWhen the domain logic is organized using a Table Module pattern \n\n    	\N
993	995	\N	\n\tWhen the domain logic is organized using a Table Module pattern \n\n    	\N
969	996	\N	\n\tWhen comparing Amazon Silk with Google Chrome in the context of mobile devices\n\n    	\N
989	996	\N	\n\tWhen comparing Amazon Silk with Google Chrome in the context of mobile devices\n\n    	\N
976	997	\N	\n\tConsider the architectural views for the ThousandParsec system. The following diagram depicts a proposal of application-specific types for the architectural components, where the names of the ports are missing. Between the GameServer and Repository component\n\t\n\t\\centering\n\t\\includegraphics[width=80mm]{x-ThousandParsec-cc}\n\n    	\N
990	997	\N	\n\tConsider the architectural views for the ThousandParsec system. The following diagram depicts a proposal of application-specific types for the architectural components, where the names of the ports are missing. Between the GameServer and Repository component\n\t\n\t\\centering\n\t\\includegraphics[width=80mm]{x-ThousandParsec-cc}\n\n    	\N
978	998	\N	\n\tConsider the architecture of the Morrison's OrderPad. The connector between the client component, executing in the Pad, and the server component, executing in the OrderPadDatabase\n\t\n    	\N
991	998	\N	\n\tConsider the architecture of the Morrison's OrderPad. The connector between the client component, executing in the Pad, and the server component, executing in the OrderPadDatabase\n\t\n    	\N
928	1464	\N	\n\tConsider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n\t\n\t\\begin{quote}\n\t\tTo support multi-platform (Mac, Windows, Linux)\n\t\\end{quote}\n\t\n\tThis requirement requires a change of\n\t\n    	\N
950	1400	\N	\n\tThe Service-Oriented Architecture style improves interoperability because\n\t\n\n    	\N
951	1169	\N	\n\tAn important stage of the development of any system is its build into the set of executable files. A suitable architectural style which helps on the definition of the build process is\n\n    	\N
916	1647	\N	\n\tThe Pipe-and-Filter style allows composition of filters \n\t\n\n    	\N
963	1464	\N	\n\tConsider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n\t\n\t\\begin{quote}\n\t\tTo support multi-platform (Mac, Windows, Linux)\n\t\\end{quote}\n\t\n\tThis requirement requires a change of\n\t\n    	\N
910	1536	\N	\n\tIn the description of the Gnutella system can be read:\n\t\n\t\\begin{quote}\n\t\tThe topology of the system changes at runtime as peer components connect and disconnect to the network.\n\t\\end{quote}\n\t\n\n    	\N
952	1411	\N	\n\tConsider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n\t\n\t\\begin{quote}\n\t\tTo support iPhone/iPad/Android version with sync, which allows offline use of the application in the mobile device and data synchronization to occur when a connection is available\n\t\\end{quote}\n\t\n\tThis requirement requires a change of\n\t\n    	\N
939	1536	\N	\n\tIn the description of the Gnutella system can be read:\n\t\n\t\\begin{quote}\n\t\tThe topology of the system changes at runtime as peer components connect and disconnect to the network.\n\t\\end{quote}\n\t\n\n    	\N
959	1495	\N	\n\tIn the Publish-Subscribe architectural style \n\t\n\n    	\N
949	1676	\N	\n\tThe Tiers architectural style\n\t\n\n    	\N
943	1475	\N	\n\tConsider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n\t\n\t\\begin{quote}\n\t\tTo allow the share of catalogs with family and friends, including some access control. \n\t\\end{quote}\n\t\n\tThis requirement requires \n\t\n    	\N
987	1004	\N	\n\tWhen the domain logic is organized using a Transaction Script pattern the domain objects\n\n    	\N
1003	1004	\N	\n\tWhen the domain logic is organized using a Transaction Script pattern the domain objects\n\n    	\N
980	1005	\N	\n\tConsider the architecture of the Morrison's OrderPad. In the description of the system can be read:\n\t\n\t\\begin{quote}\n\t\tOne of these was using a file-transfer to send data to the mainframe rather than MQ, which wouldn't perform well once many stores were active.\n\t\\end{quote}\n\t\n\tThis approach means that\n\t\n    	\N
1001	1005	\N	\n\tConsider the architecture of the Morrison's OrderPad. In the description of the system can be read:\n\t\n\t\\begin{quote}\n\t\tOne of these was using a file-transfer to send data to the mainframe rather than MQ, which wouldn't perform well once many stores were active.\n\t\\end{quote}\n\t\n\tThis approach means that\n\t\n    	\N
972	1006	\N	\n\tWhen comparing Amazon Silk with Google Chrome  \n\t\n    	\N
974	1007	\N	\n\tConsider the architectural views for the ThousandParsec system. The following diagram depicts a fragment of a proposal for the decomposition view of the system. The ThousandParsec protocol\n\t\n\t\\centering\n\t\\includegraphics[width=100mm]{x-ThousandParsec-ruleset}\n\n    	\N
1000	1007	\N	\n\tConsider the architectural views for the ThousandParsec system. The following diagram depicts a fragment of a proposal for the decomposition view of the system. The ThousandParsec protocol\n\t\n\t\\centering\n\t\\includegraphics[width=100mm]{x-ThousandParsec-ruleset}\n\n    	\N
981	1008	\N	\n\tConsider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the client Spreadsheet. It can be read in the case description: \\emph{A simple improvement is for each client to broadcast its cursor position to other users, so everyone can see which cells are being worked on.}\n\t\n\t\\centering\n\t\\includegraphics[width=80mm]{x-SocialCalc-cc-client}\n\n    	\N
1002	1008	\N	\n\tConsider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the client Spreadsheet. It can be read in the case description: \\emph{A simple improvement is for each client to broadcast its cursor position to other users, so everyone can see which cells are being worked on.}\n\t\n\t\\centering\n\t\\includegraphics[width=80mm]{x-SocialCalc-cc-client}\n\n    	\N
986	1014	\N	\n\tWhen the domain logic is organized using a Transaction Script pattern the most suitable data source patterns are\n\n    	\N
1013	1014	\N	\n\tWhen the domain logic is organized using a Transaction Script pattern the most suitable data source patterns are\n\n    	\N
977	1015	\N	\n\tConsider the architecture of the Morrison's OrderPad. The decision between the use of a Native application or HTML5 on the implementation of the client in the Pad\n\t\n    	\N
1011	1015	\N	\n\tConsider the architecture of the Morrison's OrderPad. The decision between the use of a Native application or HTML5 on the implementation of the client in the Pad\n\t\n    	\N
970	1016	\N	\n\tWhen comparing Amazon Silk with Google Chrome in the context of the prediction of pages the user is going to access\n\t\n    	\N
1009	1016	\N	\n\tWhen comparing Amazon Silk with Google Chrome in the context of the prediction of pages the user is going to access\n\t\n    	\N
982	1017	\N	\n\tConsider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the system. According to this representation\n\t\n\t\\centering\n\t\\includegraphics[width=80mm]{x-SocialCalc-cc}\n\n    	\N
1012	1017	\N	\n\tConsider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the system. According to this representation\n\t\n\t\\centering\n\t\\includegraphics[width=80mm]{x-SocialCalc-cc}\n\n    	\N
975	1018	\N	\n\tConsider the architectural views for the ThousandParsec system. The following diagram depicts a proposal of application-specific types for the architectural components, where the names of the ports are missing. Between the GameClient and GameServer components\n\t\n\t\\centering\n\t\\includegraphics[width=80mm]{x-ThousandParsec-cc}\n\n    	\N
1010	1018	\N	\n\tConsider the architectural views for the ThousandParsec system. The following diagram depicts a proposal of application-specific types for the architectural components, where the names of the ports are missing. Between the GameClient and GameServer components\n\t\n\t\\centering\n\t\\includegraphics[width=80mm]{x-ThousandParsec-cc}\n\n    	\N
979	1024	\N	\n\tConsider the architecture of the Morrison's OrderPad. The final interaction between the OrderPadDatabase component and Mainframe component is supported by \n\t\n    	\N
1021	1024	\N	\n\tConsider the architecture of the Morrison's OrderPad. The final interaction between the OrderPadDatabase component and Mainframe component is supported by \n\t\n    	\N
985	1025	\N	\n\tWhen the domain logic is organized using a Domain Model pattern the most suitable data source patterns are\n\n    	\N
1023	1025	\N	\n\tWhen the domain logic is organized using a Domain Model pattern the most suitable data source patterns are\n\n    	\N
971	1026	\N	\n\tWhen comparing Amazon Silk with Google Chrome  \n\n    	\N
1019	1026	\N	\n\tWhen comparing Amazon Silk with Google Chrome  \n\n    	\N
973	1027	\N	\n\tConsider the architectural views for the ThousandParsec system. The following diagram depicts a fragment of a proposal for the decomposition view of the system. The AI players should be described\n\t\n\t\\centering\n\t\\includegraphics[width=100mm]{x-ThousandParsec-ruleset}\n\n    	\N
1020	1027	\N	\n\tConsider the architectural views for the ThousandParsec system. The following diagram depicts a fragment of a proposal for the decomposition view of the system. The AI players should be described\n\t\n\t\\centering\n\t\\includegraphics[width=100mm]{x-ThousandParsec-ruleset}\n\n    	\N
983	1028	\N	\n\tConsider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the client Spreadsheet. A \\textsc{Parser} module is used when loading a file\n\t\n\t\\centering\n\t\\includegraphics[width=80mm]{x-SocialCalc-cc-client}\n\n    	\N
1022	1028	\N	\n\tConsider the architectural views for the SocialCalc system. The following diagram depicts a proposal for a component-and-connector view of the client Spreadsheet. A \\textsc{Parser} module is used when loading a file\n\t\n\t\\centering\n\t\\includegraphics[width=80mm]{x-SocialCalc-cc-client}\n\n    	\N
1039	1059	\N	\n\t  In the Continous integration case study can be read about Jenkins\n\t  \n\t  \\begin{quote}\n\t\t  It takes advantage of the JUnit XML standard for unit test and code coverage reporting to integrate reports from a variety of test tools. Jenkins originated with Sun, but is very widely used and has a robust open-source community associated with it.\n\t  \\end{quote}\n\t  \n\t  Consider that a scenario is written from the above sentence\n    \n    	\N
1040	1060	\N	\n\t  In the Infinispan case study can be read\n\t  \n\t  \\begin{quote}\n\t\t  When persisting for durability, persistence can either be online, where the application thread is blocked until data is safely written to disk, or offline, where data is flushed to disk periodically and asynchronously. In the latter case, the application thread is not blocked on the process of persistence, in exchange for uncertainty as to whether the data was successfully persisted to disk at all.\n\t  \\end{quote}\n\t  \n\t  From the description we can infer a trade-off between the qualities of\n    \n    	\N
1054	1062	\N	\n    Consider the following figure depicting two different architectures for web applications\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=100mm]{../Microservices}\n\t\\end{center}\n\t\n    	\N
1055	1063	\N	\n    Consider the following excerpt about the Amazon system\n\t\n\t\\begin{quote}\n\t\tOver time, this grew into hundreds of services and a number of application servers that aggregate the information from the services. The application that renders the Amazon.com Web pages is one such application server, but so are the applications that serve the Web-services interface, the customer service application, the seller interface, and the many third-party Web sites that run on our platform.\n\t\\end{quote}\n\t\n\tThe architectural style that better represents these aspects of the Amazon architecture is\n\t\n    	\N
1041	1064	\N	\n    According to the attribute-driven design process, we should design\n    the software architecture for a system based on a selected list of\n    requirements, which are called the \\textit{architecture significant requirements}.\n    These requirements should be sorted according to their\n    importance for the system's stakeholders because\n\n    	\N
1045	1072	\N	\n  Suppose that there are certain performance requirements for a\n  system, and that you want to show to the stakeholders of the system\n  that the software architecture that you designed meet those\n  requirements. To do this\n\n    	\N
1046	1073	\N	\n    Suppose that you are designing the software architecture for an\n    enterprise application that has requirements about the maximum\n    response time for a certain type of requests.  Moreover, assume\n    that those requests arrive at the system periodically, whereas the\n    remaining requests have an unpredictable frequency.  Finally,\n    assume that your system will have a single server that will be\n    executing on a predefined machine with a 12-core AMD processor.\n    To show to the stakeholders that your system satisfies the\n    performance requirements you have to use views of which\n    architectural style?\n\n    	\N
1053	1174	\N	\n    With the evolution of the web application technologies, it is now\n    possible to develop web applications with a user interface similar\n    to the interface of desktop applications.  Yet, for this to\n    happen, part of the code that was executing in the web server is\n    now executing in the web browser.  How does this change manifests\n    in the software architecture of the system?\n\n    	\N
1044	1665	\N	\n  In a layered architecture composed by four layers, where the topmost\n  layer is the layer number 1 and the bottommost layer is the layer\n  number 4, which of the layers is more modifiable?\n\n    	\N
1042	1246	\N	\n\tConsider the Decomposition architectural style of the Module viewtype\n\t\t\n    	\N
1048	1075	\N	\n\t  Imagine that you want to develop a system that is to be used in email servers, whose goal\n\t  is to allow changing the emails that are received by the server (for example, to remove\n\t  potential viruses or URLs linking to phishing sites). The goal is that the server feeds each\n\t  received email through this system before processing it (e.g., forward it to another server,\n\t  or store it locally). The system is supposed to be easily modifiable, to support new types\n\t  of email transformations. Which architectural style is the most adequate to satisfy these\n\t  requirements?\n\n\t   	\N
1050	1077	\N	\n  Web servers implemented in Java, such as the Tomcat web server,\n  typically use a thread-based model for processing requests.  That\n  is, they process each request on a different thread within the same\n  JVM process, rather than on a different process.  One of the reasons\n  for this is that\n\n  	\N
1051	1078	\N	\n\t Consider the following architectural view of the Pony-Build system as described in the Continous integration case study\n\t  \n\t\\begin{center}\n\t\t\\includegraphics[width=100mm]{../PonyBuildArchitecture}\n\t\\end{center}\n\t\n\tAccording to this view the quality of performance is achieved through\n    \n    	\N
1052	1079	\N	\n\t  In the Infinispan case study can be read\n\t  \n\t  \\begin{quote}\n\t\t Infinispan's core data structures make use of software transactional memory techniques for concurrent access to shared data. This minimizes the need for explicit locks, mutexes and other forms of synchronization, preferring techniques like compare-and-set operations within a loop to achieve correctness when updating shared data structures. Such techniques have been proven to improve CPU utilization in multi-core and SMP systems, and despite the increased code complexity, has paid off in overall performance when under load.\n\t  \\end{quote}\n\t  \n\t  These properties of Infinispan can be represented by\n    \n    	\N
1056	1080	\N	\n    Consider the following excerpt about the Scalable web architecture and distributed systems case study about two different possible implementations of a global cache\n\t\n\t\\begin{quote}\n\t\t The majority of applications leveraging global caches tend to use the first type, where the cache itself manages eviction and fetching data to prevent a flood of requests for the same data from the clients. However, there are some cases where the second implementation makes more sense. For example, if the cache is being used for very large files, a low cache hit percentage would cause the cache buffer to become overwhelmed with cache misses; in this situation it helps to have a large percentage of the total data set (or hot data set) in the cache. \t\\end{quote}\n\t\n    	\N
1029	1083	\N	\n\tConsider the following sentence by Melvin Conways, also known as Conway's Law\n\t\n\t\\begin{quote}\n\t\torganizations which design systems ... are constrained to produce designs which are copies of the communication structures of these organizations\n\t\\end{quote}\n\t\t\n    	\N
1030	1084	\N	\n  \tConsider the following architectural view of the Adventure Builder system\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=80mm]{../AdventureBuilderDeployment}\n\t\\end{center}\n\t\n\tAccording to this view the stakeholders can see that the Adventure Builder system\n\n   \t	\N
1031	1085	\N	\n\tFrank Buschmann cites the characterization Marquardt does of Performitis:\n\t\t\n\t\\begin{quote}\n\t\tEach part of the system is directly influenced by local performance tuning measures. There is no global performance strategy, or it ignores other qualities of the system as testability and maintainability.\n\t\\end{quote}\n\t\n\tFrom this problem you can conclude that:\n\n    	\N
1034	1088	\N	\n    Consider the Figure that describes the use of\n    caches in web services.  \n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=80mm]{../RequestNodeCache}\n\t\\end{center}\n\t\n\tIn that Figure, there is a\n    rectangle with the name \\emph{Cache} within another rectangle with\n    the name \\emph{Request Node}.  Taking into account the description\n    made in the text and the goal of that Figure, those rectangles\n    correspond to which type of software elements?\n\n    	\N
1112	1122	\N	\n\t  In the Continous integration case study can be read about future features for Pony-Build\n\t  \n\t  \\begin{quote}\n\t\t  Currently, each continuous integration system reinvents the wheel by providing its own build configuration language, which is manifestly ridiculous; there are fewer than a dozen commonly used build systems, and probably only a few dozen test runners. Nonetheless, each CI system has a new and different way of specifying the build and test commands to be run. In fact, this seems to be one of the reasons why so many basically identical CI systems exist: each language and community implements their own configuration system, tailored to their own build and test systems, and then layers on the same set of features above that system. Therefore, building a domain-specific language (DSL) capable of representing the options used by the few dozen commonly used build and test tool chains would go a long way toward simplifying the CI landscape.\n\t  \\end{quote}\n\t  \n\t  Suppose that you are the architect that has to change the architecture to accomodate this new feature. Therefore, as an architect\n    \n    	\N
476	1134	\N	\n  Which of the following phrases best describe the relationship\n  between modules and components?\n\n  	\N
1110	1170	\N	\n    In Nginx, given that a \\emph{worker} processes various requests during its\n    life, how does it do it?\n\n    	\N
1033	1394	\N	\n  As part of the process of creating an architecture, we talked about\n  a framework for capturing some of the requirements for a system.  In\n  this context, \\textbf{concrete scenarios} are used for\n\n  	\N
1057	1445	\N	\n    In the Graphite system the component \\emph{carbon} provides to \\emph{webapp} components an access interface to the \\emph{buffers} in order to improve the quality of\n\n    	\N
1113	1123	\N	\n\t  In the Infinispan case study can be read\n\t  \n\t  \\begin{quote}\n\t\t Infinispan uses its own serialization scheme, where full class definitions are not written to the stream. Instead, magic numbers are used for known types where each known type is represented by a single byte. This greatly improves not just serialization and de-serialization speed qualities, but also produces a much more compact byte stream for transmission across a network. An externalizer is registered for each known data type, registered against a magic number. This externalizer contains the logic to convert object to bytes and vice versa.\n\t  \\end{quote}\n\t  \n\t  These properties of Infinispan can be represented by\n    \n    	\N
1114	1124	\N	\n    One of the evolutions in the development of web applications was\n    the appearance of \\emph{mashups}, which are described in Wikipedia\n    as follows:\n\n    \\begin{quote}\n      In web development, a mashup is a web page or application that\n      uses and combines data, presentation or functionality from two\n      or more sources to create new services.\n    \\end{quote}\n\n    Knowing that the sources used by \\emph{mashups} do not know about\n    the existence of the \\emph{mashups} and that they change\n    frequently, forcing the adaptation of the \\emph{mashups} to\n    accomodate those changes, what is the best architecture to\n    minimize the effects of those changes?\n\n    	\N
1115	1125	\N	\n    Consider the following figure depicting two different architectures for web applications\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=140mm]{../Microservices}\n\t\\end{center}\n\t\n    	\N
1116	1126	\N	\n    Consider the following excerpt about the Amazon system\n\t\n\t\\begin{quote}\n\t\tMainly, I think service orientation has helped us there. The stored data formats are decoupled from the format in which you communicate data items. If there is no need for sharing schemas of the actual storage layout, you can focus on making sure that the service interfaces can evolve in a way that allows you to handle variations of data formats. You could dictate a rigorous single format, but that would not be realistic if you are in Amazon's platform business. We have to make sure that the platform can be extended by our customers to meet their needs.\n\t\\end{quote}\n\t\n\tThe architectural style that better represents these aspects of the Amazon architecture is\n\t\n    	\N
1117	1127	\N	\n    Consider the following excerpt about the Scalable web architecture and distributed systems case study\n\t\n\t\\begin{quote}\n\t\t Employing such a strategy maximizes data locality for the requests, which can result in decreased request latency. For example, let's say a bunch of nodes request parts of B: partB1, partB2, etc. We can set up our proxy to recognize the spatial locality of the individual requests, collapsing them into a single request and returning only bigB, greatly minimizing the reads from the data origin.\n\t\\end{quote}\n\t\n\tThe quality that is achieved with this tactic is\n\t\n    	\N
1089	1130	\N	\n  \t  Designing the software architecture for a complex system\n\n   \t 	\N
1090	1131	\N	\n  The architecturally significant requirements are important in the process of creating\n  the software architecture for a system because they are\n\n  	\N
1092	1133	\N	\n  \tConsider the following architectural view of the Adventure Builder system\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=120mm]{../AdventureBuilderComponentConector}\n\t\\end{center}\n\t\n\tIn this component-and-connector view the interactions the interactions between components follow the architectural style(s)\n\n   \t	\N
1093	1134	\N	\n    Which of the following phrases best describe the relationship\n    between modules and components?\n\n    	\N
1094	1135	\N	\n\tGeneral scenarios play an important role in the development of a software architecture\n\tbecause\n\t\n\t	\N
1103	1136	\N	\n\tSuppose that in the process of designing a system's software architecture you come to\n\tthe conclusion that there are uses relations in both directions in almost all of the system's\n\tmodules. This means that\n\t\n\t	\N
1106	1139	\N	\n    The email system is composed of various types of components\n    playing different roles.  For example, to send an email, a user\n    uses a \\emph{mail user agent} (MUA), to compose his message and\n    send it.  To send the message, the MUA typically connects to a\n    \\emph{mail transfer agent} (MTA) that receives the message,\n    analyzes the message's headers to determine the recipients and,\n    after querying the DNS system to determine the MTA responsible for\n    each recipient, it connects to the MTAs responsible for the\n    destination addresses to deliver the message.  Each of these MTAs\n    receives the message and stores it locally or forwards it to\n    others MTAs until the message reaches its destination MTA.\n    The recipient user of the message will then use his MUA to see the\n    messages that were sent to him.  To do it, the MUA connects to an\n    IMAP or POP server to obtain the user's messages.  Those IMAP and\n    POP servers obtain the messages for a user by reading the messages\n    stored by the MTA.\n\n    Given this simplified description of the operation of the email\n    system, which of the following architectural styles is more\n    appropriate to represent the pattern of interaction between the\n    MTA and the servers IMAP and POP?\n\n    	\N
1107	1140	\N	\n    Consider the following excerpt from the tutorial on the Hadoop\n    MapReduce:\n\n    \\begin{quote}\n      Hadoop MapReduce is a software framework for easily writing\n      applications which process vast amounts of data (multi-terabyte\n      data-sets) in-parallel on large clusters (thousands of nodes) of\n      commodity hardware in a reliable, fault-tolerant manner.\n\n      A MapReduce job usually splits the input data-set into\n      independent chunks which are processed by the map tasks in a\n      completely parallel manner.  The framework sorts the outputs of\n      the maps, which are then input to the reduce tasks. Typically\n      both the input and the output of the job are stored in a\n      file-system.  The framework takes care of scheduling tasks,\n      monitoring them and re-executes the failed tasks.\n    \\end{quote}\n\n    Which architectural style of the component-and-connector viewtype\n    is more adequate to describe how the MapReduce works, taking into\n    account its main advantages in solving a problem?\n\n    	\N
1104	1358	\N	\n\t Suppose that you are implementing a module in a system that has a two layered architecture.\n\t Knowing that your module belongs to the upper layer (assuming the usual notation\n\t for the layer style), this means that you\n\t \n\t 	\N
1097	1143	\N	\n  Web servers typically receive requests from different users\n  concurrently (that is, either different users make requests\n  simultaneously or they make them fast enough that it is not possible\n  for the web server to answer one request from one user before\n  receiving another request from another user).  To process all the\n  requests, web servers may use different implementation strategies.\n  Assuming that we want to develop a web server to serve only static\n  pages with more or less the same size to a set of clients on the\n  same LAN network as the server, which of the following strategies\n  would be better?\n\n  	\N
569	1146	\N	\n\tDuring the different steps on how to create an architecture, the precise specification of architecture quality attributes is initially relevant to\n\t\n    	\N
575	1146	\N	\n\tDuring the different steps on how to create an architecture, the precise specification of architecture quality attributes is initially relevant to\n\t\n    	\N
1099	1146	\N	\n\tDuring the different steps on how to create an architecture, the precise specification of architecture quality attributes is initially relevant to\n\n    	\N
1101	1148	\N	\n\t  In the Infinispan case study can be read\n\t  \n\t  \\begin{quote}\n\t\t  Infinispan supports several pluggable cache stores-adapters that can be used to persist data to disk or any form of secondary storage. The current default implementation is a simplistic hash bucket and linked list implementation, where each hash bucket is represented by a file on the filesystem. While easy to use and configure, this isn't the best-performing implementation.\n\t  \\end{quote}\n\t  \n\t  The main architectural quality addressed in the above excerpt is \n\t  \n    	\N
1100	1160	\N	\n\t  In the Continous integration case study can be read about Jenkins\n\t  \n\t  \\begin{quote}\n\t\t  It takes advantage of the JUnit XML standard for unit test and code coverage reporting to integrate reports from a variety of test tools. Jenkins originated with Sun, but is very widely used and has a robust open-source community associated with it.\n\t  \\end{quote}\n\t  \n\t  The quality of Jenkins that is emphasized in the above sentence is\n    \n    	\N
1147	1160	\N	\n\t  In the Continous integration case study can be read about Jenkins\n\t  \n\t  \\begin{quote}\n\t\t  It takes advantage of the JUnit XML standard for unit test and code coverage reporting to integrate reports from a variety of test tools. Jenkins originated with Sun, but is very widely used and has a robust open-source community associated with it.\n\t  \\end{quote}\n\t  \n\t  The quality of Jenkins that is emphasized in the above sentence is\n    \n    	\N
1121	1170	\N	\n    In Nginx, given that a \\emph{worker} processes various requests during its\n    life, how does it do it?\n\n    	\N
1182	1184	\N	\n\tA general scenario for a quality attribute\n\n    	\N
1179	1186	\N	\n\tAccording to Frank Buschmann in the article \\emph{Introducing the Pragmatic Architect}\n\t\t\n    	\N
1180	1187	\N	\n\tIn his article \\emph{Who Needs an Architect?} Martin Fowler refers to the following architecture definition\n\t\t\n\t\\begin{quote}\n\t\t\\emph{architecture is the set of design decisions that must be made early in a project}\n\t\\end{quote}\n\n    	\N
1181	1188	\N	\n\tConsider the following informal view of an Image Hosting System\n\t\n\\begin{center}\n\t\\includegraphics[width=100mm]{ImageHostingPerformance}\n\\end{center}\n\n    	\N
1193	1194	\N	\n\tConsidering the availability architectural quality and the tactics of ping/echo and heartbeat\n\n    	\N
1149	1195	\N	\n\tSuppose that after designing a successful architecture for a particular client the software house management decides to create a cross-functional internal department to start providing products for this particular segment of the market.\n\t\t\n    	\N
1189	1195	\N	\n\tSuppose that after designing a successful architecture for a particular client the software house management decides to create a cross-functional internal department to start providing products for this particular segment of the market.\n\t\t\n    	\N
1191	1196	\N	\n\tConsider the following informal view of an Image Hosting System\n\t\n\\begin{center}\n\t\\includegraphics[width=100mm]{ImageHostingScalability}\n\\end{center}\n\n    	\N
1151	1197	\N	\n\tIn his article \\emph{Who Needs an Architect?} Martin Fowler refers to the following architecture definition\n\t\t\n\t\\begin{quote}\n\t\t\\emph{the expert developers working on that project have a shared understanding of the system design}\n\t\\end{quote}\n\n    	\N
1190	1197	\N	\n\tIn his article \\emph{Who Needs an Architect?} Martin Fowler refers to the following architecture definition\n\t\t\n\t\\begin{quote}\n\t\t\\emph{the expert developers working on that project have a shared understanding of the system design}\n\t\\end{quote}\n\n    	\N
1192	1198	\N	\n\tIn a scenario for interoperability\n\n    	\N
1177	1204	\N	\n\tConsider the following informal view of an Image Hosting System\n\t\n\\begin{center}\n\t\\includegraphics[width=100mm]{ImageHostingReads}\n\\end{center}\n\n    	\N
1201	1204	\N	\n\tConsider the following informal view of an Image Hosting System\n\t\n\\begin{center}\n\t\\includegraphics[width=100mm]{ImageHostingReads}\n\\end{center}\n\n    	\N
1199	1206	\N	\n\tVery often, when a software architecture is being designed, conflicting requirements are identified, like between security and availability. The role of the software architect is to\n\t\t\n    	\N
1200	1207	\N	\n\tThe definition of software architecture, on the course book, is\n\t\\begin{quote}\n\t\t\\emph{The software architecture of a system is the set of structures needed to reason about the system, which comprise software elements, relations among them, and properties of both.}\n\t\\end{quote}\n\t\n\tAccording to this definition\n\n    	\N
1202	1336	\N	\n\tThe requirements impact on how an architecture is designed\n\n    	\N
1183	1447	\N	\n\tConsidering the availability architectural quality, the tactic of retry\n\n    	\N
1067	1665	\N	\n  In a layered architecture composed by four layers, where the topmost\n  layer is the layer number 1 and the bottommost layer is the layer\n  number 4, which of the layers is more modifiable?\n\n    	\N
1213	1214	\N	\n\tConsider the following fragment in the description of the nginx case study.\n\t\n\t\\begin{quote}\n\t\tnginx's configuration system was inspired by Igor Sysoev's experiences with Apache. His main insight was that a scalable configuration system is essential for a web server. The main scaling problem was encountered when maintaining large complicated configurations with lots of virtual servers, directories, locations and datasets. In a relatively big web setup it can be a nightmare if not done properly both at the application level and by the system engineer himself.\n\t\\end{quote}\n\t\t\t\n    	\N
1211	1215	\N	\n\tThe Attribute-Driven Design method is characterized by \n\t\t\n    	\N
1212	1217	\N	\n\tConsider the following fragment in the description of the Graphite system:\n\t\n\t\\begin{quote}\n\t\tThe Graphite webapp allows users to request custom graphs with a simple URL-based API. Graphing parameters are specified in the query-string of an HTTP GET request, and a PNG image is returned in response. \n\t\\end{quote}\n\t\t\n    	\N
1210	1218	\N	\n\tThe modifiability tactic Use an Intermediary between two modules\n\t\t\n    	\N
1223	1224	\N	\n\tIn the description of the nginx case study we can read:\n\t\n\t\\begin{quote}\n\t\tnginx is event-based, so it does not follow Apache's style of spawning new processes or threads for each web page request. The end result is that even as load increases, memory and CPU usage remain manageable. nginx can now deliver tens of thousands of concurrent connections on a server with typical hardware.\n\t\\end{quote}\n\t\n\tThe tactic nginx follows to achieve tens of thousands of concurrent connections is\n\t\t\t\n    	\N
1096	1225	\N	\n\tConsider the following scenario: \\emph{A system administrator simultaneously launches several instances of the system, each one using a different database, and is able to do it in less than 10 minutes.}\n\t\t\n    	\N
1142	1225	\N	\n\tConsider the following scenario: \\emph{A system administrator simultaneously launches several instances of the system, each one using a different database, and is able to do it in less than 10 minutes.}\n\t\t\n    	\N
1220	1225	\N	\n\tConsider the following scenario: \\emph{A system administrator simultaneously launches several instances of the system, each one using a different database, and is able to do it in less than 10 minutes.}\n\t\t\n    	\N
1222	1226	\N	\n\tConsider the following fragment in the description of the Graphite system:\n\t\n\t\\begin{quote}\n\t\tTo avoid this kind of catastrophe, I added several features to carbon including configurable limits on how many data points can be queued and rate-limits on how quickly various whisper operations can be performed. These features can protect carbon from spiraling out of control and instead impose less harsh effects like dropping some data points or refusing to accept more data points. However, proper values for those settings are system-specific and require a fair amount of testing to tune. They are useful but they do not fundamentally solve the problem. For that, we'll need more hardware.\n\t\\end{quote}\n\t\n\tThe performance tactics referred in the above description are:\n\t\t\n    	\N
1221	1227	\N	\n\tArchitecturally significant requirements (ASR) are captured in a utility tree where each one of the ASRs are classified in terms of its architectural impact and business value.\n\t\t\n    	\N
1098	1228	\N	\n\tThe two basic contributors for the response time are the processing time and the blocking time. Which tactic for performance may reduce the blocking time\n\t\t\n    	\N
1145	1228	\N	\n\tThe two basic contributors for the response time are the processing time and the blocking time. Which tactic for performance may reduce the blocking time\n\t\t\n    	\N
1219	1228	\N	\n\tThe two basic contributors for the response time are the processing time and the blocking time. Which tactic for performance may reduce the blocking time\n\t\t\n    	\N
1232	1235	\N	\n\tConsider the following fragment in the description of the Graphite system:\n\t\n\t\\begin{quote}\n\t\tImagine that you have 60,000 metrics that you send to your Graphite server, and each of these metrics has one data point per minute. Remember that each metric has its own whisper file on the filesystem. This means carbon must do one write operation to 60,000 different files each minute. As long as carbon can write to one file each millisecond, it should be able to keep up. This isn't too far fetched, but let's say you have 600,000 metrics updating each minute, or your metrics are updating every second, or perhaps you simply cannot afford fast enough storage. Whatever the case, assume the rate of incoming data points exceeds the rate of write operations that your storage can keep up with. How should this situation be handled?\n\t\\end{quote}\n\t\t\t\n    	\N
1158	1236	\N	\n\tJeff Atwood wrote an article in its blog about performance of software systems that is entitled, \\emph{Hardware is Cheap, Programmers are Expensive}. Which performance tactic(s) is he suggesting\n\t\t\n    	\N
1229	1236	\N	\n\tJeff Atwood wrote an article in its blog about performance of software systems that is entitled, \\emph{Hardware is Cheap, Programmers are Expensive}. Which performance tactic(s) is he suggesting\n\t\t\n    	\N
1282	1288	\N	\n\tConsider the following representation of Amazon's architecture (sorry for the figure's layout: \\textbf{save trees})\n\t\t\t\n\t\\begin{center}\n\t\t\\includegraphics[width=80mm]{AmazonArchitecture}\n\t\\end{center}\n\t\n\tWhat is the most relevant architecture style that is used in this figure?\n\t\n    	\N
1209	1457	\N	\n\tConsider a scenario for performance where the arrival of events is stochastic with a distribution where there are peeks of events but the arrival of events over a long period is uniform. The best tactic to apply is\n\t\t\n    	\N
1157	1237	\N	\n\tIn the description of the nginx case study we can read:\n\t\n\t\\begin{quote}\n\t\tnginx's modular architecture generally allows developers to extend the set of web server features without modifying the nginx core. nginx modules come in slightly different incarnations, namely core modules, event modules, phase handlers, protocols, variable handlers, filters, upstreams and load balancers. At this time, nginx doesn't support dynamically loaded modules; i.e., modules are compiled along with the core at build stage.\n\t\\end{quote}\n\t\n\tThe above sentence corresponds to\n\t\t\t\n    	\N
1233	1237	\N	\n\tIn the description of the nginx case study we can read:\n\t\n\t\\begin{quote}\n\t\tnginx's modular architecture generally allows developers to extend the set of web server features without modifying the nginx core. nginx modules come in slightly different incarnations, namely core modules, event modules, phase handlers, protocols, variable handlers, filters, upstreams and load balancers. At this time, nginx doesn't support dynamically loaded modules; i.e., modules are compiled along with the core at build stage.\n\t\\end{quote}\n\t\n\tThe above sentence corresponds to\n\t\t\t\n    	\N
1230	1238	\N	\n\tConsider the modifiability quality and the cost of change.\n\t\t\n    	\N
1243	1244	\N	\n\tWhen describing their system people refer to a part of it as containing a database server. Applying the component-and-connector styles learned in the course we can say that this system uses\n\n    	\N
1240	1245	\N	\n\tIn the Continuous Integration case study can be read\n\t\n\t\\begin{quote}\n\t\tThe space of architectures for continuous integration systems seems to be dominated by two extremes: master/slave architectures, in which a central server directs and controls remote builds; and reporting architectures, in which a central server aggregates build reports contributed by clients. All of the continuous integration systems of which we are aware have chosen some combination of features from these two architectures.\n\t\\end{quote}\n\t\n\tThe tactic that is referred in both architectures is\n\t\t\n    	\N
1065	1246	\N	\n\tConsider the Decomposition architectural style of the Module viewtype\n\t\t\n    	\N
1239	1246	\N	\n\tConsider the Decomposition architectural style of the Module viewtype\n\t\t\n    	\N
1241	1247	\N	\n\tThe Infinispan system can be used as a library, in which case it is embedded into a Java application, or as a server, in which case it is a remote data grid.\n\t\t\n    	\N
1242	1248	\N	\n\tConsider the Component-and-Connector viewtype\n\t\t\n    	\N
1253	1255	\N	\n\tConsider the peer-to-peer architectural style\n\t\t\n    	\N
1161	1258	\N	\n\tIn the Infinispan case study can be read\n\t\n\t\\begin{quote}\n\t\tThis allows applications to theoretically address an unlimited amount of in-memory storage as nodes are added to the cluster, increasing overall capacity.\n\t\\end{quote}\n\t\n\tThe quality that is referred is\n\t\t\n    	\N
1251	1258	\N	\n\tIn the Infinispan case study can be read\n\t\n\t\\begin{quote}\n\t\tThis allows applications to theoretically address an unlimited amount of in-memory storage as nodes are added to the cluster, increasing overall capacity.\n\t\\end{quote}\n\t\n\tThe quality that is referred is\n\t\t\n    	\N
1262	1264	\N	\n\tConsider the two following views\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=100mm]{pipes-and-filters}\n\t\\end{center}\n\t\n\t\t\n    	\N
1261	1265	\N	\n\tIn the Infinispan case study can be read\n\t\n\t\\begin{quote}\n\t\tBefore putting data on the network, application objects need to be serialized into bytes so that they can be pushed across a network, into the grid, and then again between peers. The bytes then need to be de-serialized back into application objects, when read by the application. In most common configurations, about 20\\% of the time spent in processing a request is spent in serialization and de-serialization.\n\t\\end{quote}\n\t\n\tThe above description can motivate a scenario for\n\t\t\n    	\N
1263	1266	\N	\n\tConsider the shared-data style. Which of the following qualities does it support?\n\n    	\N
1260	1267	\N	\n\tIn the Continuous Integration case study can be read\n\t\n\t\\begin{quote}\n\t\tIt takes advantage of the JUnit XML standard for unit test and code coverage reporting to integrate reports from a variety of test tools.\n\t\\end{quote}\n\t\n\tThe referred quality is\n\t\t\n    	\N
1272	1274	\N	\n\tConsider the following distinction between Monoliths and Microservices made by Matin Fowler\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=100mm]{MonolithsVsMicroservices}\n\t\\end{center}\n\t\n\tIf we try to map this figure into a set of views we will need.\n\t\t\t\n    	\N
1271	1276	\N	\n\tConsider the Infinispan system when it is configured as a remote data grid. The relation between the Applications and the Grid is\n\t\t\t\n    	\N
1273	1277	\N	\n\tConsider the following representation of the Buildbot system.\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=80mm]{BuildbotArchitecture}\n\t\\end{center}\n\t\n\tThe architecture style between the Buildbot Master and the Clients is:\n\t\t\t\n    	\N
1269	1278	\N	\n\tConsider the Service-Oriented Architecture architectural style\n\t\t\n    	\N
1280	1284	\N	\n\tIn the description of Infinispan system can be read\n\t\n\t\\begin{quote}\n\t\tInfinispan supports several pluggable cache stores-adapters that can be used to persist data to disk or any form of secondary storage. The current default implementation is a simplistic hash bucket and linked list implementation, where each hash bucket is represented by a file on the filesystem. While easy to use and configure, this isn't the best-performing implementation.\n\t\\end{quote}\n\t\n\tThe architectural style(s) that should be used to illustrate the sentence is (are)\n\t\t\t\n    	\N
1109	1286	\N	\n\tConsider the deployment architectural style of the allocation viewtype.\n\t\t\t\n    	\N
1120	1286	\N	\n\tConsider the deployment architectural style of the allocation viewtype.\n\t\t\t\n    	\N
1281	1286	\N	\n\tConsider the deployment architectural style of the allocation viewtype.\n\t\t\t\n    	\N
1283	1287	\N	\n\tIn the Continuous Integration case can be read\n\t\\begin{quote}\n\t\tBuild notification: The outcomes of builds generally need to be communicated to interested clients, either via pull (Web, RSS, RPC, etc.) or push notification (e-mail, Twitter, etc.) This can include notification of all builds, or only failed builds, or builds that haven't been executed within a certain period.\n\t\\end{quote}\n\t\tThe architectural style used in push notifications is\n\t\t\t\n    	\N
1102	1535	\N	\n\tConsider the Uses architectural style of the Module viewtype\n\t\t\n    	\N
1259	1474	\N	\n\tConsider the Layered architectural style of the Module viewtype\n\t\t\n    	\N
1270	1566	\N	\n\tConsider the work assignment architectural style of the allocation viewtype.\n\t\t\t\n    	\N
1175	1294	\N	\n\tIn the interview Werner Vogels from Amazon gives to Jim Gray, Werner Vogels says that\n\t\n\t\\begin{quote}\n\t\tThe stored data formats are decoupled from the format in which you communicate data items. If there is no need for sharing schemas of the actual storage layout, you can focus on making sure that the service interfaces can evolve in a way that allows you to handle variations of data formats. \n\t\\end{quote}\n\t\n\tWhich means that in the software architecture of Amazon's systems\n\t\t\t\n    	\N
1292	1294	\N	\n\tIn the interview Werner Vogels from Amazon gives to Jim Gray, Werner Vogels says that\n\t\n\t\\begin{quote}\n\t\tThe stored data formats are decoupled from the format in which you communicate data items. If there is no need for sharing schemas of the actual storage layout, you can focus on making sure that the service interfaces can evolve in a way that allows you to handle variations of data formats. \n\t\\end{quote}\n\t\n\tWhich means that in the software architecture of Amazon's systems\n\t\t\t\n    	\N
1293	1295	\N	\n\tConsider the following representation of the CDash system\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=80mm]{DashArchitecture}\n\t\\end{center}\n\t\n\tThe architecture style between the Dashboard and the Clients is:\n\t\t\t\n    	\N
1290	1297	\N	\n\tConsider the install architectural style of the allocation viewtype.\n\t\t\t\n    	\N
1291	1298	\N	\n\tIn the description of Infinispan system can be read\n\t\n\t\\begin{quote}\n\t\tWhen dealing with thread pools to process such asynchronous tasks, there is always a context switching overhead. That threads are not cheap resources is also noteworthy. Allocating appropriately sized and configured thread pools is important to any installation making use of any of the asynchronous features of Infinispan.\n\t\\end{quote}\n\t\n\tThe architectural style that should be used to illustrate the sentence is\n\t\t\t\n    	\N
1320	1332	\N	\n    In the Service Oriented Architecture style it is common to have a\n    specialized component, named \\emph{Enterprise Service Bus} (ESB).\n    The goal of using of an ESB in a system is\n\n    	\N
1321	1333	\N	\n    Consider the following excerpt from the Wikipedia page on\n    \\emph{white-box testing}:\n    \\begin{quote}\n      White-box testing is a method of testing software that tests\n      internal structures or workings of an application, as opposed to\n      its functionality. In white-box testing an internal perspective\n      of the system (including the module's code), as well as\n      programming skills, are required and used to design test\n      cases. The tester chooses inputs to exercise paths through the\n      code and determine the appropriate outputs.\n    \\end{quote}\n  \n    Assuming that you belong to the team testing a complex system and\n    that you are responsible for performing white box tests on the\n    system, which of the following architectural views of the system\n    would be most useful to you?\n\n    	\N
1322	1334	\N	\n\tThe Chromium is a web browser that introduced an innovative architecture. In the Chromium description we can read:\n \n  \\begin{quote}\n    We use separate processes for browser tabs to protect the overall\n    application from bugs and glitches in the rendering engine.  We\n    also restrict access from each rendering engine process to others\n    and to the rest of the system.  In some ways, this brings to web\n    browsing the benefits that memory protection and access control\n    brought to operating systems.\n\n    We refer to the main process that runs the UI and manages tab and\n    plugin processes as the "browser process" or "browser."  Likewise,\n    the tab-specific processes are called "render processes" or\n    "renderers."  The renderers use the WebKit open-source layout\n    engine for interpreting and laying out HTML.\n  \\end{quote}\n  \n  Which architectural style should we use to represent this aspect of Chromium?\n\n    	\N
1299	1335	\N	\n  Consider that a software development team uses an agile methodology\n  such as XP (Extreme Programming), where no documentation is\n  produced.  Then, the systems developed by that team\n\n    	\N
1300	1336	\N	\n\tThe requirements impact on how an architecture is designed\n\n    	\N
1301	1337	\N	\n\t  Consider the following scenario\n\t  \n\t  \\begin{quote}\n\t\t  If one of the application servers fails to respond when the system is in its normal operation state, the load balancer should redirect requests to another application server.\n\t  \\end{quote}\n\t  \n      	\N
1303	1339	\N	\n\t  Consider the following fragment of the \\emph{MediaWiki} system description:\n\t  \\newline\n\t  \n\t  \\emph{To optimize the delivery of JavaScript and CSS assets, the ResourceLoader module was developed to optimize delivery of JS and CSS. Started in 2009, it was completed in 2011 and has been a core feature of MediaWiki since version 1.17. ResourceLoader works by loading JS and CSS assets on demand, thus reducing loading and parsing time when features are unused, for example by older browsers. It also minifies the code, groups resources to save requests, and can embed images as data URIs}\n\t  \\newline\n\t  \n\t  The \\emph{ResourceLoader} supports a quality\n    \n    	\N
1304	1340	\N	\n   In which performance tactic it may occur that not all the inputs are processed\n\n    	\N
1306	1342	\N	\n    The main tactic associated with the layered architectural style is:\n\n    	\N
1137	1358	\N	\n\t Suppose that you are implementing a module in a system that has a two layered architecture.\n\t Knowing that your module belongs to the upper layer (assuming the usual notation\n\t for the layer style), this means that you\n\t \n\t 	\N
1305	1448	\N	\n    Several of the cases studied in this course had scalability\n    requirements.  That means that those systems should be designed in\n    such a way that they\n\n    	\N
1289	1484	\N	\n\tConsider the following view of the Adventure Builder system\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=80mm]{AdventureBuilder-SOA}\n\t\\end{center}\n\t\n\tIn this view the following architectural styles are used\n\t\n\t\t\n    	\N
1318	1536	\N	\n\tIn the description of the Gnutella system can be read:\n\t\n\t\\begin{quote}\n\t\tThe topology of the system changes at runtime as peer components connect and disconnect to the network.\n\t\\end{quote}\n\t\n    	\N
1302	1625	\N	\n\t  The availability quality can be supported by a voting tactic in order to identify faults of\n\n      	\N
960	1647	\N	\n\tThe Pipe-and-Filter style allows composition of filters \n\t\n\n    	\N
1168	1647	\N	\n\tThe Pipe-and-Filter style allows composition of filters \n\t\n\n    	\N
1319	1647	\N	\n\tThe Pipe-and-Filter style allows composition of filters \n\t\n    	\N
1324	1347	\N	\n\tConsider the following description of the behavior of Twitter\n\t\n\t\\begin{quote}\n\t\tSolution is a write based fanout approach. Do a lot of processing when tweets arrive to figure out where tweets should go. This makes read time access fast and easy. Don't do any computation on reads. With all the work being performed on the write path ingest rates are slower than the read path, on the order of 4000 QPS.\n\t\\end{quote}\n\t\n\tTo describe the performance quality of this behavior, and considering that the number of reads is much higher than the number of writes, we need to have a view that includes\n\t\n\t	\N
1326	1349	\N	\n\tIn the interview Werner Vogels from Amazon gives to Jim Gray, Werner Vogels says that\n\t\n\t\\begin{quote}\n\t\tThe stored data formats are decoupled from the format in which you communicate data items. If there is no need for sharing schemas of the actual storage layout, you can focus on making sure that the service interfaces can evolve in a way that allows you to handle variations of data formats. \n\t\\end{quote}\n\t\n\tWhich means that in the software architecture of Amazon's systems\n\t\t\t\n    	\N
1327	1350	\N	\n\t  Consider the following representation of a system following a microservices architecture,\n\t  \n  \t\\begin{center}\n  \t\t\\includegraphics[width=140mm]{../MicroservicesArchitecture}\n  \t\\end{center}\n\t  \n\t  After an invocation through the REST API\n\t  \n      	\N
1365	1389	\N	\n    Consider the following modifiability scenario\n\t\n\t\\begin{quote}\n\t\tThe effort necessary to successfully port the system to execute in a new browser should not be higher than 5 person/month.\n\t\\end{quote}\n\n    	\N
1366	1390	\N	\n    The main tactic associated with the aspects architectural style is:\n\n    	\N
1367	1391	\N	\n    In the HDFS system, in the stakeholders perspective, the use of low cost servers to build the clusters is:\n\n    	\N
1368	1392	\N	\n    In HDFS, during normal operation DataNodes use the heartbeat tactic\n\n    	\N
1360	1394	\N	\n  As part of the process of creating an architecture, we talked about\n  a framework for capturing some of the requirements for a system.  In\n  this context, \\textbf{concrete scenarios} are used for\n\n  	\N
1361	1395	\N	\n\t  Consider the following availability scenario\n\t  \n\t  \\begin{quote}\n\t\t If one of the application servers fails to respond to a request when the system is in its normal operation state, the system should notify the operator and continue to operate normally.\n\t  \\end{quote}\n\t  \n      	\N
1317	1396	\N	\n    Suppose that, to satisfy an availability requirement related with\n    the occurrence of faults at the network infrastructure used by\n    your system, you want to use the tactic named \\emph{Ping/Echo}.\n    How does the use of that tactic manifests in the architectural\n    views of your system?\n\n    	\N
1362	1396	\N	\n    Suppose that, to satisfy an availability requirement related with\n    the occurrence of faults at the network infrastructure used by\n    your system, you want to use the tactic named \\emph{Ping/Echo}.\n    How does the use of that tactic manifests in the architectural\n    views of your system?\n\n    	\N
1363	1397	\N	\n\tConsider the following description of the \\emph{Infinispan} system:\n\t\n\t\\begin{quote}\n\t\tBefore putting data on the network, application objects need to be serialized into bytes so that they can be pushed across a network, into the grid, and then again between peers. The bytes then need to be de-serialized back into application objects, when read by the application. In most common configurations, about 20\\% of the time spent in processing a request is spent in serialization and de-serialization.\n\t\\end{quote}\n\t\n\tThe above description can motivate a scenario for\n\t\t\n    	\N
1364	1398	\N	\n   In which performance tactic it can occur that the inputs are not completely processed, even though they always start being processed\n\n    	\N
1379	1399	\N	\n    Currently, the most popular architecture for an enterprise\n    application is composed of 3 tiers.  The three tiers are\n\n    	\N
1381	1400	\N	\n\tThe Service-Oriented Architecture style improves interoperability because\n\t\n    	\N
450	1401	\N	\n  Consider a system that will require a significative configuration effort during deployment, because it provides several variations of the same functionalities and it is necessary to choose which functionalities better fit in each case. The most helpful architectural view for this situation is\n \n  	\N
463	1401	\N	\n  Consider a system that will require a significative configuration effort during deployment, because it provides several variations of the same functionalities and it is necessary to choose which functionalities better fit in each case. The most helpful architectural view for this situation is\n \n  	\N
1382	1401	\N	\n  Consider a system that will require a significative configuration effort during deployment, because it provides several variations of the same functionalities and it is necessary to choose which functionalities better fit in each case. The most helpful architectural view for this situation is\n \n  	\N
1383	1402	\N	\n\tConsider the following description of the behavior of Twitter\n\t\n\t\\begin{quote}\n\t\tSolution is a write based fanout approach. Do a lot of processing when tweets arrive to figure out where tweets should go. This makes read time access fast and easy. Don't do any computation on reads. With all the work being performed on the write path ingest rates are slower than the read path, on the order of 4000 QPS.\n\t\\end{quote}\n\t\n\tTo describe this behavior we need to \n\t\n\t	\N
1384	1403	\N	\n\tConsider the following description of the behavior of Twitter ingestion mechanisms\n\t\n\t\\begin{quote}\n\t\tWrite. when a tweet  comes in there's an O(n) process to write to Redis clusters, where n is the number of people following you. Painful for Lady Gaga and Barack Obama where they are doing 10s of millions of inserts across the cluster. All the Redis clusters are backing disk, the Flock cluster stores the user timeline to disk, but usually timelines are found in RAM in the Redis cluster.\n\t\\end{quote}\n\t\n\tThe view that represents this behavior should be of the\n\t\n\t	\N
1370	1405	\N	\n\tWhen designing an architecture requirements can be split into functional, quality attributes, and constraints. Functional requirements have impact on:\n\t\t\n    	\N
1279	1494	\N	\n\tConsider the following view of the Adventure Builder system\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=100mm]{AdventureBuilder-Tiers}\n\t\\end{center}\n\t\n\tIn this view the following architectural styles are used\n\t\t\n    	\N
1325	1530	\N	\n\tConsider the Microservice architectural style. Which of the following sentences \\textbf{does not} describe an advantage of microservices?\n\t\t\t\n    	\N
1369	1635	\N	\n  A software system is usually described using different architectural views\n\n  	\N
1371	1406	\N	\n    Suppose that you are developing a software architecture for a new\n    large scale system and that you intend to resort extensively to\n    third party subcontractors for the development of various parts of\n    the system.  Which architectural styles are most useful to plan\n    the development of the system in this case?\n\n    	\N
444	1407	\N	\n  To achieve a faster time-to-market, software companies are\n  increasingly using a strategy of incremental releases of their\n  software, where each new release has a set of new features.  Which\n  architectural style is better to analyse whether the system's\n  software architecture is adequate for the planned incremental\n  releases?\n \n  	\N
1043	1407	\N	\n  To achieve a faster time-to-market, software companies are\n  increasingly using a strategy of incremental releases of their\n  software, where each new release has a set of new features.  Which\n  architectural style is better to analyse whether the system's\n  software architecture is adequate for the planned incremental\n  releases?\n\n  	\N
1372	1407	\N	\n  To achieve a faster time-to-market, software companies are\n  increasingly using a strategy of incremental releases of their\n  software, where each new release has a set of new features.  Which\n  architectural style is better to analyse whether the system's\n  software architecture is adequate for the planned incremental\n  releases?\n \n  	\N
1373	1408	\N	\n    According to the document that describes nginx:\n    \\begin{quote}\n      nginx's modular architecture generally allows developers to\n      extend the set of web server features without modifying the\n      nginx core.  nginx modules come in slightly different\n      incarnations, namely core modules, event modules, phase\n      handlers, protocols, variable handlers, filters, upstreams and\n      load balancers.  [...]  Event modules provide a particular\n      OS-dependent event notification mechanism like kqueue or epoll.\n      Protocol modules allow nginx to communicate through HTTPS,\n      TLS/SSL, SMTP, POP3 and IMAP.\n    \\end{quote}\n    Which architectural style is more adequate to represent the\n    information presented above?\n\n    	\N
1374	1409	\N	\n  \tConsider the following architectural view of the Adventure Builder system, designed around the Order Processing Center\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=120mm]{../AdventureBuilderCandC}\n\t\\end{center}\n\t\n\tThe views \\textbf{does not} allow the reason about the quality of\n\n   \t	\N
1375	1410	\N	\n  \tConsider the following requirement for availability of the Adventure Builder system\n\t\n\t\\begin{quote}\n\t\tThe Consumer Web site is available to the user 24x7. If an instance of OPC application fails, the fault is detected and the system administrator is notified in 30 seconds; the system continues taking order requests; another OPC instance is automatically created; and data remains in consistent state.\n\t\\end{quote}\n\t\n\tIn order to support this quality it is necessary to \n\n   \t	\N
1376	1411	\N	\n\tConsider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n\t\n\t\\begin{quote}\n\t\tTo support iPhone/iPad/Android version with sync, which allows offline use of the application in the mobile device and data synchronization to occur when a connection is available\n\t\\end{quote}\n\t\n\tThis requirement requires a change of\n\t\n    	\N
1377	1412	\N	\n    To analyse the performance of a system\n\n    	\N
1387	1416	\N	\n\t  Consider the following representation of a system following a microservices architecture,\n\t  \n  \t\\begin{center}\n  \t\t\\includegraphics[width=140mm]{../MicroservicesArchitecture}\n  \t\\end{center}\n\t  \n      	\N
1388	1417	\N	\n\t  Consider the following data model\n\t  \n  \t\\begin{center}\n  \t\t\\includegraphics[width=80mm]{../ProductDomainModel}\n  \t\\end{center}\n\t  \n      	\N
1380	1418	\N	\n\tThe Chromium is a web browser that introduced an innovative architecture. In the Chromium description we can read:\n\n  \\begin{quote}\n    Chromium is a large and complex cross-platform product.  We try to\n    share as much code as possible between platforms, while\n    implementing the UI and OS integration in the most appropriate way\n    for each.  While this gives a better user experience, it adds\n    extra complexity to the code.  This document describes the\n    recommended practices for keeping such cross-platform code clean.\n\n    We use a variety of different file naming suffixes to indicate\n    when a file should be used:\n    \\begin{itemize}\n    \\item Windows files use the \\texttt{\\_win} suffix.\n    \\item Cocoa (Mac UI) files use the \\texttt{\\_cocoa} suffix, and lower-level Mac files use the \\texttt{\\_mac} suffix.\n    \\item Linux files use \\texttt{\\_linux} for lower-level files, \\texttt{\\_gtk} for GTK-specific files, and \\texttt{\\_x} for X Windows (with no GTK) specific files.\n    \\item Posix files shared between Mac and Linux use the \\texttt{\\_posix} suffix.\n    \\item Files for Chrome's ``Views'' UI (on Windows and experimental GTK) layout system use the \\texttt{\\_views} suffix.\n   \\end{itemize}\n\n    The separate front-ends of the browser are contained in their own directories:\n    \\begin{itemize}\n    \\item Windows Views (and the experimental GTK-views): \\\\\n      \\texttt{chrome/browser/ui/views}\n    \\item Linux GTK: \\texttt{chrome/browser/gtk}\n    \\item Mac: \\texttt{chrome/browser/cocoa}\n    \\end{itemize}\n  \\end{quote}\n  \n  Which architectural style should we use to represent this aspect of Chromium?\n\n    	\N
1423	1424	\N	\n\tConsider the following figure that presents the Hadoop cluster topology.\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=100mm]{HadoopClusterTopology}\n\t\\end{center}\n\t\n    	\N
1419	1425	\N	\n  The software architecture of a system\n\n    	\N
1421	1426	\N	\n\tA general scenario for a quality attribute\n\n    	\N
1420	1427	\N	\n\tIn the description of the Twitter system we can read:\n\t\n\t\\begin{quote}\n\t\t Twitter is optimized to be highly available on the read path on the home timeline. Read path is in the 10s of milliseconds.\n\t\\end{quote}\n\t\n\tThis is achieved because:\n\n    	\N
1422	1428	\N	\n\tConsider the following figure that presents a Proxy Server, which collapses requests from different users.\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=120mm]{ProxyServer}\n\t\\end{center}\n\t\n\t\n    	\N
1433	1434	\N	\n\tIn the description of Hadoop we can red.\n\t\n\t\\begin{quote}\n\t\tThe CheckpointNode periodically combines the existing checkpoint and journal to create a new checkpoint and an empty journal. The CheckpointNode usually runs on a different host from the NameNode since it has the same memory requirements as the NameNode.\n\t\\end{quote}\n\t\n    	\N
1429	1435	\N	\n\tAn architectural tactic for a system describes\n\n    	\N
1378	1667	\N	\n\tThe Peer-to-Peer architectural style provides high scalability and availability. In the context of a file sharing system  \n\t\n    	\N
1431	1436	\N	\n\tIn the description of the Twitter system we can read:\n\t\n\t\\begin{quote}\n\t\tOn the search timeline:\n\t\t Write. when a tweet comes in and hits the Ingester only one Early Bird machine is hit. Write time path is O(1). A single tweet is ingested in under 5 seconds between the queuing and processing to find the one Early Bird to write it to.\n\t\\end{quote}\n\t\n    	\N
1430	1437	\N	\n\tIn his article, \\emph{Who Needs and Architect?}, Martin Fowler cites Ralph Johnson definition:\n\t\n\t\\begin{quote}\n\t\tArchitecture is the set of decisions that must be made early in a project.\n\t\\end{quote}\n\t\n\tIn his opinion:\n\t\t\n    	\N
1432	1438	\N	\n\tConsider the following figure that presents a Queue where client applications write their requests to be served by a server.\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=130mm]{Queues}\n\t\\end{center}\n\t\n\t\n    	\N
1441	1444	\N	\n\tIn a modifiability scenario the environment can be characterized as design time, compile time, build time, initiation time, and runtime.\n\t\n    	\N
1453	1456	\N	\n    The architecture of the HDFS system only allows the existence of\n    one NameNode.  Given the responsibilities of this component and\n    the current architecture of HDFS, what would be the consequences\n    of adding the possibility of having replicas of the NameNode in\n    the system?\n\n    	\N
1450	1457	\N	\n\tConsider a scenario for performance where the arrival of events is stochastic with a distribution where there are peeks of events but the arrival of events over a long period is uniform. The best tactic to apply is\n\t\t\n    	\N
1460	1464	\N	\n\tConsider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n\t\n\t\\begin{quote}\n\t\tTo support multi-platform (Mac, Windows, Linux)\n\t\\end{quote}\n\t\n\tThis requirement requires a change of\n\t\n    	\N
1463	1467	\N	\n\tConsider the following modifiability scenario for the Adventure Builder system \n\t\n\t\\begin{quote}\n\t\tA new business partner (airline, lodging, or activity provider) that uses its own web services interface is added to the system in no more than 10 person-days of effort for the implementation. The business goal is easy integration with new business partners.\n\t\\end{quote}\n\t\n\tand the following architectural view\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=120mm]{AdventureBuilderHighLevelVIew}\n\t\\end{center}\n\t\n    	\N
1471	1474	\N	\n\tConsider the Layered architectural style of the Module viewtype\n\t\t\n    	\N
1469	1475	\N	\n\tConsider the module viewtype views of the DVDCatalog application. The architect knows about a new requirement \n\t\n\t\\begin{quote}\n\t\tTo allow the share of catalogs with family and friends, including some access control. \n\t\\end{quote}\n\t\n\tThis requirement requires \n\t\n    	\N
1470	1476	\N	\n\tA function call is not necessarily a uses relation of the Uses architectural style of the Module viewtype because\n\t\n    	\N
1473	1477	\N	\n\tConsider the following performance/scalability scenario for the Adventure Builder system \n\t\n\t\\begin{quote}\n\t\tUp to 500 users click to see the catalog of adventure packages following a random distribution over 1 minute; the system is under normal operating conditions; the maximal latency to serve the first page of content is under 5 seconds; average latency for same is less than 2 seconds. If required, the system should easily support an increase in the number of simultaneous requests while maintaining the same latency per request.\n\t\\end{quote}\n\t\n\tand the following architectural view\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=105mm]{AdventureBuilderHighLevelVIew}\n\t\\end{center}\n\t\n    	\N
1472	1478	\N	\n\tIn Facebook it is not possible to have the information about more that one bilion users in a single disk. Therefore, a sharding technique is applied, where the persistent information is split between several database servers, and applications are routed to the right servers for queries and updates. To describe this architecture\n\t\n    	\N
1483	1484	\N	\n\tConsider the following view of the Adventure Builder system\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=120mm]{AdventureBuilder-SOA}\n\t\\end{center}\n\t\n\tIn this view the following architectural styles are used\n\t\n\t\t\n    	\N
1479	1486	\N	\n\tThe connectors on component-and-connector view\n\t\n\t	\N
1482	1488	\N	\n    In Graphite system  the \\emph{receiver} and the \\emph{writer threads} support asynchronous writing of metrics to optimize disk accesses. The interaction between these two components follow the architectural style\n\n    	\N
1449	1616	\N	\n    There are several tactics to satisfy availability requirements,\n    which may be applied depending on the concrete requirement that we\n    want to satisfy.  Assuming that you want to detect faults of type\n    \\emph{response} in your system, which tactic is more adequate?\n\n    	\N
1459	1535	\N	\n\tConsider the Uses architectural style of the Module viewtype\n\t\t\n    	\N
1481	1676	\N	\n\tThe Tiers architectural style\n\t\n    	\N
446	1646	\N	\n\tConsider the concept of interface delegation \n\t\t\n    	\N
1442	1624	\N	\n    In the Graphite system the component \\emph{carbon} provides to \\emph{webapp} components an access interface to the \\emph{buffers} in order to improve the quality of\n\n    	\N
1118	1565	\N	\n\t  Which quality, or qualities, of the Graphite system are described by the sentence: \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL.}\n\n    	\N
1493	1494	\N	\n\tConsider the following view of the Adventure Builder system\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=140mm]{AdventureBuilder-Tiers}\n\t\\end{center}\n\t\n\tIn this view the following architectural styles are used\n\t\t\n    	\N
1111	1496	\N	\n\t  A high-level component-and-connect view of Graphite system can be designed using only the architectural style(s)\n\n    	\N
1492	1496	\N	\n\t  A high-level component-and-connect view of Graphite system can be designed using only the architectural style(s)\n\n    	\N
506	1498	\N	\n\tThe Java web servers, like Tomcat, use threads to process requests. For each request they create (or reuse) a thread to process it.\n\tTo draw a architectural view that describes this behaviour we should use \n\t\n    	\N
1047	1520	\N	\n\t  Typically, Instant Messaging clients have a window to list the contacts of the user, and\n\t  show in that window the status of each contact (whether it is available, unavailable, busy,\n\t  etc). Given that the status of a contact may be changed at any time, and that the contact's\n\t  status is given by the Instant Messaging application of that contact, which architectural\n\t  style represents best the interaction pattern between these components?\n\n\t   	\N
1074	1520	\N	\n\t  Typically, Instant Messaging clients have a window to list the contacts of the user, and\n\t  show in that window the status of each contact (whether it is available, unavailable, busy,\n\t  etc). Given that the status of a contact may be changed at any time, and that the contact's\n\t  status is given by the Instant Messaging application of that contact, which architectural\n\t  style represents best the interaction pattern between these components?\n\n\t   	\N
1505	1520	\N	\n\t  Typically, Instant Messaging clients have a window to list the contacts of the user, and\n\t  show in that window the status of each contact (whether it is available, unavailable, busy,\n\t  etc). Given that the status of a contact may be changed at any time, and that the contact's\n\t  status is given by the Instant Messaging application of that contact, which architectural\n\t  style represents best the interaction pattern between these components?\n\n\t   	\N
1507	1521	\N	\n\tConsider the following fragment in the description of the Graphite system.\n\t\n\t\\begin{quote}\n\t\tThe Graphite webapp allows users to request custom graphs with a simple URL-based API. Graphing parameters are specified in the query-string of an HTTP GET request, and a PNG image is returned in response. \n\t\\end{quote}\n\t\n\tTo describe this scenario it should be designed a view that applies the following architectural style\n\t\t\n    	\N
1506	1522	\N	\n\tConsider the following figure that presents a Proxy Server that collapses requests from different users.\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=120mm]{1-proxy-server}\n\t\\end{center}\n\t\n\t\n    	\N
1516	1523	\N	\n\tIn the context of the FenixEdu case study, the business case was to\n\n    	\N
1499	1524	\N	\n\tThe stimulus of an availability scenario is\n\t\t\n    	\N
1500	1525	\N	\n\tA response measure of a performance scenario is \n\t\t\n    	\N
1501	1526	\N	\n\tThe layered architectural style applies the modifiability architectural tactic of\n\t\t\n    	\N
1502	1527	\N	\n\tOne of the advantages of having views of the module viewtype is that they allow to do an impact analysis to predict the effect of modifying the system. The architectural style of the module viewtype which provides richer information for this impact analysis is\n\t\t\n    	\N
1503	1528	\N	\n  Consider that a chess game should\n  provide an automatic and intelligent chess player, and that to\n  implement that player we will use some of the many chess engines\n  already available in the market.  Moreover, the system should allow\n  the user to choose which engine to use for each new game.  Given\n  these requirements, which of the architectural styles from the\n  module viewtype are best suited to satisfy them?\n \n  	\N
1517	1529	\N	\n\tIn a microservices architecture, aggregates are used as a unit of processing\n\n    	\N
1348	1530	\N	\n\tConsider the Microservice architectural style. Which of the following sentences \\textbf{does not} describe an advantage of microservices?\n\t\t\t\n    	\N
1518	1530	\N	\n\tConsider the Microservice architectural style. Which of the following sentences \\textbf{does not} describe an advantage of microservices?\n\t\t\t\n    	\N
1508	1531	\N	\n\tConsider the following usability scenario of the Catalog of DVDs case study\n\t\n\t\\begin{quote}\n\t\tThe user intends to have up-to-date info about the movies and the system informs the user that the existing sources have new information about one of his DVDs, which helps to maintain an up-to-date catalog. \n\t\\end{quote}\n\t\n\tThe tactic used to fulfill this scenario is\n\t\t\n    	\N
1509	1532	\N	\n\tConsider the following view of the Adventure Builder case study that applies the tiers architectural style \n\t\n\t\\centering\n\t\\includegraphics[width=100mm]{1-adventure-tiers}\n\t\t\n    	\N
1510	1533	\N	\n\tConsider the following view of the Pulse case study \n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=120mm]{1-pulse-multiple-copies-computation}\n\t\\end{center}\n\t\n\tThis view provides a solution that uses the following tactic\n\t\t\t\n    	\N
514	1534	\N	\n\tIn the description of architecture of the OrderPad case study, it can be read that the updates the user does on the OrderPad when it is offline are not lost. This availability quality is achieved through a\t\n\n  	\N
1511	1534	\N	\n\tIn the description of architecture of the OrderPad case study it can be read that the updates the user does on the OrderPad when it is offline are not lost. This availability quality is achieved through a\t\n\n  	\N
1512	1535	\N	\n\tConsider the Uses architectural style of the Module viewtype\n\t\t\n    	\N
1513	1536	\N	\n\tIn the description of the Gnutella system can be read:\n\t\n\t\\begin{quote}\n\t\tThe topology of the system changes at runtime as peer components connect and disconnect to the network.\n\t\\end{quote}\n\t\n    	\N
1514	1537	\N	\n  In the software architecture of a system, the Deployment architectural style of the allocation viewtype is\n  best suited for\n\n    	\N
1515	1538	\N	\n\tConsider a web application that was implemented using three layers: presentation, domain logic, and data access. How are these layers mapped into the components if it is a rich interface application.\n\t\t\t\n    	\N
1491	1655	\N	\n\tIn the Publish-Subscribe architectural style \n\t\n    	\N
471	1646	\N	\n\tConsider the concept of interface delegation \n\t\t\n    	\N
1489	1646	\N	\n\tConsider the concept of interface delegation \n\t\t\n    	\N
1557	1559	\N	\n\tConsider the following decomposition of a domain model into 3 aggregates. If, instead of this decomposition, \\texttt{Customer} and \\texttt{Order} were in the same aggregate  \n\t\n\t\\centering\n\t\\includegraphics[width=120mm]{1-aggregate}\n\n    	\N
1539	1560	\N	\n\tAn availability tactic to prevent faults is \n\t\t\n    	\N
1540	1561	\N	\n\tA performance tactic to control resource demand is \n\t\t\n    	\N
1385	1562	\N	\n\tConsider the following definition of Microservice architectural style by Martin Fowler\n\t\n\t\\begin{quote}\n\t\tThe microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies.\n\t\\end{quote}\n\t\n\tTo represent an architecture based on Microservices \n\t\t\t\n    	\N
1414	1562	\N	\n\tConsider the following definition of Microservice architectural style by Martin Fowler\n\t\n\t\\begin{quote}\n\t\tThe microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies.\n\t\\end{quote}\n\t\n\tTo represent an architecture based on Microservices \n\t\t\t\n    	\N
1558	1562	\N	\n\tConsider the following definition of Microservice architectural style by Martin Fowler\n\t\n\t\\begin{quote}\n\t\tThe microservice architectural style is an approach to developing a single application as a suite of small services, each running in its own process and communicating with lightweight mechanisms, often an HTTP resource API. These services are built around business capabilities and independently deployable by fully automated deployment machinery. There is a bare minimum of centralized management of these services, which may be written in different programming languages and use different data storage technologies.\n\t\\end{quote}\n\t\n\tTo represent an architecture based on Microservices \n\t\t\t\n    	\N
1541	1563	\N	\n\tA response measure of a modifiability scenario is\n\t\t\n    	\N
1542	1564	\N	\n\tConsider the module viewtype views of the Catalog of DVD application. The architect knows about a new requirement \n\t\n\t\\begin{quote}\n\t\tTo support iPhone/iPad/Android version with sync, which allows offline use of the application in the mobile device and data synchronization to occur when a connection is available\n\t\\end{quote}\n\t\n\tThis requirement requires a change of\n\t\n    	\N
1547	1565	\N	\n\t  Which quality, or qualities, of the Graphite system are described by the sentence: \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL.}\n\n    	\N
1049	1566	\N	\n\tConsider the work assignment architectural style of the allocation viewtype.\n\t\t\t\n    	\N
1548	1566	\N	\n\tConsider the Work Assignment architectural style of the allocation viewtype.\n\t\t\t\n    	\N
1546	1567	\N	\n    Consider the following figure that presents a Image Hosting System.\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=120mm]{1-image-hosting}\n\t\\end{center}\n\t\n\tBy adding another Image File Storage component, which contains a redundant copy of the data and provides read access to the clients, but without guaranteeing a ACID transactional behavior between reads and writes, it improves the quality(ies) of\n\t\n    	\N
1108	1571	\N	\n    Suppose that you are developing the software architecture of a new\n    system for an organization composed of several organizational\n    units, each one with its own information systems, which have been\n    developed independently of each other over the course of several\n    years and depending on the particular needs of each unit.  Your\n    system has the goal of integrating the various existing systems,\n    providing in this way not only a unified view of how the\n    organization works, but also allowing the creation of new\n    processes within the organization that involve more than one unit.\n    Which architectural style is better suited to design such a\n    system?\n\n    	\N
478	1577	\N	\n\tConsider that you intend to develop a system where it is necessary to change the emails received by the server (for instance, to remove potential virus or URLs for phishing sites). The goal is that each email is processed by this system before it is sent to other servers or it is stored locally. Additionally, the system should be easily modified to support new kinds of transformations. Which style is more suitable to satisfy these requirements? \n\n    	\N
1480	1577	\N	\n\tConsider that you intend to develop a system where it is necessary to change the emails received by the server (for instance, to remove potential virus or URLs for phishing sites). The goal is that each email is processed by this system before it is sent to other servers or it is stored locally. Additionally, the system should be easily modified to support new kinds of transformations. Which style is more suitable to satisfy these requirements? \n\n    	\N
1671	1674	\N	\n\tIn the context of the \\emph{Graphite} case study, consider the following view that represents the internal behavior of the \\emph{Carbon} component, where the components \\texttt{r1,... , rn, w} are threads and \\texttt{q1, ..., qn} are buffers. This view shows the Graphite's architecture support of\n\t\n\t\\centering\n\t\\includegraphics[width=120mm]{graphite-carbon}\n\n    	\N
1552	1571	\N	\n    Suppose that you are developing the software architecture of a new\n    system for an organization composed of several organizational\n    units, each one with its own information systems, which have been\n    developed independently of each other over the course of several\n    years and depending on the particular needs of each unit.  Your\n    system has the goal of integrating the various existing systems,\n    providing in this way not only a unified view of how the\n    organization works, but also allowing the creation of new\n    processes within the organization that involve more than one unit.\n    Which architectural style is better suited to design such a\n    system?\n\n    	\N
1555	1575	\N	\n\tConsider the architecture of the Morrison's OrderPad. The connector between the client component, executing in the Pad, and the server component, executing in the OrderPadDatabase\n\t\n    	\N
1544	1576	\N	\n\tOne of the advantages of having views of the module viewtype is that they allow to do a traceability analysis of requirements, how the functional requirements of the system are supported by module responsibilities. The modifiability tactic that is involved in this mapping is\n\t\t\n    	\N
449	1577	\N	\n\tConsider that you intend to develop a system where it is necessary to change the emails received by the server (for instance, to remove potential virus or URLs for phishing sites). The goal is that each email is processed by this system before it is sent to other servers or it is stored locally. Additionally, the system should be easily modified to support new kinds of transformations. Which style is more suitable to satisfy these requirements? \n\n    	\N
1545	1577	\N	\n\tConsider that you intend to develop a system where it is necessary to change the emails received by the server (for instance, to remove potential virus or URLs for phishing sites). The goal is that each email is processed by this system before it is sent to other servers or it is stored locally. Additionally, the system should be easily modified to support new kinds of transformations. Which style is more suitable to satisfy these requirements? \n\n    	\N
1543	1578	\N	\n\tConsidered the following two views of a system that receive a stream of character and produce the same stream where the characters are alternately uppercase and lowercase.\n\t\n\t\\centering\n\t\\includegraphics[width=120mm]{1-module-and-cc}\n\t\t\n    	\N
1580	1584	\N	\n\tIn the Architect Elevator article by Gregor Hohpe can be read:\n\t\n\t\\begin{quote}\n\t\tFinding the appropriate context requires the architect to visit many floors of the organization.\n\t\\end{quote}\n\t\n\tThis sentence reflects the fact that an architecture is\n\n    	\N
1583	1585	\N	\n\tConsider the following scenario for performance\n\t\n\t\\begin{quote}\n\t\tDuring the enrollment period the FenixEDU system should be able to completely enroll 5.000 students in less than 30 minutes.\n\t\\end{quote}\n\t\n    	\N
1581	1586	\N	\n\tIn the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:\n\t\n\t\\begin{quote}\n\t\tThe microservice approach to division ..., splitting up into services organized around business capability. Such services take a broad-stack implementation of software for that business area, including user-interface, persistent storage, and any external collaborations. Consequently the teams are cross-functional, including the full range of skills required for the development: user-experience, database, and project management.\n\t\\end{quote}\n\t\n\tConsidering the architecture influence cycle, which influence factor it is being considered?\n\n    	\N
1582	1587	\N	\n\tConsider the following figure that presents an architectural view of an \\emph{Image Hosting Application} which resulted from the enrichment of another architectural view by adding another \\emph{Image File Storage} pair, in the figure they are distinguished by 1 and 2. \n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=100mm]{ScalablePartitioning}\n\t\\end{center}\n\t\n\tWhich quality results from this enrichment, that was not provided by the previous version of the architecture?\n\t\n    	\N
1592	1594	\N	\n\tConsider the following figure that presents a Queue where client applications write their requests to be processed by a server (asynchronous) and compare with another architectural design (synchronous) where a thread is associated with each request.\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=100mm]{Queues}\n\t\\end{center}\n\t\t\n    	\N
1589	1595	\N	\n\tIn the Architect Elevator article by Gregor Hohpe can be read:\n\t\n\t\\begin{quote}\n\t\tOnce a developer approached our architecture team with an application that had "significant scalability demands". A quick look at the architecture diagram revealed numerous components communicating via XML messages. When I pointed out that this may be the very reason for the performance concerns, I was quickly informed that this was an architecture decision and couldn't be changed. Assuming the architects are smart and well-intentioned, they may have thought about interoperability when they made this decision but may be unaware of the negative impact on run-time performance and development velocity.\n\t\\end{quote}\n\t\n\tFrom this sentence we can conclude that\n\t\t\n    	\N
1590	1596	\N	\n\tIn the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:\n\t\n\t\\begin{quote}\n\t\tAs well as the fact that services are independently deployable and scalable, each service also provides a firm module boundary, even allowing for different services to be written in different programming languages. They can also be managed by different teams.\n\t\\end{quote}\n\t\n\tWhich is not necessarily an advantage of being independently deployable and scalable?\n\n    	\N
1591	1597	\N	\n\tConsider the following figure that presents an architectural view of an \\emph{Image Hosting Application}. \n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=100mm]{ScalablePartitioning}\n\t\\end{center}\n\t\t\n    	\N
1593	1598	\N	\n\tWhich of the following tactics is not related with the management of resources\n\t\n    	\N
1602	1604	\N	\n\tConsider the following figure that presents a Queue where client applications write their requests to be processed by a server (asynchronous) and compare with another architectural design (synchronous) where a thread is associated with each request.\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=100mm]{Queues}\n\t\\end{center}\n\t\n\tConsider a situation where the server that processes the tasks crashes\n\t\t\n    	\N
1599	1605	\N	\n\tConsider the following figure that presents an architectural view of an \\emph{Image Hosting Application}. \n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=100mm]{ScalablePartitioning}\n\t\\end{center}\n\t\n\tThe replication between the Image File Storage \\emph{n} and Image File Storage \\emph{nb}\n\t\t\n    	\N
1600	1606	\N	\n\tIn the description of the Microservices Architecture by James Lewis and Martin Fowler can be read:\n\t\n\t\\begin{quote}\n\t\tDecentralizing responsibility for data across microservices has implications for managing updates. The common approach to dealing with updates has been to use transactions to guarantee consistency when updating multiple resources. This approach is often used within monoliths.\n\t\\end{quote}\n\t\n\tWhat is the impact of decentralizing responsibility for data across microservices?\n\n    	\N
1603	1607	\N	\n\tWhich of the following tactics is not related with the control of resource demand\n\t\n    	\N
1670	1677	\N	\n\tConsider the following decomposition view of the Catalog of DVD case study.\n\t\n\t\\centering\n\t\\includegraphics[width=100mm]{dvd-top-decomposition}\n\n    	\N
1601	1608	\N	\n\tIn the Architect Elevator article by Gregor Hohpe can be read:\n\t\n\t\\begin{quote}\n\t\tA lot of large companies have discovered the benefits of cloud computing but see it mainly as an infrastructure topic. I feel that's misguided: being able to get compute resources more quickly and cheaply is useful, but the real business benefit lies in a fully automated tool chain that minimizes the time in which a normal code change can go into production. Not quite coincidentally, this is my favorite definition of DevOps.\n\t\\end{quote}\n\t\n\tIn the author's opinion\n\t\t\n    	\N
1612	1614	\N	\n\tConsider the Decomposition architectural style of the Module viewtype\n\t\t\n    	\N
1613	1615	\N	\n\t  The \\emph{Composer UI} component of Graphite system, described as - \\emph{Graphite's Composer UI provides a point-and-click method to create a graph from which you can simply copy and paste the URL} - to be effective needs to show to the user the changes she performs in the graph such that she has immediate feedback whenever she clicks on a option. To do so, the architecture needs to include\n\n    	\N
1609	1616	\N	\n    There are several tactics to satisfy availability requirements,\n    which may be applied depending on the concrete requirement that we\n    want to satisfy.  Assuming that you want to detect faults of type\n    \\emph{response} in your system, which tactic is more adequate?\n\n    	\N
1610	1617	\N	\n\tThe modifiability tactic Use an Intermediary between two modules\n\t\t\n    	\N
1556	1618	\N	\n\tWhen applying Attribute-Driven Design (ADD) to the FenixEdu system the creation of a view where there are redundant web servers, load balancers and database servers \n\n    	\N
1573	1618	\N	\n\tWhen applying Attribute-Driven Design (ADD) to the FenixEdu system the creation of a view where there are redundant web servers, load balancers and database servers \n\n    	\N
1611	1618	\N	\n\tWhen applying Attribute-Driven Design (ADD) to the FenixEdu system the creation of a view where there are redundant web servers, load balancers and database servers \n\n    	\N
1623	1624	\N	\n    In the Graphite system the component \\emph{carbon} provides to \\emph{webapp} components an access interface to the \\emph{buffers} in order to improve the quality of\n\n    	\N
1619	1625	\N	\n\t  The availability quality can be supported by a voting tactic in order to identify faults of\n\n      	\N
1621	1626	\N	\n\tConsider an architecturally significant requirement (ASR) that has a low impact on the architecture but a high business value\n\n    	\N
1620	1627	\N	\n\tConsider the following scenario: \\emph{A system administrator adds more copies of computation of the system, each one using a different database, and is able to do it in less than 10 minutes.}\n\t\t\n    	\N
807	1628	\N	\n\tThe Decomposition architectural style of the Module viewtype \n\t\n\n    	\N
833	1628	\N	\n\tThe Decomposition architectural style of the Module viewtype \n\t\n\n    	\N
834	1628	\N	\n\tThe Decomposition architectural style of the Module viewtype \n\t\n\n    	\N
1622	1628	\N	\n\tThe Decomposition architectural style of the Module viewtype \n\t\n    	\N
1631	1634	\N	\n\tDesigning an architecture\n\n    	\N
1633	1636	\N	\n\tIn the Graphite system description can be read:\n\t\n\t\\begin{quote}\n\t\tWe've got 600,000 metrics that update every minute and we're assuming our storage can only keep up with 60,000 write operations per minute. This means we will have approximately 10 minutes worth of data sitting in carbon's queues at any given time. To a user this means that the graphs they request from the Graphite webapp will be missing the most recent 10 minutes of data.\n\t\\end{quote}\n\n    	\N
1639	1645	\N	\n\t  Suppose that in the development of an enterprise application (which needs to access a\n\t  database) it was decided to use the FenixFramework library to simplify the development\n\t  of the data access code. Which architectural style is the most adequate to represent this\n\t  decision?\n\t  \n\t  	\N
1641	1648	\N	\n\tConsider the following modifiability scenario for the Adventure Builder system \n\t\n\t\\begin{quote}\n\t\tA new business partner (airline, lodging, or activity provider) that uses its own web services interface is added to the system in no more than 10 person-days of effort for the implementation. The business goal is easy integration with new business partners.\n\t\\end{quote}\n\t\n\tand the following architectural view\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=95mm]{AdventureBuilderModule}\n\t\\end{center}\n\t\n    	\N
1650	1654	\N	\n\tConsider the following view of the Adventure Builder system\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=95mm]{AdventureBuilderComponentAndConnector}\n\t\\end{center}\n\t\n\tIn this view it is possible to reason that\n\t\n    	\N
1653	1656	\N	\n  Which\n  architectural style is \n  adequate for planning incremental\n  releases?\n\n  	\N
1651	1657	\N	\n\tConsider the following performance/scalability scenario for the Adventure Builder system \n\t\n\t\\begin{quote}\n\t\tUp to 500 users click to see the catalog of adventure packages following a random distribution over 1 minute; the system is under normal operating conditions; the maximal latency to serve the first page of content is under 5 seconds; average latency for same is less than 2 seconds. If required, the system should easily support an increase in the number of simultaneous requests while maintaining the same latency per request.\n\t\\end{quote}\n\t\n\tand the following architectural view\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=95mm]{AdventureBuilderModule}\n\t\\end{center}\n\t\n    	\N
1652	1658	\N	\n\tA connector may be attached to components of different types because\n\t\t\n    	\N
1660	1664	\N	\n\tConsider the following view of the Adventure Builder system\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=95mm]{AdventureBuilderComponentAndConnector}\n\t\\end{center}\n\t\n\tThis view \\textbf{does not} apply the architectural style\n\t\n\t\t\n    	\N
1659	1665	\N	\n  In a layered architecture composed by four layers, where the topmost\n  layer is the layer number 1 and the bottommost layer is the layer\n  number 4, which of the layers is more modifiable?\n\n    	\N
1661	1666	\N	\n\tConsider the following availability scenario for the Adventure Builder system \n\t\n\t\\begin{quote}\n\t\tThe Consumer Web site is available to the user 24x7. If an instance of OPC application fails, the fault is detected and the system administrator is notified in 30 seconds; the system continues taking order requests; another OPC instance is created; and data remains in consistent state.\n\t\\end{quote}\n\t\n\tand the following architectural view\n\t\n\t\\begin{center}\n\t\t\\includegraphics[width=95mm]{AdventureBuilderModule}\n\t\\end{center}\n\t\n    	\N
1663	1667	\N	\n\tThe Peer-to-Peer architectural style provides high scalability and availability. In the context of a file sharing system  \n\t\n    	\N
1662	1668	\N	\n\tThe quality(ies) that is(are) more relevant to views of the component-and-connector viewtype is(are):\n\t\t\n    	\N
1672	1678	\N	\n\tConsider the architecture of the Morrison's OrderPad. The decision whether use a Native application or HTML5 for the implementation of the client in the Pad was taken because\n\t\n    	\N
1681	1684	\N	\n\tIn the context of the \\emph{Graphite} case study, consider the following view that represents the internal behavior of the \\emph{Carbon} component, where the components \\texttt{r1,... , rn, w} are threads and \\texttt{q1, ..., qn} are buffers. The port \\emph{read}, which provides an interface to read the data points stored in the queue, can be used, in an enrichment of the view, to illustrate\n\t\n\t\\centering\n\t\\includegraphics[width=120mm]{graphite-carbon}\n\n    	\N
1682	1685	\N	\n\tIn the Amazon Silk browser  \n\t\n    	\N
1683	1686	\N	\n\tSuppose that an architect needs to decide whether to follow a modular monolith architecture or a microservices architecture for a new large system. The system to be developed has a complex logic and high volume of requests. \n\t\t\t\n    	\N
1679	1687	\N	\n\tIn the web page of the NGINX HTTP server can be read\n\t\n\t\\begin{quote}\n\t\tNGINX is a free, open-source, high-performance HTTP server and reverse proxy, as well as an IMAP/POP3 proxy server. (...)\n\t\tUnlike traditional servers, NGINX doesn't rely on threads to handle requests. Instead it uses a much more scalable event-driven (asynchronous) architecture. This architecture uses small, but more importantly, predictable amounts of memory under load.\n\t\\end{quote}\n\t\n\tAccording to the above description the most adequate architectural style to represent the performance qualities of NGINX is\n\t\n    	\N
1680	1688	\N	\n\tConsider the following decomposition views of the Catalog of DVD case study were the \\emph{Autocomplete} module is implemented in javascript and executes in a browser.\n\t\n\t\\centering\n\t\\includegraphics[width=120mm]{dvd-autocomplete}\n\n    	\N
1692	1694	\N	\n\tConsider the architecture of the Morrison's OrderPad. In the description of the system can be read:\n\t\n\t\\begin{quote}\n\t\tThe pilot version included some architectural short-cuts that would not work with the full complement of stores. One of these was using a file-transfer to send data to the mainframe rather than MQ, which wouldn't perform well once many stores were active.\n\t\\end{quote}\n\t\n\tThis approach means that\n\t\n    	\N
1689	1695	\N	\n\tConsider a stakeholder that is particularly concerned about the total cost of the project. When it comes to describing the system using allocation viewtypes is interested in\n\n    	\N
1690	1696	\N	\n\tConsider the following generalization view of the Catalog of DVD case study.\n\t\n\t\\centering\n\t\\includegraphics[width=60mm]{dvd-generalization}\n\n    	\N
1691	1697	\N	\n\tIn the context of the \\emph{Graphite} case study, consider the following application-specific types that are used in a view to represent the internal behavior of the \\emph{Webapp} component. \n\t\n\t\\centering\n\t\\includegraphics[width=120mm]{graphite-webapp}\n\t\n\tThis view can show that the architecture fulfills  \n\n    	\N
1693	1698	\N	\n\tConsider the architectural solutions for microservices architectures that use the Command Query Responsibility Segregation (CQRS) technique in the context of Event Sourcing. This technique has the following disadvantage \n\t\t\t\n    	\N
1341	1448	\N	\n    Several of the cases studied in this course had scalability\n    requirements.  That means that those systems should be designed in\n    such a way that they\n\n    	\N
1095	1458	\N	\n    There are several tactics to satisfy availability requirements,\n    which may be applied depending on the concrete requirement that we\n    want to satisfy.  Assuming that you want to detect faults of type\n    \\emph{response} in your system, which tactic is more adequate?\n\n    	\N
929	1667	\N	\n\tThe Peer-to-Peer architectural style provides high scalability and availability. In the context of a file sharing system  \n\t\n\n    	\N
\.


--
-- Data for Name: quiz_has_question; Type: TABLE DATA; Schema: public; Owner: pedro
--

COPY public.quiz_has_question (quiz_id, question_id) FROM stdin;
1	1
1	2
1	3
1	4
1	5
1	6
1	7
1	8
1	9
1	10
1	11
1	12
1	13
1	14
1	15
1	16
1	17
1	18
1	19
1	20
2	21
2	22
2	23
2	24
2	25
2	26
2	27
2	28
2	29
2	30
2	31
2	32
2	33
2	34
2	35
2	36
2	37
2	38
2	39
2	40
3	41
3	42
3	43
3	44
3	45
3	46
3	47
3	48
3	49
3	50
3	51
3	52
3	53
3	54
3	55
3	56
3	57
3	58
3	59
3	60
4	61
4	62
4	63
4	64
4	65
4	66
4	67
4	68
4	69
4	70
4	71
4	72
4	73
4	74
4	75
4	76
4	77
4	78
4	79
4	80
5	81
5	82
5	83
5	84
5	85
5	86
5	87
5	88
5	89
5	90
5	91
5	92
5	93
5	94
5	95
5	96
5	97
5	98
5	99
5	100
6	101
6	102
6	103
6	104
6	105
6	106
6	107
6	108
6	109
6	110
6	111
6	112
6	113
6	114
6	115
6	116
6	117
6	118
6	119
6	120
7	121
7	122
7	123
7	124
7	125
7	126
7	127
7	128
7	129
7	130
7	131
7	132
7	133
7	134
7	135
7	136
7	137
7	138
7	139
7	140
8	141
8	142
8	143
8	144
8	145
8	146
8	147
8	148
8	149
8	150
8	151
8	152
8	153
8	154
8	155
8	156
8	157
8	158
8	159
8	160
9	161
9	162
9	163
9	164
9	165
9	166
9	167
9	168
9	169
9	170
9	171
9	172
9	173
9	174
9	175
9	176
9	177
9	178
9	179
9	180
9	181
9	182
9	183
9	184
9	185
9	186
9	187
9	188
9	189
9	190
10	191
10	192
10	193
10	194
10	195
10	196
10	197
10	198
10	199
10	200
10	201
10	202
10	203
10	204
10	205
10	206
10	207
10	208
10	209
10	210
10	211
10	212
10	213
10	214
10	215
10	216
10	217
10	218
10	219
10	220
11	221
11	222
11	223
11	224
11	225
11	226
11	227
11	228
11	229
11	230
11	231
11	232
11	233
11	234
11	235
11	236
11	237
11	238
11	239
11	240
11	241
11	242
11	243
11	244
11	245
11	246
11	247
11	248
11	249
11	250
12	251
12	252
12	253
12	254
12	255
12	256
12	257
12	258
12	259
12	260
12	261
12	262
12	263
12	264
12	265
12	266
12	267
12	268
12	269
12	270
12	271
12	272
12	273
12	274
12	275
12	276
12	277
12	278
12	279
12	280
13	281
13	282
13	283
13	284
13	285
13	286
13	287
13	288
13	289
13	290
13	291
13	292
13	293
13	294
13	295
13	296
13	297
13	298
13	299
13	300
13	301
13	302
13	303
13	304
13	305
13	306
13	307
13	308
13	309
13	310
14	311
14	312
14	313
14	314
14	315
14	316
14	317
14	318
14	319
14	320
14	321
14	322
14	323
14	324
14	325
14	326
14	327
14	328
14	329
14	330
14	331
14	332
14	333
14	334
14	335
14	336
14	337
14	338
14	339
14	340
15	341
15	342
15	343
15	344
15	345
15	346
15	347
15	348
15	349
15	350
15	351
15	352
15	353
15	354
15	355
15	356
15	357
15	358
15	359
15	360
15	361
15	362
15	363
15	364
15	365
15	366
15	367
15	368
15	369
15	370
16	371
16	372
16	373
16	374
16	375
16	376
16	377
16	378
16	379
16	380
16	381
16	382
16	383
16	384
16	385
16	386
16	387
16	388
16	389
16	390
16	391
16	392
16	393
16	394
16	395
16	396
16	397
16	398
16	399
16	400
17	401
17	402
17	403
17	404
17	405
17	406
17	407
17	408
17	409
17	410
17	411
17	412
17	413
17	414
17	415
17	416
17	417
17	418
17	419
17	420
17	421
17	422
17	423
17	424
17	425
17	426
17	427
17	428
17	429
17	430
18	431
18	432
18	433
18	434
18	435
18	436
18	437
18	438
18	439
18	440
18	441
18	442
18	443
18	444
18	445
18	446
18	447
18	448
18	449
18	450
18	451
18	452
18	453
18	454
18	455
18	456
18	457
18	458
18	459
18	460
19	461
19	462
19	463
19	464
19	465
19	466
19	467
19	468
19	469
19	470
19	471
19	472
19	473
19	474
19	475
19	476
19	477
19	478
19	479
19	480
19	481
19	482
19	483
19	484
19	485
19	486
19	487
19	488
19	489
19	490
20	491
20	492
20	493
20	494
20	495
20	496
20	497
20	498
20	499
20	500
20	501
20	502
20	503
20	504
20	505
20	506
20	507
20	508
20	509
20	510
20	511
20	512
20	513
20	514
20	515
20	516
20	517
20	518
20	519
20	520
21	521
21	522
21	523
21	524
21	525
21	526
21	527
21	528
21	529
21	530
21	531
21	532
21	533
21	534
21	535
21	536
21	537
21	538
21	539
21	540
21	541
21	542
21	543
21	544
21	545
21	546
21	547
21	548
21	549
21	550
22	551
22	552
22	553
22	554
22	555
22	556
22	557
22	558
22	559
22	560
22	561
22	562
22	563
22	564
22	565
22	566
22	567
22	568
22	569
22	570
23	571
23	572
23	573
23	574
23	575
24	576
24	577
24	578
24	579
24	580
25	581
25	582
25	583
25	584
25	585
26	586
26	587
26	588
26	589
26	590
27	591
27	592
27	593
27	594
27	595
28	596
28	597
28	598
28	599
28	600
29	601
29	602
29	603
29	604
29	605
30	606
30	607
30	608
30	609
30	610
31	611
31	612
31	613
31	614
31	615
31	616
31	617
31	618
31	619
31	620
31	621
31	622
31	623
31	624
31	625
31	626
31	627
31	628
31	629
31	630
32	631
32	632
32	633
32	634
32	635
32	636
32	637
32	638
32	639
32	640
32	641
32	642
32	643
32	644
32	645
32	646
32	647
32	648
32	649
32	650
33	651
33	652
33	653
33	654
33	655
33	656
33	657
33	658
33	659
33	660
33	661
33	662
33	663
33	664
33	665
33	666
33	667
33	668
33	669
33	670
34	671
34	672
34	673
34	674
34	675
34	676
34	677
34	678
34	679
34	680
34	681
34	682
34	683
34	684
34	685
34	686
34	687
34	688
34	689
34	690
35	691
35	692
35	693
35	694
35	695
35	696
35	697
35	698
35	699
35	700
35	701
35	702
35	703
35	704
35	705
35	706
35	707
35	708
35	709
35	710
36	711
36	712
36	713
36	714
36	715
36	716
36	717
36	718
36	719
36	720
36	721
36	722
36	723
36	724
36	725
36	726
36	727
36	728
36	729
36	730
37	731
37	732
37	733
37	734
37	735
37	736
37	737
37	738
37	739
37	740
37	741
37	742
37	743
37	744
37	745
37	746
37	747
37	748
37	749
37	750
38	751
38	752
38	753
38	754
38	755
38	756
38	757
38	758
38	759
38	760
38	761
38	762
38	763
38	764
38	765
38	766
38	767
38	768
38	769
38	770
39	771
39	772
39	773
39	774
39	775
39	776
39	777
39	778
39	779
39	780
39	781
39	782
39	783
39	784
39	785
39	786
39	787
39	788
39	789
39	790
40	791
40	792
40	793
40	794
40	795
40	796
40	797
40	798
40	799
40	800
40	801
40	802
40	803
40	804
40	805
40	806
40	807
40	808
41	809
41	810
41	811
41	812
41	813
42	814
42	815
42	816
42	817
42	818
43	819
43	820
43	821
43	822
43	823
44	824
44	825
44	826
44	827
44	828
45	829
45	830
45	831
45	832
45	833
46	834
46	835
46	836
46	837
46	838
47	839
47	840
47	841
47	842
47	843
48	844
48	845
48	846
48	847
48	848
49	849
49	850
49	851
49	852
49	853
49	854
49	855
49	856
49	857
49	858
49	859
49	860
49	861
49	862
49	863
49	864
49	865
49	866
49	867
49	868
50	869
50	870
50	871
50	872
50	873
51	874
51	875
51	876
51	877
51	878
52	879
52	880
52	881
52	882
52	883
53	884
53	885
53	886
53	887
53	888
54	889
54	890
54	891
54	892
54	893
55	894
55	895
55	896
55	897
55	898
56	899
56	900
56	901
56	902
56	903
57	904
57	905
57	906
57	907
57	908
58	909
58	910
58	911
58	912
58	913
58	914
58	915
58	916
58	917
58	918
58	919
58	920
58	921
58	922
58	923
58	924
58	925
58	926
58	927
58	928
59	929
59	930
59	931
59	932
59	933
60	934
60	935
60	936
60	937
60	938
61	939
61	940
61	941
61	942
61	943
62	944
62	945
62	946
62	947
62	948
63	949
63	950
63	951
63	952
63	953
64	954
64	955
64	956
64	957
64	958
65	959
65	960
65	961
65	962
65	963
66	964
66	965
66	966
66	967
66	968
67	969
67	970
67	971
67	972
67	973
67	974
67	975
67	976
67	977
67	978
67	979
67	980
67	981
67	982
67	983
67	984
67	985
67	986
67	987
67	988
68	989
68	990
68	991
68	992
68	993
69	994
69	995
69	996
69	997
69	998
70	999
70	1000
70	1001
70	1002
70	1003
71	1004
71	1005
71	1006
71	1007
71	1008
72	1009
72	1010
72	1011
72	1012
72	1013
73	1014
73	1015
73	1016
73	1017
73	1018
74	1019
74	1020
74	1021
74	1022
74	1023
75	1024
75	1025
75	1026
75	1027
75	1028
76	1029
76	1030
76	1031
76	1032
76	1033
76	1034
76	1035
76	1036
76	1037
76	1038
76	1039
76	1040
76	1041
76	1042
76	1043
76	1044
76	1045
76	1046
76	1047
76	1048
76	1049
76	1050
76	1051
76	1052
76	1053
76	1054
76	1055
76	1056
76	1057
76	1058
77	1059
77	1060
77	1061
77	1062
77	1063
77	1064
77	1065
77	1066
77	1067
77	1068
77	1069
77	1070
77	1071
77	1072
77	1073
77	1074
77	1075
77	1076
77	1077
77	1078
77	1079
77	1080
77	1081
77	1082
77	1083
77	1084
77	1085
77	1086
77	1087
77	1088
78	1089
78	1090
78	1091
78	1092
78	1093
78	1094
78	1095
78	1096
78	1097
78	1098
78	1099
78	1100
78	1101
78	1102
78	1103
78	1104
78	1105
78	1106
78	1107
78	1108
78	1109
78	1110
78	1111
78	1112
78	1113
78	1114
78	1115
78	1116
78	1117
78	1118
79	1119
79	1120
79	1121
79	1122
79	1123
79	1124
79	1125
79	1126
79	1127
79	1128
79	1129
79	1130
79	1131
79	1132
79	1133
79	1134
79	1135
79	1136
79	1137
79	1138
79	1139
79	1140
79	1141
79	1142
79	1143
79	1144
79	1145
79	1146
79	1147
79	1148
80	1149
80	1150
80	1151
80	1152
80	1153
80	1154
80	1155
80	1156
80	1157
80	1158
80	1159
80	1160
80	1161
80	1162
80	1163
80	1164
80	1165
80	1166
80	1167
80	1168
80	1169
80	1170
80	1171
80	1172
80	1173
80	1174
80	1175
80	1176
80	1177
80	1178
81	1179
81	1180
81	1181
81	1182
81	1183
82	1184
82	1185
82	1186
82	1187
82	1188
83	1189
83	1190
83	1191
83	1192
83	1193
84	1194
84	1195
84	1196
84	1197
84	1198
85	1199
85	1200
85	1201
85	1202
85	1203
86	1204
86	1205
86	1206
86	1207
86	1208
87	1209
87	1210
87	1211
87	1212
87	1213
88	1214
88	1215
88	1216
88	1217
88	1218
89	1219
89	1220
89	1221
89	1222
89	1223
90	1224
90	1225
90	1226
90	1227
90	1228
91	1229
91	1230
91	1231
91	1232
91	1233
92	1234
92	1235
92	1236
92	1237
92	1238
93	1239
93	1240
93	1241
93	1242
93	1243
94	1244
94	1245
94	1246
94	1247
94	1248
95	1249
95	1250
95	1251
95	1252
95	1253
96	1254
96	1255
96	1256
96	1257
96	1258
97	1259
97	1260
97	1261
97	1262
97	1263
98	1264
98	1265
98	1266
98	1267
98	1268
99	1269
99	1270
99	1271
99	1272
99	1273
100	1274
100	1275
100	1276
100	1277
100	1278
101	1279
101	1280
101	1281
101	1282
101	1283
102	1284
102	1285
102	1286
102	1287
102	1288
103	1289
103	1290
103	1291
103	1292
103	1293
104	1294
104	1295
104	1296
104	1297
104	1298
105	1299
105	1300
105	1301
105	1302
105	1303
105	1304
105	1305
105	1306
105	1307
105	1308
105	1309
105	1310
105	1311
105	1312
105	1313
105	1314
105	1315
105	1316
105	1317
105	1318
105	1319
105	1320
105	1321
105	1322
105	1323
105	1324
105	1325
105	1326
105	1327
105	1328
106	1329
106	1330
106	1331
106	1332
106	1333
106	1334
106	1335
106	1336
106	1337
106	1338
106	1339
106	1340
106	1341
106	1342
106	1343
106	1344
106	1345
106	1346
106	1347
106	1348
106	1349
106	1350
106	1351
106	1352
106	1353
106	1354
106	1355
106	1356
106	1357
106	1358
107	1359
107	1360
107	1361
107	1362
107	1363
107	1364
107	1365
107	1366
107	1367
107	1368
107	1369
107	1370
107	1371
107	1372
107	1373
107	1374
107	1375
107	1376
107	1377
107	1378
107	1379
107	1380
107	1381
107	1382
107	1383
107	1384
107	1385
107	1386
107	1387
107	1388
108	1389
108	1390
108	1391
108	1392
108	1393
108	1394
108	1395
108	1396
108	1397
108	1398
108	1399
108	1400
108	1401
108	1402
108	1403
108	1404
108	1405
108	1406
108	1407
108	1408
108	1409
108	1410
108	1411
108	1412
108	1413
108	1414
108	1415
108	1416
108	1417
108	1418
109	1419
109	1420
109	1421
109	1422
109	1423
110	1424
110	1425
110	1426
110	1427
110	1428
111	1429
111	1430
111	1431
111	1432
111	1433
112	1434
112	1435
112	1436
112	1437
112	1438
113	1439
113	1440
113	1441
113	1442
113	1443
114	1444
114	1445
114	1446
114	1447
114	1448
115	1449
115	1450
115	1451
115	1452
115	1453
116	1454
116	1455
116	1456
116	1457
116	1458
117	1459
117	1460
117	1461
117	1462
117	1463
118	1464
118	1465
118	1466
118	1467
118	1468
119	1469
119	1470
119	1471
119	1472
119	1473
120	1474
120	1475
120	1476
120	1477
120	1478
121	1479
121	1480
121	1481
121	1482
121	1483
122	1484
122	1485
122	1486
122	1487
122	1488
123	1489
123	1490
123	1491
123	1492
123	1493
124	1494
124	1495
124	1496
124	1497
124	1498
125	1499
125	1500
125	1501
125	1502
125	1503
125	1504
125	1505
125	1506
125	1507
125	1508
125	1509
125	1510
125	1511
125	1512
125	1513
125	1514
125	1515
125	1516
125	1517
125	1518
126	1519
126	1520
126	1521
126	1522
126	1523
126	1524
126	1525
126	1526
126	1527
126	1528
126	1529
126	1530
126	1531
126	1532
126	1533
126	1534
126	1535
126	1536
126	1537
126	1538
127	1539
127	1540
127	1541
127	1542
127	1543
127	1544
127	1545
127	1546
127	1547
127	1548
127	1549
127	1550
127	1551
127	1552
127	1553
127	1554
127	1555
127	1556
127	1557
127	1558
128	1559
128	1560
128	1561
128	1562
128	1563
128	1564
128	1565
128	1566
128	1567
128	1568
128	1569
128	1570
128	1571
128	1572
128	1573
128	1574
128	1575
128	1576
128	1577
128	1578
129	1579
129	1580
129	1581
129	1582
129	1583
130	1584
130	1585
130	1586
130	1587
130	1588
131	1589
131	1590
131	1591
131	1592
131	1593
132	1594
132	1595
132	1596
132	1597
132	1598
133	1599
133	1600
133	1601
133	1602
133	1603
134	1604
134	1605
134	1606
134	1607
134	1608
135	1609
135	1610
135	1611
135	1612
135	1613
136	1614
136	1615
136	1616
136	1617
136	1618
137	1619
137	1620
137	1621
137	1622
137	1623
138	1624
138	1625
138	1626
138	1627
138	1628
139	1629
139	1630
139	1631
139	1632
139	1633
140	1634
140	1635
140	1636
140	1637
140	1638
141	1639
141	1640
141	1641
141	1642
141	1643
142	1644
142	1645
142	1646
142	1647
142	1648
143	1649
143	1650
143	1651
143	1652
143	1653
144	1654
144	1655
144	1656
144	1657
144	1658
145	1659
145	1660
145	1661
145	1662
145	1663
146	1664
146	1665
146	1666
146	1667
146	1668
147	1669
147	1670
147	1671
147	1672
147	1673
148	1674
148	1675
148	1676
148	1677
148	1678
149	1679
149	1680
149	1681
149	1682
149	1683
150	1684
150	1685
150	1686
150	1687
150	1688
151	1689
151	1690
151	1691
151	1692
151	1693
152	1694
152	1695
152	1696
152	1697
152	1698
\.


--
-- Data for Name: quizzes; Type: TABLE DATA; Schema: public; Owner: pedro
--

COPY public.quizzes (id, title, lang, year, type, series, version) FROM stdin;
1	..-data-2010-primeiro-exame-20110113-companion-pt-a	\N	\N	\N	\N	\N
2	..-data-2010-primeiro-exame-20110113-companion-pt-b	\N	\N	\N	\N	\N
3	..-data-2010-segundo-exame-20110203-companion-pt-a	\N	\N	\N	\N	\N
4	..-data-2010-segundo-exame-20110203-companion-pt-b	\N	\N	\N	\N	\N
5	..-data-2011-exam1-exame-20120109-companion-pt-a	\N	\N	\N	\N	\N
6	..-data-2011-exam1-exame-20120109-companion-pt-b	\N	\N	\N	\N	\N
7	..-data-2011-exam2-exame-20120203-companion-pt-a	\N	\N	\N	\N	\N
8	..-data-2011-exam2-exame-20120203-companion-pt-b	\N	\N	\N	\N	\N
9	..-data-2012-exam1-exame-20130109-companion-pt-a	\N	\N	\N	\N	\N
10	..-data-2012-exam1-exame-20130109-companion-pt-b	\N	\N	\N	\N	\N
11	..-data-2012-exam2-exame-20130201-companion-pt-a	\N	\N	\N	\N	\N
12	..-data-2012-exam2-exame-20130201-companion-pt-b	\N	\N	\N	\N	\N
13	..-data-2013-20140110-exame-20140110-companion-pt-a	\N	\N	\N	\N	\N
14	..-data-2013-20140110-exame-20140110-companion-pt-b	\N	\N	\N	\N	\N
15	..-data-2013-20140130-exame-20140130-companion-pt-a	\N	\N	\N	\N	\N
16	..-data-2013-20140130-exame-20140130-companion-pt-b	\N	\N	\N	\N	\N
17	..-data-2013-20140715-exame-20140715-companion-pt	\N	\N	\N	\N	\N
18	..-data-2014-exam-exam20150109-exame-20150109-companion-A	\N	\N	\N	\N	\N
19	..-data-2014-exam-exam20150109-exame-20150109-companion-B	\N	\N	\N	\N	\N
20	..-data-2014-exam-exam20150127-exame-20150127-companion-A	\N	\N	\N	\N	\N
21	..-data-2014-exam-exam20150127-exame-20150127-companion-B	\N	\N	\N	\N	\N
22	..-data-2014-test-1-test-1	\N	\N	\N	\N	\N
23	..-data-2014-test-1-test-11A-17co╠Бpias	\N	\N	\N	\N	\N
24	..-data-2014-test-1-test-11B-17co╠Бpias	\N	\N	\N	\N	\N
25	..-data-2014-test-1-test-12A-24co╠Бpias	\N	\N	\N	\N	\N
26	..-data-2014-test-1-test-12B-24co╠Бpias	\N	\N	\N	\N	\N
27	..-data-2014-test-1-test-13A-17co╠Бpias	\N	\N	\N	\N	\N
28	..-data-2014-test-1-test-13B-17co╠Бpias	\N	\N	\N	\N	\N
29	..-data-2014-test-1-test-14A-24co╠Бpias	\N	\N	\N	\N	\N
30	..-data-2014-test-1-test-14B-24co╠Бpias	\N	\N	\N	\N	\N
31	..-data-2014-test-2-test-2	\N	\N	\N	\N	\N
32	..-data-2014-test-2-test-21A-18co╠Бpias	\N	\N	\N	\N	\N
33	..-data-2014-test-2-test-21B-18co╠Бpias	\N	\N	\N	\N	\N
34	..-data-2014-test-2-test-22A-18co╠Бpias	\N	\N	\N	\N	\N
35	..-data-2014-test-2-test-22B-18co╠Бpias	\N	\N	\N	\N	\N
36	..-data-2014-test-2-test-23A-18co╠Бpias	\N	\N	\N	\N	\N
37	..-data-2014-test-2-test-23B-18co╠Бpias	\N	\N	\N	\N	\N
38	..-data-2014-test-2-test-24A-18co╠Бpias	\N	\N	\N	\N	\N
39	..-data-2014-test-2-test-24B-18co╠Бpias	\N	\N	\N	\N	\N
40	..-data-2014-test-3-test-3	\N	\N	\N	\N	\N
41	..-data-2014-test-3-test-31A-18copias	\N	\N	\N	\N	\N
42	..-data-2014-test-3-test-31B-18copias	\N	\N	\N	\N	\N
43	..-data-2014-test-3-test-32A-18copias	\N	\N	\N	\N	\N
44	..-data-2014-test-3-test-32B-18copias	\N	\N	\N	\N	\N
45	..-data-2014-test-3-test-33A-18copias	\N	\N	\N	\N	\N
46	..-data-2014-test-3-test-33B-18copias	\N	\N	\N	\N	\N
47	..-data-2014-test-3-test-34A-18copias	\N	\N	\N	\N	\N
48	..-data-2014-test-3-test-34B-18copias	\N	\N	\N	\N	\N
49	..-data-2014-test-4-test-4	\N	\N	\N	\N	\N
50	..-data-2014-test-4-test-41A-17copias	\N	\N	\N	\N	\N
51	..-data-2014-test-4-test-41B-17copias	\N	\N	\N	\N	\N
52	..-data-2014-test-4-test-42A-16copias	\N	\N	\N	\N	\N
53	..-data-2014-test-4-test-42B-16copias	\N	\N	\N	\N	\N
54	..-data-2014-test-4-test-43A-16copias	\N	\N	\N	\N	\N
55	..-data-2014-test-4-test-43B-16copias	\N	\N	\N	\N	\N
56	..-data-2014-test-4-test-44A-18copias	\N	\N	\N	\N	\N
57	..-data-2014-test-4-test-44B-18copias	\N	\N	\N	\N	\N
58	..-data-2014-test-5-test-5	\N	\N	\N	\N	\N
59	..-data-2014-test-5-test-51A-17copias	\N	\N	\N	\N	\N
60	..-data-2014-test-5-test-51B-17copias	\N	\N	\N	\N	\N
61	..-data-2014-test-5-test-52A-16copias	\N	\N	\N	\N	\N
62	..-data-2014-test-5-test-52B-16copias	\N	\N	\N	\N	\N
63	..-data-2014-test-5-test-53A-16copias	\N	\N	\N	\N	\N
64	..-data-2014-test-5-test-53B-16copias	\N	\N	\N	\N	\N
65	..-data-2014-test-5-test-54A-18copias	\N	\N	\N	\N	\N
66	..-data-2014-test-5-test-54B-18copias	\N	\N	\N	\N	\N
67	..-data-2014-test-6-test-6	\N	\N	\N	\N	\N
68	..-data-2014-test-6-test-61A-17copias	\N	\N	\N	\N	\N
69	..-data-2014-test-6-test-61B-17copias	\N	\N	\N	\N	\N
70	..-data-2014-test-6-test-62A-16copias	\N	\N	\N	\N	\N
71	..-data-2014-test-6-test-62B-16copias	\N	\N	\N	\N	\N
72	..-data-2014-test-6-test-63A-16copias	\N	\N	\N	\N	\N
73	..-data-2014-test-6-test-63B-16copias	\N	\N	\N	\N	\N
74	..-data-2014-test-6-test-64A-18copias	\N	\N	\N	\N	\N
75	..-data-2014-test-6-test-64B-18copias	\N	\N	\N	\N	\N
76	..-data-2015-exams-20160108Exam-exame-20160108-companion-A	\N	\N	\N	\N	\N
77	..-data-2015-exams-20160108Exam-exame-20160108-companion-B	\N	\N	\N	\N	\N
78	..-data-2015-exams-20160126Exam-exame-20160126-companion-A	\N	\N	\N	\N	\N
79	..-data-2015-exams-20160126Exam-exame-20160126-companion-B	\N	\N	\N	\N	\N
80	..-data-2015-exams-20160711Exam-exame-20160711-companion	\N	\N	\N	\N	\N
81	..-data-2015-test-1-test-11A	\N	\N	\N	\N	\N
82	..-data-2015-test-1-test-11B	\N	\N	\N	\N	\N
83	..-data-2015-test-1-test-12A	\N	\N	\N	\N	\N
84	..-data-2015-test-1-test-12B	\N	\N	\N	\N	\N
85	..-data-2015-test-1-test-13A	\N	\N	\N	\N	\N
86	..-data-2015-test-1-test-13B	\N	\N	\N	\N	\N
87	..-data-2015-test-2-test-21A	\N	\N	\N	\N	\N
88	..-data-2015-test-2-test-21B	\N	\N	\N	\N	\N
89	..-data-2015-test-2-test-22A	\N	\N	\N	\N	\N
90	..-data-2015-test-2-test-22B	\N	\N	\N	\N	\N
91	..-data-2015-test-2-test-23A	\N	\N	\N	\N	\N
92	..-data-2015-test-2-test-23B	\N	\N	\N	\N	\N
93	..-data-2015-test-3-test-31A	\N	\N	\N	\N	\N
94	..-data-2015-test-3-test-31B	\N	\N	\N	\N	\N
95	..-data-2015-test-3-test-32A	\N	\N	\N	\N	\N
96	..-data-2015-test-3-test-32B	\N	\N	\N	\N	\N
97	..-data-2015-test-3-test-33A	\N	\N	\N	\N	\N
98	..-data-2015-test-3-test-33B	\N	\N	\N	\N	\N
99	..-data-2015-test-4-test-41A	\N	\N	\N	\N	\N
100	..-data-2015-test-4-test-41B	\N	\N	\N	\N	\N
101	..-data-2015-test-4-test-42A	\N	\N	\N	\N	\N
102	..-data-2015-test-4-test-42B	\N	\N	\N	\N	\N
103	..-data-2015-test-4-test-43A	\N	\N	\N	\N	\N
104	..-data-2015-test-4-test-43B	\N	\N	\N	\N	\N
105	..-data-2016-20170113Exam-exame-20170113-companion-A	\N	\N	\N	\N	\N
106	..-data-2016-20170113Exam-exame-20170113-companion-B	\N	\N	\N	\N	\N
107	..-data-2016-20170131Exam-exame-20170131-companion-A	\N	\N	\N	\N	\N
108	..-data-2016-20170131Exam-exame-20170131-companion-B	\N	\N	\N	\N	\N
109	..-data-2016-test-1-test-11A	\N	\N	\N	\N	\N
110	..-data-2016-test-1-test-11B	\N	\N	\N	\N	\N
111	..-data-2016-test-1-test-12A	\N	\N	\N	\N	\N
112	..-data-2016-test-1-test-12B	\N	\N	\N	\N	\N
113	..-data-2016-test-2-test-21A	\N	\N	\N	\N	\N
114	..-data-2016-test-2-test-21B	\N	\N	\N	\N	\N
115	..-data-2016-test-2-test-22A	\N	\N	\N	\N	\N
116	..-data-2016-test-2-test-22B	\N	\N	\N	\N	\N
117	..-data-2016-test-3-test-31A	\N	\N	\N	\N	\N
118	..-data-2016-test-3-test-31B	\N	\N	\N	\N	\N
119	..-data-2016-test-3-test-32A	\N	\N	\N	\N	\N
120	..-data-2016-test-3-test-32B	\N	\N	\N	\N	\N
121	..-data-2016-test-4-test-41A	\N	\N	\N	\N	\N
122	..-data-2016-test-4-test-41B	\N	\N	\N	\N	\N
123	..-data-2016-test-4-test-42A	\N	\N	\N	\N	\N
124	..-data-2016-test-4-test-42B	\N	\N	\N	\N	\N
125	..-data-2017-20180112-Exam-exame-20180112-companion-A	\N	\N	\N	\N	\N
126	..-data-2017-20180112-Exam-exame-20180112-companion-B	\N	\N	\N	\N	\N
127	..-data-2017-20180130-Exam-exame-20180130-companion-A	\N	\N	\N	\N	\N
128	..-data-2017-20180130-Exam-exame-20180130-companion-B	\N	\N	\N	\N	\N
129	..-data-2017-test-1-test-11A	\N	\N	\N	\N	\N
130	..-data-2017-test-1-test-11B	\N	\N	\N	\N	\N
131	..-data-2017-test-1-test-12A	\N	\N	\N	\N	\N
132	..-data-2017-test-1-test-12B	\N	\N	\N	\N	\N
133	..-data-2017-test-1-test-13A	\N	\N	\N	\N	\N
134	..-data-2017-test-1-test-13B	\N	\N	\N	\N	\N
135	..-data-2017-test-2-test-21-A	\N	\N	\N	\N	\N
136	..-data-2017-test-2-test-21-B	\N	\N	\N	\N	\N
137	..-data-2017-test-2-test-22-A	\N	\N	\N	\N	\N
138	..-data-2017-test-2-test-22-B	\N	\N	\N	\N	\N
139	..-data-2017-test-2-test-23-A	\N	\N	\N	\N	\N
140	..-data-2017-test-2-test-23-B	\N	\N	\N	\N	\N
141	..-data-2017-test-3-test-31A	\N	\N	\N	\N	\N
142	..-data-2017-test-3-test-31B	\N	\N	\N	\N	\N
143	..-data-2017-test-3-test-32A	\N	\N	\N	\N	\N
144	..-data-2017-test-3-test-32B	\N	\N	\N	\N	\N
145	..-data-2017-test-3-test-33A	\N	\N	\N	\N	\N
146	..-data-2017-test-3-test-33B	\N	\N	\N	\N	\N
147	..-data-2017-test-4-test-41A	\N	\N	\N	\N	\N
148	..-data-2017-test-4-test-41B	\N	\N	\N	\N	\N
149	..-data-2017-test-4-test-42A	\N	\N	\N	\N	\N
150	..-data-2017-test-4-test-42B	\N	\N	\N	\N	\N
151	..-data-2017-test-4-test-43A	\N	\N	\N	\N	\N
152	..-data-2017-test-4-test-43B	\N	\N	\N	\N	\N
\.


--
-- Data for Name: students; Type: TABLE DATA; Schema: public; Owner: pedro
--

COPY public.students (id) FROM stdin;
\.


--
-- Data for Name: topics; Type: TABLE DATA; Schema: public; Owner: pedro
--

COPY public.topics (id, name) FROM stdin;
\.


--
-- Name: hibernate_sequence; Type: SEQUENCE SET; Schema: public; Owner: pedro
--

SELECT pg_catalog.setval('public.hibernate_sequence', 1, false);


--
-- Name: questions_id_seq; Type: SEQUENCE SET; Schema: public; Owner: pedro
--

SELECT pg_catalog.setval('public.questions_id_seq', 1698, true);


--
-- Name: quizzes_id_seq; Type: SEQUENCE SET; Schema: public; Owner: pedro
--

SELECT pg_catalog.setval('public.quizzes_id_seq', 152, true);


--
-- Name: students_id_seq; Type: SEQUENCE SET; Schema: public; Owner: pedro
--

SELECT pg_catalog.setval('public.students_id_seq', 1, false);


--
-- Name: topics_id_seq; Type: SEQUENCE SET; Schema: public; Owner: pedro
--

SELECT pg_catalog.setval('public.topics_id_seq', 1, false);


--
-- Name: answers answers_pkey; Type: CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.answers
    ADD CONSTRAINT answers_pkey PRIMARY KEY (student_id, question_id, answer_date);


--
-- Name: images images_pkey; Type: CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.images
    ADD CONSTRAINT images_pkey PRIMARY KEY (question_id);


--
-- Name: options options_pkey; Type: CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.options
    ADD CONSTRAINT options_pkey PRIMARY KEY (question_id, option);


--
-- Name: question_has_topic question_has_topic_pkey; Type: CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.question_has_topic
    ADD CONSTRAINT question_has_topic_pkey PRIMARY KEY (topic_id, question_id);


--
-- Name: questions questions_pkey; Type: CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.questions
    ADD CONSTRAINT questions_pkey PRIMARY KEY (id);


--
-- Name: quiz_has_question quiz_has_question_pkey; Type: CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.quiz_has_question
    ADD CONSTRAINT quiz_has_question_pkey PRIMARY KEY (quiz_id, question_id);


--
-- Name: quizzes quizzes_pkey; Type: CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.quizzes
    ADD CONSTRAINT quizzes_pkey PRIMARY KEY (id);


--
-- Name: students students_pkey; Type: CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.students
    ADD CONSTRAINT students_pkey PRIMARY KEY (id);


--
-- Name: topics topics_name_key; Type: CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.topics
    ADD CONSTRAINT topics_name_key UNIQUE (name);


--
-- Name: topics topics_pkey; Type: CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.topics
    ADD CONSTRAINT topics_pkey PRIMARY KEY (id);


--
-- Name: answers answers_question_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.answers
    ADD CONSTRAINT answers_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.questions(id) ON DELETE CASCADE;


--
-- Name: answers answers_quiz_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.answers
    ADD CONSTRAINT answers_quiz_id_fkey FOREIGN KEY (quiz_id) REFERENCES public.quizzes(id) ON DELETE CASCADE;


--
-- Name: answers answers_student_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.answers
    ADD CONSTRAINT answers_student_id_fkey FOREIGN KEY (student_id) REFERENCES public.students(id) ON DELETE CASCADE;


--
-- Name: images images_question_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.images
    ADD CONSTRAINT images_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.questions(id) ON DELETE CASCADE;


--
-- Name: options options_question_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.options
    ADD CONSTRAINT options_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.questions(id) ON DELETE CASCADE;


--
-- Name: question_has_topic question_has_topic_question_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.question_has_topic
    ADD CONSTRAINT question_has_topic_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.questions(id) ON DELETE CASCADE;


--
-- Name: question_has_topic question_has_topic_topic_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.question_has_topic
    ADD CONSTRAINT question_has_topic_topic_id_fkey FOREIGN KEY (topic_id) REFERENCES public.topics(id) ON DELETE CASCADE;


--
-- Name: questions questions_new_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.questions
    ADD CONSTRAINT questions_new_id_fkey FOREIGN KEY (new_id) REFERENCES public.questions(id) ON DELETE CASCADE;


--
-- Name: quiz_has_question quiz_has_question_question_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.quiz_has_question
    ADD CONSTRAINT quiz_has_question_question_id_fkey FOREIGN KEY (question_id) REFERENCES public.questions(id) ON DELETE CASCADE;


--
-- Name: quiz_has_question quiz_has_question_quiz_id_fkey; Type: FK CONSTRAINT; Schema: public; Owner: pedro
--

ALTER TABLE ONLY public.quiz_has_question
    ADD CONSTRAINT quiz_has_question_quiz_id_fkey FOREIGN KEY (quiz_id) REFERENCES public.quizzes(id) ON DELETE CASCADE;


--
-- PostgreSQL database dump complete
--

